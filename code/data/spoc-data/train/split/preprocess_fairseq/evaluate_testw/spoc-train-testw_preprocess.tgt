int main ( ) {  $ ~int c , small , big , a , l ;  $ ~cin >> c >> small >> big >> a >> l ;  $ ~int cnt = 0 ;  $ ~int p = 0 ;  $ ~int v = small ;  $ ~while ( p < c ) {  $ ~~cnt ++ ;  $ ~~if ( cnt == 1 ) {  $ ~~~p += v ;  $ ~~~v = min ( v + a , big ) ;  $ ~~} else {  $ ~~~p -= l ;  $ ~~~p += v ;  $ ~~~v = min ( v + a , big ) ;  $ ~~}  $ ~}  $ ~cout << cnt << endl ;  $ ~return 0 ;  $ }
void A ( int n ) {  $ ~int sum = 0 , tmp ;  $ ~for ( int i = 0 ; i < n ; i ++ ) {  $ ~~cin >> tmp ;  $ ~~sum += tmp ;  $ ~}  $ ~int ans = 0 ;  $ ~for ( int i = 1 ; i <= 5 ; i ++ ) {  $ ~~if ( ( sum + i ) % ( n + 1 ) != 1 ) { ans ++ ; }  $ ~}  $ ~cout << ans << endl ;  $ }  $ int main ( ) {  $ ~int n ;  $ ~cin >> n ;  $ ~A ( n ) ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~long long n , a , b , c ;  $ ~cin >> n >> a >> b >> c ;  $ ~n = n % 4 ;  $ ~long long tot = 4 - n ;  $ ~if ( tot == 4 )  $ ~~cout << 0 << endl ;  $ ~else {  $ ~~if ( tot == 1 )  $ ~~~cout << min ( a , min ( b + c , 3 * c ) ) << endl ;  $ ~~else if ( tot == 2 ) {  $ ~~~cout << min ( 2 * a , min ( b , 2 * c ) ) << endl ;  $ ~~} else if ( tot == 3 ) {  $ ~~~cout << min ( 3 * a , min ( c , b + a ) ) << endl ;  $ ~~}  $ ~}  $ ~return 0 ;  $ }
int main ( ) {  $ ~int a , b , c , d , e , f , g ;  $ ~cin >> a ;  $ ~cin >> b ;  $ ~cin >> c ;  $ ~d = a + b * c ;  $ ~e = a * ( b + c ) ;  $ ~f = a * b * c ;  $ ~g = ( a + b ) * c ;  $ ~int y = a + b + c ;  $ ~int o , p , r ;  $ ~r = max ( d , y ) ;  $ ~o = max ( r , e ) ;  $ ~p = max ( f , g ) ;  $ ~cout << max ( o , p ) << endl ;  $ }
int n , ans = 0 ;  $ int a [ 100005 ] , b [ 100005 ] ;  $ int main ( ) {  $ ~int i ;  $ ~cin >> n ;  $ ~for ( i = 1 ; i <= n ; i ++ ) {  $ ~~cin >> a [ i ] ;  $ ~~b [ i ] = a [ i ] ;  $ ~}  $ ~sort ( a + 1 , a + n + 1 ) ;  $ ~for ( i = 1 ; i <= n ; i ++ ) {  $ ~~if ( a [ i ] != b [ i ] ) { ans ++ ; }  $ ~~if ( ans > 2 ) {  $ ~~~cout << "NO" << endl ;  $ ~~~return 0 ;  $ ~~}  $ ~}  $ ~cout << "YES" << endl ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~int t = 5 ;  $ ~int sum = 0 ;  $ ~while ( t -- ) {  $ ~~int x ;  $ ~~cin >> x ;  $ ~~sum += x ;  $ ~}  $ ~if ( sum % 5 == 0 && sum != 0 )  $ ~~cout << sum / 5 << endl ;  $ ~else  $ ~~cout << - 1 << endl ;  $ }
int graph [ 105 ] [ 105 ] ;  $ int x [ 105 ] , y [ 105 ] ;  $ int visted [ 105 ] , n ;  $ void dfs ( int s ) {  $ ~visted [ s ] = 1 ;  $ ~for ( int i = 1 ; i <= n ; i ++ ) {  $ ~~if ( graph [ s ] [ i ] && visted [ i ] == 0 ) dfs ( i ) ;  $ ~}  $ ~return ;  $ }  $ int main ( ) {  $ ~int i , j , k ;  $ ~cin >> n ;  $ ~for ( i = 1 ; i <= n ; i ++ ) cin >> x [ i ] >> y [ i ] ;  $ ~for ( i = 1 ; i <= n ; i ++ ) {  $ ~~for ( j = 1 ; j <= n ; j ++ ) {  $ ~~~if ( x [ i ] == x [ j ] || y [ i ] == y [ j ] ) graph [ i ] [ j ] = 1 ;  $ ~~}  $ ~}  $ ~int ans = 0 ;  $ ~for ( i = 1 ; i <= n ; i ++ ) {  $ ~~if ( visted [ i ] == 0 ) {  $ ~~~dfs ( i ) ;  $ ~~~ans ++ ;  $ ~~}  $ ~}  $ ~cout << ans - 1 << endl ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~int n ;  $ ~cin >> n ;  $ ~string in ;  $ ~cin >> in ;  $ ~char temp = 'D' ;  $ ~int cnt = 0 ;  $ ~for ( int i = 0 ; i < n ; ++ i ) {  $ ~~if ( temp == 'U' && in [ i ] == 'R' || temp == 'R' && in [ i ] == 'U' ) {  $ ~~~temp = 'D' ;  $ ~~} else if ( temp == 'U' && in [ i ] == 'U' || temp == 'R' && in [ i ] == 'R' ) {  $ ~~~++ cnt ;  $ ~~} else {  $ ~~~if ( in [ i ] == 'U' ) {  $ ~~~~temp = 'U' ;  $ ~~~~++ cnt ;  $ ~~~} else {  $ ~~~~temp = 'R' ;  $ ~~~~++ cnt ;  $ ~~~}  $ ~~}  $ ~}  $ ~cout << cnt << endl ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~string s ;  $ ~cin >> s ;  $ ~int l = s . size ( ) ;  $ ~if ( s [ 0 ] >= 'a' && s [ 0 ] <= 'z' ) {  $ ~~cout << char ( s [ 0 ] - 32 ) ;  $ ~} else {  $ ~~cout << s [ 0 ] ;  $ ~}  $ ~for ( int i = 1 ; i < l ; i ++ ) { cout << s [ i ] ; }  $ ~cout << endl ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~long long int q ;  $ ~cin >> q ;  $ ~if ( ( q ) % 4 == 0 || ( q ) % 4 == 3 )  $ ~~cout << 0 << "\n" ;  $ ~else  $ ~~cout << "1\n" ;  $ }
int main ( ) {  $ ~long long n ;  $ ~cin >> n ;  $ ~if ( n % 2 == 0 )  $ ~~cout << "Mahmoud" << endl ;  $ ~else  $ ~~cout << "Ehab" << endl ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~int a1 , a2 , a3 , a4 , a5 , a6 ;  $ ~cin >> a1 >> a2 >> a3 >> a4 >> a5 >> a6 ;  $ ~int answer = 0 ;  $ ~answer += ( a1 + a2 + a3 ) * ( a1 + a2 + a3 ) ;  $ ~answer -= ( a1 ) * ( a1 ) ;  $ ~answer -= ( a5 ) * ( a5 ) ;  $ ~answer -= ( a3 ) * ( a3 ) ;  $ ~cout << answer << endl ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~long long n , a , b , c ;  $ ~cin >> n >> a >> b >> c ;  $ ~long long k = n % 4 ;  $ ~if ( k == 0 ) {  $ ~~cout << "0" << endl ;  $ ~} else if ( k == 3 ) {  $ ~~if ( a <= b + c && a <= 3 * c )  $ ~~~cout << a << endl ;  $ ~~else if ( b + c <= 3 * c )  $ ~~~cout << b + c << endl ;  $ ~~else  $ ~~~cout << 3 * c << endl ;  $ ~} else if ( k == 2 ) {  $ ~~if ( 2 * a <= b && 2 * a <= 2 * c ) {  $ ~~~cout << 2 * a << endl ;  $ ~~} else if ( b <= 2 * c ) {  $ ~~~cout << b << endl ;  $ ~~} else  $ ~~~cout << 2 * c << endl ;  $ ~} else if ( k == 1 ) {  $ ~~if ( ( 3 * a <= ( a + b ) ) && 3 * a <= c ) {  $ ~~~cout << 3 * a << endl ;  $ ~~} else if ( a + b <= c ) {  $ ~~~cout << a + b << endl ;  $ ~~} else  $ ~~~cout << c << endl ;  $ ~}  $ ~return 0 ;  $ }
int main ( ) {  $ ~int n ;  $ ~cin >> n ;  $ ~while ( n -- ) {  $ ~~int a ;  $ ~~cin >> a ;  $ ~~if ( a == 1 ) {  $ ~~~cout << "HARD\n" ;  $ ~~~exit ( 0 ) ;  $ ~~}  $ ~}  $ ~cout << "EASY\n" ;  $ ~return 0 ;  $ }
long long int x1 , yy1 ;  $ long long int x2 , y2 ;  $ int main ( ) {  $ ~cin >> x1 >> yy1 ;  $ ~cin >> x2 >> y2 ;  $ ~long long int d = max ( abs ( x1 - x2 ) , abs ( yy1 - y2 ) ) ;  $ ~cout << d << "\n" ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~int n ;  $ ~string s ;  $ ~cin >> n >> s ;  $ ~for ( int i = 0 ; i < n ; i ++ ) {  $ ~~if ( s [ i ] == 'o' && s [ i + 1 ] == 'g' && s [ i + 2 ] == 'o' ) {  $ ~~~i = i + 2 ;  $ ~~~while ( s [ i + 1 ] == 'g' && s [ i + 2 ] == 'o' ) { i += 2 ; }  $ ~~~cout << "***" ;  $ ~~} else  $ ~~~cout << s [ i ] ;  $ ~}  $ ~cout << endl ;  $ }
int main ( ) {  $ ~int a , b , c ;  $ ~cin >> a >> b >> c ;  $ ~a ++ ;  $ ~while ( a -- ) {  $ ~~if ( b >= 2 * a && c >= 4 * a ) { break ; }  $ ~}  $ ~cout << a + 2 * a + 4 * a << endl ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~long long n , m ;  $ ~cin >> n >> m ;  $ ~int f [ n + 1 ] ;  $ ~int s [ n + 1 ] ;  $ ~for ( int i = 0 ; i < n ; i ++ ) { cin >> f [ i ] ; }  $ ~for ( int i = 0 ; i < m ; i ++ ) { cin >> s [ i ] ; }  $ ~int rs = INT_MAX ;  $ ~for ( int i = 0 ; i < n ; i ++ ) {  $ ~~for ( int j = 0 ; j < m ; j ++ ) {  $ ~~~if ( f [ i ] == s [ j ] ) {  $ ~~~~rs = min ( rs , f [ i ] ) ;  $ ~~~} else {  $ ~~~~rs = min ( rs , f [ i ] * 10 + s [ j ] ) ;  $ ~~~~rs = min ( rs , s [ j ] * 10 + f [ i ] ) ;  $ ~~~}  $ ~~}  $ ~}  $ ~cout << rs << endl ;  $ ~;  $ }
int main ( ) {  $ ~int n , k ;  $ ~string s ;  $ ~cin >> n >> k ;  $ ~cin >> s ;  $ ~int a [ 26 ] = { 0 } ;  $ ~for ( int i = 0 ; i < n ; i ++ ) { a [ s [ i ] - 'A' ] ++ ; }  $ ~int min = 100005 ;  $ ~for ( int i = 0 ; i < k ; i ++ ) {  $ ~~if ( a [ i ] < min ) min = a [ i ] ;  $ ~}  $ ~cout << min * k << endl ;  $ }
int main ( ) {  $ ~int a ;  $ ~int s1 = 0 ;  $ ~int s2 = 0 ;  $ ~for ( int i = 0 ; i < 3 ; i ++ ) {  $ ~~int p ;  $ ~~cin >> p ;  $ ~~s1 = s1 + p ;  $ ~}  $ ~for ( int i = 0 ; i < 3 ; i ++ ) {  $ ~~int p ;  $ ~~cin >> p ;  $ ~~s2 = s2 + p ;  $ ~}  $ ~int n ;  $ ~cin >> n ;  $ ~int r = s1 / 5 ;  $ ~int k = s2 / 10 ;  $ ~int p1 = s1 % 5 ;  $ ~int p2 = s2 % 10 ;  $ ~int f = 0 ;  $ ~if ( p1 == 0 && p2 == 0 ) { f = 1 ; }  $ ~if ( r + k <= ( n - 2 ) ) {  $ ~~cout << "YES" << endl ;  $ ~} else if ( ( r + k ) == n && f == 1 ) {  $ ~~cout << "YES" << endl ;  $ ~} else if ( ( r + k <= n - 1 && p1 == 0 ) || ( r + k <= n - 1 && p2 == 0 ) ) {  $ ~~cout << "YES" << endl ;  $ ~} else {  $ ~~cout << "NO" << endl ;  $ ~}  $ }
int main ( ) {  $ ~int n , m ;  $ ~cin >> n >> m ;  $ ~vector < int > a ( n ) ;  $ ~vector < int > b ( m ) ;  $ ~for ( int i = 0 ; i < n ; ++ i ) { cin >> a [ i ] ; }  $ ~for ( int i = 0 ; i < m ; ++ i ) { cin >> b [ i ] ; }  $ ~int ans = 100500 ;  $ ~for ( int i = 0 ; i < n ; ++ i ) {  $ ~~for ( int j = 0 ; j < m ; ++ j ) {  $ ~~~if ( a [ i ] == b [ j ] ) {  $ ~~~~ans = min ( ans , a [ i ] ) ;  $ ~~~} else {  $ ~~~~ans = min ( ans , a [ i ] * 10 + b [ j ] ) ;  $ ~~~~ans = min ( ans , b [ j ] * 10 + a [ i ] ) ;  $ ~~~}  $ ~~}  $ ~}  $ ~cout << ans << '\n' ;  $ }
int main ( ) {  $ ~int a , b , c , d , e , f , s1 , u , sum = - 9999 , res , n ;  $ ~string s , s2 ;  $ ~cin >> n ;  $ ~for ( int i = 0 ; i < n ; i ++ ) {  $ ~~cin >> s >> s1 >> u >> a >> b >> c >> d >> e ;  $ ~~res = s1 * 100 - u * 50 + a + b + c + d + e ;  $ ~~if ( res > sum ) {  $ ~~~sum = res ;  $ ~~~s2 = s ;  $ ~~}  $ ~}  $ ~cout << s2 << endl ;  $ ~return 0 ;  $ }
int gcd ( int a , int b ) {  $ ~return b ? gcd ( b , a % b ) : a ;  $ }  $ int main ( ) {  $ ~int a , b , n , simon = 1 ;  $ ~cin >> a >> b >> n ;  $ ~while ( n ) {  $ ~~if ( simon )  $ ~~~n -= gcd ( max ( n , a ) , min ( n , a ) ) , simon = 0 ;  $ ~~else  $ ~~~n -= gcd ( max ( n , b ) , min ( n , b ) ) , simon = 1 ;  $ ~}  $ ~cout << simon << '\n' ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~string s ;  $ ~cin >> s ;  $ ~int contiguous = 1 ;  $ ~for ( size_t i = 1 ; i < s . length ( ) ; ++ i ) {  $ ~~if ( s [ i ] == s [ i - 1 ] ) {  $ ~~~contiguous += 1 ;  $ ~~~if ( contiguous == 7 ) {  $ ~~~~cout << "YES" << endl ;  $ ~~~~return 0 ;  $ ~~~}  $ ~~} else {  $ ~~~contiguous = 1 ;  $ ~~}  $ ~}  $ ~cout << "NO" << endl ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~int a , b , c , d , w , x , y , z , j , v ;  $ ~cin >> a >> b >> c ;  $ ~w = a + ( b * c ) ;  $ ~x = a * ( b + c ) ;  $ ~y = a * b * c ;  $ ~z = ( a + b ) * c ;  $ ~v = a + b + c ;  $ ~if ( w >= x && w >= y && w >= z && x >= v )  $ ~~cout << w << endl ;  $ ~else if ( x >= w && x >= y && x >= z && x >= v )  $ ~~cout << x << endl ;  $ ~else if ( y >= w && y >= x && y >= z && y >= v )  $ ~~cout << y << endl ;  $ ~else if ( z >= w && z >= x && z >= y && z >= v )  $ ~~cout << z << endl ;  $ ~else if ( v > w && v > x && v > y && v > z )  $ ~~cout << v << endl ;  $ ~return 0 ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~int a , b , c ;  $ ~while ( cin >> a >> b >> c ) {  $ ~~int p [ 6 ] , max , i ;  $ ~~p [ 0 ] = a + b + c ;  $ ~~p [ 1 ] = ( a + b ) * c ;  $ ~~p [ 2 ] = a * ( b + c ) ;  $ ~~p [ 3 ] = a * b * c ;  $ ~~p [ 4 ] = a + b * c ;  $ ~~p [ 5 ] = a * b + c ;  $ ~~max = p [ 0 ] ;  $ ~~for ( i = 1 ; i < 6 ; i ++ ) {  $ ~~~if ( p [ i ] > max ) max = p [ i ] ;  $ ~~}  $ ~~cout << max << endl ;  $ ~}  $ }
int main ( ) {  $ ~int n , a [ 100 ] , sum = 0 , cnt = 0 ;  $ ~cin >> n ;  $ ~for ( int i = 0 ; i < n ; i ++ ) {  $ ~~cin >> a [ i ] ;  $ ~~sum += a [ i ] ;  $ ~}  $ ~for ( int i = 1 ; i < 6 ; i ++ )  $ ~~if ( ( sum + i ) % ( n + 1 ) != 1 ) cnt ++ ;  $ ~cout << cnt << endl ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~int t , i , x , y , j , f ;  $ ~cin >> t ;  $ ~int a [ t ] [ 2 ] ;  $ ~for ( j = 0 ; j < t ; j ++ ) {  $ ~~for ( i = 0 ; i < 2 ; i ++ ) { cin >> a [ j ] [ i ] ; }  $ ~}  $ ~for ( i = 0 ; i < t ; i ++ ) { cout << a [ i ] [ 0 ] << " " << ( a [ i ] [ 1 ] / a [ i ] [ 0 ] ) * a [ i ] [ 0 ] << endl ; }  $ ~return 0 ;  $ }
int main ( ) {  $ ~int n , ans = 0 ;  $ ~char temp ;  $ ~cin >> n ;  $ ~int turn = 1 ;  $ ~bool act [ 3 ] = { 0 , 1 , 0 } ;  $ ~while ( cin >> temp ) {  $ ~~bool t = ( temp == 'a' ? 1 : 0 ) ;  $ ~~if ( turn % n == 1 && act [ 0 ] == act [ 1 ] && act [ 1 ] == act [ 2 ] ) ans ++ ;  $ ~~if ( turn % n == 0 )  $ ~~~act [ 2 ] = t ;  $ ~~else if ( turn % n == n - 1 )  $ ~~~act [ 1 ] = t ;  $ ~~else if ( turn % n == n - 2 )  $ ~~~act [ 0 ] = t ;  $ ~~turn ++ ;  $ ~}  $ ~cout << ans << endl ;  $ ~return 0 ;  $ }
int a [ 12 ] ;  $ int pic [ 100 ] [ 100 ] ;  $ void printall ( ) {  $ ~for ( int i = 1 ; i <= 6 ; i ++ ) {  $ ~~for ( int j = 1 ; j <= 27 ; j ++ ) {  $ ~~~if ( pic [ i ] [ j ] == 1 ) cout << "+" ;  $ ~~~if ( pic [ i ] [ j ] == 2 ) cout << "-" ;  $ ~~~if ( pic [ i ] [ j ] == 3 ) cout << "|" ;  $ ~~~if ( pic [ i ] [ j ] == 4 ) cout << "O" ;  $ ~~~if ( pic [ i ] [ j ] == 5 ) cout << "." ;  $ ~~~if ( pic [ i ] [ j ] == 6 ) cout << "#" ;  $ ~~~if ( pic [ i ] [ j ] == 7 ) cout << ")" ;  $ ~~~if ( pic [ i ] [ j ] == 8 ) cout << "D" ;  $ ~~}  $ ~~cout << endl ;  $ ~}  $ }  $ int main ( ) {  $ ~int n ;  $ ~cin >> n ;  $ ~if ( n >= 1 ) {  $ ~~n -- ;  $ ~~a [ 1 ] ++ ;  $ ~}  $ ~int ii = 1 ;  $ ~while ( n > 0 ) {  $ ~~if ( n <= 3 ) {  $ ~~~a [ ii ] += n ;  $ ~~~n = 0 ;  $ ~~} else {  $ ~~~a [ ii ] += 3 ;  $ ~~~n -= 3 ;  $ ~~~ii ++ ;  $ ~~}  $ ~}  $ ~pic [ 1 ] [ 1 ] = pic [ 1 ] [ 26 ] = pic [ 6 ] [ 1 ] = pic [ 6 ] [ 26 ] = 1 ;  $ ~for ( int i = 2 ; i <= 25 ; i ++ ) { pic [ 1 ] [ i ] = pic [ 6 ] [ i ] = 2 ; }  $ ~for ( int i = 2 ; i <= 5 ; i ++ ) { pic [ i ] [ 1 ] = pic [ i ] [ 26 ] = 3 ; }  $ ~pic [ 2 ] [ 27 ] = pic [ 5 ] [ 27 ] = 7 ;  $ ~for ( int i = 3 ; i <= 25 ; i += 2 ) {  $ ~~for ( int j = 2 ; j <= 5 ; j ++ ) {  $ ~~~pic [ j ] [ i ] = 5 ;  $ ~~~if ( j == 2 && i == 25 ) { pic [ j ] [ i ] = 8 ; }  $ ~~}  $ ~}  $ ~for ( int i = 3 ; i <= 25 ; i ++ ) { pic [ 4 ] [ i ] = 5 ; }  $ ~pic [ 2 ] [ 24 ] = pic [ 3 ] [ 24 ] = pic [ 5 ] [ 24 ] = 3 ;  $ ~if ( a [ 1 ] == 4 ) { pic [ 2 ] [ 2 ] = pic [ 3 ] [ 2 ] = pic [ 5 ] [ 2 ] = pic [ 4 ] [ 2 ] = 4 ; }  $ ~if ( a [ 1 ] == 0 ) { pic [ 2 ] [ 2 ] = pic [ 3 ] [ 2 ] = pic [ 5 ] [ 2 ] = pic [ 4 ] [ 2 ] = 6 ; }  $ ~if ( a [ 1 ] == 3 ) {  $ ~~pic [ 2 ] [ 2 ] = pic [ 3 ] [ 2 ] = pic [ 4 ] [ 2 ] = 4 ;  $ ~~pic [ 5 ] [ 2 ] = 6 ;  $ ~}  $ ~if ( a [ 1 ] == 2 ) {  $ ~~pic [ 2 ] [ 2 ] = pic [ 3 ] [ 2 ] = 4 ;  $ ~~pic [ 5 ] [ 2 ] = pic [ 4 ] [ 2 ] = 6 ;  $ ~}  $ ~if ( a [ 1 ] == 1 ) {  $ ~~pic [ 2 ] [ 2 ] = 4 ;  $ ~~pic [ 5 ] [ 2 ] = pic [ 4 ] [ 2 ] = pic [ 3 ] [ 2 ] = 6 ;  $ ~}  $ ~for ( int i = 2 ; i <= 11 ; i ++ ) {  $ ~~if ( a [ i ] == 3 ) { pic [ 2 ] [ i * 2 ] = pic [ 3 ] [ i * 2 ] = pic [ 5 ] [ i * 2 ] = 4 ; }  $ ~~if ( a [ i ] == 0 ) { pic [ 2 ] [ i * 2 ] = pic [ 3 ] [ i * 2 ] = pic [ 5 ] [ i * 2 ] = 6 ; }  $ ~~if ( a [ i ] == 1 ) {  $ ~~~pic [ 2 ] [ i * 2 ] = 4 ;  $ ~~~pic [ 3 ] [ i * 2 ] = pic [ 5 ] [ i * 2 ] = 6 ;  $ ~~}  $ ~~if ( a [ i ] == 2 ) {  $ ~~~pic [ 2 ] [ i * 2 ] = pic [ 3 ] [ i * 2 ] = 4 ;  $ ~~~pic [ 5 ] [ i * 2 ] = 6 ;  $ ~~}  $ ~}  $ ~printall ( ) ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~int n ;  $ ~cin >> n ;  $ ~string s ;  $ ~cin >> s ;  $ ~int x = 0 , y = 0 , c = 0 ;  $ ~for ( int i = 0 ; i < s . length ( ) ; i ++ ) {  $ ~~for ( int j = i ; j < n ; j ++ ) {  $ ~~~if ( s [ j ] == 'U' )  $ ~~~~x ++ ;  $ ~~~else if ( s [ j ] == 'D' )  $ ~~~~x -- ;  $ ~~~else if ( s [ j ] == 'R' )  $ ~~~~y ++ ;  $ ~~~else  $ ~~~~y -- ;  $ ~~~if ( x == 0 && y == 0 ) c ++ ;  $ ~~}  $ ~~x = 0 , y = 0 ;  $ ~}  $ ~cout << c << endl ;  $ }
int main ( ) {  $ ~int sum1 = 0 , sum2 = 0 ;  $ ~for ( int i = 0 ; i < 3 ; i ++ ) {  $ ~~int x ;  $ ~~cin >> x ;  $ ~~sum1 += x ;  $ ~}  $ ~for ( int i = 0 ; i < 3 ; i ++ ) {  $ ~~int x ;  $ ~~cin >> x ;  $ ~~sum2 += x ;  $ ~}  $ ~int cnt = ( sum1 + 4 ) / 5 + ( sum2 + 9 ) / 10 ;  $ ~int n ;  $ ~cin >> n ;  $ ~puts ( cnt <= n ? "YES" : "NO" ) ;  $ ~return ( 0 ) ;  $ }
long long int power ( long long int x , long long int n , long long int m ) {  $ ~if ( n == 0 ) return 1 ;  $ ~if ( n == 1 ) return x ;  $ ~x %= m ;  $ ~if ( n % 2 ) return ( x * ( power ( ( x * x ) % m , n / 2 , m ) % m ) ) % m ;  $ ~return power ( ( x * x ) % m , n / 2 , m ) % m ;  $ }  $ int main ( ) {  $ ~long long int hy , ay , dy , hm , am , dm , h , a , d ;  $ ~cin >> hy >> ay >> dy >> hm >> am >> dm >> h >> a >> d ;  $ ~long long int ans = 1000000000000000 ;  $ ~for ( long long int atk = ay ; atk <= 200 ; atk ++ ) {  $ ~~for ( long long int def = dy ; def <= 100 ; def ++ ) {  $ ~~~if ( atk <= dm ) continue ;  $ ~~~long long int t = hm / ( atk - dm ) ;  $ ~~~if ( hm % ( atk - dm ) != 0 ) t ++ ;  $ ~~~long long int hr = t * ( max ( 0 LL , am - def ) ) + 1 ;  $ ~~~long long int cost = 0 ;  $ ~~~if ( hr > hy ) cost += ( hr - hy ) * h ;  $ ~~~if ( atk > ay ) cost += ( atk - ay ) * a ;  $ ~~~if ( def > dy ) cost += ( def - dy ) * d ;  $ ~~~if ( ans > cost ) { ans = cost ; }  $ ~~}  $ ~}  $ ~cout << ans << endl ;  $ }
int main ( ) {  $ ~int t = 29 , red , green , blue ;  $ ~cin >> red >> green >> blue ;  $ ~while ( red > 0 || green > 0 || blue > 0 ) {  $ ~~t = t + 1 ;  $ ~~red = red - 2 ;  $ ~~if ( red <= 0 && green <= 0 && blue <= 0 ) { break ; }  $ ~~t = t + 1 ;  $ ~~green = green - 2 ;  $ ~~if ( red <= 0 && green <= 0 && blue <= 0 ) { break ; }  $ ~~t = t + 1 ;  $ ~~blue = blue - 2 ;  $ ~~if ( red <= 0 && green <= 0 && blue <= 0 ) { break ; }  $ ~}  $ ~cout << t << endl ;  $ }
int mina ( int a , int b ) {  $ ~if ( a <= b )  $ ~~return a ;  $ ~else  $ ~~return b ;  $ }  $ int main ( ) {  $ ~int x , y , m ;  $ ~cin >> x >> y ;  $ ~m = mina ( x / 2 , y / 24 ) ;  $ ~x -= m * 2 ;  $ ~y -= m * 24 ;  $ ~if ( x == 1 && y >= 34 ) {  $ ~~x = 0 ;  $ ~~y -= 34 ;  $ ~}  $ ~if ( x == 0 ) { y -= ( y / 44 ) * 44 ; }  $ ~m = mina ( x / 3 , y / 14 ) ;  $ ~x -= m * 3 ;  $ ~y -= m * 14 ;  $ ~m = mina ( x / 4 , y / 4 ) ;  $ ~x -= m * 4 ;  $ ~y -= m * 4 ;  $ ~if ( ( x >= 2 && y >= 2 ) || ( x >= 1 && y >= 12 ) || y >= 22 )  $ ~~cout << "Ciel\n" ;  $ ~else  $ ~~cout << "Hanako\n" ;  $ ~return 0 ;  $ }
long long int target ;  $ int main ( ) {  $ ~int test ;  $ ~cin >> test ;  $ ~int a , b ;  $ ~while ( test -- ) {  $ ~~cin >> a >> b ;  $ ~~target = 1 ll * a * b ;  $ ~~int low = 1 , high = 1e6 ;  $ ~~if ( a == 1 and b == 1 ) {  $ ~~~cout << "Yes\n" ;  $ ~~~continue ;  $ ~~}  $ ~~if ( ( a == 1 and b != 1 ) or ( b == 1 and a != 1 ) ) {  $ ~~~cout << "No\n" ;  $ ~~~continue ;  $ ~~}  $ ~~while ( low < high ) {  $ ~~~int mid = ( low + high ) / 2 ;  $ ~~~if ( 1 ll * mid * mid * mid < target )  $ ~~~~low = mid + 1 ;  $ ~~~else  $ ~~~~high = mid ;  $ ~~}  $ ~~if ( 1 ll * low * low * low == target and ( a % low == 0 ) and ( b % low == 0 ) )  $ ~~~cout << "Yes\n" ;  $ ~~else  $ ~~~cout << "No\n" ;  $ ~}  $ ~return 0 ;  $ }
int n ;  $ int a [ 100005 ] ;  $ int a2 [ 100005 ] ;  $ int main ( ) {  $ ~int cnt = 0 ;  $ ~cin >> n ;  $ ~for ( int i = 0 ; i < n ; ++ i ) {  $ ~~cin >> a [ i ] ;  $ ~~a2 [ i ] = a [ i ] ;  $ ~}  $ ~sort ( a , a + n ) ;  $ ~for ( int i = 0 ; i < n ; ++ i ) { cnt += ( a [ i ] != a2 [ i ] ) ; }  $ ~if ( cnt <= 2 )  $ ~~cout << "YES\n" ;  $ ~else  $ ~~cout << "NO\n" ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~int n ;  $ ~cin >> n ;  $ ~int x = 0 ;  $ ~while ( n -- ) {  $ ~~x ++ ;  $ ~~int s , d ;  $ ~~cin >> s >> d ;  $ ~~if ( x < s )  $ ~~~x = s ;  $ ~~else  $ ~~~while ( ( x - s ) % d ) x ++ ;  $ ~}  $ ~cout << x << '\n' ;  $ }
int main ( ) {  $ ~long long n , a , b , c ;  $ ~cin >> n >> a >> b >> c ;  $ ~long long ans = 0 x3f3f3f3f ;  $ ~if ( n % 4 == 0 )  $ ~~cout << '0' << endl ;  $ ~else {  $ ~~for ( int k = 0 ; k <= 4 ; k ++ ) {  $ ~~~for ( int i = 0 ; i <= 4 ; i ++ ) {  $ ~~~~for ( int j = 0 ; j <= 4 ; j ++ ) {  $ ~~~~~if ( ( n + k + i * 2 + j * 3 ) % 4 == 0 ) ans = min ( ans , k * a + i * b + j * c ) ;  $ ~~~~}  $ ~~~}  $ ~~}  $ ~~cout << ans << endl ;  $ ~}  $ ~return 0 ;  $ }
int main ( ) {  $ ~long long a , b , c , x , y , z , n ;  $ ~cin >> a >> b >> c >> x >> y >> z >> n ;  $ ~long long p = ( a + b + c + 4 ) / 5 ;  $ ~long long q = ( x + y + z + 9 ) / 10 ;  $ ~if ( p + q <= n )  $ ~~cout << "YES"  $ ~~~<< "\n" ;  $ ~else  $ ~~cout << "NO"  $ ~~~<< "\n" ;  $ }
int main ( ) {  $ ~int a1 , a2 , a3 , a4 , a5 , a6 ;  $ ~cin >> a1 >> a2 >> a3 >> a4 >> a5 >> a6 ;  $ ~int triangulo = ( a1 + a2 + a3 ) * ( a1 + a2 + a3 ) ;  $ ~triangulo -= a1 * a1 ;  $ ~triangulo -= a3 * a3 ;  $ ~triangulo -= a5 * a5 ;  $ ~cout << triangulo << endl ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~int n , a , b , c , x ( 0 ) , y ( 0 ) , z ( 0 ) ;  $ ~cin >> n ;  $ ~while ( n -- ) {  $ ~~cin >> a >> b >> c ;  $ ~~x += a ;  $ ~~y += b ;  $ ~~z += c ;  $ ~}  $ ~if ( x == 0 && y == 0 && z == 0 ) {  $ ~~cout << "YES" << endl ;  $ ~} else {  $ ~~cout << "NO" << endl ;  $ ~}  $ ~return 0 ;  $ }
long long n , m , k , maxm ;  $ long long d [ 2002 ] , s [ 2002 ] ;  $ int main ( ) {  $ ~cin >> m >> k ;  $ ~n = m + 1 ;  $ ~for ( long long i = 1 ; i <= m ; i ++ ) { cin >> d [ i ] ; }  $ ~for ( long long i = 1 ; i <= m ; i ++ ) { cin >> s [ i ] ; }  $ ~long long pet = 0 ;  $ ~long long ans = 0 ;  $ ~for ( long long i = 1 ; i <= m ; i ++ ) {  $ ~~pet += s [ i ] ;  $ ~~maxm = max ( maxm , s [ i ] ) ;  $ ~~if ( pet - d [ i ] >= 0 ) {  $ ~~~pet -= d [ i ] ;  $ ~~~ans += d [ i ] ;  $ ~~~continue ;  $ ~~}  $ ~~long long req = d [ i ] - pet ;  $ ~~long long x = req / maxm ;  $ ~~if ( req % maxm != 0 ) x ++ ;  $ ~~ans += d [ i ] ;  $ ~~ans += x * k ;  $ ~~pet += x * maxm ;  $ ~~pet -= d [ i ] ;  $ ~}  $ ~cout << ans << endl ;  $ ~return 0 ;  $ }
int min ( int a , int b ) {  $ ~if ( a < b )  $ ~~return a ;  $ ~else  $ ~~return b ;  $ }  $ int main ( ) {  $ ~long long int n ;  $ ~cin >> n ;  $ ~int * a = new int [ n ] ;  $ ~int * b = new int [ n ] ;  $ ~int count = 0 ;  $ ~for ( int i = 0 ; i < n ; i ++ ) {  $ ~~cin >> a [ i ] ;  $ ~~b [ i ] = a [ i ] ;  $ ~}  $ ~sort ( b , b + n ) ;  $ ~for ( int i = 0 ; i < n ; i ++ ) {  $ ~~if ( a [ i ] != b [ i ] ) { count ++ ; }  $ ~~if ( count > 2 ) {  $ ~~~cout << "NO" << endl ;  $ ~~~return 0 ;  $ ~~}  $ ~}  $ ~cout << "YES" << endl ;  $ }
long long int power ( long long int x , long long int y ) {  $ ~long long int temp ;  $ ~if ( y == 0 ) return 1 ;  $ ~temp = power ( x , y / 2 ) ;  $ ~if ( y % 2 == 0 )  $ ~~return temp * temp ;  $ ~else {  $ ~~if ( y > 0 )  $ ~~~return x * temp * temp ;  $ ~~else  $ ~~~return ( temp * temp ) / x ;  $ ~}  $ }  $ bool prime [ 10000000 ] ;  $ void sieve ( ) {  $ ~memset ( prime , true , sizeof ( prime ) ) ;  $ ~prime [ 0 ] = prime [ 1 ] = false ;  $ ~for ( long long int p = 2 ; p * p <= 10000000 ; p ++ ) {  $ ~~if ( prime [ p ] == true ) {  $ ~~~for ( long long int i = p * 2 ; i <= 10000000 ; i += p ) prime [ i ] = false ;  $ ~~}  $ ~}  $ }  $ long long int gcd ( long long int a , long long int b ) {  $ ~if ( a == 0 ) return b ;  $ ~return gcd ( b % a , a ) ;  $ }  $ int main ( ) {  $ ~long long int n , m ;  $ ~cin >> n >> m ;  $ ~long long int f = 0 ;  $ ~for ( long long int i = 0 ; i < 100000 ; i ++ ) {  $ ~~if ( n % m == 0 ) {  $ ~~~f = 1 ;  $ ~~~break ;  $ ~~}  $ ~~n = n + n % m ;  $ ~}  $ ~if ( f == 0 ) {  $ ~~cout << "No"  $ ~~~<< "\n" ;  $ ~} else {  $ ~~cout << "Yes"  $ ~~~<< "\n" ;  $ ~}  $ ~return 0 ;  $ }
int main ( ) {  $ ~int k , l , m , n , d ;  $ ~cin >> k >> l >> m >> n >> d ;  $ ~int * arr = new int [ d ] ;  $ ~int counter = 0 ;  $ ~for ( int i = 0 ; i < d ; i ++ ) {  $ ~~int j = i + 1 ;  $ ~~if ( j % k == 0 ) arr [ i ] = 1 ;  $ ~~if ( j % l == 0 ) arr [ i ] = 1 ;  $ ~~if ( j % m == 0 ) arr [ i ] = 1 ;  $ ~~if ( j % n == 0 ) arr [ i ] = 1 ;  $ ~~if ( arr [ i ] == 1 ) counter ++ ;  $ ~}  $ ~cout << counter << endl ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~int a [ 5 ] , s = 0 ;  $ ~for ( int i = 0 ; i < 5 ; i ++ ) {  $ ~~cin >> a [ i ] ;  $ ~~s += a [ i ] ;  $ ~}  $ ~if ( s % 5 == 0 && s != 0 ) {  $ ~~cout << s / 5 << endl ;  $ ~} else {  $ ~~cout << "-1\n" ;  $ ~}  $ ~return 0 ;  $ }
const int INF = ( int ) 1e8 ;  $ int dat [ 55 ] , h1 , h2 , a , b , c , d , e ;  $ string s [ 55 ] ;  $ int main ( ) {  $ ~int n ;  $ ~cin >> n ;  $ ~for ( int i = 0 ; i < n ; i ++ ) {  $ ~~cin >> s [ i ] >> h1 >> h2 >> a >> b >> c >> d >> e ;  $ ~~dat [ i ] = h1 * 100 - h2 * 50 + a + b + c + d + e ;  $ ~}  $ ~int mx = - INF ;  $ ~int ans = 0 ;  $ ~for ( int i = 0 ; i < n ; i ++ ) {  $ ~~if ( dat [ i ] > mx ) {  $ ~~~mx = dat [ i ] ;  $ ~~~ans = i ;  $ ~~}  $ ~}  $ ~cout << s [ ans ] << endl ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~int n , flag ;  $ ~while ( cin >> n ) {  $ ~~long long sum = 0 , minx = 0 , xx ;  $ ~~flag = 1 ;  $ ~~for ( int i = 1 ; i <= n ; i ++ ) {  $ ~~~cin >> xx ;  $ ~~~if ( xx % 2 != 0 && flag == 1 ) {  $ ~~~~flag = 0 ;  $ ~~~~minx = xx ;  $ ~~~}  $ ~~~if ( xx % 2 != 0 && minx >= xx ) minx = xx ;  $ ~~~sum += xx ;  $ ~~}  $ ~~if ( sum % 2 == 0 )  $ ~~~cout << sum << endl ;  $ ~~else  $ ~~~cout << sum - minx << endl ;  $ ~}  $ ~return 0 ;  $ }
long long p = 998244353 ;  $ long long ans = 0 ;  $ int read ( ) {  $ ~int x = 0 , f = 1 ;  $ ~char c = getchar ( ) ;  $ ~while ( c < '0' || c > '9' ) {  $ ~~if ( c == '-' ) f = - 1 ;  $ ~~c = getchar ( ) ;  $ ~}  $ ~while ( c >= '0' && c <= '9' ) x = ( x << 1 ) + ( x << 3 ) + ( c ^ 48 ) , c = getchar ( ) ;  $ ~return x * f ;  $ }  $ int main ( ) {  $ ~long long n , m ;  $ ~cin >> n >> m ;  $ ~int dig_n = 0 , dig_m = 0 ;  $ ~long long a = n - 1 , b = m - 1 ;  $ ~int count_n [ 7 ] , count_m [ 7 ] ;  $ ~int ans = 0 ;  $ ~memset ( count_n , 0 , sizeof ( count_n ) ) ;  $ ~memset ( count_m , 0 , sizeof ( count_m ) ) ;  $ ~while ( a != 0 ) {  $ ~~a = a / 7 ;  $ ~~dig_n ++ ;  $ ~}  $ ~while ( b != 0 ) {  $ ~~b = b / 7 ;  $ ~~dig_m ++ ;  $ ~}  $ ~if ( n == 1 ) dig_n = 1 ;  $ ~if ( m == 1 ) dig_m = 1 ;  $ ~if ( dig_n + dig_m > 7 )  $ ~~cout << 0 << endl ;  $ ~else {  $ ~~for ( long long i = 0 ; i <= n - 1 ; i ++ ) {  $ ~~~memset ( count_n , 0 , sizeof ( count_n ) ) ;  $ ~~~a = i ;  $ ~~~int ch = 0 ;  $ ~~~int count = 0 ;  $ ~~~while ( count < dig_n ) {  $ ~~~~int r = a % 7 ;  $ ~~~~a = a / 7 ;  $ ~~~~if ( count_n [ r ] != 0 ) {  $ ~~~~~ch = 1 ;  $ ~~~~~break ;  $ ~~~~} else  $ ~~~~~count_n [ r ] = 1 ;  $ ~~~~count ++ ;  $ ~~~}  $ ~~~if ( ch == 1 ) continue ;  $ ~~~for ( long long j = 0 ; j <= m - 1 ; j ++ ) {  $ ~~~~memset ( count_m , 0 , sizeof ( count_m ) ) ;  $ ~~~~b = j ;  $ ~~~~int ch = 0 ;  $ ~~~~int count = 0 ;  $ ~~~~while ( count < dig_m ) {  $ ~~~~~int r = b % 7 ;  $ ~~~~~b = b / 7 ;  $ ~~~~~if ( count_n [ r ] != 0 || count_m [ r ] != 0 ) {  $ ~~~~~~ch = 1 ;  $ ~~~~~~break ;  $ ~~~~~} else  $ ~~~~~~count_m [ r ] = 1 ;  $ ~~~~~count ++ ;  $ ~~~~}  $ ~~~~if ( ch == 1 )  $ ~~~~~continue ;  $ ~~~~else {  $ ~~~~~ans ++ ;  $ ~~~~}  $ ~~~}  $ ~~}  $ ~~cout << ans << endl ;  $ ~}  $ ~return 0 ;  $ }
int main ( ) {  $ ~long long n , k ;  $ ~cin >> n >> k ;  $ ~if ( k <= ( ( n + 1 ) / 2 ) )  $ ~~cout << ( ( k * 2 ) - 1 ) << endl ;  $ ~else  $ ~~cout << ( k - ( n + 1 ) / 2 ) * 2 << endl ;  $ ~return 0 ;  $ }
int N , A , P [ 3 ] , H ;  $ int main ( ) {  $ ~cin >> N ;  $ ~for ( int i = 1 ; i <= N ; i ++ ) {  $ ~~cin >> A ;  $ ~~P [ A ] ++ ;  $ ~}  $ ~H = min ( P [ 2 ] , P [ 1 ] ) ;  $ ~P [ 2 ] -= H ;  $ ~P [ 1 ] -= H ;  $ ~cout << H + P [ 1 ] / 3 << '\n' ;  $ }
int main ( ) {  $ ~int n , z = 0 ;  $ ~cin >> n ;  $ ~for ( int i = 0 ; i < n ; i ++ ) {  $ ~~int x ;  $ ~~cin >> x ;  $ ~~z += x ;  $ ~}  $ ~int c = 0 ;  $ ~for ( int i = 1 ; i <= 5 ; i ++ ) {  $ ~~if ( ( z + i ) % ( n + 1 ) != 1 ) c ++ ;  $ ~}  $ ~cout << c << '\n' ;  $ }
int y [ 5 ] , m [ 5 ] , s [ 5 ] ;  $ int ans , atkm , atky , mm , my , j , i , sum ;  $ int main ( ) {  $ ~for ( i = 1 ; i <= 3 ; i ++ ) { cin >> y [ i ] ; }  $ ~for ( i = 1 ; i <= 3 ; i ++ ) { cin >> m [ i ] ; }  $ ~for ( i = 1 ; i <= 3 ; i ++ ) { cin >> s [ i ] ; }  $ ~ans = 999999 ;  $ ~for ( i = 0 ; i <= 200 ; i ++ ) {  $ ~~for ( j = 0 ; j <= 200 ; j ++ ) {  $ ~~~sum = s [ 3 ] * j + s [ 2 ] * i ;  $ ~~~atky = i + y [ 2 ] - m [ 3 ] ;  $ ~~~atkm = m [ 2 ] - j - y [ 3 ] ;  $ ~~~if ( atky <= 0 ) { continue ; }  $ ~~~if ( atkm <= 0 ) {  $ ~~~~ans = min ( ans , sum ) ;  $ ~~~~continue ;  $ ~~~}  $ ~~~if ( m [ 1 ] % atky != 0 ) {  $ ~~~~mm = m [ 1 ] / atky + 1 ;  $ ~~~} else {  $ ~~~~mm = m [ 1 ] / atky ;  $ ~~~}  $ ~~~if ( y [ 1 ] % atkm != 0 ) {  $ ~~~~my = y [ 1 ] / atkm + 1 ;  $ ~~~} else {  $ ~~~~my = y [ 1 ] / atkm ;  $ ~~~}  $ ~~~if ( my <= mm ) { sum += ( mm * atkm + 1 - y [ 1 ] ) * s [ 1 ] ; }  $ ~~~ans = min ( ans , sum ) ;  $ ~~}  $ ~}  $ ~cout << ans << endl ;  $ }
int main ( ) {  $ ~int a , b , st ;  $ ~cin >> a >> b >> st ;  $ ~int x = 0 , st_taken ;  $ ~while ( st != 0 ) {  $ ~~st_taken = __gcd ( a , st ) ;  $ ~~st = st - st_taken ;  $ ~~x ++ ;  $ ~~swap ( a , b ) ;  $ ~}  $ ~if ( x % 2 == 1 )  $ ~~cout << 0 << endl ;  $ ~else  $ ~~cout << 1 << endl ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~int x = 0 ;  $ ~int n ;  $ ~cin >> n ;  $ ~for ( int i = 0 ; i < n ; i ++ ) {  $ ~~string str ;  $ ~~cin >> str ;  $ ~~for ( int j = 0 ; j < str . size ( ) ; j ++ ) {  $ ~~~if ( str . at ( j ) == '+' ) {  $ ~~~~x ++ ;  $ ~~~~break ;  $ ~~~}  $ ~~~if ( str . at ( j ) == '-' ) {  $ ~~~~x -- ;  $ ~~~~break ;  $ ~~~}  $ ~~}  $ ~}  $ ~cout << x << endl ;  $ }
int main ( ) {  $ ~int n ;  $ ~int m , t = 0 , k = 0 ;  $ ~cin >> n ;  $ ~for ( int i = 1 ; i <= n ; i ++ ) {  $ ~~cin >> m ;  $ ~~if ( m == 1 ) t ++ ;  $ ~~if ( m == 2 ) k ++ ;  $ ~}  $ ~if ( k >= t ) {  $ ~~cout << t << endl ;  $ ~} else {  $ ~~cout << k + ( t - k ) / 3 << endl ;  $ ~}  $ ~return 0 ;  $ }
long long int n ;  $ int main ( ) {  $ ~cin >> n ;  $ ~if ( n != 0 ) { n ++ ; }  $ ~if ( n % 2 == 0 ) {  $ ~~cout << n / 2 << "\n" ;  $ ~} else {  $ ~~cout << n << "\n" ;  $ ~}  $ ~return 0 ;  $ }
int main ( ) {  $ ~long long int x1 , x2 , x3 , x4 , x5 , x6 , x7 , x8 , x9 , x10 , ans ;  $ ~cin >> x1 >> x2 >> x3 >> x4 >> x5 >> x6 ;  $ ~x7 = pow ( x1 + x2 + x3 , 2 ) ;  $ ~x8 = pow ( x1 , 2 ) ;  $ ~x9 = pow ( x3 , 2 ) ;  $ ~x10 = pow ( x5 , 2 ) ;  $ ~ans = x7 - x8 - x9 - x10 ;  $ ~cout << ans << endl ;  $ }
int a , b ;  $ int main ( ) {  $ ~cin >> a >> b ;  $ ~cout << a + b - 1 << '\n' ;  $ ~for ( int i = 1 ; i <= b ; i ++ ) cout << 1 << " " << i << '\n' ;  $ ~for ( int i = 2 ; i <= a ; i ++ ) cout << i << " " << 1 << '\n' ;  $ }
int main ( ) {  $ ~int n , a , b , c ;  $ ~cin >> n >> a >> b >> c ;  $ ~int t = 4 - n % 4 ;  $ ~long long N [ 100000 ] ;  $ ~int re = 0 x3f3f3f3f ;  $ ~if ( t == 4 && n )  $ ~~re = 0 ;  $ ~else {  $ ~~for ( int i = 0 ; i < 100000 ; i ++ ) { N [ i ] = 0 x3f3f3f3f ; }  $ ~~N [ 0 ] = 0 ;  $ ~~for ( int i = 1 ; i <= 99999 ; i ++ ) { N [ i ] = N [ i - 1 ] + a ; }  $ ~~for ( int i = 2 ; i <= 99999 ; i ++ ) {  $ ~~~if ( b + N [ i - 2 ] < N [ i ] ) N [ i ] = b + N [ i - 2 ] ;  $ ~~}  $ ~~for ( int i = 3 ; i <= 99999 ; i ++ ) {  $ ~~~if ( c + N [ i - 3 ] < N [ i ] ) N [ i ] = c + N [ i - 3 ] ;  $ ~~}  $ ~~for ( int i = t ; i <= 99999 ; i += 4 ) {  $ ~~~if ( N [ i ] < re ) re = N [ i ] ;  $ ~~}  $ ~}  $ ~cout << re << endl ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~string s1 , s2 ;  $ ~cin >> s1 ;  $ ~cin >> s2 ;  $ ~int cnt1 = 0 ;  $ ~int cnt2 = 0 ;  $ ~for ( int i = 0 ; i < s1 . length ( ) ; i ++ ) {  $ ~~if ( s1 [ i ] - '0' == 7 && s2 [ i ] - '0' == 4 ) cnt1 ++ ;  $ ~~if ( s2 [ i ] - '0' == 7 && s1 [ i ] - '0' == 4 ) cnt2 ++ ;  $ ~}  $ ~cout << max ( cnt1 , cnt2 ) << endl ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~int a , b ;  $ ~cin >> a >> b ;  $ ~long long aa = a * 100 , bb = b * 10 , h = 0 ;  $ ~while ( 1 ) {  $ ~~if ( h % 2 == 0 ) {  $ ~~~if ( a >= 2 && b >= 2 ) {  $ ~~~~a -= 2 ;  $ ~~~~b -= 2 ;  $ ~~~} else if ( a >= 1 && b >= 12 ) {  $ ~~~~a -- ;  $ ~~~~b -= 12 ;  $ ~~~} else if ( b >= 22 ) {  $ ~~~~b -= 22 ;  $ ~~~} else {  $ ~~~~cout << "Hanako" << endl ;  $ ~~~~return 0 ;  $ ~~~}  $ ~~} else {  $ ~~~if ( b >= 22 ) {  $ ~~~~b -= 22 ;  $ ~~~} else if ( a >= 1 && b >= 12 ) {  $ ~~~~a -- ;  $ ~~~~b -= 12 ;  $ ~~~} else if ( a >= 2 && b >= 2 ) {  $ ~~~~a -= 2 ;  $ ~~~~b -= 2 ;  $ ~~~} else {  $ ~~~~cout << "Ciel" << endl ;  $ ~~~~return 0 ;  $ ~~~}  $ ~~}  $ ~~h ++ ;  $ ~}  $ ~return 0 ;  $ }
string s1 , s2 ;  $ int num1 , num2 ;  $ int main ( ) {  $ ~cin >> s1 ;  $ ~cin >> s2 ;  $ ~for ( int i = 0 ; i < s1 . size ( ) ; i ++ ) {  $ ~~if ( s1 [ i ] == '7' && s2 [ i ] == '4' )  $ ~~~num1 ++ ;  $ ~~else if ( s1 [ i ] == '4' && s2 [ i ] == '7' )  $ ~~~num2 ++ ;  $ ~}  $ ~cout << max ( num1 , num2 ) << endl ;  $ ~return 0 ;  $ }
int n , m ;  $ bool used [ 7 ] ;  $ int counter = 0 , digitn = 0 , digitm = 0 ;  $ bool checkh ( int x ) {  $ ~if ( x >= 0 && x < n ) return true ;  $ ~return false ;  $ }  $ bool checkm ( int x ) {  $ ~if ( x >= 0 && x < m ) return true ;  $ ~return false ;  $ }  $ void permutem ( int a , int number ) {  $ ~if ( number == digitm ) {  $ ~~if ( checkm ( a ) ) counter ++ ;  $ ~~return ;  $ ~}  $ ~for ( int i = 0 ; i < 7 ; i ++ )  $ ~~if ( ! used [ i ] ) {  $ ~~~used [ i ] = true ;  $ ~~~permutem ( a * 7 + i , number + 1 ) ;  $ ~~~used [ i ] = false ;  $ ~~}  $ }  $ void permuteh ( int a , int number ) {  $ ~if ( number == digitn ) {  $ ~~if ( checkh ( a ) ) permutem ( 0 , 0 ) ;  $ ~~return ;  $ ~}  $ ~for ( int i = 0 ; i < 7 ; i ++ )  $ ~~if ( ! used [ i ] ) {  $ ~~~used [ i ] = true ;  $ ~~~permuteh ( a * 7 + i , number + 1 ) ;  $ ~~~used [ i ] = false ;  $ ~~}  $ }  $ int main ( ) {  $ ~cin >> n >> m ;  $ ~int faken = n - 1 , fakem = m - 1 ;  $ ~if ( n == 1 ) faken = 1 ;  $ ~if ( m == 1 ) fakem = 1 ;  $ ~while ( faken > 0 ) {  $ ~~faken /= 7 ;  $ ~~digitn ++ ;  $ ~}  $ ~while ( fakem > 0 ) {  $ ~~fakem /= 7 ;  $ ~~digitm ++ ;  $ ~}  $ ~if ( digitn + digitm > 7 )  $ ~~cout << 0 << "\n" ;  $ ~else {  $ ~~permuteh ( 0 , 0 ) ;  $ ~~cout << counter << "\n" ;  $ ~}  $ ~return 0 ;  $ }
int main ( ) {  $ ~int n ;  $ ~cin >> n ;  $ ~if ( n % 2 == 0 ) {  $ ~~cout << "Mahmoud\n" ;  $ ~} else {  $ ~~cout << "Ehab\n" ;  $ ~}  $ ~return 0 ;  $ }
int main ( ) {  $ ~int n ;  $ ~cin >> n ;  $ ~if ( n % 2 != 0 )  $ ~~cout << "Ehab" << endl ;  $ ~else  $ ~~cout << "Mahmoud" << endl ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~int a = 0 , b = 0 , c , inp , ca , cb ;  $ ~int i ;  $ ~for ( i = 0 ; i < 3 ; i ++ ) {  $ ~~cin >> inp ;  $ ~~a += inp ;  $ ~}  $ ~for ( i = 0 ; i < 3 ; i ++ ) {  $ ~~cin >> inp ;  $ ~~b += inp ;  $ ~}  $ ~ca = ( a + 4 ) / 5 ;  $ ~cb = ( b + 9 ) / 10 ;  $ ~cin >> c ;  $ ~if ( c >= ca + cb ) {  $ ~~cout << "YES" << endl ;  $ ~} else {  $ ~~cout << "NO" << endl ;  $ ~}  $ ~return 0 ;  $ }
int main ( ) {  $ ~int n ;  $ ~long long ans = 0 , sum = 0 ;  $ ~cin >> n ;  $ ~int i = 1 , x , mn = 0 , cnt = 0 ;  $ ~for ( ; i <= n ; ++ i ) {  $ ~~cin >> x ;  $ ~~if ( x & 1 ) {  $ ~~~++ cnt ;  $ ~~~if ( x < mn || mn == 0 )  $ ~~~~sum += mn , mn = x ;  $ ~~~else  $ ~~~~sum += x ;  $ ~~} else {  $ ~~~ans += x ;  $ ~~}  $ ~}  $ ~if ( cnt & 1 )  $ ~~ans += sum ;  $ ~else  $ ~~ans += sum + mn ;  $ ~cout << ans << endl ;  $ ~return 0 ;  $ }
int h = 0 , ans = 0 ;  $ int r , g , b ;  $ int main ( ) {  $ ~cin >> r >> g >> b ;  $ ~r = ( ( r / 2 ) + ( r % 2 ) - 1 ) * 3 + 1 ;  $ ~g = ( ( g / 2 ) + ( g % 2 ) - 1 ) * 3 + 2 ;  $ ~b = ( ( b / 2 ) + ( b % 2 ) - 1 ) * 3 + 3 ;  $ ~h = max ( r , max ( g , b ) ) ;  $ ~ans = h + 29 ;  $ ~cout << ans << endl ;  $ ~;  $ ~return 0 ;  $ }
int main ( ) {  $ ~int a ;  $ ~cin >> a ;  $ ~cout << a ;  $ ~if ( a > 1 ) cout << " " ;  $ ~for ( int i = 0 ; i < a - 1 ; i ++ ) {  $ ~~cout << i + 1 ;  $ ~~if ( i + 2 != a ) cout << " " ;  $ ~}  $ ~cout << endl ;  $ ~return 0 ;  $ }
int x , r = 1 ;  $ int main ( ) {  $ ~cin >> x ;  $ ~while ( r * r + 1 < 2 * x ) r += 2 ;  $ ~cout << ( x == 3 ? 5 : r ) << endl ;  $ ~return 0 ;  $ }
int ara [ 110 ] ;  $ int main ( ) {  $ ~int ans = 1e9 ;  $ ~int n , m ;  $ ~cin >> n >> m ;  $ ~int a [ n + 1 ] , b [ m + 1 ] ;  $ ~for ( int i = 0 ; i < n ; i ++ ) cin >> a [ i ] ;  $ ~for ( int i = 0 ; i < m ; i ++ ) cin >> b [ i ] ;  $ ~for ( int i = 0 ; i < n ; i ++ ) {  $ ~~for ( int j = 0 ; j < m ; j ++ ) {  $ ~~~if ( a [ i ] == b [ j ] ) ans = min ( ans , a [ i ] ) ;  $ ~~~ans = min ( ans , a [ i ] + 10 * b [ j ] ) ;  $ ~~~ans = min ( ans , b [ j ] + 10 * a [ i ] ) ;  $ ~~}  $ ~}  $ ~cout << ans << endl ;  $ ~return 0 ;  $ }
long long minodd = 69696969696 , blyat , ans , odds ;  $ int main ( ) {  $ ~long long b ;  $ ~cin >> b ;  $ ~for ( int a = 0 ; a < b ; a ++ ) {  $ ~~cin >> blyat ;  $ ~~ans += blyat ;  $ ~~if ( blyat % 2 == 1 ) odds ++ ;  $ ~~if ( minodd > blyat && blyat % 2 == 1 ) minodd = blyat ;  $ ~}  $ ~if ( b == 1 && minodd != 0 && odds > 1 )  $ ~~cout << 0 << endl ;  $ ~else if ( odds % 2 == 1 )  $ ~~cout << ans - minodd << "\n" ;  $ ~else  $ ~~cout << ans << "\n" ;  $ }
int a [ 100010 ] ;  $ int main ( ) {  $ ~int n , tot = 0 ;  $ ~cin >> n ;  $ ~for ( int i = 1 ; i <= n ; i ++ ) cin >> a [ i ] ;  $ ~sort ( a + 1 , a + n + 1 ) ;  $ ~int x = a [ 1 ] , y = a [ n ] ;  $ ~for ( int i = 2 ; i <= n - 1 ; i ++ ) {  $ ~~if ( a [ i ] > x && a [ i ] < y ) tot ++ ;  $ ~}  $ ~cout << tot << endl ;  $ ~return 0 ;  $ }
void print ( long long int a [ ] , long long int n ) {  $ ~for ( long long int i = 0 ; i < n ; i ++ ) { cout << a [ i ] << " " ; }  $ ~cout << endl ;  $ }  $ long long int m ( long long int x ) {  $ ~return x % 1000000007 ;  $ }  $ long long int gcd ( long long int a , long long int b ) {  $ ~if ( a == 0 ) return b ;  $ ~return gcd ( b % a , a ) ;  $ }  $ long long int p ( long long int a , long long int b ) {  $ ~if ( b == 0 ) return 1 ;  $ ~long long int t = p ( a , b / 2 ) ;  $ ~if ( b % 2 == 0 )  $ ~~return t * t ;  $ ~else  $ ~~return a * t * t ;  $ }  $ int main ( ) {  $ ~long long int n ;  $ ~cin >> n ;  $ ~long long int a [ n ] ;  $ ~long long int b [ n ] ;  $ ~long long int sum = 0 ;  $ ~for ( long long int i = 0 ; i < n ; i ++ ) {  $ ~~cin >> a [ i ] >> b [ i ] ;  $ ~~if ( a [ i ] > sum ) {  $ ~~~sum = a [ i ] ;  $ ~~} else {  $ ~~~long long int v = sum - a [ i ] ;  $ ~~~sum = a [ i ] + b [ i ] * ( v / b [ i ] + 1 ) ;  $ ~~}  $ ~}  $ ~cout << sum << endl ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~int a , b , c ;  $ ~cin >> a >> b >> c ;  $ ~int t1 , t2 , t3 ;  $ ~t1 = a / 1 ;  $ ~t2 = b / 2 ;  $ ~t3 = c / 4 ;  $ ~if ( t1 > t2 ) t1 = t2 ;  $ ~if ( t1 > t3 ) t1 = t3 ;  $ ~int sum ;  $ ~sum = 7 * t1 ;  $ ~cout << sum << endl ;  $ }
int gcd ( int n , int m ) {  $ ~if ( n < m ) swap ( n , m ) ;  $ ~if ( m == 0 )  $ ~~return n ;  $ ~else if ( n % m == 0 )  $ ~~return m ;  $ ~else  $ ~~return gcd ( m , n % m ) ;  $ }  $ int main ( ) {  $ ~int a , b , n , k ;  $ ~while ( cin >> a >> b >> n ) {  $ ~~for ( k = 1 ; ; k ++ ) {  $ ~~~if ( k % 2 == 1 ) {  $ ~~~~n -= gcd ( n , a ) ;  $ ~~~~if ( n < 0 ) {  $ ~~~~~cout << 1 << endl ;  $ ~~~~~break ;  $ ~~~~}  $ ~~~} else {  $ ~~~~n -= gcd ( n , b ) ;  $ ~~~~if ( n < 0 ) {  $ ~~~~~cout << 0 << endl ;  $ ~~~~~break ;  $ ~~~~}  $ ~~~}  $ ~~}  $ ~}  $ ~return 0 ;  $ }
int n ;  $ string s ;  $ int main ( ) {  $ ~cin >> n >> s ;  $ ~string ans = "" ;  $ ~for ( int i = 0 ; i < n ; i ++ ) {  $ ~~if ( i < n - 2 && s . substr ( i , 3 ) == "ogo" ) {  $ ~~~ans += "***" ;  $ ~~~i += 3 ;  $ ~~~while ( i < n && s . substr ( i , 2 ) == "go" ) i += 2 ;  $ ~~~i -- ;  $ ~~} else  $ ~~~ans += s [ i ] ;  $ ~}  $ ~cout << ans << "\n" ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~int a ;  $ ~cin >> a ;  $ ~cout << ( ( a + 1 ) / 2 ) % 2 << "\n" ;  $ ~return 0 ;  $ }
int m , k , s [ 1002 ] , d [ 1002 ] ;  $ void Input ( ) {  $ ~int i ;  $ ~cin >> m >> k ;  $ ~for ( i = 1 ; i <= m ; i ++ ) cin >> d [ i ] ;  $ ~for ( i = 1 ; i <= m ; i ++ ) cin >> s [ i ] ;  $ }  $ int main ( ) {  $ ~Input ( ) ;  $ ~int i , p ;  $ ~int sup = 0 ;  $ ~int tmp = 0 ;  $ ~int t = 0 ;  $ ~for ( i = 1 ; i <= m ; i ++ ) {  $ ~~sup += s [ i ] ;  $ ~~if ( tmp < s [ i ] ) {  $ ~~~p = i ;  $ ~~~tmp = s [ i ] ;  $ ~~}  $ ~~while ( sup < d [ i ] ) {  $ ~~~t += k ;  $ ~~~sup += s [ p ] ;  $ ~~}  $ ~~t += d [ i ] ;  $ ~~sup -= d [ i ] ;  $ ~}  $ ~cout << t << endl ;  $ ~return 0 ;  $ }
int gcd ( int x , int y ) {  $ ~int i , r ;  $ ~r = x % y ;  $ ~while ( r != 0 ) {  $ ~~x = y ;  $ ~~y = r ;  $ ~~r = x % y ;  $ ~}  $ ~return y ;  $ }  $ int main ( ) {  $ ~int simon , anti , heap ;  $ ~cin >> simon >> anti >> heap ;  $ ~while ( true ) {  $ ~~heap -= gcd ( simon , heap ) ;  $ ~~if ( heap == 0 ) {  $ ~~~cout << 0 << endl ;  $ ~~~break ;  $ ~~}  $ ~~heap -= gcd ( anti , heap ) ;  $ ~~if ( heap == 0 ) {  $ ~~~cout << 1 << endl ;  $ ~~~break ;  $ ~~}  $ ~}  $ }
int main ( ) {  $ ~int n , i , j , res ;  $ ~cin >> n ;  $ ~string st ;  $ ~cin >> st ;  $ ~res = 0 ;  $ ~for ( i = 0 ; i < n ; i ++ ) {  $ ~~if ( st [ i ] == st [ i + 1 ] ) { res ++ ; }  $ ~}  $ ~cout << res << endl ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~int n , ans = 0 ;  $ ~cin >> n ;  $ ~int freq [ 3 ] = { 0 } ;  $ ~int a [ n ] ;  $ ~for ( int i = 0 ; i < n ; i ++ ) {  $ ~~cin >> a [ i ] ;  $ ~~freq [ a [ i ] ] ++ ;  $ ~}  $ ~if ( freq [ 2 ] >= freq [ 1 ] ) {  $ ~~ans += freq [ 1 ] ;  $ ~} else {  $ ~~ans += freq [ 2 ] ;  $ ~~freq [ 1 ] -= freq [ 2 ] ;  $ ~~ans += freq [ 1 ] / 3 ;  $ ~}  $ ~cout << ans << "\n" ;  $ }
int main ( ) {  $ ~int i = 0 ;  $ ~char s [ 200100 ] , c ;  $ ~while ( ( c = getchar ( ) ) != '\n' ) {  $ ~~while ( i && s [ i - 1 ] < c ) {  $ ~~~s [ i ] = 0 ;  $ ~~~i -- ;  $ ~~}  $ ~~s [ i ++ ] = c ;  $ ~}  $ ~for ( int j = 0 ; j < i ; j ++ ) cout << s [ j ] ;  $ ~cout << endl ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~int n ;  $ ~while ( cin >> n ) {  $ ~~if ( n % 2 ) {  $ ~~~cout << "Ehab" << endl ;  $ ~~} else {  $ ~~~cout << "Mahmoud" << endl ;  $ ~~}  $ ~}  $ ~return 0 ;  $ }
long long int MIN ( long long int a , long long int b ) {  $ ~if ( a > b )  $ ~~return b ;  $ ~else  $ ~~return a ;  $ }  $ long long int MAX ( long long int a , long long int b ) {  $ ~if ( a > b )  $ ~~return a ;  $ ~else  $ ~~return b ;  $ }  $ long long int MOD ( long long int x ) {  $ ~if ( x >= 0 )  $ ~~return x ;  $ ~else  $ ~~return - x ;  $ }  $ int main ( ) {  $ ~long long int sum = 0 ;  $ ~long long int a [ 5 ] ;  $ ~for ( int i = 0 ; i < 5 ; i ++ ) {  $ ~~cin >> a [ i ] ;  $ ~~sum += a [ i ] ;  $ ~}  $ ~if ( sum % 5 == 0 && sum > 0 ) {  $ ~~long long int d = sum / 5 ;  $ ~~cout << d << endl ;  $ ~} else  $ ~~cout << - 1 << endl ;  $ }
int main ( ) {  $ ~long long n ;  $ ~cin >> n ;  $ ~long long a [ n ] ;  $ ~long long b [ n ] ;  $ ~for ( long long i = 0 ; i < n ; i ++ ) {  $ ~~cin >> a [ i ] ;  $ ~~b [ i ] = a [ i ] ;  $ ~}  $ ~long long same = 0 ;  $ ~long long cnt = 0 ;  $ ~long long c = - 1 ;  $ ~long long d = - 1 ;  $ ~for ( long long i = 0 ; i < n - 1 ; i ++ ) {  $ ~~if ( a [ i + 1 ] < a [ i ] ) {  $ ~~~cnt ++ ;  $ ~~~if ( c == - 1 )  $ ~~~~c = i ;  $ ~~~else if ( d == - 1 )  $ ~~~~d = i ;  $ ~~}  $ ~}  $ ~if ( cnt > 2 )  $ ~~cout << "NO" << endl ;  $ ~else {  $ ~~if ( c == - 1 && d == - 1 ) {  $ ~~~cout << "YES" << endl ;  $ ~~} else if ( c != - 1 && d == - 1 ) {  $ ~~~if ( n == 2 )  $ ~~~~cout << "YES" << endl ;  $ ~~~else {  $ ~~~~long long pr = c ;  $ ~~~~while ( a [ c ] == a [ pr ] && pr >= 0 ) { pr -- ; }  $ ~~~~long long dr = c + 1 ;  $ ~~~~while ( a [ c + 1 ] == a [ dr ] && dr < n ) { dr ++ ; }  $ ~~~~pr ++ ;  $ ~~~~dr -- ;  $ ~~~~b [ pr ] = a [ dr ] ;  $ ~~~~b [ dr ] = a [ pr ] ;  $ ~~~~long long ct = 0 ;  $ ~~~~for ( long long i = 0 ; i < n - 1 ; i ++ ) {  $ ~~~~~if ( b [ i ] > b [ i + 1 ] ) ct ++ ;  $ ~~~~}  $ ~~~~if ( ct > 0 )  $ ~~~~~cout << "NO" << endl ;  $ ~~~~else  $ ~~~~~cout << "YES" << endl ;  $ ~~~}  $ ~~} else {  $ ~~~long long ct = 0 ;  $ ~~~long long tp ;  $ ~~~b [ c ] = a [ d + 1 ] ;  $ ~~~b [ d + 1 ] = a [ c ] ;  $ ~~~for ( long long i = 0 ; i < n - 1 ; i ++ ) {  $ ~~~~if ( b [ i ] > b [ i + 1 ] ) ct ++ ;  $ ~~~}  $ ~~~if ( ct > 0 )  $ ~~~~cout << "NO" << endl ;  $ ~~~else  $ ~~~~cout << "YES" << endl ;  $ ~~}  $ ~}  $ }
int main ( ) {  $ ~int a , b , c , d ;  $ ~cin >> a ;  $ ~cin >> b ;  $ ~cin >> c ;  $ ~cin >> d ;  $ ~int sol1 ;  $ ~int sol2 ;  $ ~sol1 = abs ( c - a ) ;  $ ~sol2 = abs ( d - b ) ;  $ ~if ( sol1 > sol2 )  $ ~~cout << sol1 << endl ;  $ ~else  $ ~~cout << sol2 << endl ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~int n , x = 0 ;  $ ~cin >> n ;  $ ~while ( n >= 1 ) {  $ ~~if ( n % 2 == 1 ) {  $ ~~~x ++ ;  $ ~~~n -- ;  $ ~~} else {  $ ~~~n = n / 2 ;  $ ~~}  $ ~}  $ ~cout << x << endl ;  $ ~return 0 ;  $ }
long long gcd ( long long a , long long b ) {  $ ~if ( b == 0 ) return a ;  $ ~return gcd ( b , a % b ) ;  $ }  $ int main ( ) {  $ ~long long a , b ;  $ ~cin >> a >> b ;  $ ~long long x , y ;  $ ~cin >> x >> y ;  $ ~cout << max ( abs ( x - a ) , abs ( y - b ) ) << "\n" ;  $ }
int main ( ) {  $ ~int a , b , c , store ;  $ ~string s = "No" ;  $ ~cin >> a >> b >> c ;  $ ~for ( int i = 0 ; ; i ++ ) {  $ ~~store = c - b * i ;  $ ~~if ( store % a == 0 && store >= 0 ) {  $ ~~~s = "Yes" ;  $ ~~~break ;  $ ~~}  $ ~~store = c - a * i ;  $ ~~if ( store % b == 0 && store >= 0 ) {  $ ~~~s = "Yes" ;  $ ~~~break ;  $ ~~}  $ ~~if ( i * a > c && i * b > c ) break ;  $ ~}  $ ~cout << s << endl ;  $ ~return 0 ;  $ }
const long long N = 1e9 + 3 ;  $ const long long MN = 1e9 ;  $ long long n , m , k , c = 1 ;  $ int main ( ) {  $ ~cin >> n >> k >> m ;  $ ~for ( long long i = 1 ; i <= n ; i ++ ) {  $ ~~for ( long long j = 1 ; j <= k ; j ++ ) {  $ ~~~if ( c == m ) { cout << i << " " << j ; }  $ ~~~c ++ ;  $ ~~~if ( c == m ) { cout << i << " " << j ; }  $ ~~~c ++ ;  $ ~~}  $ ~}  $ ~if ( m % 2 == 1 ) {  $ ~~cout << " L" ;  $ ~} else {  $ ~~cout << " R" ;  $ ~}  $ ~cout << "\n" ;  $ ~return 0 ;  $ }
int lowerbound ( int a ) {  $ ~int lb ;  $ ~if ( a % 2 == 0 )  $ ~~lb = a / 2 - 1 ;  $ ~else  $ ~~lb = a / 2 ;  $ ~return lb ;  $ }  $ int main ( ) {  $ ~int gr , gl , bl , br ;  $ ~cin >> gl >> gr ;  $ ~cin >> bl >> br ;  $ ~int flag ;  $ ~if ( ( gl >= lowerbound ( br ) ) && ( gl <= br + 1 ) )  $ ~~flag = 1 ;  $ ~else if ( ( gr >= lowerbound ( bl ) ) && ( gr <= bl + 1 ) )  $ ~~flag = 1 ;  $ ~else  $ ~~flag = 0 ;  $ ~if ( flag )  $ ~~cout << "YES" << endl ;  $ ~else  $ ~~cout << "NO" << endl ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~long long int i , n , d , a [ 110 ] , cnt = 2 ;  $ ~;  $ ~cin >> n >> d ;  $ ~for ( i = 0 ; i < n ; i ++ ) cin >> a [ i ] ;  $ ~for ( i = 0 ; i < n - 1 ; i ++ ) {  $ ~~if ( ( a [ i + 1 ] - a [ i ] ) > ( 2 * d ) )  $ ~~~cnt += 2 ;  $ ~~else if ( ( a [ i + 1 ] - a [ i ] ) == ( 2 * d ) )  $ ~~~cnt += 1 ;  $ ~}  $ ~cout << cnt << endl ;  $ }
int main ( ) {  $ ~int a , b ;  $ ~cin >> a >> b ;  $ ~cout << ( b >= a ? "Second" : "First" ) << endl ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~long long int n , k ;  $ ~cin >> n >> k ;  $ ~if ( k <= ( n + 1 ) / 2 )  $ ~~cout << ( k - 1 ) * 2 + 1 << endl ;  $ ~else  $ ~~cout << ( k - ( n + 1 ) / 2 - 1 ) * 2 + 2 << endl ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~int a , b , c , d , e , f ;  $ ~cin >> a >> b >> c >> d >> e >> f ;  $ ~b += a + c ;  $ ~cout << b * b - a * a - c * c - e * e << endl ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~int a , b , c ;  $ ~cin >> a >> b >> c ;  $ ~while ( c >= b && c % a ) c -= b ;  $ ~cout << ( c % a ? "No\n" : "Yes\n" ) ;  $ ~return 0 ;  $ }
int n , a_counter , d_counter ;  $ char c ;  $ int main ( ) {  $ ~cin >> n ;  $ ~while ( n ) {  $ ~~cin >> c ;  $ ~~if ( c == 'A' )  $ ~~~a_counter ++ ;  $ ~~else if ( c == 'D' )  $ ~~~d_counter ++ ;  $ ~~n -- ;  $ ~}  $ ~if ( a_counter > d_counter )  $ ~~cout << "Anton"  $ ~~~<< "\n" ;  $ ~else if ( a_counter < d_counter )  $ ~~cout << "Danik"  $ ~~~<< "\n" ;  $ ~else  $ ~~cout << "Friendship"  $ ~~~<< "\n" ;  $ ~return 0 ;  $ }
long long a , b , x , y , z ;  $ int main ( ) {  $ ~cin >> a >> b >> x >> y >> z ;  $ ~for ( int i = 1 ; i <= x ; i ++ ) a -= 2 ;  $ ~for ( int i = 1 ; i <= y ; i ++ ) a -= 1 , b -= 1 ;  $ ~for ( int i = 1 ; i <= z ; i ++ ) b -= 3 ;  $ ~if ( a >= 0 && b >= 0 )  $ ~~cout << "0" << endl ;  $ ~else if ( a < 0 && b < 0 )  $ ~~cout << abs ( a + b ) << endl ;  $ ~else if ( a < 0 )  $ ~~cout << abs ( a ) << endl ;  $ ~else  $ ~~cout << abs ( b ) << endl ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~int T ;  $ ~cin >> T ;  $ ~for ( int i = 0 ; i < T ; ++ i ) {  $ ~~int x ;  $ ~~cin >> x ;  $ ~~if ( x == 1 ) {  $ ~~~cout << "HARD\n" ;  $ ~~~return 0 ;  $ ~~}  $ ~}  $ ~cout << "EASY\n" ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~int n ;  $ ~cin >> n ;  $ ~if ( n % 2 == 0 )  $ ~~cout << "Mahmoud" << endl ;  $ ~else  $ ~~cout << "Ehab" << endl ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~string str ;  $ ~cin >> str ;  $ ~if ( int ( str [ 0 ] ) >= 97 && int ( str [ 0 ] ) <= 122 ) { str [ 0 ] -= 32 ; }  $ ~cout << str << endl ;  $ ~return 0 ;  $ }
int n ;  $ int main ( ) {  $ ~cin >> n ;  $ ~if ( n % 2 == 0 )  $ ~~cout << "Mahmoud" << endl ;  $ ~else  $ ~~cout << "Ehab" << endl ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~long long a ;  $ ~cin >> a ;  $ ~bool easy = true ;  $ ~for ( long long i = 0 ; i < a ; i ++ ) {  $ ~~long long aux ;  $ ~~cin >> aux ;  $ ~~if ( aux ) easy = false ;  $ ~}  $ ~if ( easy ) {  $ ~~cout << "EASY" << endl ;  $ ~} else {  $ ~~cout << "HARD" << endl ;  $ ~}  $ ~return 0 ;  $ }
int h [ 111111 ] ;  $ int main ( ) {  $ ~int n ;  $ ~long long x , y ;  $ ~cin >> n ;  $ ~while ( n -- ) {  $ ~~cin >> x >> y ;  $ ~~long long cunt = 0 ;  $ ~~for ( ; ; ) {  $ ~~~if ( x <= 0 || y <= 0 ) break ;  $ ~~~if ( x < y ) {  $ ~~~~cunt += y / x ;  $ ~~~~y = y % x ;  $ ~~~} else {  $ ~~~~cunt += x / y ;  $ ~~~~x = x % y ;  $ ~~~}  $ ~~}  $ ~~cout << cunt << endl ;  $ ~}  $ ~return 0 ;  $ }
int main ( ) {  $ ~string s ;  $ ~cin >> s ;  $ ~long long ans = 26 ;  $ ~ans += ( 25 * s . length ( ) ) ;  $ ~cout << ans << endl ;  $ }
int main ( ) {  $ ~int t ;  $ ~float ang ;  $ ~cin >> t ;  $ ~while ( t ) {  $ ~~t -- ;  $ ~~cin >> ang ;  $ ~~float n = float ( 360 ) / float ( 180 - float ( ang ) ) ;  $ ~~if ( n == 0 ) {  $ ~~~cout << "NO" << endl ;  $ ~~} else if ( n == int ( n ) ) {  $ ~~~cout << "YES" << endl ;  $ ~~} else {  $ ~~~cout << "NO" << endl ;  $ ~~}  $ ~}  $ ~return 0 ;  $ }
int main ( ) {  $ ~long long x , jawab = 0 ;  $ ~cin >> x ;  $ ~while ( x > 0 ) {  $ ~~if ( x % 2 == 1 )  $ ~~~x -- , jawab ++ ;  $ ~~else  $ ~~~x /= 2 ;  $ ~}  $ ~cout << jawab << endl ;  $ }
int n , m [ 3 ] [ 2 ] ;  $ int main ( ) {  $ ~cin >> n ;  $ ~for ( int i = 0 ; i < 3 ; i ++ ) {  $ ~~for ( int j = 0 ; j < 2 ; j ++ ) { cin >> m [ i ] [ j ] ; }  $ ~}  $ ~int a = min ( m [ 0 ] [ 1 ] , n - m [ 1 ] [ 0 ] - m [ 2 ] [ 0 ] ) ;  $ ~int b = min ( m [ 1 ] [ 1 ] , n - a - m [ 2 ] [ 0 ] ) ;  $ ~cout << a << " " << b << " " << n - a - b << endl ;  $ }
int main ( ) {  $ ~long long a , b ;  $ ~cin >> a >> b ;  $ ~long long answer = a ;  $ ~for ( long long i = 0 ; i <= a ; i ++ ) {  $ ~~if ( 5 * i * ( i + 1 ) > 480 - 2 * b ) {  $ ~~~answer = i - 1 ;  $ ~~~break ;  $ ~~}  $ ~}  $ ~cout << answer << endl ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~int t , s , q ;  $ ~cin >> t >> s >> q ;  $ ~int ans = 0 ;  $ ~while ( t > s ) {  $ ~~s *= q ;  $ ~~ans ++ ;  $ ~}  $ ~cout << ans << endl ;  $ }
int main ( ) {  $ ~int n ;  $ ~cin >> n ;  $ ~for ( int i = 1 ; i < n ; i ++ ) {  $ ~~if ( i % 2 == 1 )  $ ~~~cout << "I hate that " ;  $ ~~else  $ ~~~cout << "I love that " ;  $ ~}  $ ~if ( n % 2 == 1 ) cout << "I hate it" << endl ;  $ ~if ( n % 2 == 0 ) cout << "I love it" << endl ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~long long n ;  $ ~cin >> n ;  $ ~vector < long long > ar ( n ) ;  $ ~for ( long long i = 0 ; i < n ; ++ i ) { cin >> ar [ i ] ; }  $ ~long long tot_arr = 0 ;  $ ~bool block = false ;  $ ~long long len_block ;  $ ~for ( long long i = 0 ; i < n ; ++ i ) {  $ ~~if ( i == 0 ) {  $ ~~~len_block = 1 ;  $ ~~} else if ( ar [ i ] == ar [ i - 1 ] ) {  $ ~~~len_block ++ ;  $ ~~} else {  $ ~~~tot_arr += ( ( len_block ) * ( len_block + 1 ) ) / 2 ;  $ ~~~len_block = 1 ;  $ ~~}  $ ~}  $ ~tot_arr += ( ( len_block ) * ( len_block + 1 ) ) / 2 ;  $ ~cout << tot_arr << endl ;  $ ~return 0 ;  $ }
bool prime [ 123456 ] ;  $ int pri ( int n ) {  $ ~memset ( prime , true , sizeof ( prime ) ) ;  $ ~for ( int i = 2 ; i * i <= n ; i ++ ) {  $ ~~if ( prime [ i ] ) {  $ ~~~for ( int j = 2 * i ; j <= n ; j += i ) prime [ j ] = false ;  $ ~~}  $ ~}  $ }  $ int main ( ) {  $ ~pri ( 120001 ) ;  $ ~int n , k ;  $ ~cin >> n >> k ;  $ ~vector < int > ans ;  $ ~for ( int i = 2 ; i < n ; i ++ ) {  $ ~~if ( prime [ i ] ) {  $ ~~~int got = 0 ;  $ ~~~while ( n % i == 0 ) {  $ ~~~~if ( ans . size ( ) == k - 1 ) {  $ ~~~~~got = 1 ;  $ ~~~~~break ;  $ ~~~~}  $ ~~~~ans . push_back ( i ) ;  $ ~~~~n = n / i ;  $ ~~~}  $ ~~~if ( ans . size ( ) == k - 1 ) {  $ ~~~~got = 1 ;  $ ~~~~break ;  $ ~~~}  $ ~~~if ( got == 1 ) break ;  $ ~~}  $ ~}  $ ~if ( ( ans . size ( ) == k - 1 ) && ( n != 1 ) ) {  $ ~~for ( int i = 0 ; i < ans . size ( ) ; i ++ ) cout << ans [ i ] << " " ;  $ ~~cout << n << endl ;  $ ~} else  $ ~~cout << - 1 << endl ;  $ }
int main ( ) {  $ ~int n ;  $ ~cin >> n ;  $ ~int col [ n ] [ 2 ] ;  $ ~for ( int i = 0 ; i < n ; i ++ ) {  $ ~~cin >> col [ i ] [ 0 ] ;  $ ~~cin >> col [ i ] [ 1 ] ;  $ ~}  $ ~long int ans = 0 ;  $ ~for ( int i = 0 ; i < n ; i ++ ) {  $ ~~for ( int j = i ; j < n ; j ++ ) {  $ ~~~if ( col [ i ] [ 0 ] == col [ j ] [ 1 ] ) { ans ++ ; }  $ ~~~if ( col [ i ] [ 1 ] == col [ j ] [ 0 ] ) { ans ++ ; }  $ ~~}  $ ~}  $ ~cout << ans << endl ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~int n ;  $ ~cin >> n ;  $ ~char a [ n ] [ n ] ;  $ ~for ( int i = 0 ; i < n ; i ++ ) {  $ ~~for ( int j = 0 ; j < n ; j ++ ) { cin >> a [ i ] [ j ] ; }  $ ~}  $ ~for ( int i = 0 ; i < n ; i ++ ) {  $ ~~for ( int j = 0 ; j < n ; j ++ ) {  $ ~~~int c = 0 ;  $ ~~~if ( a [ i - 1 ] [ j ] == 'o' && ( i - 1 ) >= 0 ) c ++ ;  $ ~~~if ( a [ i + 1 ] [ j ] == 'o' && ( i + 1 ) < n ) c ++ ;  $ ~~~if ( a [ i ] [ j - 1 ] == 'o' && ( j - 1 ) >= 0 ) c ++ ;  $ ~~~if ( a [ i ] [ j + 1 ] == 'o' && ( j + 1 ) < n ) c ++ ;  $ ~~~if ( c % 2 == 0 ) {  $ ~~~~continue ;  $ ~~~} else {  $ ~~~~cout << "NO" << endl ;  $ ~~~~return 0 ;  $ ~~~}  $ ~~}  $ ~}  $ ~cout << "YES" << endl ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~int n , x , y , i , len , a [ 100005 ] ;  $ ~string s ;  $ ~cin >> s ;  $ ~len = s . size ( ) ;  $ ~for ( i = 0 ; i < len ; i ++ )  $ ~~if ( s [ i ] != 'a' ) {  $ ~~~x = i ;  $ ~~~break ;  $ ~~}  $ ~if ( i == len )  $ ~~s [ len - 1 ] = 'z' ;  $ ~else {  $ ~~for ( i = x + 1 ; i < len ; i ++ )  $ ~~~if ( s [ i ] == 'a' ) {  $ ~~~~y = i - 1 ;  $ ~~~~break ;  $ ~~~}  $ ~~if ( i == len ) y = len - 1 ;  $ ~~for ( i = x ; i <= y ; i ++ ) s [ i ] = s [ i ] - 1 ;  $ ~}  $ ~cout << s << endl ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~int n , m ;  $ ~cin >> n >> m ;  $ ~while ( m >= 0 ) {  $ ~~for ( int i = 1 ; i <= n ; i ++ ) {  $ ~~~if ( m - i >= 0 ) {  $ ~~~~m -= i ;  $ ~~~} else {  $ ~~~~if ( m < i ) {  $ ~~~~~cout << m << endl ;  $ ~~~~~exit ( 0 ) ;  $ ~~~~}  $ ~~~}  $ ~~}  $ ~}  $ ~cout << m << endl ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~string s1 , s2 , s3 = "" ;  $ ~cin >> s1 >> s2 ;  $ ~for ( int i = 0 ; i < s1 . length ( ) ; i ++ ) {  $ ~~if ( s1 [ i ] != s2 [ i ] )  $ ~~~s3 += "1" ;  $ ~~else  $ ~~~s3 += "0" ;  $ ~}  $ ~cout << s3 << endl ;  $ }
int main ( ) {  $ ~string s = "qwertyuiopasdfghjkl;zxcvbnm,./" ;  $ ~char dire ;  $ ~string cadena ;  $ ~cin >> dire >> cadena ;  $ ~for ( int i = 0 ; i < cadena . size ( ) ; i ++ ) {  $ ~~if ( dire == 'L' ) {  $ ~~~int aux = s . find ( cadena [ i ] ) ;  $ ~~~cout << s [ aux + 1 ] ;  $ ~~}  $ ~~if ( dire == 'R' ) {  $ ~~~int aux = s . find ( cadena [ i ] ) ;  $ ~~~cout << s [ aux - 1 ] ;  $ ~~}  $ ~}  $ ~cout << "\n" ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~int n , k , tf = 0 , tr = 2 , tg = 5 , tb = 8 , trd , trm , tgd , tgm , tbd , tbm ;  $ ~cin >> n >> k ;  $ ~tr = tr * n ;  $ ~tg = tg * n ;  $ ~tb = tb * n ;  $ ~trd = tr / k ;  $ ~trm = tr % k ;  $ ~if ( trm > 0 ) { trd = trd + 1 ; }  $ ~tgd = tg / k ;  $ ~tgm = tg % k ;  $ ~if ( tgm > 0 ) { tgd = tgd + 1 ; }  $ ~tbd = tb / k ;  $ ~tbm = tb % k ;  $ ~if ( tbm > 0 ) { tbd = tbd + 1 ; }  $ ~tf = trd + tgd + tbd ;  $ ~cout << tf << endl ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~int n ;  $ ~cin >> n ;  $ ~for ( int i = 0 ; i < n ; i ++ ) {  $ ~~for ( int j = 0 ; j < n ; j ++ ) {  $ ~~~if ( abs ( i - ( n + 1 ) / 2 + 1 ) + abs ( j - ( n + 1 ) / 2 + 1 ) <= ( n + 1 ) / 2 - 1 )  $ ~~~~cout << "D" ;  $ ~~~else  $ ~~~~cout << "*" ;  $ ~~}  $ ~~cout << endl ;  $ ~}  $ ~return 0 ;  $ }
int main ( ) {  $ ~int a ;  $ ~cin >> a ;  $ ~cout << ( a % 2 ) << '\n' ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~int n , m , i , j , x = 0 ;  $ ~cin >> n >> m ;  $ ~for ( i = 1 ; i <= n ; i ++ ) {  $ ~~for ( j = 1 ; j <= m ; j ++ )  $ ~~~if ( ( i % 2 == 0 && i % 4 != 0 && j != m ) || i % 4 == 0 && j > 1 )  $ ~~~~cout << '.' ;  $ ~~~else  $ ~~~~cout << '#' ;  $ ~~cout << endl ;  $ ~}  $ ~return 0 ;  $ }
int main ( ) {  $ ~int n , m , t = 0 ;  $ ~cin >> n >> m ;  $ ~for ( int b = 0 ; pow ( b , 2 ) <= m ; b ++ ) {  $ ~~int a = m - pow ( b , 2 ) ;  $ ~~if ( pow ( a , 2 ) + b == n ) t ++ ;  $ ~}  $ ~cout << t << endl ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~int a , b , c , s1 , s2 , s3 ;  $ ~cin >> s1 >> s2 >> s3 ;  $ ~a = sqrt ( ( s1 * s3 ) / s2 ) ;  $ ~b = sqrt ( ( s1 * s2 ) / s3 ) ;  $ ~c = sqrt ( ( s2 * s3 ) / s1 ) ;  $ ~cout << 4 * ( a + b + c ) << endl ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~int n ;  $ ~cin >> n ;  $ ~int a [ 2 * n + 1 ] ;  $ ~a [ 0 ] = - 1 ;  $ ~for ( int i = 1 ; i <= 2 * n ; i ++ ) { cin >> a [ i ] ; }  $ ~sort ( a , a + 2 * n + 1 ) ;  $ ~if ( a [ n + 1 ] > a [ n ] )  $ ~~cout << "YES" << endl ;  $ ~else  $ ~~cout << "NO" << endl ;  $ ~return 0 ;  $ }
int freq [ 1005 ] ;  $ int n , m , x , to ;  $ int main ( ) {  $ ~cin >> n >> m ;  $ ~for ( int i = 0 ; i < n ; i ++ ) {  $ ~~cin >> x >> to ;  $ ~~for ( int j = x + 1 ; j <= to ; j ++ ) freq [ j ] = 1 ;  $ ~}  $ ~for ( int i = 1 ; i <= m ; i ++ ) {  $ ~~if ( ! freq [ i ] ) {  $ ~~~puts ( "NO" ) ;  $ ~~~return 0 ;  $ ~~}  $ ~}  $ ~puts ( "YES" ) ;  $ ~return 0 ;  $ }
int p [ 5 ] , a , b ;  $ int ans = 0 ;  $ int main ( ) {  $ ~cin >> p [ 1 ] >> p [ 2 ] >> p [ 3 ] >> p [ 4 ] >> a >> b ;  $ ~int Min = min ( min ( min ( p [ 1 ] , p [ 2 ] ) , p [ 3 ] ) , p [ 4 ] ) ;  $ ~if ( a < Min ) {  $ ~~ans += ( Min - a ) ;  $ ~~if ( b >= Min ) {  $ ~~~cout << ans << endl ;  $ ~~~return 0 ;  $ ~~}  $ ~~ans = b - a + 1 ;  $ ~~cout << ans << endl ;  $ ~} else  $ ~~cout << ans << endl ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~long long sumA = 0 , sumB = 0 , a ;  $ ~int n ;  $ ~cin >> n ;  $ ~for ( int i = 0 ; i < n ; i ++ ) {  $ ~~cin >> a ;  $ ~~sumA = a | sumA ;  $ ~}  $ ~for ( int i = 0 ; i < n ; i ++ ) {  $ ~~cin >> a ;  $ ~~sumB = a | sumB ;  $ ~}  $ ~cout << sumA + sumB << endl ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~char a [ 103 ] ;  $ ~cin >> a ;  $ ~bool one = false ;  $ ~long long zeroCount = 0 ;  $ ~for ( long long i = 0 ; i < strlen ( a ) ; i ++ ) {  $ ~~if ( a [ i ] == '1' )  $ ~~~one = true ;  $ ~~else if ( one )  $ ~~~zeroCount ++ ;  $ ~}  $ ~puts ( ( one && zeroCount >= 6 ) ? "yes" : "no" ) ;  $ }
int main ( ) {  $ ~int n , t ;  $ ~while ( cin >> n >> t ) {  $ ~~for ( int i = 1 ; i <= n ; i ++ ) {  $ ~~~if ( i % 2 ) {  $ ~~~~for ( int j = 0 ; j < t ; j ++ ) cout << '#' ;  $ ~~~~cout << endl ;  $ ~~~} else {  $ ~~~~if ( i % 4 ) {  $ ~~~~~for ( int j = 0 ; j < t - 1 ; j ++ ) cout << '.' ;  $ ~~~~~cout << '#' << endl ;  $ ~~~~} else {  $ ~~~~~cout << '#' ;  $ ~~~~~for ( int j = 0 ; j < t - 1 ; j ++ ) cout << '.' ;  $ ~~~~~cout << endl ;  $ ~~~~}  $ ~~~}  $ ~~}  $ ~}  $ ~return 0 ;  $ }
int main ( ) {  $ ~int n , ts [ 26 ] ;  $ ~string s ;  $ ~cin >> n >> s ;  $ ~if ( n == 1 ) {  $ ~~cout << "Yes" << endl ;  $ ~~return 0 ;  $ ~}  $ ~memset ( ts , 0 , sizeof ( ts ) ) ;  $ ~for ( int i = 0 ; i < n ; i ++ ) { ts [ s [ i ] - 'a' ] ++ ; }  $ ~sort ( ts , ts + 26 ) ;  $ ~if ( ts [ 25 ] < 2 )  $ ~~cout << "No" << endl ;  $ ~else  $ ~~cout << "Yes" << endl ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~int i , n , j , k , flag = 0 , sum = 0 ;  $ ~int a [ 6 ] ;  $ ~for ( i = 0 ; i < 6 ; i ++ ) {  $ ~~cin >> a [ i ] ;  $ ~~sum += a [ i ] ;  $ ~}  $ ~if ( sum % 2 != 1 ) {  $ ~~for ( i = 0 ; i < 6 ; i ++ ) {  $ ~~~for ( j = i + 1 ; j < 6 ; j ++ ) {  $ ~~~~for ( k = j + 1 ; k < 6 ; k ++ ) {  $ ~~~~~if ( a [ i ] + a [ j ] + a [ k ] == ( sum / 2 ) ) {  $ ~~~~~~flag = 1 ;  $ ~~~~~~break ;  $ ~~~~~}  $ ~~~~}  $ ~~~}  $ ~~}  $ ~}  $ ~if ( flag == 1 ) {  $ ~~cout << "YES" << endl ;  $ ~} else {  $ ~~cout << "NO" << endl ;  $ ~}  $ ~return 0 ;  $ }
int main ( ) {  $ ~int n ;  $ ~cin >> n ;  $ ~int min1 , max1 , min2 , max2 , min3 , max3 ;  $ ~cin >> min1 >> max1 ;  $ ~cin >> min2 >> max2 ;  $ ~cin >> min3 >> max3 ;  $ ~if ( max1 + min2 + min3 >= n )  $ ~~cout << n - min2 - min3 << " " << min2 << " " << min3 << "\n" ;  $ ~else if ( max1 + max2 + min3 >= n )  $ ~~cout << max1 << " " << n - max1 - min3 << " " << min3 << "\n" ;  $ ~else  $ ~~cout << max1 << " " << max2 << " " << n - max1 - max2 << "\n" ;  $ ~return 0 ;  $ }
int func ( int arr [ ] , int size , int n ) {  $ ~int sum = 0 ;  $ ~if ( n == 0 ) return 0 ;  $ ~for ( int i = size - 1 ; i >= 0 ; i -- ) {  $ ~~sum += arr [ i ] ;  $ ~~if ( sum >= n ) return ( size - i ) ;  $ ~}  $ ~return - 1 ;  $ }  $ int main ( ) {  $ ~int n ;  $ ~const int size = 12 ;  $ ~int arr [ size ] ;  $ ~cin >> n ;  $ ~for ( int i = 0 ; i < size ; i ++ ) { cin >> arr [ i ] ; }  $ ~sort ( arr , arr + size ) ;  $ ~cout << func ( arr , size , n ) << endl ;  $ }
const double PI = acos ( - 1.0 ) ;  $ const int inf = int ( 1e9 ) ;  $ const int mod = inf + 7 ;  $ long long n , m , k , l , w , h , sum , mx , mn ;  $ int main ( ) {  $ ~mn = ( 1e9 ) , sum = 0 , mx = 0 ;  $ ~cin >> n ;  $ ~long long x , y , sum2 = 0 ;  $ ~while ( n -- ) {  $ ~~cin >> x >> y ;  $ ~~if ( x > y )  $ ~~~sum ++ ;  $ ~~else if ( x < y )  $ ~~~sum2 ++ ;  $ ~}  $ ~if ( sum > sum2 )  $ ~~cout << "Mishka" ;  $ ~else if ( sum2 > sum )  $ ~~cout << "Chris" ;  $ ~else  $ ~~cout << "Friendship is magic!^^" ;  $ ~cout << endl ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~int n , m , arr [ 1000 ] , arr1 [ 1000 ] , count = 0 ;  $ ~cin >> n >> m ;  $ ~for ( int i = 0 ; i < n ; i ++ ) { cin >> arr [ i ] ; }  $ ~for ( int i = 0 ; i < m ; i ++ ) { cin >> arr1 [ i ] ; }  $ ~for ( int i = 0 ; i < m ; i ++ ) {  $ ~~for ( int j = 0 ; j < n ; j ++ ) {  $ ~~~if ( arr [ j ] == - 2 || arr [ j ] == - 3 ) { continue ; }  $ ~~~if ( arr1 [ i ] >= arr [ j ] ) {  $ ~~~~++ count ;  $ ~~~~arr [ j ] = - 2 ;  $ ~~~~break ;  $ ~~~}  $ ~~~if ( arr1 [ i ] < arr [ j ] ) { arr [ j ] = - 3 ; }  $ ~~}  $ ~}  $ ~cout << count << endl ;  $ }
int mp [ 1000 ] [ 1000 ] ;  $ bool check ( int x , int y , int z ) {  $ ~if ( mp [ x ] [ y ] == 1 && mp [ x ] [ z ] == 1 && mp [ y ] [ z ] == 1 ) { return true ; }  $ ~return false ;  $ }  $ int main ( ) {  $ ~memset ( mp , 0 , sizeof ( mp ) ) ;  $ ~int n , m ;  $ ~cin >> n >> m ;  $ ~int cost [ 1000 ] ;  $ ~for ( int i = 1 ; i <= n ; i ++ ) { cin >> cost [ i ] ; }  $ ~for ( int i = 0 ; i < m ; i ++ ) {  $ ~~int x , y ;  $ ~~cin >> x >> y ;  $ ~~mp [ x ] [ y ] = 1 ;  $ ~~mp [ y ] [ x ] = 1 ;  $ ~}  $ ~int sum ;  $ ~int ans = - 1 ;  $ ~for ( int i = 1 ; i <= n ; i ++ )  $ ~~for ( int j = 1 ; j <= n ; j ++ )  $ ~~~for ( int k = 1 ; k <= n ; k ++ ) {  $ ~~~~if ( check ( i , j , k ) ) {  $ ~~~~~sum = cost [ i ] + cost [ j ] + cost [ k ] ;  $ ~~~~~if ( ans == - 1 ) {  $ ~~~~~~ans = sum ;  $ ~~~~~} else {  $ ~~~~~~ans = min ( ans , sum ) ;  $ ~~~~~}  $ ~~~~}  $ ~~~}  $ ~cout << ans << endl ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~int64_t n , i = 1 , d = 0 , y = 2 ;  $ ~cin >> n ;  $ ~while ( n >= 0 ) {  $ ~~n = n - i ;  $ ~~d = d + 1 ;  $ ~~i = i + y ;  $ ~~y = y + 1 ;  $ ~}  $ ~cout << d - 1 << endl ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~int l , w , r , ans = 0 ;  $ ~cin >> l >> w >> r ;  $ ~while ( r -- ) {  $ ~~ans += ( 2 * l ) + ( 2 * ( w - 2 ) ) ;  $ ~~l -= 4 ;  $ ~~w -= 4 ;  $ ~}  $ ~cout << ans << endl ;  $ }
int main ( ) {  $ ~int n ;  $ ~cin >> n ;  $ ~if ( n != 2 )  $ ~~cout << "1" << endl ;  $ ~else  $ ~~cout << "2" << endl ;  $ }
int main ( ) {  $ ~long long int n ;  $ ~long long int arr [ 100005 ] ;  $ ~long long int temp ;  $ ~long long int result = 0 ;  $ ~long long int repeat = 0 ;  $ ~cin >> n ;  $ ~for ( long long int i = 0 ; i < n ; i ++ ) {  $ ~~cin >> temp ;  $ ~~arr [ i ] = temp ;  $ ~}  $ ~for ( long long int i = 0 ; i < n ; i ++ ) {  $ ~~long long int j = i ;  $ ~~if ( j != 0 ) {  $ ~~~if ( arr [ j ] == arr [ j - 1 ] ) {  $ ~~~~result += repeat ;  $ ~~~~repeat -- ;  $ ~~~~continue ;  $ ~~~} else {  $ ~~~~repeat = 0 ;  $ ~~~}  $ ~~}  $ ~~while ( j < n && arr [ j ] == arr [ i ] ) {  $ ~~~repeat ++ ;  $ ~~~result ++ ;  $ ~~~j ++ ;  $ ~~}  $ ~~repeat -- ;  $ ~}  $ ~cout << result << endl ;  $ ~return 0 ;  $ }
int n , k ;  $ bool check ( string s ) {  $ ~bool f [ k + 1 ] = { 0 } ;  $ ~for ( int i = 0 ; i < s . size ( ) ; i ++ ) { f [ s [ i ] - '0' ] = 1 ; }  $ ~for ( int i = 0 ; i <= k ; i ++ ) {  $ ~~if ( f [ i ] == 0 ) return false ;  $ ~}  $ ~return true ;  $ }  $ int main ( ) {  $ ~cin >> n >> k ;  $ ~int ans = 0 ;  $ ~for ( int i = 0 ; i < n ; i ++ ) {  $ ~~string s ;  $ ~~cin >> s ;  $ ~~if ( check ( s ) ) ans ++ ;  $ ~}  $ ~cout << ans << endl ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~int s , v1 , v2 , t1 , t2 ;  $ ~cin >> s >> v1 >> v2 >> t1 >> t2 ;  $ ~int first = ( 2 * t1 ) + ( v1 * s ) ;  $ ~int second = ( 2 * t2 ) + ( v2 * s ) ;  $ ~;  $ ~if ( first < second )  $ ~~cout << "First" << endl ;  $ ~else if ( first > second )  $ ~~cout << "Second" << endl ;  $ ~else  $ ~~cout << "Friendship" << endl ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~string a ;  $ ~int b ;  $ ~cin >> a >> b ;  $ ~int sum = a . size ( ) - 1 ;  $ ~for ( int i = 0 ; i < b ; i ++ ) {  $ ~~if ( a [ sum ] != '0' )  $ ~~~a [ sum ] = a [ sum ] - 1 ;  $ ~~else  $ ~~~sum -- ;  $ ~}  $ ~for ( int i = 0 ; i <= sum ; i ++ ) cout << a [ i ] ;  $ ~cout << endl ;  $ ~return 0 ;  $ }
int n , k , ans ;  $ int main ( ) {  $ ~cin >> n >> k ;  $ ~k = 240 - k ;  $ ~for ( int i = 1 ; i <= n ; ++ i )  $ ~~if ( k - 5 * i >= 0 ) ans ++ , k -= 5 * i ;  $ ~cout << ans << endl ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~int n , a , b , s , t ;  $ ~while ( cin >> n ) {  $ ~~t = 0 ;  $ ~~int r = 0 , z = 0 ;  $ ~~for ( int i = 0 ; i < n ; i ++ ) {  $ ~~~cin >> a >> b ;  $ ~~~r += a ;  $ ~~~z += b ;  $ ~~~s = z - r ;  $ ~~~t = max ( t , s ) ;  $ ~~}  $ ~~cout << t << endl ;  $ ~}  $ ~return 0 ;  $ }
int main ( ) {  $ ~long long int t ;  $ ~cin >> t ;  $ ~while ( t -- ) {  $ ~~long long int a ;  $ ~~cin >> a ;  $ ~~long long int n = 3 , flag = 0 ;  $ ~~while ( 2 ) {  $ ~~~if ( ( n - 2 ) * 180 == n * a ) {  $ ~~~~flag = 1 ;  $ ~~~~break ;  $ ~~~} else if ( ( n - 2 ) * 180 > n * a )  $ ~~~~break ;  $ ~~~n ++ ;  $ ~~}  $ ~~if ( flag == 1 )  $ ~~~cout << "YES" << endl ;  $ ~~else  $ ~~~cout << "NO" << endl ;  $ ~}  $ }
long long a [ 400009 ] ;  $ int main ( ) {  $ ~long long n ;  $ ~cin >> n ;  $ ~for ( int i = 0 ; i < n ; i ++ ) { cin >> a [ i ] ; }  $ ~sort ( a , a + n ) ;  $ ~long long sum = 0 ;  $ ~for ( int i = 0 ; i < n - 1 ; i ++ ) { sum += a [ i ] * ( i + 2 ) ; }  $ ~sum += a [ n - 1 ] * n ;  $ ~cout << sum << endl ;  $ }
int main ( ) {  $ ~set < int > se ;  $ ~int n ;  $ ~int x ;  $ ~cin >> n ;  $ ~for ( int i = 0 ; i < n ; i ++ ) {  $ ~~cin >> x ;  $ ~~if ( x == 0 ) continue ;  $ ~~se . insert ( x ) ;  $ ~}  $ ~cout << se . size ( ) << endl ;  $ }
char a1 [ 20 ] = { 'v' , '<' , '^' , '>' , 'v' , '<' , '^' , '>' , 'v' } ;  $ char a2 [ 20 ] = { 'v' , '>' , '^' , '<' , 'v' , '>' , '^' , '<' , 'v' } ;  $ int main ( ) {  $ ~char s1 , s2 ;  $ ~int num ;  $ ~while ( cin >> s1 ) {  $ ~~getchar ( ) ;  $ ~~cin >> s2 ;  $ ~~cin >> num ;  $ ~~int tep1 ;  $ ~~int tep2 ;  $ ~~tep1 = 0 ;  $ ~~tep2 = 0 ;  $ ~~int ans1 ;  $ ~~ans1 = 0 ;  $ ~~int ans2 ;  $ ~~ans2 = 0 ;  $ ~~num %= 4 ;  $ ~~for ( int i = 0 ; i < 9 ; i ++ ) {  $ ~~~if ( a1 [ i ] == s1 ) {  $ ~~~~if ( a1 [ i + num ] == s2 ) { ans1 = 1 ; }  $ ~~~~break ;  $ ~~~}  $ ~~}  $ ~~for ( int i = 0 ; i < 9 ; i ++ ) {  $ ~~~if ( a2 [ i ] == s1 ) {  $ ~~~~if ( a2 [ i + num ] == s2 ) { ans2 = 1 ; }  $ ~~~~break ;  $ ~~~}  $ ~~}  $ ~~if ( ans1 == 1 && ans2 == 0 ) {  $ ~~~cout << "cw" << endl ;  $ ~~} else if ( ans1 == 0 && ans2 == 1 ) {  $ ~~~cout << "ccw" << endl ;  $ ~~} else {  $ ~~~cout << "undefined" << endl ;  $ ~~}  $ ~}  $ ~return 0 ;  $ }
int main ( ) {  $ ~string word ;  $ ~cin >> word ;  $ ~int l = word . length ( ) ;  $ ~int a = 0 , b = 0 ;  $ ~for ( int i = 0 ; i < word . length ( ) ; i ++ ) {  $ ~~for ( int j = i + 1 ; j < word . length ( ) ; j ++ ) {  $ ~~~if ( word [ i ] == word [ j ] ) word [ j ] = 0 ;  $ ~~}  $ ~}  $ ~for ( int i = 0 ; i < word . length ( ) ; i ++ ) {  $ ~~if ( word [ i ] == 0 ) b ++ ;  $ ~}  $ ~if ( ( l - b ) % 2 == 0 )  $ ~~cout << "CHAT WITH HER!" << endl ;  $ ~else  $ ~~cout << "IGNORE HIM!" << endl ;  $ }
int main ( ) {  $ ~int a , b , c , x , y , z , i , j , k , l , m = 0 , n ;  $ ~cin >> a >> b >> c ;  $ ~k = a + b + c ;  $ ~x = max ( a , max ( b , c ) ) ;  $ ~y = min ( a , min ( b , c ) ) ;  $ ~z = k - ( x + y ) ;  $ ~n = y + z ;  $ ~while ( y + z <= x ) { y ++ ; }  $ ~m = ( y + z ) - n ;  $ ~cout << m << endl ;  $ ~return 0 ;  $ }
const double eps = 1e-7 ;  $ int bin_search ( long long z , long long x , vector < int > npd ) {  $ ~long long l = z , r = npd . size ( ) - 1 , mid = l ;  $ ~while ( l <= r ) {  $ ~~mid = ( l + r ) / 2 ;  $ ~~if ( npd [ mid ] == x * 2 ) return mid ;  $ ~~npd [ mid ] > x * 2 ? r = mid - 1 : l = mid + 1 ;  $ ~}  $ ~return mid ;  $ }  $ int main ( ) {  $ ~int n ;  $ ~cin >> n ;  $ ~for ( int i = 0 ; i < n ; ++ i ) {  $ ~~int a ;  $ ~~cin >> a ;  $ ~~360 % ( 180 - a ) == 0 ? cout << "YES" : cout << "NO" ;  $ ~~cout << endl ;  $ ~}  $ ~return 0 ;  $ }
const int maxn = 1e+5 ;  $ int main ( ) {  $ ~int n , k ;  $ ~int f [ maxn ] ;  $ ~cin >> n >> k ;  $ ~int cot = 0 ;  $ ~for ( int i = 2 ; i <= n ; i ++ ) {  $ ~~while ( n % i == 0 ) {  $ ~~~n /= i ;  $ ~~~f [ cot ++ ] = i ;  $ ~~}  $ ~}  $ ~if ( cot < k ) {  $ ~~cout << "-1" << endl ;  $ ~} else {  $ ~~for ( int i = 0 ; i < k - 1 ; i ++ ) { cout << f [ i ] << " " ; }  $ ~~int sum = 1 ;  $ ~~for ( int i = k - 1 ; i < cot ; i ++ ) { sum *= f [ i ] ; }  $ ~~cout << sum << endl ;  $ ~}  $ }
int main ( ) {  $ ~int n , k ;  $ ~char a [ 120 ] ;  $ ~cin >> n >> k ;  $ ~int st = - 1 ;  $ ~int ed = - 1 ;  $ ~for ( int i = 0 ; i < n ; i ++ ) {  $ ~~cin >> a [ i ] ;  $ ~~if ( a [ i ] == 'G' ) st = i ;  $ ~~if ( a [ i ] == 'T' ) ed = i ;  $ ~}  $ ~for ( int i = st ; i < n ; i += k ) {  $ ~~if ( i == ed ) {  $ ~~~cout << "YES" << endl ;  $ ~~~return 0 ;  $ ~~}  $ ~~if ( a [ i ] == '#' ) break ;  $ ~}  $ ~for ( int i = st ; i >= 0 ; i -= k ) {  $ ~~if ( i == ed ) {  $ ~~~cout << "YES" << endl ;  $ ~~~return 0 ;  $ ~~}  $ ~~if ( a [ i ] == '#' ) break ;  $ ~}  $ ~cout << "NO" << endl ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~int n , i , j , p , q , a ;  $ ~double d ;  $ ~cin >> n ;  $ ~for ( i = 0 ; i < n ; i ++ ) {  $ ~~cin >> a ;  $ ~~d = ( ( 180 * 1.00 ) * 2.00 ) / ( ( 180 * 1.00 ) - ( 1.00 * a ) ) ;  $ ~~if ( d - ( int ) d == 0 )  $ ~~~cout << "YES" << endl ;  $ ~~else  $ ~~~cout << "NO" << endl ;  $ ~}  $ ~return 0 ;  $ }
int main ( ) {  $ ~int h = 0 , e = 0 , l = 0 , ll = 0 , o = 0 , c = 0 ;  $ ~string s ;  $ ~cin >> s ;  $ ~for ( int i = 0 ; i < s . length ( ) ; i ++ ) {  $ ~~if ( s [ i ] == 'h' && h == 0 ) {  $ ~~~c ++ ;  $ ~~~h = 1 ;  $ ~~} else if ( s [ i ] == 'e' && e == 0 && h == 1 ) {  $ ~~~c ++ ;  $ ~~~e = 1 ;  $ ~~} else if ( s [ i ] == 'l' && l == 0 && e == 1 ) {  $ ~~~c ++ ;  $ ~~~l = 1 ;  $ ~~} else if ( s [ i ] == 'l' && ll == 0 && l == 1 ) {  $ ~~~c ++ ;  $ ~~~ll = 1 ;  $ ~~} else if ( s [ i ] == 'o' && o == 0 && ll == 1 ) {  $ ~~~c ++ ;  $ ~~~o = 1 ;  $ ~~}  $ ~~if ( c == 5 ) break ;  $ ~}  $ ~if ( c == 5 )  $ ~~cout << "YES" << endl ;  $ ~else  $ ~~cout << "NO" << endl ;  $ }
const int INF = 0 x3f3f3f3f ;  $ map < string , long long > mp , mmp ;  $ int main ( ) {  $ ~long long i , j , k , l , r , co = 0 ;  $ ~long long n , m , t ;  $ ~cin >> n ;  $ ~string s , s1 , s2 ;  $ ~char ss [ 4 ] , ss1 [ 4 ] ;  $ ~cin >> s2 ;  $ ~for ( i = 0 ; i < n ; i ++ ) {  $ ~~cin >> s ;  $ ~~ss [ 0 ] = s [ 0 ] ;  $ ~~ss [ 1 ] = s [ 1 ] ;  $ ~~ss [ 2 ] = s [ 2 ] ;  $ ~~ss [ 3 ] = '\0' ;  $ ~~s1 = ss ;  $ ~~mmp [ s1 ] ++ ;  $ ~~ss [ 0 ] = s [ 5 ] ;  $ ~~ss [ 1 ] = s [ 6 ] ;  $ ~~ss [ 2 ] = s [ 7 ] ;  $ ~~ss [ 3 ] = '\0' ;  $ ~~s1 = ss ;  $ ~~mp [ s1 ] ++ ;  $ ~}  $ ~if ( mp [ s2 ] == mmp [ s2 ] )  $ ~~cout << "home" << endl ;  $ ~else  $ ~~cout << "contest" << endl ;  $ ~return 0 ;  $ }
long long int choose ( long long int n , long long int m ) {  $ ~long long int ans = 0 ;  $ ~long long int num = 1 ;  $ ~long long int den = 1 ;  $ ~for ( long long int i = 0 ; i < m ; i ++ ) {  $ ~~num *= ( n - i ) ;  $ ~~num = num / ( i + 1 ) ;  $ ~}  $ ~return num ;  $ }  $ bool isPrime ( int n ) {  $ ~if ( n <= 1 ) return false ;  $ ~if ( n <= 3 ) return true ;  $ ~if ( n % 2 == 0 || n % 3 == 0 ) return false ;  $ ~for ( int i = 5 ; i * i <= n ; i = i + 6 ) {  $ ~~if ( n % i == 0 || n % ( i + 2 ) == 0 ) return false ;  $ ~}  $ ~return true ;  $ }  $ long long int gcd ( long long int a , long long int b ) {  $ ~if ( a == 0 ) {  $ ~~return b ;  $ ~} else {  $ ~~return gcd ( b % a , a ) ;  $ ~}  $ }  $ int main ( ) {  $ ~long long int i , j , k , n , m , t ;  $ ~long long int a , b , c , d , ans = 0 , max1 , min2 ;  $ ~cin >> a >> b >> c >> d >> k ;  $ ~if ( a >= c ) {  $ ~~max1 = a ;  $ ~} else {  $ ~~max1 = c ;  $ ~}  $ ~if ( b >= d ) {  $ ~~min2 = d ;  $ ~} else {  $ ~~min2 = b ;  $ ~}  $ ~if ( max1 > min2 ) {  $ ~~cout << 0 << endl ;  $ ~~return 0 ;  $ ~} else {  $ ~~if ( max1 <= min2 ) {  $ ~~~if ( k > min2 || k < max1 ) {  $ ~~~~cout << min2 - max1 + 1 << endl ;  $ ~~~} else {  $ ~~~~cout << min2 - max1 << endl ;  $ ~~~}  $ ~~}  $ ~}  $ ~return 0 ;  $ }
int main ( ) {  $ ~char s [ 25 ] ;  $ ~cin >> s ;  $ ~int len = strlen ( s ) ;  $ ~int sum = 0 ;  $ ~sum = ( 26 - len ) * ( len + 1 ) + ( len ) * len ;  $ ~cout << sum << endl ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~int min , ans , n , k , l , c , d , p , nl , np ;  $ ~int k1 , c1 , p1 ;  $ ~cin >> n >> k >> l >> c >> d >> p >> nl >> np ;  $ ~k1 = ( k * l ) / nl ;  $ ~c1 = c * d ;  $ ~p1 = p / np ;  $ ~min = k1 <= c1 ? k1 : c1 ;  $ ~min = p1 < min ? p1 : min ;  $ ~ans = min / n ;  $ ~cout << ans << endl ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~int n , k ;  $ ~cin >> n >> k ;  $ ~int x , y , m = INT_MIN ;  $ ~for ( int i = 0 ; i < n ; i ++ ) {  $ ~~cin >> x >> y ;  $ ~~if ( y > k )  $ ~~~m = max ( m , x - y + k ) ;  $ ~~else  $ ~~~m = max ( m , x ) ;  $ ~}  $ ~cout << m << endl ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~int n , m ;  $ ~string s ;  $ ~cin >> n >> m >> s ;  $ ~int l , r ;  $ ~char c1 , c2 ;  $ ~for ( int i = 0 ; i < m ; i ++ ) {  $ ~~cin >> l >> r >> c1 >> c2 ;  $ ~~for ( int i = l - 1 ; i < r ; i ++ ) {  $ ~~~if ( s [ i ] == c1 ) { s [ i ] = c2 ; }  $ ~~}  $ ~}  $ ~cout << s << endl ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~int n , m , i , j , c = 0 , ax , ay , bx , by , cx , cy ;  $ ~cin >> n ;  $ ~int a [ n ] [ n ] ;  $ ~cin >> ax >> ay >> bx >> by >> cx >> cy ;  $ ~if ( ( bx - ax ) * ( cx - ax ) > 0 && ( by - ay ) * ( cy - ay ) > 0 )  $ ~~cout << "YES" << endl ;  $ ~else  $ ~~cout << "NO" << endl ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~int n ;  $ ~cin >> n ;  $ ~while ( n -- ) {  $ ~~int a ;  $ ~~cin >> a ;  $ ~~if ( a >= 180 || a <= 0 ) {  $ ~~~cout << "NO" << endl ;  $ ~~~continue ;  $ ~~}  $ ~~if ( ( 360.0 / ( 180 - a ) ) - int ( 360 / ( 180 - a ) ) <= 0 )  $ ~~~cout << "YES" << endl ;  $ ~~else  $ ~~~cout << "NO" << endl ;  $ ~}  $ ~return 0 ;  $ }
int main ( ) {  $ ~int n ;  $ ~cin >> n ;  $ ~string * s = new string [ n ] ;  $ ~int * m = new int [ n ] ;  $ ~int k = n ;  $ ~int i = 0 ;  $ ~while ( k ) {  $ ~~k -- ;  $ ~~cin >> m [ i ] >> s [ i ] ;  $ ~~i ++ ;  $ ~}  $ ~i = 0 ;  $ ~while ( n ) {  $ ~~n -- ;  $ ~~if ( m [ i ] == 2 && s [ i ] [ 0 ] >= s [ i ] [ 1 ] )  $ ~~~cout << "NO" << endl ;  $ ~~else {  $ ~~~cout << "YES" << endl ;  $ ~~~cout << 2 << endl ;  $ ~~~cout << s [ i ] [ 0 ] << ' ' ;  $ ~~~for ( int j = 1 ; j < m [ i ] ; j ++ ) cout << s [ i ] [ j ] ;  $ ~~~cout << endl ;  $ ~~}  $ ~~i ++ ;  $ ~}  $ }
int main ( ) {  $ ~int t , a , i ;  $ ~cin >> t ;  $ ~for ( i = 0 ; i < t ; i ++ ) {  $ ~~cin >> a ;  $ ~~float n = ( 360 * 1.0 ) / ( 180 - a ) ;  $ ~~int c = ( 360 ) / ( 180 - a ) ;  $ ~~if ( n == c * 1.0 )  $ ~~~cout << "YES" << endl ;  $ ~~else  $ ~~~cout << "NO" << endl ;  $ ~}  $ }
int g ( int a ) {  $ ~if ( a < 0 ) { return - a ; }  $ ~return a ;  $ }  $ int n , x , y , xx , yy , l ;  $ int main ( ) {  $ ~cin >> n >> x >> y >> xx >> yy ;  $ ~if ( ! x ) {  $ ~~if ( ! xx ) {  $ ~~~l = g ( y - yy ) ;  $ ~~} else {  $ ~~~if ( xx == n ) {  $ ~~~~l = min ( y + yy + n , n - y + n - yy + n ) ;  $ ~~~} else {  $ ~~~~if ( ! yy ) {  $ ~~~~~l = y + xx ;  $ ~~~~} else {  $ ~~~~~l = n - y + xx ;  $ ~~~~}  $ ~~~}  $ ~~}  $ ~} else {  $ ~~if ( ! y ) {  $ ~~~if ( ! xx ) {  $ ~~~~l = yy + x ;  $ ~~~} else {  $ ~~~~if ( xx == n ) {  $ ~~~~~l = yy + n - x ;  $ ~~~~} else {  $ ~~~~~if ( ! yy ) {  $ ~~~~~~l = g ( x - xx ) ;  $ ~~~~~} else {  $ ~~~~~~l = min ( x + xx + n , n - x + n - xx + n ) ;  $ ~~~~~}  $ ~~~~}  $ ~~~}  $ ~~} else {  $ ~~~if ( x == n ) {  $ ~~~~if ( ! xx ) {  $ ~~~~~l = min ( y + yy + n , n - y + n - yy + n ) ;  $ ~~~~} else {  $ ~~~~~if ( xx == n ) {  $ ~~~~~~l = g ( y - yy ) ;  $ ~~~~~} else {  $ ~~~~~~if ( ! yy ) {  $ ~~~~~~~l = n - xx + y ;  $ ~~~~~~} else {  $ ~~~~~~~l = n - xx + n - y ;  $ ~~~~~~}  $ ~~~~~}  $ ~~~~}  $ ~~~} else {  $ ~~~~if ( ! xx ) {  $ ~~~~~l = n - yy + x ;  $ ~~~~} else {  $ ~~~~~if ( xx == n ) {  $ ~~~~~~l = n - x + n - yy ;  $ ~~~~~} else {  $ ~~~~~~if ( ! yy ) {  $ ~~~~~~~l = min ( x + xx + n , n - x + n - xx + n ) ;  $ ~~~~~~} else {  $ ~~~~~~~l = g ( xx - x ) ;  $ ~~~~~~}  $ ~~~~~}  $ ~~~~}  $ ~~~}  $ ~~}  $ ~}  $ ~cout << l << endl ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~long long int t ;  $ ~cin >> t ;  $ ~while ( t -- ) {  $ ~~long long int l , r ;  $ ~~cin >> l >> r ;  $ ~~while ( ( l | ( l + 1 ) ) <= r ) l = l | ( l + 1 ) ;  $ ~~cout << l << "\n" ;  $ ~}  $ ~return 0 ;  $ }
int main ( ) {  $ ~map < char , char > mp ;  $ ~mp [ '6' ] = 6 ;  $ ~mp [ '7' ] = 7 ;  $ ~mp [ '8' ] = 8 ;  $ ~mp [ '9' ] = 9 ;  $ ~mp [ 'T' ] = 10 ;  $ ~mp [ 'J' ] = 11 ;  $ ~mp [ 'Q' ] = 12 ;  $ ~mp [ 'K' ] = 13 ;  $ ~mp [ 'A' ] = 14 ;  $ ~string t , f , s ;  $ ~cin >> t >> f >> s ;  $ ~if ( f [ 1 ] != s [ 1 ] ) {  $ ~~if ( f [ 1 ] == t [ 0 ] )  $ ~~~cout << "YES" << endl ;  $ ~~else  $ ~~~cout << "NO" << endl ;  $ ~} else {  $ ~~if ( mp [ f [ 0 ] ] > mp [ s [ 0 ] ] )  $ ~~~cout << "YES" << endl ;  $ ~~else  $ ~~~cout << "NO" << endl ;  $ ~}  $ ~return 0 ;  $ }
int main ( ) {  $ ~long long n ;  $ ~cin >> n ;  $ ~for ( long long i = 1 ; i <= n ; i ++ ) {  $ ~~if ( i == 1 )  $ ~~~cout << 2 << '\n' ;  $ ~~else  $ ~~~cout << i * ( i + 1 ) * ( i + 1 ) - ( i - 1 ) << '\n' ;  $ ~}  $ ~return 0 ;  $ }
int Mininum ( long long a , long long b ) {  $ ~if ( b >= a ) swap ( a , b ) ;  $ ~long long c ;  $ ~for ( c = b ; c % a != 0 ; c += b )  $ ~~;  $ ~return c ;  $ }  $ int main ( ) {  $ ~string a , b ;  $ ~long long n ;  $ ~cin >> n >> a >> b ;  $ ~int l1 = a . length ( ) , l2 = b . length ( ) ;  $ ~long long both = Mininum ( l1 , l2 ) ;  $ ~short prog [ both ] = { 0 } ;  $ ~for ( int i = 0 ; i < both ; i ++ ) {  $ ~~if ( a [ i % l1 ] == 'P' ) {  $ ~~~if ( b [ i % l2 ] == 'P' ) {  $ ~~~~prog [ i ] = 0 ;  $ ~~~} else if ( b [ i % l2 ] == 'R' ) {  $ ~~~~prog [ i ] = 1 ;  $ ~~~} else {  $ ~~~~prog [ i ] = 2 ;  $ ~~~}  $ ~~} else if ( a [ i % l1 ] == 'R' ) {  $ ~~~if ( b [ i % l2 ] == 'P' ) {  $ ~~~~prog [ i ] = 2 ;  $ ~~~} else if ( b [ i % l2 ] == 'R' ) {  $ ~~~~prog [ i ] = 0 ;  $ ~~~} else {  $ ~~~~prog [ i ] = 1 ;  $ ~~~}  $ ~~} else {  $ ~~~if ( b [ i % l2 ] == 'P' ) {  $ ~~~~prog [ i ] = 1 ;  $ ~~~} else if ( b [ i % l2 ] == 'R' ) {  $ ~~~~prog [ i ] = 2 ;  $ ~~~} else {  $ ~~~~prog [ i ] = 0 ;  $ ~~~}  $ ~~}  $ ~}  $ ~int loss1 = 0 , loss2 = 0 , rl1 , rl2 ;  $ ~for ( int i = 0 ; i < both ; i ++ ) {  $ ~~if ( prog [ i ] != 0 ) {  $ ~~~if ( prog [ i ] == 1 ) {  $ ~~~~loss2 ++ ;  $ ~~~} else {  $ ~~~~loss1 ++ ;  $ ~~~}  $ ~~}  $ ~}  $ ~rl1 = n / both * loss1 ;  $ ~rl2 = n / both * loss2 ;  $ ~for ( int i = 0 ; i < n % both ; i ++ ) {  $ ~~if ( prog [ i ] == 1 ) rl2 ++ ;  $ ~~if ( prog [ i ] == 2 ) rl1 ++ ;  $ ~}  $ ~cout << rl1 << ' ' << rl2 << endl ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~int a , b , x , y ;  $ ~cin >> a >> b ;  $ ~string str ;  $ ~cin >> str ;  $ ~char m , n ;  $ ~while ( b -- ) {  $ ~~cin >> x >> y ;  $ ~~cin >> m >> n ;  $ ~~for ( int i = x - 1 ; i < y ; i ++ ) {  $ ~~~if ( str [ i ] == m ) { str [ i ] = n ; }  $ ~~}  $ ~}  $ ~cout << str << endl ;  $ }
string str ;  $ set < string > S ;  $ int main ( ) {  $ ~string temp ;  $ ~cin >> str ;  $ ~int len = str . size ( ) ;  $ ~for ( int i = 1 ; i <= len ; i ++ ) {  $ ~~temp = str . substr ( i ) + str . substr ( 0 , i ) ;  $ ~~S . insert ( temp ) ;  $ ~}  $ ~cout << S . size ( ) << endl ;  $ }
int main ( ) {  $ ~long int state ( 0 ) , n , m , x ;  $ ~bool magic ( true ) ;  $ ~cin >> n ;  $ ~while ( n ) {  $ ~~m = n % 10 ;  $ ~~n /= 10 ;  $ ~~if ( m == 1 )  $ ~~~state = 0 ;  $ ~~else if ( m == 4 && state < 2 )  $ ~~~state += 1 ;  $ ~~else  $ ~~~magic = false ;  $ ~}  $ ~if ( state != 0 ) magic = false ;  $ ~if ( magic )  $ ~~cout << "YES" << endl ;  $ ~else  $ ~~cout << "NO" << endl ;  $ ~return 0 ;  $ }
const int maxn = 1000 ;  $ char c [ maxn ] ;  $ int main ( ) {  $ ~int n ;  $ ~int ans = 0 ;  $ ~cin >> n ;  $ ~while ( cin >> c ) {  $ ~~int cnt = 0 ;  $ ~~for ( int i = 0 ; i < strlen ( c ) ; i ++ ) {  $ ~~~if ( c [ i ] >= 'A' && c [ i ] <= 'Z' ) { cnt ++ ; }  $ ~~}  $ ~~ans = max ( ans , cnt ) ;  $ ~}  $ ~cout << ans << endl ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~int N , K ;  $ ~cin >> N >> K ;  $ ~int C ;  $ ~cin >> C ;  $ ~vector < int > arr ( N , 0 ) ;  $ ~for ( int c = 0 ; c < C ; c ++ ) {  $ ~~int tmp ;  $ ~~cin >> tmp ;  $ ~~arr [ tmp - 1 ] = 1 ;  $ ~}  $ ~int cnt = 0 ;  $ ~int res = 0 ;  $ ~for ( int i = 0 ; i < N ; i ++ ) {  $ ~~cnt ++ ;  $ ~~if ( arr [ i ] == 1 ) {  $ ~~~cnt = 0 ;  $ ~~~res ++ ;  $ ~~} else if ( cnt == K ) {  $ ~~~arr [ i ] = 1 ;  $ ~~~cnt = 0 ;  $ ~~~res ++ ;  $ ~~}  $ ~}  $ ~cout << res << endl ;  $ ~return 0 ;  $ }
int maxs = 9999999 ;  $ int main ( ) {  $ ~int n , m ;  $ ~cin >> n >> m ;  $ ~int a [ 105 ] = { 0 } , c [ 105 ] [ 105 ] = { 0 } ;  $ ~for ( int i = 1 ; i <= n ; i ++ ) cin >> a [ i ] ;  $ ~for ( int i = 1 ; i <= m ; i ++ ) {  $ ~~int u , v ;  $ ~~cin >> u >> v ;  $ ~~c [ u ] [ v ] = 1 ;  $ ~~c [ v ] [ u ] = 1 ;  $ ~}  $ ~for ( int i = 1 ; i <= n ; i ++ ) {  $ ~~for ( int j = i + 1 ; j <= n ; j ++ )  $ ~~~for ( int o = j + 1 ; o <= n ; o ++ ) {  $ ~~~~if ( c [ i ] [ j ] && c [ j ] [ o ] && c [ i ] [ o ] ) {  $ ~~~~~int sum = a [ i ] + a [ j ] + a [ o ] ;  $ ~~~~~maxs = min ( maxs , sum ) ;  $ ~~~~}  $ ~~~}  $ ~}  $ ~if ( maxs == 9999999 )  $ ~~cout << - 1 << endl ;  $ ~else  $ ~~cout << maxs << endl ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~int n , x ;  $ ~cin >> n >> x ;  $ ~int y ;  $ ~int s ( 0 ) ;  $ ~for ( int i = 0 ; i < n ; i ++ ) {  $ ~~cin >> y ;  $ ~~s += y ;  $ ~}  $ ~s = abs ( s ) ;  $ ~if ( s == 0 ) {  $ ~~cout << 0 << '\n' ;  $ ~~return 0 ;  $ ~}  $ ~if ( s < x ) {  $ ~~cout << 1 << '\n' ;  $ ~~return 0 ;  $ ~}  $ ~int ans = 0 ;  $ ~while ( s > 0 ) {  $ ~~s -= x ;  $ ~~ans ++ ;  $ ~}  $ ~cout << ans << '\n' ;  $ ~return 0 ;  $ }
int n , m , a [ 10001 ] , b [ 10001 ] , cnt [ 10001 ] , maxi ;  $ int main ( ) {  $ ~cin >> n ;  $ ~for ( int I = 0 ; I < n ; I ++ ) cin >> a [ I ] ;  $ ~cin >> m ;  $ ~for ( int J = 0 ; J < m ; J ++ ) {  $ ~~cin >> b [ J ] ;  $ ~~for ( int I = 0 ; I < n ; I ++ )  $ ~~~if ( b [ J ] % a [ I ] == 0 ) {  $ ~~~~cnt [ b [ J ] / a [ I ] ] ++ ;  $ ~~~~maxi = max ( maxi , b [ J ] / a [ I ] ) ;  $ ~~~}  $ ~}  $ ~cout << cnt [ maxi ] << endl ;  $ }
int main ( ) {  $ ~int n ;  $ ~cin >> n ;  $ ~char c ;  $ ~int cnt = 0 ;  $ ~for ( int i = 0 ; i < n ; i ++ ) {  $ ~~cin >> c ;  $ ~~if ( c == '1' )  $ ~~~cnt ++ ;  $ ~~else {  $ ~~~cout << cnt ;  $ ~~~cnt = 0 ;  $ ~~}  $ ~}  $ ~cout << cnt << endl ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~int m , n , temp , i , j ;  $ ~vector < int > a ;  $ ~cin >> m >> n ;  $ ~for ( i = 0 ; i < n ; i ++ ) {  $ ~~cin >> temp ;  $ ~~a . push_back ( temp ) ;  $ ~}  $ ~sort ( a . begin ( ) , a . end ( ) ) ;  $ ~int min = 1000000 ;  $ ~for ( i = 0 , j = m - 1 ; j < n ; i ++ , j ++ ) {  $ ~~if ( ( a [ j ] - a [ i ] ) < min ) min = a [ j ] - a [ i ] ;  $ ~}  $ ~cout << min << "\n" ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~vector < char > v1 ;  $ ~vector < char > v2 ;  $ ~long long a ;  $ ~cin >> a ;  $ ~string s1 , s2 ;  $ ~cin >> s1 >> s2 ;  $ ~int e1 , e2 ;  $ ~e1 = s1 . length ( ) ;  $ ~e2 = s2 . length ( ) ;  $ ~long long ans1 = 0 , ans2 = 0 ;  $ ~for ( int i = 0 ; i < e1 * e2 ; i ++ ) {  $ ~~if ( s1 [ i % e1 ] == s2 [ i % e2 ] ) {  $ ~~~ans1 += 0 ;  $ ~~~ans2 += 0 ;  $ ~~} else if ( s1 [ i % e1 ] == 'S' && s2 [ i % e2 ] == 'P' ) {  $ ~~~ans1 ++ ;  $ ~~} else if ( s1 [ i % e1 ] == 'P' && s2 [ i % e2 ] == 'S' ) {  $ ~~~ans2 ++ ;  $ ~~} else if ( s1 [ i % e1 ] == 'P' && s2 [ i % e2 ] == 'R' ) {  $ ~~~ans1 ++ ;  $ ~~} else if ( s1 [ i % e1 ] == 'R' && s2 [ i % e2 ] == 'P' ) {  $ ~~~ans2 ++ ;  $ ~~} else if ( s1 [ i % e1 ] == 'R' && s2 [ i % e2 ] == 'S' ) {  $ ~~~ans1 ++ ;  $ ~~} else if ( s1 [ i % e1 ] == 'S' && s2 [ i % e2 ] == 'R' ) {  $ ~~~ans2 ++ ;  $ ~~}  $ ~}  $ ~ans1 *= a / ( e1 * e2 ) ;  $ ~ans2 *= a / ( e1 * e2 ) ;  $ ~a %= ( e1 * e2 ) ;  $ ~for ( int i = 0 ; i < a ; i ++ ) {  $ ~~if ( s1 [ i % e1 ] == s2 [ i % e2 ] ) {  $ ~~~ans1 += 0 ;  $ ~~~ans2 += 0 ;  $ ~~} else if ( s1 [ i % e1 ] == 'S' && s2 [ i % e2 ] == 'P' ) {  $ ~~~ans1 ++ ;  $ ~~} else if ( s1 [ i % e1 ] == 'P' && s2 [ i % e2 ] == 'S' ) {  $ ~~~ans2 ++ ;  $ ~~} else if ( s1 [ i % e1 ] == 'P' && s2 [ i % e2 ] == 'R' ) {  $ ~~~ans1 ++ ;  $ ~~} else if ( s1 [ i % e1 ] == 'R' && s2 [ i % e2 ] == 'P' ) {  $ ~~~ans2 ++ ;  $ ~~} else if ( s1 [ i % e1 ] == 'R' && s2 [ i % e2 ] == 'S' ) {  $ ~~~ans1 ++ ;  $ ~~} else if ( s1 [ i % e1 ] == 'S' && s2 [ i % e2 ] == 'R' ) {  $ ~~~ans2 ++ ;  $ ~~}  $ ~}  $ ~cout << ans2 << " " << ans1 << endl ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~long long int n , m , k , s = 0 , i , j = 0 , h = 0 ;  $ ~cin >> n >> m >> k ;  $ ~for ( i = 0 ; i < k ; i ++ ) {  $ ~~if ( j + 1 <= n - j && h + 1 <= m - 1 ) {  $ ~~~if ( j + 1 != n - j )  $ ~~~~s += 2 * ( m - 2 * h - 2 ) ;  $ ~~~else  $ ~~~~s += 2 * ( m - 2 * h - 2 ) ;  $ ~~~if ( h + 1 != m - h )  $ ~~~~s += 2 * ( n - 2 * j ) ;  $ ~~~else  $ ~~~~s += 2 * ( n - 2 * j ) ;  $ ~~~h += 2 ;  $ ~~~j += 2 ;  $ ~~} else  $ ~~~break ;  $ ~}  $ ~cout << s << endl ;  $ }
int x , t , a , b , da , db ;  $ int sum ;  $ int main ( ) {  $ ~cin >> x >> t >> a >> b >> da >> db ;  $ ~if ( x == 0 ) {  $ ~~cout << "YES" << endl ;  $ ~~return 0 ;  $ ~}  $ ~for ( int i = 0 ; i < t ; i ++ ) {  $ ~~for ( int j = 0 ; j < t ; j ++ ) {  $ ~~~int sum1 = a - ( da * i ) ;  $ ~~~int sum2 = b - ( db * j ) ;  $ ~~~if ( sum1 == x || sum2 == x || ( sum1 + sum2 ) == x ) {  $ ~~~~cout << "YES" << endl ;  $ ~~~~return 0 ;  $ ~~~}  $ ~~}  $ ~}  $ ~cout << "NO" << endl ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~int n , x , s = 0 ;  $ ~cin >> n >> x ;  $ ~for ( int i = 1 ; i <= n ; i ++ ) {  $ ~~int a ;  $ ~~cin >> a ;  $ ~~s += a ;  $ ~}  $ ~s = abs ( s ) ;  $ ~cout << ( s + x - 1 ) / x << "\n" ;  $ ~return 0 ;  $ }
int n , a , b , c , d , e , f ;  $ void solve ( ) {  $ ~cin >> n >> a >> b >> c >> d >> e >> f ;  $ ~int d1 = a - c , d3 = a - e ;  $ ~int d2 = b - d , d4 = b - f ;  $ ~if ( d1 < 0 && d3 < 0 || d1 > 0 && d3 > 0 )  $ ~~if ( d2 < 0 && d4 < 0 || d2 > 0 && d4 > 0 )  $ ~~~cout << "YES\n" ;  $ ~~else  $ ~~~cout << "NO\n" ;  $ ~else  $ ~~cout << "NO\n" ;  $ }  $ int main ( ) {  $ ~solve ( ) ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~int n , a [ 100 ] ;  $ ~cin >> n ;  $ ~string ans = "-1" ;  $ ~for ( int i = 0 ; i < n ; ++ i ) { cin >> a [ i ] ; }  $ ~if ( n > 1 ) {  $ ~~int s = a [ n - 2 ] ;  $ ~~int t = a [ n - 1 ] ;  $ ~~if ( t == 0 )  $ ~~~ans = "UP" ;  $ ~~else if ( t == 15 )  $ ~~~ans = "DOWN" ;  $ ~~else if ( s < t )  $ ~~~ans = "UP" ;  $ ~~else  $ ~~~ans = "DOWN" ;  $ ~} else {  $ ~~int t = a [ n - 1 ] ;  $ ~~if ( t == 0 )  $ ~~~ans = "UP" ;  $ ~~else if ( t == 15 )  $ ~~~ans = "DOWN" ;  $ ~}  $ ~cout << ans << endl ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~int n , m ;  $ ~cin >> n ;  $ ~m = n ;  $ ~int a [ 6 ] = { 0 } ;  $ ~string b [ 6 ] , c [ 6 ] ;  $ ~b [ 0 ] = "purple" ;  $ ~b [ 1 ] = "green" ;  $ ~b [ 2 ] = "blue" ;  $ ~b [ 3 ] = "orange" ;  $ ~b [ 4 ] = "red" ;  $ ~b [ 5 ] = "yellow" ;  $ ~c [ 0 ] = "Power" ;  $ ~c [ 1 ] = "Time" ;  $ ~c [ 2 ] = "Space" ;  $ ~c [ 3 ] = "Soul" ;  $ ~c [ 4 ] = "Reality" ;  $ ~c [ 5 ] = "Mind" ;  $ ~while ( n -- ) {  $ ~~string s ;  $ ~~cin >> s ;  $ ~~for ( int i = 0 ; i < 6 ; i ++ ) {  $ ~~~if ( s == b [ i ] ) a [ i ] ++ ;  $ ~~}  $ ~}  $ ~cout << 6 - m << endl ;  $ ~for ( int i = 0 ; i < 6 ; i ++ ) {  $ ~~if ( a [ i ] == 0 ) cout << c [ i ] << endl ;  $ ~}  $ ~return 0 ;  $ }
int main ( ) {  $ ~int a [ 3 ] , s = 100000 , d ;  $ ~cin >> a [ 0 ] >> a [ 1 ] >> a [ 2 ] ;  $ ~sort ( a , a + 3 ) ;  $ ~for ( int i = 1 ; i <= a [ 2 ] ; i ++ ) {  $ ~~if ( i <= a [ 0 ] )  $ ~~~d = ( a [ 0 ] + a [ 1 ] + a [ 2 ] ) - ( 3 * i ) ;  $ ~~else if ( i <= a [ 1 ] )  $ ~~~d = ( a [ 1 ] + a [ 2 ] ) - ( a [ 0 ] + i ) ;  $ ~~else if ( i <= a [ 2 ] )  $ ~~~d = ( a [ 2 ] + i ) - ( a [ 0 ] + a [ 1 ] ) ;  $ ~~else  $ ~~~d = ( 3 * i ) - ( a [ 0 ] + a [ 1 ] + a [ 2 ] ) ;  $ ~~s = min ( s , d ) ;  $ ~}  $ ~cout << s << endl ;  $ ~return 0 ;  $ }
int gcd ( int b , int c ) {  $ ~if ( c == 0 ) { return b ; }  $ ~return gcd ( c , b % c ) ;  $ }  $ int main ( ) {  $ ~int a ;  $ ~cin >> a ;  $ ~int x = 0 , y = 0 , z = 0 ;  $ ~for ( int i = 0 ; i < a ; i ++ ) {  $ ~~cin >> x ;  $ ~~y = gcd ( x , y ) ;  $ ~}  $ ~z = a * y ;  $ ~cout << z << endl ;  $ ~return 0 ;  $ }
long long c , d , e , w , n , k , s , m ;  $ double a , b ;  $ long long p [ 301 ] ;  $ int main ( ) {  $ ~cin >> n >> m ;  $ ~for ( int i = 1 ; i <= n ; i ++ ) {  $ ~~for ( int j = 1 ; j <= m ; j ++ ) {  $ ~~~if ( i % 2 == 1 ) cout << "#" ;  $ ~~~if ( c % 2 == 0 && i % 2 == 0 ) {  $ ~~~~if ( j != m )  $ ~~~~~cout << "." ;  $ ~~~~else  $ ~~~~~cout << "#" ;  $ ~~~}  $ ~~~if ( c % 2 == 1 && i % 2 == 0 ) {  $ ~~~~if ( j == 1 )  $ ~~~~~cout << "#" ;  $ ~~~~else  $ ~~~~~cout << "." ;  $ ~~~}  $ ~~}  $ ~~cout << endl ;  $ ~~if ( i % 2 == 0 ) c ++ ;  $ ~}  $ }
int main ( ) {  $ ~long int n ;  $ ~cin >> n ;  $ ~long int sum = 0 ;  $ ~for ( int i = 1 ; i <= n ; i ++ ) { sum = sum + i ; }  $ ~int num ;  $ ~for ( int i = 0 ; i < n - 1 ; i ++ ) {  $ ~~cin >> num ;  $ ~~sum = sum - num ;  $ ~}  $ ~cout << sum << endl ;  $ ~return 0 ;  $ }
int vis [ 105 ] ;  $ int main ( ) {  $ ~int n , k ;  $ ~cin >> n >> k ;  $ ~int num = 0 ;  $ ~for ( int i = 0 ; i < n ; ++ i ) {  $ ~~int x ;  $ ~~cin >> x ;  $ ~~if ( ! vis [ x ] ) {  $ ~~~vis [ x ] = i + 1 ;  $ ~~~num ++ ;  $ ~~}  $ ~}  $ ~if ( num < k )  $ ~~cout << "NO\n" ;  $ ~else {  $ ~~cout << "YES\n" ;  $ ~~int j = 0 ;  $ ~~sort ( vis , vis + 101 ) ;  $ ~~for ( int i = 0 ; i <= 100 ; ++ i )  $ ~~~if ( vis [ i ] ) {  $ ~~~~if ( k == 1 )  $ ~~~~~cout << vis [ i ] << endl ;  $ ~~~~else if ( k > 1 )  $ ~~~~~cout << vis [ i ] << ' ' ;  $ ~~~~else  $ ~~~~~break ;  $ ~~~~k -- ;  $ ~~~}  $ ~}  $ ~return 0 ;  $ }
int main ( ) {  $ ~int n , m ;  $ ~char S [ 1100 ] ;  $ ~cin >> n >> m ;  $ ~for ( int i = 0 ; i < n ; i ++ ) {  $ ~~cin >> S ;  $ ~~for ( int j = 0 ; j < m ; j ++ )  $ ~~~if ( S [ j ] == '.' ) {  $ ~~~~if ( ( i + j ) & 1 )  $ ~~~~~S [ j ] = 'W' ;  $ ~~~~else  $ ~~~~~S [ j ] = 'B' ;  $ ~~~}  $ ~~cout << S << endl ;  $ ~}  $ }
int main ( ) {  $ ~long long int n , sum = 0 ;  $ ~while ( cin >> n ) {  $ ~~if ( n % 2 == 0 )  $ ~~~sum = n / 2 ;  $ ~~else  $ ~~~sum = ( n - 1 ) / 2 - n ;  $ ~~cout << sum << endl ;  $ ~}  $ }
int main ( ) {  $ ~double n , a , b ;  $ ~cin >> n >> a >> b ;  $ ~double z = ( n ) * ( b / 100.0 ) ;  $ ~int z1 = z ;  $ ~if ( z - z1 != 0 ) { z1 ++ ; }  $ ~if ( z1 - a > 0 ) {  $ ~~cout << z1 - a << endl ;  $ ~} else  $ ~~cout << 0 << endl ;  $ }
int main ( ) {  $ ~long long a , b , c , s1 , s2 , s3 ;  $ ~cin >> s1 >> s2 >> s3 ;  $ ~a = sqrt ( ( s1 * s3 ) / s2 ) ;  $ ~b = sqrt ( ( s1 * s2 ) / s3 ) ;  $ ~c = sqrt ( ( s3 * s2 ) / s1 ) ;  $ ~long long sum = a + b + c ;  $ ~cout << 4 * sum << endl ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~int n , counter ;  $ ~int p [ 52 ] [ 52 ] , w [ 52 ] , h [ 52 ] ;  $ ~while ( cin >> n ) {  $ ~~counter = 0 ;  $ ~~for ( int i = 0 ; i < n ; i ++ ) {  $ ~~~int sum = 0 ;  $ ~~~for ( int j = 0 ; j < n ; j ++ ) {  $ ~~~~cin >> p [ i ] [ j ] ;  $ ~~~~sum += p [ i ] [ j ] ;  $ ~~~}  $ ~~~h [ i ] = sum ;  $ ~~}  $ ~~for ( int i = 0 ; i < n ; i ++ ) {  $ ~~~int sum = 0 ;  $ ~~~for ( int j = 0 ; j < n ; j ++ ) { sum += p [ j ] [ i ] ; }  $ ~~~w [ i ] = sum ;  $ ~~}  $ ~~for ( int i = 0 ; i < n ; i ++ ) {  $ ~~~for ( int j = 0 ; j < n ; j ++ ) {  $ ~~~~if ( w [ i ] > h [ j ] ) counter ++ ;  $ ~~~}  $ ~~}  $ ~~cout << counter << endl ;  $ ~}  $ ~return 0 ;  $ }
int main ( ) {  $ ~string a ;  $ ~cin >> a ;  $ ~int l = a . size ( ) ;  $ ~int max1 = 0 ;  $ ~for ( int i = 0 ; i < l ; i ++ ) {  $ ~~for ( int j = i + 1 ; j < l ; j ++ ) {  $ ~~~int m = 0 ;  $ ~~~while ( a [ i + m ] == a [ j + m ] ) m ++ ;  $ ~~~max1 = max ( m , max1 ) ;  $ ~~}  $ ~}  $ ~cout << max1 << endl ;  $ ~return 0 ;  $ }
const int maxn = 1e2 + 10 ;  $ bool arr [ maxn ] ;  $ int main ( ) {  $ ~int n , t = 0 , ans = 0 ;  $ ~cin >> n ;  $ ~bool b = false ;  $ ~for ( int i = 0 ; i < n ; i ++ ) {  $ ~~cin >> arr [ i ] ;  $ ~~if ( arr [ i ] ) {  $ ~~~if ( t == 1 ) ans ++ ;  $ ~~~b = true , ans ++ , t = 0 ;  $ ~~} else if ( b )  $ ~~~t ++ ;  $ ~}  $ ~cout << ans << endl ;  $ }
int paraarriba ( char fuente , char destino ) {  $ ~int f = fuente - 'a' ;  $ ~int d = destino - 'a' ;  $ ~int contador = 0 ;  $ ~while ( true ) {  $ ~~if ( f == d )  $ ~~~break ;  $ ~~else {  $ ~~~f = f + 1 ;  $ ~~~f = f % 26 ;  $ ~~~contador ++ ;  $ ~~}  $ ~}  $ ~return contador ;  $ }  $ int paraabajo ( int fuente , int destino ) {  $ ~int f = fuente - 'a' ;  $ ~int d = destino - 'a' ;  $ ~int contador = 0 ;  $ ~while ( true ) {  $ ~~if ( f == d )  $ ~~~break ;  $ ~~else {  $ ~~~f = f - 1 ;  $ ~~~if ( f < 0 ) f = 25 ;  $ ~~~contador ++ ;  $ ~~}  $ ~}  $ ~return contador ;  $ }  $ int casos ;  $ string tira ;  $ char actual ;  $ int saltos ;  $ int main ( ) {  $ ~cin >> tira ;  $ ~actual = 'a' ;  $ ~saltos = 0 ;  $ ~for ( int i = 0 ; i < tira . size ( ) ; i ++ ) {  $ ~~int a = min ( paraarriba ( actual , tira [ i ] ) , paraabajo ( actual , tira [ i ] ) ) ;  $ ~~saltos += a ;  $ ~~actual = tira [ i ] ;  $ ~}  $ ~cout << saltos << "\n" ;  $ ~return 0 ;  $ }
char a [ 1000005 ] , b [ 1000005 ] ;  $ int main ( ) {  $ ~cin >> a ;  $ ~cin >> b ;  $ ~int lena = strlen ( a ) ;  $ ~int lenb = strlen ( b ) ;  $ ~int i , j ;  $ ~for ( i = 0 ; i < lena ; i ++ )  $ ~~if ( a [ i ] != '0' ) break ;  $ ~for ( j = 0 ; j < lenb ; j ++ )  $ ~~if ( b [ j ] != '0' ) break ;  $ ~int ok = 0 ;  $ ~if ( lena - i == lenb - j )  $ ~~while ( i < lena && j < lenb ) {  $ ~~~if ( a [ i ] > b [ j ] ) {  $ ~~~~ok = - 1 ;  $ ~~~~break ;  $ ~~~} else if ( a [ i ] < b [ j ] ) {  $ ~~~~ok = 1 ;  $ ~~~~break ;  $ ~~~}  $ ~~~i ++ , j ++ ;  $ ~~}  $ ~else if ( lena - i > lenb - j )  $ ~~ok = - 1 ;  $ ~else  $ ~~ok = 1 ;  $ ~if ( ok == - 1 )  $ ~~cout << ">" << endl ;  $ ~else if ( ok == 1 )  $ ~~cout << "<" << endl ;  $ ~else  $ ~~cout << "=" << endl ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~char a [ 105 ] , b [ 105 ] , temp [ 105 ] ;  $ ~gets ( a ) ;  $ ~gets ( b ) ;  $ ~int j = 0 ;  $ ~int l1 = strlen ( a ) ;  $ ~int l2 = strlen ( b ) ;  $ ~for ( int i = l2 - 1 ; i >= 0 ; i -- , j ++ ) { temp [ j ] = b [ i ] ; }  $ ~int flag = 1 ;  $ ~for ( int m = 0 ; m < l2 && m < l1 ; m ++ ) {  $ ~~if ( a [ m ] != temp [ m ] ) {  $ ~~~flag = 0 ;  $ ~~~break ;  $ ~~}  $ ~}  $ ~if ( flag )  $ ~~cout << "YES" << endl ;  $ ~else  $ ~~cout << "NO" << endl ;  $ }
int a [ 1005 ] , b [ 1005 ] , n ;  $ int main ( ) {  $ ~while ( cin >> n ) {  $ ~~for ( int i = 1 ; i <= n ; ++ i ) cin >> a [ i ] ;  $ ~~for ( int i = 1 ; i <= n ; ++ i ) cin >> b [ i ] ;  $ ~~int ans = 0 ;  $ ~~for ( int i = 1 ; i <= n ; ++ i ) {  $ ~~~int aa = a [ i ] , bb = b [ i ] ;  $ ~~~ans = max ( ans , aa + bb ) ;  $ ~~~for ( int j = i + 1 ; j <= n ; ++ j ) {  $ ~~~~aa |= a [ j ] ;  $ ~~~~bb |= b [ j ] ;  $ ~~~~ans = max ( ans , aa + bb ) ;  $ ~~~}  $ ~~}  $ ~~cout << ans << endl ;  $ ~}  $ }
int main ( ) {  $ ~int n , x , res = 0 ;  $ ~cin >> n ;  $ ~for ( int i = 0 ; i < n ; ++ i ) {  $ ~~cin >> x ;  $ ~~res += x * i * 4 ;  $ ~}  $ ~cout << res << endl ;  $ ~return 0 ;  $ }
const int maxn = 1e5 + 10 ;  $ bool arr [ maxn ] ;  $ string s , ss [ maxn ] ;  $ char c ;  $ int n ;  $ void input ( ) {  $ ~cin >> n ;  $ ~for ( int i = 0 ; i < n ; i ++ ) cin >> ss [ i ] ;  $ ~cin >> s >> c ;  $ }  $ char low ( char x ) {  $ ~if ( x >= 'A' && x <= 'Z' ) x = x - 'A' + 'a' ;  $ ~return x ;  $ }  $ int main ( ) {  $ ~input ( ) ;  $ ~int w = s . size ( ) ;  $ ~for ( int i = 0 ; i < n ; i ++ ) {  $ ~~for ( int wi = 0 ; wi + ss [ i ] . size ( ) - 1 < w ; wi ++ ) {  $ ~~~bool b = true ;  $ ~~~for ( int ssj = wi ; ssj < wi + ss [ i ] . size ( ) ; ssj ++ ) {  $ ~~~~if ( low ( s [ ssj ] ) != low ( ss [ i ] [ ssj - wi ] ) ) {  $ ~~~~~b = false ;  $ ~~~~~break ;  $ ~~~~}  $ ~~~}  $ ~~~if ( b )  $ ~~~~for ( int ssj = wi ; ssj < wi + ss [ i ] . size ( ) ; ssj ++ ) arr [ ssj ] = true ;  $ ~~}  $ ~}  $ ~for ( int i = 0 ; i < w ; i ++ )  $ ~~if ( arr [ i ] ) {  $ ~~~if ( low ( s [ i ] ) == c ) {  $ ~~~~if ( c == 'a' )  $ ~~~~~s [ i ] += ( 'b' - low ( s [ i ] ) ) ;  $ ~~~~else  $ ~~~~~s [ i ] += ( 'a' - low ( s [ i ] ) ) ;  $ ~~~} else  $ ~~~~s [ i ] += ( c - low ( s [ i ] ) ) ;  $ ~~}  $ ~cout << s << endl ;  $ }
int i , n , c , a [ 128 ] ;  $ int main ( ) {  $ ~cin >> n ;  $ ~for ( i = 0 ; i < n ; i ++ ) cin >> a [ i ] ;  $ ~for ( i = 0 ; i < n ; i ++ )  $ ~~if ( a [ i ] || i > 0 && a [ i - 1 ] && i < n - 1 && a [ i + 1 ] ) c ++ ;  $ ~cout << c << endl ;  $ }
int main ( ) {  $ ~char a [ 19 ] ;  $ ~int k = 0 ;  $ ~cin >> a ;  $ ~for ( int i = 0 ; a [ i ] != '\0' ; i ++ )  $ ~~if ( a [ i ] == '4' || a [ i ] == '7' ) k ++ ;  $ ~if ( k == 4 || k == 7 )  $ ~~cout << "YES" << endl ;  $ ~else  $ ~~cout << "NO" << endl ;  $ }
vector < long long > v ;  $ long long Power ( int n ) {  $ ~long long ans = 1 ;  $ ~for ( int i = 1 ; i <= n ; i ++ ) { ans *= 10 ; }  $ ~return ans ;  $ }  $ int main ( ) {  $ ~int l , r ;  $ ~for ( int k = 1 ; k <= 10 ; k ++ ) {  $ ~~for ( int i = 0 ; i < ( 1 << k ) ; i ++ ) {  $ ~~~long long arr [ k + 2 ] ;  $ ~~~for ( int j = 0 ; j < k ; j ++ ) { arr [ j ] = 4 ; }  $ ~~~for ( int j = 0 ; j < k ; j ++ ) {  $ ~~~~if ( i & ( 1 << j ) ) { arr [ j ] = 7 ; }  $ ~~~}  $ ~~~long long num = 0 ;  $ ~~~for ( int j = 0 ; j < k ; j ++ ) { num += arr [ j ] * Power ( j ) ; }  $ ~~~v . push_back ( num ) ;  $ ~~}  $ ~}  $ ~sort ( v . begin ( ) , v . end ( ) ) ;  $ ~cin >> l >> r ;  $ ~int lIdx = lower_bound ( v . begin ( ) , v . end ( ) , l ) - v . begin ( ) ;  $ ~int rIdx = lower_bound ( v . begin ( ) , v . end ( ) , r ) - v . begin ( ) ;  $ ~long long sum = ( v [ lIdx ] - l + 1 ) * v [ lIdx ] ;  $ ~for ( int i = lIdx + 1 ; i <= rIdx ; i ++ ) { sum += ( v [ i ] - v [ i - 1 ] ) * v [ i ] ; }  $ ~sum += ( r - v [ rIdx ] ) * v [ rIdx ] ;  $ ~cout << sum << endl ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~int n , m , i ;  $ ~long long ans ;  $ ~cin >> n >> m ;  $ ~if ( m < n ) swap ( n , m ) ;  $ ~ans = 1 ;  $ ~for ( i = 2 ; i <= n ; i ++ ) ans = ans * i ;  $ ~cout << ans << endl ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~int n ;  $ ~cin >> n ;  $ ~char a [ n ] [ n ] ;  $ ~int ans = 0 ;  $ ~for ( int i = 0 ; i < n ; i ++ )  $ ~~for ( int j = 0 ; j < n ; j ++ ) cin >> a [ i ] [ j ] ;  $ ~for ( int i = 0 ; i < n ; i ++ ) {  $ ~~int c1 = 0 , c2 = 0 ;  $ ~~for ( int j = 0 ; j < n ; j ++ ) {  $ ~~~c1 += ( a [ i ] [ j ] == 'C' ) ;  $ ~~~c2 += ( a [ j ] [ i ] == 'C' ) ;  $ ~~}  $ ~~if ( c1 >= 2 ) ans += ( c1 * ( c1 - 1 ) ) / 2 ;  $ ~~if ( c2 >= 2 ) ans += ( c2 * ( c2 - 1 ) ) / 2 ;  $ ~}  $ ~cout << ans << endl ;  $ }
int main ( ) {  $ ~string s1 , s2 ;  $ ~int out = 0 ;  $ ~cin >> s1 >> s2 ;  $ ~for ( int i = 0 ; i < s1 . size ( ) ; i ++ ) {  $ ~~if ( tolower ( s1 [ i ] ) > tolower ( s2 [ i ] ) ) {  $ ~~~out = 1 ;  $ ~~~break ;  $ ~~}  $ ~~if ( tolower ( s1 [ i ] ) < tolower ( s2 [ i ] ) ) {  $ ~~~out = - 1 ;  $ ~~~break ;  $ ~~}  $ ~}  $ ~cout << out << endl ;  $ ~return 0 ;  $ }
const int N = 110 ;  $ const long long MAX = 1e8 + 5 ;  $ int a [ N ] , n , k , ans ;  $ int main ( ) {  $ ~cin >> n >> k ;  $ ~for ( int i = 0 ; i < n ; i ++ ) cin >> a [ i ] ;  $ ~int flag1 = 1 , flag2 = 1 ;  $ ~for ( int i = 0 , j = n - 1 ; i <= j ; i ++ , j -- ) {  $ ~~if ( ! flag1 && ! flag2 ) break ;  $ ~~if ( ( a [ i ] <= k ) && flag1 ) ans ++ ;  $ ~~if ( a [ i ] > k ) {  $ ~~~flag1 = 0 ;  $ ~~~i -- ;  $ ~~}  $ ~~if ( ( a [ j ] <= k ) && flag2 && ( ans < n ) ) ans ++ ;  $ ~~if ( a [ j ] > k ) {  $ ~~~flag2 = 0 ;  $ ~~~j ++ ;  $ ~~}  $ ~}  $ ~cout << ans << endl ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~int length , width , radius ;  $ ~cin >> length >> width >> radius ;  $ ~if ( length >= 2 * radius && width >= 2 * radius )  $ ~~cout << "First" << endl ;  $ ~else  $ ~~cout << "Second" << endl ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~int n , c ;  $ ~cin >> n >> c ;  $ ~int a [ n ] ;  $ ~for ( int i = 0 ; i < n ; i ++ ) { cin >> a [ i ] ; }  $ ~int k = 0 ;  $ ~for ( int i = 0 ; i < n - 1 ; i ++ ) {  $ ~~if ( a [ i + 1 ] - a [ i ] <= c ) {  $ ~~~k ++ ;  $ ~~} else {  $ ~~~k = 0 ;  $ ~~}  $ ~}  $ ~cout << 1 + k << endl ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~int n , k ;  $ ~cin >> n >> k ;  $ ~while ( k -- ) {  $ ~~if ( n % 10 == 0 ) {  $ ~~~n /= 10 ;  $ ~~} else {  $ ~~~n -- ;  $ ~~}  $ ~}  $ ~cout << n << endl ;  $ }
const long long mxn = 1e5 + 7 ;  $ int main ( ) {  $ ~string s , d ;  $ ~long long n ;  $ ~cin >> s >> d ;  $ ~cin >> n ;  $ ~cout << s << ' ' << d << endl ;  $ ~;  $ ~for ( int i = 0 ; i < n ; i ++ ) {  $ ~~string a , b ;  $ ~~cin >> a >> b ;  $ ~~if ( a == s ) {  $ ~~~s = b ;  $ ~~} else if ( b != s ) {  $ ~~~d = b ;  $ ~~}  $ ~~cout << s << ' ' << d << endl ;  $ ~}  $ ~return 0 ;  $ }
int main ( ) {  $ ~int n , d ;  $ ~cin >> n >> d ;  $ ~if ( n == 1 ) {  $ ~~cout << "0" ;  $ ~} else {  $ ~~vector < int > v ;  $ ~~for ( int i = 0 ; i < n ; i += 1 ) {  $ ~~~int a ;  $ ~~~cin >> a ;  $ ~~~v . push_back ( a ) ;  $ ~~}  $ ~~sort ( v . begin ( ) , v . end ( ) ) ;  $ ~~int count = 1 ;  $ ~~for ( int i = 0 ; i + 1 < n ; i += 1 ) {  $ ~~~for ( int j = i + 1 ; j < n ; j += 1 ) {  $ ~~~~if ( v [ j ] - v [ i ] <= d ) { count = max ( count , j - i + 1 ) ; }  $ ~~~}  $ ~~}  $ ~~cout << n - count ;  $ ~}  $ ~cout << endl ;  $ }
int main ( ) {  $ ~int n , m , s ;  $ ~double k ;  $ ~cin >> n >> m >> k ;  $ ~string a ;  $ ~map < string , int > myMap ;  $ ~map < string , int > : : iterator i ;  $ ~for ( int i = 0 ; i < n ; ++ i ) {  $ ~~cin >> a >> s ;  $ ~~if ( s * k < 100 )  $ ~~~continue ;  $ ~~else  $ ~~~myMap [ a ] = s * k + 1e-6 ;  $ ~}  $ ~for ( int i = 0 ; i < m ; ++ i ) {  $ ~~cin >> a ;  $ ~~if ( myMap [ a ] == 0 ) myMap [ a ] = 0 ;  $ ~}  $ ~cout << myMap . size ( ) << "\n" ;  $ ~for ( i = myMap . begin ( ) ; i != myMap . end ( ) ; ++ i ) { cout << i -> first << " " << i -> second << "\n" ; }  $ ~return 0 ;  $ }
int main ( ) {  $ ~string s ;  $ ~cin >> s ;  $ ~long long ans = 0 ;  $ ~int cnt = 0 ;  $ ~vector < int > vec ;  $ ~for ( int i = 0 ; i < s . size ( ) ; i ++ ) {  $ ~~if ( s [ i ] == 'Q' ) {  $ ~~~for ( int j = 0 ; j < vec . size ( ) ; j ++ ) { ans += vec [ j ] ; }  $ ~~~cnt ++ ;  $ ~~} else if ( s [ i ] == 'A' ) {  $ ~~~vec . push_back ( cnt ) ;  $ ~~}  $ ~}  $ ~cout << ans << endl ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~string a , b ;  $ ~int n = 0 ;  $ ~cin >> a ;  $ ~for ( int i = 0 ; i < a . size ( ) ; i ++ ) {  $ ~~if ( a [ i ] == 'h' && n == 0 ) {  $ ~~~b += 'h' ;  $ ~~~n ++ ;  $ ~~~continue ;  $ ~~}  $ ~~if ( a [ i ] == 'e' && n == 1 ) {  $ ~~~b += 'e' ;  $ ~~~n ++ ;  $ ~~~continue ;  $ ~~}  $ ~~if ( a [ i ] == 'l' && n == 2 ) {  $ ~~~b += 'l' ;  $ ~~~n ++ ;  $ ~~~continue ;  $ ~~}  $ ~~if ( a [ i ] == 'l' && n == 3 ) {  $ ~~~b += 'l' ;  $ ~~~n ++ ;  $ ~~~continue ;  $ ~~}  $ ~~if ( a [ i ] == 'o' && n == 4 ) {  $ ~~~b += 'o' ;  $ ~~~break ;  $ ~~}  $ ~}  $ ~if ( b == "hello" )  $ ~~cout << "YES" << endl ;  $ ~else  $ ~~cout << "NO" << endl ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~int cycles ;  $ ~cin >> cycles ;  $ ~bool a [ 100 ] [ 100 ] = { 0 } ;  $ ~int point = 1 ;  $ ~int i = 0 ;  $ ~while ( cycles > 0 ) {  $ ~~if ( cycles < i ) {  $ ~~~i = 0 ;  $ ~~~point ++ ;  $ ~~}  $ ~~a [ i ] [ point ] = 1 ;  $ ~~a [ point ] [ i ] = 1 ;  $ ~~cycles -= i ;  $ ~~i ++ ;  $ ~~if ( i >= point && cycles > 0 ) {  $ ~~~i = 0 ;  $ ~~~point ++ ;  $ ~~}  $ ~}  $ ~cout << point + 1 << endl ;  $ ~for ( int i = 0 ; i <= point ; i ++ ) {  $ ~~for ( int j = 0 ; j <= point ; j ++ ) { cout << a [ i ] [ j ] ; }  $ ~~cout << endl ;  $ ~}  $ ~return 0 ;  $ }
long long max ( long long a , long long b ) {  $ ~return a > b ? a : b ;  $ }  $ long long min ( long long a , long long b ) {  $ ~return a < b ? a : b ;  $ }  $ long long modd ( long long a ) {  $ ~if ( a < 0 LL ) return a * - 1 LL ;  $ ~return a ;  $ }  $ int main ( ) {  $ ~int n ;  $ ~cin >> n ;  $ ~int a [ n ] ;  $ ~for ( int i = 0 ; i < n ; i ++ ) cin >> a [ i ] ;  $ ~int min = a [ 0 ] , max = a [ 0 ] ;  $ ~int ans = 0 ;  $ ~for ( int i = 1 ; i < n ; i ++ ) {  $ ~~if ( max < a [ i ] ) {  $ ~~~max = a [ i ] ;  $ ~~~ans ++ ;  $ ~~}  $ ~~if ( min > a [ i ] ) {  $ ~~~min = a [ i ] ;  $ ~~~ans ++ ;  $ ~~}  $ ~}  $ ~cout << ans << endl ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~int n ;  $ ~cin >> n ;  $ ~int note [ 2 ] = { 1000000001 , 0 } ;  $ ~for ( int i = 0 ; i < n ; i ++ ) {  $ ~~int temp ;  $ ~~cin >> temp ;  $ ~~if ( temp < note [ 0 ] ) {  $ ~~~note [ 1 ] = i + 1 ;  $ ~~~note [ 0 ] = temp ;  $ ~~} else if ( temp == note [ 0 ] )  $ ~~~note [ 1 ] = - 1 ;  $ ~}  $ ~if ( note [ 1 ] == - 1 )  $ ~~cout << "Still Rozdil" << endl ;  $ ~else  $ ~~cout << note [ 1 ] << endl ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~double n , x , y ;  $ ~cin >> n >> x >> y ;  $ ~double r = ceil ( ( ( y / 100 ) * n ) ) ;  $ ~long ans = r - x ;  $ ~if ( ans < 0 ) ans = 0 ;  $ ~cout << ans << endl ;  $ ~return 0 ;  $ }
int last ( long long x ) {  $ ~return x % 10 ;  $ }  $ int main ( ) {  $ ~long long n , k ;  $ ~cin >> n >> k ;  $ ~long long cnt = n / k ;  $ ~if ( cnt % 2 == 0 )  $ ~~cout << "NO\n" ;  $ ~else  $ ~~cout << "YES\n" ;  $ }
int main ( ) {  $ ~int m , x , y , i , j ;  $ ~cin >> m ;  $ ~int a [ m ] ;  $ ~int sum = 0 , sum1 = 0 ;  $ ~for ( i = 0 ; i < m ; i ++ ) {  $ ~~cin >> a [ i ] ;  $ ~~sum += a [ i ] ;  $ ~}  $ ~cin >> x >> y ;  $ ~int ctr = 0 ;  $ ~for ( i = 0 ; i <= m - 2 ; i ++ ) {  $ ~~sum1 += a [ i ] ;  $ ~~int n = sum - sum1 ;  $ ~~if ( ( sum1 >= x ) && ( sum1 <= y ) && ( n >= x ) && ( n <= y ) ) {  $ ~~~ctr ++ ;  $ ~~~break ;  $ ~~}  $ ~}  $ ~if ( ctr == 1 )  $ ~~cout << i + 2 << "\n" ;  $ ~else  $ ~~cout << "0\n" ;  $ ~return 0 ;  $ }
static int mod = 1e9 + 7 ;  $ int main ( ) {  $ ~int n , m , row [ 105 ] , col [ 105 ] , table [ 105 ] [ 105 ] , minn , flag ;  $ ~while ( cin >> n >> m ) {  $ ~~flag = 0 ;  $ ~~memset ( row , 0 , sizeof ( row ) ) ;  $ ~~memset ( col , 0 , sizeof ( col ) ) ;  $ ~~for ( int i = 1 ; i <= n ; i ++ ) {  $ ~~~for ( int j = 1 ; j <= m ; j ++ ) cin >> table [ i ] [ j ] ;  $ ~~}  $ ~~if ( m >= n ) {  $ ~~~for ( int i = 1 ; i <= n ; i ++ ) {  $ ~~~~minn = 0 x3f3f3f3f ;  $ ~~~~for ( int j = 1 ; j <= m ; j ++ ) {  $ ~~~~~if ( table [ i ] [ j ] < minn ) minn = table [ i ] [ j ] ;  $ ~~~~}  $ ~~~~if ( minn ) {  $ ~~~~~row [ i ] = minn ;  $ ~~~~~for ( int j = 1 ; j <= m ; j ++ ) table [ i ] [ j ] -= minn ;  $ ~~~~}  $ ~~~}  $ ~~~for ( int j = 1 ; j <= m ; j ++ ) {  $ ~~~~minn = 0 x3f3f3f3f ;  $ ~~~~for ( int i = 1 ; i <= n ; i ++ ) {  $ ~~~~~if ( table [ i ] [ j ] < minn ) minn = table [ i ] [ j ] ;  $ ~~~~}  $ ~~~~if ( minn ) {  $ ~~~~~col [ j ] = minn ;  $ ~~~~~for ( int i = 1 ; i <= n ; i ++ ) table [ i ] [ j ] -= minn ;  $ ~~~~}  $ ~~~}  $ ~~} else {  $ ~~~for ( int j = 1 ; j <= m ; j ++ ) {  $ ~~~~minn = 0 x3f3f3f3f ;  $ ~~~~for ( int i = 1 ; i <= n ; i ++ ) {  $ ~~~~~if ( table [ i ] [ j ] < minn ) minn = table [ i ] [ j ] ;  $ ~~~~}  $ ~~~~if ( minn ) {  $ ~~~~~col [ j ] = minn ;  $ ~~~~~for ( int i = 1 ; i <= n ; i ++ ) table [ i ] [ j ] -= minn ;  $ ~~~~}  $ ~~~}  $ ~~~for ( int i = 1 ; i <= n ; i ++ ) {  $ ~~~~minn = 0 x3f3f3f3f ;  $ ~~~~for ( int j = 1 ; j <= m ; j ++ ) {  $ ~~~~~if ( table [ i ] [ j ] < minn ) minn = table [ i ] [ j ] ;  $ ~~~~}  $ ~~~~if ( minn ) {  $ ~~~~~row [ i ] = minn ;  $ ~~~~~for ( int j = 1 ; j <= m ; j ++ ) table [ i ] [ j ] -= minn ;  $ ~~~~}  $ ~~~}  $ ~~}  $ ~~flag = 1 ;  $ ~~for ( int i = 1 ; i <= n ; i ++ )  $ ~~~for ( int j = 1 ; j <= m ; j ++ ) {  $ ~~~~if ( table [ i ] [ j ] ) {  $ ~~~~~flag = 0 ;  $ ~~~~~break ;  $ ~~~~}  $ ~~~}  $ ~~if ( flag ) {  $ ~~~int tmp = 0 ;  $ ~~~for ( int i = 1 ; i <= n ; i ++ ) { tmp += row [ i ] ; }  $ ~~~for ( int j = 1 ; j <= m ; j ++ ) { tmp += col [ j ] ; }  $ ~~~cout << tmp << '\n' ;  $ ~~~for ( int i = 1 ; i <= n ; i ++ ) {  $ ~~~~for ( int k = 1 ; k <= row [ i ] ; k ++ ) cout << "row " << i << '\n' ;  $ ~~~}  $ ~~~for ( int j = 1 ; j <= m ; j ++ ) {  $ ~~~~for ( int k = 1 ; k <= col [ j ] ; k ++ ) cout << "col " << j << '\n' ;  $ ~~~}  $ ~~} else  $ ~~~cout << "-1\n" ;  $ ~}  $ ~return 0 ;  $ }
int main ( ) {  $ ~int n , l , r , ql , qr , ret = 1e9 ;  $ ~cin >> n >> l >> r >> ql >> qr ;  $ ~vector < int > a ( n + 1 , 0 ) ;  $ ~for ( int i = 1 ; i <= n ; i ++ ) cin >> a [ i ] , a [ i ] += a [ i - 1 ] ;  $ ~for ( int i = 0 ; i <= n ; i ++ ) {  $ ~~int j = n - i , cur = a [ i ] * l + ( a [ n ] - a [ i ] ) * r ;  $ ~~if ( i > j ) cur += ( i - j - 1 ) * ql ;  $ ~~if ( i < j ) cur += ( j - i - 1 ) * qr ;  $ ~~ret = min ( ret , cur ) ;  $ ~}  $ ~cout << ret << endl ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~int n ;  $ ~cin >> n ;  $ ~int i , arr [ n ] , f0 = - 1 , l0 = - 1 , n1 = 0 ;  $ ~for ( i = 0 ; i < n ; i ++ ) {  $ ~~cin >> arr [ i ] ;  $ ~~if ( arr [ i ] == 0 ) {  $ ~~~if ( f0 == - 1 ) { f0 = i ; }  $ ~~~l0 = i ;  $ ~~} else {  $ ~~~n1 ++ ;  $ ~~}  $ ~}  $ ~if ( f0 == - 1 ) {  $ ~~cout << n - 1 << endl ;  $ ~~return 0 ;  $ ~}  $ ~vector < int > vect ;  $ ~int flag = 0 , count = 0 ;  $ ~for ( i = f0 ; i <= l0 ; i ++ ) {  $ ~~if ( flag == 0 && arr [ i ] == 1 ) {  $ ~~~flag = 1 ;  $ ~~~vect . push_back ( count ) ;  $ ~~~count = 0 ;  $ ~~} else if ( flag == 1 && arr [ i ] == 0 ) {  $ ~~~flag = 0 ;  $ ~~~vect . push_back ( count ) ;  $ ~~~count = 0 ;  $ ~~}  $ ~~count ++ ;  $ ~~if ( i == l0 ) { vect . push_back ( count ) ; }  $ ~}  $ ~int j , maks = 0 , plus ;  $ ~for ( i = 0 ; i < vect . size ( ) ; i += 2 ) {  $ ~~maks = max ( maks , vect [ i ] ) ;  $ ~~plus = 0 ;  $ ~~for ( j = i + 2 ; j < vect . size ( ) ; j += 2 ) {  $ ~~~plus += ( vect [ j ] - vect [ j - 1 ] ) ;  $ ~~~maks = max ( maks , vect [ i ] + plus ) ;  $ ~~}  $ ~}  $ ~cout << n1 + maks << endl ;  $ ~return 0 ;  $ }
char board [ 101 ] [ 101 ] ;  $ int main ( ) {  $ ~int n , m ;  $ ~while ( cin >> n >> m ) {  $ ~~for ( int i = 0 ; i < n ; i ++ ) {  $ ~~~getchar ( ) ;  $ ~~~for ( int j = 0 ; j < m ; j ++ ) {  $ ~~~~if ( getchar ( ) == '-' )  $ ~~~~~board [ i ] [ j ] = '-' ;  $ ~~~~else {  $ ~~~~~if ( i % 2 == 0 ) {  $ ~~~~~~if ( j % 2 == 0 )  $ ~~~~~~~board [ i ] [ j ] = 'B' ;  $ ~~~~~~else  $ ~~~~~~~board [ i ] [ j ] = 'W' ;  $ ~~~~~} else {  $ ~~~~~~if ( j % 2 == 1 )  $ ~~~~~~~board [ i ] [ j ] = 'B' ;  $ ~~~~~~else  $ ~~~~~~~board [ i ] [ j ] = 'W' ;  $ ~~~~~}  $ ~~~~}  $ ~~~}  $ ~~}  $ ~~for ( int i = 0 ; i < n ; i ++ ) {  $ ~~~for ( int j = 0 ; j < m ; j ++ ) cout << board [ i ] [ j ] ;  $ ~~~cout << endl ;  $ ~~}  $ ~}  $ ~return 0 ;  $ }
int main ( ) {  $ ~int n , k , s [ 51 ] , i , j ;  $ ~cin >> n >> k ;  $ ~for ( i = 1 ; i <= n ; i ++ ) cin >> s [ i ] ;  $ ~j = k ;  $ ~if ( s [ k ] > 0 ) {  $ ~~for ( i = k + 1 ; s [ i ] == s [ k ] ; i ++ , j ++ )  $ ~~~;  $ ~~cout << j << "\n" ;  $ ~} else {  $ ~~j = 0 ;  $ ~~for ( i = 1 ; i < k ; i ++ )  $ ~~~if ( s [ i ] > 0 ) j ++ ;  $ ~~cout << j << "\n" ;  $ ~}  $ }
long long res [ 250 ] , n ;  $ long long can ( long long x ) {  $ ~long long sum = x ;  $ ~while ( x ) {  $ ~~sum += x % 10 ;  $ ~~x /= 10 ;  $ ~}  $ ~if ( sum == n ) return 1 ;  $ ~return 0 ;  $ }  $ int main ( ) {  $ ~long long co ;  $ ~while ( cin >> n ) {  $ ~~long long temp = n ;  $ ~~co = 0 ;  $ ~~for ( long long i = 0 ; i < 245 ; i ++ ) {  $ ~~~if ( temp <= 0 ) break ;  $ ~~~temp -- ;  $ ~~~if ( can ( temp ) ) { res [ co ++ ] = temp ; }  $ ~~}  $ ~~if ( ! co )  $ ~~~cout << 0 << endl ;  $ ~~else {  $ ~~~cout << co << endl ;  $ ~~~for ( long long i = co - 1 ; i >= 0 ; i -- ) { cout << res [ i ] << endl ; }  $ ~~}  $ ~}  $ ~return 0 ;  $ }
const int M = 1e6 + 5 ;  $ int main ( ) {  $ ~int n ;  $ ~cin >> n ;  $ ~if ( n != 2 )  $ ~~cout << 1 << endl ;  $ ~else  $ ~~cout << 2 << endl ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~int n ;  $ ~cin >> n ;  $ ~int winner ;  $ ~int player1 = 1 ;  $ ~int player2 = 2 ;  $ ~int pending = 3 ;  $ ~for ( int i = 0 ; i < n ; i ++ ) {  $ ~~cin >> winner ;  $ ~~if ( winner == player1 )  $ ~~~swap ( pending , player2 ) ;  $ ~~else if ( winner == player2 ) {  $ ~~~swap ( player1 , pending ) ;  $ ~~} else {  $ ~~~cout << "NO" << endl ;  $ ~~~return 0 ;  $ ~~}  $ ~}  $ ~cout << "YES" << endl ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~string s ;  $ ~cin >> s ;  $ ~vector < string > arr ( 10 ) ;  $ ~for ( long long i = 0 ; i < 10 ; ++ i ) { cin >> arr [ i ] ; }  $ ~for ( long long i = 0 ; i < 8 ; ++ i ) {  $ ~~string t = s . substr ( i * 10 , 10 ) ;  $ ~~for ( long long j = 0 ; j < 10 ; ++ j ) {  $ ~~~if ( arr [ j ] == t ) {  $ ~~~~cout << char ( j + '0' ) ;  $ ~~~~break ;  $ ~~~}  $ ~~}  $ ~}  $ ~cout << '\n' ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~int tc ;  $ ~cin >> tc ;  $ ~while ( tc -- ) {  $ ~~int n ;  $ ~~cin >> n ;  $ ~~string s ;  $ ~~cin >> s ;  $ ~~bool ada = 0 ;  $ ~~for ( int i = 0 ; i < n / 2 ; i ++ ) {  $ ~~~int x = ( int ) s [ i ] ;  $ ~~~int y = ( int ) s [ s . length ( ) - 1 - i ] ;  $ ~~~if ( abs ( x - y ) > 2 || abs ( x - y ) == 1 ) { ada = 1 ; }  $ ~~}  $ ~~if ( ada ) {  $ ~~~cout << "NO" << endl ;  $ ~~} else  $ ~~~cout << "YES" << endl ;  $ ~}  $ }
int main ( ) {  $ ~long int n , mx = 1000000000 ;  $ ~string dir ;  $ ~cin >> n ;  $ ~cin >> dir ;  $ ~int arr [ n ] ;  $ ~cin >> arr [ 0 ] ;  $ ~for ( int i = 1 ; i < n ; i ++ ) {  $ ~~cin >> arr [ i ] ;  $ ~~if ( dir [ i - 1 ] == 'R' && dir [ i ] == 'L' && ( ( arr [ i ] - arr [ i - 1 ] ) / 2 ) < mx ) mx = ( arr [ i ] - arr [ i - 1 ] ) / 2 ;  $ ~}  $ ~if ( mx == 1000000000 ) mx = - 1 ;  $ ~cout << mx ;  $ ~cout << endl ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~int n , points ;  $ ~cin >> n >> points ;  $ ~int min ( points ) , max ( points ) , amazing ( 0 ) ;  $ ~while ( -- n ) {  $ ~~cin >> points ;  $ ~~if ( points < min ) {  $ ~~~min = points ;  $ ~~~++ amazing ;  $ ~~}  $ ~~if ( points > max ) {  $ ~~~max = points ;  $ ~~~++ amazing ;  $ ~~}  $ ~}  $ ~cout << amazing << endl ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~int n , a , b , count ;  $ ~cin >> n ;  $ ~for ( int i = 0 ; i < n ; i ++ ) {  $ ~~cin >> a >> b ;  $ ~~count = 0 ;  $ ~~while ( ( a > 0 ) && ( b > 0 ) ) {  $ ~~~if ( a > b ) {  $ ~~~~count += a / b ;  $ ~~~~a = a % b ;  $ ~~~} else {  $ ~~~~count += b / a ;  $ ~~~~b = b % a ;  $ ~~~}  $ ~~}  $ ~~cout << count << endl ;  $ ~}  $ ~return 0 ;  $ }
int n , t , a ;  $ int main ( ) {  $ ~cin >> n >> t ;  $ ~for ( int i = 1 ; i <= n ; i ++ ) {  $ ~~cin >> a ;  $ ~~t -= 86400 - a ;  $ ~~if ( t <= 0 ) {  $ ~~~cout << i << endl ;  $ ~~~return 0 ;  $ ~~}  $ ~}  $ ~return 0 ;  $ }
int main ( ) {  $ ~string s ;  $ ~cin >> s ;  $ ~cout << ( ( s . size ( ) + 1 ) * 25 + 1 ) << endl ;  $ }
string a ;  $ long long tou = - 1 , wei = - 1 , mk ;  $ int main ( ) {  $ ~cin >> a ;  $ ~for ( int s = 0 ; s < a . size ( ) ; s ++ ) {  $ ~~if ( a [ s ] != 'a' ) {  $ ~~~if ( tou == - 1 ) tou = s ;  $ ~~~mk = 1 ;  $ ~~} else {  $ ~~~if ( tou != - 1 ) {  $ ~~~~wei = s - 1 ;  $ ~~~~break ;  $ ~~~}  $ ~~}  $ ~}  $ ~if ( wei == - 1 && mk == 1 ) wei = a . size ( ) - 1 ;  $ ~if ( mk == 0 ) {  $ ~~a [ a . size ( ) - 1 ] = 'z' ;  $ ~} else  $ ~~for ( int s = max ( ( long long ) 0 , tou ) ; s <= wei ; s ++ ) { a [ s ] = char ( ( int ) a [ s ] - 1 ) ; }  $ ~cout << a << endl ;  $ }
int main ( ) {  $ ~int n , l = 0 ;  $ ~cin >> n ;  $ ~for ( int i = 1 ; ; i ++ ) {  $ ~~n -= i * ( i + 1 ) / 2 ;  $ ~~if ( n >= 0 )  $ ~~~l ++ ;  $ ~~else  $ ~~~break ;  $ ~}  $ ~cout << l << endl ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~long long l , r , x , y , k , i ;  $ ~while ( cin >> l >> r >> x >> y >> k ) {  $ ~~int flag = 0 ;  $ ~~for ( i = x ; i <= y ; i ++ ) {  $ ~~~if ( i * k >= l && i * k <= r ) {  $ ~~~~flag = 1 ;  $ ~~~~break ;  $ ~~~}  $ ~~}  $ ~~if ( flag )  $ ~~~cout << "YES" << endl ;  $ ~~else  $ ~~~cout << "NO" << endl ;  $ ~}  $ ~return 0 ;  $ }
int main ( ) {  $ ~int n , i , j , le = 0 , to = 0 , a = 0 ;  $ ~cin >> n ;  $ ~for ( i = 1 ; i <= n ; i ++ ) {  $ ~~for ( j = 1 ; j <= i ; j ++ ) { a = a + j ; }  $ ~~if ( a > n ) break ;  $ ~~le ++ ;  $ ~}  $ ~cout << le << endl ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~int n , m , a , ans = 0 ;  $ ~cin >> n >> m ;  $ ~int c [ n ] ;  $ ~queue < int > q ;  $ ~for ( int i = 0 ; i < n ; i ++ ) cin >> c [ i ] ;  $ ~for ( int i = 0 ; i < m ; i ++ ) {  $ ~~cin >> a ;  $ ~~q . push ( a ) ;  $ ~}  $ ~for ( int i = 0 ; i < n ; i ++ ) {  $ ~~if ( q . front ( ) >= c [ i ] and q . size ( ) > 0 ) {  $ ~~~ans ++ ;  $ ~~~q . pop ( ) ;  $ ~~}  $ ~}  $ ~cout << ans << endl ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~string str ;  $ ~cin >> str ;  $ ~set < string > Set ;  $ ~for ( int i = str . size ( ) ; i >= 1 ; i -- ) {  $ ~~Set . clear ( ) ;  $ ~~for ( int j = 0 ; j + i <= str . size ( ) ; j ++ ) Set . insert ( str . substr ( j , i ) ) ;  $ ~~if ( Set . size ( ) != str . size ( ) - i + 1 ) {  $ ~~~cout << i << endl ;  $ ~~~return 0 ;  $ ~~}  $ ~}  $ ~cout << "0" << endl ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~int n ;  $ ~cin >> n ;  $ ~string s ;  $ ~getline ( cin , s ) ;  $ ~getline ( cin , s ) ;  $ ~int ans = 0 ;  $ ~for ( int i = 0 , cur = 0 ; i < n ; i ++ )  $ ~~if ( s [ i ] >= 'A' && s [ i ] <= 'Z' )  $ ~~~ans = max ( ans , ++ cur ) ;  $ ~~else if ( s [ i ] == ' ' )  $ ~~~cur = 0 ;  $ ~cout << ans << endl ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~int n , c , sum = 0 ;  $ ~cin >> n ;  $ ~char ara [ n ] [ n ] ;  $ ~for ( int w = 0 ; w < n ; w ++ ) {  $ ~~c = 0 ;  $ ~~for ( int q = 0 ; q < n ; q ++ ) {  $ ~~~cin >> ara [ w ] [ q ] ;  $ ~~~if ( ara [ w ] [ q ] == 'C' ) c ++ ;  $ ~~}  $ ~~sum += ( ( c * ( c - 1 ) ) / 2 ) ;  $ ~}  $ ~for ( int q = 0 ; q < n ; q ++ ) {  $ ~~c = 0 ;  $ ~~for ( int w = 0 ; w < n ; w ++ ) {  $ ~~~if ( ara [ w ] [ q ] == 'C' ) c ++ ;  $ ~~}  $ ~~sum += ( ( c * ( c - 1 ) ) / 2 ) ;  $ ~}  $ ~cout << sum << endl ;  $ ~return 0 ;  $ }
int na , nb , k , m , A [ 100005 ] , B [ 100005 ] ;  $ int main ( ) {  $ ~cin >> na >> nb ;  $ ~cin >> k >> m ;  $ ~for ( int i = 0 ; i < na ; i ++ ) { cin >> A [ i ] ; }  $ ~for ( int i = 0 ; i < nb ; i ++ ) { cin >> B [ i ] ; }  $ ~if ( A [ k - 1 ] < B [ nb - m ] )  $ ~~cout << "YES" << endl ;  $ ~else  $ ~~cout << "NO" << endl ;  $ ~return 0 ;  $ }
bool arr [ 101 ] [ 101 ] ;  $ int main ( ) {  $ ~long long aa , b ;  $ ~cin >> aa >> b ;  $ ~long long cl [ aa ] ;  $ ~for ( int i = 0 ; i <= aa - 1 ; i ++ ) { cin >> cl [ i ] ; }  $ ~for ( int a = 0 ; a <= b - 1 ; a ++ ) {  $ ~~long long p , q ;  $ ~~cin >> p >> q ;  $ ~~arr [ p - 1 ] [ q - 1 ] = arr [ q - 1 ] [ p - 1 ] = 1 ;  $ ~}  $ ~long long p = ( long long ) 1000000000000000 ;  $ ~for ( int a = 0 ; a <= aa - 1 ; a ++ ) {  $ ~~for ( int c = a + 1 ; c <= aa - 1 ; c ++ ) {  $ ~~~for ( int d = c + 1 ; d <= aa - 1 ; d ++ ) {  $ ~~~~if ( arr [ a ] [ c ] && arr [ c ] [ d ] && arr [ d ] [ a ] && ( p > cl [ a ] + cl [ c ] + cl [ d ] ) ) { p = cl [ a ] + cl [ c ] + cl [ d ] ; }  $ ~~~}  $ ~~}  $ ~}  $ ~if ( p != ( long long ) 1000000000000000 )  $ ~~cout << p << endl ;  $ ~else  $ ~~cout << "-1" << endl ;  $ }
int main ( ) {  $ ~int n ;  $ ~while ( cin >> n ) {  $ ~~int a [ 40 ] ;  $ ~~int b [ 40 ] ;  $ ~~int sum = 0 ;  $ ~~for ( int i = 0 ; i < n ; i ++ ) {  $ ~~~cin >> a [ i ] ;  $ ~~~cin >> b [ i ] ;  $ ~~}  $ ~~for ( int j = 0 ; j < n ; j ++ ) {  $ ~~~for ( int i = 0 ; i < n ; i ++ ) {  $ ~~~~if ( a [ j ] == b [ i ] ) sum ++ ;  $ ~~~}  $ ~~}  $ ~~cout << sum << endl ;  $ ~}  $ }
int main ( ) {  $ ~int n , m ;  $ ~cin >> n >> m ;  $ ~vector < int > a ( n ) ;  $ ~for ( int i = 0 ; i < n ; i ++ ) { cin >> a [ i ] ; }  $ ~queue < int > que ;  $ ~for ( int i = 0 ; i < m ; i ++ ) {  $ ~~int x ;  $ ~~cin >> x ;  $ ~~que . push ( x ) ;  $ ~}  $ ~for ( int i = 0 ; i < n ; i ++ ) {  $ ~~if ( que . size ( ) == 0 ) break ;  $ ~~if ( a [ i ] <= que . front ( ) ) que . pop ( ) ;  $ ~}  $ ~cout << m - que . size ( ) << endl ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~int n , a [ 101 ] , x , mx = 0 ;  $ ~a [ 0 ] = 0 ;  $ ~cin >> n ;  $ ~for ( int i = 1 ; i <= n ; i ++ ) {  $ ~~cin >> x ;  $ ~~a [ i ] = a [ i - 1 ] + x ;  $ ~}  $ ~for ( int i = 1 ; i <= n ; i ++ )  $ ~~for ( int j = i ; j <= n ; j ++ ) mx = max ( mx , ( ( j - i + 1 ) - ( a [ j ] - a [ i - 1 ] ) + a [ i - 1 ] + a [ n ] - a [ j ] ) ) ;  $ ~cout << mx << endl ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~long long n , k ;  $ ~cin >> n >> k ;  $ ~int rem = 0 ;  $ ~int i = 1 ;  $ ~for ( i = 1 ; i <= n ; i ++ ) {  $ ~~int a ;  $ ~~cin >> a ;  $ ~~rem += a ;  $ ~~if ( rem >= 8 ) {  $ ~~~k = k - 8 ;  $ ~~~rem = rem - 8 ;  $ ~~} else {  $ ~~~k = k - rem ;  $ ~~~rem = 0 ;  $ ~~}  $ ~~if ( k <= 0 ) break ;  $ ~}  $ ~if ( k > 0 ) i = - 1 ;  $ ~cout << i << endl ;  $ ~int pause ;  $ ~cin >> pause ;  $ ~return 0 ;  $ }
set < int > a , b ;  $ int main ( ) {  $ ~int n ;  $ ~cin >> n ;  $ ~for ( int i = 1 ; i <= n ; i ++ ) {  $ ~~int x , y ;  $ ~~cin >> x >> y ;  $ ~~a . insert ( x ) ;  $ ~~b . insert ( y ) ;  $ ~}  $ ~cout << min ( a . size ( ) , b . size ( ) ) << endl ;  $ }
long long Mul ( long long a , long long n , long long m ) {  $ ~long long r = 0 ;  $ ~while ( n ) {  $ ~~if ( n & 0 x1 ) r = ( r + a ) % m ;  $ ~~a = ( a << 1 ) % m ;  $ ~~n >> = 1 ;  $ ~}  $ ~return r ;  $ }  $ long long Pow ( long long a , long long n , long long m ) {  $ ~long long r = 1 ;  $ ~while ( n ) {  $ ~~if ( n & 0 x1 ) r = Mul ( r , a , m ) ;  $ ~~a = Mul ( a , a , m ) ;  $ ~~n >> = 1 ;  $ ~}  $ ~return r ;  $ }  $ long long binpow ( long long a , int n ) {  $ ~long long res = 1 ;  $ ~while ( n ) {  $ ~~if ( n & 0 x1 ) res *= a ;  $ ~~n >> = 1 ;  $ ~~a *= a ;  $ ~}  $ ~return res ;  $ }  $ vector < long long > sz ;  $ vector < long long > id ;  $ void create ( long long v ) {  $ ~id [ v ] = v ;  $ ~sz [ v ] = 1 ;  $ }  $ long long find ( long long v ) {  $ ~long long i ;  $ ~for ( i = v ; i != id [ i ] ; i = id [ i ] ) id [ i ] = id [ id [ i ] ] ;  $ ~return i ;  $ }  $ void unite ( long long v , long long w ) {  $ ~long long i , j ;  $ ~for ( i = v ; i != id [ i ] ; i = id [ i ] ) id [ i ] = id [ id [ i ] ] ;  $ ~for ( j = w ; j != id [ j ] ; j = id [ j ] ) id [ j ] = id [ id [ j ] ] ;  $ ~if ( i == j ) return ;  $ ~if ( sz [ i ] < sz [ j ] ) {  $ ~~id [ i ] = j ;  $ ~~sz [ j ] += sz [ i ] ;  $ ~} else {  $ ~~id [ j ] = i ;  $ ~~sz [ i ] += sz [ j ] ;  $ ~}  $ }  $ long long convert ( long long v ) {  $ ~long long res = 0 ;  $ ~long long len = 0 ;  $ ~while ( v ) {  $ ~~res |= ( v & 0 x1 ) << len ;  $ ~~v /= 10 ;  $ ~~++ len ;  $ ~}  $ ~return res ;  $ }  $ long long func ( const string & str ) {  $ ~long long res = 0 ;  $ ~long long len = 0 ;  $ ~for ( long long i = str . size ( ) - 1 ; i >= 0 ; i -- , ++ len ) { res |= ( str [ i ] - '0' ) << len ; }  $ ~return res ;  $ }  $ int main ( ) {  $ ~long long t ;  $ ~cin >> t ;  $ ~vector < long long > cnt ( 3e6 , 0 ) ;  $ ~char c ;  $ ~long long tmp ;  $ ~string str ;  $ ~for ( long long i = 0 ; i < t ; i ++ ) {  $ ~~cin >> c ;  $ ~~if ( c == '+' ) {  $ ~~~cin >> tmp ;  $ ~~~++ cnt [ convert ( tmp ) ] ;  $ ~~} else if ( c == '-' ) {  $ ~~~cin >> tmp ;  $ ~~~-- cnt [ convert ( tmp ) ] ;  $ ~~} else {  $ ~~~cin >> str ;  $ ~~~cout << cnt [ func ( str ) ] << endl ;  $ ~~}  $ ~}  $ ~return 0 ;  $ }
int main ( ) {  $ ~int maxSections , nuts , divis , nut2sec , boxes = 0 ;  $ ~cin >> maxSections >> nuts >> divis >> nut2sec ;  $ ~while ( nuts > 0 ) {  $ ~~boxes ++ ;  $ ~~nuts -= ( min ( maxSections , divis + 1 ) ) * nut2sec ;  $ ~~divis -= min ( maxSections , divis + 1 ) - 1 ;  $ ~}  $ ~cout << boxes << endl ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~int n ;  $ ~cin >> n ;  $ ~if ( n == 2 )  $ ~~cout << 2 << endl ;  $ ~else  $ ~~cout << 1 << endl ;  $ ~return 0 ;  $ }
int a [ 100005 ] ;  $ int main ( ) {  $ ~int n ;  $ ~cin >> n ;  $ ~if ( n % 4 >= 2 ) return puts ( "-1" ) , 0 ;  $ ~for ( int i = 1 ; i <= n / 2 ; i += 2 ) {  $ ~~a [ i ] = i + 1 ;  $ ~~a [ i + 1 ] = n - i + 1 ;  $ ~~a [ n - i + 1 ] = n - i ;  $ ~~a [ n - i ] = i ;  $ ~}  $ ~if ( n % 2 == 1 ) a [ n / 2 + 1 ] = n / 2 + 1 ;  $ ~for ( int i = 1 ; i <= n ; i ++ ) cout << a [ i ] << " \n" [ i == n ] ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~int n1 , n2 ( 3 ) ;  $ ~cin >> n1 ;  $ ~for ( int i ( 0 ) ; i < n1 ; i ++ ) {  $ ~~int m ;  $ ~~cin >> m ;  $ ~~if ( ( n2 == 3 && m == 3 ) || ( n2 == 4 && m == 2 ) || ( n2 == 5 && m == 1 ) ) {  $ ~~~cout << "NO" << endl ;  $ ~~~return 0 ;  $ ~~} else  $ ~~~n2 = ( 6 - ( n2 - m ) ) ;  $ ~}  $ ~cout << "YES" << endl ;  $ }
int n , k ;  $ string a [ 105 ] ;  $ int main ( ) {  $ ~while ( cin >> n >> k ) {  $ ~~for ( int i = 0 ; i < n ; i ++ ) { cin >> a [ i ] ; }  $ ~~int ans = 0 ;  $ ~~for ( int i = 0 ; i < n ; i ++ ) {  $ ~~~int m = 0 ;  $ ~~~for ( int j = 0 ; j < a [ i ] . size ( ) ; j ++ ) {  $ ~~~~if ( a [ i ] [ j ] == '4' || a [ i ] [ j ] == '7' ) m ++ ;  $ ~~~}  $ ~~~if ( m <= k ) ans ++ ;  $ ~~}  $ ~~cout << ans << endl ;  $ ~}  $ ~return 0 ;  $ }
int main ( ) {  $ ~int n , ans ;  $ ~cin >> n ;  $ ~for ( int i = 39 ; i > 0 ; i -- ) {  $ ~~if ( ( i ) * ( i + 1 ) * ( i + 2 ) <= 6 * n ) {  $ ~~~ans = i ;  $ ~~~break ;  $ ~~}  $ ~}  $ ~cout << ans << endl ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~string s ;  $ ~cin >> s ;  $ ~int n ;  $ ~n = ( s . size ( ) + 1 ) * 26 - ( s . size ( ) ) ;  $ ~cout << n << endl ;  $ }
long long a , b , k , t ;  $ int main ( ) {  $ ~cin >> t ;  $ ~for ( register int i = 1 ; i <= t ; i ++ ) {  $ ~~cin >> a >> b >> k ;  $ ~~long long c = a - b ;  $ ~~c *= k / 2 ;  $ ~~c += ( k % 2 ) * a ;  $ ~~cout << c << endl ;  $ ~}  $ }
int main ( ) {  $ ~int n , x ;  $ ~cin >> n ;  $ ~set < int > s ;  $ ~bool ew = 0 ;  $ ~for ( int q = 0 ; q < n ; q ++ ) {  $ ~~cin >> x ;  $ ~~if ( x == 0 ) ew = 1 ;  $ ~~s . insert ( x ) ;  $ ~}  $ ~int ans = s . size ( ) ;  $ ~if ( ew ) ans -- ;  $ ~cout << ans << endl ;  $ ~return 0 ;  $ }
vector < int > sides ;  $ int main ( ) {  $ ~int a , b , c ;  $ ~cin >> a >> b >> c ;  $ ~sides . push_back ( a ) ;  $ ~sides . push_back ( b ) ;  $ ~sides . push_back ( c ) ;  $ ~sort ( sides . begin ( ) , sides . end ( ) ) ;  $ ~a = sides [ 0 ] ;  $ ~b = sides [ 1 ] ;  $ ~c = sides [ 2 ] ;  $ ~cout << ( c - ( a + b - 1 ) > 0 ? c - ( a + b - 1 ) : 0 ) << endl ;  $ }
int main ( ) {  $ ~int n , p = 0 , ans = 0 ;  $ ~cin >> n ;  $ ~int a , b , c ;  $ ~cin >> a >> b >> c ;  $ ~while ( -- n ) {  $ ~~if ( p == 0 ) {  $ ~~~if ( a < b ) {  $ ~~~~ans += a ;  $ ~~~~p = 1 ;  $ ~~~} else {  $ ~~~~ans += b ;  $ ~~~~p = 2 ;  $ ~~~}  $ ~~} else if ( p == 1 ) {  $ ~~~if ( a < c ) {  $ ~~~~ans += a ;  $ ~~~~p = 0 ;  $ ~~~} else {  $ ~~~~ans += c ;  $ ~~~~p = 2 ;  $ ~~~}  $ ~~} else if ( p == 2 ) {  $ ~~~if ( b < c ) {  $ ~~~~ans += b ;  $ ~~~~p = 0 ;  $ ~~~} else {  $ ~~~~ans += c ;  $ ~~~~p = 1 ;  $ ~~~}  $ ~~}  $ ~}  $ ~cout << ans << endl ;  $ ~return 0 ;  $ }
long long n , c = 1 , a ;  $ int main ( ) {  $ ~cin >> n >> a ;  $ ~while ( 1 ) {  $ ~~if ( ( c * n ) % 10 == a || ( c * n ) % 10 == 0 ) {  $ ~~~cout << c << endl ;  $ ~~~return 0 ;  $ ~~}  $ ~~c ++ ;  $ ~}  $ ~return 0 ;  $ }
int main ( ) {  $ ~long long n , a [ 100005 ] , sum = 0 , cnt = 1 ;  $ ~cin >> n ;  $ ~for ( long long i = 1 ; i <= n ; i ++ ) {  $ ~~cin >> a [ i ] ;  $ ~~if ( a [ 1 ] == 0 ) a [ 0 ] = '1' ;  $ ~~if ( a [ i ] == a [ i - 1 ] ) {  $ ~~~sum += cnt ;  $ ~~~cnt ++ ;  $ ~~} else  $ ~~~cnt = 1 ;  $ ~}  $ ~n = n + sum ;  $ ~cout << n << endl ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~string s ;  $ ~cin >> s ;  $ ~map < char , int > m ;  $ ~int i , cnt = 0 ;  $ ~for ( i = 0 ; i < s . length ( ) ; i ++ ) {  $ ~~if ( m . count ( s [ i ] ) )  $ ~~~cnt ++ ;  $ ~~else  $ ~~~m [ s [ i ] ] = i ;  $ ~}  $ ~if ( ( s . length ( ) - cnt ) % 2 == 0 )  $ ~~cout << "CHAT WITH HER!" << endl ;  $ ~else  $ ~~cout << "IGNORE HIM!" << endl ;  $ ~return 0 ;  $ }
const int maxn = 100 ;  $ int a [ maxn ] [ maxn ] ;  $ int main ( ) {  $ ~int is = 1 ;  $ ~int n ;  $ ~cin >> n ;  $ ~for ( int i = 0 ; i < n ; i ++ ) {  $ ~~for ( int j = 0 ; j < n ; j ++ ) cin >> a [ i ] [ j ] ;  $ ~}  $ ~for ( int i = 0 ; i < n ; i ++ ) {  $ ~~for ( int j = 0 ; j < n ; j ++ ) {  $ ~~~if ( a [ i ] [ j ] == 1 ) continue ;  $ ~~~int f = 0 ;  $ ~~~for ( int k = 0 ; k < n ; k ++ ) {  $ ~~~~for ( int t = 0 ; t < n ; t ++ ) {  $ ~~~~~if ( j == k || i == t ) continue ;  $ ~~~~~if ( a [ i ] [ k ] + a [ t ] [ j ] == a [ i ] [ j ] ) { f = 1 ; }  $ ~~~~}  $ ~~~}  $ ~~~if ( ! f ) is = 0 ;  $ ~~}  $ ~}  $ ~if ( is )  $ ~~cout << "Yes" << endl ;  $ ~else  $ ~~cout << "No" << endl ;  $ }
int main ( ) {  $ ~int n , x ;  $ ~cin >> n >> x ;  $ ~int arrays [ n ] ;  $ ~for ( int i = 0 ; i < n ; i ++ ) { cin >> arrays [ i ] ; }  $ ~int sum_plus = 0 , sum_minus = 0 ;  $ ~for ( int i = 0 ; i < n ; i ++ ) {  $ ~~if ( arrays [ i ] >= 0 ) {  $ ~~~sum_plus = sum_plus + arrays [ i ] ;  $ ~~} else {  $ ~~~if ( arrays [ i ] < 0 ) { sum_minus = sum_minus + arrays [ i ] ; }  $ ~~}  $ ~}  $ ~sum_minus = sum_minus * ( - 1 ) ;  $ ~int dif ;  $ ~if ( sum_minus > sum_plus ) {  $ ~~dif = sum_minus - sum_plus ;  $ ~} else {  $ ~~if ( sum_minus < sum_plus ) {  $ ~~~dif = sum_plus - sum_minus ;  $ ~~} else {  $ ~~~cout << "0" << endl ;  $ ~~~return 0 ;  $ ~~}  $ ~}  $ ~if ( dif <= x ) {  $ ~~cout << "1" << endl ;  $ ~} else {  $ ~~int ans = 0 ;  $ ~~while ( dif > 0 ) {  $ ~~~dif = dif - x ;  $ ~~~ans ++ ;  $ ~~}  $ ~~cout << ans << endl ;  $ ~}  $ }
int check ( string s ) {  $ ~int count [ 256 ] = { } ;  $ ~for ( int i = 0 ; i < 6 ; ++ i ) { ++ count [ s [ i ] ] ; }  $ ~int j = 0 ;  $ ~char cnt [ 7 ] = { '0' , '0' , '0' , '0' , '0' , '0' } ;  $ ~cnt [ j ++ ] += count [ 'R' ] ;  $ ~cnt [ j ++ ] += count [ 'O' ] ;  $ ~cnt [ j ++ ] += count [ 'Y' ] ;  $ ~cnt [ j ++ ] += count [ 'G' ] ;  $ ~cnt [ j ++ ] += count [ 'B' ] ;  $ ~cnt [ j ++ ] += count [ 'V' ] ;  $ ~sort ( cnt , cnt + 6 ) ;  $ ~string str ( cnt ) ;  $ ~if ( str == "000006" ) {  $ ~~return 1 ;  $ ~} else if ( str == "000015" ) {  $ ~~return 2 ;  $ ~} else if ( str == "000024" ) {  $ ~~return 3 ;  $ ~} else if ( str == "000033" ) {  $ ~~return 4 ;  $ ~} else if ( str == "000114" ) {  $ ~~return 5 ;  $ ~} else if ( str == "000123" ) {  $ ~~return 6 ;  $ ~} else if ( str == "000222" ) {  $ ~~return 7 ;  $ ~} else if ( str == "001113" ) {  $ ~~return 8 ;  $ ~} else if ( str == "001122" ) {  $ ~~return 9 ;  $ ~} else if ( str == "011112" ) {  $ ~~return 10 ;  $ ~} else if ( str == "111111" ) {  $ ~~return 11 ;  $ ~} else {  $ ~~return 0 ;  $ ~}  $ }  $ int main ( ) {  $ ~string str ;  $ ~cin >> str ;  $ ~int cnt = 0 ;  $ ~int result [ 12 ] = { - 1 , 1 , 1 , 2 , 2 , 2 , 3 , 6 , 5 , 8 , 15 , 30 } ;  $ ~cout << result [ check ( str ) ] << endl ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~string s ;  $ ~int n ;  $ ~while ( cin >> n ) {  $ ~~cin >> s ;  $ ~~int cnt = 0 ;  $ ~~for ( int i = 0 ; i < s . length ( ) ; i ++ ) {  $ ~~~if ( s . at ( i ) == '<' )  $ ~~~~cnt ++ ;  $ ~~~else  $ ~~~~break ;  $ ~~}  $ ~~for ( int i = s . length ( ) - 1 ; i >= 0 ; i -- ) {  $ ~~~if ( s . at ( i ) == '>' )  $ ~~~~cnt ++ ;  $ ~~~else  $ ~~~~break ;  $ ~~}  $ ~~cout << cnt << endl ;  $ ~}  $ ~return 0 ;  $ }
map < long long , long long > dp ;  $ int main ( ) {  $ ~long long q ;  $ ~cin >> q ;  $ ~while ( q -- ) {  $ ~~long long t ;  $ ~~cin >> t ;  $ ~~if ( t == 1 ) {  $ ~~~long long x , y , w ;  $ ~~~cin >> x >> y >> w ;  $ ~~~while ( x != y ) {  $ ~~~~if ( y > x ) swap ( x , y ) ;  $ ~~~~dp [ x ] += w ;  $ ~~~~x /= 2 ;  $ ~~~}  $ ~~} else {  $ ~~~long long x , y ;  $ ~~~cin >> x >> y ;  $ ~~~long long ans = 0 ;  $ ~~~while ( x != y ) {  $ ~~~~if ( y > x ) swap ( x , y ) ;  $ ~~~~ans += dp [ x ] ;  $ ~~~~x /= 2 ;  $ ~~~}  $ ~~~cout << ans << endl ;  $ ~~}  $ ~}  $ }
int main ( ) {  $ ~int n , l , m , ans = 0 ;  $ ~cin >> n >> l >> m ;  $ ~int a = 0 , b = 0 , c , d ;  $ ~if ( n ) {  $ ~~cin >> a >> b ;  $ ~~ans += a / m ;  $ ~}  $ ~for ( int i = 1 ; i < n ; i ++ ) {  $ ~~cin >> c >> d ;  $ ~~ans += ( c - ( a + b ) ) / m ;  $ ~~a = c , b = d ;  $ ~}  $ ~ans += ( l - ( a + b ) ) / m ;  $ ~cout << ans << endl ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~int n ;  $ ~cin >> n ;  $ ~int a [ n ] ;  $ ~for ( int i = 0 ; i < n ; i ++ ) cin >> a [ i ] ;  $ ~sort ( a , a + n ) ;  $ ~cout << a [ n - 1 ] << " " ;  $ ~for ( int i = 1 ; i < n - 1 ; i ++ ) cout << a [ i ] << " " ;  $ ~cout << a [ 0 ] << endl ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~int a , b ;  $ ~cin >> a >> b ;  $ ~for ( int i = 1 ; i <= b ; i ++ ) {  $ ~~if ( a % 10 == 0 ) {  $ ~~~a = a / 10 ;  $ ~~} else {  $ ~~~a -- ;  $ ~~}  $ ~}  $ ~cout << a << endl ;  $ }
int main ( ) {  $ ~string s ;  $ ~cin >> s ;  $ ~int started = 0 , ended = 0 ;  $ ~for ( int i = 0 ; i < s . size ( ) ; i ++ ) {  $ ~~if ( s [ i ] != 'a' && ! ended ) {  $ ~~~started = 1 ;  $ ~~~s [ i ] -- ;  $ ~~} else if ( started ) {  $ ~~~ended = 1 ;  $ ~~}  $ ~}  $ ~if ( ! started ) s [ s . size ( ) - 1 ] = 'z' ;  $ ~cout << s << endl ;  $ }
int main ( ) {  $ ~long long n , k ;  $ ~cin >> n >> k ;  $ ~if ( n >= k )  $ ~~cout << 1 << endl ;  $ ~else {  $ ~~if ( k % n == 0 )  $ ~~~cout << k / n << endl ;  $ ~~else  $ ~~~cout << k / n + 1 << endl ;  $ ~}  $ ~return 0 ;  $ }
int main ( ) {  $ ~int n ;  $ ~cin >> n ;  $ ~int result = 0 ;  $ ~char c ;  $ ~string s ;  $ ~bool ans [ 26 ] ;  $ ~bool unique = false ;  $ ~for ( int i = 0 ; i < 25 ; i ++ ) ans [ i ] = true ;  $ ~while ( n -- ) {  $ ~~cin >> c >> s ;  $ ~~if ( c == '!' ) {  $ ~~~if ( ! unique ) {  $ ~~~~int len = s . length ( ) ;  $ ~~~~bool appear [ 26 ] = { 0 } ;  $ ~~~~for ( int i = 0 ; i < len ; i ++ ) { appear [ s [ i ] - 'a' ] = true ; }  $ ~~~~for ( int i = 0 ; i < 26 ; i ++ ) {  $ ~~~~~if ( ! appear [ i ] ) ans [ i ] = false ;  $ ~~~~}  $ ~~~~int cnt = 0 ;  $ ~~~~for ( int i = 0 ; i < 26 ; i ++ ) {  $ ~~~~~if ( ans [ i ] ) cnt ++ ;  $ ~~~~}  $ ~~~~if ( cnt == 1 ) unique = true ;  $ ~~~} else {  $ ~~~~result ++ ;  $ ~~~}  $ ~~} else if ( c == '.' ) {  $ ~~~int len = s . length ( ) ;  $ ~~~bool appear [ 26 ] = { 0 } ;  $ ~~~for ( int i = 0 ; i < len ; i ++ ) { appear [ s [ i ] - 'a' ] = true ; }  $ ~~~for ( int i = 0 ; i < 26 ; i ++ ) {  $ ~~~~if ( appear [ i ] ) ans [ i ] = false ;  $ ~~~}  $ ~~~int cnt = 0 ;  $ ~~~for ( int i = 0 ; i < 26 ; i ++ ) {  $ ~~~~if ( ans [ i ] ) cnt ++ ;  $ ~~~}  $ ~~~if ( cnt == 1 ) unique = true ;  $ ~~} else {  $ ~~~if ( ! unique ) {  $ ~~~~ans [ s [ 0 ] - 'a' ] = false ;  $ ~~~~int cnt = 0 ;  $ ~~~~for ( int i = 0 ; i < 26 ; i ++ ) {  $ ~~~~~if ( ans [ i ] ) cnt ++ ;  $ ~~~~}  $ ~~~~if ( cnt == 1 ) unique = true ;  $ ~~~} else  $ ~~~~result ++ ;  $ ~~}  $ ~}  $ ~if ( unique ) result -- ;  $ ~cout << result << endl ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~int n ;  $ ~long long int s ;  $ ~cin >> n >> s ;  $ ~if ( s % n == 0 ) {  $ ~~cout << s / n << endl ;  $ ~} else {  $ ~~cout << s / n + 1 << endl ;  $ ~}  $ }
int main ( ) {  $ ~char str1 [ 101 ] ;  $ ~char str2 [ 101 ] ;  $ ~cin >> str1 ;  $ ~cin >> str2 ;  $ ~int n = 0 ;  $ ~while ( str1 [ n ] != '\0' ) { n ++ ; }  $ ~for ( int i = 0 ; i < n ; i ++ ) {  $ ~~if ( str1 [ i ] * 1 > 95 ) str1 [ i ] = str1 [ i ] - 32 ;  $ ~~if ( str2 [ i ] * 1 > 95 ) str2 [ i ] = str2 [ i ] - 32 ;  $ ~}  $ ~int found = 0 ;  $ ~for ( int i = 0 ; i < n ; i ++ ) {  $ ~~if ( str1 [ i ] < str2 [ i ] ) {  $ ~~~cout << - 1 << endl ;  $ ~~~found = 1 ;  $ ~~~break ;  $ ~~} else if ( str2 [ i ] < str1 [ i ] ) {  $ ~~~found = 1 ;  $ ~~~cout << 1 << endl ;  $ ~~~break ;  $ ~~}  $ ~}  $ ~if ( ! found ) {  $ ~~int sum1 = 0 ;  $ ~~int sum2 = 0 ;  $ ~~for ( int i = 0 ; i < n ; i ++ ) {  $ ~~~sum1 += str1 [ i ] * 1 ;  $ ~~~sum2 += str2 [ i ] * 1 ;  $ ~~}  $ ~~if ( sum1 == sum2 ) cout << 0 << endl ;  $ ~}  $ ~return 0 ;  $ }
int main ( ) {  $ ~int s [ 10 ] [ 10 ] = { } ;  $ ~for ( int i = 0 ; i < 10 ; i ++ ) {  $ ~~s [ 0 ] [ i ] = 1 ;  $ ~~s [ i ] [ 0 ] = 1 ;  $ ~}  $ ~for ( int i = 1 ; i < 10 ; i ++ ) {  $ ~~for ( int j = 1 ; j < 10 ; j ++ ) { s [ i ] [ j ] = s [ i - 1 ] [ j ] + s [ i ] [ j - 1 ] ; }  $ ~}  $ ~int n ;  $ ~cin >> n ;  $ ~cout << s [ n - 1 ] [ n - 1 ] << endl ;  $ ~return 0 ;  $ }
long long int pow2 ( long long int a , long long int b ) {  $ ~if ( b == 0 ) return 1 ;  $ ~if ( b == 1 ) return a ;  $ ~if ( b == 2 ) return a * a ;  $ ~if ( b & 1 ) return a * pow2 ( a , b - 1 ) ;  $ ~return pow2 ( pow2 ( a , b / 2 ) , 2 ) ;  $ }  $ int main ( ) {  $ ~int n ;  $ ~cin >> n ;  $ ~vector < int > a , b ;  $ ~int x , y , i , ans = 0 ;  $ ~for ( i = 0 ; i < n ; i ++ ) {  $ ~~cin >> x >> y ;  $ ~~a . push_back ( x ) ;  $ ~~b . push_back ( y ) ;  $ ~}  $ ~int cash = INT_MAX ;  $ ~for ( i = 0 ; i < n ; i ++ ) {  $ ~~cash = min ( cash , b [ i ] ) ;  $ ~~ans += ( cash * a [ i ] ) ;  $ ~}  $ ~cout << ans << endl ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~int n , t , i ;  $ ~cin >> n >> t ;  $ ~int path [ n + 5 ] ;  $ ~for ( i = 1 ; i < n ; i ++ ) cin >> path [ i ] ;  $ ~int cur = 1 ;  $ ~while ( cur < t ) { cur += path [ cur ] ; }  $ ~if ( cur == t )  $ ~~cout << "YES" << '\n' ;  $ ~else  $ ~~cout << "NO" << '\n' ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~int k , n , s , p ;  $ ~cin >> k >> n >> s >> p ;  $ ~int papersper = n / s ;  $ ~if ( n % s ) { papersper ++ ; }  $ ~int papersreq = papersper * k ;  $ ~int ans = papersreq / p ;  $ ~if ( papersreq % p ) { ans ++ ; }  $ ~cout << ans << "\n" ;  $ }
int main ( ) {  $ ~string str ;  $ ~int n , i , s = 0 ;  $ ~cin >> n ;  $ ~for ( i = 0 ; i < n ; i ++ ) {  $ ~~cin >> str ;  $ ~~if ( str == "Tetrahedron" ) {  $ ~~~s += 4 ;  $ ~~} else if ( str == "Cube" ) {  $ ~~~s += 6 ;  $ ~~} else if ( str == "Octahedron" ) {  $ ~~~s += 8 ;  $ ~~} else if ( str == "Dodecahedron" ) {  $ ~~~s += 12 ;  $ ~~} else {  $ ~~~s += 20 ;  $ ~~}  $ ~}  $ ~cout << s << endl ;  $ ~return 0 ;  $ }
const int N = 200000 + 10 ;  $ int y , k , n ;  $ string s ;  $ int main ( ) {  $ ~cin >> s ;  $ ~bool flag = false ;  $ ~for ( int i = 0 ; i < s . length ( ) ; i ++ ) {  $ ~~if ( s [ i ] == 'a' && flag ) break ;  $ ~~if ( s [ i ] == 'a' ) continue ;  $ ~~s [ i ] = s [ i ] - 1 ;  $ ~~flag = true ;  $ ~}  $ ~if ( ! flag ) {  $ ~~int len = s . length ( ) ;  $ ~~s [ len - 1 ] = 'z' ;  $ ~}  $ ~cout << s << endl ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~int k , n , i , j , a , b , c , d , e , such , unsuch ;  $ ~string s ;  $ ~map < int , string > mp ;  $ ~while ( cin >> n ) {  $ ~~mp . clear ( ) ;  $ ~~while ( n -- && cin >> s >> such >> unsuch >> a >> b >> c >> d >> e ) mp . insert ( { such * 100 - unsuch * 50 + a + b + c + d + e , s } ) ;  $ ~~cout << mp . rbegin ( ) -> second << endl ;  $ ~}  $ ~return 0 ;  $ }
int main ( ) {  $ ~set < int > s ;  $ ~int n ;  $ ~cin >> n ;  $ ~int m ;  $ ~cin >> m ;  $ ~while ( m -- ) {  $ ~~int cur ;  $ ~~cin >> cur ;  $ ~~s . insert ( cur ) ;  $ ~}  $ ~cin >> m ;  $ ~while ( m -- ) {  $ ~~int cur ;  $ ~~cin >> cur ;  $ ~~s . insert ( cur ) ;  $ ~}  $ ~if ( s . size ( ) == n )  $ ~~cout << "I become the guy.\n" ;  $ ~else  $ ~~cout << "Oh, my keyboard!\n" ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~long long n , k ;  $ ~cin >> n >> k ;  $ ~string s ;  $ ~cin >> s ;  $ ~sort ( s . begin ( ) , s . end ( ) ) ;  $ ~long long cnt = s [ 0 ] - 'a' + 1 ;  $ ~k -- ;  $ ~char c = s [ 0 ] ;  $ ~for ( long long i = 1 ; i < s . length ( ) && k > 0 ; ++ i ) {  $ ~~if ( s [ i ] - c >= 2 ) {  $ ~~~c = s [ i ] ;  $ ~~~cnt += ( s [ i ] - 'a' + 1 ) ;  $ ~~~k -- ;  $ ~~}  $ ~}  $ ~if ( k == 0 )  $ ~~cout << cnt << endl ;  $ ~else  $ ~~cout << - 1 << endl ;  $ }
int main ( ) {  $ ~int n ;  $ ~cin >> n ;  $ ~long long x , y ;  $ ~int suml = 0 , sumr = 0 ;  $ ~for ( int i = 0 ; i < n ; i ++ ) {  $ ~~cin >> x >> y ;  $ ~~if ( x > 0 )  $ ~~~sumr ++ ;  $ ~~else if ( x < 0 )  $ ~~~suml ++ ;  $ ~}  $ ~if ( suml > 1 && sumr > 1 ) {  $ ~~cout << "No" << endl ;  $ ~} else  $ ~~cout << "Yes" << endl ;  $ ~return 0 ;  $ }
int a [ 302000 ] ;  $ int cnt [ ( int ) ( 2e7 ) ] ;  $ bool done [ ( int ) ( 2e7 ) ] ;  $ const int m = 1.5e7 ;  $ int main ( ) {  $ ~int n ;  $ ~cin >> n ;  $ ~int g ;  $ ~for ( int i = 1 ; i <= n ; i ++ ) {  $ ~~cin >> a [ i ] ;  $ ~~++ cnt [ a [ i ] ] ;  $ ~~if ( i > 1 ) {  $ ~~~g = __gcd ( a [ i ] , g ) ;  $ ~~} else  $ ~~~g = a [ i ] ;  $ ~}  $ ~int ans = 0 ;  $ ~for ( int i = g + 1 ; i <= m ; ++ i ) {  $ ~~if ( ! done [ i ] ) {  $ ~~~int sum = 0 ;  $ ~~~for ( int j = i ; j <= m ; j += i ) {  $ ~~~~sum += cnt [ j ] ;  $ ~~~~done [ j ] = true ;  $ ~~~}  $ ~~~ans = max ( ans , sum ) ;  $ ~~}  $ ~}  $ ~if ( ans == 0 ) {  $ ~~puts ( "-1" ) ;  $ ~} else {  $ ~~cout << n - ans << endl ;  $ ~}  $ ~return 0 ;  $ }
int main ( ) {  $ ~int arr [ 3 ] [ 3 ] ;  $ ~for ( int i = 0 ; i < 3 ; i ++ ) {  $ ~~for ( int j = 0 ; j < 3 ; j ++ ) {  $ ~~~cin >> arr [ i ] [ j ] ;  $ ~~~arr [ i ] [ j ] = arr [ i ] [ j ] % 2 ;  $ ~~}  $ ~}  $ ~int n = 5 ;  $ ~int ans [ 5 ] [ 5 ] ;  $ ~for ( int i = 0 ; i < n ; i ++ ) {  $ ~~for ( int j = 0 ; j < n ; j ++ ) { ans [ i ] [ j ] = 1 ; }  $ ~}  $ ~for ( int i = 1 ; i <= 3 ; i ++ ) {  $ ~~for ( int j = 1 ; j <= 3 ; j ++ ) {  $ ~~~if ( arr [ i - 1 ] [ j - 1 ] == 1 ) {  $ ~~~~if ( ans [ i ] [ j ] == 1 ) {  $ ~~~~~ans [ i ] [ j ] = 0 ;  $ ~~~~} else {  $ ~~~~~ans [ i ] [ j ] = 1 ;  $ ~~~~}  $ ~~~~if ( ans [ i + 1 ] [ j ] == 1 ) {  $ ~~~~~ans [ i + 1 ] [ j ] = 0 ;  $ ~~~~} else {  $ ~~~~~ans [ i + 1 ] [ j ] = 1 ;  $ ~~~~}  $ ~~~~if ( ans [ i - 1 ] [ j ] == 1 ) {  $ ~~~~~ans [ i - 1 ] [ j ] = 0 ;  $ ~~~~} else {  $ ~~~~~ans [ i - 1 ] [ j ] = 1 ;  $ ~~~~}  $ ~~~~if ( ans [ i ] [ j + 1 ] == 1 ) {  $ ~~~~~ans [ i ] [ j + 1 ] = 0 ;  $ ~~~~} else {  $ ~~~~~ans [ i ] [ j + 1 ] = 1 ;  $ ~~~~}  $ ~~~~if ( ans [ i ] [ j - 1 ] == 1 ) {  $ ~~~~~ans [ i ] [ j - 1 ] = 0 ;  $ ~~~~} else {  $ ~~~~~ans [ i ] [ j - 1 ] = 1 ;  $ ~~~~}  $ ~~~}  $ ~~}  $ ~}  $ ~for ( int i = 1 ; i <= 3 ; i ++ ) {  $ ~~for ( int j = 1 ; j <= 3 ; j ++ ) { cout << ans [ i ] [ j ] ; }  $ ~~cout << "\n" ;  $ ~}  $ ~return 0 ;  $ }
int main ( ) {  $ ~{ } ;  $ ~int n ;  $ ~cin >> n ;  $ ~cout << __builtin_popcount ( n ) << '\n' ;  $ ~return 0 ;  $ }
int a [ 10 ] ;  $ int main ( ) {  $ ~int n ;  $ ~string s ;  $ ~cin >> n >> s ;  $ ~for ( int i = 0 ; i < n ; i ++ ) { a [ s [ i ] - '0' ] ++ ; }  $ ~bool ok = 1 ;  $ ~for ( int i = 0 ; i < 10 ; i ++ ) {  $ ~~if ( a [ i ] && i != 7 && i != 4 ) {  $ ~~~ok = 0 ;  $ ~~~break ;  $ ~~}  $ ~}  $ ~if ( ok ) {  $ ~~int sum1 = 0 , sum2 = 0 ;  $ ~~for ( int i = 0 ; i < n / 2 ; i ++ ) { sum1 += s [ i ] - '0' ; }  $ ~~for ( int i = n / 2 ; i < n ; i ++ ) { sum2 += s [ i ] - '0' ; }  $ ~~if ( sum1 == sum2 )  $ ~~~cout << "YES" << endl ;  $ ~~else  $ ~~~cout << "NO" << endl ;  $ ~} else {  $ ~~cout << "NO" << endl ;  $ ~}  $ ~return 0 ;  $ }
long long x , y , m ;  $ long long solve ( ) {  $ ~if ( x > y ) swap ( x , y ) ;  $ ~if ( y >= m ) return 0 ;  $ ~if ( y <= 0 ) return - 1 ;  $ ~long long ans = 0 ;  $ ~if ( x < 0 ) {  $ ~~ans = - x / y ;  $ ~~x += ans * y ;  $ ~}  $ ~while ( y < m ) {  $ ~~x = x + y ;  $ ~~if ( x > y ) swap ( x , y ) ;  $ ~~ans ++ ;  $ ~}  $ ~return ans ;  $ }  $ int main ( ) {  $ ~cin >> x >> y >> m ;  $ ~long long ans = solve ( ) ;  $ ~cout << ans << endl ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~int n , a , b ;  $ ~cin >> n >> b >> a ;  $ ~int arr [ n ] ;  $ ~for ( int i = 0 ; i < ( n ) ; i ++ ) { cin >> arr [ i ] ; }  $ ~sort ( arr , arr + n ) ;  $ ~cout << ( arr [ a ] - arr [ a - 1 ] ) << '\n' ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~int w , h ;  $ ~cin >> w >> h ;  $ ~int Stone [ 2 ] [ 2 ] ;  $ ~cin >> Stone [ 0 ] [ 0 ] >> Stone [ 0 ] [ 1 ] ;  $ ~cin >> Stone [ 1 ] [ 0 ] >> Stone [ 1 ] [ 1 ] ;  $ ~while ( h != 0 ) {  $ ~~w += h ;  $ ~~if ( h == Stone [ 0 ] [ 1 ] ) w -= Stone [ 0 ] [ 0 ] ;  $ ~~if ( h == Stone [ 1 ] [ 1 ] ) w -= Stone [ 1 ] [ 0 ] ;  $ ~~if ( w < 0 ) w = 0 ;  $ ~~h -- ;  $ ~}  $ ~cout << w << endl ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~int n , k , a , b , s = 0 ;  $ ~cin >> n >> k ;  $ ~for ( int i = 0 ; i < n ; i ++ ) {  $ ~~cin >> a >> b ;  $ ~~s = s + ( b - a + 1 ) ;  $ ~}  $ ~int ans = ( k - ( s % k ) ) ;  $ ~if ( ans == k ) ans = 0 ;  $ ~cout << ans << endl ;  $ ~return 0 ;  $ }
int n , m ;  $ int a [ 101 ] ;  $ bool adj [ 101 ] [ 101 ] ;  $ int main ( ) {  $ ~cin >> n >> m ;  $ ~for ( int i = 1 ; i <= n ; i ++ ) cin >> a [ i ] ;  $ ~memset ( adj , false , sizeof adj ) ;  $ ~for ( int i = 0 ; i < m ; i ++ ) {  $ ~~int a , b ;  $ ~~cin >> a >> b ;  $ ~~adj [ a ] [ b ] = adj [ b ] [ a ] = true ;  $ ~}  $ ~int my_min = - 1 ;  $ ~for ( int i = 1 ; i <= n ; i ++ )  $ ~~for ( int j = i + 1 ; j <= n ; j ++ )  $ ~~~for ( int k = j + 1 ; k <= n ; k ++ )  $ ~~~~if ( adj [ i ] [ j ] && adj [ j ] [ k ] && adj [ k ] [ i ] )  $ ~~~~~if ( my_min == - 1 || a [ i ] + a [ j ] + a [ k ] < my_min ) my_min = a [ i ] + a [ j ] + a [ k ] ;  $ ~cout << my_min << endl ;  $ ~cout << flush ;  $ ~return 0 ;  $ }
int mp [ 1010 ] [ 1010 ] ;  $ int main ( ) {  $ ~int m , n , k ;  $ ~cin >> m >> n >> k ;  $ ~memset ( mp , 0 , sizeof ( mp ) ) ;  $ ~int flog = 0 ;  $ ~int ans = 0 ;  $ ~for ( int i = 1 ; i <= k ; i ++ ) {  $ ~~int x , y ;  $ ~~cin >> x >> y ;  $ ~~mp [ x ] [ y ] = 1 ;  $ ~~if ( flog == 0 ) {  $ ~~~if ( mp [ x - 1 ] [ y ] && mp [ x - 1 ] [ y - 1 ] && mp [ x ] [ y - 1 ] ) flog = 1 ;  $ ~~~if ( mp [ x + 1 ] [ y ] && mp [ x + 1 ] [ y + 1 ] && mp [ x ] [ y + 1 ] ) flog = 1 ;  $ ~~~if ( mp [ x - 1 ] [ y ] && mp [ x - 1 ] [ y + 1 ] && mp [ x ] [ y + 1 ] ) flog = 1 ;  $ ~~~if ( mp [ x + 1 ] [ y ] && mp [ x + 1 ] [ y - 1 ] && mp [ x ] [ y - 1 ] ) flog = 1 ;  $ ~~~if ( flog ) {  $ ~~~~cout << i << endl ;  $ ~~~~return 0 ;  $ ~~~}  $ ~~}  $ ~}  $ ~cout << "0" << endl ;  $ }
int main ( ) {  $ ~int n , counter1 = 0 , counter2 = 0 , req ;  $ ~int a [ 101 ] ;  $ ~cin >> n ;  $ ~for ( int i = 1 ; i <= n ; i ++ ) {  $ ~~cin >> a [ i ] ;  $ ~~if ( a [ i ] % 2 == 0 )  $ ~~~counter1 += 1 ;  $ ~~else  $ ~~~counter2 += 1 ;  $ ~}  $ ~for ( int i = 1 ; i <= n ; i ++ ) {  $ ~~if ( counter1 > counter2 ) {  $ ~~~if ( a [ i ] % 2 != 0 ) req = i ;  $ ~~} else {  $ ~~~if ( a [ i ] % 2 == 0 ) req = i ;  $ ~~}  $ ~}  $ ~cout << req << endl ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~int k , r ;  $ ~cin >> k >> r ;  $ ~int i = 1 ;  $ ~while ( true ) {  $ ~~if ( ( i * k ) % 10 == 0 || ( ( i * k ) - r ) % 10 == 0 ) {  $ ~~~cout << i << endl ;  $ ~~~break ;  $ ~~}  $ ~~i ++ ;  $ ~}  $ ~return 0 ;  $ }
int main ( ) {  $ ~string s ;  $ ~cin >> s ;  $ ~int count = 0 , c = 0 ;  $ ~string h = "hello" ;  $ ~for ( int i = 0 ; i < s . length ( ) ; i ++ ) {  $ ~~if ( s [ i ] == h [ c ] ) {  $ ~~~c ++ ;  $ ~~~count ++ ;  $ ~~}  $ ~}  $ ~if ( count == 5 )  $ ~~cout << "YES\n" ;  $ ~else  $ ~~cout << "NO\n" ;  $ ~return 0 ;  $ }
const int MAXN = 100005 ;  $ const int MOD = 998244353 ;  $ int a [ MAXN ] ;  $ int dp [ 201 ] [ 2 ] ;  $ int newdp [ 201 ] [ 2 ] ;  $ int main ( ) {  $ ~int n ;  $ ~cin >> n ;  $ ~for ( int i = 0 ; i < n ; ++ i ) { cin >> a [ i ] ; }  $ ~for ( int i = 0 ; i < n ; ++ i ) {  $ ~~if ( i == 0 ) {  $ ~~~if ( a [ i ] == - 1 ) {  $ ~~~~for ( int x = 1 ; x <= 200 ; ++ x ) { newdp [ x ] [ 0 ] = 1 ; }  $ ~~~} else {  $ ~~~~newdp [ a [ i ] ] [ 0 ] = 1 ;  $ ~~~}  $ ~~} else {  $ ~~~if ( a [ i ] == - 1 ) {  $ ~~~~int flag0 = 0 ;  $ ~~~~int flag1 = 0 ;  $ ~~~~for ( int y = 1 ; y <= 200 ; ++ y ) {  $ ~~~~~flag1 += dp [ y ] [ 1 ] ;  $ ~~~~~flag1 %= MOD ;  $ ~~~~}  $ ~~~~for ( int x = 1 ; x <= 200 ; ++ x ) {  $ ~~~~~flag1 -= dp [ x - 1 ] [ 1 ] ;  $ ~~~~~flag1 += MOD ;  $ ~~~~~flag1 %= MOD ;  $ ~~~~~flag1 -= dp [ x - 1 ] [ 0 ] ;  $ ~~~~~flag1 += MOD ;  $ ~~~~~flag1 %= MOD ;  $ ~~~~~flag0 += dp [ x - 1 ] [ 1 ] ;  $ ~~~~~flag0 %= MOD ;  $ ~~~~~flag0 += dp [ x - 1 ] [ 0 ] ;  $ ~~~~~flag0 %= MOD ;  $ ~~~~~flag1 += dp [ x ] [ 0 ] ;  $ ~~~~~flag1 %= MOD ;  $ ~~~~~newdp [ x ] [ 0 ] = flag0 ;  $ ~~~~~newdp [ x ] [ 1 ] = flag1 ;  $ ~~~~}  $ ~~~} else {  $ ~~~~int x = a [ i ] ;  $ ~~~~for ( int y = 1 ; y <= 200 ; ++ y ) {  $ ~~~~~int flag = x <= y ? 1 : 0 ;  $ ~~~~~newdp [ x ] [ flag ] += dp [ y ] [ 1 ] ;  $ ~~~~~newdp [ x ] [ flag ] %= MOD ;  $ ~~~~~if ( y <= x ) {  $ ~~~~~~newdp [ x ] [ flag ] += dp [ y ] [ 0 ] ;  $ ~~~~~~newdp [ x ] [ flag ] %= MOD ;  $ ~~~~~}  $ ~~~~}  $ ~~~}  $ ~~}  $ ~~memcpy ( dp , newdp , 201 * 2 * 4 ) ;  $ ~~memset ( newdp , 0 , 201 * 2 * 4 ) ;  $ ~}  $ ~int ans = 0 ;  $ ~for ( int x = 1 ; x <= 200 ; ++ x ) {  $ ~~ans += dp [ x ] [ 1 ] ;  $ ~~ans %= MOD ;  $ ~}  $ ~cout << ans << endl ;  $ ~return 0 ;  $ }
const int seed = 131 ;  $ const int maxn = 1e5 + 5 ;  $ const int mod = 1e9 + 7 ;  $ int n ;  $ string a ;  $ string s [ 102 ] ;  $ string now ;  $ int vis [ maxn ] ;  $ int main ( ) {  $ ~cin >> n >> a ;  $ ~for ( int i = 1 ; i <= n ; i ++ ) { cin >> s [ i ] ; }  $ ~now = a ;  $ ~int cnt = 0 ;  $ ~while ( 1 ) {  $ ~~int flag = 0 ;  $ ~~if ( cnt == n ) break ;  $ ~~for ( int i = 1 ; i <= n ; i ++ ) {  $ ~~~if ( ! vis [ i ] && s [ i ] . substr ( 0 , 3 ) == now ) {  $ ~~~~vis [ i ] = 1 ;  $ ~~~~cnt ++ ;  $ ~~~~flag = 1 ;  $ ~~~~now = s [ i ] . substr ( 5 ) ;  $ ~~~}  $ ~~}  $ ~~if ( ! flag ) break ;  $ ~}  $ ~if ( now == a )  $ ~~cout << "home" << endl ;  $ ~else  $ ~~cout << "contest" << endl ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~int n , m ;  $ ~cin >> n ;  $ ~m = n / 2 ;  $ ~for ( int i ( 0 ) ; i < m ; i ++ ) {  $ ~~for ( int j ( 0 ) ; j < m - i ; j ++ ) cout << "*" ;  $ ~~int k = i * 2 + 1 ;  $ ~~for ( int j ( 0 ) ; j < k ; j ++ ) cout << "D" ;  $ ~~for ( int j ( 0 ) ; j < m - i ; j ++ ) cout << "*" ;  $ ~~cout << endl ;  $ ~}  $ ~for ( int j ( 0 ) ; j < n ; j ++ ) cout << "D" ;  $ ~cout << endl ;  $ ~for ( int i ( m - 1 ) ; i >= 0 ; i -- ) {  $ ~~for ( int j ( 0 ) ; j < m - i ; j ++ ) cout << "*" ;  $ ~~int k = i * 2 + 1 ;  $ ~~for ( int j ( 0 ) ; j < k ; j ++ ) cout << "D" ;  $ ~~for ( int j ( 0 ) ; j < m - i ; j ++ ) cout << "*" ;  $ ~~cout << endl ;  $ ~}  $ ~return 0 ;  $ }
int main ( ) {  $ ~int k , n ;  $ ~cin >> k >> n ;  $ ~for ( int i = 1 ; ; i ++ ) {  $ ~~if ( ( k * i ) % 10 == n || ( k * i ) % 10 == 0 ) {  $ ~~~cout << i << '\n' ;  $ ~~~break ;  $ ~~}  $ ~}  $ }
int main ( ) {  $ ~int n ;  $ ~cin >> n ;  $ ~if ( n % 5 != 0 ) { n += ( 5 - n % 5 ) ; }  $ ~cout << ceil ( n / 5 ) << endl ;  $ }
int main ( ) {  $ ~int TESTS = 1 ;  $ ~while ( TESTS -- ) {  $ ~~long long n ;  $ ~~cin >> n ;  $ ~~long long a [ n ] ;  $ ~~for ( long long int i = 0 ; i < n ; i ++ ) cin >> a [ i ] ;  $ ~~sort ( a , a + n ) ;  $ ~~long long ans = 0 ;  $ ~~for ( long long int i = 0 ; i < n ; i ++ ) ans += ( i + 2 ) * a [ i ] ;  $ ~~ans -= a [ n - 1 ] ;  $ ~~cout << ans << '\n' ;  $ ~}  $ ~return 0 ;  $ }
int main ( ) {  $ ~int a , b , c , d , t , i ;  $ ~cin >> a >> b >> c ;  $ ~d = a * c ;  $ ~for ( i = 1 ; ; i ++ ) {  $ ~~t = i + c ;  $ ~~t *= b ;  $ ~~if ( t >= d ) break ;  $ ~}  $ ~cout << i << endl ;  $ ~return 0 ;  $ }
string s , t ;  $ int n , m ;  $ long long int mod ;  $ long long int add ( long long int x , long long int y ) {  $ ~return ( x % mod + y % mod ) % mod ;  $ }  $ long long int dp [ 5001 ] [ 5001 ] ;  $ long long int rec ( int i , int j ) {  $ ~if ( dp [ i ] [ j ] != - 1 ) return dp [ i ] [ j ] ;  $ ~if ( j == m || i == n ) { return 0 ; }  $ ~long long int sm = 0 ;  $ ~sm += rec ( i , j + 1 ) ;  $ ~if ( s [ i ] == t [ j ] ) { sm = ( sm + rec ( i + 1 , j + 1 ) + 1 ) % mod ; }  $ ~return dp [ i ] [ j ] = sm ;  $ }  $ int main ( ) {  $ ~mod = 1e9 + 7 ;  $ ~cin >> s >> t ;  $ ~n = s . size ( ) ;  $ ~m = t . size ( ) ;  $ ~long long int ans = 0 ;  $ ~memset ( dp , - 1 , sizeof dp ) ;  $ ~for ( int i = 0 ; i < n ; i ++ ) { ans = ( ans + rec ( i , 0 ) ) % mod ; }  $ ~cout << ans << "\n" ;  $ }
int main ( ) {  $ ~int row , col ;  $ ~cin >> row >> col ;  $ ~char arr [ row ] [ col ] ;  $ ~for ( int i = 0 ; i < row ; i ++ )  $ ~~for ( int j = 0 ; j < col ; j ++ ) cin >> arr [ i ] [ j ] ;  $ ~for ( int i = 0 ; i < row ; i ++ ) {  $ ~~for ( int j = 0 ; j < col ; j ++ ) {  $ ~~~if ( arr [ i ] [ j ] == '.' ) {  $ ~~~~if ( ( i + j ) & 1 ) {  $ ~~~~~arr [ i ] [ j ] = 'W' ;  $ ~~~~} else {  $ ~~~~~arr [ i ] [ j ] = 'B' ;  $ ~~~~}  $ ~~~}  $ ~~~cout << arr [ i ] [ j ] ;  $ ~~}  $ ~~cout << endl ;  $ ~}  $ ~return 0 ;  $ }
int main ( ) {  $ ~int numround , misha , chris , mcount = 0 , ccount = 0 ;  $ ~cin >> numround ;  $ ~int arr [ 100 ] ;  $ ~for ( int i = 0 ; i < numround ; i ++ ) {  $ ~~cin >> misha >> chris ;  $ ~~if ( misha > chris ) {  $ ~~~mcount ++ ;  $ ~~} else if ( chris > misha ) {  $ ~~~ccount ++ ;  $ ~~}  $ ~}  $ ~if ( mcount > ccount ) {  $ ~~cout << "Mishka" << endl ;  $ ~} else if ( ccount > mcount )  $ ~~cout << "Chris\n" ;  $ ~else if ( mcount == ccount )  $ ~~cout << "Friendship is magic!^^\n" ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~int a , b , c , t , l , i , k = 0 ;  $ ~double sum = 0 , d = 0 ;  $ ~cin >> a >> b ;  $ ~for ( i = 1 ; i <= a ; i ++ ) {  $ ~~cin >> c ;  $ ~~if ( sum <= ceil ( ( double ) c / b ) ) {  $ ~~~sum = ceil ( ( double ) c / b ) ;  $ ~~~k = i ;  $ ~~}  $ ~}  $ ~cout << k << endl ;  $ }
long long n , m , k , l ;  $ int main ( ) {  $ ~cin >> n >> m >> k >> l ;  $ ~if ( m > n ) {  $ ~~cout << - 1 << endl ;  $ ~~return 0 ;  $ ~}  $ ~if ( k + l <= m ) {  $ ~~cout << 1 << endl ;  $ ~~return 0 ;  $ ~}  $ ~long long a ;  $ ~if ( ( k + l ) % m == 0 )  $ ~~a = ( k + l ) / m ;  $ ~else  $ ~~a = ( k + l ) / m + 1 ;  $ ~if ( a * m > n )  $ ~~cout << - 1 << endl ;  $ ~else  $ ~~cout << a << endl ;  $ }
int main ( ) {  $ ~int n ;  $ ~string s ;  $ ~cin >> n ;  $ ~while ( n -- ) {  $ ~~cin >> s ;  $ ~~if ( s . length ( ) > 10 ) {  $ ~~~cout << s [ 0 ] << s . length ( ) - 2 << s [ s . length ( ) - 1 ] << endl ;  $ ~~} else {  $ ~~~cout << s << endl ;  $ ~~}  $ ~}  $ ~return 0 ;  $ }
int main ( ) {  $ ~long long distance ;  $ ~cin >> distance ;  $ ~long long blocked ;  $ ~blocked = 0 ;  $ ~long long x , y ;  $ ~x = distance ;  $ ~y = 0 ;  $ ~if ( distance == 0 ) {  $ ~~blocked = 1 ;  $ ~} else {  $ ~~while ( x > 0 ) {  $ ~~~if ( x <= y ) {  $ ~~~~x -- ;  $ ~~~~y ++ ;  $ ~~~~if ( x * x + y * y > distance * distance ) { y -- ; }  $ ~~~~blocked ++ ;  $ ~~~}  $ ~~~while ( x > y ) {  $ ~~~~y ++ ;  $ ~~~~if ( x * x + y * y > distance * distance ) { x -- ; }  $ ~~~~blocked ++ ;  $ ~~~}  $ ~~}  $ ~}  $ ~if ( distance == 0 ) {  $ ~~cout << blocked << endl ;  $ ~} else {  $ ~~cout << 4 * blocked << endl ;  $ ~}  $ ~return 0 ;  $ }
int main ( ) {  $ ~long long n , m , a , b ;  $ ~cin >> n >> m >> a >> b ;  $ ~if ( n % m == 0 )  $ ~~cout << "0" << endl ;  $ ~else {  $ ~~long long x = n / m ;  $ ~~long long y = n % m ;  $ ~~long long sum = min ( y * b , ( m - y ) * a ) ;  $ ~~cout << sum << endl ;  $ ~}  $ ~return 0 ;  $ }
vector < int > v ;  $ int main ( ) {  $ ~int n , x1 , x2 , y1 , y2 ;  $ ~cin >> n ;  $ ~int sum = 0 ;  $ ~for ( int j = 0 ; j < n ; j ++ ) {  $ ~~cin >> x1 >> y1 >> x2 >> y2 ;  $ ~~int a = ( x2 - x1 ) + 1 ;  $ ~~int b = ( y2 - y1 ) + 1 ;  $ ~~int ans = a * b ;  $ ~~v . push_back ( ans ) ;  $ ~}  $ ~for ( int j = 0 ; j < v . size ( ) ; j ++ ) { sum = sum + v [ j ] ; }  $ ~cout << sum << endl ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~string a1 , a2 ;  $ ~string a ;  $ ~cin >> a ;  $ ~int i = 0 ;  $ ~for ( i = 0 ; i < a . size ( ) ; i ++ ) {  $ ~~if ( a [ i ] != '0' ) break ;  $ ~}  $ ~for ( ; i < a . size ( ) ; i ++ ) { a1 += a [ i ] ; }  $ ~cin >> a ;  $ ~for ( i = 0 ; i < a . size ( ) ; i ++ ) {  $ ~~if ( a [ i ] != '0' ) break ;  $ ~}  $ ~for ( ; i < a . size ( ) ; i ++ ) { a2 += a [ i ] ; }  $ ~if ( a1 . size ( ) > a2 . size ( ) ) {  $ ~~cout << '>' << endl ;  $ ~} else if ( a1 . size ( ) < a2 . size ( ) ) {  $ ~~cout << '<' << endl ;  $ ~} else if ( a1 . size ( ) == a2 . size ( ) ) {  $ ~~if ( a1 > a2 )  $ ~~~cout << '>' << endl ;  $ ~~else if ( a1 < a2 )  $ ~~~cout << '<' << endl ;  $ ~~else if ( a1 == a2 )  $ ~~~cout << '=' << endl ;  $ ~}  $ ~return 0 ;  $ }
int a , b , minn , maxx ;  $ int main ( ) {  $ ~cin >> a >> b ;  $ ~minn = min ( a , b ) ;  $ ~maxx = max ( a , b ) ;  $ ~cout << minn << " " << ( maxx - minn ) / 2 << endl ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~int n ;  $ ~int cnt ;  $ ~int a [ 110 ] ;  $ ~while ( cin >> n ) {  $ ~~cnt = 0 ;  $ ~~for ( int i = 0 ; i < n ; i ++ ) {  $ ~~~cin >> a [ i ] ;  $ ~~~if ( a [ i ] == 1 ) cnt ++ ;  $ ~~}  $ ~~for ( int i = 0 ; i < n ; i ++ ) {  $ ~~~if ( a [ i ] == 1 && a [ i + 1 ] == 0 && a [ i + 2 ] == 1 ) { cnt ++ ; }  $ ~~}  $ ~~cout << cnt << endl ;  $ ~}  $ ~return 0 ;  $ }
ofstream fo ( "test.out" ) ;  $ ifstream fi ( "test.inp" ) ;  $ int a [ 4 ] [ 4 ] , rs [ 5 ] [ 5 ] ;  $ int main ( ) {  $ ~for ( int i = 1 ; i <= 3 ; i ++ )  $ ~~for ( int j = 1 ; j <= 3 ; j ++ ) {  $ ~~~cin >> a [ i ] [ j ] ;  $ ~~~rs [ i ] [ j ] = 1 ;  $ ~~}  $ ~for ( int i = 1 ; i <= 3 ; i ++ )  $ ~~for ( int j = 1 ; j <= 3 ; j ++ ) {  $ ~~~if ( a [ i ] [ j ] % 2 ) {  $ ~~~~if ( rs [ i - 1 ] [ j ] )  $ ~~~~~rs [ i - 1 ] [ j ] = 0 ;  $ ~~~~else  $ ~~~~~rs [ i - 1 ] [ j ] = 1 ;  $ ~~~~if ( rs [ i + 1 ] [ j ] )  $ ~~~~~rs [ i + 1 ] [ j ] = 0 ;  $ ~~~~else  $ ~~~~~rs [ i + 1 ] [ j ] = 1 ;  $ ~~~~if ( rs [ i ] [ j - 1 ] )  $ ~~~~~rs [ i ] [ j - 1 ] = 0 ;  $ ~~~~else  $ ~~~~~rs [ i ] [ j - 1 ] = 1 ;  $ ~~~~if ( rs [ i ] [ j + 1 ] )  $ ~~~~~rs [ i ] [ j + 1 ] = 0 ;  $ ~~~~else  $ ~~~~~rs [ i ] [ j + 1 ] = 1 ;  $ ~~~~if ( rs [ i ] [ j ] )  $ ~~~~~rs [ i ] [ j ] = 0 ;  $ ~~~~else  $ ~~~~~rs [ i ] [ j ] = 1 ;  $ ~~~}  $ ~~}  $ ~for ( int i = 1 ; i <= 3 ; i ++ ) cout << rs [ i ] [ 1 ] << rs [ i ] [ 2 ] << rs [ i ] [ 3 ] << "\n" ;  $ }
int main ( ) {  $ ~int n , i ;  $ ~cin >> n ;  $ ~string s [ 100 ] ;  $ ~for ( i = 0 ; i < n ; i ++ ) cin >> s [ i ] ;  $ ~for ( i = 0 ; i < n ; i ++ ) {  $ ~~if ( s [ i ] . size ( ) > 10 )  $ ~~~cout << s [ i ] [ 0 ] << s [ i ] . size ( ) - 2 << s [ i ] [ s [ i ] . size ( ) - 1 ] << '\n' ;  $ ~~else  $ ~~~cout << s [ i ] << '\n' ;  $ ~}  $ ~return 0 ;  $ }
long long int k = 0 , n = 0 , c = 0 , b = 0 , l , r , m ;  $ string s ;  $ bool turimi ( long long int n , long long int k ) {  $ ~long long int c = 0 , r = 0 ;  $ ~while ( n ) {  $ ~~if ( n % 2 ) c ++ ;  $ ~~n /= 2 ;  $ ~}  $ ~return c <= k ;  $ }  $ int main ( ) {  $ ~cin >> n >> m ;  $ ~long long int a [ n ] = { } , b [ m ] = { } ;  $ ~for ( long long int i = 0 ; i < n ; i ++ ) cin >> a [ i ] ;  $ ~for ( long long int i = 0 ; i < m ; i ++ ) cin >> b [ i ] ;  $ ~r = 0 ;  $ ~for ( long long int i = 0 ; i < n && r < m ; i ++ )  $ ~~if ( a [ i ] <= b [ r ] ) r ++ ;  $ ~cout << r << endl ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~int k , a , b , v ;  $ ~cin >> k >> a >> b >> v ;  $ ~int box = 0 ;  $ ~while ( a > 0 ) {  $ ~~box ++ ;  $ ~~if ( b > 0 ) {  $ ~~~if ( b >= k - 1 ) {  $ ~~~~a -= k * v ;  $ ~~~~b -= k - 1 ;  $ ~~~} else {  $ ~~~~a -= ( b + 1 ) * v ;  $ ~~~~b = 0 ;  $ ~~~}  $ ~~} else {  $ ~~~a -= v ;  $ ~~}  $ ~}  $ ~cout << box << endl ;  $ }
const double PI = acos ( - 1.0 ) ;  $ const double E = exp ( 1.0 ) ;  $ const double eps = 1e-30 ;  $ const int INF = 0 x3f3f3f3f ;  $ const int maxn = 1e3 + 10 ;  $ const int MOD = 1e9 + 7 ;  $ int main ( ) {  $ ~int n ;  $ ~while ( cin >> n ) { cout << ( n & 1 ) << endl ; }  $ ~return 0 ;  $ }
int main ( ) {  $ ~int n , s ;  $ ~cin >> n >> s ;  $ ~int a [ n ] , b [ n ] ;  $ ~for ( int i = 0 ; i < n ; i ++ ) cin >> a [ i ] ;  $ ~for ( int i = 0 ; i < n ; i ++ ) cin >> b [ i ] ;  $ ~if ( a [ 0 ] == 0 )  $ ~~cout << "NO" << endl ;  $ ~else if ( a [ s - 1 ] == 1 )  $ ~~cout << "YES" << endl ;  $ ~else if ( b [ s - 1 ] == 1 ) {  $ ~~for ( int i = 0 ; i <= ( n - s - 1 ) ; i ++ )  $ ~~~if ( ( b [ s + i ] == 1 ) && ( a [ s + i ] == 1 ) ) {  $ ~~~~cout << "YES" << endl ;  $ ~~~~return 0 ;  $ ~~~}  $ ~~cout << "NO" << endl ;  $ ~} else  $ ~~cout << "NO" << endl ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~int k , n , s , p ;  $ ~cin >> k >> n >> s >> p ;  $ ~int res1 , res2 ;  $ ~if ( n % s )  $ ~~res1 = n / s + 1 ;  $ ~else  $ ~~res1 = n / s ;  $ ~if ( ( res1 * k ) % p )  $ ~~res2 = ( res1 * k ) / p + 1 ;  $ ~else  $ ~~res2 = ( res1 * k ) / p ;  $ ~cout << res2 << endl ;  $ }
int t ;  $ int main ( ) {  $ ~cin >> t ;  $ ~for ( int i = 0 ; i < t ; i ++ ) {  $ ~~int end , v , l , r ;  $ ~~cin >> end >> v >> l >> r ;  $ ~~int ans = end / v ;  $ ~~int ans2 = r / v - l / v ;  $ ~~if ( l % v == 0 ) ans2 += 1 ;  $ ~~cout << ans - ans2 << endl ;  $ ~}  $ ~return 0 ;  $ }
string s ;  $ int main ( ) {  $ ~int n ;  $ ~cin >> n ;  $ ~for ( int i = ( 0 ) ; i < ( n ) ; i ++ ) {  $ ~~cin >> s ;  $ ~~int largo = s . size ( ) ;  $ ~~if ( largo > 10 )  $ ~~~cout << s [ 0 ] << largo - 2 << s [ largo - 1 ] ;  $ ~~else  $ ~~~cout << s ;  $ ~~cout << endl ;  $ ~}  $ }
int t , i , j , tam , dif ;  $ bool yes ;  $ string s ;  $ int main ( ) {  $ ~cin >> t ;  $ ~while ( t -- ) {  $ ~~cin >> tam >> s ;  $ ~~yes = true ;  $ ~~for ( i = 0 , j = tam - 1 ; yes , i < tam / 2 ; i ++ , j -- ) {  $ ~~~dif = abs ( s [ i ] - s [ j ] ) ;  $ ~~~if ( ! ( dif == 2 || s [ i ] == s [ j ] ) ) { yes = false ; }  $ ~~}  $ ~~cout << ( yes ? "YES\n" : "NO\n" ) ;  $ ~}  $ ~return 0 ;  $ }
int a [ 1000 + 2 ] ;  $ int b [ 1000 + 2 ] ;  $ int main ( ) {  $ ~int n ;  $ ~cin >> n ;  $ ~for ( int i = 1 ; i <= n ; i ++ ) { cin >> a [ i ] ; }  $ ~for ( int i = 1 ; i <= n ; i ++ ) { cin >> b [ i ] ; }  $ ~int sum = 0 ;  $ ~int x , y ;  $ ~int w , e ;  $ ~for ( int i = 1 ; i <= n ; i ++ ) {  $ ~~for ( int j = 1 ; j <= n ; j ++ ) {  $ ~~~x = 0 ;  $ ~~~y = 0 ;  $ ~~~for ( int t = i ; t <= j ; t ++ ) {  $ ~~~~x = x | a [ t ] ;  $ ~~~~y = y | b [ t ] ;  $ ~~~}  $ ~~~if ( ( x + y ) > sum ) {  $ ~~~~sum = x + y ;  $ ~~~~w = x ;  $ ~~~~e = y ;  $ ~~~}  $ ~~}  $ ~}  $ ~cout << sum << endl ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~long long n ;  $ ~cin >> n ;  $ ~if ( n & 1 ) {  $ ~~cout << 1 << endl ;  $ ~} else {  $ ~~cout << 2 << endl ;  $ ~}  $ ~return 0 ;  $ }
int a [ 100 + 10 ] ;  $ int main ( ) {  $ ~int n , m ;  $ ~cin >> n >> m ;  $ ~for ( int i = 1 ; i <= n ; i ++ ) {  $ ~~int t1 , t2 ;  $ ~~cin >> t1 >> t2 ;  $ ~~a [ i ] = t1 * 60 + t2 ;  $ ~}  $ ~int flag = 1 ;  $ ~a [ 0 ] = 0 ;  $ ~for ( int i = 1 ; i <= n ; i ++ ) {  $ ~~if ( i == 1 ) {  $ ~~~if ( a [ 1 ] >= m + 1 ) {  $ ~~~~flag = 0 ;  $ ~~~~cout << 0 << " " << 0 << endl ;  $ ~~~~break ;  $ ~~~}  $ ~~} else {  $ ~~~if ( a [ i ] - a [ i - 1 ] >= 2 * m + 2 ) {  $ ~~~~int t1 = ( a [ i - 1 ] + m + 1 ) / 60 ;  $ ~~~~int t2 = ( a [ i - 1 ] + m + 1 ) % 60 ;  $ ~~~~cout << t1 << " " << t2 << endl ;  $ ~~~~flag = 0 ;  $ ~~~~break ;  $ ~~~}  $ ~~}  $ ~}  $ ~if ( flag == 1 ) { cout << ( a [ n ] + m + 1 ) / 60 << " " << ( a [ n ] + m + 1 ) % 60 << endl ; }  $ ~return 0 ;  $ }
int main ( ) {  $ ~int n , k ;  $ ~int total = 4 * 60 ;  $ ~cin >> n >> k ;  $ ~int arr [ n ] ;  $ ~for ( int i = 0 ; i < n ; i ++ ) arr [ i ] = 5 * ( i + 1 ) ;  $ ~for ( int i = 1 ; i < n ; i ++ ) arr [ i ] += arr [ i - 1 ] ;  $ ~int start = 0 , end = n - 1 ;  $ ~int ans = - 1 ;  $ ~while ( start <= end ) {  $ ~~int mid = ( start + end ) / 2 ;  $ ~~if ( arr [ mid ] + k <= total ) {  $ ~~~start = mid + 1 ;  $ ~~~ans = mid ;  $ ~~} else  $ ~~~end = mid - 1 ;  $ ~}  $ ~cout << ans + 1 << endl ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~int n ;  $ ~cin >> n ;  $ ~string a [ n ] ;  $ ~for ( int i = 0 ; i < n ; i ++ ) { cin >> a [ i ] ; }  $ ~for ( int i = 0 ; i < n ; i ++ ) {  $ ~~if ( a [ i ] . size ( ) > 10 )  $ ~~~cout << a [ i ] [ 0 ] << a [ i ] . size ( ) - 2 << a [ i ] [ a [ i ] . size ( ) - 1 ] << endl ;  $ ~~else  $ ~~~cout << a [ i ] << endl ;  $ ~}  $ }
int main ( ) {  $ ~int n , x , y ;  $ ~cin >> n >> x >> y ;  $ ~int clones = ( n * y + 99 ) / 100 - x ;  $ ~if ( clones < 0 ) { clones = 0 ; }  $ ~cout << clones << endl ;  $ ~return 0 ;  $ }
void fastIo ( ) { }  $ int main ( ) {  $ ~fastIo ( ) ;  $ ~int n , m ;  $ ~cin >> n >> m ;  $ ~vector < string > ans ( n + 2 ) ;  $ ~for ( int i = 0 ; i < n ; i ++ ) cin >> ans [ i ] ;  $ ~char ch = 'W' ;  $ ~for ( int i = 0 ; i < n ; i ++ ) {  $ ~~if ( ch == 'W' )  $ ~~~ch = 'B' ;  $ ~~else  $ ~~~ch = 'W' ;  $ ~~char temp = ch ;  $ ~~for ( int j = 0 ; j < m ; j ++ ) {  $ ~~~if ( ans [ i ] [ j ] == '.' ) ans [ i ] [ j ] = temp ;  $ ~~~if ( temp == 'W' )  $ ~~~~temp = 'B' ;  $ ~~~else  $ ~~~~temp = 'W' ;  $ ~~}  $ ~}  $ ~for ( int i = 0 ; i < n ; i ++ ) {  $ ~~for ( int j = 0 ; j < m ; j ++ ) cout << ans [ i ] [ j ] ;  $ ~~cout << endl ;  $ ~}  $ ~return 0 ;  $ }
int main ( ) {  $ ~int n , k , x , A [ 101 ] , sum ( 0 ) ;  $ ~cin >> n >> k >> x ;  $ ~for ( int i = 0 ; i < n ; i ++ ) cin >> A [ i ] ;  $ ~for ( int i = 0 ; i < n - k ; i ++ ) { sum += A [ i ] ; }  $ ~cout << sum + k * x << endl ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~int n ;  $ ~cin >> n ;  $ ~set < int > ss ;  $ ~bool f = 0 ;  $ ~for ( int i = 0 ; i < n ; i ++ ) {  $ ~~int x ;  $ ~~cin >> x ;  $ ~~if ( x == 0 ) f = 1 ;  $ ~~ss . insert ( x ) ;  $ ~}  $ ~cout << ss . size ( ) - ( f ? 1 : 0 ) << endl ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~int n ;  $ ~cin >> n ;  $ ~vector < int > math , pr , pe ;  $ ~int t ;  $ ~for ( int i = 0 ; i < n ; i ++ ) {  $ ~~cin >> t ;  $ ~~if ( t == 1 ) pr . push_back ( i ) ;  $ ~~if ( t == 2 ) math . push_back ( i ) ;  $ ~~if ( t == 3 ) pe . push_back ( i ) ;  $ ~}  $ ~int ans = min ( pr . size ( ) , min ( math . size ( ) , pe . size ( ) ) ) ;  $ ~cout << ans << endl ;  $ ~for ( int i = 0 ; i < ans ; i ++ ) { cout << pr [ i ] + 1 << " " << math [ i ] + 1 << " " << pe [ i ] + 1 << endl ; }  $ }
int main ( ) {  $ ~int t ;  $ ~cin >> t ;  $ ~while ( t -- ) {  $ ~~int x , s , n ;  $ ~~cin >> x ;  $ ~~if ( ( 360 ) % ( 180 - x ) == 0 ) {  $ ~~~cout << "YES\n" ;  $ ~~} else {  $ ~~~cout << "NO\n" ;  $ ~~}  $ ~}  $ ~return 0 ;  $ }
const int maxn = 1e5 + 5 ;  $ int num [ maxn ] = { 0 } ;  $ int n , ans = 1000000000 ;  $ int main ( ) {  $ ~cin >> n ;  $ ~for ( int i = 1 ; i <= n ; i ++ ) cin >> num [ i ] ;  $ ~for ( int i = 1 ; i <= n ; i ++ ) {  $ ~~int cnt = 0 ;  $ ~~for ( int j = 1 ; j <= n ; j ++ ) cnt += 2 * num [ j ] * ( abs ( i - j ) + abs ( j - 1 ) + abs ( 1 - i ) ) ;  $ ~~ans = min ( cnt , ans ) ;  $ ~}  $ ~cout << ans << endl ;  $ ~return 0 ;  $ }
int add ( int a ) {  $ ~int sum = 0 , x = a ;  $ ~while ( a >= 10 ) {  $ ~~sum += ( a % 10 ) ;  $ ~~a = a / 10 ;  $ ~}  $ ~sum += a ;  $ ~sum += x ;  $ ~return sum ;  $ }  $ int main ( ) {  $ ~int n , x , c = 1 , a [ 10000 ] , i ;  $ ~cin >> n ;  $ ~int k = 0 ;  $ ~if ( n >= 100000 ) {  $ ~~i = n - 10000 ;  $ ~} else {  $ ~~i = 0 ;  $ ~}  $ ~for ( ; i <= n ; i ++ ) {  $ ~~int o = add ( i ) ;  $ ~~if ( n == o ) { a [ k ++ ] = i ; }  $ ~}  $ ~cout << k << endl ;  $ ~for ( int i = 0 ; i < k ; i ++ ) { cout << a [ i ] << endl ; }  $ ~return 0 ;  $ }
int main ( ) {  $ ~long long n , i , k , a , j , mx = - 1 ;  $ ~cin >> n ;  $ ~for ( i = 0 ; i < n ; i ++ ) {  $ ~~cin >> k >> a ;  $ ~~for ( j = 1 ; j < 15 ; j ++ ) {  $ ~~~if ( pow ( 4 , j ) >= a ) break ;  $ ~~}  $ ~~mx = max ( mx , j + k ) ;  $ ~}  $ ~cout << mx << endl ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~int n , a [ 35 ] [ 2 ] , e = 0 ;  $ ~cin >> n ;  $ ~for ( int i = 0 ; i < n ; i ++ ) cin >> a [ i ] [ 1 ] >> a [ i ] [ 2 ] ;  $ ~for ( int i = 0 ; i < n ; i ++ ) {  $ ~~for ( int j = i + 1 ; j < n ; j ++ ) {  $ ~~~if ( a [ i ] [ 1 ] == a [ j ] [ 2 ] ) e ++ ;  $ ~~~if ( a [ i ] [ 2 ] == a [ j ] [ 1 ] ) e ++ ;  $ ~~}  $ ~}  $ ~cout << e << endl ;  $ }
void print ( int a [ ] , int n ) {  $ ~for ( int i = 1 ; i < n ; i ++ ) cout << a [ i ] << " " ;  $ ~cout << endl ;  $ }  $ int main ( ) {  $ ~int n ;  $ ~cin >> n ;  $ ~int eat [ n + 1 ] , cost [ n + 1 ] ;  $ ~for ( int i = 1 ; i <= n ; i ++ ) { cin >> eat [ i ] >> cost [ i ] ; }  $ ~int cost_min [ n ] ;  $ ~cost_min [ 1 ] = cost [ 1 ] ;  $ ~int min = cost [ 1 ] ;  $ ~for ( int i = 1 ; i <= n ; i ++ ) {  $ ~~if ( cost [ i ] < min ) {  $ ~~~cost_min [ i ] = cost [ i ] ;  $ ~~~min = cost [ i ] ;  $ ~~} else  $ ~~~cost_min [ i ] = min ;  $ ~}  $ ~int money = 0 ;  $ ~for ( int i = 1 ; i <= n ; i ++ ) { money += eat [ i ] * cost_min [ i ] ; }  $ ~cout << money << endl ;  $ }
int main ( ) {  $ ~long long n , k ;  $ ~cin >> n >> k ;  $ ~long long ans = 0 ;  $ ~for ( long long i = 0 ; i <= n ; i ++ ) {  $ ~~long long temp = ( k - ( 2 * i ) ) ;  $ ~~long long mul = ( n - i ) * 3 ;  $ ~~if ( mul <= temp ) {  $ ~~~cout << i << endl ;  $ ~~~return 0 ;  $ ~~}  $ ~}  $ ~return 0 ;  $ }
const long long mod = 1e9 + 7 ;  $ int main ( ) {  $ ~int n , ans = 1 ;  $ ~int a [ 100050 ] ;  $ ~int dp [ 100050 ] ;  $ ~cin >> n ;  $ ~for ( int i = 0 ; i < n ; i ++ ) cin >> a [ i ] ;  $ ~dp [ 0 ] = 1 ;  $ ~for ( int i = 1 ; i < n ; i ++ ) {  $ ~~dp [ i ] = 1 ;  $ ~~if ( a [ i ] > a [ i - 1 ] ) dp [ i ] = dp [ i - 1 ] + 1 ;  $ ~~ans = max ( dp [ i ] , ans ) ;  $ ~}  $ ~cout << ans << endl ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~int num ;  $ ~cin >> num ;  $ ~int count ;  $ ~for ( int i = 1 ; i <= num ; i ++ ) {  $ ~~cin >> count ;  $ ~~if ( 360 % ( 180 - count ) == 0 ) {  $ ~~~cout << "YES" << endl ;  $ ~~} else {  $ ~~~cout << "NO" << endl ;  $ ~~}  $ ~}  $ ~return 0 ;  $ }
int main ( ) {  $ ~long long n , x ;  $ ~cin >> n ;  $ ~for ( ; ; ) {  $ ~~x = n % 10 ;  $ ~~if ( x < 5 ) {  $ ~~~cout << "O-|" ;  $ ~~~for ( int i = 0 ; i < x ; i ++ ) cout << "O" ;  $ ~~~cout << "-" ;  $ ~~~for ( int i = 0 ; i < 4 - x ; i ++ ) cout << "O" ;  $ ~~~cout << endl ;  $ ~~} else {  $ ~~~x -= 5 ;  $ ~~~cout << "-O|" ;  $ ~~~for ( int i = 0 ; i < x ; i ++ ) cout << "O" ;  $ ~~~cout << "-" ;  $ ~~~for ( int i = 0 ; i < 4 - x ; i ++ ) cout << "O" ;  $ ~~~cout << endl ;  $ ~~}  $ ~~n /= 10 ;  $ ~~if ( n == 0 ) break ;  $ ~}  $ ~return 0 ;  $ }
const int maxn = 1e3 + 5 ;  $ int a [ maxn ] , b [ maxn ] ;  $ int main ( ) {  $ ~int sum = 0 , max = 0 ;  $ ~int n ;  $ ~cin >> n ;  $ ~for ( int i = 0 ; i < n ; i ++ ) {  $ ~~cin >> a [ i ] >> b [ i ] ;  $ ~~sum = sum - a [ i ] + b [ i ] ;  $ ~~max = sum > max ? sum : max ;  $ ~}  $ ~cout << max << endl ;  $ ~return 0 ;  $ }
int n , k ;  $ long long r , l , val ;  $ int main ( ) {  $ ~cin >> n >> k ;  $ ~while ( n -- ) {  $ ~~cin >> l >> r ;  $ ~~val += r - l + 1 ;  $ ~}  $ ~cout << ( k - ( val % k ) ) % k << endl ;  $ ~return 0 ;  $ }
int n , m ;  $ int main ( ) {  $ ~cin >> n >> m ;  $ ~if ( ! n ) {  $ ~~if ( m > 0 )  $ ~~~cout << "Impossible" << endl ;  $ ~~else  $ ~~~cout << 0 << ' ' << 0 << endl ;  $ ~} else if ( ! m ) {  $ ~~cout << n << ' ' << n << endl ;  $ ~} else {  $ ~~int mini = n + m - min ( n , m ) ;  $ ~~int max = n + m - 1 ;  $ ~~cout << mini << ' ' << max << endl ;  $ ~}  $ ~return 0 ;  $ }
int n ;  $ int A [ 1000 ] ;  $ int main ( ) {  $ ~cin >> n ;  $ ~for ( int i = 0 ; i < n ; i ++ ) cin >> A [ i ] ;  $ ~int G = 0 , C = 0 ;  $ ~for ( int i = 0 ; i < n ; i ++ ) {  $ ~~if ( A [ i ] == 0 ) {  $ ~~~G = min ( C , G ) + 1 ;  $ ~~~C = G ;  $ ~~} else if ( A [ i ] == 1 ) {  $ ~~~int temp = G ;  $ ~~~G = min ( G , C ) + 1 ;  $ ~~~C = min ( temp , C + 1 ) ;  $ ~~} else if ( A [ i ] == 2 ) {  $ ~~~int temp = C ;  $ ~~~C = min ( G , C ) + 1 ;  $ ~~~G = min ( temp , G + 1 ) ;  $ ~~} else {  $ ~~~int temp = G ;  $ ~~~G = min ( C , G + 1 ) ;  $ ~~~C = min ( temp , C + 1 ) ;  $ ~~}  $ ~}  $ ~cout << min ( G , C ) << endl ;  $ }
long long n ;  $ int main ( ) {  $ ~cin >> n ;  $ ~while ( 1 ) {  $ ~~n ++ ;  $ ~~char a , b , c , d ;  $ ~~a = n % 10 ;  $ ~~b = n / 10 % 10 ;  $ ~~c = n / 100 % 10 ;  $ ~~d = n / 1000 % 10 ;  $ ~~if ( a != b && a != c && a != d && b != c && b != d && c != d ) {  $ ~~~cout << n << endl ;  $ ~~~return 0 ;  $ ~~}  $ ~}  $ ~return 0 ;  $ }
int value [ 101 ] ;  $ int isLucky ( int n ) {  $ ~int sum = 0 ;  $ ~while ( n ) {  $ ~~if ( n % 10 == 4 || n % 10 == 7 ) sum ++ ;  $ ~~n /= 10 ;  $ ~}  $ ~return sum ;  $ }  $ int main ( ) {  $ ~int n , k , count = 0 ;  $ ~cin >> n >> k ;  $ ~for ( int i = 0 ; i < n ; i ++ ) {  $ ~~cin >> value [ i ] ;  $ ~~if ( isLucky ( value [ i ] ) <= k ) count ++ ;  $ ~}  $ ~cout << count << endl ;  $ }
int main ( ) {  $ ~int gcd = 0 , n [ 1000 ] , i , t ;  $ ~cin >> t ;  $ ~for ( int i = 0 ; i < t ; i ++ ) {  $ ~~cin >> n [ i ] ;  $ ~~gcd = __gcd ( gcd , n [ i ] ) ;  $ ~}  $ ~cout << t * gcd << endl ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~int k , a , b , v ;  $ ~cin >> k >> a >> b >> v ;  $ ~int full = b / ( k - 1 ) ;  $ ~if ( a <= v * k * full )  $ ~~cout << ( a + v * k - 1 ) / ( v * k ) << endl ;  $ ~else {  $ ~~int got = v * k * full ;  $ ~~b -= full * ( k - 1 ) ;  $ ~~a -= got ;  $ ~~if ( v * ( b + 1 ) >= a )  $ ~~~cout << full + 1 << endl ;  $ ~~else {  $ ~~~a -= v * ( b + 1 ) ;  $ ~~~int left = ( a + v - 1 ) / v ;  $ ~~~cout << full + 1 + left << endl ;  $ ~~}  $ ~}  $ ~return 0 ;  $ }
int main ( ) {  $ ~int t = 1 ;  $ ~while ( t -- ) {  $ ~~int n ;  $ ~~cin >> n ;  $ ~~if ( n == 0 ) cout << "O-|-OOOO" << endl ;  $ ~~while ( n ) {  $ ~~~int c = n % 10 ;  $ ~~~if ( c < 5 ) {  $ ~~~~cout << "O-|" ;  $ ~~~} else {  $ ~~~~cout << "-O|" ;  $ ~~~~c -= 5 ;  $ ~~~}  $ ~~~for ( int i = 0 ; i < c ; i ++ ) cout << "O" ;  $ ~~~cout << "-" ;  $ ~~~for ( int i = 0 ; i < 5 - c - 1 ; i ++ ) cout << "O" ;  $ ~~~cout << endl ;  $ ~~~n /= 10 ;  $ ~~}  $ ~}  $ }
const double PI = acos ( - 1.0 ) ;  $ const int maxn = 1e5 + 10 ;  $ int main ( ) {  $ ~int n , ans1 = 0 , ans2 = 0 , num ;  $ ~cin >> n ;  $ ~for ( int i = 1 ; i <= n ; i ++ ) {  $ ~~cin >> num ;  $ ~~ans1 = ( ans1 | num ) ;  $ ~}  $ ~for ( int i = 1 ; i <= n ; i ++ ) {  $ ~~cin >> num ;  $ ~~ans2 = ( ans2 | num ) ;  $ ~}  $ ~cout << ans1 + ans2 << endl ;  $ ~return 0 ;  $ }
long long const mod = 1000000007 ;  $ long long const md = 998244353 l ;  $ long long powmod ( long long a , long long b ) {  $ ~long long res = 1 ;  $ ~a %= mod ;  $ ~assert ( b >= 0 ) ;  $ ~for ( ; b ; b >> = 1 ) {  $ ~~if ( b & 1 ) res = res * a % mod ;  $ ~~a = a * a % mod ;  $ ~}  $ ~return res ;  $ }  $ ifstream in ( "txt.in" ) ;  $ ofstream out ( "txt.out" ) ;  $ int f [ 1005 ] ;  $ int main ( ) {  $ ~cout << fixed << setprecision ( 12 ) ;  $ ~long long n , k ;  $ ~cin >> n >> k ;  $ ~string s ;  $ ~cin >> s ;  $ ~while ( k ) {  $ ~~long long x , y ;  $ ~~cin >> x >> y ;  $ ~~char a , b ;  $ ~~cin >> a >> b ;  $ ~~-- x ;  $ ~~-- y ;  $ ~~for ( int i = x ; i <= y ; ++ i ) {  $ ~~~if ( s [ i ] == a ) s [ i ] = b ;  $ ~~}  $ ~~-- k ;  $ ~}  $ ~cout << s << '\n' ;  $ ~return 0 ;  $ }
int a [ 180 ] ;  $ int pd ( int a ) {  $ ~for ( int i = 3 ; i <= 360 ; i ++ ) {  $ ~~if ( 180 * ( i - 2 ) == i * a ) { return 1 ; }  $ ~}  $ ~return 0 ;  $ }  $ int main ( ) {  $ ~int n ;  $ ~cin >> n ;  $ ~for ( int i = 0 ; i < n ; i ++ ) { cin >> a [ i ] ; }  $ ~for ( int j = 0 ; j < n ; j ++ ) {  $ ~~if ( pd ( a [ j ] ) == 1 ) {  $ ~~~cout << "YES" << endl ;  $ ~~} else  $ ~~~cout << "NO" << endl ;  $ ~}  $ ~return 0 ;  $ }
int main ( ) {  $ ~int n ;  $ ~cin >> n ;  $ ~vector < int > arr ( n ) ;  $ ~for ( int i = 0 ; i < n ; i ++ ) cin >> arr [ i ] ;  $ ~for ( int i = 1 ; i < n - 1 ; i ++ )  $ ~~if ( arr [ i ] == 0 && arr [ i - 1 ] && arr [ i + 1 ] ) arr [ i ] = 1 ;  $ ~int ans = 0 ;  $ ~for ( int i = 0 ; i < n ; i ++ ) ans += arr [ i ] ;  $ ~cout << ans << endl ;  $ ~return 0 ;  $ }
const long long MOD = 1000000007 ;  $ string str ;  $ long long cpow ( int x ) {  $ ~long long res = 1 ;  $ ~for ( int i = 0 ; i < x ; i ++ ) res = ( 2 * res ) % MOD ;  $ ~return res ;  $ }  $ int main ( ) {  $ ~cin >> str ;  $ ~int N = str . length ( ) ;  $ ~long long ans = 0 ;  $ ~for ( int i = N - 1 ; i >= 0 ; i -- ) {  $ ~~ans = ( 2 * ans ) % MOD ;  $ ~~if ( str [ i ] == '1' ) ans = ( ans + cpow ( 2 * ( N - 1 - i ) ) ) % MOD ;  $ ~}  $ ~cout << ans << "\n" ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~int n , a , d ;  $ ~cin >> n >> a >> d ;  $ ~int r = 0 ;  $ ~int basura = 0 ;  $ ~for ( int i = ( 0 ) ; i < ( n ) ; i ++ ) {  $ ~~int x ;  $ ~~cin >> x ;  $ ~~basura += x <= a ? x : 0 ;  $ ~~if ( basura > d ) {  $ ~~~basura = 0 ;  $ ~~~r ++ ;  $ ~~}  $ ~}  $ ~cout << r << "\n" ;  $ }
int main ( ) {  $ ~string s ;  $ ~long long n , jum = 0 ;  $ ~cin >> n ;  $ ~for ( int i = 1 ; i <= n ; i ++ ) {  $ ~~cin >> s ;  $ ~~if ( s == "Tetrahedron" )  $ ~~~jum += 4 ;  $ ~~else if ( s == "Cube" )  $ ~~~jum += 6 ;  $ ~~else if ( s == "Octahedron" )  $ ~~~jum += 8 ;  $ ~~else if ( s == "Dodecahedron" )  $ ~~~jum += 12 ;  $ ~~else  $ ~~~jum += 20 ;  $ ~}  $ ~cout << jum << endl ;  $ }
int main ( ) {  $ ~int n ;  $ ~cin >> n ;  $ ~int arr [ 1000 ] ;  $ ~for ( int i = 0 ; i < n ; i ++ ) { cin >> arr [ i ] ; }  $ ~int l = arr [ 0 ] ;  $ ~sort ( arr + 1 , arr + n ) ;  $ ~while ( arr [ 0 ] <= arr [ n - 1 ] ) {  $ ~~arr [ 0 ] ++ ;  $ ~~arr [ n - 1 ] -- ;  $ ~~sort ( arr + 1 , arr + n ) ;  $ ~}  $ ~cout << arr [ 0 ] - l << endl ;  $ }
const long long MOD = 1e9 + 7 ;  $ long long powmod ( long long a , long long b , long long m = MOD ) {  $ ~long long r = 1 ;  $ ~while ( b > 0 ) {  $ ~~if ( b & 1 ) r = r * a % m ;  $ ~~a = a * a % m ;  $ ~~b >> = 1 ;  $ ~}  $ ~return r ;  $ }  $ long long power ( long long a , long long b ) {  $ ~long long r = 1 ;  $ ~while ( b > 0 ) {  $ ~~if ( b & 1 ) r = r * a ;  $ ~~a = a * a ;  $ ~~b >> = 1 ;  $ ~}  $ ~return r ;  $ }  $ long long gcd ( long long a , long long b ) {  $ ~if ( ! b ) return a ;  $ ~return gcd ( b , a % b ) ;  $ }  $ long long inv ( long long a , long long m = MOD ) {  $ ~return powmod ( a , m - 2 , m ) ;  $ }  $ long long lcm ( long long a , long long b ) {  $ ~return ( a * b ) / gcd ( a , b ) ;  $ }  $ map < string , long long > mmap ;  $ void init ( ) {  $ ~mmap [ "monday" ] = 0 ;  $ ~mmap [ "tuesday" ] = 1 ;  $ ~mmap [ "wednesday" ] = 2 ;  $ ~mmap [ "thursday" ] = 3 ;  $ ~mmap [ "friday" ] = 4 ;  $ ~mmap [ "saturday" ] = 5 ;  $ ~mmap [ "sunday" ] = 6 ;  $ }  $ int main ( ) {  $ ~init ( ) ;  $ ~string s1 , s2 ;  $ ~cin >> s1 >> s2 ;  $ ~long long n1 = mmap [ s1 ] , n2 = mmap [ s2 ] ;  $ ~if ( ( ( n1 + 31 ) % 7 == n2 ) || ( ( n1 + 30 ) % 7 == n2 ) | ( ( n1 + 28 ) % 7 == n2 ) ) {  $ ~~cout << "YES"  $ ~~~<< "\n" ;  $ ~} else {  $ ~~cout << "NO"  $ ~~~<< "\n" ;  $ ~}  $ }
int m = 0 , y ;  $ int sum ( int x ) {  $ ~m = 0 ;  $ ~y = x ;  $ ~while ( x != 0 ) {  $ ~~m = m + x % 10 ;  $ ~~x = x / 10 ;  $ ~}  $ ~return m ;  $ }  $ int main ( ) {  $ ~int n , k = 0 , x , i ;  $ ~cin >> n ;  $ ~int a [ 100000 ] , j = 1 ;  $ ~if ( n <= 100000071 ) {  $ ~~for ( i = max ( 1 , n - 100 ) ; i <= n ; i ++ ) {  $ ~~~x = i ;  $ ~~~if ( i + sum ( x ) == n ) {  $ ~~~~k ++ ;  $ ~~~~a [ j ] = i ;  $ ~~~~j ++ ;  $ ~~~}  $ ~~}  $ ~} else {  $ ~~for ( i = max ( 1 , n - 100 ) ; i <= n ; i ++ ) {  $ ~~~x = i ;  $ ~~~if ( i + sum ( x ) == n ) {  $ ~~~~k ++ ;  $ ~~~~a [ j ] = i ;  $ ~~~~j ++ ;  $ ~~~}  $ ~~}  $ ~}  $ ~int p = j - 1 ;  $ ~cout << k << "\n" ;  $ ~for ( i = 1 ; i <= p ; i ++ ) { cout << a [ i ] << "\n" ; }  $ ~return 0 ;  $ }
const int base = 180 ;  $ int res [ 199 ] ;  $ int main ( ) {  $ ~int i , j , k , n , f , t ;  $ ~int l = 3 ;  $ ~int st = base ;  $ ~while ( l <= 550 ) {  $ ~~if ( st % l == 0 ) res [ st / l ] = 1 ;  $ ~~l ++ ;  $ ~~st += base ;  $ ~}  $ ~cin >> t ;  $ ~while ( t -- ) {  $ ~~cin >> n ;  $ ~~f = res [ n ] ;  $ ~~if ( f )  $ ~~~cout << "YES\n" ;  $ ~~else  $ ~~~cout << "NO\n" ;  $ ~}  $ ~return 0 ;  $ }
const long long inf = 0 x3f3f3f3f ;  $ const int N = 1e6 + 10 ;  $ const long long mod = 998244353 ;  $ map < string , long long > mp ;  $ map < string , int > ml ;  $ int v [ N ] , h [ N ] , t , n , m , x , y , z , ans , num [ N ] , cnt ;  $ map < int , int > c ;  $ char s [ N ] ;  $ long long ex , ey ;  $ int main ( ) {  $ ~cin >> n >> m ;  $ ~for ( int i = 0 ; i < n ; i ++ ) cin >> v [ i ] ;  $ ~sort ( v , v + n ) ;  $ ~for ( int i = 0 ; i < m ; i ++ ) {  $ ~~cin >> x >> y >> z ;  $ ~~if ( x == 1 ) {  $ ~~~if ( y == 1000000000 )  $ ~~~~ans ++ ;  $ ~~~else {  $ ~~~~h [ cnt ++ ] = y ;  $ ~~~}  $ ~~}  $ ~}  $ ~sort ( h , h + cnt ) ;  $ ~t = cnt + ans ;  $ ~ans += n ;  $ ~int i = 0 , j = 0 ;  $ ~while ( i < n ) {  $ ~~while ( j < cnt && h [ j ] < v [ i ] ) {  $ ~~~t -- ;  $ ~~~j ++ ;  $ ~~}  $ ~~ans = min ( ans , t + i ) ;  $ ~~if ( ! ans ) break ;  $ ~~i ++ ;  $ ~}  $ ~cout << ans << endl ;  $ }
int main ( ) {  $ ~int n , m , in , im ;  $ ~cin >> n >> m ;  $ ~char a [ n ] [ m ] ;  $ ~for ( int i = 0 ; i < n ; i ++ ) {  $ ~~for ( int j = 0 ; j < m ; j ++ ) { cin >> a [ i ] [ j ] ; }  $ ~}  $ ~for ( int i = 0 ; i < n ; i ++ ) {  $ ~~for ( int j = 0 ; j < m ; j ++ ) {  $ ~~~if ( a [ i ] [ j ] == 'B' ) {  $ ~~~~a [ i ] [ j ] = 'X' ;  $ ~~~~in = i ;  $ ~~~~im = j ;  $ ~~~~break ;  $ ~~~}  $ ~~}  $ ~}  $ ~int s = 0 ;  $ ~for ( int i = 0 ; i < m ; i ++ ) {  $ ~~if ( a [ in ] [ i ] == 'B' ) { s ++ ; }  $ ~}  $ ~s /= 2 ;  $ ~in -= s ;  $ ~im += s ;  $ ~cout << in + 1 << " " << im + 1 << '\n' ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~int a , b , c , d , e , s ;  $ ~cin >> a >> b >> c >> d >> e ;  $ ~s = a + b + c + d + e ;  $ ~if ( s > 0 && s % 5 == 0 )  $ ~~cout << ( s / 5 ) << endl ;  $ ~else  $ ~~cout << - 1 << endl ;  $ ~return 0 ;  $ }
int N , arr [ 1001 ] , arr2 [ 1001 ] ;  $ int f ( int st , int en ) {  $ ~int ans = 0 ;  $ ~for ( int i = st ; i <= en ; ++ i ) ans |= arr [ i ] ;  $ ~int ans2 = 0 ;  $ ~for ( int i = st ; i <= en ; ++ i ) ans2 |= arr2 [ i ] ;  $ ~return ans + ans2 ;  $ }  $ int main ( ) {  $ ~cin >> N ;  $ ~for ( int i = 0 ; i < N ; ++ i ) cin >> arr [ i ] ;  $ ~for ( int i = 0 ; i < N ; ++ i ) cin >> arr2 [ i ] ;  $ ~int ans = 0 ;  $ ~for ( int i = 0 ; i < N ; ++ i ) {  $ ~~for ( int j = i ; j < N ; ++ j ) ans = max ( ans , f ( i , j ) ) ;  $ ~}  $ ~cout << ans << endl ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~int n , count = 0 , D ;  $ ~cin >> n ;  $ ~vector < int > P , M , PE ;  $ ~for ( int i = 1 ; i <= n ; i ++ ) {  $ ~~cin >> D ;  $ ~~if ( D == 1 )  $ ~~~P . push_back ( i ) ;  $ ~~else if ( D == 2 )  $ ~~~M . push_back ( i ) ;  $ ~~else  $ ~~~PE . push_back ( i ) ;  $ ~}  $ ~int Psize , Msize , PEsize ;  $ ~Psize = P . size ( ) ;  $ ~Msize = M . size ( ) ;  $ ~PEsize = PE . size ( ) ;  $ ~count = min ( min ( Psize , Msize ) , PEsize ) ;  $ ~if ( count == 0 )  $ ~~cout << 0 << endl ;  $ ~else {  $ ~~cout << count << endl ;  $ ~~for ( int i = 0 ; i < count ; i ++ ) { cout << P [ i ] << " " << M [ i ] << " " << PE [ i ] << endl ; }  $ ~}  $ ~return 0 ;  $ }
int main ( ) {  $ ~int n , sum = 0 , p , i ;  $ ~double x ;  $ ~cin >> n >> x ;  $ ~for ( i = 0 ; i < n ; i ++ ) {  $ ~~cin >> p ;  $ ~~sum = sum + p ;  $ ~}  $ ~sum = abs ( sum ) ;  $ ~cout << ceil ( sum / x ) << endl ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~int n ;  $ ~cin >> n ;  $ ~cout << n / 2 + 1 << endl ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~int xay ;  $ ~cin >> xay ;  $ ~int a = 0 ;  $ ~int b = 0 ;  $ ~int z = 0 ;  $ ~int x = 0 ;  $ ~int s , c ;  $ ~for ( int i = 0 ; i < xay ; i ++ ) {  $ ~~cin >> a >> b ;  $ ~~if ( a < b ) {  $ ~~~z = z + abs ( a - b ) ;  $ ~~} else if ( a > b ) {  $ ~~~z = z - a + b ;  $ ~~}  $ ~~if ( x < z ) { x = z ; }  $ ~}  $ ~cout << x << endl ;  $ }
int a [ 100 ] ;  $ int ra [ 100 ] ;  $ int n ;  $ int main ( ) {  $ ~while ( cin >> n ) {  $ ~~bool flg = false ;  $ ~~int num = 0 ;  $ ~~int temp = 0 ;  $ ~~for ( int i = 0 ; i < n ; ++ i ) {  $ ~~~cin >> a [ i ] ;  $ ~~~if ( a [ i ] ) {  $ ~~~~if ( temp >= 2 ) { num += temp ; }  $ ~~~~temp = 0 ;  $ ~~~~flg = true ;  $ ~~~} else {  $ ~~~~if ( flg ) {  $ ~~~~~temp ++ ;  $ ~~~~} else {  $ ~~~~~num ++ ;  $ ~~~~}  $ ~~~}  $ ~~}  $ ~~int t = 0 ;  $ ~~for ( int j = n - 1 ; j >= 0 ; -- j ) { ra [ t ++ ] = a [ j ] ; }  $ ~~bool flg2 = false ;  $ ~~int num2 = 0 ;  $ ~~for ( int i = 0 ; i < n ; ++ i ) {  $ ~~~if ( ! ra [ i ] ) {  $ ~~~~if ( ! flg2 ) num2 ++ ;  $ ~~~} else {  $ ~~~~flg2 = true ;  $ ~~~}  $ ~~}  $ ~~int ans = n - num - num2 ;  $ ~~if ( ans < 0 )  $ ~~~cout << 0 << endl ;  $ ~~else  $ ~~~cout << ans << endl ;  $ ~}  $ }
int a [ 10005 ] ;  $ int b [ 10005 ] ;  $ int num , sum ;  $ int main ( ) {  $ ~int n ;  $ ~cin >> n ;  $ ~for ( int i = 1 ; i <= n ; i ++ ) { cin >> a [ i ] >> b [ i ] ; }  $ ~for ( int i = 1 ; i <= n ; i ++ ) {  $ ~~if ( a [ i ] > b [ i ] )  $ ~~~num ++ ;  $ ~~else if ( a [ i ] < b [ i ] )  $ ~~~sum ++ ;  $ ~}  $ ~if ( num > sum )  $ ~~cout << "Mishka" << endl ;  $ ~else if ( num < sum )  $ ~~cout << "Chris" << endl ;  $ ~else if ( num == sum )  $ ~~cout << "Friendship is magic!^^" << endl ;  $ }
long long i , n , m ;  $ string a [ 111 ] ;  $ int main ( ) {  $ ~cin >> n ;  $ ~for ( i = 1 ; i <= n ; i ++ ) cin >> a [ i ] ;  $ ~for ( i = 1 ; i <= n ; i ++ ) {  $ ~~if ( a [ i ] . length ( ) < 11 )  $ ~~~cout << a [ i ] << endl ;  $ ~~else  $ ~~~cout << a [ i ] [ 0 ] << a [ i ] . length ( ) - 2 << a [ i ] [ a [ i ] . length ( ) - 1 ] << endl ;  $ ~}  $ }
int main ( ) {  $ ~int n , t ;  $ ~int sum = 0 ;  $ ~int a [ 100000 ] ;  $ ~int flag = 0 ;  $ ~cin >> n >> t ;  $ ~t -- ;  $ ~if ( t == 1 ) { flag = 1 ; }  $ ~for ( int i = 0 ; i < n - 1 ; i ++ ) { cin >> a [ i ] ; }  $ ~while ( sum < t ) { sum += a [ sum ] ; }  $ ~if ( sum == t ) {  $ ~~flag = 1 ;  $ ~} else  $ ~~flag = 0 ;  $ ~if ( flag )  $ ~~cout << "YES" << endl ;  $ ~else  $ ~~cout << "NO" << endl ;  $ }
int main ( ) {  $ ~int n , i , flag , c , l , hash [ 10000 ] = { 0 } , j ;  $ ~string str ;  $ ~set < string > se ;  $ ~cin >> n ;  $ ~c = 0 ;  $ ~for ( i = 0 ; i < n ; i ++ ) {  $ ~~cin >> str ;  $ ~~l = str . length ( ) ;  $ ~~string s ;  $ ~~for ( j = 0 ; j < l ; j ++ ) {  $ ~~~if ( hash [ str [ j ] ] != 1 ) hash [ str [ j ] ] = 1 ;  $ ~~}  $ ~~for ( j = 97 ; j <= 122 ; j ++ ) {  $ ~~~if ( hash [ j ] == 1 ) s . push_back ( j ) ;  $ ~~}  $ ~~for ( j = 97 ; j <= 122 ; j ++ ) { hash [ j ] = 0 ; }  $ ~~se . insert ( s ) ;  $ ~}  $ ~cout << se . size ( ) << endl ;  $ }
int main ( ) {  $ ~int n ;  $ ~cin >> n ;  $ ~if ( n <= 10 || n > 21 ) {  $ ~~cout << 0 << endl ;  $ ~} else if ( n == 20 ) {  $ ~~cout << 15 << endl ;  $ ~} else {  $ ~~cout << 4 << endl ;  $ ~}  $ ~return 0 ;  $ }
int main ( ) {  $ ~long long N , M , K ;  $ ~while ( cin >> N >> M >> K ) {  $ ~~long long ans = 0 ;  $ ~~ans = max ( N / ( K + 1 ) * M , M / ( K + 1 ) * N ) ;  $ ~~if ( K + 1 > N ) ans = max ( ans , M / ( K - N + 2 ) ) ;  $ ~~if ( K + 1 > M ) ans = max ( ans , N / ( K - M + 2 ) ) ;  $ ~~if ( K + 2 > M + N ) ans = - 1 ;  $ ~~cout << ans << endl ;  $ ~}  $ ~return 0 ;  $ }
int mns [ ] = { 31 , 28 , 31 , 30 , 31 , 30 , 31 , 31 , 30 , 31 , 30 , 31 } ;  $ int main ( ) {  $ ~int m , d ;  $ ~cin >> m >> d ;  $ ~cout << 1 + ( d + mns [ m - 1 ] - 2 ) / 7 - ( d - 1 ) / 7 << endl ;  $ ~return 0 ;  $ }
const int maxn = 5100 ;  $ int n ;  $ int f [ maxn ] ;  $ int main ( ) {  $ ~cin >> n ;  $ ~for ( int i = 1 ; i <= n ; i ++ ) cin >> f [ i ] ;  $ ~for ( int i = 1 ; i <= n ; i ++ ) {  $ ~~if ( i == f [ f [ f [ i ] ] ] ) {  $ ~~~cout << "YES" << endl ;  $ ~~~return 0 ;  $ ~~}  $ ~}  $ ~cout << "NO" << endl ;  $ ~return 0 ;  $ }
int a [ 2000 ] ;  $ int initA ( int m ) {  $ ~int i = 0 ;  $ ~while ( m > 0 ) {  $ ~~a [ i ++ ] = m % 10 ;  $ ~~m /= 10 ;  $ ~}  $ ~return ( i - 1 ) ;  $ }  $ void fact ( int n ) {  $ ~int len = initA ( n ) ;  $ ~while ( -- n ) {  $ ~~int carry = 0 ;  $ ~~for ( int k = 0 ; k <= len ; k ++ ) {  $ ~~~int x = a [ k ] * n + carry ;  $ ~~~a [ k ] = x % 10 ;  $ ~~~carry = x / 10 ;  $ ~~}  $ ~~while ( carry > 0 ) {  $ ~~~a [ ++ len ] = carry % 10 ;  $ ~~~carry /= 10 ;  $ ~~}  $ ~}  $ ~for ( int k = len ; k >= 0 ; k -- ) { cout << a [ k ] ; }  $ ~cout << endl ;  $ }  $ int main ( ) {  $ ~int a , b ;  $ ~cin >> a >> b ;  $ ~fact ( a > b ? b : a ) ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~string a , b ;  $ ~cin >> a >> b ;  $ ~int len = a . length ( ) ;  $ ~for ( int i = 0 ; i < len ; i ++ ) {  $ ~~if ( a [ i ] != b [ i ] )  $ ~~~cout << "1" ;  $ ~~else  $ ~~~cout << "0" ;  $ ~}  $ ~cout << endl ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~int m , n , v , mx = INT_MIN , mn = INT_MAX ;  $ ~cin >> n >> m ;  $ ~for ( int i = 1 ; i <= n ; i ++ ) {  $ ~~int k ;  $ ~~cin >> k ;  $ ~~mx = max ( mx , k ) ;  $ ~~mn = min ( mn , k ) ;  $ ~}  $ ~bool flag = true ;  $ ~v = max ( 2 * mn , mx ) ;  $ ~for ( int i = 1 ; i <= m ; i ++ ) {  $ ~~int k ;  $ ~~cin >> k ;  $ ~~if ( k <= v ) flag = false ;  $ ~}  $ ~if ( ! flag )  $ ~~cout << - 1 << endl ;  $ ~else  $ ~~cout << v << endl ;  $ }
int main ( ) {  $ ~long long int n , a , k , t ;  $ ~cin >> n >> k ;  $ ~while ( k -- ) {  $ ~~if ( n % 10 == 0 ) {  $ ~~~n = n / 10 ;  $ ~~} else {  $ ~~~n = n - 1 ;  $ ~~}  $ ~}  $ ~cout << n << endl ;  $ }
int main ( ) {  $ ~int x [ 100 ] ;  $ ~int i ;  $ ~int n , k ;  $ ~cin >> n >> k ;  $ ~int tot = 0 ;  $ ~for ( i = 0 ; i < n ; i ++ ) {  $ ~~x [ i ] = 2 ;  $ ~~tot += x [ i ] ;  $ ~}  $ ~for ( i = 0 ; i < n ; i ++ ) {  $ ~~if ( tot == k ) { break ; }  $ ~~x [ i ] ++ ;  $ ~~tot ++ ;  $ ~~if ( i == n - 1 ) { i = - 1 ; }  $ ~}  $ ~int ct = 0 ;  $ ~for ( i = 0 ; i < n ; i ++ ) {  $ ~~if ( x [ i ] == 2 ) { ct ++ ; }  $ ~}  $ ~cout << ct << endl ;  $ ~return 0 ;  $ }
int n ;  $ void nhap ( ) {  $ ~cin >> n ;  $ }  $ void solve ( ) {  $ ~while ( n > 5 )  $ ~~if ( n % 2 == 0 )  $ ~~~n = ( n - 4 ) / 2 ;  $ ~~else  $ ~~~n = ( n - 5 ) / 2 ;  $ ~if ( n == 1 ) cout << "Sheldon\n" ;  $ ~if ( n == 2 ) cout << "Leonard\n" ;  $ ~if ( n == 3 ) cout << "Penny\n" ;  $ ~if ( n == 4 ) cout << "Rajesh\n" ;  $ ~if ( n == 5 ) cout << "Howard\n" ;  $ }  $ int main ( ) {  $ ~nhap ( ) ;  $ ~solve ( ) ;  $ }
int arr [ 100005 ] ;  $ int main ( ) {  $ ~int n , m ;  $ ~cin >> n ;  $ ~long long int cnt = 0 ;  $ ~long long int mn = 0 ;  $ ~for ( int i = 0 ; i < n ; i ++ ) {  $ ~~cin >> arr [ i ] ;  $ ~~mn += arr [ i ] ;  $ ~}  $ ~cin >> m ;  $ ~for ( int i = 0 ; i < m ; i ++ ) {  $ ~~int u , v ;  $ ~~cin >> u >> v ;  $ ~~if ( u <= mn && mn <= v ) {  $ ~~~cout << mn << "\n" ;  $ ~~~return 0 ;  $ ~~}  $ ~~if ( u >= mn ) {  $ ~~~cout << u << "\n" ;  $ ~~~return 0 ;  $ ~~}  $ ~}  $ ~cout << "-1"  $ ~~<< "\n" ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~int n ;  $ ~cin >> n ;  $ ~if ( n == 1 )  $ ~~cout << 1 << endl ;  $ ~else {  $ ~~long long c , b , kt = 1 ;  $ ~~cin >> c >> b ;  $ ~~n -- ;  $ ~~while ( n -- ) {  $ ~~~long long a ;  $ ~~~cin >> a ;  $ ~~~( ( a - b ) <= c ) ? ++ kt : kt = 1 ;  $ ~~~b = a ;  $ ~~}  $ ~~cout << kt << endl ;  $ ~}  $ }
int main ( ) {  $ ~long long int a , b , _a , _b ;  $ ~cin >> _a >> _b ;  $ ~a = _a ;  $ ~b = _b ;  $ ~long long int s [ 2 ] = { 0 , 0 } ;  $ ~int current = 0 ;  $ ~while ( a != b ) {  $ ~~if ( a < b ) {  $ ~~~int m = a - current ;  $ ~~~s [ 0 ] += m ;  $ ~~~a += _a ;  $ ~~~current += m ;  $ ~~} else {  $ ~~~int m = b - current ;  $ ~~~s [ 1 ] += m ;  $ ~~~b += _b ;  $ ~~~current += m ;  $ ~~}  $ ~}  $ ~int m = a - current ;  $ ~if ( _a > _b )  $ ~~s [ 0 ] += m ;  $ ~else  $ ~~s [ 1 ] += m ;  $ ~if ( s [ 0 ] > s [ 1 ] ) {  $ ~~cout << "Dasha" << endl ;  $ ~} else if ( s [ 1 ] > s [ 0 ] ) {  $ ~~cout << "Masha" << endl ;  $ ~} else {  $ ~~cout << "Equal" << endl ;  $ ~}  $ ~return 0 ;  $ }
int main ( ) {  $ ~int n , a , b , c , d ;  $ ~cin >> n ;  $ ~while ( 1 ) {  $ ~~n ++ ;  $ ~~a = n / 1000 ;  $ ~~b = ( n / 100 ) % 10 ;  $ ~~c = ( n / 10 ) % 10 ;  $ ~~d = n % 10 ;  $ ~~if ( a != b && a != c && a != d && b != c && b != d && c != d ) break ;  $ ~}  $ ~cout << n << endl ;  $ ~return 0 ;  $ }
long long dp [ 100005 ] ;  $ int main ( ) {  $ ~int n ;  $ ~cin >> n ;  $ ~long long a [ n ] ;  $ ~long long b [ n ] ;  $ ~long long c [ n ] ;  $ ~for ( int i = 0 ; i < n ; i ++ ) { cin >> a [ i ] ; }  $ ~for ( int i = 0 ; i < n - 1 ; i ++ ) {  $ ~~b [ i ] = abs ( a [ i + 1 ] - a [ i ] ) ;  $ ~~if ( i % 2 == 1 ) b [ i ] *= - 1 ;  $ ~}  $ ~for ( int i = 0 ; i < n - 1 ; i ++ ) {  $ ~~c [ i ] = abs ( a [ i + 1 ] - a [ i ] ) ;  $ ~~if ( i % 2 == 0 ) c [ i ] *= - 1 ;  $ ~}  $ ~long long ans = b [ 0 ] ;  $ ~long long minimum = b [ 0 ] ;  $ ~for ( int i = 1 ; i < n - 1 ; i ++ ) {  $ ~~b [ i ] += b [ i - 1 ] ;  $ ~~ans = max ( ans , b [ i ] - minimum ) ;  $ ~~ans = max ( ans , b [ i ] ) ;  $ ~~minimum = min ( minimum , b [ i ] ) ;  $ ~}  $ ~minimum = c [ 0 ] ;  $ ~for ( int i = 1 ; i < n - 1 ; i ++ ) {  $ ~~c [ i ] += c [ i - 1 ] ;  $ ~~ans = max ( ans , c [ i ] - minimum ) ;  $ ~~ans = max ( ans , c [ i ] ) ;  $ ~~minimum = min ( minimum , c [ i ] ) ;  $ ~}  $ ~cout << ans << endl ;  $ ~return 0 ;  $ }
const int maxn = 1e5 + 10 ;  $ int gcd ( int a , int b ) {  $ ~return b ? gcd ( b , a % b ) : a ;  $ }  $ map < int , bool > mp ;  $ int main ( ) {  $ ~mp . clear ( ) ;  $ ~int n , d , ma = 0 , num = 0 ;  $ ~cin >> n ;  $ ~for ( int i = 0 ; i < n ; i ++ ) {  $ ~~int x ;  $ ~~cin >> x ;  $ ~~if ( ! i )  $ ~~~d = x ;  $ ~~else  $ ~~~d = gcd ( d , x ) ;  $ ~~if ( ! mp [ x ] ) {  $ ~~~mp [ x ] = true ;  $ ~~~num ++ ;  $ ~~}  $ ~~ma = max ( ma , x ) ;  $ ~}  $ ~if ( ( ma / d - num ) % 2 == 1 )  $ ~~cout << "Alice\n" ;  $ ~else  $ ~~cout << "Bob\n" ;  $ ~return 0 ;  $ }
const int mod = 1e9 + 1 ;  $ const int N = 1e6 + 1 ;  $ int main ( ) {  $ ~string s ;  $ ~cin >> s ;  $ ~for ( int i = 0 ; i < s . length ( ) ; i ++ ) {  $ ~~if ( i == 0 && s [ i ] == '9' )  $ ~~~s [ i ] = s [ i ] ;  $ ~~else if ( s [ i ] > 52 )  $ ~~~s [ i ] = ( 48 + 57 - ( int ) s [ i ] ) ;  $ ~}  $ ~stringstream convert ( s ) ;  $ ~unsigned long long x ;  $ ~convert >> x ;  $ ~cout << x << endl ;  $ ~return 0 ;  $ }
int lessonsn , pairs , res = 0 ;  $ bool tab [ 102 ] ;  $ int main ( ) {  $ ~cin >> lessonsn ;  $ ~tab [ 0 ] = 0 ;  $ ~tab [ lessonsn + 1 ] = 0 ;  $ ~for ( int i = 1 ; i <= lessonsn ; i ++ ) { cin >> tab [ i ] ; }  $ ~for ( int i = 1 ; i <= lessonsn ; i ++ ) {  $ ~~if ( tab [ i ] ) {  $ ~~~res ++ ;  $ ~~} else if ( ! tab [ i ] && ( tab [ i - 1 ] && tab [ i + 1 ] ) ) {  $ ~~~res ++ ;  $ ~~}  $ ~}  $ ~cout << res << endl ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~long long n , i = 0 , a = 0 ;  $ ~char c ;  $ ~cin >> n ;  $ ~while ( i < n ) {  $ ~~cin >> c ;  $ ~~if ( c == '1' )  $ ~~~a ++ ;  $ ~~else  $ ~~~a -- ;  $ ~~i ++ ;  $ ~}  $ ~cout << abs ( a ) << endl ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~long long n , t , num ;  $ ~cin >> n ;  $ ~if ( n % 2 == 0 )  $ ~~cout << "2" << endl ;  $ ~else  $ ~~cout << "1" << endl ;  $ ~return 0 ;  $ }
int n , ai ;  $ int cnt [ 3 ] ;  $ int main ( ) {  $ ~cin >> n ;  $ ~for ( int i = 0 ; i < n ; i ++ ) {  $ ~~cin >> ai ;  $ ~~cnt [ ai - 1 ] ++ ;  $ ~}  $ ~cout << n - max ( cnt [ 1 ] , max ( cnt [ 0 ] , cnt [ 2 ] ) ) << '\n' ;  $ ~return 0 ;  $ }
map < string , int > mp ;  $ set < string > st ;  $ int main ( ) {  $ ~string a , b ;  $ ~int ta , tb , tc ;  $ ~mp [ "^" ] = 0 , mp [ ">" ] = 1 , mp [ "v" ] = 2 , mp [ "<" ] = 3 ;  $ ~while ( cin >> a >> b >> tc ) {  $ ~~ta = mp [ a ] , tb = mp [ b ] ;  $ ~~int flag = 0 ;  $ ~~if ( ( ta + tc ) % 4 == tb ) flag += 1 ;  $ ~~if ( ( ta + 4 - tc % 4 ) % 4 == tb ) flag += 2 ;  $ ~~if ( flag == 1 )  $ ~~~cout << "cw" << endl ;  $ ~~else if ( flag == 2 )  $ ~~~cout << "ccw" << endl ;  $ ~~else  $ ~~~cout << "undefined" << endl ;  $ ~}  $ }
const int maxn = 101000 ;  $ const int mo = 1e9 + 7 ;  $ long long ans ;  $ int f , n , m , h ;  $ int a [ maxn ] , c [ maxn ] , k , sum [ maxn ] ;  $ int b [ maxn ] , flag , tmp ;  $ char s [ maxn ] ;  $ int main ( ) {  $ ~int T ;  $ ~int cas = 1 ;  $ ~while ( cin >> n >> m ) {  $ ~~n = n * 2 + 1 ;  $ ~~ans = 0 ;  $ ~~for ( int i = 0 ; i < n ; i ++ ) { cin >> a [ i ] ; }  $ ~~cout << a [ 0 ] << " " ;  $ ~~for ( int i = 1 ; i < n - 1 ; i ++ ) {  $ ~~~if ( m && a [ i ] > a [ i - 1 ] + 1 && a [ i ] > a [ i + 1 ] + 1 ) {  $ ~~~~cout << a [ i ] - 1 << " " ;  $ ~~~~m -- ;  $ ~~~} else  $ ~~~~cout << a [ i ] << " " ;  $ ~~}  $ ~~cout << a [ n - 1 ] << endl ;  $ ~}  $ ~return 0 ;  $ }
int main ( ) {  $ ~int n , a [ 35 ] , b [ 35 ] , sum = 0 ;  $ ~cin >> n ;  $ ~for ( int i = 0 ; i < n ; i ++ ) { cin >> a [ i ] >> b [ i ] ; }  $ ~for ( int i = 0 ; i < n ; i ++ ) {  $ ~~for ( int j = 0 ; j < n ; j ++ ) {  $ ~~~if ( a [ i ] == b [ j ] ) sum ++ ;  $ ~~}  $ ~}  $ ~cout << sum << endl ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~int n ;  $ ~cin >> n ;  $ ~int arr [ n ] ;  $ ~for ( int i = 0 ; i < n ; i ++ ) cin >> arr [ i ] ;  $ ~int ming1 = - 1 , ming2 = - 1 ;  $ ~for ( int i = 0 ; i < n - 1 ; i ++ ) {  $ ~~if ( ming1 == - 1 || ming1 < arr [ i + 1 ] - arr [ i ] ) ming1 = arr [ i + 1 ] - arr [ i ] ;  $ ~}  $ ~for ( int i = 0 ; i < n - 2 ; i ++ ) {  $ ~~if ( ming2 == - 1 || ming2 > arr [ i + 2 ] - arr [ i ] ) ming2 = arr [ i + 2 ] - arr [ i ] ;  $ ~}  $ ~cout << max ( ming1 , ming2 ) << endl ;  $ ~return 0 ;  $ }
const int M = 100 + 5 ;  $ int main ( ) {  $ ~string s ;  $ ~cin >> s ;  $ ~for ( int i = 0 ; i < s . length ( ) ; i ++ ) {  $ ~~if ( s [ i ] == ':' ) { s [ i ] = ' ' ; }  $ ~}  $ ~istringstream ss ( s ) ;  $ ~int h , m ;  $ ~ss >> h >> m ;  $ ~if ( s [ 1 ] >= '0' && s [ 1 ] <= '5' ) {  $ ~~int pm = ( s [ 1 ] - '0' ) * 10 + s [ 0 ] - '0' ;  $ ~~if ( m < pm ) {  $ ~~~if ( h / 10 == 0 ) {  $ ~~~~cout << "0" << h << ":" ;  $ ~~~} else {  $ ~~~~cout << h << ":" ;  $ ~~~}  $ ~~~if ( pm / 10 == 0 ) {  $ ~~~~cout << "0" << pm << endl ;  $ ~~~} else {  $ ~~~~cout << pm << endl ;  $ ~~~}  $ ~~} else {  $ ~~~h = ( h + 1 ) % 24 ;  $ ~~~while ( h % 10 > 5 ) { h = ( h + 1 ) % 24 ; }  $ ~~~int pm = ( h % 10 ) * 10 + h / 10 ;  $ ~~~if ( h / 10 == 0 ) {  $ ~~~~cout << "0" << h << ":" ;  $ ~~~} else {  $ ~~~~cout << h << ":" ;  $ ~~~}  $ ~~~if ( pm / 10 == 0 ) {  $ ~~~~cout << "0" << pm << endl ;  $ ~~~} else {  $ ~~~~cout << pm << endl ;  $ ~~~}  $ ~~}  $ ~} else {  $ ~~h = ( h + 1 ) % 24 ;  $ ~~while ( h % 10 > 5 ) { h = ( h + 1 ) % 24 ; }  $ ~~int pm = ( h % 10 ) * 10 + h / 10 ;  $ ~~if ( h / 10 == 0 ) {  $ ~~~cout << "0" << h << ":" ;  $ ~~} else {  $ ~~~cout << h << ":" ;  $ ~~}  $ ~~if ( pm / 10 == 0 ) {  $ ~~~cout << "0" << pm << endl ;  $ ~~} else {  $ ~~~cout << pm << endl ;  $ ~~}  $ ~}  $ ~return 0 ;  $ }
int main ( ) {  $ ~int n , i , k , p = 1 ;  $ ~cin >> n ;  $ ~int x = n / 2 ;  $ ~for ( i = 0 ; i < x ; i ++ ) {  $ ~~for ( int j = i ; j < x ; j ++ ) { cout << "*" ; }  $ ~~for ( int k = 0 ; k < p ; k ++ ) { cout << "D" ; }  $ ~~for ( int j = i ; j < x ; j ++ ) { cout << "*" ; }  $ ~~p += 2 ;  $ ~~cout << endl ;  $ ~}  $ ~for ( i = 0 ; i <= x ; i ++ ) {  $ ~~for ( int j = 0 ; j < i ; j ++ ) { cout << "*" ; }  $ ~~for ( int k = 0 ; k < p ; k ++ ) { cout << "D" ; }  $ ~~for ( int j = 0 ; j < i ; j ++ ) { cout << "*" ; }  $ ~~p -= 2 ;  $ ~~cout << endl ;  $ ~}  $ ~return 0 ;  $ }
int k , a , b , v ;  $ bool check ( int g ) {  $ ~int i , t = b , sum = 0 ;  $ ~for ( i = 0 ; i < g ; i ++ ) {  $ ~~if ( t >= k - 1 ) {  $ ~~~t -= ( k - 1 ) ;  $ ~~~sum += v * k ;  $ ~~} else  $ ~~~break ;  $ ~}  $ ~if ( i == g ) return sum >= a ;  $ ~g -= i ;  $ ~sum += ( t + 1 ) * v ;  $ ~if ( -- g == 0 ) { return sum > a ; }  $ ~return sum + g * v >= a ;  $ }  $ int main ( ) {  $ ~while ( cin >> k >> a >> b >> v ) {  $ ~~int l = 0 , r = 1000 , m ;  $ ~~while ( r - l > 1 ) {  $ ~~~m = ( l + r ) / 2 ;  $ ~~~if ( check ( m ) )  $ ~~~~r = m ;  $ ~~~else  $ ~~~~l = m ;  $ ~~}  $ ~~cout << r << endl ;  $ ~}  $ }
int main ( ) {  $ ~int k , r ;  $ ~int a = 0 ;  $ ~cin >> k >> r ;  $ ~k %= 10 ;  $ ~for ( int i = 1 ; i <= 10 ; i ++ ) {  $ ~~a ++ ;  $ ~~if ( ( i * k ) % 10 == r || ( i * k ) % 10 == 0 ) {  $ ~~~cout << a << "\n" ;  $ ~~~return 0 ;  $ ~~} else if ( i == 10 ) {  $ ~~~cout << 10 << "\n" ;  $ ~~~return 0 ;  $ ~~}  $ ~}  $ }
int main ( ) {  $ ~int t , a ;  $ ~cin >> t ;  $ ~for ( int i = 0 ; i < t ; i ++ ) {  $ ~~cin >> a ;  $ ~~if ( 360 % ( 180 - a ) == 0 )  $ ~~~cout << "YES"  $ ~~~~<< "\n" ;  $ ~~else  $ ~~~cout << "NO"  $ ~~~~<< "\n" ;  $ ~}  $ }
int n ;  $ int main ( ) {  $ ~while ( cin >> n ) {  $ ~~if ( n & 1 ) {  $ ~~~n -= 3 ;  $ ~~~n >> = 1 ;  $ ~~~cout << n + 1 << endl ;  $ ~~~for ( int i = 1 ; i <= n ; ++ i ) { cout << "2 " ; }  $ ~~~cout << "3" << endl ;  $ ~~} else {  $ ~~~n >> = 1 ;  $ ~~~cout << n << endl ;  $ ~~~for ( int i = 1 ; i < n ; ++ i ) { cout << "2 " ; }  $ ~~~cout << "2" << endl ;  $ ~~}  $ ~}  $ ~return 0 ;  $ }
int main ( ) {  $ ~int t ;  $ ~cin >> t ;  $ ~while ( t -- ) {  $ ~~double a ;  $ ~~cin >> a ;  $ ~~a = ( 180 + a ) / ( 180 - a ) + 1 ;  $ ~~cout << ( ( a == ( int ) a ) ? ( "YES" ) : ( "NO" ) ) << endl ;  $ ~}  $ ~return 0 ;  $ }
int main ( ) {  $ ~string s ;  $ ~cin >> s ;  $ ~int len = s . length ( ) ;  $ ~int i = 0 ;  $ ~int f = 1 ;  $ ~for ( int i = 0 ; i < len ; i ++ )  $ ~~if ( s [ i ] != 'a' ) f = 0 ;  $ ~if ( f ) {  $ ~~s [ len - 1 ] = 'z' ;  $ ~~cout << s << endl ;  $ ~~return 0 ;  $ ~}  $ ~while ( s [ i ] == 'a' && i < len ) cout << s [ i ] , i ++ ;  $ ~int flag = 0 ;  $ ~for ( ; i < len ; i ++ ) {  $ ~~if ( s [ i ] == 'a' ) flag = 1 ;  $ ~~if ( flag )  $ ~~~cout << s [ i ] ;  $ ~~else  $ ~~~cout << ( char ) ( s [ i ] - 1 ) ;  $ ~}  $ ~cout << endl ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~string s ;  $ ~cin >> s ;  $ ~int k = s . length ( ) ;  $ ~int a [ 10 ] = { 0 } ;  $ ~if ( s [ 0 ] == 52 ) {  $ ~~cout << "NO" << endl ;  $ ~~return 0 ;  $ ~}  $ ~for ( int i = 0 ; i < k ; i ++ ) { a [ s [ i ] - '0' ] ++ ; }  $ ~for ( int i = 0 ; i < 10 ; i ++ ) {  $ ~~if ( i != 1 && i != 4 ) {  $ ~~~if ( a [ i ] > 0 ) {  $ ~~~~cout << "NO" << endl ;  $ ~~~~return 0 ;  $ ~~~}  $ ~~}  $ ~}  $ ~int max_cont_4 = - 5 ;  $ ~for ( int i = 0 ; i < k ; i ++ ) {  $ ~~if ( s [ i ] == 52 ) {  $ ~~~int count = 1 ;  $ ~~~i ++ ;  $ ~~~while ( i < k && s [ i ] == 52 ) {  $ ~~~~count ++ ;  $ ~~~~i ++ ;  $ ~~~}  $ ~~~if ( max_cont_4 < count ) max_cont_4 = count ;  $ ~~}  $ ~}  $ ~if ( max_cont_4 > 2 ) {  $ ~~cout << "NO" << endl ;  $ ~} else {  $ ~~cout << "YES" << endl ;  $ ~}  $ ~return 0 ;  $ }
int main ( ) {  $ ~int n , a [ 100005 ] , k , e = 0 ;  $ ~cin >> n ;  $ ~for ( int i = 0 ; i < n - 1 ; i ++ ) cin >> a [ i ] ;  $ ~sort ( a , a + n - 1 ) ;  $ ~for ( int i = 0 ; i < n - 2 ; i ++ ) {  $ ~~if ( a [ i + 1 ] != a [ i ] + 1 ) {  $ ~~~k = i + 2 ;  $ ~~~e = 1 ;  $ ~~~break ;  $ ~~}  $ ~}  $ ~if ( e == 0 ) {  $ ~~if ( a [ 0 ] == 1 )  $ ~~~cout << n << endl ;  $ ~~else  $ ~~~cout << 1 << endl ;  $ ~} else  $ ~~cout << k << endl ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~int n , i , c ;  $ ~while ( cin >> n ) {  $ ~~vector < int > a ;  $ ~~for ( i = 0 ; i < n ; i ++ ) {  $ ~~~cin >> c ;  $ ~~~a . push_back ( c ) ;  $ ~~}  $ ~~sort ( a . begin ( ) , a . end ( ) ) ;  $ ~~int cha , min = 2000000009 ;  $ ~~int num = 0 ;  $ ~~for ( i = 1 ; i < n ; i ++ ) {  $ ~~~cha = a [ i ] - a [ i - 1 ] ;  $ ~~~if ( cha < min ) {  $ ~~~~min = cha ;  $ ~~~~num = 1 ;  $ ~~~} else {  $ ~~~~if ( cha == min ) num ++ ;  $ ~~~}  $ ~~}  $ ~~cout << min << " " << num << endl ;  $ ~~a . clear ( ) ;  $ ~}  $ ~return 0 ;  $ }
int main ( ) {  $ ~string str ;  $ ~int i , j ;  $ ~cin >> str ;  $ ~for ( i = 0 ; i < str . size ( ) ; i ++ ) {  $ ~~if ( str [ i ] != 'a' ) { break ; }  $ ~}  $ ~for ( j = i ; j < str . size ( ) ; j ++ ) {  $ ~~if ( str [ j ] == 'a' ) { break ; }  $ ~~str [ j ] -- ;  $ ~}  $ ~if ( i == str . size ( ) ) { str [ str . size ( ) - 1 ] = 'z' ; }  $ ~cout << str << endl ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~int na , nb , k , n , m , a [ 100020 ] , b [ 100005 ] ;  $ ~cin >> na >> nb ;  $ ~cin >> k >> m ;  $ ~for ( int i = 0 ; i < na ; i ++ ) { cin >> a [ i ] ; }  $ ~int l = nb - m ;  $ ~for ( int i = 0 ; i < nb ; i ++ ) { cin >> b [ i ] ; }  $ ~if ( a [ k - 1 ] < b [ l ] )  $ ~~cout << "YES" << endl ;  $ ~else  $ ~~cout << "NO" << endl ;  $ }
int k , a , b , v ;  $ int main ( ) {  $ ~cout . precision ( 10 ) ;  $ ~cin >> k >> a >> b >> v ;  $ ~int ans = 0 ;  $ ~while ( a ) {  $ ~~int x = min ( k - 1 , b ) ;  $ ~~a = max ( 0 , a - ( x + 1 ) * v ) ;  $ ~~b -= x ;  $ ~~ans ++ ;  $ ~}  $ ~cout << ans << "\n" ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~int n ;  $ ~cin >> n ;  $ ~cout << "I hate " ;  $ ~while ( -- n > 0 ) {  $ ~~cout << "that I love " ;  $ ~~if ( -- n == 0 ) break ;  $ ~~cout << "that I hate " ;  $ ~}  $ ~cout << "it" << endl ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~int n ;  $ ~string name1 , name2 , s [ 2 ] ;  $ ~cin >> name1 >> name2 ;  $ ~cin >> n ;  $ ~s [ 0 ] = name1 ;  $ ~s [ 1 ] = name2 ;  $ ~cout << name1 << " " << name2 << endl ;  $ ~for ( int i = 0 ; i < n ; i ++ ) {  $ ~~cin >> name1 >> name2 ;  $ ~~if ( s [ 0 ] == name1 ) {  $ ~~~s [ 0 ] = name2 ;  $ ~~} else {  $ ~~~s [ 1 ] = name2 ;  $ ~~}  $ ~~cout << s [ 0 ] << " " << s [ 1 ] << endl ;  $ ~}  $ ~return 0 ;  $ }
int main ( ) {  $ ~int n ;  $ ~while ( cin >> n ) {  $ ~~long long max = 0 ;  $ ~~long long sum = 0 ;  $ ~~int a [ 101 ] ;  $ ~~for ( int i = 0 ; i < n ; ++ i ) { cin >> a [ i ] ; }  $ ~~for ( int i = 0 ; i < n ; ++ i ) {  $ ~~~sum = a [ i ] ;  $ ~~~long long total = sum ;  $ ~~~for ( int j = i + 1 ; j < n ; ++ j ) {  $ ~~~~sum = a [ j ] ^ sum ;  $ ~~~~if ( sum > total ) total = sum ;  $ ~~~}  $ ~~~if ( total > max ) max = total ;  $ ~~}  $ ~~cout << max << endl ;  $ ~}  $ ~return 0 ;  $ }
int main ( ) {  $ ~int n , t , k , d ;  $ ~cin >> n >> t >> k >> d ;  $ ~int c = ( n + k - 1 ) / k ;  $ ~int o1 = 0 , o2 = d ;  $ ~for ( int i = 0 ; i < c ; ++ i ) {  $ ~~if ( o1 <= o2 )  $ ~~~o1 += t ;  $ ~~else  $ ~~~o2 += t ;  $ ~}  $ ~o1 = max ( o1 , o2 ) ;  $ ~if ( o1 >= c * t )  $ ~~cout << "NO" << endl ;  $ ~else  $ ~~cout << "YES" << endl ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~int n ;  $ ~cin >> n ;  $ ~int a [ 1005 ] ;  $ ~for ( int i = 0 ; i < n * 2 ; i ++ ) cin >> a [ i ] ;  $ ~sort ( a , a + n * 2 ) ;  $ ~if ( a [ n ] > a [ n - 1 ] )  $ ~~cout << "YES\n" ;  $ ~else  $ ~~cout << "NO\n" ;  $ ~return 0 ;  $ }
int test , x , frnd ;  $ int main ( ) {  $ ~cin >> test ;  $ ~frnd = 3 ;  $ ~for ( int i = 1 ; i <= test ; i ++ ) {  $ ~~cin >> x ;  $ ~~if ( x == frnd ) return cout << "NO" << endl , 0 ;  $ ~~for ( int j = 1 ; j <= 3 ; j ++ )  $ ~~~if ( j != frnd && j != x ) {  $ ~~~~frnd = j ;  $ ~~~~break ;  $ ~~~}  $ ~}  $ ~cout << "YES" << endl ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~int temp ;  $ ~map < int , int > c ;  $ ~map < int , int > m ;  $ ~cin >> temp ;  $ ~m [ 1 ] += temp ;  $ ~m [ 4 ] += temp ;  $ ~cin >> temp ;  $ ~m [ 1 ] += temp ;  $ ~m [ 3 ] += temp ;  $ ~cin >> temp ;  $ ~m [ 1 ] += temp ;  $ ~m [ 2 ] += temp ;  $ ~cin >> temp ;  $ ~c [ 1 ] += temp ;  $ ~cin >> temp ;  $ ~m [ 1 ] += temp ;  $ ~m [ 2 ] += temp ;  $ ~cin >> temp ;  $ ~m [ 2 ] += temp ;  $ ~m [ 4 ] += temp ;  $ ~cin >> temp ;  $ ~m [ 3 ] += temp ;  $ ~m [ 2 ] += temp ;  $ ~cin >> temp ;  $ ~c [ 2 ] += temp ;  $ ~cin >> temp ;  $ ~m [ 3 ] += temp ;  $ ~m [ 2 ] += temp ;  $ ~cin >> temp ;  $ ~m [ 1 ] += temp ;  $ ~m [ 3 ] += temp ;  $ ~cin >> temp ;  $ ~m [ 3 ] += temp ;  $ ~m [ 4 ] += temp ;  $ ~cin >> temp ;  $ ~c [ 3 ] += temp ;  $ ~cin >> temp ;  $ ~m [ 3 ] += temp ;  $ ~m [ 4 ] += temp ;  $ ~cin >> temp ;  $ ~m [ 4 ] += temp ;  $ ~m [ 2 ] += temp ;  $ ~cin >> temp ;  $ ~m [ 1 ] += temp ;  $ ~m [ 4 ] += temp ;  $ ~cin >> temp ;  $ ~c [ 4 ] += temp ;  $ ~int flag = 0 ;  $ ~if ( c [ 1 ] > 0 ) {  $ ~~if ( m [ 1 ] > 0 ) flag = 1 ;  $ ~}  $ ~if ( c [ 2 ] > 0 ) {  $ ~~if ( m [ 2 ] > 0 ) flag = 1 ;  $ ~}  $ ~if ( c [ 3 ] > 0 ) {  $ ~~if ( m [ 3 ] > 0 ) flag = 1 ;  $ ~}  $ ~if ( c [ 4 ] > 0 ) {  $ ~~if ( m [ 4 ] > 0 ) flag = 1 ;  $ ~}  $ ~if ( flag == 0 )  $ ~~cout << "NO" << endl ;  $ ~else  $ ~~cout << "YES" << endl ;  $ ~return 0 ;  $ }
int n , m ;  $ int main ( ) {  $ ~cin >> n >> m ;  $ ~if ( n == 0 && m > 0 ) {  $ ~~cout << "Impossible\n" ;  $ ~~return 0 ;  $ ~}  $ ~int mini = n + m - min ( n , m ) ;  $ ~int maxi = n + m - min ( 1 , m ) ;  $ ~cout << mini << " " << maxi << "\n" ;  $ ~return 0 ;  $ }
vector < string > fs ;  $ long long int valid [ 200 ] ;  $ int main ( ) {  $ ~long long int n , in ;  $ ~cin >> n ;  $ ~string h , w , k ;  $ ~char ch ;  $ ~for ( int i = 0 ; i < n ; i ++ ) {  $ ~~cin >> h ;  $ ~~transform ( h . begin ( ) , h . end ( ) , h . begin ( ) , : : tolower ) ;  $ ~~fs . push_back ( h ) ;  $ ~}  $ ~cin >> w >> ch ;  $ ~if ( ch - 'a' >= 0 && 'z' - ch >= 0 ) {  $ ~~in = ch - 'a' ;  $ ~} else {  $ ~~in = ch = 'A' ;  $ ~}  $ ~k = w ;  $ ~transform ( w . begin ( ) , w . end ( ) , w . begin ( ) , : : tolower ) ;  $ ~for ( int i = 0 ; i < n ; i ++ ) {  $ ~~long long int z = fs [ i ] . length ( ) ;  $ ~~for ( int j = 0 ; j < w . length ( ) ; j ++ ) {  $ ~~~string temp = "" ;  $ ~~~for ( int k = j ; k < j + z ; k ++ ) temp += w [ k ] ;  $ ~~~if ( temp == fs [ i ] )  $ ~~~~for ( int k = j ; k < j + z ; k ++ ) valid [ k ] = 1 ;  $ ~~}  $ ~}  $ ~string res = "" ;  $ ~for ( int i = 0 ; i < w . length ( ) ; i ++ ) {  $ ~~if ( valid [ i ] ) {  $ ~~~if ( k [ i ] >= 'a' && k [ i ] <= 'z' ) {  $ ~~~~if ( k [ i ] - 'a' != in )  $ ~~~~~res += 'a' + in ;  $ ~~~~else {  $ ~~~~~if ( ch > 'a' && ch <= 'z' ) {  $ ~~~~~~res += 'a' ;  $ ~~~~~} else if ( ch == 'a' )  $ ~~~~~~res += 'b' ;  $ ~~~~~else if ( ch > 'A' && ch <= 'Z' ) {  $ ~~~~~~res += 'a' ;  $ ~~~~~} else if ( ch == 'A' )  $ ~~~~~~res += 'b' ;  $ ~~~~}  $ ~~~} else {  $ ~~~~if ( k [ i ] - 'A' != in )  $ ~~~~~res += 'A' + in ;  $ ~~~~else {  $ ~~~~~if ( ch > 'A' && ch <= 'Z' ) {  $ ~~~~~~res += 'A' ;  $ ~~~~~} else if ( ch == 'A' )  $ ~~~~~~res += 'B' ;  $ ~~~~~else if ( ch > 'a' && ch <= 'z' ) {  $ ~~~~~~res += 'A' ;  $ ~~~~~} else if ( ch == 'a' )  $ ~~~~~~res += 'B' ;  $ ~~~~}  $ ~~~}  $ ~~} else  $ ~~~res += k [ i ] ;  $ ~}  $ ~cout << res << endl ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~long long int n ;  $ ~cin >> n ;  $ ~if ( n > 2 )  $ ~~cout << 1 << endl ;  $ ~else  $ ~~cout << n << endl ;  $ ~return 0 ;  $ }
int a [ 109 ] ;  $ int main ( ) {  $ ~int n , mx = - 10e9 + 9 , ans = 0 ;  $ ~cin >> n ;  $ ~for ( int i = 0 ; i < n ; i ++ ) {  $ ~~cin >> a [ i ] ;  $ ~~mx = max ( mx , a [ i ] ) ;  $ ~}  $ ~for ( int i = 0 ; i < n ; i ++ ) { ans += mx - a [ i ] ; }  $ ~cout << ans << endl ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~int i , j , k , m , n , k0 = 0 , k1 = 0 ;  $ ~char s [ 1000 ] ;  $ ~cin >> n ;  $ ~cin >> s ;  $ ~for ( i = 0 ; i < n ; i ++ ) {  $ ~~if ( s [ i ] == '0' ) k0 ++ ;  $ ~~if ( s [ i ] == '1' ) k1 ++ ;  $ ~}  $ ~if ( k1 > 0 ) {  $ ~~cout << 1 ;  $ ~~for ( i = 0 ; i < k0 ; i ++ ) cout << 0 ;  $ ~~cout << endl ;  $ ~} else  $ ~~cout << 0 << endl ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~int n ;  $ ~cin >> n ;  $ ~long long javob [ n ] ;  $ ~long long a , b , k ;  $ ~for ( int i = 0 ; i < n ; i ++ ) {  $ ~~cin >> a >> b >> k ;  $ ~~if ( k % 2 == 0 )  $ ~~~javob [ i ] = ( a - b ) * k / 2 ;  $ ~~else  $ ~~~javob [ i ] = a * ( k / 2 + 1 ) - b * ( k / 2 ) ;  $ ~}  $ ~for ( int i = 0 ; i < n ; i ++ ) { cout << javob [ i ] << endl ; }  $ ~return 0 ;  $ }
int main ( ) {  $ ~int n ;  $ ~cin >> n ;  $ ~if ( n % 2 == 0 )  $ ~~cout << 0 << endl ;  $ ~else  $ ~~cout << 1 << endl ;  $ }
int m , d ;  $ int main ( ) {  $ ~cin >> m >> d ;  $ ~int nd = 30 ;  $ ~if ( ( m < 8 && m % 2 == 1 ) || ( m >= 8 && m % 2 == 0 ) ) {  $ ~~nd ++ ;  $ ~} else if ( m == 2 ) {  $ ~~nd -= 2 ;  $ ~}  $ ~nd += ( d - 1 ) ;  $ ~cout << nd / 7 + ( nd % 7 != 0 ) << endl ;  $ }
int main ( ) {  $ ~long long n , c ;  $ ~cin >> n >> c ;  $ ~long long k = 0 ;  $ ~for ( int i = 0 ; i < n ; i ++ ) {  $ ~~long long m , p ;  $ ~~cin >> m ;  $ ~~if ( k == 0 ) {  $ ~~~p = m ;  $ ~~~k ++ ;  $ ~~} else {  $ ~~~if ( m - p <= c ) {  $ ~~~~k ++ ;  $ ~~~~p = m ;  $ ~~~} else {  $ ~~~~k = 0 ;  $ ~~~~p = m ;  $ ~~~~k ++ ;  $ ~~~}  $ ~~}  $ ~}  $ ~cout << k << endl ;  $ }
int main ( ) {  $ ~string number ;  $ ~cin >> number ;  $ ~int flag ;  $ ~int x = 0 ;  $ ~for ( long int i = 0 ; i < number . length ( ) ; i ++ ) {  $ ~~if ( number [ i ] == '4' || number [ i ] == '7' ) { x ++ ; }  $ ~}  $ ~string str ;  $ ~ostringstream temp ;  $ ~temp << x ;  $ ~str = temp . str ( ) ;  $ ~for ( long int i = 0 ; i < str . length ( ) ; i ++ ) {  $ ~~if ( str [ i ] == '4' || str [ i ] == '7' ) {  $ ~~~flag = 0 ;  $ ~~} else {  $ ~~~flag = 1 ;  $ ~~~break ;  $ ~~}  $ ~}  $ ~if ( flag == 0 ) {  $ ~~cout << "YES" << endl ;  $ ~} else if ( flag == 1 ) {  $ ~~cout << "NO" << endl ;  $ ~}  $ }
long long mul ( long long x , long long p ) {  $ ~long long ans = 1 ;  $ ~while ( p ) {  $ ~~if ( p & 1 ) ans = ans * x % 1000000007 ;  $ ~~x = x * x % 1000000007 ;  $ ~~p = p >> 1 ;  $ ~}  $ ~return ans ;  $ }  $ int main ( ) {  $ ~long long n ;  $ ~cin >> n ;  $ ~if ( n ) {  $ ~~long long w = mul ( 2 , n - 1 ) % 1000000007 ;  $ ~~cout << ( w + 2 * w * w % 1000000007 ) % 1000000007 << endl ;  $ ~} else  $ ~~cout << 1 << endl ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~int a1 , a2 , tmp = 0 ;  $ ~cin >> a1 >> a2 ;  $ ~while ( a2 != 0 ) {  $ ~~tmp *= 10 ;  $ ~~tmp += a2 % 10 ;  $ ~~a2 /= 10 ;  $ ~}  $ ~cout << a1 + tmp << endl ;  $ }
int main ( ) {  $ ~int n ;  $ ~cin >> n ;  $ ~cout << ( n == 2 ? 2 : 1 ) << endl ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~int n , flag = 1 , i , j ;  $ ~char a [ 110 ] [ 110 ] ;  $ ~cin >> n ;  $ ~for ( i = 0 ; i < n ; ++ i )  $ ~~for ( j = 0 ; j < n ; ++ j ) cin >> a [ j ] [ i ] ;  $ ~for ( i = 0 ; i < n ; ++ i ) {  $ ~~int count = 0 ;  $ ~~for ( j = 0 ; j < n ; ++ j ) {  $ ~~~if ( a [ j - 1 ] [ i ] == 'o' ) { count ++ ; }  $ ~~~if ( a [ j + 1 ] [ i ] == 'o' ) { count ++ ; }  $ ~~~if ( a [ j ] [ i - 1 ] == 'o' ) { count ++ ; }  $ ~~~if ( a [ j ] [ i + 1 ] == 'o' ) { count ++ ; }  $ ~~~if ( count % 2 != 0 ) {  $ ~~~~flag = 0 ;  $ ~~~~break ;  $ ~~~}  $ ~~}  $ ~}  $ ~if ( flag == 1 ) {  $ ~~cout << "YES" << endl ;  $ ~} else {  $ ~~cout << "NO" << endl ;  $ ~}  $ ~return 0 ;  $ }
int main ( ) {  $ ~int m , a ;  $ ~cin >> m ;  $ ~float s ;  $ ~for ( int i = 0 ; i < m ; i ++ ) {  $ ~~cin >> a ;  $ ~~s = 360.0 / ( 180.0 - a ) ;  $ ~~if ( s - int ( s ) == 0.0 )  $ ~~~cout << "YES" << endl ;  $ ~~else  $ ~~~cout << "NO" << endl ;  $ ~}  $ }
int main ( ) {  $ ~int n , m ;  $ ~cin >> n >> m ;  $ ~bool flag = true ;  $ ~for ( int i = 0 ; i < n ; i ++ ) {  $ ~~for ( int j = 0 ; j < m ; j ++ ) {  $ ~~~if ( i % 2 == 0 )  $ ~~~~cout << "#" ;  $ ~~~else {  $ ~~~~if ( j == 0 && flag )  $ ~~~~~cout << "#" ;  $ ~~~~else if ( j == ( m - 1 ) && ! flag )  $ ~~~~~cout << "#" ;  $ ~~~~else  $ ~~~~~cout << "." ;  $ ~~~}  $ ~~}  $ ~~cout << endl ;  $ ~~if ( i % 2 == 0 ) flag = ! flag ;  $ ~}  $ ~return 0 ;  $ }
const int MAXN = 5000 + 7 , DELTA = 1000 * 1000 * 1000 + 7 ;  $ long long numberOfPartialAns [ MAXN ] [ MAXN ] ;  $ string s , t ;  $ int main ( ) {  $ ~cin >> s >> t ;  $ ~for ( int i = 1 ; i <= ( int ) s . size ( ) ; ++ i ) {  $ ~~for ( int j = 1 ; j <= ( int ) t . size ( ) ; ++ j ) {  $ ~~~numberOfPartialAns [ i ] [ j ] = numberOfPartialAns [ i ] [ j - 1 ] ;  $ ~~~if ( s [ i - 1 ] == t [ j - 1 ] ) {  $ ~~~~numberOfPartialAns [ i ] [ j ] += numberOfPartialAns [ i - 1 ] [ j - 1 ] ;  $ ~~~~numberOfPartialAns [ i ] [ j ] %= DELTA ;  $ ~~~~numberOfPartialAns [ i ] [ j ] ++ ;  $ ~~~~numberOfPartialAns [ i ] [ j ] %= DELTA ;  $ ~~~}  $ ~~}  $ ~}  $ ~long long ans = 0 ;  $ ~for ( int i = 1 ; i <= ( int ) s . size ( ) ; ++ i ) {  $ ~~ans += numberOfPartialAns [ i ] [ ( int ) t . size ( ) ] ;  $ ~~ans %= DELTA ;  $ ~}  $ ~cout << ans << endl ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~int n ;  $ ~cin >> n ;  $ ~if ( n == 0 ) {  $ ~~cout << 1 << endl ;  $ ~~return 0 ;  $ ~}  $ ~int s = ( int ) floor ( n / ( long double ) sqrt ( 2.0 ) ) ;  $ ~int t = ( int ) floor ( n / ( long double ) sqrt ( 2.0 ) ) + 1 ;  $ ~if ( s * s + t * t > n * n ) {  $ ~~cout << 8 * s << endl ;  $ ~} else {  $ ~~cout << 8 * s + 4 << endl ;  $ ~}  $ ~return 0 ;  $ }
int t [ 100005 ] , l [ 100005 ] ;  $ int main ( ) {  $ ~int n , L , a ;  $ ~cin >> n >> L >> a ;  $ ~for ( int i = 0 ; i < n ; i ++ ) cin >> t [ i ] >> l [ i ] ;  $ ~int ans = 0 ;  $ ~for ( int i = 1 ; i < n ; i ++ ) ans += ( t [ i ] - t [ i - 1 ] - l [ i - 1 ] ) / a ;  $ ~if ( n ) {  $ ~~ans += t [ 0 ] / a ;  $ ~~ans += ( L - t [ n - 1 ] - l [ n - 1 ] ) / a ;  $ ~} else {  $ ~~ans = L / a ;  $ ~}  $ ~cout << ans << endl ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~long long int t , x , y ;  $ ~cin >> t ;  $ ~long long int arr [ t ] , ans [ t ] ;  $ ~for ( int i = 0 ; i < t ; i ++ ) {  $ ~~long long int a , b , k ;  $ ~~cin >> a >> b >> k ;  $ ~~if ( k % 2 == 0 ) {  $ ~~~x = k / 2 , y = k / 2 ;  $ ~~} else {  $ ~~~x = k / 2 + 1 ;  $ ~~~y = k / 2 ;  $ ~~}  $ ~~ans [ i ] = a * x - b * y ;  $ ~}  $ ~for ( int i = 0 ; i < t ; i ++ ) { cout << ans [ i ] << endl ; }  $ }
int main ( ) {  $ ~int t , s , q ;  $ ~cin >> t >> s >> q ;  $ ~int ans = 0 ;  $ ~while ( s < t ) {  $ ~~ans ++ ;  $ ~~s *= q ;  $ ~}  $ ~cout << ans << "\n" ;  $ ~return 0 ;  $ }
long long int a [ 100050 ] = { 0 } ;  $ int main ( ) {  $ ~int p = 0 , res = 0 , ui = 0 ;  $ ~int T ;  $ ~cin >> T ;  $ ~while ( T -- ) cin >> a [ p ++ ] ;  $ ~sort ( a , a + p ) ;  $ ~for ( int i = 0 ; i <= p - 1 ; i ++ ) {  $ ~~for ( int k = ui ; k <= p - 1 ; k ++ )  $ ~~~if ( a [ ui ] <= a [ i ] )  $ ~~~~ui ++ ;  $ ~~~else  $ ~~~~break ;  $ ~~if ( ui < p ) res ++ , ui ++ ;  $ ~}  $ ~cout << res << endl ;  $ ~return 0 ;  $ }
const int N = 1e5 + 50 ;  $ const int oo = 1e9 ;  $ const int mod = 1e9 + 7 ;  $ string a [ 2001 ] , b [ 201 ] , f1 [ 2001 ] , f2 [ 2001 ] ;  $ int main ( ) {  $ ~int n , m ;  $ ~cin >> n >> m ;  $ ~for ( int i = 0 ; i < n ; i ++ ) cin >> a [ i ] ;  $ ~for ( int i = 0 ; i < m ; i ++ ) cin >> b [ i ] ;  $ ~for ( int i = 0 ; i + m <= n ; i ++ ) {  $ ~~f1 [ i ] = "" ;  $ ~~for ( int j = 0 ; j < m ; j ++ ) f1 [ i ] += a [ i + j ] ;  $ ~}  $ ~for ( int i = 0 ; i + m <= n ; i ++ ) {  $ ~~f2 [ i ] = "" ;  $ ~~for ( int j = 0 ; j < m ; j ++ ) { f2 [ i ] += b [ j ] . substr ( i , m ) ; }  $ ~}  $ ~for ( int i = 0 ; i + m <= n ; i ++ ) {  $ ~~for ( int j = 0 ; j + m <= n ; j ++ ) {  $ ~~~if ( f1 [ i ] == f2 [ j ] ) {  $ ~~~~cout << i + 1 << ' ' << j + 1 << endl ;  $ ~~~~return 0 ;  $ ~~~}  $ ~~}  $ ~}  $ }
int main ( ) {  $ ~int f = 0 , g = 0 , m , n ;  $ ~cin >> m ;  $ ~cin >> n ;  $ ~for ( int i = 1 ; i <= m ; i ++ ) {  $ ~~for ( int j = 1 ; j <= n ; j ++ ) {  $ ~~~if ( i % 2 != 0 )  $ ~~~~cout << "#" ;  $ ~~~else {  $ ~~~~if ( j == 1 && f == 1 ) {  $ ~~~~~cout << "#" ;  $ ~~~~~f = 0 ;  $ ~~~~~g = 1 ;  $ ~~~~} else if ( j == n && f == 0 && g == 0 ) {  $ ~~~~~cout << "#" ;  $ ~~~~~f = 1 ;  $ ~~~~} else  $ ~~~~~cout << "." ;  $ ~~~}  $ ~~}  $ ~~cout << "\n" ;  $ ~~g = 0 ;  $ ~}  $ }
int main ( ) {  $ ~int n , m , max = - 1 , idx ;  $ ~float x ;  $ ~cin >> n >> m ;  $ ~for ( int i = 0 ; i < n ; i ++ ) {  $ ~~cin >> x ;  $ ~~x = ceil ( x / m ) ;  $ ~~if ( x >= max ) {  $ ~~~max = x ;  $ ~~~idx = i ;  $ ~~}  $ ~}  $ ~cout << ( idx + 1 ) << endl ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~string s ;  $ ~int x , sum = 0 ;  $ ~cin >> x ;  $ ~for ( int i = 0 ; i < x ; i ++ ) {  $ ~~cin >> s ;  $ ~~if ( s == "Tetrahedron" )  $ ~~~sum += 4 ;  $ ~~else if ( s == "Cube" )  $ ~~~sum += 6 ;  $ ~~else if ( s == "Octahedron" )  $ ~~~sum += 8 ;  $ ~~else if ( s == "Dodecahedron" )  $ ~~~sum += 12 ;  $ ~~else if ( s == "Icosahedron" )  $ ~~~sum += 20 ;  $ ~}  $ ~cout << sum << "\n" ;  $ }
map < long long , long long > M ;  $ void update ( long long u , long long v , long long w ) {  $ ~while ( u != v ) {  $ ~~if ( v < u ) swap ( u , v ) ;  $ ~~M [ v ] += w ;  $ ~~v /= 2 ;  $ ~}  $ }  $ long long solve ( long long u , long long v ) {  $ ~long long res = 0 ;  $ ~while ( u != v ) {  $ ~~if ( v < u ) swap ( u , v ) ;  $ ~~res += M [ v ] ;  $ ~~v /= 2 ;  $ ~}  $ ~return res ;  $ }  $ int main ( ) {  $ ~long long u , v , w , q , t ;  $ ~cin >> q ;  $ ~while ( cin >> t >> u >> v , q -- ) {  $ ~~if ( t == 2 )  $ ~~~cout << solve ( u , v ) << '\n' ;  $ ~~else  $ ~~~cin >> w , update ( u , v , w ) ;  $ ~}  $ }
int main ( ) {  $ ~int n ;  $ ~cin >> n ;  $ ~if ( n % 2 ) {  $ ~~cout << ( n + 1 ) / 2 - 1 << endl ;  $ ~} else {  $ ~~cout << ( n ^ ( 1 << ( 31 - __builtin_clz ( n ) ) ) ) / 2 << endl ;  $ ~}  $ }
vector < long long > p , ans ;  $ int main ( ) {  $ ~long long t , s , q ;  $ ~cin >> t >> s >> q ;  $ ~long long ans = 1 ;  $ ~long long time = 0 ;  $ ~long long loaded = s ;  $ ~while ( true ) {  $ ~~time += q ;  $ ~~loaded += ( q - 1 ) ;  $ ~~if ( time >= t ) break ;  $ ~~if ( time == loaded ) {  $ ~~~time = 0 ;  $ ~~~ans ++ ;  $ ~~}  $ ~}  $ ~cout << ans << "\n" ;  $ ~return 0 ;  $ }
const double pi = 3.14159265359 ;  $ const double eps = 1e-9 ;  $ const int mod = 1e9 + 7 ;  $ const int mod1 = 1e9 + 9 ;  $ const int INF = 1e9 ;  $ const long long INFLL = 2e18 ;  $ long long sqr ( long long a ) {  $ ~return a * a ;  $ }  $ int main ( ) {  $ ~long long n ;  $ ~cin >> n ;  $ ~long long start = 2 ;  $ ~for ( long long i = 1 ; i < n + 1 ; i ++ ) {  $ ~~cout << i * sqr ( i + 1 ) - start / i << endl ;  $ ~~start = i * ( i + 1 ) ;  $ ~}  $ ~return 0 ;  $ }
int main ( ) {  $ ~int n ;  $ ~char c [ 95 ] ;  $ ~while ( cin >> n ) {  $ ~~int sum1 = 0 ;  $ ~~for ( int i = 0 ; i <= n - 1 ; i ++ ) cin >> c [ i ] ;  $ ~~for ( int i = 0 ; i <= n - 1 ; i ++ ) {  $ ~~~if ( c [ i ] == '1' )  $ ~~~~sum1 ++ ;  $ ~~~else {  $ ~~~~cout << sum1 ;  $ ~~~~sum1 = 0 ;  $ ~~~}  $ ~~}  $ ~~cout << sum1 << endl ;  $ ~}  $ ~return 0 ;  $ }
int arr [ 120 ] ;  $ int main ( ) {  $ ~int n , ans = 0 ;  $ ~cin >> n ;  $ ~for ( int i = 0 ; i < n ; i ++ ) cin >> arr [ i ] ;  $ ~for ( int i = 0 ; i < n ; i ++ ) {  $ ~~int now = 0 ;  $ ~~for ( int j = 0 ; j <= i ; j ++ )  $ ~~~if ( ! arr [ j ] ) now ++ ;  $ ~~for ( int j = i ; j < n ; j ++ )  $ ~~~if ( arr [ j ] ) now ++ ;  $ ~~ans = max ( ans , now ) ;  $ ~}  $ ~cout << ans << endl ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~int a , b , i , j ;  $ ~cin >> a >> b ;  $ ~int * arr = new int [ 10000 ] ;  $ ~int * brr = new int [ 10000 ] ;  $ ~for ( i = 0 ; i < a ; i ++ ) cin >> arr [ i ] ;  $ ~for ( j = 0 ; j < a ; j ++ ) cin >> brr [ j ] ;  $ ~if ( arr [ 0 ] == 0 ) {  $ ~~cout << "NO" << endl ;  $ ~~return 0 ;  $ ~}  $ ~if ( arr [ b - 1 ] == 1 ) {  $ ~~cout << "YES" << endl ;  $ ~~return 0 ;  $ ~}  $ ~for ( i = b - 1 ; i <= a - 1 ; i ++ ) {  $ ~~if ( arr [ i ] == 1 && brr [ i ] == 1 && brr [ b - 1 ] == 1 ) {  $ ~~~cout << "YES" << endl ;  $ ~~~return 0 ;  $ ~~}  $ ~}  $ ~cout << "NO" << endl ;  $ }
int N , A , sum , a , b , c , d ;  $ int main ( ) {  $ ~cin >> N ;  $ ~b = 3 ;  $ ~for ( int i = 1 ; i <= N ; i ++ ) {  $ ~~cin >> a ;  $ ~~if ( b == a ) {  $ ~~~cout << "NO\n" ;  $ ~~~return 0 ;  $ ~~}  $ ~~b = 6 - a - b ;  $ ~}  $ ~cout << "YES\n" ;  $ }
const int MAXN = 105 ;  $ int n ;  $ int a [ MAXN ] ;  $ int main ( ) {  $ ~cin >> n ;  $ ~for ( int i = 0 ; i < n ; i ++ ) { cin >> a [ i ] ; }  $ ~sort ( a , a + n ) ;  $ ~n = unique ( a , a + n ) - a ;  $ ~cout << ( a [ 0 ] ? n : n - 1 ) << endl ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~long long int n , l , i , d = 0 , e ;  $ ~char s [ 200000 ] ;  $ ~cin >> n ;  $ ~string a ;  $ ~cin >> a ;  $ ~l = a . size ( ) ;  $ ~for ( i = 0 ; i < l ; i ++ ) {  $ ~~if ( a [ i ] == '1' ) { d ++ ; }  $ ~}  $ ~e = l - d ;  $ ~cout << abs ( d - e ) << endl ;  $ }
int main ( ) {  $ ~int n , k , start ;  $ ~string slogan ;  $ ~cin >> n >> k >> slogan ;  $ ~if ( 2 * k <= n || k == 1 ) {  $ ~~start = 0 ;  $ ~} else {  $ ~~start = slogan . length ( ) ;  $ ~}  $ ~if ( start == 0 ) {  $ ~~for ( int i = k - 1 ; i > 0 ; i -- ) { cout << "LEFT" << endl ; }  $ ~~for ( int i = 0 ; i < n ; i ++ ) {  $ ~~~cout << "PRINT " << slogan [ i ] << endl ;  $ ~~~if ( i != n - 1 ) { cout << "RIGHT" << endl ; }  $ ~~}  $ ~} else {  $ ~~for ( int i = k ; i < n ; i ++ ) { cout << "RIGHT" << endl ; }  $ ~~for ( int i = n - 1 ; i >= 0 ; i -- ) {  $ ~~~cout << "PRINT " << slogan [ i ] << endl ;  $ ~~~if ( i != 0 ) { cout << "LEFT" << endl ; }  $ ~~}  $ ~}  $ ~return 0 ;  $ }
int main ( ) {  $ ~int len ;  $ ~string str ;  $ ~cin >> len ;  $ ~cin >> str ;  $ ~if ( len == 1 ) {  $ ~~if ( str [ 0 ] == '1' )  $ ~~~puts ( "Yes" ) ;  $ ~~else  $ ~~~puts ( "No" ) ;  $ ~~return 0 ;  $ ~}  $ ~for ( int i = 1 ; i < len ; i ++ ) {  $ ~~if ( str [ i ] == str [ i - 1 ] && str [ i ] == '1' ) {  $ ~~~puts ( "No" ) ;  $ ~~~return 0 ;  $ ~~}  $ ~}  $ ~for ( int i = 2 ; i < len ; i ++ ) {  $ ~~if ( str [ i ] == str [ i - 1 ] && str [ i - 1 ] == str [ i - 2 ] && str [ i ] == '0' ) {  $ ~~~puts ( "No" ) ;  $ ~~~return 0 ;  $ ~~}  $ ~}  $ ~if ( str [ 0 ] == str [ 1 ] && str [ 0 ] == '0' ) {  $ ~~puts ( "No" ) ;  $ ~~return 0 ;  $ ~}  $ ~if ( str [ len - 1 ] == str [ len - 2 ] && str [ len - 1 ] == '0' ) {  $ ~~puts ( "No" ) ;  $ ~~return 0 ;  $ ~}  $ ~puts ( "Yes" ) ;  $ ~return 0 ;  $ }
const int N = 1e6 + 6 ;  $ int a [ N ] ;  $ int main ( ) {  $ ~int n , b , d , cnt , sum ;  $ ~while ( cin >> n >> b >> d ) {  $ ~~sum = 0 ;  $ ~~cnt = 0 ;  $ ~~for ( int i = 0 ; i < n ; i ++ ) {  $ ~~~cin >> a [ i ] ;  $ ~~~if ( a [ i ] <= b ) { sum += a [ i ] ; }  $ ~~~if ( sum > d ) {  $ ~~~~sum = 0 ;  $ ~~~~cnt ++ ;  $ ~~~}  $ ~~}  $ ~~cout << cnt << endl ;  $ ~}  $ }
int main ( ) {  $ ~bool fact = true ;  $ ~long long i , j , n ;  $ ~char a [ 305 ] [ 305 ] , fs , sc ;  $ ~while ( cin >> n ) {  $ ~~for ( i = 0 ; i < n ; i ++ )  $ ~~~for ( j = 0 ; j < n ; j ++ ) { cin >> a [ i ] [ j ] ; }  $ ~~fs = a [ 0 ] [ 0 ] ;  $ ~~sc = a [ 0 ] [ 1 ] ;  $ ~~if ( fs == sc ) {  $ ~~~cout << "NO" << endl ;  $ ~~~return 0 ;  $ ~~}  $ ~~for ( i = 0 ; i < n && fact ; i ++ )  $ ~~~for ( j = 0 ; j < n && fact ; j ++ ) {  $ ~~~~if ( i == j && a [ i ] [ j ] != fs ) {  $ ~~~~~cout << "NO" << endl ;  $ ~~~~~fact = false ;  $ ~~~~~break ;  $ ~~~~} else if ( j == ( n - i - 1 ) && a [ i ] [ n - i - 1 ] != fs ) {  $ ~~~~~cout << "NO" << endl ;  $ ~~~~~fact = false ;  $ ~~~~~break ;  $ ~~~~} else if ( ( j != ( n - i - 1 ) ) && i != j && a [ i ] [ j ] != sc ) {  $ ~~~~~cout << "NO" << endl ;  $ ~~~~~fact = false ;  $ ~~~~~break ;  $ ~~~~}  $ ~~~}  $ ~M :  $ ~~if ( fact ) cout << "YES" << endl ;  $ ~}  $ ~return 0 ;  $ }
int n , m , ans = 1e9 ;  $ int qs [ 5005 ] [ 5005 ] ;  $ string s ;  $ int main ( ) {  $ ~cin >> n >> m ;  $ ~for ( int i = 1 ; i <= n ; i ++ ) {  $ ~~cin >> s ;  $ ~~for ( int j = 1 ; j <= m ; j ++ ) { qs [ i ] [ j ] = ( s [ j - 1 ] == '1' ) ; }  $ ~}  $ ~for ( int i = 1 ; i <= 2 * max ( n , m ) ; i ++ ) {  $ ~~for ( int j = 1 ; j <= 2 * max ( n , m ) ; j ++ ) { qs [ i ] [ j ] += qs [ i - 1 ] [ j ] + qs [ i ] [ j - 1 ] - qs [ i - 1 ] [ j - 1 ] ; }  $ ~}  $ ~for ( int k = 2 ; k <= max ( n , m ) ; k ++ ) {  $ ~~int cnt = 0 ;  $ ~~for ( int i = 0 ; i < n ; i += k ) {  $ ~~~for ( int j = 0 ; j < m ; j += k ) {  $ ~~~~int one = qs [ i + k ] [ j + k ] - qs [ i ] [ j + k ] - qs [ i + k ] [ j ] + qs [ i ] [ j ] ;  $ ~~~~int zero = k * k - one ;  $ ~~~~cnt += min ( one , zero ) ;  $ ~~~}  $ ~~}  $ ~~ans = min ( ans , cnt ) ;  $ ~}  $ ~cout << ans << endl ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~string s ;  $ ~cin >> s ;  $ ~int pos ;  $ ~for ( int i = int ( 0 ) ; i < int ( int ( s . size ( ) ) ) ; ++ i )  $ ~~if ( s [ i ] == '=' ) pos = i ;  $ ~int c1 = 0 , c2 = 0 ;  $ ~for ( int i = int ( 0 ) ; i < int ( pos ) ; ++ i )  $ ~~if ( s [ i ] == '|' ) c1 ++ ;  $ ~for ( int i = int ( pos ) ; i < int ( int ( s . size ( ) ) ) ; ++ i )  $ ~~if ( s [ i ] == '|' ) c2 ++ ;  $ ~if ( c1 == c2 )  $ ~~cout << s << endl ;  $ ~else {  $ ~~if ( c1 == c2 + 2 ) {  $ ~~~if ( s [ 1 ] != '+' ) {  $ ~~~~for ( int i = int ( 1 ) ; i < int ( int ( s . size ( ) ) ) ; ++ i ) cout << s [ i ] ;  $ ~~~~cout << "|" << endl ;  $ ~~~} else {  $ ~~~~for ( int i = int ( 0 ) ; i < int ( int ( s . size ( ) ) ) ; ++ i )  $ ~~~~~if ( i != 2 ) cout << s [ i ] ;  $ ~~~~cout << "|" << endl ;  $ ~~~}  $ ~~} else if ( c1 + 2 == c2 ) {  $ ~~~cout << "|" ;  $ ~~~for ( int i = int ( 0 ) ; i < int ( int ( s . size ( ) ) - 1 ) ; ++ i ) cout << s [ i ] ;  $ ~~~cout << endl ;  $ ~~} else  $ ~~~cout << "Impossible" << endl ;  $ ~}  $ ~return 0 ;  $ }
int main ( ) {  $ ~int i , j , k , m , n , k1 = 0 , k2 = 0 , k3 = 0 , a [ 1004005 ] ;  $ ~cin >> n ;  $ ~for ( i = 0 ; i < n ; i ++ ) {  $ ~~cin >> a [ i ] ;  $ ~~if ( a [ i ] == 1 ) k1 ++ ;  $ ~~if ( a [ i ] == 2 ) k2 ++ ;  $ ~~if ( a [ i ] == 3 ) k3 ++ ;  $ ~}  $ ~cout << min ( min ( k1 + k2 , k1 + k3 ) , k2 + k3 ) << endl ;  $ ~return 0 ;  $ }
long long arr [ 500000 ] ;  $ int main ( ) {  $ ~long long n , l , r , ql , qr ;  $ ~cin >> n >> l >> r >> ql >> qr ;  $ ~for ( long long i = 1 ; i <= n ; i ++ ) {  $ ~~long long x ;  $ ~~cin >> x ;  $ ~~arr [ i ] = x ;  $ ~}  $ ~vector < long long > lft , rgt ;  $ ~lft . push_back ( 0 ) ;  $ ~rgt . push_back ( 0 ) ;  $ ~for ( long long i = 1 ; i <= n ; i ++ ) {  $ ~~long long x = arr [ i ] * l ;  $ ~~lft . push_back ( lft [ lft . size ( ) - 1 ] + x ) ;  $ ~}  $ ~for ( long long i = n ; i >= 1 ; i -- ) {  $ ~~long long x = arr [ i ] * r ;  $ ~~rgt . push_back ( rgt [ rgt . size ( ) - 1 ] + x ) ;  $ ~}  $ ~long long ans = 1000000000 ;  $ ~for ( long long i = 0 ; i <= n ; i ++ ) {  $ ~~long long penalty = abs ( i - ( n - i ) ) ;  $ ~~penalty = max ( penalty - 1 LL , 0 LL ) ;  $ ~~long long keep = ( lft [ i ] + rgt [ n - i ] ) ;  $ ~~if ( i > ( n - i ) ) {  $ ~~~keep += ( penalty ) * ql ;  $ ~~} else  $ ~~~keep += penalty * qr ;  $ ~~ans = min ( ans , keep ) ;  $ ~}  $ ~cout << ans << endl ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~int n , x ;  $ ~cin >> n ;  $ ~for ( int i = 0 ; i < n ; ++ i ) {  $ ~~cin >> x ;  $ ~~cout << ( 360 % ( 180 - x ) == 0 ? "YES" : "NO" ) << endl ;  $ ~}  $ ~return 0 ;  $ }
int main ( ) {  $ ~int n ;  $ ~cin >> n ;  $ ~if ( 2 == n ) {  $ ~~cout << 2 << endl ;  $ ~} else {  $ ~~cout << 1 << endl ;  $ ~}  $ ~return 0 ;  $ }
int main ( ) {  $ ~long long x1 , y1 , x2 , y2 ;  $ ~cin >> x1 >> y1 >> x2 >> y2 ;  $ ~long long Q = 1 ;  $ ~long long x1p = x2 - x1 ;  $ ~long long y1p = y2 - y1 ;  $ ~for ( int i = 0 ; i < Q ; ++ i ) {  $ ~~long long qx1 , qy1 ;  $ ~~cin >> qx1 >> qy1 ;  $ ~~long long dx = qx1 - x1 ;  $ ~~long long dy = qy1 - y1 ;  $ ~~long long res = x1p * dy - dx * y1p ;  $ ~~if ( res > 0 )  $ ~~~cout << "LEFT\n" ;  $ ~~else if ( res == 0 )  $ ~~~cout << "TOWARDS\n" ;  $ ~~else if ( res < 0 )  $ ~~~cout << "RIGHT\n" ;  $ ~}  $ ~return 0 ;  $ }
int main ( ) {  $ ~int n ;  $ ~cin >> n ;  $ ~int sum1 = 0 , sum2 = 0 ;  $ ~for ( int t = 0 ; t < n ; t ++ ) {  $ ~~int x , y ;  $ ~~cin >> x >> y ;  $ ~~if ( x > 0 ) { sum1 ++ ; }  $ ~~if ( x < 0 ) { sum2 ++ ; }  $ ~}  $ ~if ( n == 1 ) {  $ ~~cout << "Yes" << endl ;  $ ~~return 0 ;  $ ~}  $ ~if ( ( sum1 <= 1 && sum2 >= 1 ) || ( sum1 >= 1 && sum2 <= 1 ) ) {  $ ~~cout << "Yes" << endl ;  $ ~} else {  $ ~~cout << "No" << endl ;  $ ~}  $ ~return 0 ;  $ }
map < pair < long long , long long > , long long > ma ;  $ map < pair < long long , long long > , long long > : : iterator it ;  $ int q , t ;  $ long long x , y , z , temp ;  $ long long ans ;  $ int main ( ) {  $ ~cin >> q ;  $ ~while ( q -- ) {  $ ~~cin >> t ;  $ ~~if ( t == 1 ) {  $ ~~~cin >> z >> y >> x ;  $ ~~~while ( z != y )  $ ~~~~if ( z < y )  $ ~~~~~temp = y , y >> = 1 , ma [ make_pair ( temp , y ) ] += x ;  $ ~~~~else  $ ~~~~~temp = z , z >> = 1 , ma [ make_pair ( temp , z ) ] += x ;  $ ~~} else {  $ ~~~cin >> z >> y ;  $ ~~~ans = 0 ;  $ ~~~while ( z != y )  $ ~~~~if ( z < y ) {  $ ~~~~~temp = y ;  $ ~~~~~y >> = 1 ;  $ ~~~~~it = ma . find ( make_pair ( temp , y ) ) ;  $ ~~~~~if ( it != ma . end ( ) ) ans += it -> second ;  $ ~~~~} else {  $ ~~~~~temp = z ;  $ ~~~~~z >> = 1 ;  $ ~~~~~it = ma . find ( make_pair ( temp , z ) ) ;  $ ~~~~~if ( it != ma . end ( ) ) ans += it -> second ;  $ ~~~~}  $ ~~~cout << ans << endl ;  $ ~~}  $ ~}  $ ~return 0 ;  $ }
int main ( ) {  $ ~int n , i ;  $ ~cin >> n ;  $ ~if ( n <= 10 || n >= 22 )  $ ~~cout << '0' << endl ;  $ ~else if ( n == 20 )  $ ~~cout << "15" << endl ;  $ ~else  $ ~~cout << '4' << endl ;  $ ~return 0 ;  $ }
enum { C , CS , D , DS , E , F , FS , G , GS , A , B , H } ;  $ int FazInt ( const string & s ) {  $ ~if ( s == "C" ) return C ;  $ ~if ( s == "C#" ) return CS ;  $ ~if ( s == "D" ) return D ;  $ ~if ( s == "D#" ) return DS ;  $ ~if ( s == "E" ) return E ;  $ ~if ( s == "F" ) return F ;  $ ~if ( s == "F#" ) return FS ;  $ ~if ( s == "G" ) return G ;  $ ~if ( s == "G#" ) return GS ;  $ ~if ( s == "A" ) return A ;  $ ~if ( s == "B" ) return B ;  $ ~if ( s == "H" ) return H ;  $ }  $ int Dist ( const int & a , const int & b ) {  $ ~if ( b < a ) return 12 + ( b - a ) ;  $ ~return b - a ;  $ }  $ bool IsMajor ( const int & a , const int & b , const int & c ) {  $ ~return ( Dist ( a , b ) == 4 && Dist ( b , c ) == 3 ) ;  $ }  $ bool IsMinor ( const int & a , const int & b , const int & c ) {  $ ~return ( Dist ( a , b ) == 3 && Dist ( b , c ) == 4 ) ;  $ }  $ int main ( ) {  $ ~string s ;  $ ~int notes [ 3 ] ;  $ ~for ( int i = 0 ; i < 3 ; i ++ ) {  $ ~~cin >> s ;  $ ~~notes [ i ] = FazInt ( s ) ;  $ ~}  $ ~for ( int i = 0 ; i < 6 ; i ++ ) {  $ ~~if ( IsMajor ( notes [ 0 ] , notes [ 1 ] , notes [ 2 ] ) ) {  $ ~~~cout << "major\n" ;  $ ~~~return 0 ;  $ ~~}  $ ~~if ( IsMinor ( notes [ 0 ] , notes [ 1 ] , notes [ 2 ] ) ) {  $ ~~~cout << "minor\n" ;  $ ~~~return 0 ;  $ ~~}  $ ~~next_permutation ( & notes [ 0 ] , & notes [ 3 ] ) ;  $ ~}  $ ~cout << "strange\n" ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~int n1 , n2 , k1 , k2 ;  $ ~cin >> n1 >> n2 >> k1 >> k2 ;  $ ~if ( n1 > n2 ) {  $ ~~cout << "First\n" ;  $ ~} else {  $ ~~cout << "Second\n" ;  $ ~}  $ }
int main ( ) {  $ ~int t , s , x , i ;  $ ~cin >> t >> s >> x ;  $ ~if ( x >= t && ( x - t ) % s == 0 || x > t + 1 && ( x - t - 1 ) % s == 0 ) {  $ ~~cout << "YES" << endl ;  $ ~} else {  $ ~~cout << "NO" << endl ;  $ ~}  $ }
int n , ans , h [ 101 ] , l [ 101 ] ;  $ int main ( ) {  $ ~cin >> n ;  $ ~for ( int i = 1 ; i <= n ; i ++ )  $ ~~for ( int j = 1 ; j <= n ; j ++ ) {  $ ~~~char c ;  $ ~~~cin >> c ;  $ ~~~if ( c == 'C' ) ans += h [ i ] ++ , ans += l [ j ] ++ ;  $ ~~}  $ ~cout << ans << endl ;  $ }
int main ( ) {  $ ~int n , i , j , x = 0 , z = 0 , y = 0 , s = 99999 , p = 0 , q = 0 , r = 0 ;  $ ~cin >> n ;  $ ~int a [ n ] , a1 [ n ] , a2 [ n ] , a3 [ n ] ;  $ ~for ( i = 0 ; i < n ; i ++ ) { cin >> a [ i ] ; }  $ ~for ( i = 0 ; i < n ; i ++ ) {  $ ~~if ( a [ i ] == 1 ) {  $ ~~~x ++ ;  $ ~~~a1 [ p ] = i + 1 ;  $ ~~~p ++ ;  $ ~~} else if ( a [ i ] == 2 ) {  $ ~~~y ++ ;  $ ~~~a2 [ q ] = i + 1 ;  $ ~~~q ++ ;  $ ~~} else {  $ ~~~z ++ ;  $ ~~~a3 [ r ] = i + 1 ;  $ ~~~r ++ ;  $ ~~}  $ ~}  $ ~if ( x < s ) s = x ;  $ ~if ( y < s ) s = y ;  $ ~if ( z < s ) s = z ;  $ ~cout << s << endl ;  $ ~for ( int b = 0 ; b < s ; b ++ ) { cout << a1 [ b ] << " " << a2 [ b ] << " " << a3 [ b ] << endl ; }  $ }
int main ( ) {  $ ~int q ;  $ ~cin >> q ;  $ ~while ( q -- ) {  $ ~~int a ;  $ ~~cin >> a ;  $ ~~if ( ( 360 % ( 180 - a ) ) == 0 ) {  $ ~~~cout << "YES" << endl ;  $ ~~} else {  $ ~~~cout << "NO" << endl ;  $ ~~}  $ ~}  $ ~return 0 ;  $ }
int main ( ) {  $ ~vector < int > v ;  $ ~int t , k ;  $ ~cin >> t ;  $ ~for ( int i = 0 ; i < t ; i ++ ) {  $ ~~cin >> k ;  $ ~~v . push_back ( k ) ;  $ ~}  $ ~k = v [ 0 ] ;  $ ~int l = v . size ( ) ;  $ ~if ( l == 1 && v [ 0 ] != 15 && v [ 0 ] != 0 ) {  $ ~~cout << "-1\n" ;  $ ~~return 0 ;  $ ~}  $ ~if ( v [ l - 1 ] == 15 ) {  $ ~~cout << "DOWN\n" ;  $ ~~return 0 ;  $ ~}  $ ~if ( v [ l - 1 ] == 0 ) {  $ ~~cout << "UP\n" ;  $ ~~return 0 ;  $ ~}  $ ~if ( v [ l - 1 ] + 1 == v [ l - 2 ] )  $ ~~cout << "DOWN\n" ;  $ ~else  $ ~~cout << "UP\n" ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~int n , m , s = 0 , i , x , y ;  $ ~cin >> x >> n >> m ;  $ ~s = n * 60 + m ;  $ ~for ( i = 0 ; ; i ++ ) {  $ ~~y = s % 60 ;  $ ~~int h = s / 60 ;  $ ~~if ( h / 10 == 7 || h % 10 == 7 || y / 10 == 7 || y % 10 == 7 ) {  $ ~~~cout << i << endl ;  $ ~~~return 0 ;  $ ~~}  $ ~~s = ( s - x + 1440 ) % 1440 ;  $ ~}  $ ~return 0 ;  $ }
int main ( ) {  $ ~int n , t [ 101 ] ;  $ ~while ( cin >> n ) {  $ ~~for ( int i = 0 ; i < n ; ++ i ) cin >> t [ i ] ;  $ ~~sort ( t , t + n ) ;  $ ~~cout << t [ n - 1 ] ;  $ ~~for ( int i = 1 ; i < n - 1 ; ++ i ) cout << " " << t [ i ] ;  $ ~~cout << " " << t [ 0 ] << endl ;  $ ~}  $ }
int main ( ) {  $ ~long long n , m , k ;  $ ~cin >> n >> m >> k ;  $ ~vector < long long > v ;  $ ~for ( long long i = 0 ; i < n ; i ++ ) {  $ ~~long long x ;  $ ~~cin >> x ;  $ ~~v . push_back ( x ) ;  $ ~}  $ ~sort ( v . rbegin ( ) , v . rend ( ) ) ;  $ ~if ( m <= k ) {  $ ~~cout << 0 << endl ;  $ ~} else {  $ ~~long long keep = k ;  $ ~~for ( long long i = 0 ; i < v . size ( ) ; i ++ ) {  $ ~~~keep += v [ i ] ;  $ ~~~keep -- ;  $ ~~~if ( keep >= m ) {  $ ~~~~cout << i + 1 << endl ;  $ ~~~~return 0 ;  $ ~~~}  $ ~~}  $ ~~cout << - 1 << endl ;  $ ~}  $ ~return 0 ;  $ }
int main ( ) {  $ ~int n ;  $ ~cin >> n ;  $ ~int j = n + 1 ;  $ ~int ans = max ( 1 , ( int ) ( n * sqrt ( 2 ) ) * 4 ) ;  $ ~cout << ans << endl ;  $ ~return 0 ;  $ }
const int inf = 1000000000 ;  $ const int MOD = 1000000007 ;  $ int dp [ 1000001 ] , sum [ 1000001 ] ;  $ int main ( ) {  $ ~int n ;  $ ~cin >> n ;  $ ~int odd = 0 , even = 0 , ans = 1 ;  $ ~dp [ 1 ] = 1 ;  $ ~odd = 1 ;  $ ~even = 0 ;  $ ~for ( int i = 2 ; i <= n ; ++ i ) {  $ ~~dp [ i ] = 1 + i / 2 ;  $ ~~if ( i % 2 == 0 )  $ ~~~dp [ i ] = ( dp [ i ] + even ) % MOD ;  $ ~~else  $ ~~~dp [ i ] = ( dp [ i ] + odd ) % MOD ;  $ ~~dp [ i ] = ( dp [ i ] + dp [ i - 2 ] ) % MOD ;  $ ~~if ( i % 2 == 0 )  $ ~~~even = ( even + dp [ i ] ) % MOD ;  $ ~~else  $ ~~~odd = ( odd + dp [ i ] ) % MOD ;  $ ~~ans = ( 0 LL + ans + dp [ i ] - ( dp [ i - 2 ] ) + MOD ) % MOD ;  $ ~}  $ ~cout << ans << endl ;  $ }
char str [ 8 ] , str1 [ 20 ] ;  $ int flag , ans [ 10 ] ;  $ int main ( ) {  $ ~for ( int i = 0 ; i < 8 ; i ++ ) {  $ ~~cin >> str ;  $ ~~for ( int j = 0 ; j < 8 ; j ++ ) { str1 [ j ] = str [ j ] , str [ j + 8 ] = str [ j ] ; }  $ ~~for ( int k = 0 ; k < 8 ; k ++ ) {  $ ~~~for ( int p = k ; p < k + 7 ; p ++ ) {  $ ~~~~if ( str1 [ p ] != str [ p + 1 ] ) { flag ++ ; }  $ ~~~}  $ ~~~if ( flag == 7 ) {  $ ~~~~ans [ i ] = 1 ;  $ ~~~~flag = 0 ;  $ ~~~~continue ;  $ ~~~}  $ ~~}  $ ~}  $ ~for ( int y = 0 ; y < 8 ; y ++ ) {  $ ~~if ( ans [ y ] != 1 ) {  $ ~~~cout << "NO" << endl ;  $ ~~~return 0 ;  $ ~~}  $ ~}  $ ~cout << "YES" << endl ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~long long n , d , i ;  $ ~cin >> n >> d ;  $ ~long long a [ n ] , count = 0 , m = 10001 ;  $ ~for ( i = 0 ; i < n ; i ++ ) { cin >> a [ i ] ; }  $ ~sort ( a , a + n ) ;  $ ~long long index1 , j , index2 ;  $ ~for ( i = 0 ; i < n ; i ++ ) {  $ ~~count = 0 ;  $ ~~for ( j = n - 1 ; j > i ; j -- ) {  $ ~~~if ( abs ( a [ j ] - a [ i ] ) > d ) { count ++ ; }  $ ~~}  $ ~~m = min ( count + i , m ) ;  $ ~}  $ ~cout << m << endl ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~long long int i , n ;  $ ~cin >> n ;  $ ~if ( n == 1 )  $ ~~cout << 1 << endl ;  $ ~else if ( n == 2 )  $ ~~cout << 2 << endl ;  $ ~else  $ ~~cout << 1 << endl ;  $ }
int main ( ) {  $ ~int a , b , c , d , i = 0 , j = 0 ;  $ ~cin >> a >> b >> c >> d ;  $ ~while ( i < 10000 ) {  $ ~~i ++ ;  $ ~~if ( d > b ) {  $ ~~~b += a ;  $ ~~} else if ( d < b ) {  $ ~~~d += c ;  $ ~~} else if ( d == b ) {  $ ~~~cout << d << endl ;  $ ~~~return 0 ;  $ ~~} else {  $ ~~~break ;  $ ~~}  $ ~}  $ ~cout << "-1" << endl ;  $ ~return 0 ;  $ }
int nn [ 100 ] ;  $ int main ( ) {  $ ~int n ;  $ ~cin >> n ;  $ ~int ans = 1 ;  $ ~int x , y , num = 1 ;  $ ~cin >> x ;  $ ~for ( int i = 1 ; i < n ; i ++ ) {  $ ~~cin >> y ;  $ ~~if ( y >= x ) {  $ ~~~num ++ ;  $ ~~~ans = max ( ans , num ) ;  $ ~~~x = y ;  $ ~~} else {  $ ~~~num = 1 ;  $ ~~~x = y ;  $ ~~}  $ ~}  $ ~cout << ans << endl ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~int n ;  $ ~cin >> n ;  $ ~int faces = 0 ;  $ ~while ( n -- ) {  $ ~~string s ;  $ ~~cin >> s ;  $ ~~if ( s == "Cube" )  $ ~~~faces += 6 ;  $ ~~else if ( s == "Tetrahedron" )  $ ~~~faces += 4 ;  $ ~~else if ( s == "Octahedron" )  $ ~~~faces += 8 ;  $ ~~else if ( s == "Dodecahedron" )  $ ~~~faces += 12 ;  $ ~~else  $ ~~~faces += 20 ;  $ ~}  $ ~cout << faces << endl ;  $ }
int main ( ) {  $ ~char s [ 100005 ] ;  $ ~int j = 0 ;  $ ~gets ( s ) ;  $ ~while ( s [ j ] == 'a' ) j ++ ;  $ ~if ( s [ j ] == '\0' ) {  $ ~~s [ j - 1 ] = 'z' ;  $ ~~puts ( s ) ;  $ ~~return 0 ;  $ ~}  $ ~for ( int i = j ; s [ i ] != 'a' && s [ i ] != '\0' ; i ++ ) s [ i ] -- ;  $ ~puts ( s ) ;  $ ~return 0 ;  $ }
long long gcd ( long long a , long b ) {  $ ~if ( b == 0 )  $ ~~return a ;  $ ~else  $ ~~return gcd ( b , a % b ) ;  $ }  $ int main ( ) {  $ ~long long a , b ;  $ ~cin >> a >> b ;  $ ~long long hcf ;  $ ~if ( a > b )  $ ~~hcf = gcd ( a , b ) ;  $ ~else  $ ~~hcf = gcd ( b , a ) ;  $ ~long long product = a * b ;  $ ~long long lcm = product / hcf ;  $ ~long long a1 = lcm / a ;  $ ~long long b1 = lcm / b ;  $ ~if ( abs ( a1 - b1 ) == 1 )  $ ~~cout << "Equal" << endl ;  $ ~else if ( a1 - b1 > 1 )  $ ~~cout << "Dasha" << endl ;  $ ~else  $ ~~cout << "Masha" << endl ;  $ ~return 0 ;  $ }
int isprime ( long long x ) {  $ ~long long fact = 0 ;  $ ~for ( long long i = 2 ; i <= sqrt ( x ) ; i ++ ) {  $ ~~if ( x % i == 0 ) {  $ ~~~fact ++ ;  $ ~~~break ;  $ ~~}  $ ~}  $ ~if ( fact == 0 )  $ ~~return 1 ;  $ ~else  $ ~~return 0 ;  $ }  $ int main ( ) {  $ ~long long t ;  $ ~cin >> t ;  $ ~for ( long long i = 1 ; i <= 1000 ; i ++ ) {  $ ~~if ( isprime ( t * i + 1 ) == 0 ) {  $ ~~~cout << i << endl ;  $ ~~~break ;  $ ~~}  $ ~}  $ }
int main ( ) {  $ ~int v ;  $ ~cin >> v ;  $ ~if ( v != 2 ) {  $ ~~cout << "1" << endl ;  $ ~} else {  $ ~~cout << "2" << endl ;  $ ~}  $ ~return 0 ;  $ }
int main ( ) {  $ ~int t ;  $ ~int x , y ;  $ ~int c = 0 ;  $ ~cin >> t ;  $ ~for ( int i = 0 ; i < t ; i ++ ) {  $ ~~cin >> x >> y ;  $ ~~if ( y - x >= 2 ) c ++ ;  $ ~}  $ ~cout << c << endl ;  $ ~return 0 ;  $ }
int ar [ 1005 ] [ 1005 ] ;  $ int main ( ) {  $ ~int n , m , k , x , y ;  $ ~cin >> n >> m >> k ;  $ ~for ( int i = 0 ; i < k ; i ++ ) {  $ ~~cin >> x >> y ;  $ ~~ar [ x ] [ y ] = 1 ;  $ ~~if ( ar [ x - 1 ] [ y ] && ar [ x ] [ y - 1 ] && ar [ x - 1 ] [ y - 1 ] ) {  $ ~~~cout << i + 1 << endl ;  $ ~~~return 0 ;  $ ~~} else if ( ar [ x - 1 ] [ y ] && ar [ x ] [ y + 1 ] && ar [ x - 1 ] [ y + 1 ] ) {  $ ~~~cout << i + 1 << endl ;  $ ~~~return 0 ;  $ ~~} else if ( ar [ x + 1 ] [ y ] && ar [ x ] [ y - 1 ] && ar [ x + 1 ] [ y - 1 ] ) {  $ ~~~cout << i + 1 << endl ;  $ ~~~return 0 ;  $ ~~} else if ( ar [ x + 1 ] [ y ] && ar [ x ] [ y + 1 ] && ar [ x + 1 ] [ y + 1 ] ) {  $ ~~~cout << i + 1 << endl ;  $ ~~~return 0 ;  $ ~~}  $ ~}  $ ~cout << 0 << endl ;  $ }
int main ( ) {  $ ~int n ;  $ ~cin >> n ;  $ ~for ( int j = 0 ; j < n ; j ++ ) {  $ ~~double a ;  $ ~~cin >> a ;  $ ~~bool y = false ;  $ ~~double h = ( ( 360 ) / ( 180 - a ) ) ;  $ ~~if ( h == ( int ) h ) {  $ ~~~cout << "YES" << endl ;  $ ~~} else {  $ ~~~cout << "NO" << endl ;  $ ~~}  $ ~}  $ ~return 0 ;  $ }
int main ( ) {  $ ~int arr [ 26 ] = { } , temp [ 26 ] = { } , n , val = 0 , ans = 0 , v , u , av = 0 , red = 0 ;  $ ~char ch [ 100001 ] , au , ansa ;  $ ~cin >> n ;  $ ~for ( int i = 0 ; i < n ; i ++ ) {  $ ~~cin >> au >> ch ;  $ ~~if ( red < 25 ) {  $ ~~~if ( au == '.' ) {  $ ~~~~v = strlen ( ch ) ;  $ ~~~~for ( int j = 0 ; j < v ; j ++ ) {  $ ~~~~~u = ( int ) ch [ j ] - 'a' ;  $ ~~~~~if ( arr [ u ] == 1 || arr [ u ] == 0 ) {  $ ~~~~~~arr [ u ] = - 1 ;  $ ~~~~~~red ++ ;  $ ~~~~~}  $ ~~~~}  $ ~~~} else if ( au == '!' ) {  $ ~~~~v = strlen ( ch ) ;  $ ~~~~if ( av == 0 ) {  $ ~~~~~for ( int j = 0 ; j < v ; j ++ ) {  $ ~~~~~~u = ( int ) ch [ j ] - 'a' ;  $ ~~~~~~if ( arr [ u ] == 0 ) { arr [ u ] = 1 ; }  $ ~~~~~}  $ ~~~~~for ( int k = 0 ; k < 26 ; k ++ ) {  $ ~~~~~~if ( arr [ k ] == 0 ) {  $ ~~~~~~~arr [ k ] = - 1 ;  $ ~~~~~~~red ++ ;  $ ~~~~~~}  $ ~~~~~}  $ ~~~~~av ++ ;  $ ~~~~} else {  $ ~~~~~for ( int k = 0 ; k < 26 ; k ++ ) temp [ k ] = 0 ;  $ ~~~~~for ( int k = 0 ; k < v ; k ++ ) {  $ ~~~~~~u = ( int ) ch [ k ] - 'a' ;  $ ~~~~~~temp [ u ] = 1 ;  $ ~~~~~}  $ ~~~~~for ( int k = 0 ; k < 26 ; k ++ ) {  $ ~~~~~~if ( arr [ k ] == 1 && temp [ k ] == 0 ) {  $ ~~~~~~~arr [ k ] = - 1 ;  $ ~~~~~~~red ++ ;  $ ~~~~~~}  $ ~~~~~}  $ ~~~~}  $ ~~~} else {  $ ~~~~u = ( int ) ch [ 0 ] - 'a' ;  $ ~~~~if ( arr [ u ] == 1 || arr [ u ] == 0 ) {  $ ~~~~~arr [ u ] = - 1 ;  $ ~~~~~red ++ ;  $ ~~~~}  $ ~~~}  $ ~~~if ( red == 25 ) {  $ ~~~~for ( int k = 0 ; k < 26 ; k ++ )  $ ~~~~~if ( arr [ k ] != - 1 ) ansa = ( char ) 97 + k ;  $ ~~~}  $ ~~} else if ( au == '!' || ( au == '?' && ch [ 0 ] != ansa ) )  $ ~~~ans ++ ;  $ ~}  $ ~cout << ans << endl ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~int c = 0 , c1 = 0 ;  $ ~string s ;  $ ~cin >> s ;  $ ~int l = s . length ( ) ;  $ ~for ( int i = 0 ; i < l ; i ++ ) {  $ ~~if ( s [ i ] == static_cast < char > ( toupper ( s [ i ] ) ) ) {  $ ~~~c ++ ;  $ ~~} else {  $ ~~~c1 ++ ;  $ ~~}  $ ~}  $ ~if ( c > c1 )  $ ~~for ( int i = 0 ; i < l ; i ++ ) { s [ i ] = toupper ( s [ i ] ) ; }  $ ~if ( c1 > c )  $ ~~for ( int i = 0 ; i < l ; i ++ ) { s [ i ] = tolower ( s [ i ] ) ; }  $ ~if ( c1 == c )  $ ~~for ( int i = 0 ; i < l ; i ++ ) { s [ i ] = tolower ( s [ i ] ) ; }  $ ~cout << s << endl ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~int n , k ;  $ ~cin >> n >> k ;  $ ~int c = 0 ;  $ ~for ( int i = 0 ; i < n ; i ++ ) {  $ ~~int a , s = 0 ;  $ ~~cin >> a ;  $ ~~while ( a != 0 ) {  $ ~~~if ( a % 10 == 7 || a % 10 == 4 ) s ++ ;  $ ~~~a /= 10 ;  $ ~~}  $ ~~if ( s <= k ) c ++ ;  $ ~}  $ ~cout << c << endl ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~int n ;  $ ~string s ;  $ ~cin >> n >> s ;  $ ~if ( n == 1 ) {  $ ~~cout << "NO" << endl ;  $ ~~return 0 ;  $ ~}  $ ~for ( int i = 0 ; i < n - 1 ; i ++ ) {  $ ~~if ( s [ i ] != s [ i + 1 ] ) {  $ ~~~cout << "YES" << endl ;  $ ~~~cout << s [ i ] << s [ i + 1 ] << endl ;  $ ~~~return 0 ;  $ ~~}  $ ~}  $ ~cout << "NO" << endl ;  $ }
int main ( ) {  $ ~int n , min1 , min2 , min3 , max1 , max2 , max3 ;  $ ~while ( cin >> n >> min1 >> max1 >> min2 >> max2 >> min3 >> max3 ) {  $ ~~n = n - ( min1 + min2 + min3 ) ;  $ ~~if ( n <= max1 - min1 )  $ ~~~min1 += n ;  $ ~~else {  $ ~~~n = n - ( max1 - min1 ) ;  $ ~~~min1 = max1 ;  $ ~~~if ( n <= max2 - min2 )  $ ~~~~min2 += n ;  $ ~~~else {  $ ~~~~n = n - ( max2 - min2 ) ;  $ ~~~~min2 = max2 ;  $ ~~~~min3 += n ;  $ ~~~}  $ ~~}  $ ~~cout << min1 << " " << min2 << " " << min3 << endl ;  $ ~}  $ ~return 0 ;  $ }
int main ( ) {  $ ~int n , i , no_of_8 = 0 , groups ;  $ ~char c ;  $ ~cin >> n ;  $ ~for ( i = 1 ; i <= n ; i ++ ) {  $ ~~cin >> c ;  $ ~~if ( c == '8' ) no_of_8 ++ ;  $ ~}  $ ~groups = n / 11 ;  $ ~if ( no_of_8 >= groups )  $ ~~cout << groups << endl ;  $ ~else  $ ~~cout << no_of_8 << endl ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~long long int n ;  $ ~cin >> n ;  $ ~long long int sum = 0 ;  $ ~sum = ( n / 2 ) * ( n / 2 + 1 ) ;  $ ~sum = sum - ( ( n - n / 2 ) * ( n - n / 2 ) ) ;  $ ~cout << sum << endl ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~int n ;  $ ~cin >> n ;  $ ~int a [ n ] , b [ 4 ] = { 0 } , c [ n ] , d [ n ] , e [ n ] , l = 0 , m = 0 , o = 0 ;  $ ~for ( int i = 0 ; i < n ; i ++ ) {  $ ~~cin >> a [ i ] ;  $ ~~b [ a [ i ] ] ++ ;  $ ~~if ( a [ i ] == 1 ) {  $ ~~~c [ l ] = i + 1 ;  $ ~~~l ++ ;  $ ~~} else if ( a [ i ] == 2 ) {  $ ~~~d [ m ] = i + 1 ;  $ ~~~m ++ ;  $ ~~} else {  $ ~~~e [ o ] = i + 1 ;  $ ~~~o ++ ;  $ ~~}  $ ~}  $ ~sort ( b , b + 4 ) ;  $ ~int w = b [ 1 ] ;  $ ~cout << w << endl ;  $ ~for ( int i = 0 ; i < w ; i ++ ) { cout << c [ i ] << " " << d [ i ] << " " << e [ i ] << endl ; }  $ }
char s [ 1000000 ] ;  $ int n , m , k , l , a , b , c , tag [ 30 ] , def = 0 , emp = 0 , num = 0 ;  $ int main ( ) {  $ ~cin >> s >> k ;  $ ~if ( k > strlen ( s ) || k > 26 ) {  $ ~~cout << "impossible" << endl ;  $ ~~return 0 ;  $ ~}  $ ~for ( int i = 0 ; i < strlen ( s ) ; i ++ ) {  $ ~~tag [ s [ i ] - 'a' ] ++ ;  $ ~~if ( tag [ s [ i ] - 'a' ] == 1 ) def ++ ;  $ ~}  $ ~if ( def >= k ) {  $ ~~cout << "0" << endl ;  $ ~~return 0 ;  $ ~}  $ ~for ( int i = 0 ; i <= 25 ; i ++ ) {  $ ~~if ( tag [ i ] > 1 ) num += tag [ i ] - 1 ;  $ ~~if ( ! tag [ i ] ) emp ++ ;  $ ~}  $ ~if ( num + def < k ) {  $ ~~cout << "impossible" << endl ;  $ ~~return 0 ;  $ ~} else {  $ ~~cout << k - def << endl ;  $ ~}  $ ~return 0 ;  $ }
int n , k ;  $ string s ;  $ int main ( ) {  $ ~cin >> n >> k >> s ;  $ ~int idx = 0 ;  $ ~for ( int i = 0 ; i < s . size ( ) ; i ++ )  $ ~~if ( s [ i ] == 'G' ) idx = i ;  $ ~for ( int i = idx ; i < s . size ( ) ; i += k ) {  $ ~~if ( s [ i ] == '#' )  $ ~~~break ;  $ ~~else if ( s [ i ] == 'T' ) {  $ ~~~cout << "YES\n" ;  $ ~~~return 0 ;  $ ~~}  $ ~}  $ ~for ( int i = idx ; i >= 0 ; i -= k ) {  $ ~~if ( s [ i ] == '#' )  $ ~~~break ;  $ ~~else if ( s [ i ] == 'T' ) {  $ ~~~cout << "YES\n" ;  $ ~~~return 0 ;  $ ~~}  $ ~}  $ ~cout << "NO\n" ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~int n , x , cnt [ 6 ] = { 0 } , res = 0 ;  $ ~cin >> n ;  $ ~for ( int i = 1 ; i <= n ; i ++ ) {  $ ~~cin >> x ;  $ ~~cnt [ x ] ++ ;  $ ~}  $ ~for ( int i = 1 ; i <= n ; i ++ ) {  $ ~~cin >> x ;  $ ~~cnt [ x ] -- ;  $ ~}  $ ~for ( int i = 1 ; i <= 5 ; i ++ ) {  $ ~~if ( cnt [ i ] & 1 ) {  $ ~~~cout << "-1"  $ ~~~~<< "\n" ;  $ ~~~return 0 ;  $ ~~}  $ ~~res += abs ( cnt [ i ] ) ;  $ ~}  $ ~cout << res / 4 << "\n" ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~int n ;  $ ~cin >> n ;  $ ~int p [ 3 ] = { 1 , 2 , 3 } ;  $ ~for ( int i = 0 ; i < n ; i ++ ) {  $ ~~int x ;  $ ~~int ind ;  $ ~~int c = 0 ;  $ ~~cin >> x ;  $ ~~for ( int i = 0 ; i < 2 ; i ++ ) {  $ ~~~if ( x == p [ i ] ) {  $ ~~~~c = 1 ;  $ ~~~~ind = i ;  $ ~~~~break ;  $ ~~~}  $ ~~}  $ ~~if ( c ) {  $ ~~~if ( ind == 1 ) {  $ ~~~~swap ( p [ 0 ] , p [ 2 ] ) ;  $ ~~~} else {  $ ~~~~swap ( p [ 1 ] , p [ 2 ] ) ;  $ ~~~}  $ ~~} else {  $ ~~~cout << "NO" << '\n' ;  $ ~~~return 0 ;  $ ~~}  $ ~}  $ ~cout << "YES" << '\n' ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~int a ;  $ ~cin >> a ;  $ ~if ( a % 2 == 1 )  $ ~~cout << "1" << endl ;  $ ~else if ( a % 2 == 0 )  $ ~~cout << "0" << endl ;  $ ~return 0 ;  $ }
int a , b ;  $ int main ( ) {  $ ~cin >> a >> b ;  $ ~cout << min ( a , b ) << " " << ( max ( a , b ) - min ( a , b ) ) / 2 << endl ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~int n , mx = 0 ;  $ ~cin >> n ;  $ ~int ara [ n ] ;  $ ~for ( int i = 0 ; i < n ; i ++ ) {  $ ~~cin >> ara [ i ] ;  $ ~~if ( ara [ i ] > mx ) mx = ara [ i ] ;  $ ~}  $ ~int gcd = ara [ 0 ] ;  $ ~for ( int i = 1 ; i < n ; i ++ ) { gcd = __gcd ( ara [ i ] , gcd ) ; }  $ ~int ans = mx / gcd ;  $ ~ans = abs ( ans - n ) ;  $ ~if ( ans % 2 )  $ ~~cout << "Alice" << endl ;  $ ~else  $ ~~cout << "Bob" << endl ;  $ }
const int INF = ( int ) 2e9 ;  $ const double EPS = ( double ) 1e-9 ;  $ const double PI = ( double ) acos ( - 1.0 ) ;  $ const long long MOD = ( long long ) 1e9 + 7 ;  $ int main ( ) {  $ ~long long x , y , z , k ;  $ ~cin >> x >> y >> z >> k ;  $ ~long long arr [ 3 ] ;  $ ~arr [ 0 ] = x - 1 ;  $ ~arr [ 1 ] = y - 1 ;  $ ~arr [ 2 ] = z - 1 ;  $ ~sort ( arr , arr + 3 ) ;  $ ~long long mn = arr [ 0 ] ;  $ ~long long ans [ 3 ] ;  $ ~if ( mn * 3 >= k ) {  $ ~~ans [ 0 ] = k / 3 ;  $ ~~ans [ 1 ] = k / 3 ;  $ ~~ans [ 2 ] = k / 3 ;  $ ~~if ( k % 3 == 1 ) {  $ ~~~ans [ 2 ] ++ ;  $ ~~} else if ( k % 3 == 2 ) {  $ ~~~ans [ 2 ] ++ ;  $ ~~~ans [ 1 ] ++ ;  $ ~~}  $ ~} else {  $ ~~ans [ 0 ] = mn ;  $ ~~ans [ 1 ] = mn ;  $ ~~ans [ 2 ] = mn ;  $ ~~long long now = k - ( 3 * mn ) ;  $ ~~long long mn2 = min ( now / 2 , arr [ 1 ] - ans [ 1 ] ) ;  $ ~~ans [ 1 ] += min ( now / 2 , arr [ 1 ] - ans [ 1 ] ) ;  $ ~~now -= mn2 ;  $ ~~mn2 = min ( now , arr [ 2 ] - ans [ 2 ] ) ;  $ ~~ans [ 2 ] += mn2 ;  $ ~}  $ ~long long res = 1 ;  $ ~for ( int i = 0 ; i < 3 ; i ++ ) { res *= ( ans [ i ] + 1 ) ; }  $ ~cout << res << endl ;  $ ~return 0 ;  $ }
string s ;  $ int len ;  $ int k , ans ;  $ int main ( ) {  $ ~cin >> s ;  $ ~len = s . size ( ) ;  $ ~for ( int i = 0 ; i < len ; i ++ ) {  $ ~~for ( int j = i + 1 ; j < len ; j ++ ) {  $ ~~~for ( k = 0 ; ; k ++ )  $ ~~~~if ( i + k > len || j + k > len || s [ i + k ] != s [ j + k ] ) break ;  $ ~~~ans = max ( ans , k ) ;  $ ~~}  $ ~}  $ ~cout << ans << "\n" ;  $ ~return 0 ;  $ }
long long a [ 3 ] , b [ 3 ] , k ;  $ int main ( ) {  $ ~for ( int i = 0 ; i < 3 ; ++ i ) cin >> b [ i ] ;  $ ~cin >> k ;  $ ~for ( int i = 0 ; i < 3 ; ++ i ) a [ i ] = b [ i ] - 1 ;  $ ~sort ( a , a + 3 ) ;  $ ~if ( a [ 0 ] >= k / 3 ) {  $ ~~a [ 0 ] = k / 3 ;  $ ~~a [ 1 ] = ( k - a [ 0 ] ) / 2 ;  $ ~~a [ 2 ] = min ( a [ 2 ] , k - a [ 0 ] - a [ 1 ] ) ;  $ ~} else {  $ ~~if ( a [ 1 ] >= ( k - a [ 0 ] ) / 2 ) {  $ ~~~a [ 1 ] = ( k - a [ 0 ] ) / 2 ;  $ ~~~a [ 2 ] = min ( a [ 2 ] , k - a [ 0 ] - a [ 1 ] ) ;  $ ~~} else  $ ~~~a [ 2 ] = min ( a [ 2 ] , k - a [ 1 ] - a [ 0 ] ) ;  $ ~}  $ ~cout << ( a [ 0 ] + 1 ) * ( a [ 1 ] + 1 ) * ( a [ 2 ] + 1 ) << endl ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~string str = "abcdefghijklmnopqrstuvwxyz" ;  $ ~int x , y ;  $ ~cin >> x >> y ;  $ ~string str1 , str2 ;  $ ~for ( int i = 0 ; i < y ; i ++ ) { str1 += str [ i ] ; }  $ ~int j = 0 ;  $ ~for ( int i = 0 ; i < x ; i ++ ) {  $ ~~str2 += str [ j ] ;  $ ~~if ( j == str1 . length ( ) - 1 ) {  $ ~~~j = 0 ;  $ ~~} else {  $ ~~~j ++ ;  $ ~~}  $ ~}  $ ~cout << str2 << endl ;  $ }
int main ( ) {  $ ~int a ;  $ ~cin >> a ;  $ ~if ( a % 2 == 0 ) {  $ ~~cout << "0\n" ;  $ ~} else {  $ ~~cout << "1\n" ;  $ ~}  $ ~return 0 ;  $ }
int a [ 51 ] ;  $ bool cmp ( int a , int b ) {  $ ~return a > b ;  $ }  $ int main ( ) {  $ ~int n , m , k ;  $ ~cin >> n >> m >> k ;  $ ~for ( int i = 0 ; i < n ; i ++ ) { cin >> a [ i ] ; }  $ ~sort ( a , a + n , cmp ) ;  $ ~int filter = 0 , stock = k , i = 0 , flag = 0 ;  $ ~while ( m > k ) {  $ ~~k = k - 1 + a [ i ] ;  $ ~~i ++ ;  $ ~~filter ++ ;  $ ~~if ( filter > n ) {  $ ~~~flag = 1 ;  $ ~~~break ;  $ ~~}  $ ~}  $ ~if ( flag == 0 )  $ ~~cout << filter << endl ;  $ ~else  $ ~~cout << - 1 << endl ;  $ ~return 0 ;  $ }
string str ;  $ bool isPalindrome ( int idx , int N ) {  $ ~for ( int i = 0 ; i < N / 2 ; i ++ ) {  $ ~~if ( str [ i + idx ] != str [ N - 1 - i + idx ] ) return false ;  $ ~}  $ ~return true ;  $ }  $ int main ( ) {  $ ~cin >> str ;  $ ~int n , k ;  $ ~cin >> k ;  $ ~n = str . length ( ) ;  $ ~int l = n / k ;  $ ~bool possible = true ;  $ ~if ( l * k == n ) {  $ ~~int i = 0 ;  $ ~~while ( i < n ) {  $ ~~~if ( ! isPalindrome ( i , l ) ) {  $ ~~~~possible = false ;  $ ~~~~break ;  $ ~~~}  $ ~~~i += l ;  $ ~~}  $ ~} else  $ ~~possible = false ;  $ ~if ( possible )  $ ~~cout << "YES" ;  $ ~else  $ ~~cout << "NO" ;  $ ~cout << "\n" ;  $ ~return 0 ;  $ }
set < int > se ;  $ int main ( ) {  $ ~int n , p , x , t ;  $ ~while ( cin >> n ) {  $ ~~cin >> x ;  $ ~~while ( x -- ) {  $ ~~~cin >> t ;  $ ~~~se . insert ( t ) ;  $ ~~}  $ ~~cin >> p ;  $ ~~while ( p -- ) {  $ ~~~cin >> t ;  $ ~~~se . insert ( t ) ;  $ ~~}  $ ~~if ( se . size ( ) != n )  $ ~~~cout << "Oh, my keyboard!" << endl ;  $ ~~else  $ ~~~cout << "I become the guy." << endl ;  $ ~~se . clear ( ) ;  $ ~}  $ ~return 0 ;  $ }
int main ( ) {  $ ~unsigned long long n ;  $ ~cin >> n ;  $ ~int r = 1 ;  $ ~while ( r * 5 < n ) {  $ ~~n -= r * 5 ;  $ ~~r *= 2 ;  $ ~}  $ ~string s [ ] = { "Sheldon" , "Leonard" , "Penny" , "Rajesh" , "Howard" } ;  $ ~cout << s [ ( n - 1 ) / r ] << endl ;  $ }
int main ( ) {  $ ~int n ;  $ ~string a , b ;  $ ~cin >> n >> a >> b ;  $ ~int ans = 0 ;  $ ~for ( int i = 0 ; i < n ; i ++ ) ans += min ( 10 - abs ( a [ i ] - b [ i ] ) , abs ( a [ i ] - b [ i ] ) ) ;  $ ~cout << ans << endl ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~int n , c = 0 , x ;  $ ~cin >> n ;  $ ~int y = n ;  $ ~if ( n >= 100 ) {  $ ~~x = n / 100 ;  $ ~~c += x ;  $ ~~y = n % 100 ;  $ ~}  $ ~if ( y >= 20 ) {  $ ~~x = y / 20 ;  $ ~~c += x ;  $ ~~y %= 20 ;  $ ~}  $ ~if ( y >= 10 ) {  $ ~~x = y / 10 ;  $ ~~c += x ;  $ ~~y %= 10 ;  $ ~}  $ ~if ( y >= 5 ) {  $ ~~x = y / 5 ;  $ ~~c += x ;  $ ~~y %= 5 ;  $ ~}  $ ~c += y ;  $ ~cout << c << endl ;  $ }
int main ( ) {  $ ~int a , b [ 100000 ] , c = 99999999999 , d = 99999999999 ;  $ ~cin >> a ;  $ ~for ( int i = 0 ; i < a ; i ++ ) {  $ ~~cin >> b [ i ] ;  $ ~~c = min ( b [ i ] , c ) ;  $ ~}  $ ~for ( int i = 0 ; i < a - 1 ; i ++ ) {  $ ~~if ( b [ i ] == c ) {  $ ~~~for ( int j = i + 1 ; j < a ; j ++ ) {  $ ~~~~if ( b [ j ] == c ) {  $ ~~~~~d = min ( d , j - i ) ;  $ ~~~~~if ( d == 1 ) {  $ ~~~~~~cout << "1" << endl ;  $ ~~~~~~return 0 ;  $ ~~~~~}  $ ~~~~}  $ ~~~}  $ ~~}  $ ~}  $ ~cout << d << endl ;  $ }
int n , k , a [ 1001 ] , ans ;  $ int main ( ) {  $ ~cin >> n ;  $ ~for ( int i = 0 ; i < n ; i ++ ) {  $ ~~cin >> k ;  $ ~~a [ i ] = k ;  $ ~~sort ( a , a + i + 1 ) ;  $ ~~if ( ( ( a [ 0 ] == k && a [ 1 ] != k ) || ( a [ i ] == k && a [ i - 1 ] != k ) ) && i != 0 ) ans ++ ;  $ ~}  $ ~cout << ans << endl ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~int m , d , flag = 0 ;  $ ~cin >> m >> d ;  $ ~if ( m == 2 ) {  $ ~~if ( d == 1 ) {  $ ~~~cout << "4" << endl ;  $ ~~~return 0 ;  $ ~~} else {  $ ~~~cout << "5" << endl ;  $ ~~~return 0 ;  $ ~~}  $ ~}  $ ~if ( m == 1 || m == 3 || m == 5 || m == 7 || m == 8 || m == 10 || m == 12 )  $ ~~flag = 1 ;  $ ~else if ( m != 2 )  $ ~~flag = 0 ;  $ ~if ( flag == 1 ) {  $ ~~if ( d >= 1 && d <= 5 )  $ ~~~cout << "5" << endl ;  $ ~~else if ( d == 6 || d == 7 )  $ ~~~cout << "6" << endl ;  $ ~~return 0 ;  $ ~} else if ( flag == 0 ) {  $ ~~if ( d >= 1 && d <= 6 )  $ ~~~cout << "5" << endl ;  $ ~~else if ( d == 7 )  $ ~~~cout << "6" << endl ;  $ ~~return 0 ;  $ ~}  $ ~return 0 ;  $ }
int main ( ) {  $ ~int n ;  $ ~cin >> n ;  $ ~int r = 1 ;  $ ~while ( r * 5 < n ) {  $ ~~n -= r * 5 ;  $ ~~r *= 2 ;  $ ~}  $ ~string names [ ] = { "Sheldon" , "Leonard" , "Penny" , "Rajesh" , "Howard" } ;  $ ~cout << names [ ( n - 1 ) / r ] << endl ;  $ ~return 0 ;  $ }
const int maxn = 32 ;  $ int main ( ) {  $ ~int n ;  $ ~cin >> n ;  $ ~int a [ maxn ] [ maxn ] = { 0 } ;  $ ~for ( int i = 0 ; i < n ; i ++ ) {  $ ~~for ( int j = 0 ; j < n ; j ++ ) {  $ ~~~cin >> a [ i ] [ j ] ;  $ ~~~a [ i ] [ n ] += a [ i ] [ j ] ;  $ ~~~a [ n ] [ j ] += a [ i ] [ j ] ;  $ ~~}  $ ~}  $ ~int ans = 0 ;  $ ~for ( int i = 0 ; i < n ; i ++ ) {  $ ~~for ( int j = 0 ; j < n ; j ++ ) {  $ ~~~if ( a [ n ] [ j ] > a [ i ] [ n ] ) ans ++ ;  $ ~~}  $ ~}  $ ~cout << ans << endl ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~int n , i , j , m = 0 , c = 0 , x , y ;  $ ~cin >> n ;  $ ~for ( i = 0 ; i < n ; i ++ ) {  $ ~~cin >> x >> y ;  $ ~~if ( x == y )  $ ~~~continue ;  $ ~~else if ( x > y )  $ ~~~m ++ ;  $ ~~else  $ ~~~c ++ ;  $ ~}  $ ~if ( m == c )  $ ~~cout << "Friendship is magic!^^" << endl ;  $ ~else if ( m > c )  $ ~~cout << "Mishka" << endl ;  $ ~else  $ ~~cout << "Chris" << endl ;  $ ~return 0 ;  $ }
int a [ 4 ] , n , x ;  $ int main ( ) {  $ ~cin >> n ;  $ ~while ( n -- ) {  $ ~~cin >> x ;  $ ~~++ a [ x ] ;  $ ~}  $ ~sort ( a + 1 , a + 4 ) ;  $ ~cout << a [ 1 ] + a [ 2 ] << endl ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~int n , k , G1 , T1 ;  $ ~cin >> n >> k ;  $ ~string arr ;  $ ~cin >> arr ;  $ ~int len = arr . length ( ) ;  $ ~for ( int i = 0 ; i < len ; i ++ ) {  $ ~~if ( arr [ i ] == 'G' )  $ ~~~G1 = i ;  $ ~~else if ( arr [ i ] == 'T' )  $ ~~~T1 = i ;  $ ~}  $ ~int x = G1 , flag = 0 ;  $ ~if ( G1 == T1 )  $ ~~cout << "YES" << endl ;  $ ~else if ( G1 < T1 ) {  $ ~~while ( x != T1 && x <= len - 1 && x >= 0 ) {  $ ~~~x = x + k ;  $ ~~~if ( arr [ x ] == '#' ) flag = 1 ;  $ ~~}  $ ~~if ( x == T1 && flag == 0 )  $ ~~~cout << "YES" << endl ;  $ ~~else  $ ~~~cout << "NO" << endl ;  $ ~} else {  $ ~~while ( x != T1 && x <= len - 1 && x >= 0 ) {  $ ~~~x = x - k ;  $ ~~~if ( arr [ x ] == '#' ) flag = 1 ;  $ ~~}  $ ~~if ( x == T1 && flag == 0 )  $ ~~~cout << "YES" << endl ;  $ ~~else  $ ~~~cout << "NO" << endl ;  $ ~}  $ }
int main ( ) {  $ ~int n , max = 0 , res = 1 ;  $ ~cin >> n ;  $ ~int * arr = new int [ n ] ;  $ ~cin >> arr [ 0 ] ;  $ ~for ( int j = 0 ; j < n - 1 ; ++ j ) {  $ ~~cin >> arr [ j + 1 ] ;  $ ~~if ( arr [ j ] <= arr [ j + 1 ] )  $ ~~~res += 1 ;  $ ~~else if ( arr [ j ] > arr [ j + 1 ] ) {  $ ~~~if ( res > max ) max = res ;  $ ~~~res = 1 ;  $ ~~}  $ ~}  $ ~if ( res > max )  $ ~~cout << res << endl ;  $ ~else  $ ~~cout << max << endl ;  $ ~return 0 ;  $ }
int n ;  $ int x ;  $ int main ( ) {  $ ~cin >> n >> x ;  $ ~for ( int i = 0 ; i < x ; i ++ ) {  $ ~~if ( n % 10 == 0 )  $ ~~~n = n / 10 ;  $ ~~else  $ ~~~n -- ;  $ ~}  $ ~cout << n << endl ;  $ }
int main ( ) {  $ ~int n , i ;  $ ~string s ;  $ ~cin >> n ;  $ ~for ( i = 0 ; i < n ; i ++ ) {  $ ~~cin >> s ;  $ ~~if ( s . length ( ) > 10 ) {  $ ~~~cout << s [ 0 ] << s . length ( ) - 2 << s [ s . length ( ) - 1 ] << endl ;  $ ~~} else {  $ ~~~cout << s << endl ;  $ ~~}  $ ~}  $ ~return 0 ;  $ }
int main ( ) {  $ ~long long n ;  $ ~cin >> n ;  $ ~if ( n % 2 == 0 )  $ ~~cout << n / 2 << endl ;  $ ~else  $ ~~cout << - ( n + 1 ) / 2 << endl ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~int array [ 26 ] = { 0 } ;  $ ~int index = 0 , count = 0 ;  $ ~string name ;  $ ~cin >> name ;  $ ~int len = name . length ( ) ;  $ ~for ( int i = 0 ; i < len ; i ++ ) {  $ ~~index = name [ i ] - 'a' ;  $ ~~array [ index ] ++ ;  $ ~~if ( array [ index ] == 1 ) { count ++ ; }  $ ~}  $ ~if ( count % 2 != 0 )  $ ~~cout << "IGNORE HIM!" << endl ;  $ ~else  $ ~~cout << "CHAT WITH HER!" << endl ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~int a [ 200 ] ;  $ ~int n ;  $ ~cin >> n ;  $ ~for ( int i = 0 ; i < n ; i ++ ) cin >> a [ i ] ;  $ ~int max = - 222222 ;  $ ~for ( int i = 0 ; i < n ; i ++ )  $ ~~for ( int j = i ; j < n ; j ++ ) {  $ ~~~int sum1 = 0 , sum2 = 0 , sum3 = 0 ;  $ ~~~for ( int k = 0 ; k < i ; k ++ ) {  $ ~~~~if ( a [ k ] == 1 ) sum1 ++ ;  $ ~~~}  $ ~~~for ( int k = i ; k <= j ; k ++ ) {  $ ~~~~if ( a [ k ] == 0 ) sum2 ++ ;  $ ~~~}  $ ~~~for ( int k = j + 1 ; k < n ; k ++ ) {  $ ~~~~if ( a [ k ] == 1 ) sum3 ++ ;  $ ~~~}  $ ~~~if ( sum1 + sum2 + sum3 > max ) max = sum1 + sum2 + sum3 ;  $ ~~}  $ ~cout << max << endl ;  $ }
int main ( ) {  $ ~double k , n , s , p ;  $ ~cin >> k >> n >> s >> p ;  $ ~int ans = ceil ( k * ceil ( n / s ) / p ) ;  $ ~cout << ans << '\n' ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~long long int i , j , sum , count = 0 , x , n , p , y [ 100 ] ;  $ ~cin >> n ;  $ ~for ( i = n - 81 ; i < n ; i ++ ) {  $ ~~x = i ;  $ ~~sum = i ;  $ ~~for ( j = 0 ; ; j ++ ) {  $ ~~~p = x % 10 ;  $ ~~~x = x / 10 ;  $ ~~~sum = sum + p ;  $ ~~~if ( x == 0 ) {  $ ~~~~if ( sum == n ) {  $ ~~~~~y [ count ] = i ;  $ ~~~~~count ++ ;  $ ~~~~}  $ ~~~~break ;  $ ~~~}  $ ~~}  $ ~}  $ ~cout << count << endl ;  $ ~for ( i = 0 ; i < count ; i ++ ) { cout << y [ i ] << endl ; }  $ }
int main ( ) {  $ ~int x , y ;  $ ~cin >> x >> y ;  $ ~for ( int i = 1 ; i <= x ; i ++ ) {  $ ~~if ( i % 2 != 0 ) {  $ ~~~for ( int j = 0 ; j < y ; j ++ ) { cout << "#" ; }  $ ~~~cout << endl ;  $ ~~} else if ( ( i / 2 ) % 2 != 0 ) {  $ ~~~for ( int m = 1 ; m < y ; m ++ ) { cout << "." ; }  $ ~~~cout << "#" << endl ;  $ ~~} else {  $ ~~~cout << "#" ;  $ ~~~for ( int k = 1 ; k < y ; k ++ ) { cout << "." ; }  $ ~~~cout << endl ;  $ ~~}  $ ~}  $ ~return 0 ;  $ }
int main ( ) {  $ ~int n ;  $ ~cin >> n ;  $ ~int arr [ n ] ;  $ ~for ( int i = 0 ; i < ( long long ) n ; i ++ ) { cin >> arr [ i ] ; }  $ ~int max = 0 ;  $ ~for ( int i = 0 ; i < ( long long ) n ; i ++ ) {  $ ~~int aux = arr [ i ] ;  $ ~~int can = 0 ;  $ ~~for ( int j = i ; j < n ; j ++ ) {  $ ~~~if ( arr [ j ] == aux ) can ++ ;  $ ~~}  $ ~~if ( can > max ) max = can ;  $ ~}  $ ~cout << max << endl ;  $ ~return 0 ;  $ }
int h [ 101 ] ;  $ int main ( ) {  $ ~int n ;  $ ~cin >> n ;  $ ~int Li ;  $ ~for ( int i = 0 ; i < n ; i ++ ) {  $ ~~if ( i == 0 )  $ ~~~cin >> Li ;  $ ~~else  $ ~~~cin >> h [ i ] ;  $ ~}  $ ~int temp = Li ;  $ ~sort ( h + 1 , h + n ) ;  $ ~if ( n == 1 ) {  $ ~~cout << 0 << endl ;  $ ~~return 0 ;  $ ~}  $ ~while ( Li <= h [ n - 1 ] ) {  $ ~~Li ++ ;  $ ~~h [ n - 1 ] -- ;  $ ~~for ( int j = n - 2 ; j >= 1 ; j -- ) {  $ ~~~if ( h [ j ] > h [ j + 1 ] ) {  $ ~~~~int t = h [ j ] ;  $ ~~~~h [ j ] = h [ j + 1 ] ;  $ ~~~~h [ j + 1 ] = t ;  $ ~~~}  $ ~~}  $ ~}  $ ~cout << Li - temp << endl ;  $ ~return 0 ;  $ }
int po [ 105 ] ;  $ bool check ( int , int ) ;  $ int main ( ) {  $ ~memset ( po , 0 , sizeof ( po ) ) ;  $ ~int n , a , b , cnt = 0 ;  $ ~cin >> n >> a >> b ;  $ ~for ( int i = a ; i < n ; ++ i ) {  $ ~~if ( n - i - 1 <= b && check ( i + 1 , cnt ) ) po [ ++ cnt ] = i + 1 ;  $ ~}  $ ~cout << cnt << endl ;  $ ~return 0 ;  $ }  $ bool check ( int q , int cnt ) {  $ ~for ( int i = 1 ; i <= cnt ; ++ i ) {  $ ~~if ( po [ i ] == q ) return false ;  $ ~}  $ ~return true ;  $ }
int main ( ) {  $ ~int n ;  $ ~cin >> n ;  $ ~vector < int > v ;  $ ~for ( int i = 0 ; i < n ; i ++ ) {  $ ~~int temp ;  $ ~~cin >> temp ;  $ ~~v . push_back ( temp ) ;  $ ~}  $ ~int count = 0 ;  $ ~for ( int i = 1 ; i < n - 1 ; i ++ ) {  $ ~~if ( v [ i ] > v [ i - 1 ] && v [ i ] > v [ i + 1 ] )  $ ~~~count ++ ;  $ ~~else if ( v [ i ] < v [ i - 1 ] && v [ i ] < v [ i + 1 ] )  $ ~~~count ++ ;  $ ~}  $ ~cout << count << endl ;  $ ~return 0 ;  $ }
int l , r , t , b ;  $ int main ( ) {  $ ~int n , m , i , j ;  $ ~cin >> n >> m ;  $ ~string s [ n ] ;  $ ~for ( i = 0 ; i < n ; i ++ ) cin >> s [ i ] ;  $ ~for ( i = 0 ; i < n ; i ++ ) {  $ ~~for ( j = 0 ; j < m ; j ++ )  $ ~~~if ( s [ i ] [ j ] == 'B' ) {  $ ~~~~l = j ;  $ ~~~~break ;  $ ~~~}  $ ~~for ( j = m - 1 ; j >= 0 ; j -- )  $ ~~~if ( s [ i ] [ j ] == 'B' ) {  $ ~~~~r = j ;  $ ~~~~break ;  $ ~~~}  $ ~~if ( l && r ) break ;  $ ~}  $ ~for ( i = 0 ; i < n ; i ++ ) {  $ ~~if ( s [ i ] [ l ] == 'B' ) {  $ ~~~t = i ;  $ ~~~break ;  $ ~~}  $ ~}  $ ~for ( i = n - 1 ; i > - 1 ; i -- ) {  $ ~~if ( s [ i ] [ l ] == 'B' ) {  $ ~~~b = i ;  $ ~~~break ;  $ ~~}  $ ~}  $ ~cout << ( t + b + 2 ) / 2 << " " << ( l + r + 2 ) / 2 << endl ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~int n ;  $ ~cin >> n ;  $ ~while ( n -- > 0 ) {  $ ~~int k ;  $ ~~cin >> k ;  $ ~~string s ;  $ ~~cin >> s ;  $ ~~if ( k == 2 & s [ 0 ] >= s [ 1 ] )  $ ~~~cout << "NO" << endl ;  $ ~~else {  $ ~~~cout << "YES" << endl << 2 << endl << s [ 0 ] << " " << s . substr ( 1 ) << endl ;  $ ~~}  $ ~}  $ }
int main ( ) {  $ ~int n , p , b , x = 0 , y = 0 ;  $ ~cin >> n >> b >> p ;  $ ~y = n * p ;  $ ~while ( n != 1 ) {  $ ~~int z = __lg ( n ) ;  $ ~~z = ( 1 << z ) ;  $ ~~z >> = 1 ;  $ ~~x += ( z ) * ( 2 * b + 1 ) ;  $ ~~n -= z ;  $ ~}  $ ~cout << x << " " << y << endl ;  $ }
int main ( ) {  $ ~int n ;  $ ~cin >> n ;  $ ~char a [ 1000 ] [ 1000 ] ;  $ ~for ( int i = ( n / 2 ) , j = 0 , k = n - 1 ; i >= 0 ; i -- , j ++ , k -- ) {  $ ~~for ( int c = j ; c <= k ; c ++ ) { a [ i ] [ c ] = 'D' ; }  $ ~}  $ ~for ( int i = ( n / 2 ) + 1 , j = 1 , k = n - 2 ; i < n ; i ++ , j ++ , k -- ) {  $ ~~for ( int c = j ; c <= k ; c ++ ) { a [ i ] [ c ] = 'D' ; }  $ ~}  $ ~for ( int i = 0 ; i < n ; i ++ ) {  $ ~~for ( int j = 0 ; j < n ; j ++ ) {  $ ~~~if ( a [ i ] [ j ] == 'D' )  $ ~~~~cout << a [ i ] [ j ] ;  $ ~~~else  $ ~~~~cout << "*" ;  $ ~~}  $ ~~cout << endl ;  $ ~}  $ ~return 0 ;  $ }
int main ( ) {  $ ~int n , k ;  $ ~while ( cin >> n >> k ) {  $ ~~while ( k > 0 ) {  $ ~~~int last_digit = n % 10 ;  $ ~~~if ( last_digit == 0 )  $ ~~~~k -- , n /= 10 ;  $ ~~~else  $ ~~~~k -- , n -- ;  $ ~~}  $ ~~cout << n << endl ;  $ ~}  $ ~return 0 ;  $ }
int main ( ) {  $ ~string s ;  $ ~cin >> s ;  $ ~cout << 25 * ( s . size ( ) + 1 ) + 1 << endl ;  $ ~return 0 ;  $ }
const int M = 100000 + 5 ;  $ int main ( ) {  $ ~int n , k ;  $ ~cin >> n >> k ;  $ ~int ans = max ( 3 * n - k , 0 ) ;  $ ~cout << ans << endl ;  $ ~return 0 ;  $ }
const long long mod = 1e9 + 7 ;  $ map < vector < char > , int > m ;  $ vector < char > rotz ( vector < char > v ) {  $ ~char tmp = v [ 3 ] ;  $ ~v [ 3 ] = v [ 2 ] , v [ 2 ] = v [ 1 ] , v [ 1 ] = v [ 0 ] , v [ 0 ] = tmp ;  $ ~return v ;  $ }  $ vector < char > roty ( vector < char > v ) {  $ ~swap ( v [ 4 ] , v [ 0 ] ) ;  $ ~swap ( v [ 4 ] , v [ 2 ] ) ;  $ ~swap ( v [ 2 ] , v [ 5 ] ) ;  $ ~return v ;  $ }  $ vector < char > rotx ( vector < char > v ) {  $ ~swap ( v [ 5 ] , v [ 1 ] ) ;  $ ~swap ( v [ 5 ] , v [ 3 ] ) ;  $ ~swap ( v [ 3 ] , v [ 4 ] ) ;  $ ~return v ;  $ }  $ bool go ( vector < char > v ) {  $ ~for ( int i = 0 ; i < 4 ; i ++ ) {  $ ~~for ( int j = 0 ; j < 4 ; j ++ ) {  $ ~~~for ( int k = 0 ; k < 4 ; k ++ ) {  $ ~~~~v = rotz ( v ) ;  $ ~~~~if ( m . find ( v ) != m . end ( ) ) return true ;  $ ~~~}  $ ~~~v = roty ( v ) ;  $ ~~}  $ ~~v = rotx ( v ) ;  $ ~}  $ ~return false ;  $ }  $ int main ( ) {  $ ~string s ;  $ ~cin >> s ;  $ ~vector < char > v ;  $ ~for ( int i = 0 ; i < ( int ) s . size ( ) ; i ++ ) v . push_back ( s [ i ] ) ;  $ ~sort ( ( v ) . begin ( ) , ( v ) . end ( ) ) ;  $ ~int cnt = 0 ;  $ ~do {  $ ~~if ( ! go ( v ) ) {  $ ~~~m [ v ] = 1 ;  $ ~~~cnt ++ ;  $ ~~}  $ ~} while ( next_permutation ( ( v ) . begin ( ) , ( v ) . end ( ) ) ) ;  $ ~cout << cnt << endl ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~map < string , int > mp ;  $ ~string s ;  $ ~cin >> s ;  $ ~int ans = 0 ;  $ ~for ( int i = 0 ; i <= s . length ( ) ; i ++ ) {  $ ~~string aa = "" , bb = "" ;  $ ~~for ( int j = 0 ; j < i ; j ++ ) { aa += s [ j ] ; }  $ ~~for ( int j = i ; j < s . length ( ) ; j ++ ) { bb += s [ j ] ; }  $ ~~for ( int j = 97 ; j <= 122 ; j ++ ) {  $ ~~~string tem = aa ;  $ ~~~char c = ( char ) j ;  $ ~~~tem += c ;  $ ~~~tem += bb ;  $ ~~~if ( mp [ tem ] == 0 ) {  $ ~~~~ans += 1 ;  $ ~~~~mp [ tem ] = 1 ;  $ ~~~}  $ ~~}  $ ~}  $ ~cout << ans << endl ;  $ }
int main ( ) {  $ ~int n , m , k , t , x ;  $ ~while ( cin >> n >> m >> k >> t ) {  $ ~~int i ;  $ ~~for ( i = 1 ; i < 10000000 ; i ++ ) {  $ ~~~if ( m <= k * i ) {  $ ~~~~x = i ;  $ ~~~~break ;  $ ~~~}  $ ~~}  $ ~~for ( i = 1 ; i < 200000000 ; i ++ ) {  $ ~~~if ( i * t >= x * n ) {  $ ~~~~cout << i << endl ;  $ ~~~~break ;  $ ~~~}  $ ~~}  $ ~}  $ ~return 0 ;  $ }
int main ( ) {  $ ~string s , q ;  $ ~getline ( cin , s ) ;  $ ~getline ( cin , q ) ;  $ ~if ( s == q ) {  $ ~~cout << - 1 << endl ;  $ ~} else {  $ ~~if ( s . size ( ) >= q . size ( ) )  $ ~~~cout << s . size ( ) << endl ;  $ ~~else  $ ~~~cout << q . size ( ) << endl ;  $ ~}  $ }
const int N = 200000 + 7 ;  $ int a [ N ] ;  $ int main ( ) {  $ ~int n ;  $ ~cin >> n ;  $ ~int sum = 0 ;  $ ~for ( int i = 0 ; i < n ; i ++ ) {  $ ~~cin >> a [ i ] ;  $ ~~sum += a [ i ] ;  $ ~}  $ ~int curr = 0 ;  $ ~for ( int i = 0 ; i < n ; i ++ ) {  $ ~~curr += a [ i ] ;  $ ~~if ( 2 * curr >= sum ) {  $ ~~~cout << i + 1 << endl ;  $ ~~~break ;  $ ~~}  $ ~}  $ }
int main ( ) {  $ ~long long int n , i ;  $ ~cin >> n ;  $ ~for ( i = 0 ; n >= 2 ; i ++ ) { n -= 2 ; }  $ ~i ++ ;  $ ~cout << i << endl ;  $ }
int main ( ) {  $ ~int x = 0 ;  $ ~for ( int i = 1 ; i <= 5 ; ++ i ) {  $ ~~for ( int j = 1 ; j <= 5 ; ++ j ) {  $ ~~~cin >> x ;  $ ~~~if ( x == 1 ) { cout << abs ( i - 3 ) + abs ( j - 3 ) << endl ; }  $ ~~}  $ ~}  $ ~return 0 ;  $ }
int main ( ) {  $ ~int n , num , Maxn , Minn , ans = 0 ;  $ ~cin >> n ;  $ ~cin >> num ;  $ ~Maxn = num , Minn = num ;  $ ~for ( int i = 1 ; i < n ; i ++ ) {  $ ~~cin >> num ;  $ ~~if ( num > Maxn ) {  $ ~~~Maxn = num ;  $ ~~~ans ++ ;  $ ~~} else if ( num < Minn ) {  $ ~~~Minn = num ;  $ ~~~ans ++ ;  $ ~~}  $ ~}  $ ~cout << ans << endl ;  $ ~return 0 ;  $ }
const int maxn = 5e5 + 1000 ;  $ int a [ maxn ] ;  $ int main ( ) {  $ ~int n , k ;  $ ~cin >> n >> k ;  $ ~for ( int i = 1 ; i <= n ; i ++ ) cin >> a [ i ] ;  $ ~int save = 0 ;  $ ~for ( int i = 1 ; i <= n ; i ++ ) {  $ ~~save += a [ i ] ;  $ ~~if ( save <= 8 )  $ ~~~k -= save , save = 0 ;  $ ~~else  $ ~~~k -= 8 , save -= 8 ;  $ ~~if ( k <= 0 ) {  $ ~~~cout << i << endl ;  $ ~~~return 0 ;  $ ~~}  $ ~}  $ ~cout << - 1 << endl ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~int a = 0 , b = 0 ;  $ ~int arr [ 5 ] [ 5 ] ;  $ ~for ( int i = 0 ; i < 5 ; i ++ ) {  $ ~~for ( int j = 0 ; j < 5 ; j ++ ) {  $ ~~~cin >> arr [ i ] [ j ] ;  $ ~~~if ( arr [ i ] [ j ] == 1 ) {  $ ~~~~a = i ;  $ ~~~~b = j ;  $ ~~~~break ;  $ ~~~}  $ ~~}  $ ~}  $ ~cout << abs ( a - 2 ) + abs ( b - 2 ) << endl ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~long int n , k , r , g , b , m = 0 ;  $ ~cin >> n >> k ;  $ ~r = n * 2 ;  $ ~g = n * 5 ;  $ ~b = n * 8 ;  $ ~if ( r % k == 0 )  $ ~~m += r / k ;  $ ~else  $ ~~m += ( ( r / k ) + 1 ) ;  $ ~if ( g % k == 0 )  $ ~~m += g / k ;  $ ~else  $ ~~m += ( ( g / k ) + 1 ) ;  $ ~if ( b % k == 0 )  $ ~~m += b / k ;  $ ~else  $ ~~m += ( ( b / k ) + 1 ) ;  $ ~cout << m << endl ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~int T , n ;  $ ~string s ;  $ ~cin >> T ;  $ ~for ( int i = 0 ; i < T ; i ++ ) {  $ ~~cin >> n >> s ;  $ ~~int j = 0 ;  $ ~~while ( j < n / 2 ) {  $ ~~~if ( s [ j ] != s [ n - j - 1 ] && abs ( s [ j ] - s [ n - j - 1 ] ) != 2 ) {  $ ~~~~cout << "NO" << endl ;  $ ~~~~break ;  $ ~~~}  $ ~~~j ++ ;  $ ~~}  $ ~~if ( j == n / 2 ) cout << "YES" << endl ;  $ ~}  $ ~return 0 ;  $ }
int mod ( int a , int b ) {  $ ~return ( ( a % b ) + b ) % b ;  $ }  $ int main ( ) {  $ ~int k , r , shovel = 1 , sum ;  $ ~cin >> k >> r ;  $ ~sum = k ;  $ ~while ( sum % 10 != 0 ) {  $ ~~if ( mod ( sum - r , 10 ) == 0 ) break ;  $ ~~sum += k ;  $ ~~shovel ++ ;  $ ~}  $ ~cout << shovel << "\n" ;  $ ~return 0 ;  $ }
bool finder ( char c , string & s ) {  $ ~int position = s . find ( c ) ;  $ ~if ( position == string : : npos ) {  $ ~~return false ;  $ ~} else {  $ ~~s = s . substr ( position + 1 , s . length ( ) - ( position + 1 ) ) ;  $ ~~return true ;  $ ~}  $ }  $ int main ( ) {  $ ~string s ;  $ ~bool found ;  $ ~cin >> s ;  $ ~found = finder ( 'h' , s ) ;  $ ~if ( found == false ) {  $ ~~cout << "NO" << endl ;  $ ~~return 0 ;  $ ~}  $ ~found = finder ( 'e' , s ) ;  $ ~if ( found == false ) {  $ ~~cout << "NO" << endl ;  $ ~~return 0 ;  $ ~}  $ ~found = finder ( 'l' , s ) ;  $ ~if ( found == false ) {  $ ~~cout << "NO" << endl ;  $ ~~return 0 ;  $ ~}  $ ~found = finder ( 'l' , s ) ;  $ ~if ( found == false ) {  $ ~~cout << "NO" << endl ;  $ ~~return 0 ;  $ ~}  $ ~found = finder ( 'o' , s ) ;  $ ~if ( found == false ) {  $ ~~cout << "NO" << endl ;  $ ~~return 0 ;  $ ~}  $ ~if ( found ) { cout << "YES" << endl ; }  $ ~return 0 ;  $ }
int main ( ) {  $ ~int n ;  $ ~while ( cin >> n ) {  $ ~~int tep = 0 , ans = 0 ;  $ ~~while ( n -- ) {  $ ~~~int val ;  $ ~~~cin >> val ;  $ ~~~if ( val == 0 )  $ ~~~~ans ++ ;  $ ~~~else if ( tep == val && val != 3 ) {  $ ~~~~ans ++ ;  $ ~~~~val = 0 ;  $ ~~~} else if ( val == 3 && tep != 3 ) {  $ ~~~~if ( tep == 1 )  $ ~~~~~val = 2 ;  $ ~~~~else if ( tep == 2 )  $ ~~~~~val = 1 ;  $ ~~~}  $ ~~~tep = val ;  $ ~~}  $ ~~cout << ans << endl ;  $ ~}  $ ~return 0 ;  $ }
int arr [ 100010 ] ;  $ int main ( ) {  $ ~int n , c , hitung = 0 ;  $ ~cin >> n >> c ;  $ ~for ( int i = 1 ; i <= n ; i ++ ) { cin >> arr [ i ] ; }  $ ~for ( int i = n ; i >= 2 ; i -- ) {  $ ~~if ( arr [ i ] - arr [ i - 1 ] <= c ) {  $ ~~~hitung ++ ;  $ ~~} else {  $ ~~~cout << hitung + 1 << endl ;  $ ~~~return 0 ;  $ ~~}  $ ~}  $ ~cout << hitung + 1 << endl ;  $ }
int N ;  $ string S [ 105 ] ;  $ int main ( ) {  $ ~cin >> N ;  $ ~for ( int i = 0 ; i < N ; i ++ ) { cin >> S [ i ] ; }  $ ~long long val = 0 ;  $ ~for ( char i = 'a' ; i <= 'z' ; i ++ ) {  $ ~~for ( char j = 'a' ; j <= 'z' ; j ++ ) {  $ ~~~long long temp = 0 ;  $ ~~~for ( int k = 0 ; k < N ; k ++ ) {  $ ~~~~bool cek = 1 ;  $ ~~~~for ( int m = 0 ; m < S [ k ] . length ( ) ; m ++ ) {  $ ~~~~~if ( S [ k ] [ m ] != i && S [ k ] [ m ] != j ) cek = 0 ;  $ ~~~~}  $ ~~~~if ( cek ) temp += S [ k ] . length ( ) ;  $ ~~~}  $ ~~~val = max ( val , temp ) ;  $ ~~}  $ ~}  $ ~cout << val << '\n' ;  $ }
long long w ( int n ) {  $ ~int p [ 15 ] ;  $ ~int len = 0 ;  $ ~while ( n ) {  $ ~~p [ len ++ ] = n % 10 ;  $ ~~n /= 10 ;  $ ~}  $ ~long long re = 0 ;  $ ~while ( len -- ) re = re * 10 + 9 - p [ len ] ;  $ ~return re ;  $ }  $ int main ( ) {  $ ~int l , r , len = 0 ;  $ ~long long i , max ;  $ ~while ( cin >> l >> r ) {  $ ~~for ( i = 1 ; i <= 1000000000 ; i *= 10 )  $ ~~~if ( r < i ) break ;  $ ~~max = ( i >> 1 ) - 1 ;  $ ~~if ( l <= max && max <= r )  $ ~~~cout << max * w ( max ) << endl ;  $ ~~else if ( max <= r )  $ ~~~cout << l * w ( l ) << endl ;  $ ~~else  $ ~~~cout << r * w ( r ) << endl ;  $ ~}  $ ~return 0 ;  $ }
int main ( ) {  $ ~int n , a [ 10 ] [ 10 ] , s = 0 , i , j ;  $ ~cin >> n ;  $ ~for ( i = 0 ; i < n ; i ++ )  $ ~~for ( j = 0 ; j < n ; j ++ ) { a [ i ] [ j ] = 1 ; }  $ ~for ( i = 1 ; i < n ; i ++ )  $ ~~for ( j = 1 ; j < n ; j ++ ) { a [ i ] [ j ] = a [ i ] [ j - 1 ] + a [ i - 1 ] [ j ] ; }  $ ~s = a [ n - 1 ] [ n - 1 ] ;  $ ~cout << s << endl ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~int a , b , a1 [ 1001 ] , x , k = 1 , ansx = 0 ;  $ ~cin >> a >> b ;  $ ~for ( int i = 1 ; i <= a ; i ++ ) cin >> a1 [ i ] ;  $ ~for ( int i = 1 ; i <= b ; i ++ ) {  $ ~~cin >> x ;  $ ~~for ( k ; k != a + 1 ; ) {  $ ~~~if ( a1 [ k ] <= x ) {  $ ~~~~ansx ++ ;  $ ~~~~k ++ ;  $ ~~~~break ;  $ ~~~}  $ ~~~k ++ ;  $ ~~}  $ ~}  $ ~cout << ansx << endl ;  $ }
int main ( ) {  $ ~char a , b ;  $ ~long long n ;  $ ~cin >> a >> b >> n ;  $ ~n %= 4 ;  $ ~int x [ 8 ] = { 118 , 60 , 94 , 62 , 118 , 60 , 94 , 62 } ;  $ ~int y [ 8 ] = { 118 , 62 , 94 , 60 , 118 , 62 , 94 , 60 } ;  $ ~int c1 = 0 , c2 = 0 ;  $ ~for ( int i = 0 ; i < 8 ; i ++ ) {  $ ~~if ( x [ i ] == ( int ) a ) {  $ ~~~if ( x [ i + n ] == ( int ) b ) c1 = 1 ;  $ ~~~break ;  $ ~~}  $ ~}  $ ~for ( int i = 0 ; i < 8 ; i ++ ) {  $ ~~if ( y [ i ] == ( int ) a ) {  $ ~~~if ( y [ i + n ] == ( int ) b ) c2 = 1 ;  $ ~~~break ;  $ ~~}  $ ~}  $ ~if ( c1 && c2 )  $ ~~cout << "undefined\n" ;  $ ~else if ( c1 )  $ ~~cout << "cw\n" ;  $ ~else if ( c2 )  $ ~~cout << "ccw\n" ;  $ ~return 0 ;  $ }
long long gcd ( long long a , long long b ) {  $ ~if ( a < b ) swap ( a , b ) ;  $ ~if ( b == 0 )  $ ~~return a ;  $ ~else  $ ~~return gcd ( b , a % b ) ;  $ }  $ long long lcm ( long long a , long long b ) {  $ ~return a * b / gcd ( a , b ) ;  $ }  $ int main ( ) {  $ ~long long a , b , c ;  $ ~cin >> a >> b ;  $ ~c = lcm ( a , b ) ;  $ ~a = c / a ;  $ ~b = c / b ;  $ ~if ( a > b )  $ ~~b ++ ;  $ ~else if ( a < b )  $ ~~a ++ ;  $ ~if ( a == b )  $ ~~cout << "Equal" << endl ;  $ ~else if ( a > b )  $ ~~cout << "Dasha" << endl ;  $ ~else  $ ~~cout << "Masha" << endl ;  $ }
int main ( ) {  $ ~int n ;  $ ~cin >> n ;  $ ~int arr [ n + 1 ] , copy [ n + 1 ] ;  $ ~for ( int i = 1 ; i <= n ; i ++ ) {  $ ~~{  $ ~~~cin >> arr [ i ] ;  $ ~~~cin >> copy [ i ] ;  $ ~~}  $ ~}  $ ~int cou = 0 ;  $ ~for ( int i = 1 ; i <= n ; i ++ ) {  $ ~~for ( int j = 1 ; j <= n ; j ++ ) {  $ ~~~if ( arr [ i ] == copy [ j ] ) cou ++ ;  $ ~~}  $ ~}  $ ~cout << cou << "\n" ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~int a , b , d = 1 , i = 1 , c ;  $ ~cin >> a >> b ;  $ ~c = a ;  $ ~if ( a % 10 != 0 ) {  $ ~~d = ( a % 10 ) - b ;  $ ~~while ( d != 0 ) {  $ ~~~i ++ ;  $ ~~~a = c * i ;  $ ~~~if ( a % 10 == 0 ) break ;  $ ~~~d = ( a % 10 ) - b ;  $ ~~}  $ ~}  $ ~cout << i << endl ;  $ }
int main ( ) {  $ ~long long int n , k ;  $ ~cin >> n >> k ;  $ ~if ( ( k % n ) == 0 ) {  $ ~~cout << ( k / n ) << endl ;  $ ~} else  $ ~~cout << ( ( k / n ) + 1 ) << endl ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~long long x , ans = 0 ;  $ ~cin >> x ;  $ ~while ( x > 0 ) {  $ ~~if ( x % 2 == 1 ) ans ++ ;  $ ~~x /= 2 ;  $ ~}  $ ~cout << ans << endl ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~int i , links = 0 , pearls = 0 ;  $ ~string s ;  $ ~cin >> s ;  $ ~for ( i = 0 ; i < s . size ( ) ; i ++ ) {  $ ~~if ( s [ i ] == '-' )  $ ~~~++ links ;  $ ~~else  $ ~~~++ pearls ;  $ ~}  $ ~if ( pearls == 0 )  $ ~~cout << "YES" << endl ;  $ ~else if ( links % pearls == 0 )  $ ~~cout << "YES" << endl ;  $ ~else  $ ~~cout << "NO" << endl ;  $ ~return 0 ;  $ }
const int INF = 0 x3f3f3f3f ;  $ const double eps = 1e-7 ;  $ const long long mod = 1e9 + 7 ;  $ int CountOne ( int n ) {  $ ~int ans = 0 ;  $ ~while ( n ) {  $ ~~ans ++ ;  $ ~~n >> = 1 ;  $ ~}  $ ~return ans ;  $ }  $ int main ( ) {  $ ~int n ;  $ ~cin >> n ;  $ ~cout << CountOne ( n ) << endl ;  $ ~return 0 ;  $ }
int x [ 2010 ] , y [ 2010 ] ;  $ int main ( ) {  $ ~int n ;  $ ~cin >> n ;  $ ~for ( int i = 1 ; i <= n ; ++ i ) { cin >> x [ i ] ; }  $ ~for ( int i = 1 ; i <= n ; ++ i ) { cin >> y [ i ] ; }  $ ~cout << "Karen" << endl ;  $ ~return 0 ;  $ }
int a , b ;  $ int main ( ) {  $ ~cin >> a >> b ;  $ ~cout << min ( a , b ) << " " << ( a - min ( a , b ) ) / 2 + ( b - min ( a , b ) ) / 2 << endl ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~long long n , m , a ;  $ ~while ( cin >> n >> m >> a ) cout << ( ( n + a - 1 ) / a ) * ( ( m + a - 1 ) / a ) << endl ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~string result [ ] = { "First" , "Second" } ;  $ ~int x , y , r ;  $ ~cin >> x >> y >> r ;  $ ~r *= 2 ;  $ ~cout << result [ r > min ( x , y ) ] << endl ;  $ ~return 0 ;  $ }
int a [ 200010 ] ;  $ int main ( ) {  $ ~int n ;  $ ~cin >> n ;  $ ~for ( int i = 0 ; i < n ; ++ i ) cin >> a [ i ] ;  $ ~sort ( a , a + n ) ;  $ ~int res = 1e9 + 7 ;  $ ~for ( int i = n / 2 ; i < n ; ++ i ) res = min ( res , a [ i ] - a [ i - n / 2 ] ) ;  $ ~cout << res << endl ;  $ }
const int N = 1e5 + 5 ;  $ int n , d , x [ N ] ;  $ long long ans ;  $ int main ( ) {  $ ~cin >> n >> d ;  $ ~for ( int i = 0 , p = 0 ; i < n ; i ++ ) {  $ ~~cin >> x [ i ] ;  $ ~~while ( x [ i ] - x [ p ] > d ) p ++ ;  $ ~~ans += ( i - p - 1 LL ) * ( i - p ) / 2 ;  $ ~}  $ ~cout << ans << endl ;  $ ~return 0 ;  $ }
int to_num ( string s ) {  $ ~if ( s . size ( ) >= 4 ) {  $ ~~if ( s . substr ( s . size ( ) - 4 ) == "lios" ) return 0 ;  $ ~}  $ ~if ( s . size ( ) >= 5 ) {  $ ~~if ( s . substr ( s . size ( ) - 5 ) == "liala" ) return 1 ;  $ ~}  $ ~if ( s . size ( ) >= 3 ) {  $ ~~if ( s . substr ( s . size ( ) - 3 ) == "etr" ) return 2 ;  $ ~}  $ ~if ( s . size ( ) >= 4 ) {  $ ~~if ( s . substr ( s . size ( ) - 4 ) == "etra" ) return 3 ;  $ ~}  $ ~if ( s . size ( ) >= 6 ) {  $ ~~if ( s . substr ( s . size ( ) - 6 ) == "initis" ) return 4 ;  $ ~}  $ ~if ( s . size ( ) >= 6 ) {  $ ~~if ( s . substr ( s . size ( ) - 6 ) == "inites" ) return 5 ;  $ ~}  $ ~return - 1 ;  $ }  $ bool islegal ( vector < int > ans ) {  $ ~if ( ans [ 0 ] % 2 == 0 ) {  $ ~~for ( int i = 1 ; i < ans . size ( ) ; i ++ )  $ ~~~if ( ans [ i ] % 2 != 0 ) return false ;  $ ~} else {  $ ~~for ( int i = 0 ; i < ans . size ( ) ; i ++ ) {  $ ~~~if ( ans [ i ] == - 1 ) return false ;  $ ~~~if ( ans [ i ] % 2 == 0 ) return false ;  $ ~~}  $ ~}  $ ~return true ;  $ }  $ bool isok ( vector < int > ans ) {  $ ~bool f = false ;  $ ~for ( int i = 0 ; i < ans . size ( ) ; i ++ ) {  $ ~~if ( ( ans [ i ] / 2 ) == 1 && ! f ) {  $ ~~~f = true ;  $ ~~~continue ;  $ ~~}  $ ~~if ( ! f ) {  $ ~~~if ( ans [ i ] / 2 != 0 ) return false ;  $ ~~} else {  $ ~~~if ( ans [ i ] / 2 != 2 ) return false ;  $ ~~}  $ ~}  $ ~if ( ! f ) { return false ; }  $ ~return true ;  $ }  $ int main ( ) {  $ ~char c [ 100010 ] ;  $ ~string s ;  $ ~vector < string > res ;  $ ~vector < int > ans ;  $ ~int pos = 0 ;  $ ~gets ( c ) ;  $ ~s = c ;  $ ~for ( int i = 0 ; i < s . size ( ) ; i ++ )  $ ~~if ( s [ i ] == ' ' ) {  $ ~~~res . push_back ( s . substr ( pos , i - pos ) ) ;  $ ~~~pos = i + 1 ;  $ ~~}  $ ~res . push_back ( s . substr ( pos ) ) ;  $ ~for ( int i = 0 ; i < res . size ( ) ; i ++ ) ans . push_back ( to_num ( res [ i ] ) ) ;  $ ~if ( ans . size ( ) == 1 && ans [ 0 ] >= 0 ) {  $ ~~puts ( "YES" ) ;  $ ~~return 0 ;  $ ~}  $ ~if ( islegal ( ans ) ) {  $ ~~if ( isok ( ans ) )  $ ~~~puts ( "YES" ) ;  $ ~~else  $ ~~~puts ( "NO" ) ;  $ ~} else  $ ~~puts ( "NO" ) ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~int sum = 0 ;  $ ~int tc ;  $ ~int a [ 100 ] ;  $ ~cin >> tc ;  $ ~for ( int i = 0 ; i < tc ; i ++ ) { cin >> a [ i ] ; }  $ ~int max = a [ 0 ] ;  $ ~for ( int i = 0 ; i < tc ; i ++ ) {  $ ~~if ( a [ i ] > max ) max = a [ i ] ;  $ ~}  $ ~for ( int i = 0 ; i < tc ; i ++ ) { sum += max - a [ i ] ; }  $ ~cout << sum << endl ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~string a , b ;  $ ~cin >> a >> b ;  $ ~if ( a == b )  $ ~~cout << a << endl ;  $ ~else  $ ~~cout << "1" << endl ;  $ ~return 0 ;  $ }
string x ;  $ int s ;  $ int main ( ) {  $ ~cin >> x ;  $ ~int b = 0 ;  $ ~int n = x . length ( ) ;  $ ~for ( int i = 0 ; i < n ; i ++ ) {  $ ~~int a = x [ i ] - 97 ;  $ ~~int max ;  $ ~~int min ;  $ ~~if ( a > b ) {  $ ~~~max = a ;  $ ~~~min = b ;  $ ~~} else {  $ ~~~min = a ;  $ ~~~max = b ;  $ ~~}  $ ~~int s1 = max - min ;  $ ~~int s2 = 26 - max + min ;  $ ~~( s1 < s2 ) ? s += s1 : s += s2 ;  $ ~~b = x [ i ] - 97 ;  $ ~}  $ ~cout << s << endl ;  $ ~return 0 ;  $ }
long long a [ 200005 ] ;  $ int main ( ) {  $ ~int n ;  $ ~cin >> n ;  $ ~for ( int i = 0 ; i < 2 * n ; i ++ ) { cin >> a [ i ] ; }  $ ~sort ( a , a + 2 * n ) ;  $ ~long long ans = ( a [ 2 * n - 1 ] - a [ n ] ) * ( a [ n - 1 ] - a [ 0 ] ) ;  $ ~for ( int i = 1 ; i < n ; i ++ ) { ans = min ( ans , ( a [ 2 * n - 1 ] - a [ 0 ] ) * ( a [ n - 1 + i ] - a [ i ] ) ) ; }  $ ~cout << ans << endl ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~long long int n , m , mx , mn , ar [ 10000 ] , cnt = 0 ;  $ ~bool ck = true ;  $ ~cin >> n >> m >> mn >> mx ;  $ ~for ( int i = 0 ; i < m ; i ++ ) {  $ ~~cin >> ar [ i ] ;  $ ~~if ( ar [ i ] < mn || ar [ i ] > mx ) ck = false ;  $ ~~if ( ar [ i ] > mn && ar [ i ] < mx ) cnt ++ ;  $ ~}  $ ~if ( ck && cnt <= ( n - 2 ) )  $ ~~cout << "Correct" << endl ;  $ ~else  $ ~~cout << "Incorrect" << endl ;  $ }
int main ( ) {  $ ~int num ;  $ ~cin >> num ;  $ ~int ans = 0 ;  $ ~int dif = num - 10 ;  $ ~if ( dif >= 2 && dif <= 10 ) ans += 4 ;  $ ~if ( dif == 10 ) ans += 11 ;  $ ~if ( dif == 11 or dif == 1 ) ans += 4 ;  $ ~cout << ans << endl ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~int arr [ 6 ] , score = 0 ;  $ ~for ( int i = 0 ; i < 6 ; ++ i ) {  $ ~~cin >> arr [ i ] ;  $ ~~score += arr [ i ] ;  $ ~}  $ ~if ( score % 2 != 0 ) {  $ ~~cout << "NO" << endl ;  $ ~~return ( 0 ) ;  $ ~}  $ ~score >> = 1 ;  $ ~for ( int i = 0 ; i < 6 ; ++ i ) {  $ ~~for ( int j = i + 1 ; j < 6 ; ++ j ) {  $ ~~~for ( int k = j + 1 ; k < 6 ; ++ k ) {  $ ~~~~if ( ( arr [ i ] + arr [ j ] + arr [ k ] ) == score ) {  $ ~~~~~cout << "YES" << endl ;  $ ~~~~~return ( 0 ) ;  $ ~~~~}  $ ~~~}  $ ~~}  $ ~}  $ ~cout << "NO" << endl ;  $ ~return ( 0 ) ;  $ }
const int N = 105 ;  $ bool is [ N ] [ N ] ;  $ int f ( int x ) {  $ ~return ( x * ( x - 1 ) * ( x - 2 ) ) / 6 ;  $ }  $ int main ( ) {  $ ~int k ;  $ ~cin >> k ;  $ ~int n = 1 ;  $ ~while ( f ( n + 1 ) <= k ) { n ++ ; }  $ ~k -= f ( n ) ;  $ ~for ( int i = 1 ; i <= n ; i ++ ) {  $ ~~for ( int j = 1 ; j <= n ; j ++ ) {  $ ~~~if ( i != j ) is [ i ] [ j ] = true ;  $ ~~}  $ ~}  $ ~int s = n ;  $ ~while ( k > 0 ) {  $ ~~s ++ ;  $ ~~for ( int i = 1 ; i <= n ; i ++ ) {  $ ~~~if ( k >= i - 1 ) {  $ ~~~~k -= i - 1 ;  $ ~~~~is [ s ] [ i ] = true ;  $ ~~~~is [ i ] [ s ] = true ;  $ ~~~}  $ ~~}  $ ~}  $ ~cout << s << "\n" ;  $ ~for ( int i = 1 ; i <= s ; i ++ ) {  $ ~~for ( int j = 1 ; j <= s ; j ++ ) { cout << is [ i ] [ j ] ; }  $ ~~cout << "\n" ;  $ ~}  $ ~return 0 ;  $ }
int res = - 1e9 ;  $ int main ( ) {  $ ~int n ;  $ ~cin >> n ;  $ ~for ( int i = 0 ; i < n ; ++ i ) {  $ ~~int x ;  $ ~~cin >> x ;  $ ~~if ( x < 0 ) {  $ ~~~res = max ( res , x ) ;  $ ~~} else {  $ ~~~int s = sqrt ( x ) ;  $ ~~~while ( s * s < x ) ++ s ;  $ ~~~while ( s * s > x ) -- s ;  $ ~~~if ( s * s != x ) res = max ( res , x ) ;  $ ~~}  $ ~}  $ ~cout << res << endl ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~int m , n , i , j = 0 , p ;  $ ~cin >> n >> m ;  $ ~int a [ m ] ;  $ ~for ( i = 0 ; i < m ; i ++ ) { cin >> a [ i ] ; }  $ ~sort ( a , a + m ) ;  $ ~p = a [ n - 1 ] - a [ 0 ] ;  $ ~for ( i = 0 ; i <= m - n ; i ++ ) {  $ ~~j = a [ i + n - 1 ] - a [ i ] ;  $ ~~if ( p > j ) p = j ;  $ ~}  $ ~cout << p << endl ;  $ }
int main ( ) {  $ ~int n , m , i , j ;  $ ~cin >> n >> m ;  $ ~for ( i = 0 ; i < n ; i ++ ) {  $ ~~for ( j = 0 ; j < m ; j ++ ) {  $ ~~~if ( ( ( i + 1 ) % 4 == 0 ) && ( ( i + 1 ) % 2 == 0 ) ) {  $ ~~~~if ( j == 0 )  $ ~~~~~cout << "#" ;  $ ~~~~else  $ ~~~~~cout << "." ;  $ ~~~} else if ( ( ( i + 1 ) % 4 != 0 ) && ( ( i + 1 ) % 2 == 0 ) ) {  $ ~~~~if ( j == m - 1 )  $ ~~~~~cout << "#" ;  $ ~~~~else  $ ~~~~~cout << "." ;  $ ~~~} else  $ ~~~~cout << "#" ;  $ ~~}  $ ~~cout << endl ;  $ ~}  $ ~return 0 ;  $ }
string s1 , s2 , a , b ;  $ int n ;  $ int main ( ) {  $ ~cin >> s1 >> s2 >> n ;  $ ~cout << s1 << " " << s2 << endl ;  $ ~for ( int i = 1 ; i <= n ; i ++ ) {  $ ~~cin >> a >> b ;  $ ~~if ( a == s1 ) swap ( s1 , b ) ;  $ ~~if ( a == s2 ) swap ( s2 , b ) ;  $ ~~cout << s1 << " " << s2 << endl ;  $ ~}  $ ~return 0 ;  $ }
int main ( ) {  $ ~char s [ 1000 ] ;  $ ~cin >> s ;  $ ~int n = strlen ( s ) ;  $ ~if ( n < 3 or ( n == 3 and strcmp ( s , "127" ) <= 0 ) )  $ ~~cout << "byte" << endl ;  $ ~else if ( n < 5 or ( n == 5 and strcmp ( s , "32767" ) <= 0 ) )  $ ~~cout << "short" << endl ;  $ ~else if ( n < 10 or ( n == 10 and strcmp ( s , "2147483647" ) <= 0 ) )  $ ~~cout << "int" << endl ;  $ ~else if ( n < 19 or ( n == 19 and strcmp ( s , "9223372036854775807" ) <= 0 ) )  $ ~~cout << "long" << endl ;  $ ~else  $ ~~cout << "BigInteger" << endl ;  $ ~return 0 ;  $ }
int n ;  $ int m ;  $ int a [ 200 ] ;  $ int main ( ) {  $ ~cin >> n >> m ;  $ ~for ( int i = 0 ; i < n ; i ++ ) cin >> a [ i ] ;  $ ~sort ( a , a + n ) ;  $ ~int o = m ;  $ ~int dif = a [ n - 1 ] - a [ 0 ] ;  $ ~for ( int i = 0 ; i < n ; i ++ ) m -= a [ n - 1 ] - a [ i ] ;  $ ~if ( m <= 0 )  $ ~~cout << a [ n - 1 ] << " " << a [ n - 1 ] + o << endl ;  $ ~else {  $ ~~int u = 0 ;  $ ~~if ( m % n != 0 ) u ++ ;  $ ~~cout << u + m / n + a [ n - 1 ] << " " << a [ n - 1 ] + o << endl ;  $ ~}  $ ~return 0 ;  $ }
int main ( ) {  $ ~char s [ 200006 ] ;  $ ~int count , n , flag ;  $ ~while ( cin >> n ) {  $ ~~count = 0 ;  $ ~~memset ( s , 0 , sizeof ( s ) ) ;  $ ~~for ( int i = 0 ; i < n ; i ++ ) cin >> s [ i ] ;  $ ~~int i = 0 , j = n - 1 ;  $ ~~while ( s [ i ++ ] == '<' ) count ++ ;  $ ~~while ( s [ j -- ] == '>' ) count ++ ;  $ ~~cout << count << endl ;  $ ~}  $ }
int q ;  $ map < long long , long long > m ;  $ int upit ;  $ long long u , v , w ;  $ long long sol ;  $ void dodaj ( ) {  $ ~while ( u != v ) {  $ ~~if ( u > v ) {  $ ~~~m [ u ] += w ;  $ ~~~u = u / 2 ;  $ ~~} else {  $ ~~~m [ v ] += w ;  $ ~~~v = v / 2 ;  $ ~~}  $ ~}  $ }  $ void pokupi ( ) {  $ ~while ( u != v ) {  $ ~~if ( u > v ) {  $ ~~~sol += m [ u ] ;  $ ~~~u = u / 2 ;  $ ~~} else {  $ ~~~sol += m [ v ] ;  $ ~~~v = v / 2 ;  $ ~~}  $ ~}  $ }  $ int main ( ) {  $ ~cin >> q ;  $ ~while ( q -- ) {  $ ~~cin >> upit ;  $ ~~if ( upit == 1 ) {  $ ~~~cin >> v >> u >> w ;  $ ~~~dodaj ( ) ;  $ ~~} else {  $ ~~~cin >> v >> u ;  $ ~~~sol = 0 ;  $ ~~~pokupi ( ) ;  $ ~~~cout << sol << endl ;  $ ~~}  $ ~}  $ ~return 0 ;  $ }
int f ( int r , int u ) {  $ ~return ( u - ( r % u ) ) + r ;  $ }  $ int qwe ( int n , int u ) {  $ ~return ( n / u ) * u ;  $ }  $ int main ( ) {  $ ~int q , n , u , l , r ;  $ ~cin >> q ;  $ ~for ( int i = 1 ; i <= q ; i ++ ) {  $ ~~cin >> n >> u >> l >> r ;  $ ~~cout << ( ( l - 1 ) / u ) + max ( ( qwe ( n , u ) - f ( r , u ) ) / u + 1 , 0 ) << "\n" ;  $ ~}  $ ~return 0 ;  $ }
int main ( ) {  $ ~int n , d ;  $ ~cin >> n >> d ;  $ ~int v [ 1000005 ] ;  $ ~for ( int i = 0 ; i < n ; i ++ ) {  $ ~~int point ;  $ ~~cin >> point ;  $ ~~v [ i ] = point ;  $ ~}  $ ~long long result = 0 ;  $ ~for ( int right = 2 , left = 0 ; right < n ; right ++ ) {  $ ~~while ( v [ right ] - v [ left ] > d ) { left ++ ; }  $ ~~result += ( long long ) ( right - left ) * ( right - left - 1 ) / 2 ;  $ ~}  $ ~cout << result << endl ;  $ ~return 0 ;  $ }
int n , L , a ;  $ int main ( ) {  $ ~cin >> n >> L >> a ;  $ ~unsigned int result = 0 ;  $ ~int prevbeg = 0 , prevlen = 0 ;  $ ~for ( int currcase = 0 ; currcase < n ; ++ currcase ) {  $ ~~int begin , length ;  $ ~~cin >> begin >> length ;  $ ~~if ( currcase != 0 ) {  $ ~~~int breaktime = begin - ( prevbeg + prevlen ) ;  $ ~~~result += floor ( breaktime / a ) ;  $ ~~} else {  $ ~~~result += floor ( begin / a ) ;  $ ~~}  $ ~~prevbeg = begin ;  $ ~~prevlen = length ;  $ ~}  $ ~int lastbreaktime = L - ( prevbeg + prevlen ) ;  $ ~result += floor ( lastbreaktime / a ) ;  $ ~cout << result << endl ;  $ ~return 0 ;  $ }
void fast ( ) { }  $ int main ( ) {  $ ~fast ( ) ;  $ ~int n , k ;  $ ~cin >> k >> n ;  $ ~cout << ( ( 3 * k - n ) > 0 ? 3 * k - n : 0 ) << endl ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~int n , k , t , d , s = 0 , c = 0 ;  $ ~cin >> n >> k >> t >> d ;  $ ~if ( t >= n ) {  $ ~~cout << "NO" << endl ;  $ ~~return 0 ;  $ ~} else {  $ ~~if ( n % t == 0 ) {  $ ~~~s = ( ( n / t ) * k ) ;  $ ~~} else {  $ ~~~s = ( ( ( n / t ) + 1 ) * k ) ;  $ ~~}  $ ~~c = d + k ;  $ ~~if ( c >= s )  $ ~~~cout << "NO" << endl ;  $ ~~else  $ ~~~cout << "YES" << endl ;  $ ~}  $ ~return 0 ;  $ }
int main ( ) {  $ ~int a , x , y ;  $ ~for ( int i = 1 ; i <= 5 ; i ++ )  $ ~~for ( int j = 1 ; j <= 5 ; j ++ ) {  $ ~~~cin >> a ;  $ ~~~if ( a == 1 ) {  $ ~~~~x = i ;  $ ~~~~y = j ;  $ ~~~}  $ ~~}  $ ~cout << abs ( x - 3 ) + abs ( y - 3 ) << endl ;  $ }
int main ( ) {  $ ~int m , bq = 100000 , qi ;  $ ~cin >> m ;  $ ~while ( m -- ) {  $ ~~cin >> qi ;  $ ~~bq = min ( bq , qi ) ;  $ ~}  $ ~int n ;  $ ~cin >> n ;  $ ~vector < int > a ( n ) ;  $ ~for ( int i = 0 ; i < n ; i ++ ) cin >> a [ i ] ;  $ ~sort ( a . begin ( ) , a . end ( ) , greater < int > ( ) ) ;  $ ~int ans = 0 ;  $ ~for ( int i = 0 ; i < n ; i ++ )  $ ~~if ( i % ( bq + 2 ) < bq ) ans += a [ i ] ;  $ ~cout << ans << "\n" ;  $ ~return 0 ;  $ }
int n , m ;  $ int a [ 1005 ] , c [ 1005 ] ;  $ int get_ans ( ) {  $ ~int now = 0 , ans = 0 ;  $ ~for ( int i = 0 ; i < n ; i ++ ) {  $ ~~if ( c [ now ] >= a [ i ] ) {  $ ~~~now ++ ;  $ ~~~ans ++ ;  $ ~~}  $ ~~if ( now == m ) return ans ;  $ ~}  $ ~return ans ;  $ }  $ int main ( ) {  $ ~cin >> n >> m ;  $ ~for ( int i = 0 ; i < n ; i ++ ) cin >> a [ i ] ;  $ ~for ( int j = 0 ; j < m ; j ++ ) cin >> c [ j ] ;  $ ~cout << get_ans ( ) << endl ;  $ ~return 0 ;  $ }
int item [ 100005 ] ;  $ int status [ 100005 ] ;  $ int main ( ) {  $ ~long long n ;  $ ~cin >> n ;  $ ~vector < long long > items ( n + 1 ) ;  $ ~long long sum = 0 ;  $ ~for ( int i = 1 ; i <= n ; i ++ ) {  $ ~~cin >> items [ i ] ;  $ ~~sum += items [ i ] ;  $ ~}  $ ~long long half = ( sum + 1 ) / 2 ;  $ ~long long sum2 = 0 ;  $ ~for ( int i = 1 ; i <= n ; i ++ ) {  $ ~~sum2 += items [ i ] ;  $ ~~if ( sum2 >= half ) {  $ ~~~cout << i << endl ;  $ ~~~break ;  $ ~~}  $ ~}  $ ~int pa ;  $ ~cin >> pa ;  $ ~return 0 ;  $ }
int data [ 100005 ] = { 0 } ;  $ int main ( ) {  $ ~int n ;  $ ~cin >> n ;  $ ~cout << n / 2 << endl ;  $ ~for ( int i = 1 ; i < n / 2 ; i ++ ) cout << 2 << " " ;  $ ~if ( n % 2 == 1 )  $ ~~cout << 3 << endl ;  $ ~else  $ ~~cout << 2 << endl ;  $ }
int r [ 100003 ] ;  $ int main ( ) {  $ ~int a , b , c , d , e , f , g , r [ 1000 ] , r2 [ 1000 ] , r3 [ 1000 ] , h , i , j , k , l , flag , cnt ;  $ ~string s , t ;  $ ~while ( cin >> s ) {  $ ~~cnt = 0 ;  $ ~~memset ( r , 0 , sizeof ( r ) ) ;  $ ~~for ( b = 0 ; b < s . size ( ) ; b ++ ) {  $ ~~~if ( s [ b ] == 'B' ) {  $ ~~~~r [ 1 ] ++ ;  $ ~~~} else if ( s [ b ] == 'u' ) {  $ ~~~~r [ 2 ] ++ ;  $ ~~~} else if ( s [ b ] == 'l' ) {  $ ~~~~r [ 3 ] ++ ;  $ ~~~} else if ( s [ b ] == 'b' ) {  $ ~~~~r [ 4 ] ++ ;  $ ~~~} else if ( s [ b ] == 'a' ) {  $ ~~~~r [ 5 ] ++ ;  $ ~~~} else if ( s [ b ] == 's' ) {  $ ~~~~r [ 6 ] ++ ;  $ ~~~} else if ( s [ b ] == 'r' ) {  $ ~~~~r [ 7 ] ++ ;  $ ~~~}  $ ~~}  $ ~~while ( 1 ) {  $ ~~~flag = 1 ;  $ ~~~for ( c = 1 ; c <= 7 ; c ++ ) {  $ ~~~~if ( c == 1 ) {  $ ~~~~~if ( r [ 1 ] >= 1 ) {  $ ~~~~~~r [ 1 ] -= 1 ;  $ ~~~~~} else {  $ ~~~~~~flag = 0 ;  $ ~~~~~}  $ ~~~~}  $ ~~~~if ( c == 2 ) {  $ ~~~~~if ( r [ 2 ] >= 2 ) {  $ ~~~~~~r [ 2 ] -= 2 ;  $ ~~~~~} else {  $ ~~~~~~flag = 0 ;  $ ~~~~~}  $ ~~~~}  $ ~~~~if ( c == 3 ) {  $ ~~~~~if ( r [ 3 ] >= 1 ) {  $ ~~~~~~r [ 3 ] -= 1 ;  $ ~~~~~} else {  $ ~~~~~~flag = 0 ;  $ ~~~~~}  $ ~~~~}  $ ~~~~if ( c == 4 ) {  $ ~~~~~if ( r [ 4 ] >= 1 ) {  $ ~~~~~~r [ 4 ] -= 1 ;  $ ~~~~~} else {  $ ~~~~~~flag = 0 ;  $ ~~~~~}  $ ~~~~}  $ ~~~~if ( c == 5 ) {  $ ~~~~~if ( r [ 5 ] >= 2 ) {  $ ~~~~~~r [ 5 ] -= 2 ;  $ ~~~~~} else {  $ ~~~~~~flag = 0 ;  $ ~~~~~}  $ ~~~~}  $ ~~~~if ( c == 6 ) {  $ ~~~~~if ( r [ 6 ] >= 1 ) {  $ ~~~~~~r [ 6 ] -= 1 ;  $ ~~~~~} else {  $ ~~~~~~flag = 0 ;  $ ~~~~~}  $ ~~~~}  $ ~~~~if ( c == 7 ) {  $ ~~~~~if ( r [ 7 ] >= 1 ) {  $ ~~~~~~r [ 7 ] -= 1 ;  $ ~~~~~} else {  $ ~~~~~~flag = 0 ;  $ ~~~~~}  $ ~~~~}  $ ~~~}  $ ~~~if ( flag == 1 ) {  $ ~~~~cnt ++ ;  $ ~~~} else {  $ ~~~~break ;  $ ~~~}  $ ~~}  $ ~~cout << cnt << endl ;  $ ~}  $ ~return 0 ;  $ }
int main ( ) {  $ ~int a , b , i , aa [ 1000 + 5 ] , co = 0 , s = 0 ;  $ ~cin >> a >> b ;  $ ~for ( i = 0 ; i < a ; i ++ ) {  $ ~~cin >> aa [ i ] ;  $ ~~s += aa [ i ] ;  $ ~}  $ ~s = abs ( s ) ;  $ ~while ( s > 0 ) {  $ ~~s -= b ;  $ ~~co ++ ;  $ ~}  $ ~cout << co << endl ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~int n ;  $ ~cin >> n ;  $ ~string s ;  $ ~cin >> s ;  $ ~int y = 0 , l = 0 ;  $ ~for ( int i = 0 ; i < n ; i ++ ) {  $ ~~if ( s [ i ] == '0' ) {  $ ~~~l ++ ;  $ ~~} else {  $ ~~~y ++ ;  $ ~~}  $ ~}  $ ~cout << abs ( y - l ) << endl ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~int t , s , a , b , c , q , o , r ;  $ ~cin >> a >> b >> c ;  $ ~int temp [ ] = { a , b , c } ;  $ ~if ( a + b > c && b + c > a && c + a > b ) {  $ ~~cout << 0 << endl ;  $ ~~return 0 ;  $ ~}  $ ~sort ( temp , temp + 3 ) ;  $ ~if ( temp [ 0 ] + temp [ 1 ] <= temp [ 2 ] ) { cout << temp [ 2 ] - ( temp [ 0 ] + temp [ 1 ] ) + 1 << endl ; }  $ ~return 0 ;  $ }
int main ( ) {  $ ~int n , c ;  $ ~cin >> n ;  $ ~int f = 0 ;  $ ~int a [ 101 ] = { 0 } ;  $ ~while ( n -- ) {  $ ~~cin >> c ;  $ ~~++ a [ c ] ;  $ ~~f = max ( f , a [ c ] ) ;  $ ~}  $ ~cout << f << endl ;  $ ~return 0 ;  $ }
char s [ 100 ] ;  $ int main ( ) {  $ ~cin >> s ;  $ ~int len = strlen ( s ) ;  $ ~int ans = 0 ;  $ ~for ( int i = 0 ; i < len ; i ++ ) {  $ ~~if ( s [ i ] == 'a' || s [ i ] == 'e' || s [ i ] == 'i' || s [ i ] == 'o' || s [ i ] == 'u' ) ans ++ ;  $ ~~if ( s [ i ] == '1' || s [ i ] == '3' || s [ i ] == '5' || s [ i ] == '7' || s [ i ] == '9' ) ans ++ ;  $ ~}  $ ~cout << ans << endl ;  $ ~return 0 ;  $ }
const int INF = 1e9 ;  $ int main ( ) {  $ ~int n ;  $ ~cin >> n ;  $ ~vector < bool > res ( n ) ;  $ ~for ( int i = 0 ; i < n ; i ++ ) {  $ ~~int a ;  $ ~~cin >> a ;  $ ~~if ( 360 % ( 180 - a ) ) {  $ ~~~res [ i ] = false ;  $ ~~} else {  $ ~~~res [ i ] = true ;  $ ~~}  $ ~}  $ ~for ( int i = 0 ; i < n ; i ++ ) {  $ ~~if ( res [ i ] ) {  $ ~~~cout << "YES" << endl ;  $ ~~} else {  $ ~~~cout << "NO" << endl ;  $ ~~}  $ ~}  $ ~return 0 ;  $ }
int main ( ) {  $ ~int arr [ 100 ] [ 100 ] , count = 0 ;  $ ~int n , m ;  $ ~cin >> n >> m ;  $ ~for ( int i = 1 ; i <= n ; i ++ ) {  $ ~~for ( int j = 1 ; j <= m ; j ++ ) cin >> arr [ i ] [ j ] ;  $ ~}  $ ~for ( int i = 1 ; i <= n ; i ++ ) {  $ ~~for ( int j = 1 ; j <= m ; j ++ ) {  $ ~~~if ( arr [ 1 ] [ j ] == 1 || arr [ i ] [ 1 ] == 1 || arr [ n ] [ j ] == 1 || arr [ i ] [ m ] == 1 ) count = 2 ;  $ ~~}  $ ~}  $ ~if ( count == 2 )  $ ~~cout << "2" << endl ;  $ ~else  $ ~~cout << "4" << endl ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~int n ;  $ ~cin >> n ;  $ ~int a [ 7 ] ;  $ ~int b [ 7 ] ;  $ ~int t1 , t2 ;  $ ~memset ( a , 0 , sizeof ( a ) ) ;  $ ~memset ( b , 0 , sizeof ( b ) ) ;  $ ~for ( int i = 0 ; i < n ; i ++ ) {  $ ~~cin >> t1 ;  $ ~~a [ t1 ] ++ ;  $ ~}  $ ~for ( int i = 0 ; i < n ; i ++ ) {  $ ~~cin >> t2 ;  $ ~~b [ t2 ] ++ ;  $ ~}  $ ~int a1 , a2 , count1 = 0 ;  $ ~int flag = 0 ;  $ ~for ( int i = 1 ; i <= 5 ; i ++ ) {  $ ~~if ( a [ i ] + b [ i ] == 0 ) continue ;  $ ~~if ( a [ i ] > b [ i ] ) {  $ ~~~a1 = a [ i ] ;  $ ~~~a2 = b [ i ] ;  $ ~~} else {  $ ~~~a1 = b [ i ] ;  $ ~~~a2 = a [ i ] ;  $ ~~}  $ ~~if ( ( a1 - a2 ) % 2 != 0 ) {  $ ~~~cout << "-1" << endl ;  $ ~~~flag = 1 ;  $ ~~~break ;  $ ~~}  $ ~~count1 += ( a1 - a2 ) / 2 ;  $ ~}  $ ~if ( flag == 0 ) cout << count1 / 2 << endl ;  $ }
int main ( ) {  $ ~{  $ ~~long long n , k ;  $ ~~cin >> n >> k ;  $ ~~if ( k % n != 0 )  $ ~~~cout << k / n + 1 << endl ;  $ ~~else  $ ~~~cout << k / n << endl ;  $ ~}  $ ~return 0 ;  $ }
int main ( ) {  $ ~int n ;  $ ~cin >> n ;  $ ~n *= 2 ;  $ ~bool ans = false ;  $ ~int sqr = ceil ( sqrt ( n ) ) ;  $ ~for ( int i = 1 ; i <= sqr ; i ++ ) {  $ ~~int l = 1 , r = sqr , j ;  $ ~~while ( l <= r ) {  $ ~~~j = l + ( r - l ) / 2 ;  $ ~~~int t = i * ( i + 1 ) + j * ( j + 1 ) ;  $ ~~~if ( t == n ) {  $ ~~~~ans = true ;  $ ~~~~break ;  $ ~~~} else if ( t < n )  $ ~~~~l = j + 1 ;  $ ~~~else  $ ~~~~r = j - 1 ;  $ ~~}  $ ~~if ( ans ) break ;  $ ~}  $ ~cout << ( ans ? "YES" : "NO" ) << endl ;  $ ~return 0 ;  $ }
const long long sz = 5e6 + 5 , tot = 1e7 + 5 , pt = 666e3 ;  $ bool ara [ sz ] ;  $ void makePrimes ( ) {  $ ~long long i , j , r , k = 1 ;  $ ~for ( i = 0 ; i < sz ; i ++ ) ara [ i ] = 1 ;  $ ~r = sqrt ( tot ) ;  $ ~for ( i = 1 ; i <= r / 2 ; i ++ ) {  $ ~~if ( ara [ i ] == 1 ) {  $ ~~~for ( j = ( ( 2 * i + 1 ) * ( 2 * i + 1 ) - 1 ) / 2 ; j <= sz ; j += ( 2 * i + 1 ) ) { ara [ j ] = 0 ; }  $ ~~}  $ ~}  $ }  $ int main ( ) {  $ ~makePrimes ( ) ;  $ ~long long n , m , i ;  $ ~cin >> n ;  $ ~for ( i = 1 ; ; i ++ ) {  $ ~~long long x = n * i + 1 ;  $ ~~if ( x % 2 == 0 && x != 2 )  $ ~~~break ;  $ ~~else {  $ ~~~if ( ara [ ( x - 1 ) / 2 ] == 0 ) break ;  $ ~~}  $ ~}  $ ~cout << i << endl ;  $ }
int main ( ) {  $ ~int n , a [ 102 ] , b [ 102 ] ;  $ ~int k = 0 , cnt = 0 , res = 0 ;  $ ~int vis [ 102 ] = { 0 } ;  $ ~cin >> n ;  $ ~for ( int i = 1 ; i <= n ; i ++ ) {  $ ~~cin >> a [ i ] ;  $ ~~k ++ ;  $ ~~if ( a [ i ] < 0 ) cnt ++ ;  $ ~~if ( cnt > 2 ) {  $ ~~~res ++ ;  $ ~~~b [ res ] = k - 1 ;  $ ~~~k = 1 ;  $ ~~~cnt = 1 ;  $ ~~~vis [ i - 1 ] = 1 ;  $ ~~}  $ ~}  $ ~cnt = 0 , k = 0 ;  $ ~for ( int i = n ; i >= 1 ; i -- ) {  $ ~~if ( vis [ i ] ) break ;  $ ~~k ++ ;  $ ~~if ( a [ i ] < 0 ) cnt ++ ;  $ ~}  $ ~if ( cnt ) res ++ ;  $ ~if ( res == 0 ) res ++ ;  $ ~b [ res ] = k ;  $ ~cout << res << endl ;  $ ~for ( int i = 1 ; i <= res - 1 ; i ++ ) cout << b [ i ] << ' ' ;  $ ~cout << b [ res ] << endl ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~int n , k ;  $ ~int cont = 0 ;  $ ~cin >> n >> k ;  $ ~while ( true ) {  $ ~~if ( n < k && n > 50 ) {  $ ~~~if ( k == 0 ) { cin >> n >> k ; }  $ ~~} else {  $ ~~~break ;  $ ~~}  $ ~}  $ ~int b = 50 ;  $ ~for ( int i = 0 ; i < n ; i ++ ) {  $ ~~int a ;  $ ~~cin >> a ;  $ ~~if ( a > 0 && cont < k ) {  $ ~~~cont ++ ;  $ ~~} else if ( a == b && cont >= k ) {  $ ~~~cont ++ ;  $ ~~} else {  $ ~~~break ;  $ ~~}  $ ~~b = a ;  $ ~}  $ ~cout << cont << endl ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~int n ;  $ ~unsigned long int L ;  $ ~string s ;  $ ~cin >> n ;  $ ~for ( int i = 0 ; i < n ; ++ i ) {  $ ~~cin >> s ;  $ ~~L = s . length ( ) ;  $ ~~if ( L > 10 )  $ ~~~cout << s [ 0 ] << L - 2 << s [ L - 1 ] << endl ;  $ ~~else  $ ~~~cout << s << endl ;  $ ~}  $ ~return 0 ;  $ }
int main ( ) {  $ ~int n , m , c = 0 , echo = 0 ;  $ ~bool alpha ;  $ ~string str ;  $ ~cin >> n >> m ;  $ ~for ( int i = 0 ; i < m ; i ++ ) {  $ ~~cin >> str ;  $ ~~alpha = false ;  $ ~~for ( int i = 0 ; i < n ; i ++ ) {  $ ~~~if ( str [ i ] == '0' ) {  $ ~~~~alpha = true ;  $ ~~~~c ++ ;  $ ~~~~break ;  $ ~~~}  $ ~~}  $ ~~echo = max ( echo , c ) ;  $ ~~if ( ! alpha ) { c = 0 ; }  $ ~}  $ ~cout << echo << '\n' ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~int t , s , q ;  $ ~cin >> t >> s >> q ;  $ ~int i = 0 ;  $ ~for ( ; s < t ; s *= q , i ++ ) { }  $ ~cout << i << endl ;  $ }
long long a [ 3 ] , k , sum = 1 , s = 0 ;  $ int main ( ) {  $ ~cin >> a [ 0 ] >> a [ 1 ] >> a [ 2 ] >> k ;  $ ~long long t = k / 3 ;  $ ~sort ( a , a + 3 ) ;  $ ~if ( a [ 0 ] + a [ 1 ] + a [ 2 ] - 3 <= k ) {  $ ~~cout << a [ 0 ] * a [ 1 ] * a [ 2 ] << endl ;  $ ~~return 0 ;  $ ~} else {  $ ~~if ( a [ 0 ] - 1 < t ) {  $ ~~~s ++ ;  $ ~~~sum *= a [ 0 ] ;  $ ~~~k -= a [ 0 ] - 1 ;  $ ~~}  $ ~~if ( s == 1 ) {  $ ~~~if ( a [ 1 ] - 1 < k / 2 ) {  $ ~~~~sum *= a [ 1 ] ;  $ ~~~~s ++ ;  $ ~~~~k -= a [ 1 ] - 1 ;  $ ~~~}  $ ~~}  $ ~~if ( s == 0 ) {  $ ~~~if ( k % 3 == 2 ) {  $ ~~~~sum = ( t + 1 ) * ( t + 2 ) * ( t + 2 ) ;  $ ~~~} else if ( k % 3 == 1 ) {  $ ~~~~sum = ( t + 1 ) * ( t + 1 ) * ( t + 2 ) ;  $ ~~~} else  $ ~~~~sum = ( t + 1 ) * ( t + 1 ) * ( t + 1 ) ;  $ ~~}  $ ~~if ( s == 1 ) {  $ ~~~if ( k & 1 ) {  $ ~~~~sum = sum * ( k / 2 + 1 ) * ( k / 2 + 2 ) ;  $ ~~~} else  $ ~~~~sum = sum * ( k / 2 + 1 ) * ( k / 2 + 1 ) ;  $ ~~}  $ ~~if ( s == 2 ) { sum = sum * ( k + 1 ) ; }  $ ~}  $ ~cout << sum << endl ;  $ ~return 0 ;  $ }
int n ;  $ int main ( ) {  $ ~string a , b , c ;  $ ~cin >> a >> b >> n ;  $ ~cout << a << " " << b << endl ;  $ ~for ( int i = 1 ; i <= n ; i ++ ) {  $ ~~cin >> c ;  $ ~~if ( a == c ) {  $ ~~~cin >> a ;  $ ~~~cout << a << " " << b << endl ;  $ ~~} else {  $ ~~~cin >> b ;  $ ~~~cout << a << " " << b << endl ;  $ ~~}  $ ~}  $ ~return 0 ;  $ }
int main ( ) {  $ ~long long n ;  $ ~cin >> n ;  $ ~long long cnt = 1 ;  $ ~while ( n % 3 == 0 ) n /= 3 ;  $ ~long long ans = ( n + 2 ) / 3 ;  $ ~cout << ans << endl ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~long long int n , m , sum = 0 , s ;  $ ~cin >> n ;  $ ~for ( int i = 0 ; i < n - 1 ; i ++ ) {  $ ~~cin >> m ;  $ ~~sum += m ;  $ ~}  $ ~s = n * ( n + 1 ) ;  $ ~s /= 2 ;  $ ~s -= sum ;  $ ~cout << s << endl ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~int n , k , a ;  $ ~int xx [ 100005 ] ;  $ ~while ( cin >> n >> k ) {  $ ~~int b = 0 , c = 0 ;  $ ~~for ( int i = 1 ; i <= n ; i ++ ) {  $ ~~~cin >> xx [ i ] ;  $ ~~~if ( i == k ) {  $ ~~~~a = xx [ i ] ;  $ ~~~~c = i ;  $ ~~~}  $ ~~~if ( i > k && xx [ i ] != a ) b = 1 ;  $ ~~}  $ ~~if ( b == 0 ) {  $ ~~~for ( int i = k - 1 ; i >= 0 ; i -- ) {  $ ~~~~if ( xx [ i ] != a ) {  $ ~~~~~b = i ;  $ ~~~~~break ;  $ ~~~~}  $ ~~~}  $ ~~~cout << b << endl ;  $ ~~~;  $ ~~} else  $ ~~~cout << "-1" << endl ;  $ ~}  $ ~return 0 ;  $ }
int main ( ) {  $ ~int n ;  $ ~int a , b ;  $ ~int cnt1 = 0 , cnt2 = 0 ;  $ ~cin >> n ;  $ ~while ( n -- ) {  $ ~~cin >> a >> b ;  $ ~~if ( a > 0 ) cnt1 ++ ;  $ ~~if ( a < 0 ) cnt2 ++ ;  $ ~}  $ ~if ( cnt1 <= 1 || cnt2 <= 1 ) {  $ ~~cout << "Yes" << endl ;  $ ~} else {  $ ~~cout << "No" << endl ;  $ ~}  $ ~return 0 ;  $ }
int main ( ) {  $ ~string str ;  $ ~cin >> str ;  $ ~for ( int i = 0 ; i < str . length ( ) ; i ++ ) {  $ ~~int a = str [ i ] - 48 ;  $ ~~if ( a > 4 ) { a = 9 - a ; }  $ ~~if ( ! a && ! i ) continue ;  $ ~~str [ i ] = a + '0' ;  $ ~}  $ ~cout << str << endl ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~int n ;  $ ~cin >> n ;  $ ~int arr [ n ] ;  $ ~for ( int i = 0 ; i < n ; i ++ ) { cin >> arr [ i ] ; }  $ ~for ( int i = 0 ; i < n - 1 ; i ++ ) {  $ ~~for ( int j = 0 ; j < n - i - 1 ; j ++ ) {  $ ~~~if ( arr [ j ] > arr [ j + 1 ] ) { swap ( arr [ j ] , arr [ j + 1 ] ) ; }  $ ~~}  $ ~}  $ ~if ( n % 2 == 0 ) {  $ ~~cout << arr [ n / 2 - 1 ] << endl ;  $ ~} else {  $ ~~cout << arr [ n / 2 ] << endl ;  $ ~}  $ ~return 0 ;  $ }
int main ( ) {  $ ~string s ;  $ ~cin >> s ;  $ ~int n = s . length ( ) ;  $ ~bool ans = true ;  $ ~int cnt_dit = 0 ;  $ ~int cnt_lit = 0 ;  $ ~int cnt_big = 0 ;  $ ~if ( n < 5 )  $ ~~ans = false ;  $ ~else {  $ ~~for ( int i = 0 ; i < n ; i ++ ) {  $ ~~~if ( s [ i ] >= '0' && s [ i ] <= '9' )  $ ~~~~cnt_dit ++ ;  $ ~~~else if ( s [ i ] >= 'A' && s [ i ] <= 'Z' )  $ ~~~~cnt_big ++ ;  $ ~~~else if ( s [ i ] >= 'a' && s [ i ] <= 'z' )  $ ~~~~cnt_lit ++ ;  $ ~~}  $ ~~if ( cnt_dit < 1 || cnt_big < 1 || cnt_lit < 1 ) ans = false ;  $ ~}  $ ~if ( ans )  $ ~~cout << "Correct" << endl ;  $ ~else  $ ~~cout << "Too weak" << endl ;  $ ~return 0 ;  $ }
long long n , m ;  $ char start , endd ;  $ char a [ 80 ] , b [ 80 ] ;  $ long long gcd ( long long a , long long b ) {  $ ~return ( b == 0 ? a : gcd ( b , a % b ) ) ;  $ }  $ long long lcm ( long long a , long long b ) {  $ ~return ( a * ( b / gcd ( a , b ) ) ) ;  $ }  $ void solve ( ) {  $ ~char k = start , j = start ;  $ ~n %= 4 ;  $ ~for ( int i = 0 ; i < n ; ++ i ) k = a [ k ] ;  $ ~for ( int i = 0 ; i < n ; ++ i ) j = b [ j ] ;  $ ~if ( j == endd && k == endd )  $ ~~cout << "undefined" << endl ;  $ ~else if ( k == endd )  $ ~~cout << "cw" << endl ;  $ ~else  $ ~~cout << "ccw" << endl ;  $ }  $ int main ( ) {  $ ~a [ 'v' ] = '<' ;  $ ~a [ '<' ] = '^' ;  $ ~a [ '^' ] = '>' ;  $ ~a [ '>' ] = 'v' ;  $ ~b [ 'v' ] = '>' ;  $ ~b [ '>' ] = '^' ;  $ ~b [ '^' ] = '<' ;  $ ~b [ '<' ] = 'v' ;  $ ~cin >> start >> endd ;  $ ~cin >> n ;  $ ~solve ( ) ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~int n1 , n2 ( 3 ) ;  $ ~cin >> n1 ;  $ ~for ( int i ( 0 ) ; i < n1 ; i ++ ) {  $ ~~int m ;  $ ~~cin >> m ;  $ ~~if ( ( n2 == 3 && m == 3 ) || ( n2 == 4 && m == 2 ) || ( n2 == 5 && m == 1 ) ) {  $ ~~~cout << "NO" << endl ;  $ ~~~return 0 ;  $ ~~} else  $ ~~~n2 = ( 6 - ( n2 - m ) ) ;  $ ~}  $ ~cout << "YES" << endl ;  $ }
string s ;  $ int ans , n ;  $ int main ( ) {  $ ~cin >> n ;  $ ~cin . ignore ( ) ;  $ ~getline ( cin , s ) ;  $ ~int res = 0 ;  $ ~for ( int i = 0 ; i < s . size ( ) ; i ++ ) {  $ ~~if ( s [ i ] >= 'A' && s [ i ] <= 'Z' )  $ ~~~res ++ ;  $ ~~else if ( s [ i ] == ' ' ) {  $ ~~~ans = max ( ans , res ) ;  $ ~~~res = 0 ;  $ ~~}  $ ~}  $ ~ans = max ( ans , res ) ;  $ ~cout << ans << endl ;  $ }
void compute ( ) {  $ ~int n ;  $ ~cin >> n ;  $ ~string s ;  $ ~cin >> s ;  $ ~int a [ n ] ;  $ ~for ( int i = 0 ; i < n ; i ++ ) cin >> a [ i ] ;  $ ~int res = 0 ;  $ ~for ( int i = 0 ; i < s . length ( ) - 1 ; i ++ ) {  $ ~~if ( s [ i ] == 'R' && s [ i + 1 ] == 'L' ) { res = ( res != 0 ) ? min ( ( a [ i + 1 ] - a [ i ] ) / 2 , res ) : ( a [ i + 1 ] - a [ i ] ) / 2 ; }  $ ~}  $ ~( res == 0 ) ? cout << - 1 << "\n" : cout << res << "\n" ;  $ }  $ int main ( ) {  $ ~compute ( ) ;  $ ~return 0 ;  $ }
const int mx = 1e5 + 10 ;  $ long long int sq [ mx ] ;  $ int main ( ) {  $ ~int n ;  $ ~cin >> n ;  $ ~for ( int i = 0 ; i < n ; i ++ ) { cin >> sq [ i ] ; }  $ ~long long int ans = 0 ;  $ ~for ( int i = 0 ; i < n ; i ++ ) {  $ ~~int t = 0 ;  $ ~~int j = i ;  $ ~~while ( sq [ j ] == sq [ i ] && j < n ) {  $ ~~~j ++ ;  $ ~~~t ++ ;  $ ~~}  $ ~~ans += ( 1 + t ) * ( long long int ) t / 2 ;  $ ~~i = j - 1 ;  $ ~}  $ ~cout << ans << endl ;  $ }
int main ( ) {  $ ~long long int n , a = 0 , b = 0 ;  $ ~cin >> n ;  $ ~for ( int i = 0 ; i < n ; i ++ ) {  $ ~~long long int x ;  $ ~~cin >> x ;  $ ~~a |= x ;  $ ~}  $ ~for ( int i = 0 ; i < n ; i ++ ) {  $ ~~long long int x ;  $ ~~cin >> x ;  $ ~~b |= x ;  $ ~}  $ ~cout << a + b << endl ;  $ ~return ( 6 == 000000 ) ;  $ }
int main ( ) {  $ ~string s ;  $ ~cin >> s ;  $ ~size_t pos = 0 ;  $ ~while ( pos < s . length ( ) && s [ pos ] != 'h' ) ++ pos ;  $ ~++ pos ;  $ ~while ( pos < s . length ( ) && s [ pos ] != 'e' ) ++ pos ;  $ ~++ pos ;  $ ~while ( pos < s . length ( ) && s [ pos ] != 'l' ) ++ pos ;  $ ~++ pos ;  $ ~while ( pos < s . length ( ) && s [ pos ] != 'l' ) ++ pos ;  $ ~++ pos ;  $ ~while ( pos < s . length ( ) && s [ pos ] != 'o' ) ++ pos ;  $ ~if ( pos < s . length ( ) ) {  $ ~~cout << "YES" << endl ;  $ ~} else {  $ ~~cout << "NO" << endl ;  $ ~}  $ ~return 0 ;  $ }
int main ( ) {  $ ~int n ;  $ ~int min1 , min2 , min3 , max1 , max2 , max3 ;  $ ~int S1 , S2 , S3 ;  $ ~cin >> n >> min1 >> max1 >> min2 >> max2 >> min3 >> max3 ;  $ ~if ( n == max1 + min2 + min3 ) {  $ ~~S1 = max1 ;  $ ~~S2 = min2 ;  $ ~~S3 = min3 ;  $ ~~cout << S1 << " " << S2 << " " << S3 << endl ;  $ ~} else if ( n > max1 + min2 + min3 ) {  $ ~~S1 = max1 ;  $ ~~if ( ( n - S1 - max2 ) == min3 ) {  $ ~~~S2 = max2 ;  $ ~~~S3 = min3 ;  $ ~~} else if ( ( n - S1 - max2 ) > min3 ) {  $ ~~~S2 = max2 ;  $ ~~~S3 = n - S1 - S2 ;  $ ~~} else {  $ ~~~S2 = n - S1 - min3 ;  $ ~~~S3 = min3 ;  $ ~~}  $ ~~cout << S1 << " " << S2 << " " << S3 << endl ;  $ ~} else {  $ ~~S1 = n - min2 - min3 ;  $ ~~S2 = min2 ;  $ ~~S3 = min3 ;  $ ~~cout << S1 << " " << S2 << " " << S3 << endl ;  $ ~}  $ ~return 0 ;  $ }
int main ( ) {  $ ~long long n ;  $ ~cin >> n ;  $ ~long long num [ n ] ;  $ ~long long Min = 9999999999 ;  $ ~for ( int i = 1 ; i <= n ; i ++ ) {  $ ~~cin >> num [ i ] ;  $ ~~Min = min ( Min , num [ i ] ) ;  $ ~}  $ ~long long mindiff = 9999999999 ;  $ ~long long Count = 0 ;  $ ~long long flg = - 1 ;  $ ~for ( int i = 1 ; i <= n ; i ++ ) {  $ ~~if ( num [ i ] == Min ) {  $ ~~~if ( flg == 0 ) {  $ ~~~~mindiff = min ( mindiff , Count ) ;  $ ~~~~Count = 0 ;  $ ~~~} else  $ ~~~~flg = 0 ;  $ ~~}  $ ~~if ( flg == 0 ) Count ++ ;  $ ~}  $ ~cout << mindiff << endl ;  $ }
const int ABC = 1e6 + 6 ;  $ void speed ( ) { }  $ int main ( ) {  $ ~bool flag = true ;  $ ~speed ( ) ;  $ ~int n ;  $ ~cin >> n ;  $ ~char ch [ n ] [ n ] ;  $ ~for ( int i = 0 ; i < n ; ++ i )  $ ~~for ( int j = 0 ; j < n ; ++ j ) cin >> ch [ i ] [ j ] ;  $ ~char a = ch [ 0 ] [ 0 ] ;  $ ~char b = ch [ 0 ] [ 1 ] ;  $ ~for ( int i = 0 ; i < n ; ++ i )  $ ~~for ( int j = 0 ; j < n ; ++ j ) {  $ ~~~if ( i == j ) {  $ ~~~~if ( ch [ i ] [ j ] != a ) flag = false ;  $ ~~~} else if ( i == n - 1 - j ) {  $ ~~~~if ( ch [ i ] [ j ] != a ) flag = false ;  $ ~~~} else {  $ ~~~~if ( ch [ i ] [ j ] == a || ch [ i ] [ j ] != b ) flag = false ;  $ ~~~}  $ ~~}  $ ~if ( flag )  $ ~~puts ( "YES" ) ;  $ ~else  $ ~~puts ( "NO" ) ;  $ }
int main ( ) {  $ ~int n { } , c { } ;  $ ~string str , str2 ;  $ ~cin >> str >> str2 ;  $ ~while ( c < str2 . length ( ) ) {  $ ~~if ( str [ n ] == str2 [ c ] ) n ++ ;  $ ~~c ++ ;  $ ~}  $ ~cout << n + 1 << endl ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~int n ;  $ ~cin >> n ;  $ ~int arr [ n ] [ n ] ;  $ ~int row [ n ] , col [ n ] ;  $ ~memset ( row , 0 , sizeof ( row ) ) ;  $ ~memset ( col , 0 , sizeof ( col ) ) ;  $ ~for ( int i = 0 ; i < n ; i ++ ) {  $ ~~for ( int j = 0 ; j < n ; j ++ ) {  $ ~~~cin >> arr [ i ] [ j ] ;  $ ~~~row [ i ] = row [ i ] + arr [ i ] [ j ] ;  $ ~~~col [ j ] = col [ j ] + arr [ i ] [ j ] ;  $ ~~}  $ ~}  $ ~int count = 0 ;  $ ~for ( int i = 0 ; i < n ; i ++ ) {  $ ~~for ( int j = 0 ; j < n ; j ++ ) {  $ ~~~if ( col [ j ] - row [ i ] > 0 ) count ++ ;  $ ~~}  $ ~}  $ ~cout << count << endl ;  $ }
int main ( ) {  $ ~int n , arr [ 100000 ] , prr [ 100000 ] ;  $ ~int ans = 0 , price = INT_MAX ;  $ ~cin >> n ;  $ ~for ( int i = 0 ; i < n ; i ++ ) { cin >> arr [ i ] >> prr [ i ] ; }  $ ~for ( int i = 0 ; i < n ; i ++ ) {  $ ~~price = min ( price , prr [ i ] ) ;  $ ~~ans += price * arr [ i ] ;  $ ~}  $ ~cout << ans << endl ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~int n , l , r , ql , qr ;  $ ~int min_result = INT_MAX ;  $ ~cin >> n >> l >> r >> ql >> qr ;  $ ~vector < int > w ( n + 1 ) ;  $ ~w [ 0 ] = 0 ;  $ ~int x ;  $ ~for ( int i = 1 ; i <= n ; i ++ ) {  $ ~~cin >> x ;  $ ~~w [ i ] = x + w [ i - 1 ] ;  $ ~}  $ ~for ( int i = 0 ; i <= n ; i ++ ) {  $ ~~int wl = w [ i ] ;  $ ~~int wr = w [ n ] - w [ i ] ;  $ ~~int nl = i ;  $ ~~int nr = n - i ;  $ ~~int p = wl * l + wr * r ;  $ ~~int d = nl - nr ;  $ ~~int ad = abs ( d ) ;  $ ~~int pen ;  $ ~~if ( ad == n ) {  $ ~~~pen = n - 1 ;  $ ~~} else if ( ad >= 2 ) {  $ ~~~pen = ad - 1 ;  $ ~~} else {  $ ~~~pen = 0 ;  $ ~~}  $ ~~if ( d > 0 ) {  $ ~~~p += pen * ql ;  $ ~~} else {  $ ~~~p += pen * qr ;  $ ~~}  $ ~~min_result = min ( min_result , p ) ;  $ ~}  $ ~cout << min_result << endl ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~long long n ;  $ ~cin >> n ;  $ ~if ( n == 2 )  $ ~~cout << 2 << endl ;  $ ~else  $ ~~cout << 1 << endl ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~string a , b ;  $ ~cin >> a >> b ;  $ ~int n ;  $ ~cin >> n ;  $ ~while ( n -- ) {  $ ~~cout << a << " " << b << "\n" ;  $ ~~string killed , newPerson ;  $ ~~cin >> killed >> newPerson ;  $ ~~if ( a == killed )  $ ~~~a = newPerson ;  $ ~~else  $ ~~~b = newPerson ;  $ ~}  $ ~cout << a << " " << b << "\n" ;  $ ~return 0 ;  $ }
const int maxn = 205 ;  $ int t , s , q ;  $ int ans = 0 ;  $ int x ;  $ int main ( ) {  $ ~cin >> t >> s >> q ;  $ ~while ( s < t ) {  $ ~~s = s * q ;  $ ~~ans ++ ;  $ ~}  $ ~cout << ans << endl ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~int n , s , i ;  $ ~cin >> n >> s ;  $ ~int station1 [ n ] , station2 [ n ] ;  $ ~for ( i = 0 ; i < n ; i ++ ) cin >> station1 [ i ] ;  $ ~for ( i = 0 ; i < n ; i ++ ) cin >> station2 [ i ] ;  $ ~if ( station1 [ 0 ] == 0 ) {  $ ~~cout << "NO" << endl ;  $ ~~exit ( 0 ) ;  $ ~} else if ( station1 [ s - 1 ] ) {  $ ~~cout << "YES" << endl ;  $ ~~exit ( 0 ) ;  $ ~} else if ( station2 [ s - 1 ] == 0 ) {  $ ~~cout << "NO" << endl ;  $ ~~exit ( 0 ) ;  $ ~} else {  $ ~~for ( i = s - 1 ; i < n ; i ++ ) {  $ ~~~if ( station1 [ i ] & station2 [ i ] ) {  $ ~~~~cout << "YES" << endl ;  $ ~~~~exit ( 0 ) ;  $ ~~~}  $ ~~}  $ ~~cout << "NO" << endl ;  $ ~}  $ ~return 0 ;  $ }
int main ( ) {  $ ~stack < char > st ;  $ ~string s ;  $ ~cin >> s ;  $ ~for ( int i = s . size ( ) - 1 ; i >= 0 ; i -- ) {  $ ~~char c = s [ i ] ;  $ ~~if ( ! st . empty ( ) && st . top ( ) == c ) {  $ ~~~st . pop ( ) ;  $ ~~} else  $ ~~~st . push ( c ) ;  $ ~}  $ ~stack < char > t ;  $ ~while ( ! st . empty ( ) ) {  $ ~~char a = st . top ( ) ;  $ ~~cout << a ;  $ ~~st . pop ( ) ;  $ ~}  $ ~cout << endl ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~int a , b , r ;  $ ~cin >> a >> b >> r ;  $ ~r *= 2 ;  $ ~if ( r > a || r > b ) {  $ ~~cout << "Second" << endl ;  $ ~} else  $ ~~cout << "First" << endl ;  $ }
int a [ 110000 ] ;  $ int b [ 110000 ] ;  $ int c [ 110000 ] ;  $ int main ( ) {  $ ~int n ;  $ ~while ( cin >> n ) {  $ ~~int ans = 0 ;  $ ~~for ( int i = 0 ; i < n ; i ++ ) {  $ ~~~cin >> a [ i ] ;  $ ~~~if ( a [ i ] > a [ i - 1 ] )  $ ~~~~b [ i ] = b [ i - 1 ] + 1 ;  $ ~~~else  $ ~~~~b [ i ] = 1 ;  $ ~~~ans = max ( ans , b [ i ] ) ;  $ ~~}  $ ~~if ( ans < n ) ans ++ ;  $ ~~for ( int i = n - 1 ; i >= 0 ; i -- ) {  $ ~~~if ( a [ i ] < a [ i + 1 ] )  $ ~~~~c [ i ] = c [ i + 1 ] + 1 ;  $ ~~~else  $ ~~~~c [ i ] = 1 ;  $ ~~~if ( a [ i + 1 ] - a [ i - 1 ] > 1 ) ans = max ( ans , c [ i + 1 ] + b [ i - 1 ] + 1 ) ;  $ ~~}  $ ~~cout << ans << endl ;  $ ~}  $ ~return 0 ;  $ }
int main ( ) {  $ ~double a1 , a , b , c , d , e , f ;  $ ~cin >> a >> b >> c >> d >> e >> f ;  $ ~a1 = ( ( ( ( ( 1 / a ) * b ) / c ) * d ) / e ) * f ;  $ ~if ( c == 0 && d > 0 )  $ ~~cout << "Ron" << endl ;  $ ~else if ( a == 0 && b > 0 && d > 0 )  $ ~~cout << "Ron" << endl ;  $ ~else if ( a1 > 1 )  $ ~~cout << "Ron" << endl ;  $ ~else  $ ~~cout << "Hermione" << endl ;  $ ~return 0 ;  $ }
int movement ;  $ int main ( ) {  $ ~int a [ 100010 ] , p [ 100010 ] , current_minimum , n , min_price = 0 ;  $ ~cin >> n ;  $ ~for ( int i = 1 ; i <= n ; i ++ ) { cin >> a [ i ] >> p [ i ] ; }  $ ~current_minimum = p [ 1 ] ;  $ ~for ( int i = 1 ; i <= n ; i ++ ) {  $ ~~if ( p [ i ] < current_minimum ) { current_minimum = p [ i ] ; }  $ ~~min_price = min_price + ( a [ i ] * current_minimum ) ;  $ ~}  $ ~cout << min_price << endl ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~string s ;  $ ~cin >> s ;  $ ~int c , count = 0 ;  $ ~for ( int i = 0 ; i < s . length ( ) ; i ++ ) {  $ ~~c = 1 ;  $ ~~for ( int j = i + 1 ; j < s . length ( ) && s [ i ] == s [ j ] ; j ++ , i ++ ) c ++ ;  $ ~~if ( c % 2 == 0 ) count ++ ;  $ ~}  $ ~cout << count << endl ;  $ ~return 0 ;  $ }
const int maxn = 1e7 + 5 ;  $ int n ;  $ int x , y ;  $ int cnt1 ;  $ int cnt2 ;  $ int main ( ) {  $ ~cin >> n ;  $ ~while ( n -- ) {  $ ~~cin >> x >> y ;  $ ~~if ( x <= 0 )  $ ~~~cnt1 ++ ;  $ ~~else  $ ~~~cnt2 ++ ;  $ ~}  $ ~if ( cnt1 > 1 && cnt2 > 1 )  $ ~~cout << "No" << endl ;  $ ~else  $ ~~cout << "Yes" << endl ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~int n , s = 0 ;  $ ~cin >> n ;  $ ~while ( n != 0 ) {  $ ~~if ( n >= 100 ) {  $ ~~~s += ( n / 100 ) ;  $ ~~~n = n % 100 ;  $ ~~} else if ( n >= 20 ) {  $ ~~~s += ( n / 20 ) ;  $ ~~~n = n % 20 ;  $ ~~} else if ( n >= 10 ) {  $ ~~~s += ( n / 10 ) ;  $ ~~~n = n % 10 ;  $ ~~} else if ( n >= 5 ) {  $ ~~~s += ( n / 5 ) ;  $ ~~~n = n % 5 ;  $ ~~} else if ( n >= 1 ) {  $ ~~~s += ( n / 1 ) ;  $ ~~~n = n % 1 ;  $ ~~}  $ ~}  $ ~cout << s << endl ;  $ }
int main ( ) {  $ ~string s , t , u , v ;  $ ~cin >> s >> t ;  $ ~int n , i ;  $ ~cin >> n ;  $ ~cout << s << " " << t << "\n" ;  $ ~for ( i = 0 ; i < n ; i ++ ) {  $ ~~cin >> u >> v ;  $ ~~if ( u == s )  $ ~~~s = v ;  $ ~~else  $ ~~~t = v ;  $ ~~cout << s << " " << t << "\n" ;  $ ~}  $ }
map < long long , long long > mp ;  $ void add ( long long a , long long w ) {  $ ~if ( mp . find ( a ) == mp . end ( ) ) mp [ a ] = 0 ;  $ ~mp [ a ] += w ;  $ }  $ long long val ( long long a ) {  $ ~if ( mp . find ( a ) == mp . end ( ) ) return 0 ;  $ ~return mp [ a ] ;  $ }  $ int main ( ) {  $ ~int t ;  $ ~cin >> t ;  $ ~while ( t -- ) {  $ ~~int s ;  $ ~~cin >> s ;  $ ~~if ( s == 1 ) {  $ ~~~long long u , v , w ;  $ ~~~cin >> u >> v >> w ;  $ ~~~while ( u != v ) {  $ ~~~~if ( u > v ) {  $ ~~~~~add ( u , w ) ;  $ ~~~~~u >> = 1 ;  $ ~~~~} else {  $ ~~~~~add ( v , w ) ;  $ ~~~~~v >> = 1 ;  $ ~~~~}  $ ~~~}  $ ~~} else {  $ ~~~long long u , v , ans = 0 ;  $ ~~~cin >> u >> v ;  $ ~~~while ( v != u ) {  $ ~~~~if ( u > v ) {  $ ~~~~~ans += val ( u ) ;  $ ~~~~~u >> = 1 ;  $ ~~~~} else {  $ ~~~~~ans += val ( v ) ;  $ ~~~~~v >> = 1 ;  $ ~~~~}  $ ~~~}  $ ~~~cout << ans << endl ;  $ ~~}  $ ~}  $ ~return 0 ;  $ }
int main ( ) {  $ ~int a , b , c , x , y , z ;  $ ~cin >> a >> b >> c ;  $ ~for ( int i = 1 ; i <= a ; i ++ ) {  $ ~~if ( a % i == 0 ) {  $ ~~~x = i ;  $ ~~~y = a / i ;  $ ~~~if ( b % x == 0 ) {  $ ~~~~z = b / x ;  $ ~~~~if ( c % z == 0 && c / z == y ) break ;  $ ~~~} else if ( b % y == 0 ) {  $ ~~~~z = b / y ;  $ ~~~~if ( c % z == 0 && c / z == x ) break ;  $ ~~~}  $ ~~}  $ ~}  $ ~cout << ( x + y + z ) * 4 << endl ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~int n ;  $ ~cin >> n ;  $ ~int cnt = 0 ;  $ ~while ( n -- ) {  $ ~~int a , b ;  $ ~~cin >> a >> b ;  $ ~~if ( ( b - a ) >= 2 ) { cnt ++ ; }  $ ~}  $ ~cout << cnt << endl ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~int n , k ;  $ ~cin >> n >> k ;  $ ~for ( int i = 0 ; i < k ; i ++ ) {  $ ~~if ( ( n % 10 ) != 0 )  $ ~~~n -- ;  $ ~~else  $ ~~~n /= 10 ;  $ ~}  $ ~cout << n << endl ;  $ ~return 0 ;  $ }
int n , m ;  $ string s ;  $ int main ( ) {  $ ~cin >> n ;  $ ~for ( int i = 1 ; i <= n ; i ++ ) {  $ ~~cin >> m >> s ;  $ ~~if ( m > 2 ) {  $ ~~~cout << "YES" << endl ;  $ ~~~cout << 2 << endl ;  $ ~~~cout << s [ 0 ] << " " ;  $ ~~~for ( int i = 1 ; i < s . size ( ) ; i ++ ) cout << s [ i ] ;  $ ~~} else if ( s [ 0 ] < s [ 1 ] ) {  $ ~~~cout << "YES" << endl ;  $ ~~~cout << 2 << endl ;  $ ~~~cout << s [ 0 ] << " " << s [ 1 ] ;  $ ~~} else  $ ~~~cout << "NO" ;  $ ~~cout << endl ;  $ ~}  $ }
int main ( ) {  $ ~long long int n , a [ 1000 ] , result ;  $ ~cin >> n ;  $ ~for ( int i = 0 ; i < n ; i ++ ) cin >> a [ i ] ;  $ ~sort ( a , a + n ) ;  $ ~result = a [ n - 1 ] - a [ 0 ] - n + 1 ;  $ ~cout << result << endl ;  $ }
int main ( ) {  $ ~int n , i , sum = 1 , cnt = 0 ;  $ ~cin >> n ;  $ ~for ( i = 1 ; n > 0 ; ) {  $ ~~cnt ++ ;  $ ~~i ++ ;  $ ~~sum = sum + i ;  $ ~~n = n - sum ;  $ ~}  $ ~cout << cnt << endl ;  $ ~return 0 ;  $ }
int n ;  $ long long a [ 100001 ] ;  $ long long b [ 100001 ] ;  $ long long dp [ 100001 ] ;  $ int main ( ) {  $ ~cin >> n ;  $ ~for ( int i = 1 ; i <= n ; i ++ ) { cin >> a [ i ] ; }  $ ~for ( int i = 1 ; i <= n - 1 ; i ++ ) { b [ i ] = abs ( a [ i ] - a [ i + 1 ] ) ; }  $ ~dp [ 1 ] = 0 ;  $ ~for ( int i = 2 ; i <= n ; i ++ ) {  $ ~~if ( i % 2 == 0 ) {  $ ~~~dp [ i ] = dp [ i - 1 ] + b [ i - 1 ] ;  $ ~~} else {  $ ~~~dp [ i ] = dp [ i - 1 ] - b [ i - 1 ] ;  $ ~~}  $ ~}  $ ~sort ( dp + 1 , dp + 1 + n ) ;  $ ~cout << dp [ n ] - dp [ 1 ] << '\n' ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~string a ;  $ ~cin >> a ;  $ ~cout << ( ( a . size ( ) + 1 ) * 26 ) - a . size ( ) << endl ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~int q , n , i ;  $ ~string s ;  $ ~cin >> q ;  $ ~for ( i = 0 ; i < q ; i ++ ) {  $ ~~cin >> n >> s ;  $ ~~if ( n == 2 && s [ 0 ] >= s [ 1 ] )  $ ~~~cout << "NO\n" ;  $ ~~else  $ ~~~cout << "YES\n2\n" << s [ 0 ] << " " << s . substr ( 1 , n ) << "\n" ;  $ ~}  $ ~return 0 ;  $ }
int main ( ) {  $ ~int Len , n ;  $ ~string s ;  $ ~cin >> n ;  $ ~while ( n -- ) {  $ ~~cin >> Len >> s ;  $ ~~bool Flag = true ;  $ ~~for ( int i = 0 ; i < Len / 2 ; i ++ ) {  $ ~~~int Diff = abs ( s [ i ] - s [ Len - i - 1 ] ) ;  $ ~~~if ( Diff != 0 && Diff != 2 )  $ ~~~{  $ ~~~~Flag = false ;  $ ~~~~cout << "NO" << endl ;  $ ~~~~break ;  $ ~~~}  $ ~~}  $ ~~if ( Flag ) { cout << "YES" << endl ; }  $ ~}  $ ~return 0 ;  $ }
int a [ 100010 ] , b [ 100010 ] ;  $ int main ( ) {  $ ~int n ;  $ ~while ( cin >> n ) {  $ ~~for ( int i = 0 ; i < n ; ++ i ) cin >> a [ i ] >> b [ i ] ;  $ ~~sort ( a , a + n ) ;  $ ~~sort ( b , b + n ) ;  $ ~~int s = 1 ;  $ ~~int t = 1 ;  $ ~~for ( int i = 1 ; i < n ; ++ i ) {  $ ~~~if ( a [ i ] != a [ i - 1 ] ) ++ s ;  $ ~~~if ( b [ i ] != b [ i - 1 ] ) ++ t ;  $ ~~}  $ ~~if ( s <= t )  $ ~~~cout << s << endl ;  $ ~~else  $ ~~~cout << t << endl ;  $ ~}  $ ~return 0 ;  $ }
int main ( ) {  $ ~long long int n ;  $ ~cin >> n ;  $ ~if ( n >= 0 ) {  $ ~~cout << n << endl ;  $ ~} else {  $ ~~long long int p = n * ( - 1 ) ;  $ ~~long long int digit1 = ( n * ( - 1 ) ) % 10 ;  $ ~~p = p / 10 ;  $ ~~long long int digit2 = p % 10 ;  $ ~~if ( digit1 >= digit2 ) {  $ ~~~cout << n / 10 << endl ;  $ ~~} else {  $ ~~~long long int q = n % 10 ;  $ ~~~n = n / 10 ;  $ ~~~long long int r = n % 10 ;  $ ~~~n = n + q - r ;  $ ~~~cout << n << endl ;  $ ~~}  $ ~}  $ ~return 0 ;  $ }
const int N = 35 ;  $ int main ( ) {  $ ~int n , h [ N ] , a [ N ] , i , j , count ;  $ ~cin >> n ;  $ ~for ( i = 0 ; i < n ; i ++ ) { cin >> h [ i ] >> a [ i ] ; }  $ ~for ( i = count = 0 ; i < n ; i ++ ) {  $ ~~for ( j = 0 ; j < n ; j ++ ) {  $ ~~~if ( i == j ) continue ;  $ ~~~if ( h [ i ] == a [ j ] ) count ++ ;  $ ~~}  $ ~}  $ ~cout << count << endl ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~int n , i , cnt , res = 0 , a , b , c ;  $ ~cin >> n ;  $ ~for ( i = 1 ; i <= n ; i ++ ) {  $ ~~cnt = 0 ;  $ ~~cin >> a >> b >> c ;  $ ~~if ( a ) cnt ++ ;  $ ~~if ( b ) cnt ++ ;  $ ~~if ( c ) cnt ++ ;  $ ~~if ( cnt >= 2 ) res ++ ;  $ ~}  $ ~cout << res << endl ;  $ }
bool comp ( int a , int b ) {  $ ~return a > b ;  $ }  $ int main ( ) {  $ ~int w , h , w1 , w2 , h1 , h2 ;  $ ~cin >> w >> h >> w1 >> h1 >> w2 >> h2 ;  $ ~for ( int x = h ; x > 0 ; x -- ) {  $ ~~w += x ;  $ ~~if ( x == h1 ) w -= w1 ;  $ ~~if ( x == h2 ) w -= w2 ;  $ ~~if ( w < 0 ) w = 0 ;  $ ~}  $ ~cout << w << "\n" ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~int n , c ;  $ ~while ( cin >> n >> c ) {  $ ~~int a [ 200005 ] ;  $ ~~for ( int i = 0 ; i < n ; i ++ ) { cin >> a [ i ] ; }  $ ~~int cnt = 1 ;  $ ~~for ( int i = 1 ; i < n ; i ++ ) {  $ ~~~if ( a [ i ] - a [ i - 1 ] <= c )  $ ~~~~cnt ++ ;  $ ~~~else  $ ~~~~cnt = 1 ;  $ ~~}  $ ~~cout << cnt << endl ;  $ ~}  $ }
const int INF = ( int ) 2e9 ;  $ const double EPS = ( double ) 1e-9 ;  $ const double PI = ( double ) acos ( - 1 ) ;  $ const long long MOD = ( long long ) 1e9 + 7 ;  $ int gcd ( int a , int b ) {  $ ~if ( a < b ) swap ( a , b ) ;  $ ~if ( a % b == 0 ) return b ;  $ ~gcd ( a % b , b ) ;  $ }  $ bool palin ( string s ) {  $ ~int len = s . length ( ) ;  $ ~for ( int i = 0 ; i < len / 2 ; i ++ ) {  $ ~~if ( s [ i ] != s [ len - 1 - i ] ) { return false ; }  $ ~}  $ ~return true ;  $ }  $ void fast_io ( ) { }  $ int main ( ) {  $ ~string s [ 5 ] , a , b ;  $ ~int n ;  $ ~cin >> s [ 0 ] >> s [ 1 ] ;  $ ~cout << s [ 0 ] << " " << s [ 1 ] << "\n" ;  $ ~cin >> n ;  $ ~while ( n -- ) {  $ ~~cin >> a >> b ;  $ ~~if ( s [ 0 ] == a )  $ ~~~s [ 0 ] = b ;  $ ~~else  $ ~~~s [ 1 ] = b ;  $ ~~cout << s [ 0 ] << " " << s [ 1 ] << "\n" ;  $ ~}  $ ~return 0 ;  $ }
int main ( ) {  $ ~int n , p ;  $ ~cin >> n >> p ;  $ ~string a ;  $ ~int b = 97 ;  $ ~for ( int i = 0 ; i < n ; i ++ ) { a += 97 + i % p ; }  $ ~cout << a << endl ;  $ }
int main ( ) {  $ ~int n , m ;  $ ~while ( cin >> n >> m ) {  $ ~~int v [ 110 ] , l = 0 ;  $ ~~for ( int i = 1 ; i <= n ; i ++ ) {  $ ~~~int a , b ;  $ ~~~cin >> a >> b ;  $ ~~~for ( int j = a ; j < b ; j ++ ) { v [ j ] = 1 ; }  $ ~~~if ( b == m ) v [ m ] = 1 ;  $ ~~}  $ ~~int sw = 0 ;  $ ~~for ( int i = 0 ; i <= m ; i ++ ) {  $ ~~~if ( v [ i ] != 1 ) sw = 1 ;  $ ~~}  $ ~~if ( sw == 1 )  $ ~~~cout << "NO" << endl ;  $ ~~else  $ ~~~cout << "YES" << endl ;  $ ~}  $ }
long long mod = 1000000007 ;  $ double pi = 3.1415926535897932384626433832 ;  $ long long int fast_exp ( long long int base , long long int ex ) {  $ ~long long int res = 1 ;  $ ~while ( ex > 0 ) {  $ ~~if ( ex % 2 == 1 ) res = ( res * base ) % mod ;  $ ~~base = ( base * base ) % mod ;  $ ~~ex /= 2 ;  $ ~}  $ ~return res % mod ;  $ }  $ long long int gcd ( long long int a , long long int b ) {  $ ~if ( b == 0 ) return a ;  $ ~return gcd ( b , a % b ) ;  $ }  $ long long fi ( long long a , long long b ) {  $ ~long long o = 1 ;  $ ~for ( long long i = 62 ; i >= 0 ; i -- ) {  $ ~~long long r = o << i ;  $ ~~long long k = a & r ;  $ ~~if ( k <= b ) a = k ;  $ ~}  $ ~return o ;  $ }  $ long long solve ( long long a , long long v ) {  $ ~if ( a == 0 ) return 0 ;  $ ~long long n = fi ( v , a ) ;  $ ~if ( n > a ) return 0 ;  $ ~long long o = 1 ;  $ ~long long ans = 0 ;  $ ~long long c = __builtin_popcount ( v ) ;  $ ~long long w = v ;  $ ~for ( long long i = 62 ; i >= 0 ; i -- ) {  $ ~~long long r = o << i ;  $ ~~long long t = r & n ;  $ ~~long long d = r & v ;  $ ~~if ( t == 0 ) continue ;  $ ~~if ( d ) {  $ ~~~w ^ = r ;  $ ~~~continue ;  $ ~~}  $ ~~long long u = __builtin_popcount ( w ) ;  $ ~~long long first = i - u ;  $ ~~first = o << first ;  $ ~~ans += first ;  $ ~}  $ ~return ans ;  $ }  $ int main ( ) {  $ ~long long k , r ;  $ ~cin >> k >> r ;  $ ~for ( long long i = 1 ; i <= 10 ; i ++ ) {  $ ~~long long w = k * i ;  $ ~~if ( w % 10 == r || ! ( w % 10 ) ) {  $ ~~~cout << i << "\n" ;  $ ~~~return 0 ;  $ ~~}  $ ~}  $ ~return 0 ;  $ }
int z ;  $ string s ;  $ int main ( ) {  $ ~cin >> s ;  $ ~for ( char a = 'a' ; a <= 'z' ; a ++ ) {  $ ~~int c = 0 ;  $ ~~for ( int i = 0 ; i < s . size ( ) ; i ++ ) {  $ ~~~if ( s [ i ] == a ) c ++ ;  $ ~~}  $ ~~if ( c ) z ++ ;  $ ~}  $ ~if ( z % 2 == 0 )  $ ~~cout << "CHAT WITH HER!" << endl ;  $ ~else  $ ~~cout << "IGNORE HIM!" << endl ;  $ ~return 0 ;  $ }
const int maxn = 1e5 + 100 ;  $ vector < int > v [ maxn ] , w [ maxn ] ;  $ long long a [ maxn ] ;  $ bool d [ maxn ] ;  $ long long c [ maxn ] [ 5 ] ;  $ long long n , m ;  $ bool mark [ maxn ] [ 2 ] ;  $ void dfs1 ( long long i ) {  $ ~c [ i ] [ 0 ] = 1 ;  $ ~mark [ i ] [ 0 ] = 1 ;  $ ~for ( long long y = 0 ; y < v [ i ] . size ( ) ; y ++ ) {  $ ~~if ( ! mark [ v [ i ] [ y ] ] [ 0 ] ) { dfs1 ( v [ i ] [ y ] ) ; }  $ ~}  $ }  $ void dfs2 ( long long i ) {  $ ~mark [ i ] [ 1 ] = 1 ;  $ ~c [ i ] [ 1 ] = 1 ;  $ ~if ( a [ i ] == 1 ) return ;  $ ~for ( long long y = 0 ; y < w [ i ] . size ( ) ; y ++ ) {  $ ~~if ( ! mark [ w [ i ] [ y ] ] [ 1 ] ) { dfs2 ( w [ i ] [ y ] ) ; }  $ ~}  $ }  $ int main ( ) {  $ ~cin >> n >> m ;  $ ~for ( long long y = 1 ; y <= n ; y ++ ) {  $ ~~cin >> a [ y ] ;  $ ~~if ( a [ y ] == 1 ) { v [ 100000 + 1 ] . push_back ( y ) ; }  $ ~~if ( a [ y ] == 2 ) { w [ 100000 + 1 ] . push_back ( y ) ; }  $ ~}  $ ~while ( m -- ) {  $ ~~long long i , j ;  $ ~~cin >> i >> j ;  $ ~~v [ i ] . push_back ( j ) ;  $ ~~w [ j ] . push_back ( i ) ;  $ ~}  $ ~dfs1 ( 100000 + 1 ) ;  $ ~dfs2 ( 100000 + 1 ) ;  $ ~for ( long long y = 1 ; y <= n ; y ++ ) { cout << ( c [ y ] [ 0 ] && c [ y ] [ 1 ] ) << endl ; }  $ }
const int MOD = 1e9 + 7 , maxN = 5e3 + 5 ;  $ int i , j , sum = 0 , dp [ maxN ] [ maxN ] ;  $ string s , t ;  $ int main ( ) {  $ ~cin >> s >> t ;  $ ~for ( i = 1 ; i <= s . size ( ) ; i ++ ) {  $ ~~for ( j = 1 ; j <= t . size ( ) ; j ++ ) {  $ ~~~dp [ i ] [ j ] = dp [ i ] [ j - 1 ] ;  $ ~~~if ( s [ i - 1 ] == t [ j - 1 ] ) { dp [ i ] [ j ] += dp [ i - 1 ] [ j - 1 ] + 1 ; }  $ ~~~dp [ i ] [ j ] %= MOD ;  $ ~~}  $ ~}  $ ~for ( i = 1 ; i <= s . size ( ) ; i ++ ) { sum = ( sum + dp [ i ] [ t . size ( ) ] ) % MOD ; }  $ ~cout << sum << endl ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~int n , freq = 1 ;  $ ~;  $ ~cin >> n ;  $ ~int ans = 0 ;  $ ~int min ;  $ ~cin >> min ;  $ ~for ( int i = 1 ; i < n ; i ++ ) {  $ ~~int temp ;  $ ~~cin >> temp ;  $ ~~if ( temp < min ) {  $ ~~~min = temp ;  $ ~~~ans = i ;  $ ~~~freq = 1 ;  $ ~~} else if ( temp == min )  $ ~~~freq ++ ;  $ ~}  $ ~if ( freq > 1 )  $ ~~cout << "Still Rozdil" << endl ;  $ ~else  $ ~~cout << ans + 1 << endl ;  $ ~return 0 ;  $ }
int arr1 [ 110 ] ;  $ int arr2 [ 110 ] ;  $ int main ( ) {  $ ~int i , j , ind = 0 , count = 0 , n ;  $ ~cin >> n ;  $ ~for ( i = 1 ; i <= n ; ++ i ) cin >> arr1 [ i ] >> arr2 [ i ] ;  $ ~for ( i = 1 ; i <= n ; ++ i ) {  $ ~~ind = 0 ;  $ ~~for ( j = 1 ; j <= n ; ++ j ) {  $ ~~~if ( i != j ) {  $ ~~~~if ( arr2 [ j ] == arr1 [ i ] ) ind = 1 ;  $ ~~~}  $ ~~}  $ ~~if ( ! ind ) count ++ ;  $ ~}  $ ~cout << count << endl ;  $ ~return 0 ;  $ }
const int L = 600 ;  $ int sum = 1 ;  $ int a [ 300 ] ;  $ int main ( ) {  $ ~int n ;  $ ~cin >> n ;  $ ~for ( int i = 1 ; i <= n ; i ++ ) {  $ ~~if ( i == 1 )  $ ~~~cout << 2 << endl ;  $ ~~else  $ ~~~cout << ( long long ) i * ( i + 1 ) * ( i + 1 ) - ( long long ) ( i - 1 ) << endl ;  $ ~}  $ }
int n ;  $ int a [ 100005 ] = { 0 } ;  $ int main ( ) {  $ ~cin >> n ;  $ ~int b ;  $ ~for ( int i = 1 ; i < n ; i ++ ) {  $ ~~cin >> b ;  $ ~~a [ b ] ++ ;  $ ~}  $ ~for ( int i = 1 ; i <= n ; i ++ ) {  $ ~~if ( a [ i ] == 0 ) { cout << i << endl ; }  $ ~}  $ ~return 0 ;  $ }
const int inf = 0 x3f3f3f3f ;  $ const int mod = 2019 ;  $ void init ( ) { } ;  $ string str ;  $ int q [ 105 ] , qa [ 105 ] , ans ;  $ int main ( ) {  $ ~init ( ) ;  $ ~cin >> str ;  $ ~for ( int i = 0 ; i < str . size ( ) ; i ++ ) {  $ ~~if ( i ) q [ i ] = q [ i - 1 ] , qa [ i ] = qa [ i - 1 ] ;  $ ~~if ( str [ i ] == 'Q' )  $ ~~~q [ i ] ++ , ans += qa [ i ] ;  $ ~~else if ( str [ i ] == 'A' )  $ ~~~qa [ i ] += q [ i ] ;  $ ~}  $ ~cout << ans << endl ;  $ ~return 0 ;  $ }
int n , a [ 1000 + 5 ] ;  $ int main ( ) {  $ ~cin >> n ;  $ ~for ( int i = 1 ; i <= n ; i ++ ) cin >> a [ i ] ;  $ ~int cnt = 0 ;  $ ~for ( int i = 2 ; i < n ; i ++ ) {  $ ~~if ( a [ i ] > a [ i - 1 ] && a [ i ] > a [ i + 1 ] )  $ ~~~cnt ++ ;  $ ~~else if ( a [ i ] < a [ i - 1 ] && a [ i ] < a [ i + 1 ] )  $ ~~~cnt ++ ;  $ ~}  $ ~cout << cnt << endl ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~string k ;  $ ~int r , temp , result = 1 ;  $ ~cin >> k >> r ;  $ ~temp = k [ ( k . size ( ) ) - 1 ] - 48 ;  $ ~if ( temp == 0 || temp - r == 0 )  $ ~~cout << result << endl ;  $ ~else {  $ ~~int i = temp ;  $ ~~while ( temp % 10 != 0 && ( temp - r ) % 10 != 0 ) {  $ ~~~temp += i ;  $ ~~~result ++ ;  $ ~~}  $ ~~cout << result << endl ;  $ ~}  $ ~return 0 ;  $ }
int main ( ) {  $ ~long long int n , k ;  $ ~cin >> n >> k ;  $ ~long long int a [ n ] , i , j ;  $ ~for ( i = 0 ; i < n ; i ++ ) cin >> a [ i ] ;  $ ~i = 0 ;  $ ~j = n - 1 ;  $ ~long long int cnt = 0 ;  $ ~while ( a [ i ] <= k ) {  $ ~~cnt ++ ;  $ ~~i ++ ;  $ ~}  $ ~while ( j > i && a [ j ] <= k ) {  $ ~~cnt ++ ;  $ ~~j -- ;  $ ~}  $ ~cout << cnt << "\n" ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~long long n , k , l , max , min , sum = 0 , n1 , k1 , l1 ;  $ ~long long C [ 40 ] [ 40 ] = { 0 } ;  $ ~cin >> n ;  $ ~for ( int i = 0 ; i < n ; i ++ ) {  $ ~~cin >> k >> l ;  $ ~~sum = 0 ;  $ ~~while ( k != 0 && l != 0 )  $ ~~~if ( k > l ) {  $ ~~~~sum = sum + k / l ;  $ ~~~~k = k - k / l * l ;  $ ~~~} else {  $ ~~~~sum = sum + l / k ;  $ ~~~~l = l - l / k * k ;  $ ~~~}  $ ~~cout << sum << endl ;  $ ~}  $ ~return 0 ;  $ }
int main ( ) {  $ ~int n ;  $ ~cin >> n ;  $ ~for ( int i = 1 ; i <= n ; i ++ ) {  $ ~~for ( int j = 1 ; j <= n ; j ++ ) {  $ ~~~if ( i <= ( n + 1 ) / 2 ) {  $ ~~~~if ( j < ( n + 1 ) / 2 - i + 1 || j > ( n + 1 ) / 2 + i - 1 )  $ ~~~~~cout << '*' ;  $ ~~~~else  $ ~~~~~cout << 'D' ;  $ ~~~} else {  $ ~~~~if ( j < ( n + 1 ) / 2 - n + i || j > ( n + 1 ) / 2 + n - i )  $ ~~~~~cout << '*' ;  $ ~~~~else  $ ~~~~~cout << 'D' ;  $ ~~~}  $ ~~}  $ ~~cout << endl ;  $ ~}  $ ~return 0 ;  $ }
int main ( ) {  $ ~int n , l , r , ql , qr ;  $ ~cin >> n >> l >> r >> ql >> qr ;  $ ~int arr [ 100010 ] ;  $ ~for ( int i = 0 ; i < n ; i ++ ) cin >> arr [ i ] ;  $ ~long long sum [ 100010 ] ;  $ ~sum [ 0 ] = 0 ;  $ ~for ( int i = 1 ; i <= n ; i ++ ) sum [ i ] = sum [ i - 1 ] + arr [ i - 1 ] ;  $ ~long long mini = 1e18 ;  $ ~for ( int j = 0 ; j <= n ; j ++ ) {  $ ~~int i = n - j ;  $ ~~long long cnt = sum [ i ] * l + ( sum [ n ] - sum [ i ] ) * r ;  $ ~~if ( abs ( i - j ) ) {  $ ~~~if ( i > j )  $ ~~~~cnt += ( abs ( i - j ) - 1 ) * ql ;  $ ~~~else  $ ~~~~cnt += ( abs ( i - j ) - 1 ) * qr ;  $ ~~}  $ ~~mini = min ( mini , cnt ) ;  $ ~}  $ ~cout << mini << endl ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~int x , q ;  $ ~cin >> x >> q ;  $ ~for ( int i = 1 ; ; i ++ ) {  $ ~~if ( ( ( x * i ) % 10 == 0 ) || ( ( x * i ) % 10 == q ) ) {  $ ~~~cout << i << endl ;  $ ~~~break ;  $ ~~}  $ ~}  $ ~return 0 ;  $ }
int main ( ) {  $ ~int n , c ;  $ ~cin >> n ;  $ ~int f = 0 ;  $ ~int a [ 101 ] = { 0 } ;  $ ~while ( n -- ) {  $ ~~cin >> c ;  $ ~~++ a [ c ] ;  $ ~~f = max ( f , a [ c ] ) ;  $ ~}  $ ~cout << f << endl ;  $ ~return 0 ;  $ }
const int maxn = 2e2 + 10 ;  $ int main ( ) {  $ ~int n , ans = 0 ;  $ ~cin >> n ;  $ ~string s ;  $ ~while ( cin >> s ) {  $ ~~int t = 0 ;  $ ~~for ( int i = 0 ; i < s . size ( ) ; i ++ )  $ ~~~if ( s [ i ] <= 'Z' && s [ i ] >= 'A' ) t ++ ;  $ ~~ans = max ( ans , t ) ;  $ ~}  $ ~cout << ans << endl ;  $ }
int n ;  $ string str ;  $ int main ( ) {  $ ~while ( cin >> n ) {  $ ~~cin >> str ;  $ ~~if ( n == 1 )  $ ~~~cout << 1 << endl ;  $ ~~else {  $ ~~~int zero = 0 , one = 0 ;  $ ~~~for ( int i = 0 ; i < n ; i ++ ) {  $ ~~~~if ( str [ i ] == '0' ) {  $ ~~~~~zero ++ ;  $ ~~~~} else {  $ ~~~~~one ++ ;  $ ~~~~}  $ ~~~~int ab = min ( zero , one ) ;  $ ~~~~zero -= ab ;  $ ~~~~one -= ab ;  $ ~~~}  $ ~~~cout << zero + one << endl ;  $ ~~}  $ ~}  $ ~return 0 ;  $ }
int main ( ) {  $ ~int n ;  $ ~char g [ 200 ] [ 200 ] ;  $ ~g [ 'P' ] [ 'S' ] = 0 ;  $ ~g [ 'P' ] [ 'R' ] = 1 ;  $ ~g [ 'P' ] [ 'P' ] = - 1 ;  $ ~g [ 'S' ] [ 'S' ] = - 1 ;  $ ~g [ 'S' ] [ 'R' ] = 0 ;  $ ~g [ 'S' ] [ 'P' ] = 1 ;  $ ~g [ 'R' ] [ 'S' ] = 1 ;  $ ~g [ 'R' ] [ 'P' ] = 0 ;  $ ~g [ 'R' ] [ 'R' ] = - 1 ;  $ ~string a , b ;  $ ~cin >> n >> a >> b ;  $ ~int cnt1 = 0 , cnt2 = 0 ;  $ ~int m = a . size ( ) * b . size ( ) ;  $ ~for ( int i = 0 ; i < a . size ( ) * b . size ( ) ; i ++ ) {  $ ~~if ( g [ a [ i % a . size ( ) ] ] [ b [ i % b . size ( ) ] ] == - 1 )  $ ~~~continue ;  $ ~~else {  $ ~~~if ( g [ a [ i % a . size ( ) ] ] [ b [ i % b . size ( ) ] ] ) {  $ ~~~~cnt1 ++ ;  $ ~~~} else {  $ ~~~~cnt2 ++ ;  $ ~~~}  $ ~~}  $ ~}  $ ~cnt2 *= n / m ;  $ ~cnt1 *= n / m ;  $ ~for ( int i = 0 ; i < n % m ; i ++ ) {  $ ~~if ( g [ a [ i % a . size ( ) ] ] [ b [ i % b . size ( ) ] ] == - 1 )  $ ~~~continue ;  $ ~~else {  $ ~~~if ( g [ a [ i % a . size ( ) ] ] [ b [ i % b . size ( ) ] ] ) {  $ ~~~~cnt1 ++ ;  $ ~~~} else {  $ ~~~~cnt2 ++ ;  $ ~~~}  $ ~~}  $ ~}  $ ~cout << cnt2 << " " << cnt1 << endl ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~int n ;  $ ~cin >> n ;  $ ~int D = ( n + 2 - 1 ) / 2 ;  $ ~int D1 = D - 1 , D2 = D - 1 ;  $ ~for ( int i = 0 ; i < D ; i ++ ) {  $ ~~for ( int t = 0 ; t < n ; t ++ ) {  $ ~~~if ( t >= D1 && t <= D2 )  $ ~~~~cout << "D" ;  $ ~~~else  $ ~~~~cout << "*" ;  $ ~~}  $ ~~cout << endl ;  $ ~~D1 -- ;  $ ~~D2 ++ ;  $ ~}  $ ~D1 += 2 ;  $ ~D2 -= 2 ;  $ ~for ( int i = D ; i < n ; i ++ ) {  $ ~~for ( int t = 0 ; t < n ; t ++ ) {  $ ~~~if ( t >= D1 && t <= D2 )  $ ~~~~cout << "D" ;  $ ~~~else  $ ~~~~cout << "*" ;  $ ~~}  $ ~~cout << endl ;  $ ~~D1 ++ ;  $ ~~D2 -- ;  $ ~}  $ ~return 0 ;  $ }
int main ( ) {  $ ~int n ;  $ ~int a [ 1000 ] ;  $ ~int b [ 1000 ] ;  $ ~cin >> n ;  $ ~int flag [ 6 ] = { 0 } ;  $ ~for ( int i = 0 ; i < n ; i ++ ) {  $ ~~cin >> a [ i ] ;  $ ~~flag [ a [ i ] ] ++ ;  $ ~}  $ ~for ( int i = 0 ; i < n ; i ++ ) {  $ ~~cin >> b [ i ] ;  $ ~~flag [ b [ i ] ] ++ ;  $ ~}  $ ~int sum = 0 ;  $ ~for ( int i = 1 ; i < 6 ; i ++ ) {  $ ~~if ( flag [ i ] % 2 == 1 ) {  $ ~~~cout << - 1 << endl ;  $ ~~~return 0 ;  $ ~~}  $ ~~int s1 = 0 , s2 = 0 ;  $ ~~for ( int j = 0 ; j < n ; j ++ ) {  $ ~~~if ( a [ j ] == i ) { s1 ++ ; }  $ ~~~if ( b [ j ] == i ) { s2 ++ ; }  $ ~~}  $ ~~if ( s1 < flag [ i ] / 2 ) { sum += flag [ i ] / 2 - s1 ; }  $ ~~if ( s2 < flag [ i ] / 2 ) { sum += flag [ i ] / 2 - s2 ; }  $ ~}  $ ~cout << sum / 2 << endl ;  $ }
int main ( ) {  $ ~int n , k ;  $ ~cin >> n >> k ;  $ ~if ( 3 * n >= k ) {  $ ~~cout << ( n * 3 - k ) ;  $ ~} else  $ ~~cout << 0 ;  $ ~cout << endl ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~string first , second ;  $ ~cin >> first >> second ;  $ ~int n ;  $ ~cin >> n ;  $ ~string killed , victim ;  $ ~for ( size_t i = 0 ; i < n ; i ++ ) {  $ ~~cout << first << ' ' << second << '\n' ;  $ ~~cin >> killed ;  $ ~~if ( killed == first )  $ ~~~cin >> first ;  $ ~~else  $ ~~~cin >> second ;  $ ~}  $ ~cout << first << ' ' << second << '\n' ;  $ ~return 0 ;  $ }
int dayOfMonth [ ] = { 31 , 28 , 31 , 30 , 31 , 30 , 31 , 31 , 30 , 31 , 30 , 31 } ;  $ int main ( ) {  $ ~int day , month ;  $ ~int sum ;  $ ~int ans = 1 ;  $ ~cin >> month >> day ;  $ ~sum = dayOfMonth [ month - 1 ] ;  $ ~sum -= ( 8 - day ) ;  $ ~while ( sum >= 7 ) {  $ ~~ans ++ ;  $ ~~sum -= 7 ;  $ ~}  $ ~if ( sum > 0 ) ans ++ ;  $ ~cout << ans << endl ;  $ ~return 0 ;  $ }
const int INF = - 1e9 ;  $ int dp [ 4400 ] ;  $ int a [ 3 ] ;  $ int main ( ) {  $ ~int n ;  $ ~while ( cin >> n ) {  $ ~~cin >> a [ 0 ] >> a [ 1 ] >> a [ 2 ] ;  $ ~~for ( int i = 0 ; i < 4400 ; i ++ ) dp [ i ] = INF ;  $ ~~dp [ 0 ] = 0 ;  $ ~~for ( int i = 0 ; i < 3 ; i ++ )  $ ~~~for ( int v = a [ i ] ; v <= n ; v ++ )  $ ~~~~if ( dp [ v - a [ i ] ] != INF ) dp [ v ] = max ( dp [ v ] , dp [ v - a [ i ] ] + 1 ) ;  $ ~~cout << dp [ n ] << endl ;  $ ~}  $ ~return 0 ;  $ }
int main ( ) {  $ ~string c , a [ 10 ] ;  $ ~cin >> c ;  $ ~for ( int k = 0 ; k < 10 ; k ++ ) { cin >> a [ k ] ; }  $ ~for ( int i = 0 ; i < 8 ; i ++ ) {  $ ~~string b = c . substr ( i * 10 , 10 ) ;  $ ~~for ( int l = 0 ; l < 10 ; l ++ )  $ ~~~if ( b == a [ l ] ) cout << l ;  $ ~}  $ ~cout << endl ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~int T , a , i ;  $ ~cin >> T ;  $ ~while ( T -- ) {  $ ~~cin >> a ;  $ ~~for ( i = 3 ; i <= 500 ; i ++ ) {  $ ~~~if ( ( ( i - 2 ) * 180 ) / i == a && ( ( i - 2 ) * 180 ) % i == 0 ) {  $ ~~~~cout << "YES" << endl ;  $ ~~~~break ;  $ ~~~}  $ ~~}  $ ~~if ( i > 500 ) cout << "NO" << endl ;  $ ~}  $ ~return 0 ;  $ }
const int maxn = 1e3 + 5 ;  $ int arr [ maxn ] ;  $ int hash1 [ maxn ] ;  $ int main ( ) {  $ ~int n ;  $ ~while ( cin >> n ) {  $ ~~memset ( hash1 , 0 , sizeof ( hash1 ) ) ;  $ ~~int ans = - 1 << 30 ;  $ ~~for ( int i = 0 ; i < n ; ++ i ) {  $ ~~~cin >> arr [ i ] ;  $ ~~~hash1 [ arr [ i ] ] ++ ;  $ ~~~if ( ans < hash1 [ arr [ i ] ] ) { ans = hash1 [ arr [ i ] ] ; }  $ ~~}  $ ~~cout << ans << endl ;  $ ~}  $ ~return 0 ;  $ }
int main ( ) {  $ ~int a , b ;  $ ~cin >> a >> b ;  $ ~int b1 = 0 ;  $ ~while ( b > 0 ) {  $ ~~int d = b % 10 ;  $ ~~b1 = b1 * 10 + d ;  $ ~~b /= 10 ;  $ ~}  $ ~cout << a + b1 << endl ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~int n ;  $ ~string s ;  $ ~int ans = 0 ;  $ ~int num ;  $ ~while ( cin >> s ) {  $ ~~num = 0 ;  $ ~~for ( int i = 0 ; i < s . length ( ) ; i ++ )  $ ~~~if ( isupper ( s [ i ] ) ) num ++ ;  $ ~~ans = max ( ans , num ) ;  $ ~}  $ ~cout << ans << endl ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~int n ;  $ ~cin >> n ;  $ ~int result = 0 ;  $ ~while ( n -- ) {  $ ~~int i , j , x1 , y1 , x2 , y2 ;  $ ~~cin >> x1 >> y1 >> x2 >> y2 ;  $ ~~for ( i = x1 ; i <= x2 ; i ++ ) {  $ ~~~for ( j = y1 ; j <= y2 ; j ++ ) { result ++ ; }  $ ~~}  $ ~}  $ ~cout << result << endl ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~int n ;  $ ~cin >> n ;  $ ~cout << n / 2 + 1 << endl ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~int k , a , v , b , ans , i , j , count = 0 ;  $ ~cin >> k >> a >> b >> v ;  $ ~while ( a > 0 ) {  $ ~~j = 1 ;  $ ~~if ( b > 0 ) {  $ ~~~while ( j < k && b > 0 ) {  $ ~~~~j ++ ;  $ ~~~~b -- ;  $ ~~~}  $ ~~}  $ ~~a -= ( j * v ) ;  $ ~~count ++ ;  $ ~}  $ ~cout << count << endl ;  $ }
int main ( ) {  $ ~int n ;  $ ~while ( cin >> n ) {  $ ~~int p = n ;  $ ~~int a [ 30 ] ;  $ ~~a [ 0 ] = 5 ;  $ ~~int i ;  $ ~~for ( i = 1 ; i < 30 ; i ++ ) { a [ i ] = 2 * a [ i - 1 ] ; }  $ ~~int k = 0 ;  $ ~~for ( i = 0 ; i < 30 ; i ++ ) {  $ ~~~k += a [ i ] ;  $ ~~~if ( k >= p ) { break ; }  $ ~~}  $ ~~int v = 0 ;  $ ~~int y = 0 ;  $ ~~if ( k == p ) { v = 5 ; }  $ ~~if ( k > p ) {  $ ~~~k -= a [ i ] ;  $ ~~~y = p - k ;  $ ~~~int u = y / ( pow ( 2.0 , i ) ) ;  $ ~~~v = u ;  $ ~~~if ( pow ( 2.0 , i ) != 1 ) { v = ++ u ; }  $ ~~}  $ ~~if ( v == 1 ) {  $ ~~~cout << "Sheldon" << endl ;  $ ~~} else if ( v == 2 ) {  $ ~~~cout << "Leonard" << endl ;  $ ~~} else if ( v == 3 ) {  $ ~~~cout << "Penny" << endl ;  $ ~~} else if ( v == 4 ) {  $ ~~~cout << "Rajesh" << endl ;  $ ~~} else if ( v == 5 ) {  $ ~~~cout << "Howard" << endl ;  $ ~~}  $ ~}  $ ~return 0 ;  $ }
int h [ 111111 ] ;  $ int main ( ) {  $ ~int n ;  $ ~long long x , y ;  $ ~cin >> n ;  $ ~while ( n -- ) {  $ ~~cin >> x >> y ;  $ ~~long long cunt = 0 ;  $ ~~for ( ; ; ) {  $ ~~~if ( x <= 0 || y <= 0 ) break ;  $ ~~~if ( x < y ) {  $ ~~~~cunt += y / x ;  $ ~~~~y = y % x ;  $ ~~~} else {  $ ~~~~cunt += x / y ;  $ ~~~~x = x % y ;  $ ~~~}  $ ~~}  $ ~~cout << cunt << endl ;  $ ~}  $ ~return 0 ;  $ }
int main ( ) {  $ ~int n , a ;  $ ~vector < int > v , u ;  $ ~cin >> n ;  $ ~for ( int i = 0 ; i < n ; i ++ ) {  $ ~~cin >> a ;  $ ~~v . push_back ( a ) ;  $ ~}  $ ~sort ( v . begin ( ) , v . end ( ) ) ;  $ ~for ( int i = 0 ; i < n ; i ++ ) {  $ ~~while ( v [ i ] == v [ i + 1 ] && i < v . size ( ) ) i ++ ;  $ ~~if ( v [ i ] != 0 ) u . push_back ( v [ i ] ) ;  $ ~}  $ ~cout << u . size ( ) << endl ;  $ ~return 0 ;  $ }
int n , m ;  $ int main ( ) {  $ ~cin >> n >> m ;  $ ~for ( int i = 1 ; i <= n ; i ++ ) {  $ ~~if ( i % 2 == 0 ) {  $ ~~~if ( i % 4 != 0 ) {  $ ~~~~for ( int y = 1 ; y < m ; y ++ ) cout << '.' ;  $ ~~~~cout << '#' ;  $ ~~~} else {  $ ~~~~cout << '#' ;  $ ~~~~for ( int y = 1 ; y < m ; y ++ ) cout << '.' ;  $ ~~~}  $ ~~} else  $ ~~~for ( int y = 0 ; y < m ; y ++ ) cout << '#' ;  $ ~~cout << endl ;  $ ~}  $ ~return 0 ;  $ }
int main ( ) {  $ ~int k , r ;  $ ~cin >> k >> r ;  $ ~if ( k % 10 == 0 || k % 10 == r ) {  $ ~~cout << 1 << endl ;  $ ~~return 0 ;  $ ~}  $ ~for ( int i = 2 ; i <= 10 ; i ++ ) {  $ ~~if ( ( k * i ) % 10 == 0 || ( k * i ) % 10 == r ) {  $ ~~~cout << i << endl ;  $ ~~~return 0 ;  $ ~~}  $ ~}  $ }
set < string > ss ;  $ int main ( ) {  $ ~string s ;  $ ~int n ;  $ ~cin >> n ;  $ ~for ( int i = 0 ; i < n ; i ++ ) {  $ ~~cin >> s ;  $ ~~sort ( s . begin ( ) , s . end ( ) ) ;  $ ~~s . erase ( unique ( s . begin ( ) , s . end ( ) ) , s . end ( ) ) ;  $ ~~ss . insert ( s ) ;  $ ~}  $ ~cout << ss . size ( ) << endl ;  $ ~return 0 ^ 0 ;  $ }
int main ( ) {  $ ~int n , a [ 101 ] ;  $ ~while ( cin >> n ) {  $ ~~int max = 0 ;  $ ~~for ( int i = 0 ; i < n ; i ++ ) {  $ ~~~cin >> a [ i ] ;  $ ~~~if ( a [ i ] > max ) max = a [ i ] ;  $ ~~}  $ ~~int cnt = 0 ;  $ ~~for ( int i = 0 ; i < n ; i ++ ) { cnt += ( max - a [ i ] ) ; }  $ ~~cout << cnt << endl ;  $ ~}  $ ~return 0 ;  $ }
int main ( ) {  $ ~long long int n , f , d ;  $ ~cin >> n ;  $ ~int c = 0 ;  $ ~long long int g ;  $ ~g = 10 ;  $ ~while ( ( n / g ) != 0 ) {  $ ~~f = n % g ;  $ ~~d = f / ( g / 10 ) ;  $ ~~if ( d == 4 || d == 7 ) { c ++ ; }  $ ~~g *= 10 ;  $ ~}  $ ~f = n % g ;  $ ~d = f / ( g / 10 ) ;  $ ~if ( d == 4 || d == 7 ) { c ++ ; }  $ ~if ( c == 4 || c == 7 ) {  $ ~~cout << "YES" << endl ;  $ ~} else {  $ ~~cout << "NO" << endl ;  $ ~}  $ ~return 0 ;  $ }
long long ans ;  $ long long maxsum ( long long p [ ] , long long n ) {  $ ~long long tmp = 0 ;  $ ~for ( long long i = 0 ; i < n ; ++ i ) {  $ ~~ans = max ( ans , tmp ) ;  $ ~~tmp += p [ i ] ;  $ ~~if ( tmp < 0 ) tmp = 0 ;  $ ~~ans = max ( ans , tmp ) ;  $ ~}  $ }  $ int main ( ) {  $ ~long long n ;  $ ~cin >> n ;  $ ~long long a [ n ] ;  $ ~for ( long long i = 0 ; i < n ; ++ i ) cin >> a [ i ] ;  $ ~long long b [ n ] ;  $ ~long long c [ n ] ;  $ ~for ( long long i = 0 ; i < n - 1 ; ++ i ) {  $ ~~b [ i ] = abs ( a [ i ] - a [ i + 1 ] ) * ( i % 2 == 0 ? 1 : - 1 ) ;  $ ~~c [ i ] = abs ( a [ i ] - a [ i + 1 ] ) * ( ( i + 1 ) % 2 == 0 ? 1 : - 1 ) ;  $ ~}  $ ~maxsum ( b , n - 1 ) ;  $ ~maxsum ( c , n - 1 ) ;  $ ~cout << ans << '\n' ;  $ }
int main ( ) {  $ ~long long n ;  $ ~cin >> n ;  $ ~long long i ;  $ ~vector < long long > v ;  $ ~long long sum = 0 ;  $ ~for ( i = 0 ; i < n ; i ++ ) {  $ ~~long long a ;  $ ~~cin >> a ;  $ ~~sum = sum + a ;  $ ~~v . push_back ( a ) ;  $ ~}  $ ~long long x ;  $ ~long long summ = 0 ;  $ ~if ( sum % 2 == 0 ) {  $ ~~x = sum / 2 ;  $ ~} else {  $ ~~x = sum / 2 + 1 ;  $ ~}  $ ~for ( i = 0 ; i < n ; i ++ ) {  $ ~~summ = summ + v [ i ] ;  $ ~~if ( summ >= x ) {  $ ~~~cout << i + 1 << "\n" ;  $ ~~~return 0 ;  $ ~~}  $ ~}  $ }
int main ( ) {  $ ~int n ;  $ ~cin >> n ;  $ ~while ( n != 0 ) {  $ ~~if ( n % 1000 == 144 ) {  $ ~~~n /= 1000 ;  $ ~~} else if ( n % 100 == 14 ) {  $ ~~~n /= 100 ;  $ ~~} else if ( n % 10 == 1 ) {  $ ~~~n /= 10 ;  $ ~~} else {  $ ~~~cout << "NO" << endl ;  $ ~~~return 0 ;  $ ~~}  $ ~}  $ ~cout << "YES" << endl ;  $ }
int main ( ) {  $ ~int x , nx , n ;  $ ~cin >> x ;  $ ~n = x ;  $ ~for ( int i = 0 ; i < n ; i ++ ) {  $ ~~x ++ ;  $ ~~nx = x ;  $ ~~int l = nx % 10 ;  $ ~~nx = nx / 10 ;  $ ~~int l2 = nx % 10 ;  $ ~~nx = nx / 10 ;  $ ~~int l3 = nx % 10 ;  $ ~~nx = nx / 10 ;  $ ~~int l4 = nx % 10 ;  $ ~~if ( l != l2 && l != l3 && l != l4 && l2 != l3 && l2 != l4 && l3 != l4 ) { break ; }  $ ~}  $ ~cout << x << endl ;  $ ~return 0 ;  $ }
char color [ 6 ] = { 'R' , 'O' , 'Y' , 'G' , 'B' , 'V' } ;  $ vector < int > v ;  $ int tedad [ 300 ] ;  $ int main ( ) {  $ ~string s ;  $ ~cin >> s ;  $ ~for ( int i = 0 ; i < s . length ( ) ; i ++ ) tedad [ s [ i ] ] ++ ;  $ ~vector < int > v ;  $ ~for ( int i = 0 ; i < 6 ; i ++ )  $ ~~if ( tedad [ color [ i ] ] ) v . push_back ( tedad [ color [ i ] ] ) ;  $ ~sort ( v . begin ( ) , v . end ( ) ) ;  $ ~if ( v . size ( ) == 1 )  $ ~~cout << 1 << endl ;  $ ~else if ( v . size ( ) == 2 ) {  $ ~~if ( v [ 0 ] == 1 )  $ ~~~cout << 1 << endl ;  $ ~~else  $ ~~~cout << 2 << endl ;  $ ~} else if ( v . size ( ) == 3 ) {  $ ~~if ( v [ 0 ] == 1 ) {  $ ~~~if ( v [ 1 ] == 1 )  $ ~~~~cout << 2 << endl ;  $ ~~~else  $ ~~~~cout << 3 << endl ;  $ ~~} else  $ ~~~cout << 6 << endl ;  $ ~} else if ( v . size ( ) == 4 ) {  $ ~~if ( v [ 3 ] == 3 )  $ ~~~cout << 5 << endl ;  $ ~~else if ( v [ 3 ] == 2 )  $ ~~~cout << 8 << endl ;  $ ~} else if ( v . size ( ) == 5 )  $ ~~cout << 15 << endl ;  $ ~else if ( v . size ( ) == 6 )  $ ~~cout << 30 << endl ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~long long n ;  $ ~cin >> n ;  $ ~int count = 0 ;  $ ~while ( n != 0 ) {  $ ~~if ( n % 10 == 4 || n % 10 == 7 ) { count ++ ; }  $ ~~n /= 10 ;  $ ~}  $ ~if ( count == 4 || count == 7 ) {  $ ~~cout << "YES" << endl ;  $ ~} else {  $ ~~cout << "NO" << endl ;  $ ~}  $ ~return 0 ;  $ }
int main ( ) {  $ ~string inp1 , inp2 , res ;  $ ~cin >> inp1 >> inp2 ;  $ ~int i = 0 ;  $ ~while ( inp1 [ i ] != '\0' ) {  $ ~~if ( inp1 [ i ] != inp2 [ i ] ) {  $ ~~~cout << 1 ;  $ ~~} else {  $ ~~~cout << 0 ;  $ ~~}  $ ~~i ++ ;  $ ~}  $ ~cout << endl ;  $ ~return 0 ;  $ }
const int N = 200010 ;  $ long long n , t , ans , maxn ;  $ long long m [ N ] , ms [ N ] ;  $ int main ( ) {  $ ~cin >> n ;  $ ~for ( int i = 1 ; i <= n ; i ++ ) {  $ ~~cin >> m [ i ] ;  $ ~~for ( int j = 1 ; j <= m [ i ] ; j ++ ) cin >> t , ms [ i ] = max ( ms [ i ] , t ) ;  $ ~~maxn = max ( maxn , ms [ i ] ) ;  $ ~}  $ ~for ( int i = 1 ; i <= n ; i ++ ) ans += m [ i ] * ( maxn - ms [ i ] ) ;  $ ~cout << ans << endl ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~int a , b , s ;  $ ~cin >> a >> b >> s ;  $ ~int d = abs ( a ) + abs ( b ) ;  $ ~cout << ( ( d <= s && ( ( d ^ s ) & 1 ) == 0 ) ? "Yes\n" : "No\n" ) ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~int a , b , c , d ;  $ ~int x , y ;  $ ~cin >> x ;  $ ~y = x ;  $ ~if ( y >= 1987 && y < 2013 ) {  $ ~~cout << "2013" << endl ;  $ ~~;  $ ~}  $ ~if ( y < 1987 || y >= 2013 ) {  $ ~~while ( 1 ) {  $ ~~~y ++ , x ++ ;  $ ~~~a = ( y / 1000 ) % 10 ;  $ ~~~b = ( y / 100 ) % 10 ;  $ ~~~if ( a == b ) continue ;  $ ~~~c = ( y / 10 ) % 10 ;  $ ~~~if ( a == c || b == c ) continue ;  $ ~~~d = y % 10 ;  $ ~~~if ( a == d || b == d || c == d ) continue ;  $ ~~~cout << x << endl ;  $ ~~~break ;  $ ~~}  $ ~}  $ }
int main ( ) {  $ ~int n , t , count = 0 , ok = 0 ;  $ ~cin >> n >> t ;  $ ~int arr [ n - 1 ] ;  $ ~for ( int i = 0 ; i < n - 1 ; i ++ ) { cin >> arr [ i ] ; }  $ ~for ( int i = 0 ; i < n - 1 ; ) {  $ ~~i += arr [ i ] ;  $ ~~if ( i == t - 1 ) {  $ ~~~cout << "YES\n" ;  $ ~~~return 0 ;  $ ~~}  $ ~}  $ ~cout << "NO\n" ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~int n , x , d , p , counter = 0 ;  $ ~int a [ 201 ] ;  $ ~cin >> n ;  $ ~for ( int i = 1 ; i <= n ; i ++ ) {  $ ~~a [ i ] = 1 ;  $ ~~a [ 0 ] = 0 ;  $ ~}  $ ~cin >> p ;  $ ~while ( p -- ) {  $ ~~cin >> x ;  $ ~~a [ x ] = 0 ;  $ ~}  $ ~cin >> d ;  $ ~while ( d -- ) {  $ ~~cin >> x ;  $ ~~a [ x ] = 0 ;  $ ~}  $ ~for ( int i = 0 ; i <= n ; i ++ ) { counter += a [ i ] ; }  $ ~if ( counter == 0 )  $ ~~cout << "I become the guy." << endl ;  $ ~else  $ ~~cout << "Oh, my keyboard!" << endl ;  $ }
int main ( ) {  $ ~int n , p , maxx = 0 ;  $ ~vector < int > v ;  $ ~cin >> n ;  $ ~for ( int i = 0 ; i < n ; i ++ ) {  $ ~~cin >> p ;  $ ~~v . push_back ( p ) ;  $ ~}  $ ~for ( int i = 0 ; i < v . size ( ) ; i ++ ) {  $ ~~int cnt = 0 ;  $ ~~for ( int j = 0 ; j < v . size ( ) ; j ++ ) {  $ ~~~if ( v [ i ] == v [ j ] ) { cnt ++ ; }  $ ~~}  $ ~~if ( cnt > maxx ) { maxx = cnt ; }  $ ~}  $ ~cout << maxx << endl ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~long long n , m , a , b ;  $ ~while ( cin >> n >> m >> a >> b ) {  $ ~~if ( n % m == 0 )  $ ~~~cout << 0 << endl ;  $ ~~else {  $ ~~~if ( n > m )  $ ~~~~cout << min ( ( ( n / m + 1 ) * m - n ) * a , ( n % m ) * b ) << endl ;  $ ~~~else  $ ~~~~cout << min ( ( m - n ) * a , ( n % m ) * b ) << endl ;  $ ~~}  $ ~}  $ ~return 0 ;  $ }
int main ( ) {  $ ~long long t1 , t2 , x1 , x2 , t0 , res_x , res_y ;  $ ~cin >> t1 >> t2 >> x1 >> x2 >> t0 ;  $ ~double t , ct = 1e99 ;  $ ~while ( x1 >= 0 && x2 >= 0 ) {  $ ~~t = ( t1 * x1 + t2 * x2 * 1.0 ) / ( x1 + x2 ) ;  $ ~~if ( t < t0 ) {  $ ~~~x1 -- ;  $ ~~~continue ;  $ ~~}  $ ~~if ( t < ct ) {  $ ~~~ct = t ;  $ ~~~res_x = x1 ;  $ ~~~res_y = x2 ;  $ ~~}  $ ~~x2 -- ;  $ ~}  $ ~cout << res_x << ' ' << res_y << endl ;  $ }
int main ( ) {  $ ~int n , s , x , y , ans = - 1 ;  $ ~cin >> n >> s ;  $ ~for ( int i = 0 ; i < n ; i ++ ) {  $ ~~cin >> x >> y ;  $ ~~if ( s * 100 >= x * 100 + y ) ans = max ( ans , ( 100 - y ) % 100 ) ;  $ ~}  $ ~cout << ans << endl ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~long long t ;  $ ~cin >> t ;  $ ~while ( t -- ) {  $ ~~long long n , x , y , d ;  $ ~~cin >> n >> x >> y >> d ;  $ ~~long long step = 1e12 ;  $ ~~if ( y > x ) {  $ ~~~if ( ( y - x ) % d == 0 ) {  $ ~~~~long long step_f = ( y - x ) / d ;  $ ~~~~step = step_f ;  $ ~~~} else {  $ ~~~~long long step1 = 1e12 ;  $ ~~~~long long step2 = 1e12 ;  $ ~~~~if ( ( ( y - 1 ) % d ) == 0 ) {  $ ~~~~~long long step_f = ( y - 1 ) / d ;  $ ~~~~~long long step_b = ( ( x - 1 ) % d == 0 ) ? ( ( x - 1 ) / d ) : ( ( ( x - 1 ) / d ) + 1 ) ;  $ ~~~~~step1 = step_b + step_f ;  $ ~~~~}  $ ~~~~if ( ( n - y ) % d == 0 ) {  $ ~~~~~long long step_f = ( n - y ) / d ;  $ ~~~~~long long step_b = ( ( n - x ) % d == 0 ) ? ( ( n - x ) / d ) : ( ( ( n - x ) / d ) + 1 ) ;  $ ~~~~~step2 = step_b + step_f ;  $ ~~~~}  $ ~~~~step = min ( step1 , step2 ) ;  $ ~~~}  $ ~~} else if ( x > y ) {  $ ~~~if ( ( x - y ) % d == 0 ) {  $ ~~~~long long step_f = ( x - y ) / d ;  $ ~~~~step = step_f ;  $ ~~~} else {  $ ~~~~long long step1 = 1e12 ;  $ ~~~~long long step2 = 1e12 ;  $ ~~~~if ( ( ( y - 1 ) % d ) == 0 ) {  $ ~~~~~long long step_f = ( y - 1 ) / d ;  $ ~~~~~long long step_b = ( ( x - 1 ) % d == 0 ) ? ( ( x - 1 ) / d ) : ( ( ( x - 1 ) / d ) + 1 ) ;  $ ~~~~~step1 = step_b + step_f ;  $ ~~~~}  $ ~~~~if ( ( n - y ) % d == 0 ) {  $ ~~~~~long long step_f = ( n - y ) / d ;  $ ~~~~~long long step_b = ( ( n - x ) % d == 0 ) ? ( ( n - x ) / d ) : ( ( ( n - x ) / d ) + 1 ) ;  $ ~~~~~step2 = step_b + step_f ;  $ ~~~~}  $ ~~~~step = min ( step1 , step2 ) ;  $ ~~~}  $ ~~} else {  $ ~~~step = 0 ;  $ ~~}  $ ~~if ( step == 1e12 ) {  $ ~~~cout << - 1 << endl ;  $ ~~} else {  $ ~~~cout << step << endl ;  $ ~~}  $ ~}  $ ~return 0 ;  $ }
int main ( ) {  $ ~int cnt [ 10 ] = { 2 , 7 , 2 , 3 , 3 , 4 , 2 , 5 , 1 , 2 } ;  $ ~string s ;  $ ~cin >> s ;  $ ~cout << cnt [ s [ 0 ] - '0' ] * cnt [ s [ 1 ] - '0' ] << endl ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~int n ;  $ ~int ind ;  $ ~cin >> n ;  $ ~int a [ 110 ] ;  $ ~int chot = 0 , nechot = 0 ;  $ ~for ( int i = 0 ; i < n ; i ++ ) cin >> a [ i ] ;  $ ~for ( int i = 0 ; i < n ; i ++ )  $ ~~if ( a [ i ] % 2 == 0 ) {  $ ~~~chot ++ ;  $ ~~} else {  $ ~~~nechot ++ ;  $ ~~}  $ ~if ( chot > nechot ) {  $ ~~for ( int i = 0 ; i < n ; i ++ )  $ ~~~if ( a [ i ] % 2 == 1 ) {  $ ~~~~int ai = a [ i ] ;  $ ~~~~for ( int i = 0 ; i < n ; i ++ )  $ ~~~~~if ( a [ i ] != ai ) {  $ ~~~~~~ind ++ ;  $ ~~~~~} else {  $ ~~~~~~break ;  $ ~~~~~}  $ ~~~}  $ ~} else {  $ ~~for ( int i = 0 ; i < n ; i ++ )  $ ~~~if ( a [ i ] % 2 == 0 ) {  $ ~~~~int ai = a [ i ] ;  $ ~~~~for ( int i = 0 ; i < n ; i ++ )  $ ~~~~~if ( a [ i ] != ai ) {  $ ~~~~~~ind ++ ;  $ ~~~~~} else {  $ ~~~~~~break ;  $ ~~~~~}  $ ~~~}  $ ~}  $ ~cout << ind + 1 << endl ;  $ }
int main ( ) {  $ ~int n ;  $ ~cin >> n ;  $ ~int a , b , c ;  $ ~int count = 0 ;  $ ~for ( int i = 0 ; i < n ; i ++ ) {  $ ~~cin >> a >> b >> c ;  $ ~~if ( a + b + c >= 2 ) count ++ ;  $ ~}  $ ~cout << count << endl ;  $ ~return 0 ;  $ }
int fiver ( int n ) {  $ ~int cnt = 0 ;  $ ~for ( int i = 1 ; i <= n ; i ++ ) { cnt = cnt + ( i * 5 ) ; }  $ ~return cnt ;  $ }  $ int main ( ) {  $ ~int n , k , i ;  $ ~cin >> n >> k ;  $ ~int time = 240 - k ;  $ ~for ( i = n ; i >= 1 ; i -- ) {  $ ~~if ( time >= fiver ( i ) ) { break ; }  $ ~}  $ ~cout << i << endl ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~int M [ 3 ] [ 3 ] , N [ 3 ] [ 3 ] ;  $ ~string s0 , s1 , s2 = "" ;  $ ~for ( int i = 0 ; i < 3 ; i ++ ) {  $ ~~for ( int j = 0 ; j < 3 ; j ++ ) {  $ ~~~cin >> M [ i ] [ j ] ;  $ ~~~N [ i ] [ j ] = M [ i ] [ j ] ;  $ ~~}  $ ~}  $ ~for ( int i = 0 ; i < 3 ; i ++ ) {  $ ~~for ( int j = 0 ; j < 3 ; j ++ ) {  $ ~~~if ( M [ i ] [ j ] > 0 ) {  $ ~~~~if ( i - 1 >= 0 ) N [ i - 1 ] [ j ] += M [ i ] [ j ] ;  $ ~~~~if ( j + 1 < 3 ) N [ i ] [ j + 1 ] += M [ i ] [ j ] ;  $ ~~~~if ( i + 1 < 3 ) N [ i + 1 ] [ j ] += M [ i ] [ j ] ;  $ ~~~~if ( j - 1 >= 0 ) N [ i ] [ j - 1 ] += M [ i ] [ j ] ;  $ ~~~}  $ ~~}  $ ~}  $ ~for ( int j = 0 ; j < 3 ; j ++ ) {  $ ~~if ( N [ 0 ] [ j ] % 2 == 0 )  $ ~~~s0 += '1' ;  $ ~~else  $ ~~~s0 += '0' ;  $ ~}  $ ~for ( int j = 0 ; j < 3 ; j ++ ) {  $ ~~if ( N [ 1 ] [ j ] % 2 == 0 )  $ ~~~s1 += '1' ;  $ ~~else  $ ~~~s1 += '0' ;  $ ~}  $ ~for ( int j = 0 ; j < 3 ; j ++ ) {  $ ~~if ( N [ 2 ] [ j ] % 2 == 0 )  $ ~~~s2 += '1' ;  $ ~~else  $ ~~~s2 += '0' ;  $ ~}  $ ~cout << s0 << endl ;  $ ~cout << s1 << endl ;  $ ~cout << s2 << endl ;  $ ~return 0 ;  $ }
long long MAX ( long long a , long long b ) {  $ ~if ( a > b ) return a ;  $ ~return b ;  $ }  $ long long MIN ( long long a , long long b ) {  $ ~if ( a < b ) return a ;  $ ~return b ;  $ }  $ int main ( ) {  $ ~int n , k ;  $ ~cin >> n >> k ;  $ ~int c1 = n * 2 ;  $ ~int c2 = n * 5 ;  $ ~int c3 = n * 8 ;  $ ~int saida = 0 ;  $ ~saida += ceil ( c1 / ( double ) k ) ;  $ ~saida += ceil ( c2 / ( double ) k ) ;  $ ~saida += ceil ( c3 / ( double ) k ) ;  $ ~cout << saida << endl ;  $ ~return 0 ;  $ }
const int N = 0 , INF = 0 , MOD = 0 ;  $ int n , L , a , t , l , last = 0 ;  $ long long ans ;  $ int main ( ) {  $ ~cin >> n >> L >> a ;  $ ~for ( int i = 0 ; i < n ; i ++ ) {  $ ~~cin >> t >> l ;  $ ~~ans += max ( 0 , ( t - last ) / a ) ;  $ ~~last = t + l ;  $ ~}  $ ~ans += max ( 0 , ( L - last ) / a ) ;  $ ~cout << ans << endl ;  $ ~return 0 ;  $ }
int v [ 50 ] [ 50 ] ;  $ int main ( ) {  $ ~int n , a ;  $ ~int ans = 0 ;  $ ~cin >> n ;  $ ~for ( int i = 0 ; i < n ; i ++ ) {  $ ~~for ( int j = 0 ; j < n ; j ++ ) { cin >> v [ i ] [ j ] ; }  $ ~}  $ ~int col , row ;  $ ~for ( int i = 0 ; i < n ; i ++ ) {  $ ~~for ( int j = 0 ; j < n ; j ++ ) {  $ ~~~row = 0 ;  $ ~~~col = 0 ;  $ ~~~for ( int k = 0 ; k < n ; k ++ ) {  $ ~~~~col += v [ k ] [ j ] ;  $ ~~~~row += v [ i ] [ k ] ;  $ ~~~}  $ ~~~if ( col > row ) ans ++ ;  $ ~~}  $ ~}  $ ~cout << ans << endl ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~string x ;  $ ~cin >> x ;  $ ~for ( int i = 0 ; i < x . size ( ) ; i ++ ) {  $ ~~if ( ( x [ i ] - '0' ) > ( 9 - ( x [ i ] - '0' ) ) ) {  $ ~~~if ( 9 - ( x [ i ] - '0' ) == 0 ) {  $ ~~~~if ( i != 0 && ( i != x . size ( ) - 1 || x . size ( ) != 1 ) ) x [ i ] = '9' - ( x [ i ] - '0' ) ;  $ ~~~} else {  $ ~~~~x [ i ] = '9' - ( x [ i ] - '0' ) ;  $ ~~~}  $ ~~}  $ ~}  $ ~cout << x << endl ;  $ ~return 0 ;  $ }
int n , a , b , c , d , sum , l1 , l2 ;  $ int main ( ) {  $ ~cin >> n >> a >> b >> c >> d ;  $ ~if ( a == 0 )  $ ~~l1 = b ;  $ ~else if ( a == n )  $ ~~l1 = 3 * n - b ;  $ ~else if ( b == 0 )  $ ~~l1 = 4 * n - a ;  $ ~else if ( b == n )  $ ~~l1 = n + a ;  $ ~if ( c == 0 )  $ ~~l2 = d ;  $ ~else if ( c == n )  $ ~~l2 = 3 * n - d ;  $ ~else if ( d == 0 )  $ ~~l2 = 4 * n - c ;  $ ~else if ( d == n )  $ ~~l2 = n + c ;  $ ~cout << min ( abs ( l1 - l2 ) , 4 * n - abs ( l1 - l2 ) ) << endl ;  $ }
long long ara [ 105 ] ;  $ int main ( ) {  $ ~long long i , t , test = 1 , rslt ;  $ ~long long n , s , d ;  $ ~cin >> n ;  $ ~for ( i = 1 ; i <= n ; i ++ ) cin >> ara [ i ] ;  $ ~cin >> s >> d ;  $ ~if ( s > d ) swap ( s , d ) ;  $ ~long long mid = 0 ;  $ ~long long bg = 0 ;  $ ~long long ed = 0 ;  $ ~for ( i = s ; i < d ; i ++ ) { mid += ara [ i ] ; }  $ ~for ( i = 1 ; i < s ; i ++ ) { bg += ara [ i ] ; }  $ ~for ( i = d ; i <= n ; i ++ ) { ed += ara [ i ] ; }  $ ~cout << min ( mid , bg + ed ) << endl ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~int n , k , i , c , x , p , a [ 500 ] , ans ;  $ ~memset ( a , 0 , sizeof ( a ) ) ;  $ ~ans = 0 ;  $ ~cin >> n >> k ;  $ ~cin >> c ;  $ ~for ( i = 0 ; i < c ; i ++ ) {  $ ~~cin >> x ;  $ ~~a [ x ] = 1 ;  $ ~}  $ ~p = 0 ;  $ ~for ( i = 1 ; i <= n ; i ++ ) {  $ ~~if ( a [ i ] ) {  $ ~~~ans ++ ;  $ ~~~p = 0 ;  $ ~~} else  $ ~~~p ++ ;  $ ~~if ( p == k ) {  $ ~~~ans ++ ;  $ ~~~p = 0 ;  $ ~~}  $ ~}  $ ~cout << ans << endl ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~int n , a [ 100 ] , i , j , k , count = 0 ;  $ ~cin >> n ;  $ ~for ( i = 0 ; i < n ; i ++ ) { cin >> a [ i ] ; }  $ ~for ( j = 0 ; j < n ; j ++ ) {  $ ~~if ( a [ j ] == 1 ) {  $ ~~~a [ j ] = - 1 ;  $ ~~~count ++ ;  $ ~~} else {  $ ~~~a [ j ] = 1 ;  $ ~~}  $ ~}  $ ~int sum = 0 ;  $ ~int max = - 2 ;  $ ~for ( k = 0 ; k < n ; k ++ ) {  $ ~~sum += a [ k ] ;  $ ~~if ( sum > max ) { max = sum ; }  $ ~~if ( sum < 0 ) { sum = 0 ; }  $ ~}  $ ~cout << count + max << endl ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~int a , b , r ;  $ ~cin >> a >> b >> r ;  $ ~r *= 2 ;  $ ~if ( r > a || r > b ) {  $ ~~cout << "Second" << endl ;  $ ~} else {  $ ~~cout << "First" << endl ;  $ ~}  $ ~return 0 ;  $ }
long long gcd ( long long a , long long b ) {  $ ~return b == 0 ? a : gcd ( b , a % b ) ;  $ }  $ long long lcm ( long long a , long long b ) {  $ ~return a * ( b / gcd ( a , b ) ) ;  $ }  $ const int q = 1e9 + 7 ;  $ long long ans = 0 ;  $ vector < int > v ;  $ int main ( ) {  $ ~long long n , f , iv , l ;  $ ~cin >> n >> f >> iv >> l ;  $ ~l += iv ;  $ ~ans = l / f ;  $ ~if ( l % f ) ans ++ ;  $ ~if ( ans * f > n )  $ ~~cout << - 1 << '\n' ;  $ ~else  $ ~~cout << ans << '\n' ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~int a , b ;  $ ~while ( cin >> a >> b ) {  $ ~~int z , m , n , cnt = 0 ;  $ ~~z = max ( a , b ) ;  $ ~~n = min ( a , b ) ;  $ ~~m = ( z - n ) / 2 ;  $ ~~cout << n << " " << m << endl ;  $ ~}  $ ~return 0 ;  $ }
int main ( ) {  $ ~int arr [ 101 ] ;  $ ~int n , a , count = 0 ;  $ ~cin >> n ;  $ ~for ( int i = 0 ; i < n ; i ++ ) {  $ ~~cin >> arr [ i ] ;  $ ~~if ( arr [ i ] == 1 ) count ++ ;  $ ~}  $ ~for ( int i = 0 ; i < n ; i ++ ) {  $ ~~if ( arr [ i ] == 1 && arr [ i + 1 ] == 0 && arr [ i + 2 ] == 1 ) count ++ ;  $ ~}  $ ~cout << count << endl ;  $ }
int main ( ) {  $ ~int n , k ;  $ ~cin >> n >> k ;  $ ~int x , i = 0 ;  $ ~int prevC = 0 ;  $ ~while ( n -- ) {  $ ~~i ++ ;  $ ~~cin >> x ;  $ ~~x += prevC ;  $ ~~if ( x > 8 ) {  $ ~~~prevC = x - 8 ;  $ ~~~x = 8 ;  $ ~~} else  $ ~~~prevC = 0 ;  $ ~~k -= x ;  $ ~~if ( k <= 0 ) break ;  $ ~}  $ ~if ( k > 0 )  $ ~~cout << - 1 << endl ;  $ ~else  $ ~~cout << i << endl ;  $ }
int a [ 105 ] [ 105 ] , b , c , i , n , f , g , k , x , y , j ;  $ string s [ 105 ] [ 105 ] ;  $ int main ( ) {  $ ~cin >> n ;  $ ~for ( i = 1 ; i <= n ; i ++ ) {  $ ~~for ( j = 1 ; j <= n ; j ++ ) { s [ i ] [ j ] = '*' ; }  $ ~~x = n / 2 + 1 ;  $ ~~y = 2 ;  $ ~}  $ ~for ( i = 1 ; i <= n ; i ++ ) {  $ ~~if ( i <= n / 2 + 1 ) {  $ ~~~for ( j = x ; j <= n - x + 1 ; j ++ ) { s [ i ] [ j ] = 'D' ; }  $ ~~~x -- ;  $ ~~}  $ ~~if ( i > n / 2 + 1 ) {  $ ~~~for ( j = y ; j <= n - y + 1 ; j ++ ) { s [ i ] [ j ] = 'D' ; }  $ ~~~y ++ ;  $ ~~}  $ ~}  $ ~for ( i = 1 ; i <= n ; i ++ ) {  $ ~~for ( j = 1 ; j <= n ; j ++ ) { cout << s [ i ] [ j ] ; }  $ ~~cout << endl ;  $ ~}  $ }
int main ( ) {  $ ~string f ;  $ ~cin >> f ;  $ ~int one = 0 , zero = 0 , test = 0 ;  $ ~int l = f . size ( ) ;  $ ~for ( int i = 0 ; i < l ; i ++ ) {  $ ~~if ( f [ i ] == '1' ) { test = 1 ; }  $ ~~if ( test == 1 && f [ i ] == '0' ) { zero ++ ; }  $ ~}  $ ~if ( zero >= 6 ) {  $ ~~cout << "yes" << endl ;  $ ~} else {  $ ~~cout << "no" << endl ;  $ ~}  $ ~return 0 ;  $ }
int main ( ) {  $ ~int n , k ;  $ ~string ara ;  $ ~cin >> n >> k ;  $ ~cin >> ara ;  $ ~int gh = ara . find ( 'G' , 0 ) ;  $ ~int target = ara . find ( 'T' , 0 ) ;  $ ~int m ;  $ ~if ( gh < target )  $ ~~m = 1 ;  $ ~else  $ ~~m = - 1 ;  $ ~int i = gh ;  $ ~while ( 1 ) {  $ ~~if ( ara [ i ] == '#' ) {  $ ~~~cout << "NO" << endl ;  $ ~~~return 0 ;  $ ~~} else if ( ara [ i ] == 'T' ) {  $ ~~~cout << "YES" << endl ;  $ ~~~return 0 ;  $ ~~}  $ ~~i = i + m * k ;  $ ~~if ( gh < target && i > target ) break ;  $ ~~if ( gh > target && i < target ) break ;  $ ~}  $ ~cout << "NO" << endl ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~int n , k ;  $ ~cin >> n ;  $ ~cin >> k ;  $ ~int best = 0 ;  $ ~for ( int i = 0 ; i < ( n ) ; i ++ ) {  $ ~~int x , y ;  $ ~~cin >> x >> y ;  $ ~~best += ( y - x + 1 ) ;  $ ~}  $ ~cout << ( k - best % k ) % k << '\n' ;  $ ~return 0 ;  $ }
const int maxn = 1000000 + 10 ;  $ char b [ maxn ] ;  $ int a [ maxn ] ;  $ int ccc [ 20 ] ;  $ int main ( ) {  $ ~int n ;  $ ~memset ( a , 0 , sizeof ( a ) ) ;  $ ~int p , q ;  $ ~int check ;  $ ~cin >> n ;  $ ~cin >> p ;  $ ~for ( int i = 1 ; i <= p ; i ++ ) {  $ ~~cin >> check ;  $ ~~a [ check ] = 1 ;  $ ~}  $ ~cin >> q ;  $ ~for ( int i = 1 ; i <= q ; i ++ ) {  $ ~~cin >> check ;  $ ~~a [ check ] = 1 ;  $ ~}  $ ~for ( int i = 1 ; i <= n ; i ++ ) {  $ ~~if ( a [ i ] == 0 ) {  $ ~~~puts ( "Oh, my keyboard!" ) ;  $ ~~~break ;  $ ~~} else if ( i == n ) {  $ ~~~puts ( "I become the guy." ) ;  $ ~~}  $ ~}  $ ~return 0 ;  $ }
int main ( ) {  $ ~int n , i , ar [ 105 ] , sum = 0 , a = 0 , c = 0 ;  $ ~cin >> n ;  $ ~for ( i = 0 ; i < n ; i ++ ) { cin >> ar [ i ] ; }  $ ~sort ( ar , ar + n ) ;  $ ~for ( i = 0 ; i < n ; i ++ ) { sum += ar [ i ] ; }  $ ~sum = sum / 2 ;  $ ~while ( a <= sum ) {  $ ~~c ++ ;  $ ~~a += ar [ n - c ] ;  $ ~}  $ ~cout << c << endl ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~int n , k ;  $ ~cin >> n >> k ;  $ ~if ( k / n == 2 )  $ ~~cout << n - ( k % n ) << endl ;  $ ~else  $ ~~cout << 0 << endl ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~int n ;  $ ~cin >> n ;  $ ~int x = n / 2 ;  $ ~vector < char > ch ( n , '*' ) ;  $ ~int t = 1 , r = 1 ;  $ ~ch [ x ] = 'D' ;  $ ~for ( int i = 0 ; i < n ; ++ i ) cout << ch [ i ] ;  $ ~cout << "\n" ;  $ ~for ( int i = 0 ; i < x ; ++ i ) {  $ ~~ch [ x + t ] = 'D' ;  $ ~~ch [ x - r ] = 'D' ;  $ ~~for ( int i = 0 ; i < n ; ++ i ) { cout << ch [ i ] ; }  $ ~~cout << "\n" ;  $ ~~++ t ;  $ ~~++ r ;  $ ~}  $ ~t = 0 ;  $ ~r = n - 1 ;  $ ~for ( int i = 0 ; i < x ; ++ i ) {  $ ~~ch [ t ] = '*' ;  $ ~~ch [ r ] = '*' ;  $ ~~for ( int j = 0 ; j < n ; ++ j ) cout << ch [ j ] ;  $ ~~cout << "\n" ;  $ ~~++ t ;  $ ~~-- r ;  $ ~}  $ ~return 0 ;  $ }
string s ;  $ queue < char > q [ 27 ] ;  $ int main ( ) {  $ ~int n , cnt = 0 , i = 0 , j ;  $ ~cin >> n ;  $ ~cin >> s ;  $ ~if ( n > s . size ( ) ) {  $ ~~cout << "NO" << endl ;  $ ~~return 0 ;  $ ~}  $ ~if ( n == 1 ) {  $ ~~cout << "YES" << endl ;  $ ~~for ( int k = 0 ; k < s . size ( ) ; k ++ ) { cout << s [ k ] ; }  $ ~~cout << endl ;  $ ~~return 0 ;  $ ~}  $ ~q [ 0 ] . push ( s [ 0 ] ) ;  $ ~for ( i = 1 ; i < s . size ( ) ; i ++ ) {  $ ~~for ( j = 0 ; j <= cnt ; j ++ ) {  $ ~~~if ( s [ i ] == q [ j ] . front ( ) ) { break ; }  $ ~~}  $ ~~if ( j > cnt ) { cnt ++ ; }  $ ~~q [ cnt ] . push ( s [ i ] ) ;  $ ~~if ( cnt == n - 1 ) { break ; }  $ ~}  $ ~if ( cnt < n - 1 ) {  $ ~~cout << "NO" << endl ;  $ ~~return 0 ;  $ ~}  $ ~for ( int j = i + 1 ; j < s . size ( ) ; j ++ ) { q [ cnt ] . push ( s [ j ] ) ; }  $ ~cout << "YES" << endl ;  $ ~for ( int i = 0 ; i <= cnt ; i ++ ) {  $ ~~while ( ! q [ i ] . empty ( ) ) {  $ ~~~cout << q [ i ] . front ( ) ;  $ ~~~q [ i ] . pop ( ) ;  $ ~~}  $ ~~cout << endl ;  $ ~}  $ ~return 0 ;  $ }
int main ( ) {  $ ~int k , a , b , v , box = 0 ;  $ ~cin >> k >> a >> b >> v ;  $ ~while ( 1 ) {  $ ~~int section = 1 ;  $ ~~if ( b >= k - 1 ) {  $ ~~~section = k ;  $ ~~~b -= k - 1 ;  $ ~~} else {  $ ~~~section = b + 1 ;  $ ~~~b = 0 ;  $ ~~}  $ ~~a -= section * v ;  $ ~~box ++ ;  $ ~~if ( a <= 0 ) break ;  $ ~}  $ ~cout << box << endl ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~int n , x ;  $ ~string line ;  $ ~cin >> n ;  $ ~while ( n -- ) {  $ ~~cin >> x >> line ;  $ ~~if ( x == 2 ) {  $ ~~~if ( line [ 0 ] >= line [ 1 ] )  $ ~~~~cout << "NO\n" ;  $ ~~~else  $ ~~~~cout << "YES\n2\n" << line [ 0 ] << ' ' << line [ 1 ] << '\n' ;  $ ~~} else {  $ ~~~cout << "YES\n2\n" << line [ 0 ] << ' ' ;  $ ~~~for ( int i = 1 ; i < line . size ( ) ; ++ i ) cout << line [ i ] ;  $ ~~~cout << '\n' ;  $ ~~}  $ ~}  $ ~return 0 ;  $ }
int main ( ) {  $ ~int m , n ;  $ ~cin >> m >> n ;  $ ~string s ;  $ ~cin >> s ;  $ ~bool judge = 1 ;  $ ~int t1 = s . find ( 'T' ) , g1 = s . find ( 'G' ) ;  $ ~int mid = abs ( t1 - g1 ) ;  $ ~if ( mid % n != 0 )  $ ~~judge = false ;  $ ~else {  $ ~~int i , j ;  $ ~~if ( t1 > g1 ) {  $ ~~~i = g1 ;  $ ~~~j = t1 ;  $ ~~} else {  $ ~~~i = t1 ;  $ ~~~j = g1 ;  $ ~~}  $ ~~if ( i != - 1 )  $ ~~~for ( ; i <= j ; i += n )  $ ~~~~if ( s [ i ] == '#' ) {  $ ~~~~~judge = false ;  $ ~~~~~break ;  $ ~~~~}  $ ~}  $ ~if ( judge )  $ ~~cout << "YES" << endl ;  $ ~else  $ ~~cout << "NO" << endl ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~int n , m ;  $ ~cin >> n >> m ;  $ ~string s ;  $ ~cin >> s ;  $ ~int l , r ;  $ ~char c1 , c2 ;  $ ~while ( m -- ) {  $ ~~cin >> l >> r ;  $ ~~cin >> c1 >> c2 ;  $ ~~for ( int i = l - 1 ; i <= ( r - 1 ) ; i ++ ) s [ i ] = s [ i ] == c1 ? c2 : s [ i ] ;  $ ~}  $ ~cout << s << endl ;  $ ~return 0 ;  $ }
long long int n , flag = 0 ;  $ int main ( ) {  $ ~cin >> n ;  $ ~while ( n ) {  $ ~~int x = ( n % 10 ) , y = ( n % 100 ) , z = ( n % 1000 ) ;  $ ~~if ( z == 144 )  $ ~~~n /= 1000 ;  $ ~~else if ( y == 14 )  $ ~~~n /= 100 ;  $ ~~else if ( x == 1 )  $ ~~~n /= 10 ;  $ ~~else {  $ ~~~cout << "NO\n" ;  $ ~~~return 0 ;  $ ~~}  $ ~}  $ ~cout << "YES\n" ;  $ ~return 0 ;  $ }
string S [ 4 ] ;  $ int I , J , K ;  $ int jarak ( int x , int y ) {  $ ~if ( y > x )  $ ~~return y - x ;  $ ~else  $ ~~return ( y + 12 ) - x ;  $ }  $ int main ( ) {  $ ~map < string , int > A ;  $ ~A [ "C" ] = 1 ;  $ ~A [ "C#" ] = 2 ;  $ ~A [ "D" ] = 3 ;  $ ~A [ "D#" ] = 4 ;  $ ~A [ "E" ] = 5 ;  $ ~A [ "F" ] = 6 ;  $ ~A [ "F#" ] = 7 ;  $ ~A [ "G" ] = 8 ;  $ ~A [ "G#" ] = 9 ;  $ ~A [ "A" ] = 10 ;  $ ~A [ "B" ] = 11 ;  $ ~A [ "H" ] = 12 ;  $ ~cin >> S [ 1 ] >> S [ 2 ] >> S [ 3 ] ;  $ ~for ( int i = 1 ; i <= 3 ; i ++ )  $ ~~for ( int j = 1 ; j <= 3 ; j ++ )  $ ~~~for ( int k = 1 ; k <= 3 ; k ++ )  $ ~~~~if ( i != j && i != k && j != k ) {  $ ~~~~~I = A [ S [ i ] ] ;  $ ~~~~~J = A [ S [ j ] ] ;  $ ~~~~~K = A [ S [ k ] ] ;  $ ~~~~~if ( jarak ( I , K ) == 7 ) {  $ ~~~~~~if ( jarak ( I , J ) == 4 && jarak ( J , K ) == 3 ) {  $ ~~~~~~~cout << "major" << endl ;  $ ~~~~~~~return 0 ;  $ ~~~~~~} else if ( jarak ( I , J ) == 3 && jarak ( J , K ) == 4 ) {  $ ~~~~~~~cout << "minor" << endl ;  $ ~~~~~~~return 0 ;  $ ~~~~~~}  $ ~~~~~}  $ ~~~~}  $ ~cout << "strange" << endl ;  $ }
int main ( ) {  $ ~int n ;  $ ~cin >> n ;  $ ~int sm = 0 ;  $ ~while ( n -- ) {  $ ~~int a ;  $ ~~cin >> a ;  $ ~~sm += a ;  $ ~}  $ ~int m ;  $ ~cin >> m ;  $ ~while ( m -- ) {  $ ~~int l , r ;  $ ~~cin >> l >> r ;  $ ~~if ( r < sm ) continue ;  $ ~~sm = max ( sm , l ) ;  $ ~~cout << sm << endl ;  $ ~~return 0 ;  $ ~}  $ ~cout << - 1 << endl ;  $ ~return 0 ;  $ }
bool isPrime ( int n ) {  $ ~for ( int i = 2 ; i < n - 1 ; i ++ ) {  $ ~~if ( n % i == 0 ) { return false ; }  $ ~}  $ ~return true ;  $ }  $ int findNextPrime ( int n ) {  $ ~n ++ ;  $ ~while ( true ) {  $ ~~if ( isPrime ( n ) ) {  $ ~~~return n ;  $ ~~} else {  $ ~~~n ++ ;  $ ~~}  $ ~}  $ }  $ int main ( ) {  $ ~int n , m ;  $ ~cin >> n >> m ;  $ ~int n0 = findNextPrime ( n ) ;  $ ~if ( n0 == m ) {  $ ~~cout << "YES" << endl ;  $ ~} else {  $ ~~cout << "NO" << endl ;  $ ~}  $ ~return 0 ;  $ }
void solve ( ) {  $ ~int n ;  $ ~cin >> n ;  $ ~vector < int > v ;  $ ~for ( int i = 0 ; i < n ; i ++ ) {  $ ~~int x ;  $ ~~cin >> x ;  $ ~~v . push_back ( x ) ;  $ ~}  $ ~sort ( v . begin ( ) , v . end ( ) ) ;  $ ~int i = 0 ;  $ ~int j = n - 1 ;  $ ~int ans = 0 ;  $ ~while ( 2 * v [ i ] < v [ j ] ) {  $ ~~if ( 2 * v [ i + 1 ] >= v [ j ] ) {  $ ~~~i ++ ;  $ ~~~ans ++ ;  $ ~~} else if ( 2 * v [ i ] >= v [ j - 1 ] ) {  $ ~~~j -- ;  $ ~~~ans ++ ;  $ ~~} else {  $ ~~~ans += 2 ;  $ ~~~i ++ ;  $ ~~~j -- ;  $ ~~}  $ ~}  $ ~cout << ans << endl ;  $ }  $ void solve2 ( ) {  $ ~int n ;  $ ~cin >> n ;  $ ~long long mx = 0 ;  $ ~long long a [ n ] ;  $ ~for ( int i = 0 ; i < n ; i ++ ) { cin >> a [ i ] ; }  $ ~for ( int len = 1 ; len <= 100 ; len ++ ) {  $ ~~for ( int i = 0 ; i + len - 1 < n ; i ++ ) {  $ ~~~long long k = a [ i ] ;  $ ~~~for ( int j = i + 1 ; j < i + len ; j ++ ) { k ^ = a [ j ] ; }  $ ~~~if ( k > mx ) mx = k ;  $ ~~}  $ ~}  $ ~cout << mx << endl ;  $ }  $ int main ( ) {  $ ~solve2 ( ) ;  $ ~return 0 ;  $ }
int b , c , word , ans , temp = 1 ;  $ int main ( ) {  $ ~cin >> b >> c ;  $ ~for ( int a = 0 ; a < b ; a ++ ) {  $ ~~cin >> word ;  $ ~~if ( word - temp > c )  $ ~~~ans = 1 ;  $ ~~else  $ ~~~ans ++ ;  $ ~~temp = word ;  $ ~}  $ ~cout << ans << "\n" ;  $ }
int main ( ) {  $ ~int n , a = 0 , b ;  $ ~cin >> n ;  $ ~b = ( n + 1 ) / 3 ;  $ ~while ( b >= 12 ) {  $ ~~a ++ ;  $ ~~b -= 12 ;  $ ~}  $ ~cout << a << " " << b << endl ;  $ }
int main ( ) {  $ ~int k , a , b , v ;  $ ~while ( cin >> k >> a >> b >> v ) {  $ ~~int nums = b / ( k - 1 ) ;  $ ~~int total = 0 ;  $ ~~if ( nums * k * v >= a ) {  $ ~~~total = ceil ( ( double ) a / ( k * v ) ) ;  $ ~~} else {  $ ~~~total = nums ;  $ ~~~int ab = b - nums * ( k - 1 ) ;  $ ~~~int s = a - nums * k * v ;  $ ~~~if ( ( ab + 1 ) * v >= s )  $ ~~~~total ++ ;  $ ~~~else {  $ ~~~~total ++ ;  $ ~~~~total += ceil ( ( s - ( ab + 1 ) * v ) / ( double ) v ) ;  $ ~~~}  $ ~~}  $ ~~cout << total << endl ;  $ ~}  $ ~return 0 ;  $ }
int main ( ) {  $ ~string a , b ;  $ ~cin >> a >> b ;  $ ~int c = 1 ;  $ ~for ( int i = 0 ; i < a . length ( ) ; i ++ ) {  $ ~~if ( tolower ( a [ i ] ) != tolower ( b [ i ] ) ) {  $ ~~~if ( tolower ( a [ i ] ) < tolower ( b [ i ] ) ) {  $ ~~~~cout << "-1" << endl ;  $ ~~~~c = 0 ;  $ ~~~~break ;  $ ~~~} else {  $ ~~~~cout << "1" << endl ;  $ ~~~~c = 0 ;  $ ~~~~break ;  $ ~~~}  $ ~~}  $ ~}  $ ~if ( c ) cout << "0" << endl ;  $ }
int main ( ) {  $ ~int n , i , j , a [ 2010 ] [ 3 ] , m ;  $ ~cin >> n ;  $ ~for ( i = 0 ; i < n ; i ++ ) {  $ ~~cin >> m ;  $ ~~a [ i ] [ 0 ] = m ;  $ ~~a [ i ] [ 1 ] = i ;  $ ~}  $ ~for ( i = 0 ; i < n ; i ++ ) {  $ ~~for ( j = i + 1 ; j < n ; j ++ ) {  $ ~~~if ( a [ i ] [ 0 ] < a [ j ] [ 0 ] ) {  $ ~~~~int temp = a [ i ] [ 0 ] ;  $ ~~~~a [ i ] [ 0 ] = a [ j ] [ 0 ] ;  $ ~~~~a [ j ] [ 0 ] = temp ;  $ ~~~~temp = a [ i ] [ 1 ] ;  $ ~~~~a [ i ] [ 1 ] = a [ j ] [ 1 ] ;  $ ~~~~a [ j ] [ 1 ] = temp ;  $ ~~~}  $ ~~~if ( a [ i ] [ 0 ] == a [ j ] [ 0 ] ) {  $ ~~~~if ( a [ i ] [ 1 ] > a [ j ] [ 1 ] ) {  $ ~~~~~int temp = a [ i ] [ 0 ] ;  $ ~~~~~a [ i ] [ 0 ] = a [ j ] [ 0 ] ;  $ ~~~~~a [ j ] [ 0 ] = temp ;  $ ~~~~~temp = a [ i ] [ 1 ] ;  $ ~~~~~a [ i ] [ 1 ] = a [ j ] [ 1 ] ;  $ ~~~~~a [ j ] [ 1 ] = temp ;  $ ~~~~}  $ ~~~}  $ ~~}  $ ~}  $ ~a [ 0 ] [ 2 ] = 1 ;  $ ~for ( i = 1 ; i < n ; i ++ ) {  $ ~~if ( a [ i ] [ 0 ] == a [ i - 1 ] [ 0 ] )  $ ~~~a [ i ] [ 2 ] = a [ i - 1 ] [ 2 ] ;  $ ~~else  $ ~~~a [ i ] [ 2 ] = i + 1 ;  $ ~}  $ ~for ( i = 0 ; i < n ; i ++ ) {  $ ~~for ( j = i + 1 ; j < n ; j ++ ) {  $ ~~~if ( a [ i ] [ 1 ] > a [ j ] [ 1 ] ) {  $ ~~~~int temp = a [ i ] [ 1 ] ;  $ ~~~~a [ i ] [ 1 ] = a [ j ] [ 1 ] ;  $ ~~~~a [ j ] [ 1 ] = temp ;  $ ~~~~temp = a [ i ] [ 0 ] ;  $ ~~~~a [ i ] [ 0 ] = a [ j ] [ 0 ] ;  $ ~~~~a [ j ] [ 0 ] = temp ;  $ ~~~~temp = a [ i ] [ 2 ] ;  $ ~~~~a [ i ] [ 2 ] = a [ j ] [ 2 ] ;  $ ~~~~a [ j ] [ 2 ] = temp ;  $ ~~~}  $ ~~}  $ ~}  $ ~cout << a [ 0 ] [ 2 ] ;  $ ~for ( i = 1 ; i < n ; i ++ ) { cout << " " << a [ i ] [ 2 ] ; }  $ ~cout << endl ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~int s , n , d , c , B = 0 ;  $ ~cin >> s >> n >> d >> c ;  $ ~while ( n > 0 ) {  $ ~~if ( s > d && d != 0 ) {  $ ~~~n -= ( d + 1 ) * c ;  $ ~~~d = 0 ;  $ ~~} else if ( d - s + 1 >= 0 ) {  $ ~~~d -= ( s - 1 ) ;  $ ~~~n -= s * c ;  $ ~~} else {  $ ~~~n -= ( d + 1 ) * c ;  $ ~~~if ( d > 0 ) { d -- ; }  $ ~~}  $ ~~B ++ ;  $ ~}  $ ~cout << B << endl ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~int a , b ;  $ ~cin >> a >> b ;  $ ~if ( a > b ) { swap ( a , b ) ; }  $ ~cout << a << " " << ( b - a ) / 2 << endl ;  $ ~return 0 ;  $ }
const int inf = 0 x3f3f3f3f ;  $ int main ( ) {  $ ~int n , k , sum ;  $ ~int a [ 110 ] ;  $ ~cin >> n >> k ;  $ ~int j ;  $ ~for ( int i = 1 ; i <= n ; i ++ ) cin >> a [ i ] ;  $ ~sort ( a + 1 , a + n + 1 ) ;  $ ~int ans = - 1 ;  $ ~for ( int i = 1 ; i <= n ; i ++ ) {  $ ~~for ( j = i + 1 ; j <= n ; j ++ ) {  $ ~~~if ( a [ j ] - a [ i ] > k ) {  $ ~~~~sum = j - i ;  $ ~~~~break ;  $ ~~~}  $ ~~}  $ ~~if ( j == n + 1 ) sum = n - i + 1 ;  $ ~~ans = max ( ans , sum ) ;  $ ~}  $ ~cout << n - ans << endl ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~char b [ 100 ] ;  $ ~int a , j , sum = 0 ;  $ ~cin >> a ;  $ ~for ( j = 0 ; j < a ; j ++ ) {  $ ~~cin >> b ;  $ ~~if ( strcmp ( b , "Tetrahedron" ) == 0 ) { sum = sum + 4 ; }  $ ~~if ( strcmp ( b , "Cube" ) == 0 ) { sum = sum + 6 ; }  $ ~~if ( strcmp ( b , "Octahedron" ) == 0 ) { sum = sum + 8 ; }  $ ~~if ( strcmp ( b , "Dodecahedron" ) == 0 ) { sum = sum + 12 ; }  $ ~~if ( strcmp ( b , "Icosahedron" ) == 0 ) { sum = sum + 20 ; }  $ ~}  $ ~cout << sum << endl ;  $ }
const long double pi = 3.1415926535 ;  $ int main ( ) {  $ ~long long int n ;  $ ~cin >> n ;  $ ~vector < long long int > a ( n , 0 ) ;  $ ~vector < long long int > b ( n , 0 ) ;  $ ~map < long long int , long long int > mpb , mpa ;  $ ~for ( long long int i = 0 ; i < n ; i ++ ) {  $ ~~cin >> a [ i ] ;  $ ~~mpa [ a [ i ] ] ++ ;  $ ~}  $ ~for ( long long int i = 0 ; i < n ; i ++ ) {  $ ~~cin >> b [ i ] ;  $ ~~mpb [ b [ i ] ] ++ ;  $ ~~mpa [ b [ i ] ] ++ ;  $ ~}  $ ~long long int ans = 0 ;  $ ~for ( long long int i = 1 ; i <= 5 ; i ++ ) {  $ ~~if ( mpa [ i ] % 2 != 0 ) {  $ ~~~cout << - 1 << endl ;  $ ~~~return 0 ;  $ ~~} else {  $ ~~~ans += abs ( mpa [ i ] / 2 - mpb [ i ] ) ;  $ ~~}  $ ~}  $ ~cout << ans / 2 << endl ;  $ }
int main ( ) {  $ ~int n ;  $ ~double a [ 180 ] ;  $ ~cin >> n ;  $ ~for ( int f = 0 ; f < n ; f ++ ) { cin >> a [ f ] ; }  $ ~for ( int f = 0 ; f < n ; f ++ ) {  $ ~~bool y = false ;  $ ~~for ( int i = 3 ; i < 1000 ; i ++ ) {  $ ~~~if ( ( ( double ( i ) - 2 ) * 180 ) / ( double ( i ) ) == a [ f ] ) y = true ;  $ ~~}  $ ~~if ( y == true )  $ ~~~cout << "YES" << endl ;  $ ~~else  $ ~~~cout << "NO" << endl ;  $ ~}  $ }
int gcd ( int a , int b ) {  $ ~if ( b == 0 ) return a ;  $ ~return gcd ( b , a % b ) ;  $ }  $ int main ( ) {  $ ~int n ;  $ ~while ( cin >> n ) {  $ ~~int ans ;  $ ~~for ( int i = 0 ; i < n ; ++ i ) {  $ ~~~int t ;  $ ~~~cin >> t ;  $ ~~~if ( i == 0 )  $ ~~~~ans = t ;  $ ~~~else  $ ~~~~ans = gcd ( ans , t ) ;  $ ~~}  $ ~~cout << ans * n << endl ;  $ ~}  $ }
string so ( int x ) {  $ ~string st = "" ;  $ ~while ( x > 0 ) {  $ ~~st = char ( x % 10 + 48 ) + st ;  $ ~~x /= 10 ;  $ ~}  $ ~return st ;  $ }  $ int main ( ) {  $ ~int n ;  $ ~cin >> n ;  $ ~string st ;  $ ~int d ;  $ ~for ( int i = 1 ; i <= n ; i ++ ) {  $ ~~cin >> st ;  $ ~~if ( st . length ( ) > 10 ) {  $ ~~~d = st . length ( ) - 2 ;  $ ~~~st . replace ( 1 , d , so ( d ) ) ;  $ ~~}  $ ~~cout << st << endl ;  $ ~}  $ ~return 0 ;  $ }
int main ( ) {  $ ~long long n ;  $ ~cin >> n ;  $ ~if ( n == 2 )  $ ~~cout << 2 << endl ;  $ ~else  $ ~~cout << 1 << endl ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~int n ;  $ ~cin >> n ;  $ ~if ( n <= 10 || n >= 22 )  $ ~~cout << '0' << endl ;  $ ~else if ( n >= 11 && n < 20 )  $ ~~cout << '4' << endl ;  $ ~else if ( n == 20 )  $ ~~cout << "15" << endl ;  $ ~else if ( n == 21 )  $ ~~cout << '4' << endl ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~int a , b ;  $ ~cin >> a >> b ;  $ ~if ( a < b ) {  $ ~~int x = a ;  $ ~~a = b ;  $ ~~b = x ;  $ ~}  $ ~cout << b << " " << ( a - b ) / 2 << endl ;  $ ~return 0 ;  $ }
int gcd ( int a , int b ) {  $ ~if ( b == 0 )  $ ~~return a ;  $ ~else  $ ~~gcd ( b , a % b ) ;  $ }  $ int main ( ) {  $ ~int n , a [ 100010 ] ;  $ ~while ( cin >> n ) {  $ ~~for ( int i = 0 ; i < n ; i ++ ) cin >> a [ i ] ;  $ ~~int dif ;  $ ~~if ( n != 1 ) dif = a [ n - 1 ] - a [ n - 2 ] ;  $ ~~if ( n == 1 ) {  $ ~~~if ( a [ n - 1 ] == 15 )  $ ~~~~cout << "DOWN" ;  $ ~~~else if ( a [ n - 1 ] == 0 )  $ ~~~~cout << "UP" ;  $ ~~~else  $ ~~~~cout << "-1" ;  $ ~~} else if ( dif > 0 ) {  $ ~~~if ( a [ n - 1 ] == 15 )  $ ~~~~cout << "DOWN" ;  $ ~~~else  $ ~~~~cout << "UP" ;  $ ~~} else {  $ ~~~if ( a [ n - 1 ] == 0 )  $ ~~~~cout << "UP" ;  $ ~~~else  $ ~~~~cout << "DOWN" ;  $ ~~}  $ ~~cout << endl ;  $ ~}  $ }
int arr [ 4 ] [ 4 ] ;  $ bool light [ 4 ] [ 4 ] ;  $ int main ( ) {  $ ~for ( int i = 1 ; i < 4 ; i ++ )  $ ~~for ( int j = 1 ; j < 4 ; j ++ ) cin >> arr [ i ] [ j ] ;  $ ~for ( int i = 1 ; i < 4 ; i ++ ) {  $ ~~for ( int j = 1 ; j < 4 ; j ++ ) {  $ ~~~if ( arr [ i ] [ j ] & 1 ) {  $ ~~~~light [ i ] [ j ] = ! light [ i ] [ j ] ;  $ ~~~~if ( i - 1 >= 1 ) light [ i - 1 ] [ j ] = ! light [ i - 1 ] [ j ] ;  $ ~~~~if ( i + 1 <= 3 ) light [ i + 1 ] [ j ] = ! light [ i + 1 ] [ j ] ;  $ ~~~~if ( j - 1 >= 1 ) light [ i ] [ j - 1 ] = ! light [ i ] [ j - 1 ] ;  $ ~~~~if ( j + 1 <= 3 ) light [ i ] [ j + 1 ] = ! light [ i ] [ j + 1 ] ;  $ ~~~}  $ ~~}  $ ~}  $ ~for ( int i = 1 ; i < 4 ; i ++ ) {  $ ~~for ( int j = 1 ; j < 4 ; j ++ ) {  $ ~~~if ( light [ i ] [ j ] )  $ ~~~~cout << 0 ;  $ ~~~else  $ ~~~~cout << 1 ;  $ ~~}  $ ~~cout << endl ;  $ ~}  $ ~return 0 ;  $ }
int jl [ 300 ] ;  $ int main ( ) {  $ ~string s1 ;  $ ~char yy [ ] = { 'A' , 'E' , 'O' , 'U' , 'I' , 'Y' } ;  $ ~int i , j , n , k = 0 , ans = - 1 ;  $ ~cin >> s1 ;  $ ~n = s1 . size ( ) ;  $ ~s1 [ n ] = 'P' ;  $ ~for ( i = 0 ; i <= n ; i ++ ) {  $ ~~jl [ k ] ++ ;  $ ~~if ( jl [ k ] > ans ) ans = jl [ k ] ;  $ ~~for ( j = 0 ; j < 6 ; j ++ ) {  $ ~~~if ( s1 [ i ] == yy [ j ] ) {  $ ~~~~k ++ ;  $ ~~~~break ;  $ ~~~}  $ ~~}  $ ~}  $ ~cout << ans << endl ;  $ ~return 0 ;  $ }
long long gcd ( long long a , long long b ) {  $ ~if ( b != 0 ) {  $ ~~return gcd ( b , a % b ) ;  $ ~} else {  $ ~~return a ;  $ ~}  $ }  $ int main ( ) {  $ ~int n , i , j ;  $ ~cin >> n ;  $ ~long long p , q , b , m , x ;  $ ~for ( i = 0 ; i < n ; i ++ ) {  $ ~~cin >> p >> q >> b ;  $ ~~m = q / gcd ( p , q ) ;  $ ~~x = gcd ( m , b ) ;  $ ~~while ( x != 1 ) {  $ ~~~m = m / x ;  $ ~~~x = gcd ( m , x ) ;  $ ~~}  $ ~~if ( m == 1 ) {  $ ~~~cout << "Finite" << endl ;  $ ~~} else {  $ ~~~cout << "Infinite" << endl ;  $ ~~}  $ ~}  $ }
int main ( ) {  $ ~int n ;  $ ~cin >> n ;  $ ~string str ;  $ ~cin >> str ;  $ ~int a [ 26 ] = { 0 } ;  $ ~for ( int i = 0 ; i < n ; i ++ ) { a [ str [ i ] - 'a' ] = 1 ; }  $ ~int sum = 0 ;  $ ~for ( int i = 0 ; i < 26 ; i ++ ) { sum += a [ i ] ; }  $ ~if ( sum == 1 || n == 1 )  $ ~~cout << "NO" << endl ;  $ ~else {  $ ~~int i = 0 ;  $ ~~while ( str [ i ] == str [ i + 1 ] ) { i ++ ; }  $ ~~cout << "YES" << endl ;  $ ~~cout << str [ i ] << str [ 1 + i ] << endl ;  $ ~}  $ }
int main ( ) {  $ ~int n , x , i , s = 0 ;  $ ~set < int > q ;  $ ~cin >> n ;  $ ~for ( i = 0 ; i < n ; i ++ ) {  $ ~~cin >> x ;  $ ~~if ( x ) q . insert ( x ) ;  $ ~}  $ ~cout << q . size ( ) << endl ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~double T , s , q , d ;  $ ~long long c = 0 ;  $ ~cin >> T >> s >> q ;  $ ~d = s ;  $ ~while ( d < T ) {  $ ~~d = d * q ;  $ ~~c ++ ;  $ ~}  $ ~cout << c << endl ;  $ ~return 0 ;  $ }
const long long int INF = 2000000000000000000 LL ;  $ const int MOD = 10000007 ;  $ int a [ 1000006 ] ;  $ int main ( ) {  $ ~int k , d ;  $ ~cin >> k >> d ;  $ ~if ( d == 0 ) {  $ ~~if ( k == 1 ) {  $ ~~~cout << "0"  $ ~~~~<< "\n" ;  $ ~~~;  $ ~~} else {  $ ~~~cout << "No solution"  $ ~~~~<< "\n" ;  $ ~~~;  $ ~~}  $ ~} else {  $ ~~cout << d ;  $ ~~for ( int i = 0 ; i < k - 1 ; i ++ ) cout << 0 ;  $ ~~cout << "\n" ;  $ ~~;  $ ~}  $ ~return 0 ;  $ }
int arr [ 10000 ] ;  $ int main ( ) {  $ ~int n , a , b , res ;  $ ~cin >> n ;  $ ~for ( int i = 0 ; i < n ; i ++ ) {  $ ~~cin >> a >> b ;  $ ~~res = 0 ;  $ ~~while ( a != 0 && b != 0 ) {  $ ~~~if ( a > b ) {  $ ~~~~res += a / b ;  $ ~~~~a = a % b ;  $ ~~~} else {  $ ~~~~res += b / a ;  $ ~~~~b = b % a ;  $ ~~~}  $ ~~}  $ ~~cout << res << endl ;  $ ~}  $ ~return 0 ;  $ }
int main ( ) {  $ ~int k , n , s , p ;  $ ~cin >> k >> n >> s >> p ;  $ ~n = ceil ( 1.0 * n / s ) ;  $ ~k = k * n ;  $ ~p = ceil ( 1.0 * k / p ) ;  $ ~cout << p << endl ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~int n , m , a [ 1001 ] = { 0 } ;  $ ~cin >> n >> m ;  $ ~for ( int i = 0 , tmp ; i < m ; ++ i ) {  $ ~~cin >> tmp ;  $ ~~-- tmp ;  $ ~~++ a [ tmp ] ;  $ ~}  $ ~int res = 1e9 ;  $ ~for ( int i = 0 ; i < n ; ++ i ) res = min ( res , a [ i ] ) ;  $ ~cout << res << endl ;  $ ~return 0 ;  $ }
char c [ 101 ] [ 101 ] , ct [ 101 ] [ 101 ] ;  $ int n , m , i , j ;  $ int main ( ) {  $ ~cin >> n >> m ;  $ ~for ( i = 1 ; i <= n ; i ++ )  $ ~~for ( j = 1 ; j <= m ; j ++ ) cin >> c [ i ] [ j ] ;  $ ~for ( i = 1 ; i <= n ; i ++ )  $ ~~if ( i % 2 != 0 ) {  $ ~~~for ( j = 1 ; j <= m ; j ++ )  $ ~~~~if ( j % 2 != 0 )  $ ~~~~~ct [ i ] [ j ] = 'B' ;  $ ~~~~else  $ ~~~~~ct [ i ] [ j ] = 'W' ;  $ ~~} else {  $ ~~~for ( j = 1 ; j <= m ; j ++ )  $ ~~~~if ( j % 2 != 0 )  $ ~~~~~ct [ i ] [ j ] = 'W' ;  $ ~~~~else  $ ~~~~~ct [ i ] [ j ] = 'B' ;  $ ~~}  $ ~for ( i = 1 ; i <= n ; i ++ )  $ ~~for ( j = 1 ; j <= m ; j ++ )  $ ~~~if ( c [ i ] [ j ] == '.' ) c [ i ] [ j ] = ct [ i ] [ j ] ;  $ ~for ( i = 1 ; i <= n ; i ++ ) {  $ ~~for ( j = 1 ; j <= m ; j ++ ) cout << c [ i ] [ j ] ;  $ ~~cout << endl ;  $ ~}  $ ~return 0 ;  $ }
int main ( ) {  $ ~int n , k , g , t ;  $ ~string s ;  $ ~cin >> n >> k ;  $ ~cin >> s ;  $ ~for ( int i = 0 ; i < n ; i ++ ) {  $ ~~if ( s [ i ] == 'G' ) { g = i ; }  $ ~~if ( s [ i ] == 'T' ) { t = i ; }  $ ~}  $ ~if ( g < t ) {  $ ~~int i = g ;  $ ~~while ( i < n ) {  $ ~~~if ( s [ i ] == '#' ) {  $ ~~~~cout << "NO" << endl ;  $ ~~~~return 0 ;  $ ~~~}  $ ~~~if ( s [ i ] == 'T' ) {  $ ~~~~cout << "YES" << endl ;  $ ~~~~return 0 ;  $ ~~~}  $ ~~~i += k ;  $ ~~}  $ ~} else {  $ ~~int i = g ;  $ ~~while ( i > - 1 ) {  $ ~~~if ( s [ i ] == '#' ) {  $ ~~~~cout << "NO" << endl ;  $ ~~~~return 0 ;  $ ~~~}  $ ~~~if ( s [ i ] == 'T' ) {  $ ~~~~cout << "YES" << endl ;  $ ~~~~return 0 ;  $ ~~~}  $ ~~~i -= k ;  $ ~~}  $ ~}  $ ~cout << "NO" << endl ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~int n ;  $ ~cin >> n ;  $ ~cout << ( n == 2 ? 2 : 1 ) << '\n' ;  $ ~return 0 ;  $ }
string s [ ] = { "NO" , "YES" } ;  $ int n , t ;  $ double u ;  $ int main ( ) {  $ ~cin >> n ;  $ ~for ( int i = 1 ; i <= n ; i ++ ) {  $ ~~cin >> u ;  $ ~~t = 0 ;  $ ~~for ( int j = 3 ; j <= 50000 ; j ++ ) {  $ ~~~if ( u * j == ( j - 2 ) * 180 ) t = 1 ;  $ ~~}  $ ~~cout << s [ t ] << '\n' ;  $ ~}  $ }
int main ( ) {  $ ~long long x , y ;  $ ~cin >> x >> y ;  $ ~long long a = abs ( x ) + abs ( y ) ;  $ ~if ( ( x > 0 ) and ( y > 0 ) ) cout << "0 " << a << " " << a << " 0\n" ;  $ ~if ( ( x < 0 ) and ( y > 0 ) ) cout << - a << " 0 0 " << a << "\n" ;  $ ~if ( ( x > 0 ) and ( y < 0 ) ) cout << "0 " << - a << " " << a << " 0\n" ;  $ ~if ( ( x < 0 ) and ( y < 0 ) ) cout << - a << " 0 0 " << - a << "\n" ;  $ }
int main ( ) {  $ ~string s ;  $ ~cin >> s ;  $ ~int c = 0 ;  $ ~int c2 = 0 ;  $ ~if ( s [ 0 ] == '0' )  $ ~~c += 2 ;  $ ~else if ( s [ 0 ] == '1' )  $ ~~c += 7 ;  $ ~else if ( s [ 0 ] == '2' )  $ ~~c += 2 ;  $ ~else if ( s [ 0 ] == '3' )  $ ~~c += 3 ;  $ ~else if ( s [ 0 ] == '4' )  $ ~~c += 3 ;  $ ~else if ( s [ 0 ] == '5' )  $ ~~c += 4 ;  $ ~else if ( s [ 0 ] == '6' )  $ ~~c += 2 ;  $ ~else if ( s [ 0 ] == '7' )  $ ~~c += 5 ;  $ ~else if ( s [ 0 ] == '8' )  $ ~~c += 1 ;  $ ~else if ( s [ 0 ] == '9' )  $ ~~c += 2 ;  $ ~if ( s [ 1 ] == '0' )  $ ~~c2 += 2 ;  $ ~else if ( s [ 1 ] == '1' )  $ ~~c2 += 7 ;  $ ~else if ( s [ 1 ] == '2' )  $ ~~c2 += 2 ;  $ ~else if ( s [ 1 ] == '3' )  $ ~~c2 += 3 ;  $ ~else if ( s [ 1 ] == '4' )  $ ~~c2 += 3 ;  $ ~else if ( s [ 1 ] == '5' )  $ ~~c2 += 4 ;  $ ~else if ( s [ 1 ] == '6' )  $ ~~c2 += 2 ;  $ ~else if ( s [ 1 ] == '7' )  $ ~~c2 += 5 ;  $ ~else if ( s [ 1 ] == '8' )  $ ~~c2 += 1 ;  $ ~else if ( s [ 1 ] == '9' )  $ ~~c2 += 2 ;  $ ~cout << c * c2 << endl ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~long long b = 1 , sum = 0 , a , sum2 = 0 , sum3 = 0 , sum4 = 0 ;  $ ~string w ;  $ ~cin >> a ;  $ ~for ( int i = 0 ; i < ( a - 1 ) / 2 ; i ++ ) {  $ ~~b ++ ;  $ ~~for ( int w = 0 ; w < 1 ; w ++ ) {  $ ~~~for ( int q = ( a - ( i * 2 + 1 ) ) / 2 ; q > 0 ; q -- ) { cout << "*" ; }  $ ~~~for ( int q = 1 + i * 2 ; q > 0 ; q -- ) { cout << "D" ; }  $ ~~~for ( int q = ( a - ( i * 2 + 1 ) ) / 2 ; q > 0 ; q -- ) { cout << "*" ; }  $ ~~~cout << endl ;  $ ~~}  $ ~}  $ ~for ( int i = 0 ; i < a ; i ++ ) { cout << "D" ; }  $ ~cout << endl ;  $ ~for ( int i = 0 ; i < ( a - 1 ) / 2 ; i ++ ) {  $ ~~b ++ ;  $ ~~for ( int w = 0 ; w < 1 ; w ++ ) {  $ ~~~for ( int q = ( a - ( 1 + ( a - b ) * 2 ) ) / 2 ; q > 0 ; q -- ) { cout << "*" ; }  $ ~~~for ( int q = 1 + ( a - b ) * 2 ; q > 0 ; q -- ) { cout << "D" ; }  $ ~~~for ( int q = ( a - ( 1 + ( a - b ) * 2 ) ) / 2 ; q > 0 ; q -- ) { cout << "*" ; }  $ ~~~cout << endl ;  $ ~~}  $ ~}  $ ~return 0 ;  $ }
int main ( ) {  $ ~int n , a , cnt , max = 0 ;  $ ~cin >> n ;  $ ~vector < int > sub ;  $ ~for ( int i = 0 ; i < n ; i ++ ) {  $ ~~cin >> a ;  $ ~~sub . push_back ( a ) ;  $ ~}  $ ~for ( int i = 0 ; i < n ; i ++ ) {  $ ~~cnt = 1 ;  $ ~~for ( int j = i ; j < n - 1 ; j ++ ) {  $ ~~~if ( sub [ j ] <= sub [ j + 1 ] ) {  $ ~~~~cnt ++ ;  $ ~~~} else {  $ ~~~~break ;  $ ~~~}  $ ~~}  $ ~~if ( cnt > max ) max = cnt ;  $ ~}  $ ~cout << max << endl ;  $ ~return 0 ;  $ }
bool visited [ 100001 ] ;  $ int parent [ 100001 ] ;  $ void initialize ( int n ) {  $ ~for ( int i = 0 ; i < n ; i ++ ) {  $ ~~visited [ i ] = 0 ;  $ ~~parent [ i ] = i ;  $ ~}  $ }  $ long long sum ( long long n ) {  $ ~long long ans = n ;  $ ~while ( n != 0 ) {  $ ~~ans = ans + n % 10 ;  $ ~~n = n / 10 ;  $ ~}  $ ~return ans ;  $ }  $ long long max ( long long x , long long y ) {  $ ~return x > y ? x : y ;  $ }  $ int main ( ) {  $ ~long long n ;  $ ~cin >> n ;  $ ~long long x = n - n % 10 ;  $ ~vector < long long > a ;  $ ~for ( int i = max ( n - 82 , 0 ) ; i < n ; i ++ ) {  $ ~~if ( sum ( i ) == n ) a . push_back ( i ) ;  $ ~}  $ ~sort ( a . begin ( ) , a . end ( ) ) ;  $ ~cout << a . size ( ) << endl ;  $ ~for ( int i = 0 ; i < a . size ( ) ; i ++ ) cout << a [ i ] << endl ;  $ }
int a [ 105 ] , m , n , Max , Min , sum ;  $ int main ( ) {  $ ~cin >> n >> m ;  $ ~for ( int i = 0 ; i < n ; i ++ ) { cin >> a [ i ] ; }  $ ~sort ( a , a + n ) ;  $ ~for ( int i = 0 ; i < n - 1 ; i ++ ) { sum += ( a [ n - 1 ] - a [ i ] ) ; }  $ ~Max = a [ n - 1 ] + m ;  $ ~if ( a [ n - 1 ] - a [ 0 ] >= m )  $ ~~Min = a [ n - 1 ] ;  $ ~else {  $ ~~if ( m <= sum )  $ ~~~Min = a [ n - 1 ] ;  $ ~~else {  $ ~~~m -= sum ;  $ ~~~if ( m % n == 0 )  $ ~~~~Min = a [ n - 1 ] + m / n ;  $ ~~~else  $ ~~~~Min = a [ n - 1 ] + m / n + 1 ;  $ ~~}  $ ~}  $ ~cout << Min << " " << Max << endl ;  $ }
int a [ 110 ] , b [ 110 ] , v1 [ 10 ] , v2 [ 10 ] , v [ 10 ] ;  $ int main ( ) {  $ ~int n ;  $ ~cin >> n ;  $ ~for ( int i = 0 ; i < n ; i ++ ) {  $ ~~cin >> a [ i ] ;  $ ~~v1 [ a [ i ] ] ++ ;  $ ~~v [ a [ i ] ] ++ ;  $ ~}  $ ~for ( int i = 0 ; i < n ; i ++ ) {  $ ~~cin >> b [ i ] ;  $ ~~v2 [ b [ i ] ] ++ ;  $ ~~v [ b [ i ] ] ++ ;  $ ~}  $ ~int sum = 0 ;  $ ~for ( int i = 1 ; i <= 5 ; i ++ ) {  $ ~~if ( v [ i ] % 2 == 1 ) {  $ ~~~cout << "-1" << endl ;  $ ~~~return 0 ;  $ ~~} else {  $ ~~~sum += abs ( v [ i ] / 2 - v1 [ i ] ) ;  $ ~~}  $ ~}  $ ~cout << sum / 2 << endl ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~int n ;  $ ~cin >> n ;  $ ~vector < string > cap , chil , rat , wo , men ;  $ ~string x , y ;  $ ~for ( int i = 0 ; i < n ; i ++ ) {  $ ~~cin >> x >> y ;  $ ~~if ( y == "captain" ) {  $ ~~~cap . push_back ( x ) ;  $ ~~} else if ( y == "woman" || y == "child" ) {  $ ~~~wo . push_back ( x ) ;  $ ~~} else if ( y == "man" ) {  $ ~~~men . push_back ( x ) ;  $ ~~} else if ( y == "rat" ) {  $ ~~~rat . push_back ( x ) ;  $ ~~}  $ ~}  $ ~int s1 = rat . size ( ) , s2 = wo . size ( ) , s3 = men . size ( ) , s4 = cap . size ( ) ;  $ ~for ( int i = 0 ; i < s1 ; i ++ ) { cout << rat [ i ] << endl ; }  $ ~for ( int i = 0 ; i < s2 ; i ++ ) { cout << wo [ i ] << endl ; }  $ ~for ( int i = 0 ; i < s3 ; i ++ ) { cout << men [ i ] << endl ; }  $ ~for ( int i = 0 ; i < s4 ; i ++ ) { cout << cap [ i ] << endl ; }  $ ~return 0 ;  $ }
int main ( ) {  $ ~int i , n , k ;  $ ~cin >> n >> k ;  $ ~for ( i = 0 ; i < k ; i ++ ) {  $ ~~if ( n % 10 != 0 ) {  $ ~~~n = ( n - 1 ) ;  $ ~~} else {  $ ~~~n = ( n / 10 ) ;  $ ~~}  $ ~}  $ ~cout << n << endl ;  $ ~return 0 ;  $ }
inline long long gcd ( long long a , long long b ) {  $ ~if ( a == 0 ) return b ;  $ ~return gcd ( b % a , a ) ;  $ }  $ inline long long power ( long long a , long long n , long long m ) {  $ ~if ( n == 0 ) return 1 ;  $ ~long long p = power ( a , n / 2 , m ) ;  $ ~p = ( p * p ) % m ;  $ ~if ( n % 2 )  $ ~~return ( p * a ) % m ;  $ ~else  $ ~~return p ;  $ }  $ const long long MOD = 1000000007 ;  $ const int INF = 0 x3f3f3f3f ;  $ const long long LL_INF = 0 x3f3f3f3f3f3f3f3f ;  $ int main ( ) {  $ ~long long s , x , y , mx ;  $ ~cin >> s >> x ;  $ ~long long j = 1 ;  $ ~y = s - x ;  $ ~if ( y % 2 ) {  $ ~~cout << 0 << endl ;  $ ~~return 0 ;  $ ~}  $ ~y = y / 2 ;  $ ~long long ans = 1 ;  $ ~mx = max ( x , s ) ;  $ ~while ( j <= x ) {  $ ~~if ( ( j & x ) ) {  $ ~~~if ( y & j ) {  $ ~~~~cout << 0 << endl ;  $ ~~~~return 0 ;  $ ~~~} else {  $ ~~~~ans *= 2 ;  $ ~~~}  $ ~~}  $ ~~j = j << 1 ;  $ ~}  $ ~if ( x == s ) ans -= 2 ;  $ ~cout << ans << endl ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~long long n , m , mini , maxi ;  $ ~cin >> n >> m >> mini >> maxi ;  $ ~long long arr [ m + 1 ] ;  $ ~for ( long long i = 1 ; i <= m ; i ++ ) { cin >> arr [ i ] ; }  $ ~sort ( arr + 1 , arr + m + 1 ) ;  $ ~if ( arr [ 1 ] < mini || arr [ m ] > maxi ) {  $ ~~cout << "Incorrect\n" ;  $ ~~return 0 ;  $ ~}  $ ~if ( arr [ 1 ] == mini && arr [ m ] == maxi ) {  $ ~~cout << "Correct\n" ;  $ ~} else if ( arr [ 1 ] == mini || arr [ m ] == maxi ) {  $ ~~cout << "Correct\n" ;  $ ~} else {  $ ~~if ( n - m == 1 LL ) {  $ ~~~cout << "Incorrect\n" ;  $ ~~} else {  $ ~~~cout << "Correct\n" ;  $ ~~}  $ ~}  $ }
int main ( ) {  $ ~long long n ;  $ ~cin >> n ;  $ ~long long a [ n ] ;  $ ~long long b [ 101 ] ;  $ ~memset ( b , 0 , sizeof b ) ;  $ ~for ( long long int i = 0 ; i < n ; i ++ ) {  $ ~~cin >> a [ i ] ;  $ ~~b [ a [ i ] ] ++ ;  $ ~}  $ ~long long m = 0 ;  $ ~for ( long long int i = 0 ; i < 101 ; i ++ ) { m = max ( m , b [ i ] ) ; }  $ ~cout << m << "\n" ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~int a1 , a2 , a3 ;  $ ~cin >> a1 >> a2 >> a3 ;  $ ~float a = pow ( a1 , 0.5 ) ;  $ ~float b = pow ( a2 , 0.5 ) ;  $ ~float c = pow ( a3 , 0.5 ) ;  $ ~float d = a * b * c ;  $ ~cout << 4 * ( d / a1 + d / a2 + d / a3 ) << endl ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~long int a , b ;  $ ~cin >> a ;  $ ~if ( a == 1 )  $ ~~cout << "1\n" ;  $ ~else if ( a == 2 )  $ ~~cout << "2\n" ;  $ ~else  $ ~~cout << "1\n" ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~int n ;  $ ~cin >> n ;  $ ~int num ;  $ ~int sum = 0 , maxNum = 0 ;  $ ~for ( int i = 0 ; i < n ; i ++ ) {  $ ~~cin >> num ;  $ ~~if ( maxNum < num ) maxNum = num ;  $ ~~sum += num ;  $ ~}  $ ~int k = 2 * sum / n + 1 ;  $ ~cout << ( k < maxNum ? maxNum : k ) << endl ;  $ }
int main ( ) {  $ ~int n , m ;  $ ~cin >> n >> m ;  $ ~string s ;  $ ~cin >> s ;  $ ~while ( m -- ) {  $ ~~int l , r , i ;  $ ~~char c1 , c2 ;  $ ~~string s1 = "" ;  $ ~~cin >> l >> r >> c1 >> c2 ;  $ ~~for ( i = 0 ; i < n ; i ++ ) {  $ ~~~if ( s [ i ] == c1 && i >= ( l - 1 ) && i <= ( r - 1 ) )  $ ~~~~s1 += c2 ;  $ ~~~else  $ ~~~~s1 += s [ i ] ;  $ ~~}  $ ~~s = s1 ;  $ ~}  $ ~cout << s << endl ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~long long arr [ 3 ] ;  $ ~for ( long long i = 0 ; i < 3 ; i ++ ) { cin >> arr [ i ] ; }  $ ~sort ( arr , arr + 3 ) ;  $ ~arr [ 2 ] = arr [ 2 ] - arr [ 0 ] - arr [ 1 ] ;  $ ~if ( arr [ 2 ] >= 0 ) {  $ ~~cout << arr [ 2 ] + 1 << "\n" ;  $ ~} else {  $ ~~cout << "0"  $ ~~~<< "\n" ;  $ ~}  $ }
int main ( ) {  $ ~int a , x , t ;  $ ~cin >> t ;  $ ~while ( t != 0 ) {  $ ~~cin >> a ;  $ ~~if ( 360 % ( 180 - a ) == 0 ) {  $ ~~~cout << "YES" << endl ;  $ ~~} else {  $ ~~~cout << "NO" << endl ;  $ ~~}  $ ~~t -- ;  $ ~}  $ ~return 0 ;  $ }
int main ( ) {  $ ~long long int n ;  $ ~long long int arr [ 100005 ] ;  $ ~long long int temp ;  $ ~long long int result = 0 ;  $ ~long long int repeat = 0 ;  $ ~cin >> n ;  $ ~for ( long long int i = 0 ; i < n ; i ++ ) {  $ ~~cin >> temp ;  $ ~~arr [ i ] = temp ;  $ ~}  $ ~for ( long long int i = 0 ; i < n ; i ++ ) {  $ ~~long long int j = i ;  $ ~~if ( j != 0 ) {  $ ~~~if ( arr [ j ] == arr [ j - 1 ] ) {  $ ~~~~result += repeat ;  $ ~~~~repeat -- ;  $ ~~~~continue ;  $ ~~~} else {  $ ~~~~repeat = 0 ;  $ ~~~}  $ ~~}  $ ~~while ( j < n && arr [ j ] == arr [ i ] ) {  $ ~~~repeat ++ ;  $ ~~~result ++ ;  $ ~~~j ++ ;  $ ~~}  $ ~~repeat -- ;  $ ~}  $ ~cout << result << endl ;  $ ~return 0 ;  $ }
long long gcd ( long long a , long long b ) {  $ ~return b == 0 ? a : gcd ( b , a % b ) ;  $ }  $ long long lcm ( long long a , long long b ) {  $ ~return a * b / gcd ( a , b ) ;  $ }  $ bool gr ( int a , int b ) {  $ ~return a > b ;  $ }  $ int main ( ) {  $ ~long long l , r ;  $ ~cin >> l >> r ;  $ ~long long a = 1 ;  $ ~while ( a <= r ) { a *= 10 ; }  $ ~long long mx = min ( max ( a / 2 , l ) , r ) ;  $ ~cout << mx * ( a - mx - 1 ) << endl ;  $ }
void solve ( ) {  $ ~int n , k ;  $ ~cin >> n >> k ;  $ ~int ans = 0 ;  $ ~int x ;  $ ~for ( int i = 0 ; i < n ; i ++ ) {  $ ~~cin >> x ;  $ ~~if ( x % k == 0 ) {  $ ~~~ans += x / k ;  $ ~~} else {  $ ~~~ans += x / k + 1 ;  $ ~~}  $ ~}  $ ~if ( ans % 2 == 0 )  $ ~~cout << ( ans / 2 ) << endl ;  $ ~else  $ ~~cout << ( ans / 2 + 1 ) << endl ;  $ }  $ int main ( ) {  $ ~solve ( ) ;  $ ~return 0 ;  $ }
int gum ( int x ) {  $ ~int s = 0 ;  $ ~double k = 0 ;  $ ~int d ;  $ ~while ( x != 0 ) {  $ ~~d = x % 10 ;  $ ~~if ( d == 0 ) {  $ ~~~x /= 10 ;  $ ~~~continue ;  $ ~~} else {  $ ~~~s += ( int ) d * pow ( 10 , k ) ;  $ ~~~x /= 10 ;  $ ~~}  $ ~~k ++ ;  $ ~}  $ ~return s ;  $ }  $ int main ( ) {  $ ~double x , y ;  $ ~pair < int , int > p [ 10000 ] ;  $ ~char s [ 20 ] ;  $ ~bool q = false ;  $ ~int sum = 0 ;  $ ~unsigned long long t ;  $ ~int a [ 100008 ] , b [ 100008 ] , c ;  $ ~int i , j , m , n ;  $ ~double d , L , v1 , v2 ;  $ ~cin >> s ;  $ ~if ( s [ 0 ] == 'h' || s [ 0 ] == 'a' )  $ ~~if ( s [ 1 ] == '1' || s [ 1 ] == '8' )  $ ~~~cout << 3 << endl ;  $ ~~else  $ ~~~cout << 5 << endl ;  $ ~else if ( s [ 1 ] == '1' || s [ 1 ] == '8' )  $ ~~cout << 5 << endl ;  $ ~else  $ ~~cout << 8 << endl ;  $ ~return 0 ;  $ }
const int maxn = 1000 ;  $ int main ( ) {  $ ~int n , a , b ;  $ ~cin >> n ;  $ ~for ( int i = 0 ; i < n ; i ++ ) {  $ ~~cin >> a >> b ;  $ ~~int sum = 0 ;  $ ~~while ( a != 0 && b != 0 ) {  $ ~~~if ( a > b ) {  $ ~~~~sum += a / b ;  $ ~~~~a = a % b ;  $ ~~~} else {  $ ~~~~sum += b / a ;  $ ~~~~b = b % a ;  $ ~~~}  $ ~~}  $ ~~cout << sum << endl ;  $ ~}  $ ~return 0 ;  $ }
int main ( ) {  $ ~int n , count , i , j ;  $ ~count = 0 ;  $ ~cin >> n ;  $ ~int line [ n ] = { 0 } ;  $ ~for ( i = 0 ; i < n ; i ++ ) { cin >> line [ i ] ; }  $ ~int max = 0 ;  $ ~for ( i = 0 ; i < n ; i ++ ) {  $ ~~if ( line [ i ] > line [ max ] ) { max = i ; }  $ ~}  $ ~for ( i = max - 1 ; i >= 0 ; i -- ) {  $ ~~int temp = line [ i ] ;  $ ~~line [ i ] = line [ i + 1 ] ;  $ ~~line [ i + 1 ] = temp ;  $ ~~count ++ ;  $ ~}  $ ~int min = 0 ;  $ ~for ( i = 0 ; i < n ; i ++ ) {  $ ~~if ( line [ i ] <= line [ min ] ) { min = i ; }  $ ~}  $ ~cout << count + n - min - 1 << endl ;  $ }
int main ( ) {  $ ~long long n , a , b , c , i , j , k ;  $ ~cin >> n >> a >> b >> c ;  $ ~long long MIN = 9999999999 ;  $ ~if ( n % 4 == 0 ) {  $ ~~cout << 0 << endl ;  $ ~~return 0 ;  $ ~} else {  $ ~~for ( i = 0 ; i <= 4 ; i ++ ) {  $ ~~~for ( j = 0 ; j <= 4 ; j ++ ) {  $ ~~~~for ( k = 0 ; k <= 4 ; k ++ ) {  $ ~~~~~if ( ( n + i + j * 2 + k * 3 ) % 4 == 0 ) { MIN = min ( MIN , i * a + j * b + c * k ) ; }  $ ~~~~}  $ ~~~}  $ ~~}  $ ~}  $ ~cout << MIN << endl ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~int n , a , b , totalpass = 0 , ftpass = 0 ;  $ ~cin >> n ;  $ ~for ( int i = 0 ; i < n ; i ++ ) {  $ ~~cin >> a >> b ;  $ ~~totalpass = totalpass - a ;  $ ~~totalpass = totalpass + b ;  $ ~~if ( totalpass > ftpass ) { ftpass = totalpass ; }  $ ~}  $ ~cout << ftpass << endl ;  $ }
int number ( char x ) {  $ ~int n ;  $ ~if ( x == '0' )  $ ~~n = 2 ;  $ ~else if ( x == '1' )  $ ~~n = 7 ;  $ ~else if ( x == '2' )  $ ~~n = 2 ;  $ ~else if ( x == '3' )  $ ~~n = 3 ;  $ ~else if ( x == '4' )  $ ~~n = 3 ;  $ ~else if ( x == '5' )  $ ~~n = 4 ;  $ ~else if ( x == '6' )  $ ~~n = 2 ;  $ ~else if ( x == '7' )  $ ~~n = 5 ;  $ ~else if ( x == '8' )  $ ~~n = 1 ;  $ ~else if ( x == '9' )  $ ~~n = 2 ;  $ ~return n ;  $ }  $ int main ( ) {  $ ~string s ;  $ ~int ans = 0 ;  $ ~cin >> s ;  $ ~ans = number ( s [ 0 ] ) * number ( s [ 1 ] ) ;  $ ~cout << ans << endl ;  $ }
int main ( ) {  $ ~int price , r ;  $ ~cin >> price >> r ;  $ ~int counter = 1 ;  $ ~while ( ( ( price * counter ) - r ) % 10 != 0 && ( price * counter ) % 10 != 0 ) { counter ++ ; }  $ ~cout << counter << endl ;  $ ~return 0 ;  $ }
const int N = 1000 ;  $ int n , x , z , sum ;  $ int main ( ) {  $ ~cin >> n >> x >> z ;  $ ~z *= n ;  $ ~while ( n != 1 ) {  $ ~~sum += ( ( x * 2 ) + 1 ) * ( n / 2 ) ;  $ ~~if ( n % 2 == 0 )  $ ~~~n /= 2 ;  $ ~~else  $ ~~~n = ( n + 2 ) / 2 ;  $ ~}  $ ~cout << sum << " " << z << endl ;  $ }
int main ( ) {  $ ~int r = 8 , c = 8 ;  $ ~string aux ;  $ ~for ( int i = 0 ; i < r ; ++ i ) {  $ ~~cin >> aux ;  $ ~~if ( aux != "WBWBWBWB" && aux != "BWBWBWBW" ) {  $ ~~~cout << "NO"  $ ~~~~<< "\n" ;  $ ~~~return 0 ;  $ ~~}  $ ~}  $ ~cout << "YES"  $ ~~<< "\n" ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~string a , b ;  $ ~cin >> a >> b ;  $ ~int x = 0 ;  $ ~for ( int i = 0 ; i < a . size ( ) ; i += 2 ) {  $ ~~if ( a [ i ] == b [ i ] ) continue ;  $ ~~if ( a [ i ] == '8' ) {  $ ~~~if ( b [ i ] == '(' ) {  $ ~~~~x -- ;  $ ~~~} else {  $ ~~~~x ++ ;  $ ~~~}  $ ~~} else if ( a [ i ] == '(' ) {  $ ~~~if ( b [ i ] == '[' ) {  $ ~~~~x -- ;  $ ~~~} else {  $ ~~~~x ++ ;  $ ~~~}  $ ~~} else {  $ ~~~if ( b [ i ] == '(' )  $ ~~~~x ++ ;  $ ~~~else  $ ~~~~x -- ;  $ ~~}  $ ~}  $ ~cout << ( ! x ? "TIE\n" : ( x > 0 ? "TEAM 1 WINS\n" : "TEAM 2 WINS\n" ) ) ;  $ ~return 0 ;  $ }
map < pair < long long , long long > , long long > mp ;  $ long long depth ( long long x ) {  $ ~long long ans = 0 ;  $ ~while ( x != 0 ) {  $ ~~x /= 2 ;  $ ~~ans ++ ;  $ ~}  $ ~return ans ;  $ }  $ long long increase ( long long a , long long b , long long c ) {  $ ~long long x = a , y = b ;  $ ~long long ans = 0 ;  $ ~while ( x != y ) {  $ ~~if ( depth ( x ) < depth ( y ) ) {  $ ~~~ans += mp [ { y / 2 , y } ] ;  $ ~~~mp [ { y / 2 , y } ] += c ;  $ ~~~y /= 2 ;  $ ~~} else {  $ ~~~ans += mp [ { x / 2 , x } ] ;  $ ~~~mp [ { x / 2 , x } ] += c ;  $ ~~~x /= 2 ;  $ ~~}  $ ~}  $ ~return ans ;  $ }  $ int main ( ) {  $ ~long long q ;  $ ~cin >> q ;  $ ~long long a , b , c , d ;  $ ~while ( q -- ) {  $ ~~cin >> a >> b >> c ;  $ ~~if ( a == 1 ) {  $ ~~~cin >> d ;  $ ~~~increase ( c , b , d ) ;  $ ~~} else {  $ ~~~long long ans = increase ( c , b , 0 ) ;  $ ~~~cout << ans << endl ;  $ ~~}  $ ~}  $ }
int main ( ) {  $ ~int n ;  $ ~cin >> n ;  $ ~set < long long > words ;  $ ~for ( int i = 0 ; i < n ; i ++ ) {  $ ~~string s ;  $ ~~cin >> s ;  $ ~~vector < bool > b ( 26 ) ;  $ ~~for ( int j = 0 ; j < s . size ( ) ; j ++ ) b [ s [ j ] - 'a' ] = true ;  $ ~~long long hash = 0 , p = 1 ;  $ ~~for ( int j = 0 ; j < 26 ; j ++ , p << = 1 ) hash += b [ j ] * p ;  $ ~~words . insert ( hash ) ;  $ ~}  $ ~cout << words . size ( ) << endl ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~int n ;  $ ~cin >> n ;  $ ~char d , o ;  $ ~char a [ n ] [ n ] ;  $ ~for ( int i = 0 ; i < n ; i ++ ) {  $ ~~for ( int j = 0 ; j < n ; j ++ ) { cin >> a [ i ] [ j ] ; }  $ ~}  $ ~d = a [ 0 ] [ 0 ] ;  $ ~o = a [ 0 ] [ 1 ] ;  $ ~int flag = 0 ;  $ ~if ( d == o ) flag = 1 ;  $ ~for ( int i = 0 ; i < n ; i ++ ) {  $ ~~for ( int j = 0 ; j < n ; j ++ ) {  $ ~~~if ( ( i == j ) || ( i + j == ( n - 1 ) ) ) {  $ ~~~~if ( a [ i ] [ j ] != d ) {  $ ~~~~~flag = 1 ;  $ ~~~~~break ;  $ ~~~~}  $ ~~~} else {  $ ~~~~if ( a [ i ] [ j ] != o ) {  $ ~~~~~flag = 1 ;  $ ~~~~~break ;  $ ~~~~}  $ ~~~}  $ ~~}  $ ~~if ( flag == 1 ) break ;  $ ~}  $ ~if ( flag == 0 )  $ ~~cout << "YES"  $ ~~~<< "\n" ;  $ ~else  $ ~~cout << "NO"  $ ~~~<< "\n" ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~int n ;  $ ~int k ;  $ ~cin >> n >> k ;  $ ~int lasttime ;  $ ~lasttime = 240 - k ;  $ ~int ans = 1 ;  $ ~while ( lasttime >= 0 && ans <= n + 1 ) {  $ ~~lasttime -= ans * 5 ;  $ ~~++ ans ;  $ ~}  $ ~cout << ans - 2 << endl ;  $ }
const int N = 1e5 + 7 ;  $ long long a [ N ] , dp [ N ] ;  $ set < long long > x , y ;  $ int main ( ) {  $ ~int aux ;  $ ~cin >> aux ;  $ ~for ( int i = 1 ; i <= aux ; i ++ ) { cin >> a [ i ] ; }  $ ~if ( aux == 2 ) {  $ ~~cout << abs ( a [ 1 ] - a [ 2 ] ) << endl ;  $ ~~return 0 ;  $ ~}  $ ~for ( int i = 1 ; i < aux ; i ++ ) {  $ ~~long long x = abs ( a [ i ] - a [ i + 1 ] ) ;  $ ~~if ( i & 1 )  $ ~~~dp [ i ] = dp [ i - 1 ] + x ;  $ ~~else  $ ~~~dp [ i ] = dp [ i - 1 ] - x ;  $ ~}  $ ~x . insert ( dp [ 1 ] ) ;  $ ~y . insert ( dp [ 2 ] ) ;  $ ~long long result = max ( dp [ 1 ] , dp [ 2 ] ) ;  $ ~result = max ( result , abs ( a [ 2 ] - a [ 3 ] ) ) ;  $ ~for ( int i = 3 ; i < aux ; i ++ ) {  $ ~~result = max ( result , dp [ i ] ) ;  $ ~~result = max ( result , dp [ i ] - * y . begin ( ) ) ;  $ ~~result = max ( result , - ( dp [ i ] - * -- x . end ( ) ) ) ;  $ ~~if ( i & 1 ) {  $ ~~~x . insert ( dp [ i ] ) ;  $ ~~} else {  $ ~~~y . insert ( dp [ i ] ) ;  $ ~~}  $ ~}  $ ~cout << result << endl ;  $ }
int n0 , n1 , b0 , b1 ;  $ int a [ 100010 ] , b [ 100010 ] ;  $ int main ( ) {  $ ~cin >> n0 >> n1 >> b0 >> b1 ;  $ ~for ( int i = 0 ; i < n0 ; i ++ ) cin >> a [ i ] ;  $ ~for ( int i = 0 ; i < n1 ; i ++ ) cin >> b [ i ] ;  $ ~cout << ( a [ b0 - 1 ] < b [ n1 - b1 ] ? "YES" : "NO" ) << endl ;  $ }
int n , p [ 100 ] , ans , ans1 , ans2 , now ;  $ int moveb ( ) {  $ ~now = 1 ;  $ ~for ( int i = 1 ; i <= n / 2 ; i ++ ) {  $ ~~ans1 += abs ( p [ i ] - now ) ;  $ ~~now += 2 ;  $ ~}  $ ~return ans1 ;  $ }  $ int movew ( ) {  $ ~now = n ;  $ ~for ( int i = n / 2 ; i >= 1 ; i -- ) {  $ ~~ans2 += abs ( p [ i ] - now ) ;  $ ~~now -= 2 ;  $ ~}  $ ~return ans2 ;  $ }  $ int main ( ) {  $ ~cin >> n ;  $ ~for ( int i = 1 ; i <= n / 2 ; i ++ ) cin >> p [ i ] ;  $ ~sort ( p + 1 , p + ( n / 2 ) + 1 ) ;  $ ~ans = min ( moveb ( ) , movew ( ) ) ;  $ ~cout << ans << endl ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~long long int n , i , j , k , a , b , c , s , t , x , y , z ;  $ ~char p , q ;  $ ~cin >> p >> q >> n ;  $ ~if ( n % 2 == 0 )  $ ~~cout << "undefined" << endl ;  $ ~else {  $ ~~if ( p == '^' && q == '>' ) {  $ ~~~if ( n % 4 == 1 )  $ ~~~~cout << "cw" << endl ;  $ ~~~else  $ ~~~~cout << "ccw" << endl ;  $ ~~} else if ( p == '>' && q == '^' ) {  $ ~~~if ( n % 4 == 3 )  $ ~~~~cout << "cw" << endl ;  $ ~~~else  $ ~~~~cout << "ccw" << endl ;  $ ~~} else if ( p == '^' && q == '<' ) {  $ ~~~if ( n % 4 == 3 )  $ ~~~~cout << "cw" << endl ;  $ ~~~else  $ ~~~~cout << "ccw" << endl ;  $ ~~} else if ( p == '<' && q == '^' ) {  $ ~~~if ( n % 4 == 1 )  $ ~~~~cout << "cw" << endl ;  $ ~~~else  $ ~~~~cout << "ccw" << endl ;  $ ~~} else if ( p == '>' && q == 'v' ) {  $ ~~~if ( n % 4 == 1 )  $ ~~~~cout << "cw" << endl ;  $ ~~~else  $ ~~~~cout << "ccw" << endl ;  $ ~~} else if ( p == 'v' && q == '>' ) {  $ ~~~if ( n % 4 == 3 )  $ ~~~~cout << "cw" << endl ;  $ ~~~else  $ ~~~~cout << "ccw" << endl ;  $ ~~} else if ( p == 'v' && q == '<' ) {  $ ~~~if ( n % 4 == 1 )  $ ~~~~cout << "cw" << endl ;  $ ~~~else  $ ~~~~cout << "ccw" << endl ;  $ ~~} else if ( p == '<' && q == 'v' ) {  $ ~~~if ( n % 4 == 3 )  $ ~~~~cout << "cw" << endl ;  $ ~~~else  $ ~~~~cout << "ccw" << endl ;  $ ~~}  $ ~}  $ }
int check ( long long n ) {  $ ~int count = 0 ;  $ ~if ( n < 0 ) n = - n ;  $ ~while ( n ) {  $ ~~if ( n % 10 == 8 ) count ++ ;  $ ~~n = n / 10 ;  $ ~}  $ ~return count ;  $ }  $ int main ( ) {  $ ~long long a ;  $ ~int count , f = 0 ;  $ ~cin >> a ;  $ ~f = 0 ;  $ ~while ( true ) {  $ ~~a ++ ;  $ ~~f ++ ;  $ ~~count = check ( a ) ;  $ ~~if ( count >= 1 ) { break ; }  $ ~}  $ ~cout << f << endl ;  $ }
int main ( ) {  $ ~char s [ 100 ] ;  $ ~int k , i = 0 , cnt = 0 ;  $ ~cin >> s >> k ;  $ ~while ( s [ i ] != '\0' ) i ++ ;  $ ~for ( i = i - 1 ; i >= 0 ; i -- ) {  $ ~~while ( s [ i ] > 48 ) {  $ ~~~s [ i ] -- ;  $ ~~~cnt ++ ;  $ ~~~if ( cnt == k ) goto L ;  $ ~~}  $ ~~if ( s [ i ] == 48 ) {  $ ~~~s [ i ] = '\0' ;  $ ~~~cnt ++ ;  $ ~~}  $ ~~if ( cnt == k ) goto L ;  $ ~}  $ L :  $ ~puts ( s ) ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~int n ;  $ ~cin >> n ;  $ ~int ara [ n + 1 ] , i ;  $ ~for ( i = 0 ; i < n ; i ++ ) cin >> ara [ i ] ;  $ ~int a = 1 , b = 2 ;  $ ~bool c = false ;  $ ~for ( i = 0 ; i < n ; i ++ ) {  $ ~~if ( ara [ i ] == a || ara [ i ] == b ) {  $ ~~~b = 6 - a - b ;  $ ~~~a = ara [ i ] ;  $ ~~} else {  $ ~~~c = true ;  $ ~~~break ;  $ ~~}  $ ~}  $ ~if ( c )  $ ~~cout << "NO" << endl ;  $ ~else  $ ~~cout << "YES" << endl ;  $ }
int main ( ) {  $ ~char c ;  $ ~int n = 0 , i = 0 , t = 0 , e = 0 ;  $ ~while ( cin >> c ) {  $ ~~if ( c == 'n' ) {  $ ~~~n ++ ;  $ ~~} else if ( c == 'i' ) {  $ ~~~i ++ ;  $ ~~} else if ( c == 't' ) {  $ ~~~t ++ ;  $ ~~} else if ( c == 'e' ) {  $ ~~~e ++ ;  $ ~~}  $ ~}  $ ~int cont = 0 ;  $ ~for ( int k = i ; k > 0 ; k -- ) {  $ ~~if ( n >= 2 * k + 1 && t >= k && e >= 3 * k ) { cont ++ ; }  $ ~}  $ ~cout << cont << endl ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~int n , m ;  $ ~cin >> n >> m ;  $ ~for ( int i = 0 ; i < n ; ++ i ) {  $ ~~cout << ( ( ( i & 3 ) == 1 ) ? '.' : '#' ) ;  $ ~~for ( int j = 0 ; j < m - 2 ; ++ j ) { cout << ( ( ( i & 1 ) == 1 ) ? '.' : '#' ) ; }  $ ~~cout << ( ( ( i & 3 ) == 3 ) ? '.' : '#' ) << endl ;  $ ~}  $ ~return 0 ;  $ }
int main ( ) {  $ ~int n , k ;  $ ~cin >> n >> k ;  $ ~int a1 , a2 , a3 ;  $ ~if ( ( 8 * n ) % k == 0 )  $ ~~a1 = ( 8 * n ) / k ;  $ ~else  $ ~~a1 = ( 8 * n ) / k + 1 ;  $ ~if ( ( 5 * n ) % k == 0 )  $ ~~a2 = ( 5 * n ) / k ;  $ ~else  $ ~~a2 = ( 5 * n ) / k + 1 ;  $ ~if ( ( 2 * n ) % k == 0 )  $ ~~a3 = ( 2 * n ) / k ;  $ ~else  $ ~~a3 = ( 2 * n ) / k + 1 ;  $ ~int sum ;  $ ~sum = a1 + a2 + a3 ;  $ ~cout << sum << endl ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~int n , m ;  $ ~cin >> n >> m ;  $ ~if ( n == 2 ) {  $ ~~if ( m == 1 )  $ ~~~cout << 4 << endl ;  $ ~~else  $ ~~~cout << 5 << endl ;  $ ~} else if ( n == 4 || n == 6 || n == 9 || n == 11 ) {  $ ~~if ( m >= 1 && m <= 6 )  $ ~~~cout << 5 << endl ;  $ ~~else  $ ~~~cout << 6 << endl ;  $ ~} else {  $ ~~if ( m >= 1 && m <= 5 )  $ ~~~cout << 5 << endl ;  $ ~~else  $ ~~~cout << 6 << endl ;  $ ~}  $ ~return 0 ;  $ }
int main ( ) {  $ ~string x = "hello" ;  $ ~int now = 0 ;  $ ~string s ;  $ ~bool ok = false ;  $ ~cin >> s ;  $ ~for ( int i = 0 ; i < s . length ( ) ; i ++ ) {  $ ~~if ( s [ i ] == x [ now ] ) {  $ ~~~now ++ ;  $ ~~~if ( now == 5 ) ok = true ;  $ ~~}  $ ~}  $ ~if ( ok )  $ ~~cout << "YES" << endl ;  $ ~else  $ ~~cout << "NO" << endl ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~int n ;  $ ~long long a [ 100001 ] ;  $ ~cin >> n ;  $ ~int ans = INT_MAX ;  $ ~cin >> a [ 0 ] ;  $ ~long long m = a [ 0 ] ;  $ ~for ( int i = 1 ; i < n ; i ++ ) {  $ ~~cin >> a [ i ] ;  $ ~~m = min ( m , a [ i ] ) ;  $ ~}  $ ~int ind ;  $ ~for ( int i = 0 ; i < n ; i ++ ) {  $ ~~if ( m == a [ i ] ) {  $ ~~~ind = i ;  $ ~~~break ;  $ ~~}  $ ~}  $ ~for ( int i = ind + 1 ; i < n ; i ++ ) {  $ ~~if ( a [ ind ] == a [ i ] ) {  $ ~~~ans = min ( i - ind , ans ) ;  $ ~~~ind = i ;  $ ~~}  $ ~}  $ ~cout << ans << endl ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~int n , size ;  $ ~bool result , pResult ;  $ ~int values [ ] = { - 1 , 1 } ;  $ ~string b ;  $ ~cin >> n ;  $ ~for ( int i = 0 ; i < n ; i ++ ) {  $ ~~result = true ;  $ ~~cin >> size ;  $ ~~cin >> b ;  $ ~~for ( int j = 0 ; j < size / 2 && result ; j ++ ) {  $ ~~~pResult = false ;  $ ~~~for ( int k = 0 ; k < 2 && ! pResult ; k ++ ) {  $ ~~~~for ( int u = 0 ; u < 2 && ! pResult ; u ++ ) {  $ ~~~~~if ( b [ j ] + values [ k ] == b [ size - j - 1 ] + values [ u ] ) { pResult = true ; }  $ ~~~~}  $ ~~~}  $ ~~~result = pResult ;  $ ~~}  $ ~~if ( result ) {  $ ~~~cout << "YES" << endl ;  $ ~~} else {  $ ~~~cout << "NO" << endl ;  $ ~~}  $ ~}  $ ~return 0 ;  $ }
int main ( ) {  $ ~int n ;  $ ~string s ;  $ ~cin >> n >> s ;  $ ~vector < int > a ;  $ ~int x ;  $ ~int m = 1 << 30 ;  $ ~bool f = false ;  $ ~while ( n -- ) {  $ ~~cin >> x ;  $ ~~a . push_back ( x ) ;  $ ~}  $ ~for ( int i = 0 ; i < a . size ( ) ; i ++ ) {  $ ~~if ( s [ i ] == 'R' && s [ i + 1 ] == 'L' ) {  $ ~~~m = min ( a [ i + 1 ] - a [ i ] , m ) ;  $ ~~~f = true ;  $ ~~}  $ ~}  $ ~if ( ! f ) {  $ ~~cout << - 1 << endl ;  $ ~} else {  $ ~~cout << ( m / 2 ) << endl ;  $ ~}  $ ~return 0 ;  $ }
int main ( ) {  $ ~long long n , m , s ;  $ ~cin >> n >> m ;  $ ~s = n + ( n - 1 ) / ( m - 1 ) ;  $ ~cout << s << endl ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~int z ;  $ ~int x ;  $ ~cin >> z >> x ;  $ ~int y = 0 ;  $ ~while ( x != 0 ) {  $ ~~y = y * 10 ;  $ ~~y += x % 10 ;  $ ~~x = x / 10 ;  $ ~}  $ ~cout << z + y << endl ;  $ ~return 0 ;  $ }
string s ;  $ int main ( ) {  $ ~cin >> s ;  $ ~for ( int i = 0 ; i < s . size ( ) ; i ++ ) {  $ ~~if ( i != 0 ) {  $ ~~~if ( s [ i ] >= '5' )  $ ~~~~cout << '9' - s [ i ] ;  $ ~~~else  $ ~~~~cout << s [ i ] ;  $ ~~} else if ( s [ i ] >= '5' && s [ i ] != '9' )  $ ~~~cout << '9' - s [ i ] ;  $ ~~else  $ ~~~cout << s [ i ] ;  $ ~}  $ ~cout << endl ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~int x , t , a , b , da , db ;  $ ~cin >> x >> t >> a >> b >> da >> db ;  $ ~for ( int i = 0 ; i < t ; i ++ ) {  $ ~~for ( int j = 0 ; j < t ; j ++ ) {  $ ~~~int p , q ;  $ ~~~p = a - i * da ;  $ ~~~q = b - j * db ;  $ ~~~if ( ( p > - 1 && q > - 1 ) && ( p + q == x || p == x || q == x || x == 0 ) ) {  $ ~~~~cout << "YES" << endl ;  $ ~~~~return 0 ;  $ ~~~}  $ ~~}  $ ~}  $ ~cout << "NO" << endl ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~long long n , d , s ;  $ ~cin >> n ;  $ ~long long a [ n ] [ 4 ] ;  $ ~for ( int i = 0 ; i < n ; i ++ ) {  $ ~~for ( int j = 0 ; j < 4 ; j ++ ) { cin >> a [ i ] [ j ] ; }  $ ~}  $ ~for ( int i = 0 ; i < n ; i ++ ) {  $ ~~d = a [ i ] [ 0 ] / a [ i ] [ 3 ] ;  $ ~~s = d / a [ i ] [ 1 ] * a [ i ] [ 2 ] ;  $ ~~cout << s + d << "\n" ;  $ ~}  $ ~return 0 ;  $ }
int main ( ) {  $ ~int a , b ;  $ ~cin >> a >> b ;  $ ~if ( abs ( a - b ) <= 1 && ( a != 0 || b != 0 ) )  $ ~~cout << "YES\n" ;  $ ~else  $ ~~cout << "NO\n" ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~unsigned long n , k ;  $ ~cin >> n >> k ;  $ ~while ( k -- ) {  $ ~~if ( n % 10 == 0 ) {  $ ~~~n /= 10 ;  $ ~~} else  $ ~~~n -- ;  $ ~}  $ ~cout << n << endl ;  $ ~return 0 ;  $ }
int a [ 105 ] , x [ 105 ] , y [ 105 ] ;  $ int main ( ) {  $ ~int n , m , l = 0 , r ;  $ ~cin >> n >> m ;  $ ~for ( int i = 1 ; i <= n ; i ++ ) {  $ ~~cin >> x [ i ] >> y [ i ] ;  $ ~~if ( i == 1 && x [ i ] != 0 ) {  $ ~~~cout << "NO" << endl ;  $ ~~~return 0 ;  $ ~~}  $ ~~if ( i == 1 )  $ ~~~r = y [ i ] ;  $ ~~else if ( x [ i ] <= r )  $ ~~~r = max ( r , y [ i ] ) ;  $ ~}  $ ~if ( r >= m )  $ ~~cout << "YES" << endl ;  $ ~else  $ ~~cout << "NO" << endl ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~long long n ;  $ ~cin >> n ;  $ ~if ( n % 2 == 0 )  $ ~~cout << n / 2 << endl ;  $ ~else  $ ~~cout << - ( n + 1 ) / 2 << endl ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~int t , s , q , ans = 0 ;  $ ~cin >> t >> s >> q ;  $ ~while ( s < t ) {  $ ~~s *= q ;  $ ~~ans ++ ;  $ ~}  $ ~cout << ans << endl ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~int N , K ;  $ ~cin >> N >> K ;  $ ~int C ;  $ ~cin >> C ;  $ ~int hld [ 368 ] ;  $ ~hld [ 0 ] = 0 ;  $ ~int num = 0 ;  $ ~for ( int i = 1 ; i <= C ; i ++ ) {  $ ~~cin >> hld [ i ] ;  $ ~~int j = 1 ;  $ ~~while ( hld [ i ] - j * K > hld [ i - 1 ] ) {  $ ~~~num ++ ;  $ ~~~j ++ ;  $ ~~}  $ ~}  $ ~int x = 1 ;  $ ~while ( hld [ C ] + x * K <= N ) {  $ ~~num ++ ;  $ ~~x ++ ;  $ ~}  $ ~cout << num + C << endl ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~int n , ans , f = 0 , ans2 = INT_MAX ;  $ ~cin >> n ;  $ ~int arr [ n + 2 ] ;  $ ~string s ;  $ ~cin >> s ;  $ ~for ( int i = 0 ; i < n ; i ++ ) cin >> arr [ i ] ;  $ ~for ( int i = 0 ; i < s . size ( ) - 1 ; i ++ ) {  $ ~~if ( s [ i ] == 'R' && s [ i + 1 ] == 'L' ) {  $ ~~~ans = ( arr [ i ] + arr [ i + 1 ] ) / 2 - arr [ i ] ;  $ ~~~if ( ans < ans2 ) ans2 = ans ;  $ ~~~f = 1 ;  $ ~~}  $ ~}  $ ~if ( f == 0 ) ans2 = - 1 ;  $ ~cout << ans2 << endl ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~int a , z ;  $ ~int b [ 4 ] ;  $ ~cin >> a ;  $ ~int c = 0 ;  $ ~int d = 0 ;  $ ~while ( d != 6 ) {  $ ~~a ++ ;  $ ~~d = a ;  $ ~~for ( int i = 0 ; i < 4 ; i ++ ) {  $ ~~~b [ i ] = d % 10 ;  $ ~~~d = d / 10 ;  $ ~~}  $ ~~for ( int i = 0 ; i < 3 ; i ++ ) {  $ ~~~for ( int j = i + 1 ; j < 4 ; j ++ ) {  $ ~~~~if ( b [ i ] != b [ j ] ) d ++ ;  $ ~~~}  $ ~~}  $ ~~if ( d == 6 )  $ ~~~break ;  $ ~~else  $ ~~~continue ;  $ ~}  $ ~cout << a << endl ;  $ }
const int maxn = 1100 ;  $ int a [ maxn ] [ maxn ] , b [ maxn ] ;  $ string s [ 110 ] ;  $ int main ( ) {  $ ~int n ;  $ ~while ( cin >> n ) {  $ ~~for ( int i = 0 ; i < n ; i ++ ) cin >> s [ i ] ;  $ ~~int top = 0 , flag = 0 ;  $ ~~for ( int i = 0 ; i < n ; i ++ )  $ ~~~for ( int j = 0 ; j < n ; j ++ )  $ ~~~~if ( s [ i ] [ j ] == '.' ) {  $ ~~~~~top ++ ;  $ ~~~~~break ;  $ ~~~~}  $ ~~if ( top == n ) {  $ ~~~flag = 1 ;  $ ~~~for ( int i = 0 ; i < n ; i ++ )  $ ~~~~for ( int j = 0 ; j < n ; j ++ )  $ ~~~~~if ( s [ i ] [ j ] == '.' ) {  $ ~~~~~~cout << i + 1 << " " << j + 1 << endl ;  $ ~~~~~~break ;  $ ~~~~~}  $ ~~}  $ ~~top = 0 ;  $ ~~for ( int j = 0 ; j < n ; j ++ )  $ ~~~for ( int i = 0 ; i < n ; i ++ )  $ ~~~~if ( s [ i ] [ j ] == '.' ) {  $ ~~~~~top ++ ;  $ ~~~~~break ;  $ ~~~~}  $ ~~if ( top == n && ! flag ) {  $ ~~~flag = 1 ;  $ ~~~for ( int j = 0 ; j < n ; j ++ )  $ ~~~~for ( int i = 0 ; i < n ; i ++ )  $ ~~~~~if ( s [ i ] [ j ] == '.' ) {  $ ~~~~~~cout << i + 1 << " " << j + 1 << endl ;  $ ~~~~~~break ;  $ ~~~~~}  $ ~~}  $ ~~if ( ! flag ) puts ( "-1" ) ;  $ ~}  $ ~return 0 ;  $ }
int main ( ) {  $ ~int n , k , l , c , d , p , nl , np , x = 0 , y = 0 , z = 0 , res = 0 ;  $ ~cin >> n >> k >> l >> c >> d >> p >> nl >> np ;  $ ~x = ( k * l ) / nl ;  $ ~y = ( c * d ) ;  $ ~z = p / np ;  $ ~res = min ( x , y ) ;  $ ~res = min ( res , z ) ;  $ ~res /= n ;  $ ~cout << res << endl ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~int a , first = 0 , ok = 990999 , on = - 99999 , last ;  $ ~cin >> a ;  $ ~int arr [ a + 1 ] ;  $ ~for ( int i = 0 ; i < a ; i ++ ) {  $ ~~cin >> arr [ i ] ;  $ ~~if ( i >= 1 ) on = max ( on , arr [ i ] - arr [ i - 1 ] ) ;  $ ~}  $ ~for ( int i = 0 ; i < a - 2 ; i ++ ) {  $ ~~if ( a == 3 )  $ ~~~first = arr [ i + 2 ] - arr [ 0 ] ;  $ ~~else if ( i == a - 3 )  $ ~~~first = arr [ i + 1 ] - arr [ i - 1 ] ;  $ ~~else  $ ~~~first = max ( ( arr [ i + 2 ] - arr [ i ] ) , ( arr [ i + 3 ] - arr [ i + 2 ] ) ) ;  $ ~~ok = max ( first , on ) ;  $ ~~if ( i == 0 )  $ ~~~last = ok ;  $ ~~else  $ ~~~last = min ( last , ok ) ;  $ ~}  $ ~cout << last << endl ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~int n ;  $ ~cin >> n ;  $ ~string a ;  $ ~cin >> a ;  $ ~int p [ n ] ;  $ ~int r = - 1 ;  $ ~for ( int i = 0 ; i < n ; i ++ ) { cin >> p [ i ] ; }  $ ~int ans = pow ( 10 , 9 ) + 1 ;  $ ~for ( int i = 0 ; i < n ; i ++ ) {  $ ~~if ( a [ i ] == 'R' ) { r = i ; }  $ ~~if ( a [ i ] == 'L' && r >= 0 ) {  $ ~~~if ( p [ i ] - p [ r ] < ans ) ans = p [ i ] - p [ r ] ;  $ ~~~r = - 1 ;  $ ~~}  $ ~}  $ ~if ( ans != pow ( 10 , 9 ) + 1 )  $ ~~cout << ans / 2 << endl ;  $ ~else  $ ~~cout << - 1 << endl ;  $ ~return 0 ;  $ }
int a [ 1008 ] , b [ 1008 ] ;  $ int main ( ) {  $ ~int n , m , ans = 0 ;  $ ~cin >> n >> m ;  $ ~for ( int i = 1 ; i <= n ; i ++ ) { cin >> a [ i ] ; }  $ ~for ( int j = 1 ; j <= m ; j ++ ) { cin >> b [ j ] ; }  $ ~for ( int i = 1 ; i <= n ; i ++ ) {  $ ~~for ( int j = 1 ; j <= m ; j ++ ) {  $ ~~~if ( b [ j ] < a [ i ] && b [ j ] != 0 )  $ ~~~~break ;  $ ~~~else if ( a [ i ] <= b [ j ] && b [ j ] != 0 ) {  $ ~~~~b [ j ] = 0 ;  $ ~~~~ans ++ ;  $ ~~~~break ;  $ ~~~}  $ ~~}  $ ~}  $ ~cout << ans << endl ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~char x ;  $ ~string s , s1 ;  $ ~cin >> x ;  $ ~cin >> s ;  $ ~s1 = "qwertyuiopasdfghjkl;zxcvbnm,./" ;  $ ~for ( int i = 0 ; i < s . size ( ) ; i ++ ) {  $ ~~if ( x == 'R' || x == 'r' ) {  $ ~~~if ( s [ i ] == 'q' )  $ ~~~~s [ i ] = '/' ;  $ ~~~else {  $ ~~~~for ( int j = 0 ; j < s1 . size ( ) ; j ++ )  $ ~~~~~if ( s [ i ] == s1 [ j ] ) {  $ ~~~~~~s [ i ] = s1 [ j - 1 ] ;  $ ~~~~~~break ;  $ ~~~~~}  $ ~~~}  $ ~~} else {  $ ~~~if ( s [ i ] == '/' )  $ ~~~~s [ i ] = 'q' ;  $ ~~~else {  $ ~~~~for ( int j = 0 ; j < s1 . size ( ) ; j ++ )  $ ~~~~~if ( s [ i ] == s1 [ j ] ) {  $ ~~~~~~s [ i ] = s1 [ j + 1 ] ;  $ ~~~~~~break ;  $ ~~~~~}  $ ~~~}  $ ~~}  $ ~}  $ ~cout << s << endl ;  $ ~return 0 ;  $ }
string s ;  $ int main ( ) {  $ ~int k ;  $ ~cin >> s >> k ;  $ ~int cnt = 0 , ans = 0 ;  $ ~sort ( s . begin ( ) , s . end ( ) ) ;  $ ~for ( int i = 0 ; i != s . size ( ) ; i ++ ) {  $ ~~if ( s [ i ] != s [ i + 1 ] ) cnt ++ ;  $ ~~ans ++ ;  $ ~}  $ ~if ( ans < k )  $ ~~cout << "impossible" << endl ;  $ ~else {  $ ~~if ( cnt >= k )  $ ~~~cout << 0 << endl ;  $ ~~else  $ ~~~cout << k - cnt << endl ;  $ ~}  $ ~return 0 ;  $ }
int main ( ) {  $ ~int l , r , a ;  $ ~cin >> l >> r >> a ;  $ ~int val = 0 , rem ;  $ ~if ( a == 0 ) { }  $ ~int addl = 0 , addr = 0 ;  $ ~if ( l <= r ) {  $ ~~l = l + a ;  $ ~~addl = 1 ;  $ ~} else {  $ ~~r = r + a ;  $ ~~addr = 1 ;  $ ~}  $ ~int greater = 0 , lesser = 0 ;  $ ~if ( l < r ) {  $ ~~if ( addr == 1 ) {  $ ~~~val = 2 * l ;  $ ~~~rem = r - l ;  $ ~~~if ( rem % 2 == 1 )  $ ~~~~val = val + rem - 1 ;  $ ~~~else  $ ~~~~val = val + rem ;  $ ~~} else {  $ ~~~val = 2 * l ;  $ ~~}  $ ~} else {  $ ~~if ( addl == 1 ) {  $ ~~~val = 2 * r ;  $ ~~~rem = l - r ;  $ ~~~if ( rem % 2 == 1 )  $ ~~~~val = val + rem - 1 ;  $ ~~~else  $ ~~~~val = val + rem ;  $ ~~} else {  $ ~~~val = 2 * r ;  $ ~~}  $ ~}  $ ~cout << val ;  $ ~putchar ( '\n' ) ;  $ ~return 0 ;  $ }
long long int maxSubArraySum ( long long int a [ ] , long long int size ) {  $ ~long long int max_so_far = INT_MIN , max_ending_here = 0 ;  $ ~for ( long long int i = 0 ; i < size ; i ++ ) {  $ ~~max_ending_here = max_ending_here + a [ i ] ;  $ ~~if ( max_so_far < max_ending_here ) max_so_far = max_ending_here ;  $ ~~if ( max_ending_here < 0 ) max_ending_here = 0 ;  $ ~}  $ ~return max_so_far ;  $ }  $ int main ( ) {  $ ~long long int n ;  $ ~cin >> n ;  $ ~long long int ar [ n ] , f [ n - 1 ] , s [ n - 1 ] ;  $ ~for ( long long int i = 0 ; i < n ; ++ i ) cin >> ar [ i ] ;  $ ~for ( long long int i = 0 ; i < n - 1 ; ++ i ) {  $ ~~long long int x = abs ( ar [ i ] - ar [ i + 1 ] ) ;  $ ~~f [ i ] = x ;  $ ~~long long int on = pow ( - 1 , i ) ;  $ ~~f [ i ] *= on ;  $ ~}  $ ~for ( long long int i = 0 ; i < n - 1 ; ++ i ) {  $ ~~long long int x = abs ( ar [ i ] - ar [ i + 1 ] ) ;  $ ~~s [ i ] = x ;  $ ~~long long int on = pow ( - 1 , ( i + 1 ) ) ;  $ ~~s [ i ] *= on ;  $ ~}  $ ~long long int m1 = maxSubArraySum ( f , n - 1 ) ;  $ ~long long int m2 = maxSubArraySum ( s , n - 1 ) ;  $ ~cout << max ( m1 , m2 ) << "\n" ;  $ ~return 0 ;  $ }
inline int read ( ) {  $ ~int x = 0 , ff = 1 ;  $ ~char c = getchar ( ) ;  $ ~while ( c < '0' || c > '9' ) {  $ ~~if ( c == '-' ) ff = - 1 ;  $ ~~c = getchar ( ) ;  $ ~}  $ ~while ( c >= '0' && c <= '9' ) {  $ ~~x = ( x << 1 ) + ( x << 3 ) + ( c ^ 48 ) ;  $ ~~c = getchar ( ) ;  $ ~}  $ ~return x * ff ;  $ }  $ inline int in ( ) {  $ ~int ff ;  $ ~cin >> ff ;  $ ~return ff ;  $ }  $ int main ( ) {  $ ~int b [ 102 ] ;  $ ~memset ( b , 0 , sizeof ( b ) ) ;  $ ~int n , x , k = 0 ;  $ ~n = in ( ) ;  $ ~while ( n -- ) {  $ ~~x = in ( ) ;  $ ~~;  $ ~~k = max ( k , ++ b [ x ] ) ;  $ ~}  $ ~cout << k << endl ;  $ ~return 0 ;  $ }
char str [ 1010 ] ;  $ int main ( ) {  $ ~int k , i , j ;  $ ~int flag ;  $ ~cin >> str >> k ;  $ ~flag = 0 ;  $ ~int len = strlen ( str ) ;  $ ~if ( len % k )  $ ~~cout << "NO" << endl ;  $ ~else {  $ ~~int cnt = len / k ;  $ ~~for ( i = 0 ; i < len ; i += cnt ) {  $ ~~~for ( j = 0 ; j < cnt / 2 ; j ++ ) {  $ ~~~~if ( str [ i + j ] != str [ cnt + i - j - 1 ] ) {  $ ~~~~~flag = 1 ;  $ ~~~~~break ;  $ ~~~~}  $ ~~~}  $ ~~~if ( flag ) break ;  $ ~~}  $ ~~if ( flag )  $ ~~~cout << "NO" << endl ;  $ ~~else  $ ~~~cout << "YES" << endl ;  $ ~}  $ ~return 0 ;  $ }
int main ( ) {  $ ~string str ;  $ ~cin >> str ;  $ ~int len = str . length ( ) ;  $ ~if ( len < 7 )  $ ~~cout << "no\n" ;  $ ~else {  $ ~~int c = 0 , flag = 0 ;  $ ~~for ( int i = len - 1 ; i >= 0 ; i -- ) {  $ ~~~if ( c == 6 ) {  $ ~~~~if ( str . at ( i ) == '1' ) {  $ ~~~~~flag = 1 ;  $ ~~~~~break ;  $ ~~~~} else  $ ~~~~~continue ;  $ ~~~}  $ ~~~if ( str . at ( i ) == '0' && i != 0 && c < 6 ) c ++ ;  $ ~~}  $ ~~if ( flag == 1 )  $ ~~~cout << "yes\n" ;  $ ~~else  $ ~~~cout << "no\n" ;  $ ~}  $ }
int main ( ) {  $ ~int a , b , c , i , j ;  $ ~double x , y ;  $ ~cin >> a >> b >> c ;  $ ~i = a * c ;  $ ~j = b * c ;  $ ~x = i - j ;  $ ~y = ceil ( x / b * 1.00 ) ;  $ ~cout << y << endl ;  $ }
int main ( ) {  $ ~int n ;  $ ~cin >> n ;  $ ~string arr [ n + 1 ] ;  $ ~for ( int i = 0 ; i <= n ; i ++ ) { getline ( cin , arr [ i ] ) ; }  $ ~for ( int i = 1 ; i <= n ; i ++ ) {  $ ~~int l = arr [ i ] . length ( ) ;  $ ~~if ( l > 10 ) {  $ ~~~cout << arr [ i ] . at ( 0 ) << ( l - 2 ) << arr [ i ] . at ( l - 1 ) << endl ;  $ ~~} else  $ ~~~cout << arr [ i ] << endl ;  $ ~}  $ ~return 0 ;  $ }
int main ( ) {  $ ~int c , sum = 0 , i ;  $ ~for ( i = 0 ; i < 5 ; i ++ ) {  $ ~~cin >> c ;  $ ~~sum = sum + c ;  $ ~}  $ ~if ( sum % 5 == 0 && sum > 0 )  $ ~~cout << sum / 5 << endl ;  $ ~else  $ ~~cout << - 1 << endl ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~long long n = 100000 ;  $ ~long long sum [ n ] = { 0 } ;  $ ~sum [ 1 ] = 1 ;  $ ~for ( long long i = 2 ; i <= n ; i ++ ) { sum [ i ] = sum [ i - 1 ] + i ; }  $ ~long long a , temp ;  $ ~cin >> a ;  $ ~for ( long long i = 1 ; i <= a - 1 ; i ++ ) {  $ ~~cin >> temp ;  $ ~~sum [ a ] -= temp ;  $ ~}  $ ~cout << sum [ a ] << endl ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~short p , i , s = 0 , e ;  $ ~cin >> p ;  $ ~for ( int x = 1 ; x < p ; x ++ ) {  $ ~~e = 1 ;  $ ~~for ( i = 1 ; i <= p - 2 ; i ++ ) {  $ ~~~e = ( e * x ) % p ;  $ ~~~if ( ! ( e - 1 ) ) break ;  $ ~~}  $ ~~if ( i == p - 1 ) {  $ ~~~e = ( e * x ) % p ;  $ ~~~s += ! ( e - 1 ) ;  $ ~~}  $ ~}  $ ~cout << s << endl ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~int n ;  $ ~cin >> n ;  $ ~int arr [ n ] ;  $ ~for ( int i = 0 ; i < n ; i ++ ) { cin >> arr [ i ] ; }  $ ~int cnt = 0 ;  $ ~int val = 0 ;  $ ~int ans = 0 ;  $ ~for ( int i = 0 ; i < n ; i ++ ) {  $ ~~if ( val < arr [ i ] )  $ ~~~cnt ++ ;  $ ~~else  $ ~~~cnt = 1 ;  $ ~~val = arr [ i ] ;  $ ~~ans = max ( ans , cnt ) ;  $ ~}  $ ~cout << ans << endl ;  $ }
int f [ 1005 ] ;  $ int g [ 1005 ] ;  $ int find ( int x ) {  $ ~return f [ x ] == x ? x : f [ x ] = find ( f [ x ] ) ;  $ }  $ void clear ( ) {  $ ~for ( int i = 0 ; i < 1005 ; i ++ ) f [ i ] = i ;  $ }  $ int main ( ) {  $ ~memset ( g , 0 , sizeof ( g ) ) ;  $ ~clear ( ) ;  $ ~int n , m , k ;  $ ~cin >> n >> m >> k ;  $ ~int i , j ;  $ ~for ( i = 0 ; i < k ; i ++ ) {  $ ~~int gov ;  $ ~~cin >> gov ;  $ ~~g [ gov ] = 1 ;  $ ~}  $ ~for ( i = 0 ; i < m ; i ++ ) {  $ ~~int x , y ;  $ ~~cin >> x >> y ;  $ ~~if ( g [ x ] == 1 )  $ ~~~f [ find ( y ) ] = x ;  $ ~~else if ( g [ y ] == 1 )  $ ~~~f [ find ( x ) ] = y ;  $ ~~else {  $ ~~~if ( g [ find ( x ) ] == 1 )  $ ~~~~f [ find ( y ) ] = f [ find ( x ) ] ;  $ ~~~else if ( g [ find ( y ) ] == 1 )  $ ~~~~f [ find ( x ) ] = f [ find ( y ) ] ;  $ ~~~else  $ ~~~~f [ find ( y ) ] = f [ find ( x ) ] ;  $ ~~}  $ ~}  $ ~int ans = 0 ;  $ ~int maxx = 0 ;  $ ~int temp ;  $ ~for ( i = 1 ; i <= n ; i ++ ) {  $ ~~temp = 1 ;  $ ~~if ( g [ i ] ) {  $ ~~~for ( j = 1 ; j <= n ; j ++ ) {  $ ~~~~if ( i != j && ! g [ j ] && f [ find ( j ) ] == i ) { temp ++ ; }  $ ~~~}  $ ~~~ans += temp * ( temp - 1 ) / 2 ;  $ ~~~maxx = max ( maxx , temp ) ;  $ ~~}  $ ~}  $ ~int cnt = 0 ;  $ ~for ( i = 1 ; i <= n ; i ++ ) {  $ ~~if ( ! g [ i ] && ! g [ f [ find ( i ) ] ] ) { cnt ++ ; }  $ ~}  $ ~ans += maxx * cnt ;  $ ~ans += cnt * ( cnt - 1 ) / 2 ;  $ ~ans -= m ;  $ ~cout << ans << endl ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~string ch , c ;  $ ~int n , count = 0 , m = - 1 , i , fin = 1000 ;  $ ~cin >> n ;  $ ~n -- ;  $ ~cin >> ch ;  $ ~while ( n -- ) {  $ ~~cin >> c ;  $ ~~for ( i = 0 ; i < c . size ( ) ; i ++ ) {  $ ~~~if ( c [ i ] == ch [ i ] ) {  $ ~~~~count ++ ;  $ ~~~} else  $ ~~~~break ;  $ ~~}  $ ~~fin = min ( fin , count ) ;  $ ~~count = 0 ;  $ ~~c . erase ( ) ;  $ ~}  $ ~cout << fin << endl ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~int t ;  $ ~cin >> t ;  $ ~while ( t -- ) {  $ ~~long long int a , b , k ;  $ ~~cin >> a >> b >> k ;  $ ~~long long int ans = a - b ;  $ ~~ans = ans * ( k / 2 ) ;  $ ~~if ( k % 2 == 1 ) { ans += a ; }  $ ~~cout << ans << endl ;  $ ~}  $ }
int main ( ) {  $ ~int n , m ;  $ ~int a [ 105 ] ;  $ ~while ( cin >> n >> m ) {  $ ~~for ( int i = 1 ; i <= n ; i ++ ) cin >> a [ i ] ;  $ ~~sort ( a + 1 , a + n + 1 ) ;  $ ~~int cnt1 = 0 ;  $ ~~for ( int i = 1 ; i <= n ; i ++ ) {  $ ~~~for ( int j = i ; j <= n ; j ++ )  $ ~~~~if ( a [ j ] - a [ i ] <= m ) cnt1 = max ( cnt1 , j - i + 1 ) ;  $ ~~}  $ ~~cout << n - cnt1 << endl ;  $ ~}  $ ~return 0 ;  $ }
int main ( ) {  $ ~long long n , k ;  $ ~cin >> n >> k ;  $ ~long long x = ( n / 2 ) / ( 1 + k ) ;  $ ~cout << x << " " << x * k << ' ' << n - ( x ) * ( 1 + k ) << "\n" ;  $ }
int main ( ) {  $ ~int a ;  $ ~cin >> a ;  $ ~int arr [ a ] ;  $ ~for ( int i = 0 ; i < a ; i ++ ) cin >> arr [ i ] ;  $ ~int ans = 0 ;  $ ~for ( int i = 0 ; i < a ; i ++ ) {  $ ~~int sum = 0 ;  $ ~~if ( arr [ i ] == 1 ) sum ++ ;  $ ~~int e = arr [ i ] ;  $ ~~while ( i < a && arr [ i ] == e ) {  $ ~~~i ++ ;  $ ~~~e ++ ;  $ ~~~sum ++ ;  $ ~~}  $ ~~if ( e == 1001 ) sum ++ ;  $ ~~ans = max ( ans , sum - 2 ) ;  $ ~~i -- ;  $ ~}  $ ~cout << ans << endl ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~int n , k ;  $ ~cin >> n >> k ;  $ ~int arya = 0 , bran = 0 ;  $ ~int s = 0 ;  $ ~for ( int i = 0 ; i < n ; ++ i ) {  $ ~~int t ;  $ ~~cin >> t ;  $ ~~if ( t + arya >= 8 ) {  $ ~~~bran += 8 ;  $ ~~~arya += t - 8 ;  $ ~~~++ s ;  $ ~~} else {  $ ~~~bran += t + arya ;  $ ~~~arya = 0 ;  $ ~~~++ s ;  $ ~~}  $ ~~if ( bran >= k ) {  $ ~~~cout << s << "\n" ;  $ ~~~return 0 ;  $ ~~}  $ ~}  $ ~if ( bran < k ) { cout << - 1 << "\n" ; }  $ }
vector < int > v ;  $ int main ( ) {  $ ~string s ;  $ ~cin >> s ;  $ ~for ( int i = 0 ; i < s . length ( ) ; i ++ ) {  $ ~~if ( s [ i ] == 'r' ) {  $ ~~~cout << i + 1 << '\n' ;  $ ~~} else {  $ ~~~v . push_back ( i + 1 ) ;  $ ~~}  $ ~}  $ ~for ( int i = v . size ( ) - 1 ; i >= 0 ; i -- ) { cout << v [ i ] << '\n' ; }  $ ~return 0 ;  $ }
int main ( ) {  $ ~int n , f [ 5001 ] , i , count = 0 ;  $ ~cin >> n ;  $ ~for ( i = 1 ; i <= n ; i ++ ) { cin >> f [ i ] ; }  $ ~for ( i = 1 ; i <= n ; i ++ ) {  $ ~~if ( f [ f [ f [ i ] ] ] == i ) { count ++ ; }  $ ~}  $ ~if ( count > 0 )  $ ~~cout << "YES" << endl ;  $ ~else  $ ~~cout << "NO" << endl ;  $ }
int n , m , k , a [ 550 ] , sum ;  $ bool cmp ( int a1 , int b1 ) {  $ ~return a1 > b1 ;  $ }  $ int main ( ) {  $ ~cin >> n >> m >> k ;  $ ~memset ( a , 0 , sizeof ( a ) ) ;  $ ~for ( int i = 1 ; i < 1 + n ; i ++ ) { cin >> a [ i ] ; }  $ ~sort ( a + 1 , a + 1 + n , cmp ) ;  $ ~if ( m <= k ) {  $ ~~cout << "0" << endl ;  $ ~~return 0 ;  $ ~}  $ ~for ( int i = 1 ; i <= n ; i ++ ) {  $ ~~sum = 0 ;  $ ~~for ( int j = 1 ; j <= i ; j ++ ) {  $ ~~~if ( j <= k ) sum += a [ j ] ;  $ ~~~if ( j > k && a [ j ] != 0 ) sum += ( a [ j ] - 1 ) ;  $ ~~}  $ ~~if ( k - i > 0 ) sum += ( k - i ) ;  $ ~~if ( sum >= m ) {  $ ~~~cout << i << endl ;  $ ~~~return 0 ;  $ ~~}  $ ~}  $ ~cout << "-1" << endl ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~int n , count = 0 ;  $ ~cin >> n ;  $ ~int arr [ n ] ;  $ ~int sum1 = 0 , sum2 = 0 , i = 0 ;  $ ~for ( ; i < n ; i ++ ) {  $ ~~cin >> arr [ i ] ;  $ ~~if ( arr [ i ] >= 0 )  $ ~~~sum1 += arr [ i ] ;  $ ~~else  $ ~~~sum2 += arr [ i ] ;  $ ~}  $ ~if ( sum2 == 0 )  $ ~~cout << sum1 << endl ;  $ ~else {  $ ~~for ( i = sum2 ; i <= sum1 ; i ++ ) { count ++ ; }  $ ~~cout << count - 1 << endl ;  $ ~}  $ ~return 0 ;  $ }
int main ( ) {  $ ~int m , d ;  $ ~cin >> m >> d ;  $ ~if ( m == 1 || m == 3 || m == 5 || m == 7 || m == 8 || m == 10 || m == 12 ) {  $ ~~d = 31 - ( 8 - d ) ;  $ ~~d = d / 7 + ( ( d % 7 ) ? 1 : 0 ) ;  $ ~} else if ( m == 2 ) {  $ ~~d = 28 - ( 8 - d ) ;  $ ~~d = d / 7 + ( ( d % 7 ) ? 1 : 0 ) ;  $ ~} else {  $ ~~d = 30 - ( 8 - d ) ;  $ ~~d = d / 7 + ( ( d % 7 ) ? 1 : 0 ) ;  $ ~}  $ ~cout << ++ d << '\n' ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~int n ;  $ ~cin >> n ;  $ ~string s1 , s2 , captain ;  $ ~vector < string > rat , woman , man ;  $ ~for ( int i = 0 ; i < n ; i ++ ) {  $ ~~cin >> s1 >> s2 ;  $ ~~if ( s2 == "rat" )  $ ~~~rat . push_back ( s1 ) ;  $ ~~else if ( s2 == "woman" || s2 == "child" )  $ ~~~woman . push_back ( s1 ) ;  $ ~~else if ( s2 == "man" )  $ ~~~man . push_back ( s1 ) ;  $ ~~else  $ ~~~captain = s1 ;  $ ~}  $ ~for ( int i = 0 ; i < rat . size ( ) ; i ++ ) cout << rat [ i ] << endl ;  $ ~for ( int i = 0 ; i < woman . size ( ) ; i ++ ) cout << woman [ i ] << endl ;  $ ~for ( int i = 0 ; i < man . size ( ) ; i ++ ) cout << man [ i ] << endl ;  $ ~cout << captain << endl ;  $ ~return 0 ;  $ }
int get ( int x ) {  $ ~int i = 0 ;  $ ~while ( x > 0 ) {  $ ~~x -= 5 ;  $ ~~i ++ ;  $ ~}  $ ~return i ;  $ }  $ int main ( ) {  $ ~int x ;  $ ~cin >> x ;  $ ~cout << get ( x ) << endl ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~int a , b , j ;  $ ~char str [ 101 ] ;  $ ~cin >> a >> b ;  $ ~cin >> str ;  $ ~if ( a / 2 < b )  $ ~~for ( b ; b < a ; b ++ ) { cout << "RIGHT" << endl ; }  $ ~else if ( a != b )  $ ~~for ( b ; b > 1 ; b -- ) { cout << "LEFT" << endl ; }  $ ~else  $ ~~;  $ ~if ( b == 1 ) {  $ ~~for ( j = 0 ; j < a ; ) {  $ ~~~cout << "PRINT " << str [ j ] << endl ;  $ ~~~j ++ ;  $ ~~~if ( j < a ) cout << "RIGHT" << endl ;  $ ~~}  $ ~} else {  $ ~~for ( j = a - 1 ; j >= 0 ; ) {  $ ~~~cout << "PRINT " << str [ j ] << endl ;  $ ~~~j -- ;  $ ~~~if ( j >= 0 ) cout << "LEFT" << endl ;  $ ~~}  $ ~}  $ ~return 0 ;  $ }
int main ( ) {  $ ~int n , a , b , i , c = 0 , j , m , o , p ;  $ ~cin >> n ;  $ ~for ( i = 1 ; i <= n ; i ++ ) {  $ ~~cin >> a >> b ;  $ ~~if ( b - a >= 2 ) { c ++ ; }  $ ~}  $ ~cout << c << endl ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~string s ;  $ ~cin >> s ;  $ ~stack < char > a ;  $ ~for ( int i = 0 ; i < s . size ( ) ; i ++ ) {  $ ~~if ( ! a . empty ( ) && a . top ( ) == s [ i ] )  $ ~~~a . pop ( ) ;  $ ~~else  $ ~~~a . push ( s [ i ] ) ;  $ ~}  $ ~s = "" ;  $ ~while ( ! a . empty ( ) ) {  $ ~~s += a . top ( ) ;  $ ~~a . pop ( ) ;  $ ~}  $ ~for ( int i = s . length ( ) - 1 ; i >= 0 ; i -- ) cout << s [ i ] ;  $ ~cout << endl ;  $ }
int main ( ) {  $ ~int a , b ;  $ ~while ( cin >> a >> b ) {  $ ~~int t ;  $ ~~t = a ;  $ ~~if ( b < a ) { t = b ; }  $ ~~int i ;  $ ~~int k = 1 ;  $ ~~for ( i = 1 ; i <= t ; i ++ ) { k *= i ; }  $ ~~cout << k << endl ;  $ ~}  $ }
int main ( ) {  $ ~int n , d , min = 1000 ;  $ ~int a [ 105 ] ;  $ ~cin >> n >> d ;  $ ~for ( int i = 0 ; i < n ; i ++ ) cin >> a [ i ] ;  $ ~sort ( a , a + n ) ;  $ ~int ans = 1 , max = - 1 ;  $ ~for ( int i = 0 ; i < n ; i ++ ) {  $ ~~for ( int j = i + 1 ; j < n ; j ++ ) {  $ ~~~if ( a [ j ] - a [ i ] <= d )  $ ~~~~ans ++ ;  $ ~~~else {  $ ~~~~break ;  $ ~~~}  $ ~~}  $ ~~if ( max < ans ) max = ans ;  $ ~~ans = 1 ;  $ ~}  $ ~cout << n - max << endl ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~int T ;  $ ~cin >> T ;  $ ~int n ;  $ ~string s ;  $ ~for ( int _ = 0 ; _ < int ( T ) ; _ ++ ) {  $ ~~cin >> n >> s ;  $ ~~bool ok = true ;  $ ~~for ( int i = 0 ; i < int ( n ) ; i ++ ) {  $ ~~~int k = abs ( s [ i ] - s [ n - i - 1 ] ) ;  $ ~~~if ( k > 2 || k % 2 == 1 ) {  $ ~~~~ok = false ;  $ ~~~~break ;  $ ~~~}  $ ~~}  $ ~~cout << ( ok ? "YES" : "NO" ) << endl ;  $ ~}  $ ~return 0 ;  $ }
int main ( ) {  $ ~string a ;  $ ~cin >> a ;  $ ~int p = 0 ;  $ ~for ( int i = 0 ; i < a . size ( ) ; i ++ ) {  $ ~~if ( a [ i ] == '4' || a [ i ] == '7' ) p ++ ;  $ ~}  $ ~if ( p == 4 || p == 7 ) {  $ ~~cout << "YES" << endl ;  $ ~~return 0 ;  $ ~} else {  $ ~~cout << "NO" << endl ;  $ ~~return 0 ;  $ ~}  $ ~return 0 ;  $ }
string keyboard = "qwertyuiopasdfghjkl;zxcvbnm,./" ;  $ string in , out ;  $ char rl ;  $ int main ( ) {  $ ~cin >> rl >> in ;  $ ~int i = 0 ;  $ ~char c = 1 ;  $ ~while ( c != NULL ) {  $ ~~c = in [ i ] ;  $ ~~for ( int j = 0 ; j < 30 ; j ++ ) {  $ ~~~if ( c == keyboard [ j ] ) {  $ ~~~~if ( rl == 'R' ) {  $ ~~~~~out += keyboard [ j - 1 ] ;  $ ~~~~} else if ( rl == 'L' ) {  $ ~~~~~out += keyboard [ j + 1 ] ;  $ ~~~~}  $ ~~~}  $ ~~}  $ ~~i ++ ;  $ ~}  $ ~cout << out << endl ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~long long int a , b , sum = 1 , i ;  $ ~cin >> a >> b ;  $ ~if ( a < b ) {  $ ~~for ( i = 1 ; i <= a ; i ++ ) sum *= i ;  $ ~} else {  $ ~~for ( i = 1 ; i <= b ; i ++ ) sum *= i ;  $ ~}  $ ~cout << sum << endl ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~int L , p , q ;  $ ~cin >> L >> p >> q ;  $ ~float time = ( float ) L / ( p + q ) ;  $ ~cout << p * time << endl ;  $ }
int main ( ) {  $ ~int n , i , j , x ;  $ ~cin >> n ;  $ ~char a [ n ] [ n ] ;  $ ~x = ( n - 1 ) / 2 ;  $ ~for ( i = 0 ; i < n ; i ++ )  $ ~~for ( j = 0 ; j < n ; j ++ )  $ ~~~if ( fabs ( i - x ) + fabs ( j - x ) <= x )  $ ~~~~a [ i ] [ j ] = 'D' ;  $ ~~~else  $ ~~~~a [ i ] [ j ] = '*' ;  $ ~for ( i = 0 ; i < n ; i ++ ) {  $ ~~for ( j = 0 ; j < n ; j ++ ) cout << a [ i ] [ j ] ;  $ ~~cout << endl ;  $ ~}  $ ~return 0 ;  $ }
int main ( ) {  $ ~string x , y ;  $ ~int t , z ;  $ ~cin >> t ;  $ ~while ( t -- ) {  $ ~~cin >> x ;  $ ~~z = x . size ( ) ;  $ ~~( z <= 10 ) ? cout << x << '\n' : cout << x [ 0 ] << z - 2 << x [ z - 1 ] << '\n' ;  $ ~}  $ }
int main ( ) {  $ ~int S , T , Q , ti = 0 ;  $ ~cin >> T >> S >> Q ;  $ ~while ( S < T ) {  $ ~~S *= Q ;  $ ~~ti ++ ;  $ ~}  $ ~cout << ti << endl ;  $ ~return 0 ;  $ }
int ar [ 100005 ] ;  $ int main ( ) {  $ ~long long n ;  $ ~cin >> n ;  $ ~long long ans = 1 ;  $ ~while ( n % 3 == 0 ) { n /= 3 ; }  $ ~ans += n / 3 ll ;  $ ~cout << ans << endl ;  $ }
int search ( int A [ ] , int l , int u , int target ) {  $ ~for ( int i = l ; i < u ; i ++ ) {  $ ~~if ( A [ i ] == target ) return i ;  $ ~}  $ ~return - 1 ;  $ }  $ int main ( ) {  $ ~int n , C ;  $ ~cin >> n >> C ;  $ ~int R [ n ] ;  $ ~for ( int i = 0 ; i < n ; i ++ ) cin >> R [ i ] ;  $ ~int B [ C ] ;  $ ~int curr_size = 0 ;  $ ~int ans = 0 ;  $ ~for ( int i = 0 ; i < n ; i ++ ) {  $ ~~int idx = search ( B , 0 , curr_size , R [ i ] ) ;  $ ~~if ( idx != - 1 ) continue ;  $ ~~ans ++ ;  $ ~~if ( curr_size < C ) {  $ ~~~B [ curr_size ] = R [ i ] ;  $ ~~~curr_size ++ ;  $ ~~} else {  $ ~~~idx = 0 ;  $ ~~~int d = search ( R , i + 1 , n , B [ idx ] ) ;  $ ~~~if ( d != - 1 ) {  $ ~~~~for ( int j = 1 ; j < C ; j ++ ) {  $ ~~~~~int curr_d = search ( R , i + 1 , n , B [ j ] ) ;  $ ~~~~~if ( curr_d == - 1 ) {  $ ~~~~~~d = curr_d ;  $ ~~~~~~idx = j ;  $ ~~~~~~break ;  $ ~~~~~} else {  $ ~~~~~~if ( curr_d > d ) {  $ ~~~~~~~d = curr_d ;  $ ~~~~~~~idx = j ;  $ ~~~~~~}  $ ~~~~~}  $ ~~~~}  $ ~~~}  $ ~~~B [ idx ] = R [ i ] ;  $ ~~}  $ ~}  $ ~cout << ans << endl ;  $ ~return 0 ;  $ }
int64_t solve ( int64_t s , int64_t a , int64_t b , int64_t c ) {  $ ~int64_t k = s / c ;  $ ~return ( a + b ) * ( k / a ) + ( k % a ) ;  $ }  $ int main ( ) {  $ ~int64_t t , s , a , b , c ;  $ ~cin >> t ;  $ ~for ( int64_t i = 0 ; i < t ; i ++ ) {  $ ~~cin >> s >> a >> b >> c ;  $ ~~cout << solve ( s , a , b , c ) << "\n" ;  $ ~}  $ ~return 0 ;  $ }
int main ( ) {  $ ~int n , d , k ;  $ ~cin >> n >> d ;  $ ~int arr [ 101 ] ;  $ ~for ( int i = 1 ; i <= n ; i ++ ) { cin >> arr [ i ] ; }  $ ~sort ( arr + 1 , arr + n + 1 ) ;  $ ~int ans = 0 ;  $ ~for ( int i = 1 ; i <= n ; i ++ ) {  $ ~~for ( int j = i ; j <= n ; j ++ ) {  $ ~~~if ( arr [ j ] - arr [ i ] <= d && j - i + 1 > ans ) { ans = j - i + 1 ; }  $ ~~}  $ ~}  $ ~cout << n - ans << endl ;  $ ~return 0 ;  $ }
int arr1 [ ] = { 118 , 60 , 94 , 62 , 118 , 60 , 94 } ;  $ int arr2 [ ] = { 118 , 62 , 94 , 60 , 118 , 62 , 94 } ;  $ int main ( ) {  $ ~char a , b ;  $ ~int n ;  $ ~cin >> a >> b >> n ;  $ ~n = n % 4 ;  $ ~bool flag1 = false , flag2 = false ;  $ ~for ( int i = 0 ; i < 7 ; i ++ ) {  $ ~~if ( arr1 [ i ] == a ) {  $ ~~~if ( arr1 [ i + n ] == b ) flag1 = true ;  $ ~~~break ;  $ ~~}  $ ~}  $ ~for ( int i = 0 ; i < 7 ; i ++ ) {  $ ~~if ( arr2 [ i ] == a ) {  $ ~~~if ( arr2 [ i + n ] == b ) flag2 = true ;  $ ~~~break ;  $ ~~}  $ ~}  $ ~if ( ( flag1 and flag2 ) or ( ! flag1 and ! flag2 ) )  $ ~~cout << "undefined\n" ;  $ ~else if ( flag1 )  $ ~~cout << "cw\n" ;  $ ~else  $ ~~cout << "ccw\n" ;  $ }
int main ( ) {  $ ~int n , t ;  $ ~int arr [ 30005 ] ;  $ ~cin >> n >> t ;  $ ~for ( int i = 1 ; i <= n - 1 ; i ++ ) cin >> arr [ i ] ;  $ ~int i = 1 ;  $ ~while ( i < t ) { i += arr [ i ] ; }  $ ~cout << ( ( i == t ) ? "YES" : "NO" ) << endl ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~int n ;  $ ~cin >> n ;  $ ~int q ;  $ ~cin >> q ;  $ ~set < int > df ;  $ ~for ( int i = 0 ; i < q ; i ++ ) {  $ ~~int x ;  $ ~~cin >> x ;  $ ~~df . insert ( x ) ;  $ ~}  $ ~cin >> q ;  $ ~for ( int i = 0 ; i < q ; i ++ ) {  $ ~~int x ;  $ ~~cin >> x ;  $ ~~df . insert ( x ) ;  $ ~}  $ ~if ( df . size ( ) == n )  $ ~~cout << "I become the guy.\n" ;  $ ~else  $ ~~cout << "Oh, my keyboard!\n" ;  $ }
int main ( ) {  $ ~int n ;  $ ~cin >> n ;  $ ~if ( n % 2 )  $ ~~cout << "Ehab\n" ;  $ ~else  $ ~~cout << "Mahmoud\n" ;  $ ~return 0 ;  $ }
int a [ 1000 ] ;  $ int main ( ) {  $ ~int n , num ;  $ ~while ( cin >> n ) {  $ ~~memset ( a , 0 , sizeof ( a ) ) ;  $ ~~for ( int i = 0 ; i < n ; i ++ ) {  $ ~~~cin >> num ;  $ ~~~a [ num ] ++ ;  $ ~~}  $ ~~int ans = 0 ;  $ ~~for ( int i = 1 ; i <= 600 ; i ++ ) {  $ ~~~if ( a [ i ] > 0 ) { ans ++ ; }  $ ~~}  $ ~~cout << ans << endl ;  $ ~}  $ ~return 0 ;  $ }
long long n , k , l , r , sum = 0 ;  $ int main ( ) {  $ ~cin >> n >> k ;  $ ~for ( int i = 1 ; i <= n ; i ++ ) {  $ ~~cin >> l >> r ;  $ ~~sum += ( r - l ) + 1 ;  $ ~}  $ ~cout << ( k - sum % k ) % k << endl ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~int k , r , sum = 1 ;  $ ~cin >> k >> r ;  $ ~while ( 1 ) {  $ ~~if ( ( sum * k ) % 10 == r || ( sum * k ) % 10 == 0 ) {  $ ~~~cout << sum << endl ;  $ ~~~break ;  $ ~~}  $ ~~sum += 1 ;  $ ~}  $ ~return 0 ;  $ }
int a [ 100 ] , b [ 100 ] , n , x , y , c [ 500 ] ;  $ int main ( ) {  $ ~cin >> n ;  $ ~int j = 1 ;  $ ~for ( int i = 1 ; i <= n * n ; i ++ ) {  $ ~~cin >> x >> y ;  $ ~~if ( a [ x ] == 0 && b [ y ] == 0 ) {  $ ~~~a [ x ] = 1 ;  $ ~~~b [ y ] = 1 ;  $ ~~~c [ j ] = i ;  $ ~~~j ++ ;  $ ~~}  $ ~}  $ ~cout << c [ 1 ] ;  $ ~for ( int i = 2 ; i < j ; i ++ ) cout << ' ' << c [ i ] ;  $ ~cout << endl ;  $ }
long long flag = 0 ;  $ string s ;  $ long long check ( long long i , long long k ) {  $ ~for ( long long j = i ; j < i + k ; j ++ ) {  $ ~~if ( s [ j ] != s [ 2 * i + k - 1 - j ] ) {  $ ~~~flag = 1 ;  $ ~~~return 0 ;  $ ~~}  $ ~}  $ }  $ int main ( ) {  $ ~cin >> s ;  $ ~long long n = s . length ( ) , k ;  $ ~cin >> k ;  $ ~if ( n % k != 0 ) {  $ ~~cout << "NO" << endl ;  $ ~~return 0 ;  $ ~}  $ ~for ( long long i = 0 ; i < n ; i += n / k ) { check ( i , n / k ) ; }  $ ~if ( flag == 1 )  $ ~~cout << "NO" << endl ;  $ ~else  $ ~~cout << "YES" << endl ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~int n , t ;  $ ~cin >> n >> t ;  $ ~vector < int > v ( n ) ;  $ ~for ( int i = 0 ; i < ( int ) n ; i ++ ) { cin >> v [ i ] ; }  $ ~int i = - 1 ;  $ ~while ( t > 0 ) {  $ ~~i ++ ;  $ ~~t -= ( 86400 - v [ i ] ) ;  $ ~}  $ ~cout << i + 1 << endl ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~int nuts , divis , maxsec , capacity , boxes = 0 ;  $ ~cin >> maxsec >> nuts >> divis >> capacity ;  $ ~while ( nuts > 0 ) {  $ ~~boxes ++ ;  $ ~~nuts -= ( ( min ( maxsec , divis + 1 ) ) * capacity ) ;  $ ~~divis -= ( ( min ( maxsec , divis + 1 ) ) - 1 ) ;  $ ~}  $ ~cout << boxes << endl ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~int n ;  $ ~string s ;  $ ~cin >> n ;  $ ~cin >> s ;  $ ~int p , m ;  $ ~p = 0 ;  $ ~m = 1 ;  $ ~while ( m != s . length ( ) ) {  $ ~~if ( s . length ( ) == 2 ) {  $ ~~~if ( s [ 0 ] != s [ 1 ] ) {  $ ~~~~s . erase ( 0 , 2 ) ;  $ ~~~~break ;  $ ~~~} else {  $ ~~~~break ;  $ ~~~}  $ ~~}  $ ~~if ( s [ p ] != s [ m ] ) {  $ ~~~s . erase ( p , 2 ) ;  $ ~~~m = max ( p , 1 ) ;  $ ~~~p = max ( 0 , -- p ) ;  $ ~~} else {  $ ~~~++ p ;  $ ~~~++ m ;  $ ~~}  $ ~}  $ ~cout << s . length ( ) << endl ;  $ ~return 0 ;  $ }
int arr [ 150 ] ;  $ int main ( ) {  $ ~memset ( arr , 0 , sizeof ( arr ) ) ;  $ ~int n , p , q ;  $ ~cin >> n >> p ;  $ ~for ( int i = 1 ; i <= p ; i ++ ) {  $ ~~int a ;  $ ~~cin >> a ;  $ ~~arr [ a ] = 1 ;  $ ~}  $ ~cin >> q ;  $ ~for ( int i = 1 ; i <= q ; i ++ ) {  $ ~~int a ;  $ ~~cin >> a ;  $ ~~arr [ a ] = 1 ;  $ ~}  $ ~for ( int i = 1 ; i <= n ; i ++ ) {  $ ~~if ( arr [ i ] == 0 ) {  $ ~~~cout << "Oh, my keyboard!" << endl ;  $ ~~~return 0 ;  $ ~~}  $ ~}  $ ~cout << "I become the guy." << endl ;  $ }
const int INF = 0 x3f3f3f3f ;  $ const double PI = acos ( - 1.0 ) ;  $ int main ( ) {  $ ~string a , b ;  $ ~cin >> a >> b ;  $ ~int difA = 0 ;  $ ~int difB = 0 ;  $ ~for ( int i = int ( 0 ) ; i < int ( a . length ( ) ) ; i ++ ) {  $ ~~if ( a [ i ] != b [ i ] ) {  $ ~~~if ( a [ i ] == '4' ) difA ++ ;  $ ~~~if ( a [ i ] == '7' ) difB ++ ;  $ ~~}  $ ~}  $ ~if ( difA > difB )  $ ~~cout << difA << endl ;  $ ~else  $ ~~cout << difB << endl ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~int n , ans = 0 , x = 0 , len , i ;  $ ~char str [ 110 ] ;  $ ~cin >> n ;  $ ~cin >> str ;  $ ~len = strlen ( str ) ;  $ ~for ( i = 0 ; i < len ; i ++ )  $ ~~if ( str [ i ] == '8' ) x ++ ;  $ ~len = len / 11 ;  $ ~if ( len > x )  $ ~~ans = x ;  $ ~else  $ ~~ans = len ;  $ ~cout << ans << endl ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~long long len , pos , i ;  $ ~char s [ 1000 ] ;  $ ~while ( cin >> len >> pos ) {  $ ~~cin >> s ;  $ ~~if ( pos > len / 2 ) {  $ ~~~if ( pos != len ) {  $ ~~~~for ( i = 0 ; i < ( len - pos ) ; i ++ ) cout << "RIGHT" << endl ;  $ ~~~}  $ ~~~cout << "PRINT " << s [ len - 1 ] << endl ;  $ ~~~for ( i = len - 2 ; i >= 0 ; i -- ) { cout << "LEFT" << endl << "PRINT " << s [ i ] << endl ; }  $ ~~} else {  $ ~~~if ( pos != 1 ) {  $ ~~~~for ( i = 1 ; i < pos ; i ++ ) cout << "LEFT" << endl ;  $ ~~~}  $ ~~~cout << "PRINT " << s [ 0 ] << endl ;  $ ~~~for ( i = 1 ; i < len ; i ++ ) { cout << "RIGHT" << endl << "PRINT " << s [ i ] << endl ; }  $ ~~}  $ ~}  $ ~return 0 ;  $ }
int main ( ) {  $ ~int a , b , k [ 4 ] , i = 0 , j ;  $ ~char ch [ 6 ] ;  $ ~cin >> ch ;  $ ~a = ( ch [ 0 ] - 48 ) * 10 + ch [ 1 ] - 48 ;  $ ~b = ( ch [ 3 ] - 48 ) * 10 + ch [ 4 ] - 48 ;  $ ~k [ 0 ] = a / 10 ;  $ ~k [ 1 ] = a % 10 ;  $ ~k [ 2 ] = b / 10 ;  $ ~k [ 3 ] = b % 10 ;  $ ~if ( k [ 0 ] == k [ 3 ] && k [ 1 ] == k [ 2 ] ) cout << 0 << endl ;  $ ~while ( k [ 0 ] != k [ 3 ] || k [ 1 ] != k [ 2 ] ) {  $ ~~i ++ ;  $ ~~b ++ ;  $ ~~if ( b >= 60 ) {  $ ~~~b = 0 ;  $ ~~~if ( a == 23 )  $ ~~~~a = 0 ;  $ ~~~else if ( a < 23 )  $ ~~~~a ++ ;  $ ~~}  $ ~~k [ 0 ] = a / 10 ;  $ ~~k [ 1 ] = a % 10 ;  $ ~~k [ 2 ] = b / 10 ;  $ ~~k [ 3 ] = b % 10 ;  $ ~~if ( k [ 0 ] == k [ 3 ] && k [ 1 ] == k [ 2 ] ) {  $ ~~~cout << i << endl ;  $ ~~~break ;  $ ~~}  $ ~}  $ ~return 0 ;  $ }
int f ( int c , int cc ) {  $ ~if ( c > cc )  $ ~~return cc ;  $ ~else  $ ~~return c ;  $ }  $ int n , i , j2 = 0 , j3 = 0 , k , r = 0 ;  $ int t1 [ 5001 ] , t2 [ 5001 ] , t3 [ 5001 ] ;  $ int main ( ) {  $ ~cin >> n ;  $ ~for ( i = 0 ; i < n ; ++ i ) {  $ ~~cin >> k ;  $ ~~if ( k == 1 ) {  $ ~~~t1 [ r ] = i + 1 ;  $ ~~~++ r ;  $ ~~} else if ( k == 2 ) {  $ ~~~t2 [ j2 ] = i + 1 ;  $ ~~~++ j2 ;  $ ~~} else if ( k == 3 ) {  $ ~~~t3 [ j3 ] = i + 1 ;  $ ~~~++ j3 ;  $ ~~}  $ ~}  $ ~k = f ( f ( r , j2 ) , j3 ) ;  $ ~cout << k << endl ;  $ ~for ( i = 0 ; i < k ; ++ i ) { cout << t1 [ i ] << " " << t2 [ i ] << " " << t3 [ i ] << endl ; }  $ ~return 0 ;  $ }
int main ( ) {  $ ~int t , a ;  $ ~cin >> t ;  $ ~while ( t -- ) {  $ ~~cin >> a ;  $ ~~if ( 360 / ( 180 - a ) == ceil ( float ( 360 ) / ( 180 - a ) ) ) {  $ ~~~cout << "YES" << endl ;  $ ~~} else {  $ ~~~cout << "NO" << endl ;  $ ~~}  $ ~}  $ }
int main ( ) {  $ ~int q , e ;  $ ~cin >> q ;  $ ~for ( e = 0 ; e < q ; e ++ ) {  $ ~~long long int n , x , y , d , k = 10000000000 , p = 10000000000 ;  $ ~~cin >> n >> x >> y >> d ;  $ ~~if ( abs ( y - x ) % d == 0 ) {  $ ~~~cout << abs ( y - x ) / d << endl ;  $ ~~} else {  $ ~~~if ( ( y - 1 ) % d == 0 ) {  $ ~~~~k = ( x - 1 ) / d + ( y - 1 ) / d ;  $ ~~~~if ( ( x - 1 ) % d != 0 ) k ++ ;  $ ~~~}  $ ~~~if ( ( n - y ) % d == 0 ) {  $ ~~~~p = ( n - x ) / d + ( n - y ) / d ;  $ ~~~~if ( ( n - x ) % d != 0 ) p ++ ;  $ ~~~}  $ ~~~if ( k != 10000000000 || p != 10000000000 ) {  $ ~~~~if ( k < p )  $ ~~~~~cout << k << endl ;  $ ~~~~else  $ ~~~~~cout << p << endl ;  $ ~~~} else  $ ~~~~cout << "-1" << endl ;  $ ~~}  $ ~}  $ ~return 0 ;  $ }
void solve ( ) {  $ ~int n ;  $ ~cin >> n ;  $ ~vector < int > a ( 6 , 0 ) ;  $ ~vector < int > b ( 6 , 0 ) ;  $ ~int x ;  $ ~for ( int i = 0 ; i < n ; i ++ ) {  $ ~~cin >> x ;  $ ~~a [ x ] ++ ;  $ ~}  $ ~for ( int i = 0 ; i < n ; i ++ ) {  $ ~~cin >> x ;  $ ~~b [ x ] ++ ;  $ ~}  $ ~int exchanges = 0 ;  $ ~for ( int i = 1 ; i <= 5 ; i ++ ) {  $ ~~int avg = ( a [ i ] + b [ i ] ) / 2 ;  $ ~~if ( 2 * avg != a [ i ] + b [ i ] ) {  $ ~~~cout << - 1 << endl ;  $ ~~~return ;  $ ~~}  $ ~~if ( a [ i ] > avg ) { exchanges += ( a [ i ] - avg ) ; }  $ ~}  $ ~cout << exchanges << endl ;  $ }  $ int main ( ) {  $ ~solve ( ) ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~int n , s = 0 ;  $ ~int c = 0 ;  $ ~cin >> n ;  $ ~for ( int i = 1 ; i <= n + 1 ; i ++ ) {  $ ~~s = s + i ;  $ ~~c = c + s ;  $ ~~if ( c > n ) {  $ ~~~cout << i - 1 << endl ;  $ ~~~break ;  $ ~~}  $ ~}  $ ~return 0 ;  $ }
int main ( ) {  $ ~string str ;  $ ~getline ( cin , str ) ;  $ ~int i , count , dis1 , dis2 , dis3 , d ;  $ ~dis1 = abs ( 97 - ( int ) str [ 0 ] ) ;  $ ~dis2 = abs ( 122 - ( int ) str [ 0 ] ) + 1 ;  $ ~count = min ( dis1 , dis2 ) ;  $ ~for ( i = 1 ; i != str . size ( ) ; i ++ ) {  $ ~~int a = ( int ) str [ i ] ;  $ ~~int b = ( int ) str [ i - 1 ] ;  $ ~~dis1 = abs ( b - a ) ;  $ ~~dis2 = abs ( 97 - a ) + abs ( 97 - b + 26 ) ;  $ ~~dis3 = abs ( 97 - b ) + abs ( 97 - a + 26 ) ;  $ ~~d = min ( dis2 , dis3 ) ;  $ ~~count += min ( dis1 , d ) ;  $ ~}  $ ~cout << count << endl ;  $ }
int main ( ) {  $ ~int pos = 0 ;  $ ~string given ;  $ ~vector < string > num ( 10 ) ;  $ ~cin >> given ;  $ ~for ( int i = 0 ; i < 10 ; i ++ ) cin >> num [ i ] ;  $ ~while ( pos < 71 ) {  $ ~~for ( int i = 0 ; i < 10 ; i ++ )  $ ~~~if ( given . substr ( pos , 10 ) == num [ i ] ) {  $ ~~~~cout << i ;  $ ~~~~i = 10 ;  $ ~~~}  $ ~~pos += 10 ;  $ ~}  $ ~cout << endl ;  $ ~return 0 ;  $ }
map < pair < int , int > , bool > M ;  $ int main ( ) {  $ ~int n ;  $ ~cin >> n ;  $ ~vector < string > V ;  $ ~vector < int > row , col ;  $ ~V . resize ( n ) ;  $ ~long long ans = 0 ;  $ ~for ( int i = 0 ; i < n ; i ++ ) {  $ ~~cin >> V [ i ] ;  $ ~~int cnt = 0 ;  $ ~~for ( int j = 0 ; j < V [ i ] . size ( ) ; j ++ ) {  $ ~~~if ( V [ i ] [ j ] == 'C' ) cnt ++ ;  $ ~~}  $ ~~row . push_back ( cnt ) ;  $ ~}  $ ~for ( int i = 0 ; i < n ; i ++ ) {  $ ~~int cnt = 0 ;  $ ~~for ( int j = 0 ; j < n ; j ++ ) {  $ ~~~if ( V [ j ] [ i ] == 'C' ) cnt ++ ;  $ ~~}  $ ~~col . push_back ( cnt ) ;  $ ~}  $ ~for ( int i = 0 ; i < row . size ( ) ; i ++ ) { ans += ( row [ i ] * ( row [ i ] - 1 ) ) / 2 ; }  $ ~for ( int i = 0 ; i < col . size ( ) ; i ++ ) { ans += ( col [ i ] * ( col [ i ] - 1 ) ) / 2 ; }  $ ~cout << ans << "\n" ;  $ ~return 0 ;  $ }
long long max ( long long a , long long b ) {  $ ~return ( a > b ) ? a : b ;  $ }  $ long long min ( long long a , long long b ) {  $ ~return ( a < b ) ? a : b ;  $ }  $ int main ( ) {  $ ~long long t = 1 ;  $ ~cin >> t ;  $ ~while ( t -- ) {  $ ~~long long x ;  $ ~~cin >> x ;  $ ~~x = 180 - x ;  $ ~~if ( 360 % x ) {  $ ~~~cout << "NO\n" ;  $ ~~} else  $ ~~~cout << "YES\n" ;  $ ~}  $ ~return 0 ;  $ }
int main ( ) {  $ ~long long n , i , j = 0 , k = 0 , m , s , p = 0 ;  $ ~cin >> n >> k ;  $ ~long long l [ n ] , r [ n ] ;  $ ~for ( int i = 1 ; i <= n ; i ++ ) {  $ ~~cin >> l [ i ] >> r [ i ] ;  $ ~~p += r [ i ] - l [ i ] + 1 ;  $ ~}  $ ~s = p % k ;  $ ~m = k - s ;  $ ~cout << m % k ;  $ ~cout << endl ;  $ ~return 0 ;  $ }
const int INF = 0 x3f3f3f3f ;  $ const int mod = 1e9 + 7 ;  $ const int N = 1e5 + 5 ;  $ int main ( ) {  $ ~int n ;  $ ~cin >> n ;  $ ~int sum = 0 ;  $ ~int tmp = 1 ;  $ ~while ( tmp <= n ) {  $ ~~tmp *= 2 ;  $ ~~sum ++ ;  $ ~}  $ ~cout << sum << "\n" ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~int n , k ;  $ ~cin >> n >> k ;  $ ~int x , y ;  $ ~int res = 0 ;  $ ~while ( n -- ) {  $ ~~cin >> x >> y ;  $ ~~res += y - x + 1 ;  $ ~}  $ ~if ( res % k == 0 ) {  $ ~~cout << 0 << endl ;  $ ~} else {  $ ~~cout << ( k - res % k ) << endl ;  $ ~}  $ ~return 0 ;  $ }
const long double eps = 1e-11 ;  $ const long double pi = acos ( - 1.0 ) ;  $ int n , a [ 1000 ] ;  $ int main ( ) {  $ ~cin >> n ;  $ ~for ( int i = 0 ; i < n ; i ++ ) cin >> a [ i ] ;  $ ~int out = 0 ;  $ ~for ( int i = 1 ; i <= n - 2 ; i ++ ) {  $ ~~if ( a [ i - 1 ] < a [ i ] && a [ i + 1 ] < a [ i ] )  $ ~~~out ++ ;  $ ~~else if ( a [ i - 1 ] > a [ i ] && a [ i + 1 ] > a [ i ] )  $ ~~~out ++ ;  $ ~}  $ ~cout << out << endl ;  $ ~return 0 ;  $ }
int na , nb , m , k ;  $ int A [ 100100 ] ;  $ int B [ 100100 ] ;  $ int main ( ) {  $ ~cin >> na >> nb ;  $ ~cin >> k >> m ;  $ ~for ( int i = 0 ; i < na ; i ++ ) cin >> A [ i ] ;  $ ~for ( int i = 0 ; i < nb ; i ++ ) cin >> B [ i ] ;  $ ~if ( A [ k - 1 ] < B [ nb - m ] )  $ ~~cout << "YES\n" ;  $ ~else  $ ~~cout << "NO\n" ;  $ ~return 0 ;  $ }
bool beat ( char a , char b ) {  $ ~if ( a == 'R' && b == 'S' ) return true ;  $ ~if ( a == 'S' && b == 'P' ) return true ;  $ ~if ( a == 'P' && b == 'R' ) return true ;  $ ~return false ;  $ }  $ int main ( ) {  $ ~int n ;  $ ~cin >> n ;  $ ~string a , b ;  $ ~cin >> a >> b ;  $ ~int sa = 0 , sb = 0 ;  $ ~for ( int i = 0 ; i < a . size ( ) * b . size ( ) ; i ++ ) {  $ ~~if ( beat ( a [ i % a . size ( ) ] , b [ i % b . size ( ) ] ) ) sb ++ ;  $ ~~if ( beat ( b [ i % b . size ( ) ] , a [ i % a . size ( ) ] ) ) sa ++ ;  $ ~}  $ ~sa = sa * ( n / ( a . size ( ) * b . size ( ) ) ) ;  $ ~sb = sb * ( n / ( a . size ( ) * b . size ( ) ) ) ;  $ ~for ( int i = 0 ; i < n % ( a . size ( ) * b . size ( ) ) ; i ++ ) {  $ ~~if ( beat ( a [ i % a . size ( ) ] , b [ i % b . size ( ) ] ) ) sb ++ ;  $ ~~if ( beat ( b [ i % b . size ( ) ] , a [ i % a . size ( ) ] ) ) sa ++ ;  $ ~}  $ ~cout << sa << ' ' << sb << endl ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~long long int k , i , j ;  $ ~cin >> k ;  $ ~long long int a [ 12 ] ;  $ ~for ( i = 0 ; i < 12 ; i ++ ) { cin >> a [ i ] ; }  $ ~sort ( a , a + 12 ) ;  $ ~if ( k == 0 ) {  $ ~~cout << 0 << '\n' ;  $ ~} else {  $ ~~for ( i = 11 ; i >= 0 ; i -- ) {  $ ~~~k -= a [ i ] ;  $ ~~~if ( k <= 0 ) { break ; }  $ ~~}  $ ~~if ( i == - 1 ) {  $ ~~~cout << i << '\n' ;  $ ~~} else {  $ ~~~cout << 12 - i << '\n' ;  $ ~~}  $ ~}  $ ~return 0 ;  $ }
int main ( ) {  $ ~int n ;  $ ~while ( cin >> n ) {  $ ~~int x = n * sqrt ( double ( 2 ) ) ;  $ ~~if ( n == 0 )  $ ~~~cout << 1 << endl ;  $ ~~else  $ ~~~cout << x * 4 << endl ;  $ ~}  $ ~return 0 ;  $ }
int A [ 5 ] [ 5 ] , B [ 5 ] [ 5 ] ;  $ int main ( ) {  $ ~for ( int i = 1 ; i <= 3 ; i ++ )  $ ~~for ( int j = 1 ; j <= 3 ; j ++ ) cin >> A [ i ] [ j ] ;  $ ~for ( int i = 1 ; i <= 3 ; i ++ )  $ ~~for ( int j = 1 ; j <= 3 ; j ++ ) {  $ ~~~B [ i + 1 ] [ j ] += A [ i ] [ j ] ;  $ ~~~B [ i ] [ j ] += A [ i ] [ j ] ;  $ ~~~B [ i - 1 ] [ j ] += A [ i ] [ j ] ;  $ ~~~B [ i ] [ j + 1 ] += A [ i ] [ j ] ;  $ ~~~B [ i ] [ j - 1 ] += A [ i ] [ j ] ;  $ ~~}  $ ~for ( int i = 1 ; i <= 3 ; i ++ ) {  $ ~~for ( int j = 1 ; j < 4 ; j ++ ) {  $ ~~~if ( B [ i ] [ j ] % 2 == 0 )  $ ~~~~cout << "1" ;  $ ~~~else  $ ~~~~cout << "0" ;  $ ~~}  $ ~~cout << endl ;  $ ~}  $ ~return 0 ;  $ }
int main ( ) {  $ ~int x , y , z ;  $ ~cin >> x >> y >> z ;  $ ~cout << 4 * ( sqrt ( x * y / z ) + sqrt ( x * z / y ) + sqrt ( z * y / x ) ) << endl ;  $ }
int main ( ) {  $ ~long long n , k ;  $ ~cin >> n >> k ;  $ ~long long num1 = 0 , num2 = 0 , num3 = n ;  $ ~long long div = k + 1 ;  $ ~if ( n / 2 < div ) {  $ ~~cout << 0 << " " << 0 << " " << n << endl ;  $ ~~return 0 ;  $ ~}  $ ~long long maxcnt = n / 2 ;  $ ~long long ans = maxcnt / div ;  $ ~num1 = ans ;  $ ~num2 = ans * k ;  $ ~num3 = n - num1 - num2 ;  $ ~cout << num1 << " " << num2 << " " << num3 << endl ;  $ ~return 0 ;  $ }
long a [ 100006 ] , b [ 100006 ] , c ;  $ int main ( ) {  $ ~long n , x ;  $ ~while ( cin >> n >> x ) {  $ ~~int s = 0 ;  $ ~~for ( int i = 1 ; i <= n ; i ++ ) {  $ ~~~if ( x % i == 0 ) {  $ ~~~~if ( x / i <= n ) s ++ ;  $ ~~~}  $ ~~}  $ ~~cout << s << endl ;  $ ~}  $ }
int main ( ) {  $ ~int m , a , b , c ;  $ ~cin >> m ;  $ ~for ( int i = 1 ; i <= m ; i ++ ) {  $ ~~cin >> a ;  $ ~~if ( a >= 180 || a <= 0 ) {  $ ~~~cout << "NO" << endl ;  $ ~~~continue ;  $ ~~}  $ ~~if ( ( 360.0 / ( 180 - a ) - int ( 360 / ( 180 - a ) ) <= 0 ) )  $ ~~~cout << "YES" << endl ;  $ ~~else {  $ ~~~cout << "NO" << endl ;  $ ~~}  $ ~}  $ }
const int maxn = 105 ;  $ int main ( ) {  $ ~int n , k ;  $ ~int a [ maxn ] ;  $ ~cin >> n >> k ;  $ ~for ( int i = 0 ; i < n ; i ++ ) { cin >> a [ i ] ; }  $ ~int sum = 0 ;  $ ~for ( int i = 0 ; i < n ; i ++ ) {  $ ~~int m = a [ i ] ;  $ ~~int t = 0 ;  $ ~~while ( m != 0 ) {  $ ~~~if ( m % 10 == 4 || m % 10 == 7 ) t ++ ;  $ ~~~m = m / 10 ;  $ ~~}  $ ~~if ( t <= k ) sum ++ ;  $ ~}  $ ~cout << sum << endl ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~int n , m ;  $ ~cin >> n >> m ;  $ ~if ( m > ( n * ( n + 1 ) ) / 2 ) { m = m % ( ( n * ( n + 1 ) ) / 2 ) ; }  $ ~for ( int i = 1 ; i <= n ; i ++ ) {  $ ~~if ( i > m ) break ;  $ ~~m -= i ;  $ ~}  $ ~cout << m << endl ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~int n , i , count = 0 ;  $ ~cin >> n ;  $ ~for ( i = 0 ; ; i ++ ) {  $ ~~if ( n >= 100 ) {  $ ~~~n = n - 100 ;  $ ~~~count ++ ;  $ ~~~if ( n == 0 ) { break ; }  $ ~~} else if ( n >= 20 ) {  $ ~~~n = n - 20 ;  $ ~~~count ++ ;  $ ~~~if ( n == 0 ) { break ; }  $ ~~} else if ( n >= 10 ) {  $ ~~~n = n - 10 ;  $ ~~~count ++ ;  $ ~~~if ( n == 0 ) { break ; }  $ ~~} else if ( n >= 5 ) {  $ ~~~n = n - 5 ;  $ ~~~count ++ ;  $ ~~~if ( n == 0 ) { break ; }  $ ~~} else if ( n >= 1 ) {  $ ~~~n = n - 1 ;  $ ~~~count ++ ;  $ ~~~if ( n == 0 ) { break ; }  $ ~~}  $ ~}  $ ~cout << count << endl ;  $ }
int main ( ) {  $ ~int n ;  $ ~cin >> n ;  $ ~string s ;  $ ~cin >> s ;  $ ~int a ;  $ ~vector < int > v ;  $ ~for ( int i = 0 ; i < n ; i ++ ) {  $ ~~cin >> a ;  $ ~~v . push_back ( a ) ;  $ ~}  $ ~int ans = INT_MAX , f = 0 ;  $ ~for ( int i = 0 ; i < n - 1 ; i ++ ) {  $ ~~if ( s [ i ] == 'R' && s [ i + 1 ] == 'L' ) {  $ ~~~ans = min ( ans , ( v [ i + 1 ] - v [ i ] ) / 2 ) ;  $ ~~~f = 1 ;  $ ~~}  $ ~}  $ ~if ( f == 0 )  $ ~~cout << "-1" << endl ;  $ ~else  $ ~~cout << ans << endl ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~int v ;  $ ~cin >> v ;  $ ~if ( v == 2 )  $ ~~cout << 2 << endl ;  $ ~else  $ ~~cout << 1 << endl ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~int n , p ;  $ ~int a0 = 'a' - 1 ;  $ ~cin >> n >> p ;  $ ~string a ;  $ ~cin >> a ;  $ ~int i ;  $ ~for ( i = a . size ( ) - 1 ; i >= 0 ; i -- ) {  $ ~~char now = a [ i ] + 1 ;  $ ~~if ( i - 1 >= 0 && now == a [ i - 1 ] ) now += 1 ;  $ ~~if ( i - 2 >= 0 && now == a [ i - 2 ] ) now += 1 ;  $ ~~if ( i - 1 >= 0 && now == a [ i - 1 ] ) now += 1 ;  $ ~~if ( now - a0 > p ) continue ;  $ ~~a [ i ] = now ;  $ ~~i ++ ;  $ ~~break ;  $ ~}  $ ~for ( ; i < a . size ( ) ; i ++ ) {  $ ~~int j ;  $ ~~for ( j = 1 ; j <= p ; j ++ ) {  $ ~~~if ( i - 1 >= 0 && a0 + j == a [ i - 1 ] ) continue ;  $ ~~~if ( i - 2 >= 0 && a0 + j == a [ i - 2 ] ) continue ;  $ ~~~a [ i ] = a0 + j ;  $ ~~~break ;  $ ~~}  $ ~~if ( j == p + 1 ) {  $ ~~~i = - 1 ;  $ ~~~break ;  $ ~~}  $ ~}  $ ~if ( i == - 1 )  $ ~~cout << "NO" << endl ;  $ ~else  $ ~~cout << a << endl ;  $ ~return 0 ;  $ }
const long long M = 998244353 ;  $ const long long oo = 1e13 ;  $ int main ( ) {  $ ~long long n , x , y ;  $ ~string s ;  $ ~cin >> n >> x >> y >> s ;  $ ~long long co = 0 , o = 0 ;  $ ~s += '1' ;  $ ~for ( int i = 0 ; i < n + 1 ; ++ i ) {  $ ~~if ( s [ i ] == '1' && o == 1 ) co ++ , o = 0 ;  $ ~~if ( s [ i ] == '0' ) o = 1 ;  $ ~}  $ ~if ( co == 0 ) return cout << 0 << endl , 0 ;  $ ~if ( co == 1 ) { return cout << y << endl , 0 ; }  $ ~if ( x * ( co - 1 ) + y <= ( y * co ) ) {  $ ~~cout << x * ( co - 1 ) + y << endl ;  $ ~} else {  $ ~~cout << ( y * co ) << endl ;  $ ~}  $ }
int one , zero ;  $ int main ( ) {  $ ~int t ;  $ ~cin >> t ;  $ ~for ( int i = 0 ; i < t ; i ++ ) {  $ ~~int a ;  $ ~~cin >> a ;  $ ~~if ( 360 % ( 180 - a ) == 0 )  $ ~~~cout << "YES" << endl ;  $ ~~else  $ ~~~cout << "NO" << endl ;  $ ~}  $ ~return 0 ;  $ }
int main ( ) {  $ ~string s ;  $ ~int n , x = 1 , y = 1 ;  $ ~cin >> n ;  $ ~while ( n -- ) {  $ ~~cin >> s ;  $ ~~s == "ULDR" ? x ++ , y ++ : ( ( s == "UR" || s == "DL" ) ? x ++ : y ++ ) ;  $ ~}  $ ~cout << 1 LL * x * y << endl ;  $ }
int main ( ) {  $ ~string str ;  $ ~cin >> str ;  $ ~for ( int i = 0 ; i < str . size ( ) ; i ++ ) {  $ ~~if ( str [ i ] > '4' ) str [ i ] = ( 9 - ( str [ i ] - '0' ) ) + '0' ;  $ ~}  $ ~if ( str [ 0 ] == '0' ) str [ 0 ] = '9' ;  $ ~cout << str << endl ;  $ ~return 0 ;  $ }
set < char > a ;  $ map < string , int > m ;  $ int main ( ) {  $ ~int n ;  $ ~string x ;  $ ~string y ;  $ ~m . clear ( ) ;  $ ~cin >> n ;  $ ~int ans = 0 ;  $ ~for ( int i = 0 ; i < n ; i ++ ) {  $ ~~a . clear ( ) ;  $ ~~y . clear ( ) ;  $ ~~cin >> x ;  $ ~~for ( int i = 0 ; i < x . size ( ) ; i ++ ) { a . insert ( x [ i ] ) ; }  $ ~~for ( set < char > : : iterator it = a . begin ( ) ; it != a . end ( ) ; it ++ ) { y += * it ; }  $ ~~if ( ! m [ y ] ) ans ++ ;  $ ~~m [ y ] = 1 ;  $ ~}  $ ~cout << ans << endl ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~long long n , m , a , b ;  $ ~cin >> n >> m >> a >> b ;  $ ~if ( n % m == 0 )  $ ~~cout << "0" << endl ;  $ ~else {  $ ~~long long x = n / m ;  $ ~~long long y = ( n / m ) + 1 ;  $ ~~cout << min ( ( y * m - n ) * a , ( n - m * x ) * b ) << endl ;  $ ~}  $ ~return 0 ;  $ }
int main ( ) {  $ ~int p , b , t , x ;  $ ~cin >> p >> b >> t ;  $ ~int match = 0 ;  $ ~x = p ;  $ ~if ( x == 1 ) {  $ ~~cout << 0 << " " << t << endl ;  $ ~~return 0 ;  $ ~}  $ ~while ( 1 ) {  $ ~~if ( p / 2 == 1 && p % 2 == 0 ) break ;  $ ~~match += ( p / 2 ) ;  $ ~~p = ( p / 2 ) + ( p % 2 ) ;  $ ~}  $ ~match ++ ;  $ ~cout << match + ( 2 * match * b ) << " " << x * t << endl ;  $ }
int main ( ) {  $ ~long long n , h , a , b , k ;  $ ~cin >> n >> h >> a >> b >> k ;  $ ~for ( int i = 1 ; i <= k ; i ++ ) {  $ ~~int t1 , f1 , t2 , f2 ;  $ ~~cin >> t1 >> f1 >> t2 >> f2 ;  $ ~~if ( t1 == t2 ) {  $ ~~~cout << abs ( f1 - f2 ) << endl ;  $ ~~~continue ;  $ ~~}  $ ~~if ( f1 < a && f2 < a ) {  $ ~~~cout << abs ( t1 - t2 ) + abs ( a - f1 ) + abs ( a - f2 ) << endl ;  $ ~~~continue ;  $ ~~}  $ ~~if ( f1 > b && f2 > b ) {  $ ~~~cout << abs ( t1 - t2 ) + abs ( b - f1 ) + abs ( b - f2 ) << endl ;  $ ~~~continue ;  $ ~~}  $ ~~cout << abs ( t1 - t2 ) + abs ( f1 - f2 ) << endl ;  $ ~}  $ }
const int maxn = 107 ;  $ map < string , int > mp ;  $ void init ( ) {  $ ~mp [ "L" ] = 1 ;  $ ~mp [ "XL" ] = 2 ;  $ ~mp [ "XXL" ] = 3 ;  $ ~mp [ "XXXL" ] = 4 ;  $ ~mp [ "S" ] = 5 ;  $ ~mp [ "XS" ] = 6 ;  $ ~mp [ "XXS" ] = 7 ;  $ ~mp [ "XXXS" ] = 8 ;  $ ~mp [ "M" ] = 9 ;  $ }  $ int a [ 10 ] , b [ 10 ] ;  $ int main ( ) {  $ ~init ( ) ;  $ ~int n ;  $ ~string s ;  $ ~cin >> n ;  $ ~for ( int i = 1 ; i <= n ; i ++ ) cin >> s , a [ mp [ s ] ] ++ ;  $ ~for ( int i = 1 ; i <= n ; i ++ ) cin >> s , b [ mp [ s ] ] ++ ;  $ ~for ( int i = 1 ; i <= 9 ; i ++ )  $ ~~if ( b [ i ] >= a [ i ] )  $ ~~~b [ i ] -= a [ i ] , a [ i ] = 0 ;  $ ~~else  $ ~~~a [ i ] -= b [ i ] , b [ i ] = 0 ;  $ ~int ans = 0 ;  $ ~for ( int i = 1 ; i <= 9 ; i ++ ) ans += b [ i ] ;  $ ~cout << ans << endl ;  $ ~return 0 ;  $ }
int arr [ 5000010 ] ;  $ int main ( ) {  $ ~int n ;  $ ~cin >> n ;  $ ~for ( int i = 0 ; i < n ; i ++ ) cin >> arr [ i + 1 ] ;  $ ~arr [ 0 ] = arr [ 1 ] ;  $ ~arr [ n + 1 ] = arr [ n ] ;  $ ~int ans = 0 ;  $ ~bool strange = false ;  $ ~int start = - 1 ;  $ ~int left = - 1 ;  $ ~int end = - 1 ;  $ ~int right = - 1 ;  $ ~int mid = - 1 ;  $ ~int length = end - start + 1 ;  $ ~for ( int i = 1 ; i <= n ; i ++ ) {  $ ~~if ( arr [ i - 1 ] != arr [ i ] && arr [ i + 1 ] != arr [ i ] ) {  $ ~~~if ( ! strange ) {  $ ~~~~strange = true ;  $ ~~~~start = i ;  $ ~~~~left = arr [ i - 1 ] ;  $ ~~~}  $ ~~} else {  $ ~~~if ( strange ) {  $ ~~~~end = i - 1 ;  $ ~~~~right = arr [ i ] ;  $ ~~~~length = end - start + 1 ;  $ ~~~~ans = max ( ans , ( ( length + 1 ) / 2 ) ) ;  $ ~~~~mid = length / 2 + start - 1 ;  $ ~~~~for ( int j = start ; j <= mid ; j ++ ) arr [ j ] = left ;  $ ~~~~for ( int j = mid + 1 ; j <= end ; j ++ ) arr [ j ] = right ;  $ ~~~~strange = false ;  $ ~~~}  $ ~~}  $ ~}  $ ~cout << ans << endl ;  $ ~for ( int i = 1 ; i <= n - 1 ; i ++ ) cout << arr [ i ] << " " ;  $ ~cout << arr [ n ] << endl ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~int n , b , d , a ;  $ ~cin >> n >> b >> d ;  $ ~int ans = 0 ;  $ ~int cap = 0 ;  $ ~for ( int i = 1 ; i <= n ; i ++ ) {  $ ~~cin >> a ;  $ ~~if ( a > b ) continue ;  $ ~~cap += a ;  $ ~~if ( cap > d ) {  $ ~~~ans ++ ;  $ ~~~cap = 0 ;  $ ~~}  $ ~}  $ ~cout << ans << endl ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~unsigned long t ;  $ ~cin >> t ;  $ ~vector < int > vec ;  $ ~vector < int > ones ;  $ ~vector < int > twos ;  $ ~vector < int > threes ;  $ ~int x ;  $ ~unsigned long sum = 0 ;  $ ~int one = 0 , two = 0 , three = 0 ;  $ ~for ( unsigned long i = 0 ; i < t ; i ++ ) {  $ ~~cin >> x ;  $ ~~if ( x == 1 ) {  $ ~~~one ++ ;  $ ~~~ones . push_back ( i + 1 ) ;  $ ~~} else if ( x == 2 ) {  $ ~~~two ++ ;  $ ~~~twos . push_back ( i + 1 ) ;  $ ~~} else {  $ ~~~three ++ ;  $ ~~~threes . push_back ( i + 1 ) ;  $ ~~}  $ ~~vec . push_back ( x ) ;  $ ~}  $ ~int temp = one ;  $ ~if ( temp > two ) temp = two ;  $ ~if ( temp > three ) temp = three ;  $ ~cout << temp << endl ;  $ ~for ( int l = 0 ; l < temp ; l ++ ) { cout << ones [ l ] << " " << twos [ l ] << " " << threes [ l ] << endl ; }  $ ~return 0 ;  $ }
long long l1 , l2 , r1 , r2 , w ;  $ int main ( ) {  $ ~cin >> l1 >> r1 >> l2 >> r2 >> w ;  $ ~if ( ( l1 > r2 ) || ( r1 < l2 ) )  $ ~~cout << 0 << endl ;  $ ~else {  $ ~~if ( w >= max ( l1 , l2 ) && w <= min ( r1 , r2 ) ) {  $ ~~~cout << min ( r1 , r2 ) - max ( l1 , l2 ) << endl ;  $ ~~} else {  $ ~~~cout << min ( r1 , r2 ) - max ( l1 , l2 ) + 1 << endl ;  $ ~~}  $ ~}  $ }
int n , t , a [ 105 ] , ans ;  $ int main ( ) {  $ ~cin >> n >> t ;  $ ~for ( int i = 1 ; i <= n ; i ++ ) cin >> a [ i ] ;  $ ~for ( int i = 1 ; i <= n ; i ++ ) {  $ ~~ans += 86400 - a [ i ] ;  $ ~~if ( ans >= t ) {  $ ~~~cout << i << endl ;  $ ~~~return 0 ;  $ ~~}  $ ~}  $ ~return 0 ;  $ }
int main ( ) {  $ ~int n ;  $ ~cin >> n ;  $ ~int card = n - 10 ;  $ ~if ( card >= 2 && card <= 9 )  $ ~~cout << "4\n" ;  $ ~else if ( card == 10 )  $ ~~cout << "15\n" ;  $ ~else if ( card == 1 || card == 11 )  $ ~~cout << "4\n" ;  $ ~else  $ ~~cout << "0\n" ;  $ }
int main ( ) {  $ ~int n , sum = 0 ;  $ ~cin >> n ;  $ ~string s ;  $ ~for ( int i = 0 ; i < n ; i ++ ) {  $ ~~cin >> s ;  $ ~~if ( s [ 0 ] == 'T' ) {  $ ~~~sum += 4 ;  $ ~~~continue ;  $ ~~}  $ ~~if ( s [ 0 ] == 'C' ) {  $ ~~~sum += 6 ;  $ ~~~continue ;  $ ~~}  $ ~~if ( s [ 0 ] == 'O' ) {  $ ~~~sum += 8 ;  $ ~~~continue ;  $ ~~}  $ ~~if ( s [ 0 ] == 'D' ) {  $ ~~~sum += 12 ;  $ ~~~continue ;  $ ~~}  $ ~~if ( s [ 0 ] == 'I' ) {  $ ~~~sum += 20 ;  $ ~~~continue ;  $ ~~}  $ ~}  $ ~cout << sum << endl ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~int t ;  $ ~cin >> t ;  $ ~while ( t -- ) {  $ ~~int n ;  $ ~~string str ;  $ ~~cin >> n >> str ;  $ ~~int i = 0 , j = n - 1 , r ;  $ ~~bool fl = 1 ;  $ ~~while ( i < j ) {  $ ~~~r = abs ( str [ i ] - str [ j ] ) ;  $ ~~~if ( r == 1 || r > 2 ) fl = 0 ;  $ ~~~++ i ;  $ ~~~-- j ;  $ ~~}  $ ~~puts ( fl ? "YES" : "NO" ) ;  $ ~}  $ ~return 0 ;  $ }
int main ( ) {  $ ~long long n , x , a , b , c ;  $ ~cin >> n ;  $ ~for ( int i = 1 ; ; i ++ )  $ ~~if ( ( i * i + 1 ) / 2 > n ) {  $ ~~~x = i ;  $ ~~~break ;  $ ~~}  $ ~for ( int i = 1 ; i <= x ; i ++ ) {  $ ~~a = i * ( i + 1 ) / 2 ;  $ ~~b = ( n - a ) * 2 ;  $ ~~c = sqrt ( b ) ;  $ ~~if ( c * ( c + 1 ) == b && ( b / 2 ) + a == n && a && b ) {  $ ~~~cout << "YES" << endl ;  $ ~~~return 0 ;  $ ~~}  $ ~}  $ ~cout << "NO" << endl ;  $ }
int main ( ) {  $ ~int n , m , i , k , j ;  $ ~cin >> n >> m ;  $ ~for ( k = 1 ; k <= n ; k ++ ) {  $ ~~if ( k % 2 == 1 )  $ ~~~for ( j = 1 ; j <= m ; j ++ ) cout << '#' ;  $ ~~if ( k % 2 == 0 ) {  $ ~~~if ( k % 4 == 0 ) {  $ ~~~~cout << '#' ;  $ ~~~~for ( j = 1 ; j < m ; j ++ ) cout << '.' ;  $ ~~~} else {  $ ~~~~for ( j = 1 ; j < m ; j ++ ) cout << '.' ;  $ ~~~~cout << '#' ;  $ ~~~}  $ ~~}  $ ~~cout << endl ;  $ ~}  $ }
int main ( ) {  $ ~int n , a ;  $ ~cin >> a >> n ;  $ ~int sum = 0 ;  $ ~while ( n != 0 ) {  $ ~~int k = n % 10 ;  $ ~~sum = sum * 10 + k ;  $ ~~n = n / 10 ;  $ ~}  $ ~cout << sum + a << endl ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~int n , m ;  $ ~int price = 9000000 ;  $ ~int a [ 110 ] [ 110 ] = { 0 } , b [ 110 ] = { 0 } ;  $ ~cin >> n >> m ;  $ ~for ( int i = 1 ; i <= n ; i ++ ) cin >> b [ i ] ;  $ ~int x , y ;  $ ~for ( int i = 0 ; i < m ; i ++ ) {  $ ~~cin >> x >> y ;  $ ~~a [ x ] [ y ] = 1 ;  $ ~~a [ y ] [ x ] = 1 ;  $ ~}  $ ~for ( int i = 1 ; i <= n ; i ++ )  $ ~~for ( int j = i + 1 ; j <= n ; j ++ )  $ ~~~for ( int k = j + 1 ; k <= n ; k ++ ) {  $ ~~~~if ( a [ i ] [ j ] && a [ i ] [ k ] && a [ j ] [ k ] ) price = min ( price , b [ i ] + b [ j ] + b [ k ] ) ;  $ ~~~}  $ ~if ( price == 9000000 )  $ ~~cout << - 1 << endl ;  $ ~else  $ ~~cout << price << endl ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~bool arr [ 101 ] = { } ;  $ ~int n ;  $ ~int r , l , a , b ;  $ ~cin >> n ;  $ ~n -- ;  $ ~cin >> r >> l ;  $ ~while ( n -- ) {  $ ~~cin >> a >> b ;  $ ~~for ( int i = a ; i < b ; i ++ ) arr [ i ] = true ;  $ ~}  $ ~int cnt = 0 ;  $ ~for ( int i = r ; i < l ; i ++ )  $ ~~if ( arr [ i ] == false ) cnt ++ ;  $ ~cout << cnt << endl ;  $ ~return 0 ;  $ }
bool palindrom ( int k ) {  $ ~int n = log10 ( k ) + 1 ;  $ ~int dig [ n ] , i = 0 ;  $ ~while ( k > 0 ) {  $ ~~dig [ i ++ ] = k % 10 ;  $ ~~k /= 10 ;  $ ~}  $ ~bool ans = true ;  $ ~for ( int i = 0 ; i <= n / 2 ; ++ i ) { ans &= dig [ i ] == dig [ n - i - 1 ] ; }  $ ~return ans ;  $ }  $ int main ( ) {  $ ~int p , q ;  $ ~cin >> p >> q ;  $ ~bool prime [ 2000000 ] ;  $ ~memset ( prime , true , sizeof prime ) ;  $ ~int sqLIM = sqrt ( 2000000 ) ;  $ ~for ( int i = 2 ; i <= sqLIM ; ++ i ) {  $ ~~if ( ! prime [ i ] ) continue ;  $ ~~for ( int j = i * i ; j < 2000000 ; j += i ) { prime [ j ] = false ; }  $ ~}  $ ~prime [ 1 ] = false ;  $ ~int pr = 0 , pal = 0 , ans = 0 ;  $ ~for ( int i = 1 ; i < 2000000 ; ++ i ) {  $ ~~if ( palindrom ( i ) ) ++ pal ;  $ ~~if ( prime [ i ] ) ++ pr ;  $ ~~if ( p * pal >= q * pr ) ans = i ;  $ ~}  $ ~cout << ans << "\n" ;  $ ~cin >> p ;  $ }
int main ( ) {  $ ~long long int n , b , d , total = 0 , count = 0 ;  $ ~cin >> n >> b >> d ;  $ ~long long int oranges_size [ n ] ;  $ ~for ( int i = 0 ; i < n ; i ++ ) cin >> oranges_size [ i ] ;  $ ~for ( int i = 0 ; i < n ; i ++ ) {  $ ~~if ( oranges_size [ i ] <= b ) {  $ ~~~total += oranges_size [ i ] ;  $ ~~~if ( total > d ) {  $ ~~~~total = 0 ;  $ ~~~~count ++ ;  $ ~~~}  $ ~~}  $ ~}  $ ~cout << count << endl ;  $ }
int main ( ) {  $ ~int a ;  $ ~cin >> a ;  $ ~if ( a - 10 <= 0 || a - 10 > 11 ) {  $ ~~cout << 0 << endl ;  $ ~} else if ( ( a - 10 >= 1 && a - 10 <= 9 ) || a - 10 == 11 ) {  $ ~~cout << 4 << endl ;  $ ~} else  $ ~~cout << 15 << endl ;  $ }
int main ( ) {  $ ~int m , d , s , t , h ;  $ ~int a [ 12 ] = { 31 , 28 , 31 , 30 , 31 , 30 , 31 , 31 , 30 , 31 , 30 , 31 } ;  $ ~cin >> m >> d ;  $ ~t = a [ m - 1 ] ;  $ ~h = 7 - d ;  $ ~if ( ( t - h - 1 ) % 7 == 0 ) {  $ ~~s = ( t - h - 1 ) / 7 ;  $ ~} else {  $ ~~s = ( ( t - h - 1 ) / 7 ) + 1 ;  $ ~}  $ ~cout << s + 1 << endl ;  $ ~return 0 ;  $ }
int gcd ( int a , int b ) {  $ ~if ( b == 0 )  $ ~~return a ;  $ ~else  $ ~~return gcd ( b , a % b ) ;  $ }  $ int base ( int n , int a ) {  $ ~int res = 0 ;  $ ~while ( n != 0 ) {  $ ~~res = res + n % a ;  $ ~~n = n / a ;  $ ~}  $ ~return res ;  $ }  $ int main ( ) {  $ ~int n , d , ans = 0 , a , b ;  $ ~cin >> n ;  $ ~for ( int i = 2 ; i <= n - 1 ; i ++ ) ans = ans + base ( n , i ) ;  $ ~d = n - 2 ;  $ ~a = ans / gcd ( ans , d ) ;  $ ~b = d / gcd ( ans , d ) ;  $ ~cout << a << "/" << b << endl ;  $ ~return 0 ;  $ }
string s ;  $ int main ( ) {  $ ~cin >> s ;  $ ~int n = s . size ( ) , cnt = 0 ;  $ ~for ( int i = 0 ; i < n / 2 ; i ++ ) {  $ ~~if ( s [ i ] != s [ n - i - 1 ] ) { cnt ++ ; }  $ ~}  $ ~if ( cnt == 1 || ( ! cnt && n % 2 ) ) {  $ ~~cout << "YES" << endl ;  $ ~} else {  $ ~~cout << "NO" << endl ;  $ ~}  $ ~return 0 ;  $ }
int main ( ) {  $ ~long long v ;  $ ~while ( cin >> v ) {  $ ~~if ( v == 2 )  $ ~~~cout << v << endl ;  $ ~~else  $ ~~~cout << "1" << endl ;  $ ~}  $ ~return 0 ;  $ }
int main ( ) {  $ ~int x , t , a , b , c , d ;  $ ~bool e = false ;  $ ~int s = 0 ;  $ ~cin >> x >> t >> a >> b >> c >> d ;  $ ~if ( x == 0 )  $ ~~cout << "YES" << endl ;  $ ~else {  $ ~~for ( int i = 0 ; i < t ; i ++ ) {  $ ~~~s = ( a - ( c * i ) ) ;  $ ~~~if ( s == x ) {  $ ~~~~e = true ;  $ ~~~~break ;  $ ~~~}  $ ~~~for ( int k = 0 ; k < t ; k ++ ) {  $ ~~~~s = ( a - ( c * i ) ) + ( b - ( d * k ) ) ;  $ ~~~~if ( s == x ) {  $ ~~~~~e = true ;  $ ~~~~~break ;  $ ~~~~} else {  $ ~~~~~s = ( b - ( d * k ) ) ;  $ ~~~~~if ( s == x ) {  $ ~~~~~~e = true ;  $ ~~~~~~break ;  $ ~~~~~}  $ ~~~~}  $ ~~~}  $ ~~}  $ ~~if ( e == false )  $ ~~~cout << "NO" << endl ;  $ ~~else  $ ~~~cout << "YES" << endl ;  $ ~}  $ }
int main ( ) {  $ ~int m , n , s ;  $ ~cin >> m >> n ;  $ ~s = n / 2 * m ;  $ ~if ( n % 2 == 1 ) { s += m / 2 ; }  $ ~cout << s << endl ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~int N , qx , qy , kx , ky , dx , dy ;  $ ~cin >> N ;  $ ~cin >> qx >> qy ;  $ ~cin >> kx >> ky ;  $ ~cin >> dx >> dy ;  $ ~if ( qx > kx && qy > ky ) {  $ ~~if ( qx > dx && qy > dy ) {  $ ~~~cout << "YES" << endl ;  $ ~~} else {  $ ~~~cout << "NO" << endl ;  $ ~~}  $ ~} else if ( qx < kx && qy > ky ) {  $ ~~if ( qx < dx && qy > dy ) {  $ ~~~cout << "YES" << endl ;  $ ~~} else {  $ ~~~cout << "NO" << endl ;  $ ~~}  $ ~} else if ( qx < kx && qy < ky ) {  $ ~~if ( qx < dx && qy < dy ) {  $ ~~~cout << "YES" << endl ;  $ ~~} else {  $ ~~~cout << "NO" << endl ;  $ ~~}  $ ~} else {  $ ~~if ( qx > dx && qy < dy ) {  $ ~~~cout << "YES" << endl ;  $ ~~} else {  $ ~~~cout << "NO" << endl ;  $ ~~}  $ ~}  $ }
int main ( ) {  $ ~int n ;  $ ~cin >> n ;  $ ~int cnt = 1 ;  $ ~bool z = 1 ;  $ ~for ( int i = 1 ; i <= n ; i ++ ) {  $ ~~for ( int i = 1 ; i <= ( n - cnt ) / 2 ; i ++ ) cout << '*' ;  $ ~~for ( int i = 1 ; i <= cnt ; i ++ ) cout << "D" ;  $ ~~for ( int i = 1 ; i <= ( n - cnt ) / 2 ; i ++ ) cout << '*' ;  $ ~~if ( cnt == n ) z = 0 ;  $ ~~if ( z )  $ ~~~cnt += 2 ;  $ ~~else  $ ~~~cnt -= 2 ;  $ ~~cout << endl ;  $ ~}  $ }
int main ( ) {  $ ~int n , k ;  $ ~char s [ 111 ] ;  $ ~while ( cin >> n >> k ) {  $ ~~cin >> s ;  $ ~~int x , y ;  $ ~~for ( int i = 0 ; i < n ; i ++ ) {  $ ~~~if ( s [ i ] == 'G' ) { x = i ; }  $ ~~~if ( s [ i ] == 'T' ) { y = i ; }  $ ~~}  $ ~~int a = 1 ;  $ ~~int flag = 0 ;  $ ~~if ( x < y ) {  $ ~~~while ( 1 ) {  $ ~~~~if ( s [ x + k * a ] == 'T' ) {  $ ~~~~~flag = 1 ;  $ ~~~~~break ;  $ ~~~~}  $ ~~~~if ( s [ x + k * a ] == '#' ) { break ; }  $ ~~~~if ( x + k * a >= n ) break ;  $ ~~~~a ++ ;  $ ~~~}  $ ~~} else {  $ ~~~while ( 1 ) {  $ ~~~~if ( s [ x - k * a ] == 'T' ) {  $ ~~~~~flag = 1 ;  $ ~~~~~break ;  $ ~~~~}  $ ~~~~if ( s [ x - k * a ] == '#' ) { break ; }  $ ~~~~if ( x - k * a < 0 ) break ;  $ ~~~~a ++ ;  $ ~~~}  $ ~~}  $ ~~if ( flag == 1 )  $ ~~~cout << "YES" << endl ;  $ ~~else  $ ~~~cout << "NO" << endl ;  $ ~}  $ ~return 0 ;  $ }
int main ( ) {  $ ~string s ;  $ ~cin >> s ;  $ ~long long n = ( int ) s . length ( ) ;  $ ~long long x = 0 ;  $ ~long long xx = 0 ;  $ ~for ( long long i = 0 ; i < n ; i ++ ) {  $ ~~if ( s [ i ] == 'o' )  $ ~~~x ++ ;  $ ~~else if ( s [ i ] == '-' )  $ ~~~xx ++ ;  $ ~}  $ ~if ( x == 0 )  $ ~~cout << "YES"  $ ~~~<< "\n" ;  $ ~else if ( xx % x == 0 )  $ ~~cout << "YES"  $ ~~~<< "\n" ;  $ ~else  $ ~~cout << "NO"  $ ~~~<< "\n" ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~int n , k ;  $ ~cin >> n >> k ;  $ ~int ptr = 0 , cnt = 0 , a [ n ] , b [ k ] ;  $ ~for ( int i = 0 ; i < n ; i ++ ) cin >> a [ i ] ;  $ ~for ( int i = 0 ; i < k ; i ++ ) cin >> b [ i ] ;  $ ~for ( int i = 0 ; i < n ; i ++ ) {  $ ~~if ( ptr >= k )  $ ~~~break ;  $ ~~else {  $ ~~~if ( b [ ptr ] >= a [ i ] ) {  $ ~~~~ptr ++ ;  $ ~~~~cnt ++ ;  $ ~~~}  $ ~~}  $ ~}  $ ~cout << cnt << endl ;  $ }
int main ( ) {  $ ~int n , m , k , i ;  $ ~int a [ 100 ] ;  $ ~while ( cin >> n >> m >> k ) {  $ ~~for ( i = 0 ; i < n ; i ++ ) cin >> a [ i ] ;  $ ~~sort ( a , a + n ) ;  $ ~~for ( i = n ; k < m && i >= 1 ; i -- ) { k += a [ i - 1 ] - 1 ; }  $ ~~if ( k < m )  $ ~~~cout << - 1 << endl ;  $ ~~else  $ ~~~cout << n - i << endl ;  $ ~}  $ }
const int N = 2e5 + 5 ;  $ string s ;  $ queue < string > q ;  $ map < string , int > mp ;  $ void bfs ( string s ) {  $ ~mp [ s ] = true ;  $ ~q . push ( s ) ;  $ ~while ( ! q . empty ( ) ) {  $ ~~string u = q . front ( ) , v1 , v2 , v3 ;  $ ~~q . pop ( ) ;  $ ~~v1 = v2 = v3 = u ;  $ ~~v1 [ 0 ] = u [ 3 ] , v1 [ 1 ] = u [ 0 ] , v1 [ 2 ] = u [ 1 ] , v1 [ 3 ] = u [ 2 ] ;  $ ~~v2 [ 0 ] = u [ 4 ] , v2 [ 5 ] = u [ 0 ] , v2 [ 2 ] = u [ 5 ] , v2 [ 4 ] = u [ 2 ] ;  $ ~~v3 [ 5 ] = u [ 1 ] , v3 [ 3 ] = u [ 5 ] , v3 [ 4 ] = u [ 3 ] , v3 [ 1 ] = u [ 4 ] ;  $ ~~if ( ! mp [ v1 ] ) mp [ v1 ] = true , q . push ( v1 ) ;  $ ~~if ( ! mp [ v2 ] ) mp [ v2 ] = true , q . push ( v2 ) ;  $ ~~if ( ! mp [ v3 ] ) mp [ v3 ] = true , q . push ( v3 ) ;  $ ~}  $ }  $ int main ( ) {  $ ~cin >> s ;  $ ~int res = 0 ;  $ ~sort ( s . begin ( ) , s . end ( ) ) ;  $ ~do {  $ ~~if ( mp [ s ] ) continue ;  $ ~~res ++ ;  $ ~~bfs ( s ) ;  $ ~} while ( next_permutation ( s . begin ( ) , s . end ( ) ) ) ;  $ ~cout << res << '\n' ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~int k , r ;  $ ~while ( cin >> k >> r ) {  $ ~~int cnt = 1 , z = 0 ;  $ ~~z = k ;  $ ~~while ( 1 ) {  $ ~~~if ( z % 10 == r || z % 10 == 0 ) {  $ ~~~~break ;  $ ~~~} else {  $ ~~~~cnt ++ ;  $ ~~~~z = k * cnt ;  $ ~~~}  $ ~~}  $ ~~cout << cnt << endl ;  $ ~}  $ ~return 0 ;  $ }
int main ( ) {  $ ~long long n , c , t , sum = 0 ;  $ ~cin >> n ;  $ ~cin >> c ;  $ ~cin >> t ;  $ ~sum ++ ;  $ ~int a = t ;  $ ~for ( int i = 1 ; i < n ; i ++ ) {  $ ~~cin >> t ;  $ ~~if ( t - a <= c )  $ ~~~sum ++ ;  $ ~~else if ( t - a > c )  $ ~~~sum = 1 ;  $ ~~a = t ;  $ ~}  $ ~cout << sum << endl ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~double p1 , p2 , m1 , m2 ;  $ ~cin >> p1 >> p2 >> m1 >> m2 ;  $ ~int ans1 , ans2 ;  $ ~ans1 = max ( ( ( 3.0 * p1 ) / 10.0 ) , ( p1 - ( p1 / 250 ) * m1 ) ) ;  $ ~ans2 = max ( ( ( 3.0 * p2 ) / 10.0 ) , ( p2 - ( p2 * m2 ) / 250.0 ) ) ;  $ ~if ( ans1 == ans2 )  $ ~~cout << "Tie" << endl ;  $ ~else if ( ans1 > ans2 )  $ ~~cout << "Misha" << endl ;  $ ~else  $ ~~cout << "Vasya" << endl ;  $ }
int main ( ) {  $ ~int n , m ;  $ ~cin >> n >> m ;  $ ~int now = 0 ;  $ ~for ( int i = 0 ; i < n ; i ++ ) {  $ ~~int x ;  $ ~~cin >> x ;  $ ~~now += x ;  $ ~}  $ ~now = abs ( now ) ;  $ ~if ( now == 0 ) {  $ ~~cout << 0 << endl ;  $ ~} else if ( now <= m ) {  $ ~~cout << 1 << endl ;  $ ~} else {  $ ~~if ( now % m == 0 ) {  $ ~~~cout << now / m << endl ;  $ ~~} else {  $ ~~~cout << 1 + ( now / m ) << endl ;  $ ~~}  $ ~}  $ }
const int MX = 5000 + 10 ;  $ char s [ MX ] ;  $ int main ( ) {  $ ~cin >> s ;  $ ~int n = strlen ( s ) ;  $ ~int ans = 0 ;  $ ~for ( int i = 0 ; i < n ; ++ i ) {  $ ~~int a = 0 , b = 0 ;  $ ~~for ( int j = i ; j < n ; ++ j ) {  $ ~~~if ( s [ j ] == '(' )  $ ~~~~a ++ ;  $ ~~~else if ( s [ j ] == ')' )  $ ~~~~a -- ;  $ ~~~else  $ ~~~~b ++ ;  $ ~~~while ( b > 0 && b > a ) {  $ ~~~~b -- ;  $ ~~~~a ++ ;  $ ~~~}  $ ~~~if ( a < 0 ) break ;  $ ~~~if ( ( j - i + 1 ) % 2 == 0 && b >= a ) ans ++ ;  $ ~~}  $ ~}  $ ~cout << ans << endl ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~int x [ 2000 ] ;  $ ~int n ;  $ ~cin >> n ;  $ ~int i ;  $ ~for ( i = 0 ; i < n ; i ++ ) { cin >> x [ i ] ; }  $ ~int a , b , k ;  $ ~for ( i = 0 ; i < n - 1 ; i ++ ) {  $ ~~a = x [ i ] ;  $ ~~b = x [ i + 1 ] ;  $ ~~if ( a < b ) {  $ ~~~for ( k = 0 ; k < i ; k ++ ) {  $ ~~~~if ( ( a <= x [ k ] && b >= x [ k ] ) && ( a <= x [ k + 1 ] && b >= x [ k + 1 ] ) ) {  $ ~~~~} else {  $ ~~~~~if ( ( a >= x [ k ] || b <= x [ k ] ) && ( a >= x [ k + 1 ] || b <= x [ k + 1 ] ) ) {  $ ~~~~~} else {  $ ~~~~~~cout << "yes" << endl ;  $ ~~~~~~return 0 ;  $ ~~~~~}  $ ~~~~}  $ ~~~}  $ ~~} else {  $ ~~~for ( k = 0 ; k < i ; k ++ ) {  $ ~~~~if ( ( a >= x [ k ] && b <= x [ k ] ) && ( a >= x [ k + 1 ] && b <= x [ k + 1 ] ) ) {  $ ~~~~} else {  $ ~~~~~if ( ( a <= x [ k ] || b >= x [ k ] ) && ( a <= x [ k + 1 ] || b >= x [ k + 1 ] ) ) {  $ ~~~~~} else {  $ ~~~~~~cout << "yes" << endl ;  $ ~~~~~~return 0 ;  $ ~~~~~}  $ ~~~~}  $ ~~~}  $ ~~}  $ ~}  $ ~cout << "no" << endl ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~int n , p , q , sum = 0 ;  $ ~cin >> n ;  $ ~for ( int i = 0 ; i < n ; i ++ ) {  $ ~~cin >> p >> q ;  $ ~~if ( p <= q ) {  $ ~~~if ( q - p >= 2 ) sum ++ ;  $ ~~}  $ ~}  $ ~cout << sum << endl ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~int t , s , sum , r = 0 ;  $ ~cin >> t ;  $ ~char a [ t ] , b [ t ] ;  $ ~for ( int i = 0 ; i < t ; i ++ ) { cin >> a [ i ] ; }  $ ~for ( int i = 0 ; i < t ; i ++ ) { cin >> b [ i ] ; }  $ ~for ( int i = 0 ; i < t ; i ++ ) {  $ ~~s = abs ( a [ i ] - b [ i ] ) ;  $ ~~if ( a [ i ] > b [ i ] )  $ ~~~sum = ( b [ i ] + 10 ) - a [ i ] ;  $ ~~else  $ ~~~sum = ( a [ i ] + 10 ) - b [ i ] ;  $ ~~if ( s <= sum )  $ ~~~r = r + s ;  $ ~~else  $ ~~~r = r + sum ;  $ ~}  $ ~cout << r << endl ;  $ ~return 0 ;  $ }
const int P = 1000003 ;  $ long long superpow ( long long a , int b ) {  $ ~long long ans = 1 ;  $ ~while ( b ) {  $ ~~if ( b & 1 ) ans = ( ans * a ) % P ;  $ ~~b = b >> 1 ;  $ ~~a = ( a * a ) % P ;  $ ~}  $ ~return ans ;  $ }  $ int n ;  $ int main ( ) {  $ ~cin >> n ;  $ ~cout << ( n != 0 ? superpow ( 3 , n - 1 ) : 1 ) << endl ;  $ ~return 0 ;  $ }
char character ( int i , int j ) {  $ ~if ( i % 2 == 0 ) {  $ ~~if ( j % 2 == 0 )  $ ~~~return 'B' ;  $ ~~else  $ ~~~return 'W' ;  $ ~} else {  $ ~~if ( j % 2 == 0 )  $ ~~~return 'W' ;  $ ~~else  $ ~~~return 'B' ;  $ ~}  $ }  $ int main ( ) {  $ ~int n , m ;  $ ~cin >> n >> m ;  $ ~int i , j , k ;  $ ~string s [ n ] ;  $ ~for ( i = 0 ; i < n ; i ++ ) { cin >> s [ i ] ; }  $ ~char z ;  $ ~for ( i = 0 ; i < n ; i ++ ) {  $ ~~for ( j = 0 ; j < m ; j ++ ) {  $ ~~~z = character ( i , j ) ;  $ ~~~if ( s [ i ] [ j ] == '.' ) s [ i ] [ j ] = z ;  $ ~~}  $ ~}  $ ~for ( i = 0 ; i < n ; i ++ ) {  $ ~~cout << s [ i ] ;  $ ~~cout << endl ;  $ ~}  $ }
int n ;  $ int main ( ) {  $ ~cin >> n ;  $ ~cout << n / 2 + 1 << endl ;  $ ~return 0 ;  $ }
char a [ 55 ] [ 55 ] ;  $ int b [ 26 ] ;  $ int main ( ) {  $ ~int x , y , i , s = 0 , j ;  $ ~cin >> x >> y ;  $ ~for ( i = 0 ; i < x ; i ++ ) cin >> a [ i ] ;  $ ~for ( i = 0 ; i < x - 1 ; i ++ ) {  $ ~~for ( j = 0 ; j < y - 1 ; j ++ ) {  $ ~~~memset ( b , 0 , sizeof ( b ) ) ;  $ ~~~b [ a [ i ] [ j ] - 'a' ] ++ ;  $ ~~~b [ a [ i + 1 ] [ j ] - 'a' ] ++ ;  $ ~~~b [ a [ i ] [ j + 1 ] - 'a' ] ++ ;  $ ~~~b [ a [ i + 1 ] [ j + 1 ] - 'a' ] ++ ;  $ ~~~if ( b [ 'f' - 'a' ] == 1 && b [ 0 ] == 1 && b [ 'c' - 'a' ] == 1 && b [ 'e' - 'a' ] == 1 ) s ++ ;  $ ~~}  $ ~}  $ ~cout << s << endl ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~int t , a ;  $ ~cin >> t ;  $ ~while ( t -- ) {  $ ~~cin >> a ;  $ ~~if ( 360 % ( 180 - a ) == 0 ) {  $ ~~~cout << "YES" << endl ;  $ ~~} else {  $ ~~~cout << "NO" << endl ;  $ ~~}  $ ~}  $ ~return 0 ;  $ }
const int C = 1005 ;  $ int n , a ;  $ string s [ C ] ;  $ vector < int > v ;  $ int main ( ) {  $ ~cin >> n ;  $ ~for ( int i = 1 ; i <= n ; i ++ ) cin >> s [ i ] ;  $ ~for ( int i = 1 ; i <= n ; i ++ ) {  $ ~~a = 0 ;  $ ~~for ( int j = 0 ; j < s [ i ] . size ( ) ; j ++ ) {  $ ~~~int pom = s [ i ] [ j ] - 'a' ;  $ ~~~if ( ( a & ( 1 << pom ) ) == 0 ) a += ( 1 << pom ) ;  $ ~~}  $ ~~bool blep = false ;  $ ~~for ( int j = 0 ; j < v . size ( ) ; j ++ ) {  $ ~~~if ( v [ j ] == a ) blep = true ;  $ ~~}  $ ~~if ( ! blep ) v . push_back ( a ) ;  $ ~}  $ ~cout << v . size ( ) << endl ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~string n ;  $ ~cin >> n ;  $ ~int s = n . length ( ) ;  $ ~int p = ( s + 1 ) * 26 - s ;  $ ~cout << p << endl ;  $ }
int main ( ) {  $ ~int n , num ;  $ ~bool res = true ;  $ ~cin >> num ;  $ ~pair < int , int > match ;  $ ~match . first = 1 ;  $ ~match . second = 2 ;  $ ~for ( int i = 0 ; i < num ; i ++ ) {  $ ~~cin >> n ;  $ ~~if ( n != match . first && n != match . second ) { res = false ; }  $ ~~if ( match . first == 1 && match . second == 2 ) {  $ ~~~if ( n == match . first )  $ ~~~~match . second = 3 ;  $ ~~~else if ( n == match . second )  $ ~~~~match . first = 3 ;  $ ~~} else if ( match . first == 1 && match . second == 3 ) {  $ ~~~if ( n == match . first )  $ ~~~~match . second = 2 ;  $ ~~~else if ( n == match . second )  $ ~~~~match . first = 2 ;  $ ~~} else if ( match . first == 2 && match . second == 1 ) {  $ ~~~if ( n == match . first )  $ ~~~~match . second = 3 ;  $ ~~~else if ( n == match . second )  $ ~~~~match . first = 3 ;  $ ~~} else if ( match . first == 2 && match . second == 3 ) {  $ ~~~if ( n == match . first )  $ ~~~~match . second = 1 ;  $ ~~~else if ( n == match . second )  $ ~~~~match . first = 1 ;  $ ~~} else if ( match . first == 3 && match . second == 1 ) {  $ ~~~if ( n == match . first )  $ ~~~~match . second = 2 ;  $ ~~~else if ( n == match . second )  $ ~~~~match . first = 2 ;  $ ~~} else if ( match . first == 3 && match . second == 2 ) {  $ ~~~if ( n == match . first )  $ ~~~~match . second = 1 ;  $ ~~~else if ( n == match . second )  $ ~~~~match . first = 1 ;  $ ~~}  $ ~}  $ ~if ( res )  $ ~~cout << "YES" << endl ;  $ ~else  $ ~~cout << "NO" << endl ;  $ }
int gcd ( int a , int b ) {  $ ~if ( a == 0 )  $ ~~return b ;  $ ~else  $ ~~return gcd ( b % a , a ) ;  $ }  $ int main ( ) {  $ ~int a , b , st ;  $ ~while ( cin >> a >> b >> st ) {  $ ~~int x = 0 , st_taken ;  $ ~~while ( st != 0 ) {  $ ~~~st_taken = gcd ( a , st ) ;  $ ~~~st = st - st_taken ;  $ ~~~x ++ ;  $ ~~~swap ( a , b ) ;  $ ~~}  $ ~~if ( x % 2 == 1 )  $ ~~~cout << 0 << endl ;  $ ~~else  $ ~~~cout << 1 << endl ;  $ ~}  $ }
int main ( ) {  $ ~string s ;  $ ~cin >> s ;  $ ~int c = 1 , k = 0 ;  $ ~int i = 0 ;  $ ~int n = s . size ( ) , flag = 0 ;  $ ~while ( i < n ) {  $ ~~if ( s [ i ] == s [ i + 1 ] ) c ++ ;  $ ~~if ( s [ i ] != s [ i + 1 ] ) {  $ ~~~if ( c % 2 == 0 ) k ++ ;  $ ~~~c = 1 ;  $ ~~}  $ ~~i ++ ;  $ ~}  $ ~cout << k << endl ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~string s ;  $ ~cin >> s ;  $ ~for ( int i = 1 ; i <= s . size ( ) ; i ++ )  $ ~~if ( s [ i - 1 ] == 'r' ) cout << i << "\n" ;  $ ~for ( int i = s . size ( ) ; i >= 1 ; i -- )  $ ~~if ( s [ i - 1 ] == 'l' ) cout << i << "\n" ;  $ }
int n , c , minx = 1000 , maxn = 0 , ans ;  $ int main ( ) {  $ ~cin >> n >> c ;  $ ~maxn = minx = c ;  $ ~for ( int i = 1 ; i < n ; ++ i ) {  $ ~~cin >> c ;  $ ~~if ( c > maxn ) ++ ans , maxn = c ;  $ ~~if ( c < minx ) ++ ans , minx = c ;  $ ~}  $ ~cout << ans << endl ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~int n ;  $ ~cin >> n ;  $ ~int spect = 3 ;  $ ~int win = 0 ;  $ ~bool b = 1 ;  $ ~while ( n -- ) {  $ ~~cin >> win ;  $ ~~if ( win == spect ) {  $ ~~~b = false ;  $ ~~~cout << "NO" << endl ;  $ ~~~break ;  $ ~~}  $ ~~if ( spect + win == 4 ) {  $ ~~~spect = 2 ;  $ ~~} else if ( spect + win == 3 ) {  $ ~~~spect = 3 ;  $ ~~} else {  $ ~~~spect = 1 ;  $ ~~}  $ ~}  $ ~if ( b ) { cout << "YES" << endl ; }  $ ~return 0 ;  $ }
int a [ 102000 ] ;  $ int b [ 102000 ] ;  $ int dp [ 100 ] [ 100 ] ;  $ map < int , int > mymap ;  $ string s ;  $ int ans = 0 x3f3f3f3f ;  $ int n ;  $ int k ;  $ int vis [ 100 ] ;  $ void dfs ( int start , int num , int sum , char last ) {  $ ~if ( num > k ) return ;  $ ~if ( num == k ) {  $ ~~ans = min ( ans , sum ) ;  $ ~~return ;  $ ~}  $ ~for ( int i = start ; i <= n ; i ++ ) {  $ ~~if ( ! vis [ i ] && s [ i ] - last >= 2 ) {  $ ~~~vis [ i ] = 1 ;  $ ~~~dfs ( i + 1 , num + 1 , sum + s [ i ] - 'a' + 1 , s [ i ] ) ;  $ ~~~vis [ i ] = 0 ;  $ ~~}  $ ~}  $ }  $ int main ( ) {  $ ~cin >> n >> k ;  $ ~cin >> s ;  $ ~sort ( s . begin ( ) , s . end ( ) ) ;  $ ~s = '#' + s ;  $ ~dfs ( 1 , 0 , 0 , 0 ) ;  $ ~if ( ans == 0 x3f3f3f3f ) {  $ ~~cout << - 1 << endl ;  $ ~} else {  $ ~~cout << ans << endl ;  $ ~}  $ ~return 0 ;  $ }
int main ( ) {  $ ~long long k , a , b , v , ans = 0 , mn ;  $ ~cin >> k >> a >> b >> v ;  $ ~while ( true ) {  $ ~~ans ++ ;  $ ~~mn = min ( k , b + 1 ) ;  $ ~~b -= ( mn - 1 ) ;  $ ~~a -= ( mn * v ) ;  $ ~~if ( a <= 0 ) break ;  $ ~}  $ ~cout << ans << endl ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~int n ;  $ ~cin >> n ;  $ ~int ans = - 1000000000 ;  $ ~for ( int i = 0 ; i < n ; ++ i ) {  $ ~~int a ;  $ ~~cin >> a ;  $ ~~if ( a < 0 ) {  $ ~~~ans = max ( ans , a ) ;  $ ~~~continue ;  $ ~~}  $ ~~double g = sqrt ( a ) ;  $ ~~int c = ( int ) g * ( int ) g ;  $ ~~if ( c != a ) { ans = max ( ans , a ) ; }  $ ~}  $ ~cout << ans << endl ;  $ }
string s = "zzzzzzzzzzz" ;  $ int main ( ) {  $ ~string a , b ;  $ ~cin >> a >> b ;  $ ~for ( int i = 0 ; i < a . size ( ) ; i ++ )  $ ~~for ( int j = 0 ; j < b . size ( ) ; j ++ ) { s = min ( s , a . substr ( 0 , i + 1 ) + b . substr ( 0 , j + 1 ) ) ; }  $ ~cout << s << endl ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~long long int n ;  $ ~cin >> n ;  $ ~for ( int i = 0 ; i < n ; i ++ ) {  $ ~~long long int s , a , b , c ;  $ ~~cin >> s >> a >> b >> c ;  $ ~~int m = s / c ;  $ ~~int k = m / a ;  $ ~~cout << m + ( k * b ) << endl ;  $ ~}  $ }
int main ( ) {  $ ~int Q , l , r , d , x ;  $ ~cin >> Q ;  $ ~while ( Q -- ) {  $ ~~cin >> l >> r >> d ;  $ ~~if ( l / d >= 2 || ( l / d == 1 && l % d != 0 ) ) {  $ ~~~x = d ;  $ ~~} else {  $ ~~~x = d * floor ( r / d ) + d ;  $ ~~}  $ ~~cout << x << endl ;  $ ~}  $ ~return 0 ;  $ }
int main ( ) {  $ ~int A [ ] = { 4 , 7 , 47 , 74 , 447 , 474 , 477 , 744 , 747 , 774 , 777 } ;  $ ~int n ;  $ ~cin >> n ;  $ ~int d = 0 ;  $ ~for ( int i = 0 ; i < 11 ; i ++ ) {  $ ~~if ( n % A [ i ] == 0 ) {  $ ~~~d ++ ;  $ ~~~break ;  $ ~~}  $ ~}  $ ~if ( d == 0 )  $ ~~cout << "NO" << endl ;  $ ~else  $ ~~cout << "YES" << endl ;  $ }
int main ( ) {  $ ~int n , p ;  $ ~cin >> n >> p ;  $ ~string a ;  $ ~int b = 97 ;  $ ~for ( int i = 0 ; i < n ; i ++ ) { a += 97 + i % p ; }  $ ~cout << a << endl ;  $ }
int main ( ) {  $ ~int n , k ;  $ ~cin >> n >> k ;  $ ~string s ;  $ ~cin >> s ;  $ ~int a [ 55 ] ;  $ ~for ( int i = 0 ; i < n ; i ++ ) { a [ i ] = s [ i ] - 'a' + 1 ; }  $ ~sort ( a , a + n ) ;  $ ~int sum = a [ 0 ] ;  $ ~int t = a [ 0 ] ;  $ ~int count = 1 ;  $ ~for ( int i = 1 ; i < n && count < k ; i ++ ) {  $ ~~if ( a [ i ] <= t + 1 ) {  $ ~~~continue ;  $ ~~} else {  $ ~~~sum += a [ i ] ;  $ ~~~count ++ ;  $ ~~~t = a [ i ] ;  $ ~~}  $ ~}  $ ~if ( count != k )  $ ~~cout << "-1" << endl ;  $ ~else  $ ~~cout << sum << endl ;  $ }
int main ( ) {  $ ~int x1 , x2 , x3 ;  $ ~cin >> x1 >> x2 >> x3 ;  $ ~cout << max ( max ( x1 , x2 ) , x3 ) - min ( min ( x1 , x2 ) , x3 ) << endl ;  $ ~return 0 ;  $ }
map < int , int > m ;  $ int main ( ) {  $ ~int n ;  $ ~cin >> n ;  $ ~int ans = - 1 ;  $ ~for ( int i = 0 ; i < n ; i ++ ) {  $ ~~int t ;  $ ~~cin >> t ;  $ ~~m [ t ] ++ ;  $ ~~ans = max ( ans , m [ t ] ) ;  $ ~}  $ ~cout << ans << endl ;  $ }
int convert ( long long val ) {  $ ~int ret = 0 ;  $ ~for ( int i = 0 ; val > 0 ; i ++ ) {  $ ~~if ( ( val % 10 ) & 1 ) { ret = ret | ( 1 << i ) ; }  $ ~~val /= 10 ;  $ ~}  $ ~return ret ;  $ }  $ int main ( ) {  $ ~char type ;  $ ~int t ;  $ ~long long val ;  $ ~map < int , int > mp ;  $ ~cin >> t ;  $ ~while ( t -- ) {  $ ~~cin >> type >> val ;  $ ~~if ( type == '+' ) {  $ ~~~++ mp [ convert ( val ) ] ;  $ ~~} else if ( type == '-' ) {  $ ~~~-- mp [ convert ( val ) ] ;  $ ~~} else {  $ ~~~cout << mp [ convert ( val ) ] << '\n' ;  $ ~~}  $ ~}  $ ~return 0 ;  $ }
long long ans = 1 ;  $ int a , b ;  $ int main ( ) {  $ ~cin >> a >> b ;  $ ~for ( int i = 2 ; i <= min ( a , b ) ; i ++ ) ans *= i ;  $ ~cout << ans << endl ;  $ ~return 0 ;  $ }
int value [ 101 ] = { 0 } ;  $ int main ( ) {  $ ~int n , sum_positive = 0 , sum_negative = 0 ;  $ ~cin >> n ;  $ ~for ( int i = 0 ; i < n ; i ++ ) {  $ ~~cin >> value [ i ] ;  $ ~~if ( value [ i ] > 0 )  $ ~~~sum_positive += value [ i ] ;  $ ~~else  $ ~~~sum_negative += value [ i ] ;  $ ~}  $ ~cout << sum_positive - sum_negative << endl ;  $ }
int n , i , ans ;  $ bool a [ 105 ] ;  $ int main ( ) {  $ ~cin >> n ;  $ ~for ( i = 1 ; i <= n ; i ++ ) cin >> a [ i ] ;  $ ~for ( i = 1 ; i <= n ; i ++ )  $ ~~if ( a [ i ] == 1 || ( a [ i - 1 ] == 1 && a [ i ] == 0 && a [ i + 1 ] == 1 ) ) ans ++ ;  $ ~cout << ans << endl ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~string x ;  $ ~cin >> x ;  $ ~int l = 0 ;  $ ~int p = 0 ;  $ ~for ( int i = 0 ; i < x . size ( ) ; i ++ ) {  $ ~~if ( x [ i ] == 'o' )  $ ~~~p ++ ;  $ ~~else  $ ~~~l ++ ;  $ ~}  $ ~if ( p == 0 ) {  $ ~~cout << "YES" << endl ;  $ ~~return 0 ;  $ ~}  $ ~if ( l % p == 0 ) {  $ ~~cout << "YES" << endl ;  $ ~} else  $ ~~cout << "NO" << endl ;  $ ~return 0 ;  $ }
vector < int > maps [ 100000 ] ;  $ int a [ 100000 ] = { 0 } ;  $ const int inf = 1e9 ;  $ int main ( ) {  $ ~int n , m , i , ans = inf ;  $ ~cin >> n >> m ;  $ ~for ( i = 1 ; i <= n ; i ++ ) { cin >> a [ i ] ; }  $ ~for ( int e = 0 ; e < m ; e ++ ) {  $ ~~int x , y , z ;  $ ~~cin >> x >> y ;  $ ~~for ( i = 0 ; i < maps [ y ] . size ( ) ; i ++ ) {  $ ~~~z = maps [ y ] [ i ] ;  $ ~~~for ( int j = 0 ; j < maps [ z ] . size ( ) ; j ++ ) {  $ ~~~~if ( maps [ z ] [ j ] == x ) ans = min ( ans , a [ x ] + a [ y ] + a [ z ] ) ;  $ ~~~}  $ ~~}  $ ~~maps [ x ] . push_back ( y ) ;  $ ~~maps [ y ] . push_back ( x ) ;  $ ~}  $ ~if ( ans == inf )  $ ~~cout << "-1" << endl ;  $ ~else  $ ~~cout << ans << endl ;  $ ~return 0 ;  $ }
long long reverse ( int x ) {  $ ~long long ans = 0 ;  $ ~while ( x ) {  $ ~~ans *= 10 ;  $ ~~ans += x % 10 ;  $ ~~x /= 10 ;  $ ~}  $ ~return ans ;  $ }  $ int main ( ) {  $ ~int a , b ;  $ ~cin >> a >> b ;  $ ~cout << a + reverse ( b ) << endl ;  $ }
int main ( ) {  $ ~int n , vol = 0 , res = 0 ;  $ ~string s , s1 ;  $ ~cin >> n >> s ;  $ ~while ( s . size ( ) < n ) {  $ ~~cin >> s1 ;  $ ~~s = s + ' ' + s1 ;  $ ~}  $ ~for ( int i = 0 ; i <= n ; ++ i ) {  $ ~~if ( i == n || s [ i ] == ' ' ) {  $ ~~~if ( vol > res ) res = vol ;  $ ~~~vol = 0 ;  $ ~~} else if ( s [ i ] >= 'A' && s [ i ] <= 'Z' ) {  $ ~~~vol ++ ;  $ ~~}  $ ~}  $ ~cout << res << endl ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~long long n = 0 ;  $ ~cin >> n ;  $ ~long long x = n , y = 0 , count = 0 ;  $ ~if ( n < 40000001 ) {  $ ~~if ( n == 0 ) {  $ ~~~cout << 1 << endl ;  $ ~~} else {  $ ~~~while ( x > 0 ) {  $ ~~~~count ++ ;  $ ~~~~y ++ ;  $ ~~~~if ( x * x + y * y > n * n ) { x -- ; }  $ ~~~~if ( x * x + y * y > n * n ) { y -- ; }  $ ~~~}  $ ~~~cout << count * 4 << endl ;  $ ~~}  $ ~}  $ ~return 0 ;  $ }
const int maxn = 105 ;  $ int n ;  $ int sum = 0 ;  $ int a ;  $ int b ;  $ int c ;  $ int d ;  $ int cnt [ maxn ] [ maxn ] ;  $ int main ( ) {  $ ~cin >> n ;  $ ~memset ( cnt , 0 , sizeof ( cnt ) ) ;  $ ~while ( n -- ) {  $ ~~cin >> a >> b >> c >> d ;  $ ~~for ( int i = a ; i <= c ; i ++ ) {  $ ~~~for ( int j = b ; j <= d ; j ++ ) { cnt [ i ] [ j ] ++ ; }  $ ~~}  $ ~}  $ ~for ( int i = 1 ; i <= 100 ; i ++ ) {  $ ~~for ( int j = 1 ; j <= 100 ; j ++ ) { sum += cnt [ i ] [ j ] ; }  $ ~}  $ ~cout << sum << endl ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~char a [ 30 ] ;  $ ~cin >> a ;  $ ~int len = strlen ( a ) ;  $ ~cout << 26 * ( len + 1 ) - len << endl ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~int n ;  $ ~cin >> n ;  $ ~int ch = 0 , bi = 0 , bk = 0 ;  $ ~for ( int i = 0 ; i < n ; i ++ ) {  $ ~~int x ;  $ ~~cin >> x ;  $ ~~if ( i % 3 == 0 ) { ch += x ; }  $ ~~if ( i % 3 == 1 ) { bi += x ; }  $ ~~if ( i % 3 == 2 ) { bk += x ; }  $ ~}  $ ~if ( ch > bi && ch > bk ) {  $ ~~cout << "chest\n" ;  $ ~} else if ( bi > bk ) {  $ ~~cout << "biceps\n" ;  $ ~} else {  $ ~~cout << "back\n" ;  $ ~}  $ ~return 0 ;  $ }
int n , m , ans = 0 , k ;  $ int main ( ) {  $ ~cin >> m ;  $ ~vector < int > q ( m ) ;  $ ~for ( int i = 0 ; i < m ; ++ i ) cin >> q [ i ] ;  $ ~sort ( q . begin ( ) , q . end ( ) ) ;  $ ~k = q [ 0 ] ;  $ ~cin >> n ;  $ ~vector < int > a ( n ) , s ( n ) ;  $ ~for ( int i = 0 ; i < n ; ++ i ) cin >> a [ i ] ;  $ ~sort ( a . rbegin ( ) , a . rend ( ) ) ;  $ ~s [ 0 ] = a [ 0 ] ;  $ ~for ( int i = 1 ; i < n ; ++ i ) s [ i ] = s [ i - 1 ] + a [ i ] ;  $ ~int kk = k ;  $ ~for ( int i = 0 ; i < n ; ++ i ) {  $ ~~ans += a [ i ] ;  $ ~~kk -- ;  $ ~~if ( kk == 0 ) {  $ ~~~kk = k ;  $ ~~~i += 2 ;  $ ~~}  $ ~}  $ ~cout << ans << endl ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~int n , m , j = 0 , rs = 0 ;  $ ~cin >> n >> m ;  $ ~int c [ n ] , money [ m ] ;  $ ~for ( int i = 0 ; i < n ; i ++ ) { cin >> c [ i ] ; }  $ ~for ( int i = 0 ; i < m ; i ++ ) {  $ ~~cin >> money [ i ] ;  $ ~~for ( ; j < n ; ) {  $ ~~~if ( money [ i ] < c [ j ] ) {  $ ~~~~j ++ ;  $ ~~~} else {  $ ~~~~rs ++ ;  $ ~~~~j ++ ;  $ ~~~~break ;  $ ~~~}  $ ~~}  $ ~}  $ ~cout << rs << endl ;  $ ~return 0 ;  $ }
int n , s ;  $ int a [ 1003 ] , b [ 1003 ] , f [ 1003 ] ;  $ string solve ( ) {  $ ~if ( a [ 1 ] == 0 ) return "NO" ;  $ ~int last = 0 ;  $ ~for ( int i = ( int ) 1 ; i <= ( int ) n ; i ++ ) {  $ ~~if ( a [ i ] && b [ i ] ) last = i ;  $ ~}  $ ~if ( a [ s ] ) {  $ ~~return "YES" ;  $ ~} else if ( last && last >= s && b [ s ] ) {  $ ~~return "YES" ;  $ ~} else {  $ ~~return "NO" ;  $ ~}  $ }  $ int main ( ) {  $ ~cin >> n >> s ;  $ ~for ( int i = ( int ) 1 ; i <= ( int ) n ; i ++ ) cin >> a [ i ] ;  $ ~for ( int i = ( int ) 1 ; i <= ( int ) n ; i ++ ) cin >> b [ i ] ;  $ ~cout << solve ( ) << "\n" ;  $ ~return 0 ;  $ }
bool isprime ( int j ) {  $ ~for ( int i = 2 ; i < j ; i ++ ) {  $ ~~if ( ! ( j % i ) ) return 0 ;  $ ~}  $ ~return 1 ;  $ }  $ int main ( ) {  $ ~int i = 1 , n ;  $ ~cin >> n ;  $ ~while ( 1 ) {  $ ~~if ( ! isprime ( n * i + 1 ) ) {  $ ~~~cout << i << endl ;  $ ~~~return 0 ;  $ ~~}  $ ~~i ++ ;  $ ~}  $ ~return 0 ;  $ }
int x [ 10005 ] ;  $ int main ( ) {  $ ~int n , m , z , ans ;  $ ~while ( cin >> n >> m >> z ) {  $ ~~memset ( x , 0 , 10005 ) ;  $ ~~ans = 0 ;  $ ~~for ( int i = n ; i <= z ; i += n ) x [ i ] = 1 ;  $ ~~for ( int i = m ; i <= z ; i += m )  $ ~~~if ( x [ i ] == 1 ) ans ++ ;  $ ~~cout << ans << endl ;  $ ~}  $ ~return 0 ;  $ }
int main ( ) {  $ ~int i , n ;  $ ~int xx [ 101 ] ;  $ ~cin >> n ;  $ ~for ( i = 0 ; i < n ; i ++ ) { cin >> xx [ i ] ; }  $ ~sort ( xx , xx + n ) ;  $ ~swap ( xx [ 0 ] , xx [ n - 1 ] ) ;  $ ~cout << xx [ 0 ] ;  $ ~for ( i = 1 ; i < n ; i ++ ) { cout << " " << xx [ i ] ; }  $ ~cout << endl ;  $ ~return 0 ;  $ }
const int MOD = 1e9 + 7 ;  $ int main ( ) {  $ ~int N ;  $ ~cin >> N ;  $ ~int state [ 2 ] = { 0 , 0 } ;  $ ~for ( int i = 0 ; i < N ; i ++ ) { state [ i % 2 ] = ( state [ i % 2 ] + state [ ( i + 1 ) % 2 ] + 1 ) % MOD ; }  $ ~cout << ( state [ 0 ] + state [ 1 ] ) % MOD << endl ;  $ ~return 0 ;  $ }
long long a [ 100000 ] ;  $ int main ( ) {  $ ~int n ;  $ ~cin >> n ;  $ ~for ( int i = 0 ; i < 2 * n ; i ++ ) { cin >> a [ i ] ; }  $ ~sort ( a , a + n * 2 ) ;  $ ~cout << ( a [ n - 1 ] == a [ n ] ? "NO" : "YES" ) << endl ;  $ }
unsigned long long n , a , b , c ;  $ int main ( ) {  $ ~cin >> n >> a >> b >> c ;  $ ~if ( a <= b - c ) {  $ ~~cout << n / a << endl ;  $ ~} else {  $ ~~unsigned long long ans = 0 ;  $ ~~if ( n > c ) ans = ( n - c ) / ( b - c ) ;  $ ~~ans += ( n - ans * ( b - c ) ) / a ;  $ ~~cout << ans << endl ;  $ ~}  $ ~return 0 ;  $ }
int main ( ) {  $ ~int n ;  $ ~cin >> n ;  $ ~while ( n ) {  $ ~~int d ;  $ ~~cin >> d ;  $ ~~if ( 360 % ( 180 - d ) == 0 )  $ ~~~cout << "YES" << endl ;  $ ~~else  $ ~~~cout << "NO" << endl ;  $ ~~n -- ;  $ ~}  $ ~return 0 ;  $ }
int main ( ) {  $ ~int n ;  $ ~cin >> n ;  $ ~int l [ n ] ;  $ ~int x , a1 = 0 , a2 = 101 , b1 = 0 , b2 = 0 , ans = 0 ;  $ ~for ( int i = 0 ; i < n ; i ++ ) {  $ ~~int x ;  $ ~~cin >> x ;  $ ~~l [ i ] = x ;  $ ~~if ( a2 >= x ) {  $ ~~~a2 = x ;  $ ~~~b2 = i ;  $ ~~}  $ ~~if ( a1 < x ) {  $ ~~~a1 = x ;  $ ~~~b1 = i ;  $ ~~}  $ ~}  $ ~if ( b1 < b2 ) {  $ ~~ans = b1 + n - 1 - b2 ;  $ ~~cout << ans << endl ;  $ ~} else if ( b1 > b2 ) {  $ ~~ans = b1 + n - 2 - b2 ;  $ ~~cout << ans << endl ;  $ ~}  $ ~return 0 ;  $ }
int main ( ) {  $ ~int n ;  $ ~cin >> n ;  $ ~int counter [ n + 1 ] ;  $ ~for ( int i = 0 ; i <= n ; i ++ ) { counter [ i ] = 0 ; }  $ ~int xs [ 2 * n ] ;  $ ~int count = 0 ;  $ ~int maxcount = 0 ;  $ ~for ( int i = 0 ; i < 2 * n ; i ++ ) {  $ ~~cin >> xs [ i ] ;  $ ~~if ( counter [ xs [ i ] ] ++ == 0 )  $ ~~~count ++ ;  $ ~~else  $ ~~~count -- ;  $ ~~maxcount = max ( count , maxcount ) ;  $ ~}  $ ~cout << maxcount << endl ;  $ ~return 0 ;  $ }
long long int n ;  $ int main ( ) {  $ ~cin >> n ;  $ ~if ( n % 2 == 0 ) {  $ ~~cout << n / 2 << endl ;  $ ~} else {  $ ~~cout << n / 2 - n << endl ;  $ ~}  $ }
int gcd ( int a , int b ) {  $ ~if ( b == 0 )  $ ~~return a ;  $ ~else  $ ~~return gcd ( b , a % b ) ;  $ }  $ int main ( ) {  $ ~string s , s1 , s2 ;  $ ~cin >> s1 >> s2 ;  $ ~cout << s1 << " " << s2 << "\n" ;  $ ~int n ;  $ ~cin >> n ;  $ ~while ( n -- ) {  $ ~~cin >> s ;  $ ~~if ( s == s1 )  $ ~~~cin >> s1 ;  $ ~~else  $ ~~~cin >> s2 ;  $ ~~cout << s1 << " " << s2 << "\n" ;  $ ~}  $ }
int main ( ) {  $ ~int x , cup = 0 , medal = 0 ;  $ ~int i = 3 ;  $ ~while ( i -- ) {  $ ~~cin >> x ;  $ ~~cup += x ;  $ ~}  $ ~i = 3 ;  $ ~while ( i -- ) {  $ ~~cin >> x ;  $ ~~medal += x ;  $ ~}  $ ~int total ;  $ ~cin >> total ;  $ ~int cupboard , medalboard ;  $ ~if ( cup % 5 == 0 )  $ ~~cupboard = cup / 5 ;  $ ~else  $ ~~cupboard = cup / 5 + 1 ;  $ ~if ( medal % 10 == 0 )  $ ~~medalboard = medal / 10 ;  $ ~else  $ ~~medalboard = medal / 10 + 1 ;  $ ~if ( cupboard + medalboard <= total )  $ ~~cout << "YES" << endl ;  $ ~else  $ ~~cout << "NO" << endl ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~int n ;  $ ~cin >> n ;  $ ~int arr [ n ] ;  $ ~int count = 0 ;  $ ~for ( int i = 0 ; i < n ; i ++ ) {  $ ~~cin >> arr [ i ] ;  $ ~~if ( arr [ i ] == 1 ) count ++ ;  $ ~}  $ ~cout << count << endl ;  $ ~for ( int i = 0 ; i < n ; i ++ ) {  $ ~~if ( arr [ i ] == 1 ) {  $ ~~~if ( i > 0 ) cout << arr [ i - 1 ] << " " ;  $ ~~}  $ ~}  $ ~cout << arr [ n - 1 ] << endl ;  $ }
int main ( ) {  $ ~string ch ;  $ ~cin >> ch ;  $ ~if ( ch [ 0 ] >= 'a' && ch [ 0 ] <= 'z' ) { ch [ 0 ] = char ( ( ( int ) ch [ 0 ] ) - 32 ) ; }  $ ~cout << ch << endl ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~int n , x , c ( 0 ) ;  $ ~cin >> n >> x ;  $ ~for ( int i = 1 ; i <= n ; i ++ )  $ ~~if ( x % i == 0 and x / i <= n ) c ++ ;  $ ~cout << c << endl ;  $ ~return 0 ;  $ }
const int maxn = 5001 ;  $ int main ( ) {  $ ~int n ;  $ ~cin >> n ;  $ ~cout << n % 2 << endl ;  $ ~return 0 ;  $ }
int a [ 1005 ] ;  $ int main ( ) {  $ ~int n , i ;  $ ~cin >> n ;  $ ~for ( i = 0 ; i < n ; i ++ ) cin >> a [ i ] ;  $ ~sort ( a , a + n ) ;  $ ~if ( n % 2 )  $ ~~cout << a [ n / 2 ] << endl ;  $ ~else  $ ~~cout << a [ n / 2 - 1 ] << endl ;  $ ~return 0 ;  $ }
int arr [ 50 ] [ 50 ] , n ;  $ int main ( ) {  $ ~cin >> n ;  $ ~for ( int i = 0 ; i < n ; i ++ )  $ ~~for ( int j = 0 ; j < n ; j ++ ) cin >> arr [ i ] [ j ] ;  $ ~for ( int i = 0 ; i < n ; i ++ )  $ ~~for ( int j = 0 ; j < n ; j ++ ) {  $ ~~~bool b = false ;  $ ~~~if ( arr [ i ] [ j ] == 1 ) continue ;  $ ~~~for ( int x = 0 ; x < n ; x ++ )  $ ~~~~for ( int y = 0 ; y < n ; y ++ )  $ ~~~~~if ( arr [ i ] [ j ] == arr [ i ] [ x ] + arr [ y ] [ j ] ) b = true ;  $ ~~~if ( ! b ) {  $ ~~~~cout << "No" << endl ;  $ ~~~~return 0 ;  $ ~~~}  $ ~~}  $ ~cout << "Yes" << endl ;  $ }
int main ( ) {  $ ~int t ;  $ ~cin >> t ;  $ ~while ( t -- ) {  $ ~~int n , rem ;  $ ~~cin >> n ;  $ ~~n = 180 - n ;  $ ~~if ( n == 0 )  $ ~~~cout << "NO\n" ;  $ ~~else {  $ ~~~rem = 360 % n ;  $ ~~~if ( rem == 0 )  $ ~~~~cout << "YES\n" ;  $ ~~~else  $ ~~~~cout << "NO\n" ;  $ ~~}  $ ~}  $ }
int main ( ) {  $ ~int n ;  $ ~cin >> n ;  $ ~int arr [ n ] ;  $ ~for ( int i = 0 ; i < n ; i ++ ) cin >> arr [ i ] ;  $ ~long long p = arr [ 0 ] , c = 0 , a = 0 ;  $ ~for ( int i = 0 ; i < n ; i ++ ) {  $ ~~if ( arr [ i ] == p )  $ ~~~c ++ ;  $ ~~else {  $ ~~~p = arr [ i ] ;  $ ~~~a += ( c * ( c + 1 ) ) / 2 - c ;  $ ~~~c = 1 ;  $ ~~}  $ ~~if ( i == n - 1 ) a += ( c * ( c + 1 ) ) / 2 - c ;  $ ~}  $ ~cout << a + n << '\n' ;  $ ~return 0 ;  $ }
const int INF = 0 x3f3f3f3f ;  $ long long a [ 105 ] [ 105 ] ;  $ int main ( ) {  $ ~long long i , j , k = 1 , l , co = 0 ;  $ ~long long n , m , t , d , x1 , y1 , x2 , y2 , w ;  $ ~cin >> n ;  $ ~for ( i = 0 ; i < n ; i ++ ) {  $ ~~cin >> x1 >> y1 >> x2 >> y2 ;  $ ~~for ( l = y1 ; l <= y2 ; l ++ )  $ ~~~for ( j = x1 ; j <= x2 ; j ++ ) a [ l ] [ j ] ++ ;  $ ~}  $ ~for ( i = 1 ; i <= 100 ; i ++ )  $ ~~for ( j = 1 ; j <= 100 ; j ++ ) co += a [ i ] [ j ] ;  $ ~cout << co << endl ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~long long inicio , fin , num , aux , max ;  $ ~cin >> inicio >> fin ;  $ ~aux = 1 ;  $ ~while ( aux <= inicio ) { aux = aux * 10 ; }  $ ~max = inicio * ( aux - inicio - 1 ) ;  $ ~aux = 1 ;  $ ~while ( aux <= fin ) { aux = aux * 10 ; }  $ ~if ( max < fin * ( aux - fin - 1 ) ) { max = fin * ( aux - fin - 1 ) ; }  $ ~num = 4 ;  $ ~aux = 9 ;  $ ~while ( num <= fin ) {  $ ~~if ( inicio <= num && max < num * ( aux - num ) ) { max = num * ( aux - num ) ; }  $ ~~num = num * 10 + 9 ;  $ ~~aux = aux * 10 + 9 ;  $ ~}  $ ~cout << max << endl ;  $ ~return 0 ;  $ }
const int N = 333333 ;  $ long long a [ 5 ] , len , s [ N ] , res , t , e ;  $ int main ( ) {  $ ~for ( int i = 0 ; i < 3 ; i ++ ) cin >> a [ i ] ;  $ ~cin >> len ;  $ ~s [ 0 ] = 1 ;  $ ~for ( int i = 1 ; i <= len ; i ++ ) { s [ i ] = s [ i - 1 ] + i + 1 ; }  $ ~res = 0 ;  $ ~for ( int i = 0 ; i <= len ; i ++ ) { res = res + s [ i ] ; }  $ ~t = 0 ;  $ ~for ( int i = 0 , j , k ; i < 3 ; i ++ ) {  $ ~~j = ( i + 1 ) % 3 ;  $ ~~k = ( i + 2 ) % 3 ;  $ ~~for ( int x = 0 ; x <= len ; x ++ ) {  $ ~~~e = min ( len - x , a [ i ] + x - a [ j ] - a [ k ] ) ;  $ ~~~if ( e < 0 ) continue ;  $ ~~~t = t + s [ e ] ;  $ ~~}  $ ~}  $ ~res = res - t ;  $ ~cout << res << "\n" ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~int n , m , i = 1 ;  $ ~cin >> n >> m ;  $ ~do {  $ ~~m -= i ;  $ ~~i ++ ;  $ ~~if ( i > n ) i = 1 ;  $ ~} while ( m >= i ) ;  $ ~cout << m << endl ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~int a , b , c = 0 ;  $ ~cin >> a >> b ;  $ ~while ( b ) {  $ ~~int d = b % 10 ;  $ ~~c = c * 10 + d ;  $ ~~b /= 10 ;  $ ~}  $ ~cout << a + c << endl ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~int fri , sec ;  $ ~int s , v1 , v2 , t1 , t2 ;  $ ~while ( cin >> s >> v1 >> v2 >> t1 >> t2 ) {  $ ~~fri = s * v1 + 2 * t1 ;  $ ~~sec = s * v2 + 2 * t2 ;  $ ~~if ( fri < sec )  $ ~~~cout << "First" << endl ;  $ ~~else if ( fri > sec )  $ ~~~cout << "Second" << endl ;  $ ~~else  $ ~~~cout << "Friendship" << endl ;  $ ~}  $ ~return 0 ;  $ }
int judge ( int i ) {  $ ~int ans = 0 ;  $ ~while ( i != 0 ) {  $ ~~ans += i % 10 ;  $ ~~i /= 10 ;  $ ~}  $ ~return ans ;  $ }  $ int num [ 100000 ] ;  $ int main ( ) {  $ ~int n ;  $ ~cin >> n ;  $ ~int cont = 0 ;  $ ~for ( int i = max ( 1 , n - 100 ) ; i <= n ; i ++ ) {  $ ~~int ans = 0 ;  $ ~~ans = i + judge ( i ) ;  $ ~~if ( ans == n ) { num [ cont ++ ] = i ; }  $ ~}  $ ~if ( cont == 0 ) {  $ ~~cout << 0 << endl ;  $ ~} else {  $ ~~cout << cont << endl ;  $ ~~for ( int i = 0 ; i < cont ; i ++ ) { cout << num [ i ] << endl ; }  $ ~}  $ }
int main ( ) {  $ ~int n ;  $ ~cin >> n ;  $ ~int a [ n ] ;  $ ~for ( int i = 0 ; i < n ; i ++ ) { cin >> a [ i ] ; }  $ ~sort ( a , a + n ) ;  $ ~if ( n % 2 == 0 )  $ ~~cout << a [ n / 2 - 1 ] << endl ;  $ ~else  $ ~~cout << a [ n / 2 ] << endl ;  $ }
int main ( ) {  $ ~int t ;  $ ~cin >> t ;  $ ~for ( int j = 0 ; j < t ; j ++ ) {  $ ~~int h = 0 ;  $ ~~int n ;  $ ~~cin >> n ;  $ ~~string c = "abcdefghijklmnopqrstuvwxyz" ;  $ ~~string s ;  $ ~~cin >> s ;  $ ~~for ( int i = 0 ; i < s . length ( ) / 2 ; i ++ ) {  $ ~~~int g = 0 ;  $ ~~~int i1 , i2 ;  $ ~~~for ( int k = 0 ; k < 26 ; k ++ ) {  $ ~~~~if ( s [ i ] == c [ k ] ) {  $ ~~~~~i1 = k ;  $ ~~~~~break ;  $ ~~~~}  $ ~~~}  $ ~~~for ( int k = 0 ; k < 26 ; k ++ ) {  $ ~~~~if ( s [ s . length ( ) - 1 - i ] == c [ k ] ) {  $ ~~~~~i2 = k ;  $ ~~~~~break ;  $ ~~~~}  $ ~~~}  $ ~~~if ( c [ i1 - 1 ] == c [ i2 - 1 ] && i1 > 0 && i2 > 0 ) { g ++ ; }  $ ~~~if ( c [ i1 + 1 ] == c [ i2 - 1 ] && i2 > 0 ) { g ++ ; }  $ ~~~if ( c [ i1 - 1 ] == c [ i2 + 1 ] && i1 > 0 ) { g ++ ; }  $ ~~~if ( c [ i1 + 1 ] == c [ i2 + 1 ] ) { g ++ ; }  $ ~~~if ( g == 0 ) {  $ ~~~~cout << "NO" << endl ;  $ ~~~~h ++ ;  $ ~~~~break ;  $ ~~~}  $ ~~}  $ ~~if ( h == 0 ) { cout << "YES" << endl ; }  $ ~}  $ ~return 0 ;  $ }
int main ( ) {  $ ~int a [ 101 ] ;  $ ~int n ;  $ ~while ( cin >> n ) {  $ ~~int i ;  $ ~~for ( int i = 0 ; i < n ; i ++ ) cin >> a [ i ] ;  $ ~~sort ( a , a + n ) ;  $ ~~cout << a [ n - 1 ] << ' ' ;  $ ~~for ( i = 1 ; i < n - 1 ; i ++ ) { cout << a [ i ] << ' ' ; }  $ ~~cout << a [ 0 ] << endl ;  $ ~}  $ ~return 0 ;  $ }
int main ( ) {  $ ~int a , b ;  $ ~cin >> a >> b ;  $ ~if ( abs ( a - b ) <= 1 && ( a != 0 || b != 0 ) )  $ ~~cout << "YES" << endl ;  $ ~else  $ ~~cout << "NO" << endl ;  $ ~return 0 ;  $ }
int fa [ 202002 ] ;  $ int sum [ 202002 ] ;  $ int c [ 202002 ] ;  $ int max ( int a , int b ) {  $ ~if ( a > b )  $ ~~return a ;  $ ~else  $ ~~return b ;  $ }  $ int findfa ( int x ) {  $ ~if ( fa [ x ] == x )  $ ~~return x ;  $ ~else  $ ~~return findfa ( fa [ x ] ) ;  $ }  $ void U ( int x , int y ) {  $ ~int rx = findfa ( x ) ;  $ ~int ry = findfa ( y ) ;  $ ~if ( rx != ry ) {  $ ~~fa [ rx ] = ry ;  $ ~~sum [ ry ] += sum [ rx ] ;  $ ~}  $ }  $ bool vis [ 202002 ] ;  $ vector < int > vec ;  $ int main ( ) {  $ ~int n , m , k ;  $ ~cin >> n >> m >> k ;  $ ~vec . clear ( ) ;  $ ~for ( int i = 0 ; i <= n ; i ++ ) {  $ ~~fa [ i ] = i ;  $ ~~sum [ i ] = 1 ;  $ ~}  $ ~for ( int i = 0 ; i < k ; i ++ ) cin >> c [ i ] ;  $ ~int x , y ;  $ ~for ( int i = 0 ; i < m ; i ++ ) {  $ ~~cin >> x >> y ;  $ ~~U ( x , y ) ;  $ ~}  $ ~memset ( vis , 0 , sizeof ( vis ) ) ;  $ ~for ( int i = 0 ; i < k ; i ++ ) vis [ findfa ( c [ i ] ) ] = 1 ;  $ ~int MAX = - 1 ;  $ ~long long ans = 0 ;  $ ~for ( int i = 1 ; i <= n ; i ++ ) {  $ ~~if ( fa [ i ] == i ) {  $ ~~~if ( vis [ i ] == 1 )  $ ~~~~MAX = max ( MAX , sum [ i ] ) ;  $ ~~~else  $ ~~~~vec . push_back ( sum [ i ] ) ;  $ ~~~ans += sum [ i ] * ( sum [ i ] - 1 ) / 2 ;  $ ~~}  $ ~}  $ ~int len = vec . size ( ) ;  $ ~for ( int i = 0 ; i < len ; i ++ ) {  $ ~~for ( int j = i + 1 ; j < len ; j ++ ) { ans += vec [ i ] * vec [ j ] ; }  $ ~~ans += vec [ i ] * MAX ;  $ ~}  $ ~ans = ans - m ;  $ ~if ( ans > 0 )  $ ~~cout << ans << endl ;  $ ~else  $ ~~cout << "0" << endl ;  $ ~return 0 ;  $ }
bool esVocal_o_n ( char i ) {  $ ~if ( i == 'a' || i == 'e' || i == 'i' || i == 'o' || i == 'u' || i == 'n' ) {  $ ~~return true ;  $ ~} else {  $ ~~return false ;  $ ~}  $ }  $ int main ( ) {  $ ~string s ;  $ ~getline ( cin , s ) ;  $ ~long long n = s . size ( ) ;  $ ~bool cumple = true ;  $ ~for ( long long i = 0 ; i < n ; i ++ ) {  $ ~~if ( ! esVocal_o_n ( s [ i ] ) ) {  $ ~~~if ( ! esVocal_o_n ( s [ i + 1 ] ) && i + 1 < n ) {  $ ~~~~cumple = false ;  $ ~~~~break ;  $ ~~~}  $ ~~~if ( s [ i + 1 ] == 'n' ) {  $ ~~~~cumple = false ;  $ ~~~~break ;  $ ~~~}  $ ~~}  $ ~}  $ ~if ( ! esVocal_o_n ( s [ n - 1 ] ) ) { cumple = false ; }  $ ~if ( cumple ) {  $ ~~cout << "YES" << endl ;  $ ~} else {  $ ~~cout << "NO" << endl ;  $ ~}  $ }
const int inf = 0 x3f3f3f3f ;  $ int T , n , x , y , d , ans ;  $ int main ( ) {  $ ~cin >> T ;  $ ~while ( T -- ) {  $ ~~cin >> n >> x >> y >> d ;  $ ~~ans = inf ;  $ ~~if ( abs ( y - x ) % d == 0 )  $ ~~~ans = abs ( y - x ) / d ;  $ ~~else {  $ ~~~if ( ( y - 1 ) % d == 0 ) ans = min ( ans , ( x - 1 ) / d + 1 + ( y - 1 ) / d ) ;  $ ~~~if ( ( n - y ) % d == 0 ) ans = min ( ans , ( n - x ) / d + 1 + ( n - y ) / d ) ;  $ ~~}  $ ~~if ( ans == inf ) ans = - 1 ;  $ ~~cout << ans << endl ;  $ ~}  $ ~return 0 ;  $ }
long long mm [ 100100 ] ;  $ long long nn [ 100100 ] ;  $ int main ( ) {  $ ~long long n , m ;  $ ~cin >> m ;  $ ~for ( int i = 0 ; i < m ; i ++ ) cin >> mm [ i ] ;  $ ~sort ( mm , mm + m ) ;  $ ~cin >> n ;  $ ~long long tot = 0 ;  $ ~for ( int i = 0 ; i < n ; i ++ ) {  $ ~~cin >> nn [ i ] ;  $ ~~tot += nn [ i ] ;  $ ~}  $ ~sort ( nn , nn + n ) ;  $ ~int j = n - 1 ;  $ ~int t = mm [ 0 ] ;  $ ~if ( t >= n ) {  $ ~~cout << tot << endl ;  $ ~~return 0 ;  $ ~}  $ ~long long ww = 0 ;  $ ~while ( j >= 0 ) {  $ ~~for ( int i = 0 ; i < t ; i ++ ) {  $ ~~~if ( j < 0 ) break ;  $ ~~~ww += nn [ j ] ;  $ ~~~j -- ;  $ ~~}  $ ~~j -= 2 ;  $ ~}  $ ~cout << ww << endl ;  $ }
int main ( ) {  $ ~int n , x , y , z , l ;  $ ~cin >> n ;  $ ~int arr [ n ] ;  $ ~cin >> x ;  $ ~for ( int i = 0 ; i < x ; i ++ ) {  $ ~~cin >> z ;  $ ~~arr [ z ] = 1 ;  $ ~}  $ ~cin >> y ;  $ ~for ( int i = 0 ; i < y ; i ++ ) {  $ ~~cin >> l ;  $ ~~arr [ l ] = 1 ;  $ ~}  $ ~for ( int i = 1 ; i <= n ; i ++ )  $ ~~if ( arr [ i ] != 1 ) {  $ ~~~cout << "Oh, my keyboard!" << endl ;  $ ~~~return 0 ;  $ ~~}  $ ~cout << "I become the guy." << endl ;  $ ~return 0 ;  $ }
string a ;  $ int jsq , ok ;  $ int main ( ) {  $ ~cin >> a ;  $ ~for ( int i = 0 ; i < a . size ( ) ; i ++ ) {  $ ~~if ( a [ i ] == '1' && i < a . size ( ) - 6 ) { ok = 1 ; }  $ ~~if ( ok && a [ i ] == '0' ) jsq ++ ;  $ ~}  $ ~if ( jsq >= 6 )  $ ~~cout << "yes" << endl ;  $ ~else  $ ~~cout << "no" << endl ;  $ ~return 0 ;  $ }
char a [ 1005 ] ;  $ int judge ( int c , int n ) {  $ ~int flag = n - 1 ;  $ ~for ( int i = c ; i < n ; i ++ ) {  $ ~~if ( a [ i ] != a [ flag - i + c ] ) { return 0 ; }  $ ~}  $ ~return 1 ;  $ }  $ int main ( ) {  $ ~while ( cin >> a ) {  $ ~~int n ;  $ ~~cin >> n ;  $ ~~int s = strlen ( a ) ;  $ ~~if ( n > s ) {  $ ~~~cout << "NO" << endl ;  $ ~~~continue ;  $ ~~}  $ ~~if ( s % n != 0 ) {  $ ~~~cout << "NO" << endl ;  $ ~~~continue ;  $ ~~}  $ ~~int pl = s / n ;  $ ~~int ans = 0 ;  $ ~~int h = 0 ;  $ ~~for ( int i = 0 ; i < s ; ) {  $ ~~~h += pl ;  $ ~~~int x = judge ( i , h ) ;  $ ~~~if ( ! x ) {  $ ~~~~ans = 1 ;  $ ~~~~break ;  $ ~~~}  $ ~~~i = h ;  $ ~~}  $ ~~if ( ans ) {  $ ~~~cout << "NO" << endl ;  $ ~~} else {  $ ~~~cout << "YES" << endl ;  $ ~~}  $ ~}  $ ~return 0 ;  $ }
long long n , k , res ;  $ int main ( ) {  $ ~cin >> n >> k ;  $ ~for ( int i = 1 ; i <= n ; i ++ ) {  $ ~~long long a ;  $ ~~cin >> a ;  $ ~~if ( k % a == 0 && a > res ) res = a ;  $ ~}  $ ~cout << k / res << endl ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~int n , a , b , c , maxi = 0 ;  $ ~cin >> n >> a >> b >> c ;  $ ~for ( int x = 0 ; a * x <= n ; ++ x ) {  $ ~~for ( int y = 0 ; ( ( y * b ) + ( a * x ) ) <= n ; ++ y ) {  $ ~~~int z = ( n - a * x - b * y ) / c ;  $ ~~~if ( a * x + b * y + c * z == n ) {  $ ~~~~if ( x + y + z > maxi ) maxi = x + y + z ;  $ ~~~}  $ ~~}  $ ~}  $ ~cout << maxi << endl ;  $ }
bool ab = 0 ;  $ int main ( ) {  $ ~int n , s , i , z , x , c , v , q , w , j ;  $ ~cin >> n ;  $ ~cin >> z >> x ;  $ ~cin >> c >> v ;  $ ~cin >> q >> w ;  $ ~if ( ( q > z && c > z ) && ( w > x && v > x ) ) ab = 1 ;  $ ~if ( ( q > z && c > z ) && ( w < x && v < x ) ) ab = 1 ;  $ ~if ( ( q < z && c < z ) && ( w > x && v > x ) ) ab = 1 ;  $ ~if ( ( q < z && c < z ) && ( w < x && v < x ) ) ab = 1 ;  $ ~if ( ab == 1 )  $ ~~cout << "YES" << endl ;  $ ~else  $ ~~cout << "NO" << endl ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~long long n ;  $ ~cin >> n ;  $ ~for ( long long i = 2 ; i < n + 2 ; i ++ ) {  $ ~~long long factor = i * i * ( i - 1 ) ;  $ ~~factor -= i ;  $ ~~if ( i > 2 ) factor += 2 ;  $ ~~cout << factor << '\n' ;  $ ~}  $ }
int main ( ) {  $ ~long long n , cnt = 0 ;  $ ~cin >> n ;  $ ~while ( n && 1 ) {  $ ~~if ( n % 2 ) cnt ++ ;  $ ~~n >> = 1 ;  $ ~}  $ ~cout << cnt << endl ;  $ }
char hur [ 200005 ] ;  $ int arr [ 200005 ] ;  $ int main ( ) {  $ ~int n ;  $ ~cin >> n ;  $ ~for ( int i = 0 ; i < n ; i ++ ) { cin >> hur [ i ] ; }  $ ~for ( int i = 0 ; i < n ; i ++ ) { cin >> arr [ i ] ; }  $ ~int ans = INT_MAX ;  $ ~for ( int i = 0 ; i < n - 1 ; i ++ ) {  $ ~~if ( hur [ i ] == 'R' && hur [ i + 1 ] == 'L' ) { ans = min ( ans , arr [ i + 1 ] - arr [ i ] ) ; }  $ ~}  $ ~if ( ans == INT_MAX ) {  $ ~~cout << - 1 << endl ;  $ ~} else  $ ~~cout << ans / 2 << endl ;  $ }
int num [ 110 ] ;  $ int main ( ) {  $ ~int n ;  $ ~cin >> n ;  $ ~memset ( num , 0 , sizeof ( n ) ) ;  $ ~int maxx = 0 ;  $ ~while ( n -- ) {  $ ~~int x ;  $ ~~cin >> x ;  $ ~~num [ x ] ++ ;  $ ~~maxx = max ( maxx , num [ x ] ) ;  $ ~}  $ ~cout << maxx << endl ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~int t , s , x , i ;  $ ~cin >> t >> s >> x ;  $ ~if ( t == x ) {  $ ~~cout << "YES" << endl ;  $ ~~return 0 ;  $ ~}  $ ~for ( i = 1 ; i < 1000000000 ; i ++ ) {  $ ~~if ( t + s * i == x || t + s * i + 1 == x ) {  $ ~~~cout << "YES" << endl ;  $ ~~~break ;  $ ~~} else if ( t + s * i > x ) {  $ ~~~cout << "NO" << endl ;  $ ~~~break ;  $ ~~}  $ ~}  $ }
vector < char > po ;  $ map < char , int > ans ;  $ int main ( ) {  $ ~ans [ 'a' ] = ans [ 'e' ] = ans [ 'i' ] = ans [ 'o' ] = ans [ 'u' ] = ans [ 'y' ] = 1 ;  $ ~string pos ;  $ ~cin >> pos ;  $ ~transform ( pos . begin ( ) , pos . end ( ) , pos . begin ( ) , : : tolower ) ;  $ ~for ( int i = 0 ; i < pos . size ( ) ; i ++ ) {  $ ~~if ( ans [ pos [ i ] ] )  $ ~~~continue ;  $ ~~else {  $ ~~~po . push_back ( '.' ) ;  $ ~~~po . push_back ( pos [ i ] ) ;  $ ~~}  $ ~}  $ ~for ( int i = 0 ; i < po . size ( ) ; i ++ ) cout << po [ i ] ;  $ ~cout << endl ;  $ }
int main ( ) {  $ ~int n , a , b ;  $ ~string s ;  $ ~int ans ;  $ ~cin >> n >> a >> b >> s ;  $ ~if ( s [ a - 1 ] == s [ b - 1 ] ) {  $ ~~ans = 0 ;  $ ~} else {  $ ~~ans = 1 ;  $ ~}  $ ~cout << ans << '\n' ;  $ ~return 0 ;  $ }
const int N = 0 ;  $ long long a , b ;  $ string s ;  $ vector < int > v ;  $ int main ( ) {  $ ~cin >> s ;  $ ~int n = s . length ( ) ;  $ ~string res = "" ;  $ ~bool flag = false ;  $ ~for ( int i = 0 ; i < n ; i ++ ) {  $ ~~if ( s [ i ] == 'a' || flag ) {  $ ~~~res += s [ i ] ;  $ ~~~continue ;  $ ~~}  $ ~~flag = true ;  $ ~~while ( i < n && s [ i ] != 'a' ) {  $ ~~~res += ( s [ i ] - 1 ) ;  $ ~~~i ++ ;  $ ~~}  $ ~~if ( i != n ) i -- ;  $ ~}  $ ~if ( ! flag ) { res [ n - 1 ] = 'z' ; }  $ ~cout << res << endl ;  $ ~return 0 ;  $ }
const int inf = ( int ) 1e9 ;  $ const int mod = inf + 7 ;  $ const double eps = 1e-9 ;  $ const double pi = acos ( - 1.0 ) ;  $ const int days [ ] = { 0 , 31 , 28 , 31 , 30 , 31 , 30 , 31 , 31 , 30 , 31 , 30 , 31 } ;  $ int a [ 111 ] ;  $ int main ( ) {  $ ~int n ;  $ ~cin >> n ;  $ ~for ( int i = 0 ; i < n ; ++ i ) { cin >> a [ i ] ; }  $ ~int res = - 1 ;  $ ~for ( int i = 0 ; i < n ; ++ i ) {  $ ~~int maxx = a [ i ] ;  $ ~~int ans = a [ i ] ;  $ ~~for ( int j = i + 1 ; j < n ; ++ j ) {  $ ~~~maxx ^ = a [ j ] ;  $ ~~~if ( ans < maxx ) { ans = maxx ; }  $ ~~}  $ ~~res = max ( ans , res ) ;  $ ~}  $ ~cout << res << endl ;  $ }
int main ( ) {  $ ~int u = 0 , l = 0 ;  $ ~string s ;  $ ~cin >> s ;  $ ~for ( int i = 0 ; i < s . size ( ) ; i ++ ) {  $ ~~if ( s [ i ] >= 65 && s [ i ] <= 90 ) u ++ ;  $ ~~if ( s [ i ] >= 97 && s [ i ] <= 122 ) l ++ ;  $ ~}  $ ~if ( u > l )  $ ~~transform ( s . begin ( ) , s . end ( ) , s . begin ( ) , : : toupper ) ;  $ ~else  $ ~~transform ( s . begin ( ) , s . end ( ) , s . begin ( ) , : : tolower ) ;  $ ~cout << s << endl ;  $ ~return 0 ;  $ }
int dx [ 4 ] = { 0 , 0 , - 1 , 1 } ;  $ int dy [ 4 ] = { 1 , - 1 , 0 , 0 } ;  $ int main ( ) {  $ ~int s , v1 , v2 , t1 , t2 ;  $ ~cin >> s >> v1 >> v2 >> t1 >> t2 ;  $ ~int d1 = v1 * s + 2 * t1 ;  $ ~int d2 = v2 * s + 2 * t2 ;  $ ~if ( d1 == d2 )  $ ~~cout << "Friendship\n" ;  $ ~else if ( d1 < d2 )  $ ~~cout << "First\n" ;  $ ~else  $ ~~cout << "Second\n" ;  $ }
long long int n , x , y , z , p , q , ans , i , a , b , e ;  $ map < pair < long long int , long long int > , long long int > mp ;  $ pair < long long int , long long int > lol ;  $ long long int lca ( ) ;  $ void brainfuck ( ) ;  $ void finder ( ) ;  $ int main ( ) {  $ ~cin >> n ;  $ ~while ( n -- ) {  $ ~~cin >> z ;  $ ~~if ( z == 1 ) {  $ ~~~cin >> a >> b >> z ;  $ ~~~p = a , q = b ;  $ ~~~x = lca ( ) ;  $ ~~~brainfuck ( ) ;  $ ~~} else {  $ ~~~ans = 0 ;  $ ~~~cin >> a >> b ;  $ ~~~p = a , q = b ;  $ ~~~x = lca ( ) ;  $ ~~~finder ( ) ;  $ ~~~cout << ans << "\n" ;  $ ~~}  $ ~}  $ ~return 0 ;  $ }  $ long long int lca ( ) {  $ ~if ( log2 ( p ) < log2 ( q ) ) swap ( p , q ) ;  $ ~long long int log_ = 1 ;  $ ~y = ( long long int ) log2 ( p ) ;  $ ~x = ( long long int ) log2 ( q ) ;  $ ~while ( ( 1 << ( log_ + 1 ) ) <= y ) log_ ++ ;  $ ~for ( i = log_ ; i >= 0 ; i -- )  $ ~~if ( y - ( 1 << i ) >= x ) {  $ ~~~y -= ( 1 << i ) ;  $ ~~~p >> = ( 1 << i ) ;  $ ~~}  $ ~if ( p == q ) return p ;  $ ~for ( i = log_ ; i >= 0 ; i -- )  $ ~~if ( ( p >> ( 1 << i ) ) > 1 && ( p >> ( 1 << i ) ) != ( q >> ( 1 << i ) ) ) {  $ ~~~p >> = ( 1 << i ) ;  $ ~~~q >> = ( 1 << i ) ;  $ ~~}  $ ~return ( p / 2 ) ;  $ }  $ void brainfuck ( ) {  $ ~e = a ;  $ ~while ( ( a > x ) && ( a >> = 1 ) && ( a > 0 ) ) {  $ ~~lol . first = e ;  $ ~~lol . second = a ;  $ ~~e = a ;  $ ~~if ( mp . find ( lol ) != mp . end ( ) )  $ ~~~mp [ lol ] += z ;  $ ~~else  $ ~~~mp [ lol ] = z ;  $ ~}  $ ~e = b ;  $ ~while ( ( b > x ) && ( b >> = 1 ) && ( b > 0 ) ) {  $ ~~lol . first = e ;  $ ~~lol . second = b ;  $ ~~e = b ;  $ ~~if ( mp . find ( lol ) != mp . end ( ) )  $ ~~~mp [ lol ] += z ;  $ ~~else  $ ~~~mp [ lol ] = z ;  $ ~}  $ }  $ void finder ( ) {  $ ~e = a ;  $ ~while ( ( a > x ) && ( a >> = 1 ) && ( a > 0 ) ) {  $ ~~lol . first = e ;  $ ~~lol . second = a ;  $ ~~e = a ;  $ ~~if ( mp . find ( lol ) != mp . end ( ) ) ans += mp [ lol ] ;  $ ~}  $ ~e = b ;  $ ~while ( ( b > x ) && ( b >> = 1 ) && ( b > 0 ) ) {  $ ~~lol . first = e ;  $ ~~lol . second = b ;  $ ~~e = b ;  $ ~~if ( mp . find ( lol ) != mp . end ( ) ) ans += mp [ lol ] ;  $ ~}  $ }
string s ;  $ bool ok ( string t ) {  $ ~int msk = 0 ;  $ ~for ( int i = 0 ; i < int ( t . size ( ) ) ; ++ i ) {  $ ~~if ( isupper ( t [ i ] ) ) msk |= 1 ;  $ ~~if ( islower ( t [ i ] ) ) msk |= 2 ;  $ ~~if ( isdigit ( t [ i ] ) ) msk |= 4 ;  $ ~}  $ ~return msk == 7 ;  $ }  $ int main ( ) {  $ ~int t ;  $ ~cin >> t ;  $ ~for ( int i = 0 ; i < t ; ++ i ) {  $ ~~cin >> s ;  $ ~~if ( ok ( s ) ) {  $ ~~~cout << s << endl ;  $ ~~~continue ;  $ ~~}  $ ~~bool fnd = false ;  $ ~~for ( int i = 0 ; i < int ( s . size ( ) ) ; ++ i ) {  $ ~~~string t = s ;  $ ~~~t [ i ] = '1' ;  $ ~~~if ( ok ( t ) ) {  $ ~~~~cout << t << endl ;  $ ~~~~fnd = true ;  $ ~~~~break ;  $ ~~~}  $ ~~~t [ i ] = 'a' ;  $ ~~~if ( ok ( t ) ) {  $ ~~~~cout << t << endl ;  $ ~~~~fnd = true ;  $ ~~~~break ;  $ ~~~}  $ ~~~t [ i ] = 'A' ;  $ ~~~if ( ok ( t ) ) {  $ ~~~~cout << t << endl ;  $ ~~~~fnd = true ;  $ ~~~~break ;  $ ~~~}  $ ~~}  $ ~~if ( fnd ) continue ;  $ ~~if ( isupper ( s [ 2 ] ) ) {  $ ~~~s [ 0 ] = 'a' ;  $ ~~~s [ 1 ] = '1' ;  $ ~~~cout << s << endl ;  $ ~~~continue ;  $ ~~}  $ ~~if ( islower ( s [ 2 ] ) ) {  $ ~~~s [ 0 ] = 'A' ;  $ ~~~s [ 1 ] = '1' ;  $ ~~~cout << s << endl ;  $ ~~~continue ;  $ ~~}  $ ~~if ( isdigit ( s [ 2 ] ) ) {  $ ~~~s [ 0 ] = 'a' ;  $ ~~~s [ 1 ] = 'A' ;  $ ~~~cout << s << endl ;  $ ~~~continue ;  $ ~~}  $ ~}  $ ~return 0 ;  $ }
int main ( ) {  $ ~int n , m ;  $ ~cin >> n >> m ;  $ ~int v = 0 ;  $ ~int x [ 100 ] ;  $ ~int arr [ 100 ] ;  $ ~bool ans = true ;  $ ~for ( int i = 0 ; i < n ; i ++ ) {  $ ~~cin >> arr [ i ] ;  $ ~~if ( arr [ i ] > v ) { v = arr [ i ] ; }  $ ~}  $ ~sort ( arr , arr + n ) ;  $ ~for ( int i = 0 ; i < m ; i ++ ) {  $ ~~cin >> x [ i ] ;  $ ~~if ( x [ i ] <= v ) { ans = false ; }  $ ~}  $ ~int cnt = 0 ;  $ ~if ( ans == true ) {  $ ~~if ( arr [ 0 ] * 2 > v ) {  $ ~~~v = 2 * arr [ 0 ] ;  $ ~~~for ( int i = 0 ; i < m ; i ++ ) {  $ ~~~~if ( x [ i ] <= v ) { ans = false ; }  $ ~~~}  $ ~~}  $ ~}  $ ~if ( ans ) {  $ ~~cout << v << endl ;  $ ~} else  $ ~~cout << - 1 << endl ;  $ }
int main ( ) {  $ ~string s1 , s2 ;  $ ~cin >> s1 >> s2 ;  $ ~for ( int i = 0 ; i < s1 . size ( ) ; i ++ ) s1 [ i ] = ( char ) tolower ( s1 [ i ] ) ;  $ ~for ( int i = 0 ; i < s2 . size ( ) ; i ++ ) s2 [ i ] = ( char ) tolower ( s2 [ i ] ) ;  $ ~if ( s1 == s2 )  $ ~~cout << "0" << endl ;  $ ~else if ( s1 < s2 )  $ ~~cout << "-1" << endl ;  $ ~else  $ ~~cout << "1" << endl ;  $ }
int main ( ) {  $ ~int n , k ;  $ ~cin >> n >> k ;  $ ~string str ;  $ ~cin >> str ;  $ ~int s = find ( str . begin ( ) , str . end ( ) , 'G' ) - str . begin ( ) ;  $ ~int e = find ( str . begin ( ) , str . end ( ) , 'T' ) - str . begin ( ) ;  $ ~if ( s > e ) swap ( s , e ) ;  $ ~bool res = false ;  $ ~for ( ; s <= e ; s += k ) {  $ ~~if ( s == e ) res = true ;  $ ~~if ( str [ s ] == '#' ) break ;  $ ~}  $ ~cout << ( res ? "YES" : "NO" ) << endl ;  $ }
int main ( ) {  $ ~int n ;  $ ~cin >> n ;  $ ~int a , b , c ;  $ ~int cnt = 0 ;  $ ~for ( int i = 0 ; i < n ; ++ i ) {  $ ~~cin >> a >> b >> c ;  $ ~~if ( a + b + c >= 2 ) cnt += 1 ;  $ ~}  $ ~cout << cnt << endl ;  $ }
int main ( ) {  $ ~;  $ ~long long int i , j , k , l , z , x , c , v , b = 0 , n , m = 0 , a [ 120 ] ;  $ ~string s ;  $ ~cin >> s ;  $ ~l = s . size ( ) ;  $ ~for ( i = 1 , b = 1 ; i < l ; i ++ ) {  $ ~~if ( s [ i - 1 ] == s [ i ] )  $ ~~~b ++ ;  $ ~~else {  $ ~~~if ( b % 2 == 0 ) m ++ ;  $ ~~~b = 1 ;  $ ~~}  $ ~}  $ ~if ( b % 2 == 0 ) m ++ ;  $ ~cout << m << endl ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~int s , v1 , v2 , t1 , t2 , ans1 = 0 , ans2 = 0 ;  $ ~cin >> s >> v1 >> v2 >> t1 >> t2 ;  $ ~ans1 = v1 * s ;  $ ~ans2 = v2 * s ;  $ ~ans1 += t1 + t1 ;  $ ~ans2 += t2 + t2 ;  $ ~if ( ans1 > ans2 )  $ ~~cout << "Second" << endl ;  $ ~else if ( ans1 < ans2 )  $ ~~cout << "First" << endl ;  $ ~else if ( ans1 == ans2 )  $ ~~cout << "Friendship" << endl ;  $ ~return 0 ;  $ }
int l , r , a , b , c , ans ;  $ int main ( ) {  $ ~cin >> l >> r >> a ;  $ ~b = min ( l , r ) ;  $ ~c = max ( l , r ) ;  $ ~for ( int i = 0 ; i <= a ; i ++ ) ans = max ( ans , min ( b + i , c + a - i ) ) ;  $ ~cout << ans * 2 << endl ;  $ ~return 0 ;  $ }
int win [ 205 ] ;  $ int main ( ) {  $ ~int n , m , mx = - 1 , ind = 0 , ans ;  $ ~cin >> n ;  $ ~cin >> m ;  $ ~long long int arr [ n + 1 ] ;  $ ~for ( int i = 0 ; i < m ; i ++ ) {  $ ~~for ( int j = 0 ; j < n ; j ++ ) {  $ ~~~cin >> arr [ j ] ;  $ ~~~if ( mx < arr [ j ] ) {  $ ~~~~mx = arr [ j ] ;  $ ~~~~ind = j ;  $ ~~~}  $ ~~}  $ ~~win [ ind ] ++ ;  $ ~~mx = - 1 ;  $ ~}  $ ~ans = * max_element ( win , win + 205 ) ;  $ ~for ( int i = 0 ; i < 205 ; i ++ ) {  $ ~~if ( win [ i ] == ans ) {  $ ~~~cout << i + 1 << endl ;  $ ~~~break ;  $ ~~}  $ ~}  $ ~return 0 ;  $ }
int n , sum = 0 ;  $ string str ;  $ int main ( ) {  $ ~cin >> n ;  $ ~while ( n -- ) {  $ ~~cin >> str ;  $ ~~if ( str == "Tetrahedron" ) {  $ ~~~sum += 4 ;  $ ~~} else if ( str == "Cube" ) {  $ ~~~sum += 6 ;  $ ~~} else if ( str == "Octahedron" ) {  $ ~~~sum += 8 ;  $ ~~} else if ( str == "Dodecahedron" ) {  $ ~~~sum += 12 ;  $ ~~} else if ( str == "Icosahedron" ) {  $ ~~~sum += 20 ;  $ ~~}  $ ~}  $ ~cout << sum << endl ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~int m , n , a [ 50 ] , i , min ;  $ ~cin >> n >> m ;  $ ~for ( i = 0 ; i < m ; i ++ ) cin >> a [ i ] ;  $ ~sort ( a , a + m ) ;  $ ~i = 0 ;  $ ~min = a [ 0 ] + a [ 0 + n - 1 ] ;  $ ~while ( i + n <= m ) {  $ ~~if ( ( a [ i + n - 1 ] - a [ i ] ) < min ) min = a [ i + n - 1 ] - a [ i ] ;  $ ~~i ++ ;  $ ~}  $ ~cout << min << endl ;  $ }
string s , t ;  $ int l1 , l2 ;  $ int p [ 10001 ] [ 26 ] ;  $ int main ( ) {  $ ~while ( cin >> s >> t ) {  $ ~~l1 = s . size ( ) ;  $ ~~l2 = t . size ( ) ;  $ ~~memset ( p , 0 , sizeof ( p ) ) ;  $ ~~for ( int i = 0 ; i < 26 ; i ++ ) p [ l1 ] [ i ] = - 1 ;  $ ~~for ( int j = l1 ; j >= 1 ; j -- )  $ ~~~for ( int i = 0 ; i < 26 ; i ++ )  $ ~~~~if ( s [ j ] == i + 'a' )  $ ~~~~~p [ j - 1 ] [ i ] = j ;  $ ~~~~else  $ ~~~~~p [ j - 1 ] [ i ] = p [ j ] [ i ] ;  $ ~~int ans = 1 , l = - 2 ;  $ ~~for ( int i = 0 ; i < l2 ; i ++ ) {  $ ~~~if ( l == - 2 ) {  $ ~~~~if ( s [ 0 ] == t [ i ] )  $ ~~~~~l = 0 ;  $ ~~~~else  $ ~~~~~l = p [ 0 ] [ t [ i ] - 'a' ] ;  $ ~~~~if ( l == - 1 ) {  $ ~~~~~ans = - 1 ;  $ ~~~~~break ;  $ ~~~~}  $ ~~~} else {  $ ~~~~l = p [ l ] [ t [ i ] - 'a' ] ;  $ ~~~~if ( l == - 1 ) {  $ ~~~~~ans ++ ;  $ ~~~~~l = - 2 ;  $ ~~~~~i -- ;  $ ~~~~}  $ ~~~}  $ ~~}  $ ~~cout << ans << endl ;  $ ~}  $ }
void solve ( ) {  $ ~string a , b ;  $ ~int n ;  $ ~cin >> a >> b ;  $ ~cin >> n ;  $ ~cout << a << " " << b << endl ;  $ ~for ( int i = 0 ; i < n ; i ++ ) {  $ ~~string murdered ;  $ ~~string newvictim ;  $ ~~cin >> murdered >> newvictim ;  $ ~~if ( a == murdered )  $ ~~~a = newvictim ;  $ ~~else  $ ~~~b = newvictim ;  $ ~~cout << a << " " << b << endl ;  $ ~}  $ }  $ int main ( ) {  $ ~solve ( ) ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~int i , j , k , l , m , n , cnt = 0 , t = 0 , len = 0 , ans = 0 ;  $ ~string s ;  $ ~cin >> s ;  $ ~for ( i = 0 ; i < s . size ( ) ; i ++ ) {  $ ~~for ( j = i + 1 ; j < s . size ( ) ; j ++ ) {  $ ~~~len = 0 ;  $ ~~~while ( s [ i + len ] == s [ j + len ] ) { len ++ ; }  $ ~~~if ( len > ans ) ans = len ;  $ ~~}  $ ~}  $ ~cout << ans << endl ;  $ }
int main ( ) {  $ ~int t ;  $ ~cin >> t ;  $ ~vector < int > s ;  $ ~int counter = 0 ;  $ ~while ( t -- ) {  $ ~~int x ;  $ ~~cin >> x ;  $ ~~s . push_back ( x ) ;  $ ~}  $ ~bool flag = 0 ;  $ ~for ( int i = 0 ; i < s . size ( ) ; i ++ ) {  $ ~~if ( s [ i ] == 1 ) {  $ ~~~counter ++ ;  $ ~~~flag = 1 ;  $ ~~}  $ ~~if ( s [ i ] == 0 && s [ i + 1 ] == 1 && flag == 1 ) { counter ++ ; }  $ ~~if ( s [ i ] == 0 && s [ i + 1 ] == 0 ) { flag = 0 ; }  $ ~}  $ ~cout << counter << endl ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~long long a , b ;  $ ~cin >> a >> b ;  $ ~if ( a > 0 ) {  $ ~~if ( b > 0 )  $ ~~~cout << 0 << ' ' << a + b << ' ' << a + b << ' ' << 0 << '\n' ;  $ ~~else  $ ~~~cout << 0 << ' ' << b - a << ' ' << a - b << ' ' << 0 << '\n' ;  $ ~} else {  $ ~~if ( b > 0 )  $ ~~~cout << a - b << ' ' << 0 << ' ' << 0 << ' ' << b - a << '\n' ;  $ ~~else  $ ~~~cout << a + b << ' ' << 0 << ' ' << 0 << ' ' << a + b << '\n' ;  $ ~}  $ ~return 0 ;  $ }
int cmmdc ( int a , int b ) {  $ ~int r = a % b ;  $ ~while ( r ) {  $ ~~a = b ;  $ ~~b = r ;  $ ~~r = a % b ;  $ ~}  $ ~return b ;  $ }  $ int n , a , x , i ;  $ int main ( ) {  $ ~cin >> n ;  $ ~cin >> a ;  $ ~for ( i = 2 ; i <= n ; i ++ ) {  $ ~~cin >> x ;  $ ~~a = cmmdc ( a , x ) ;  $ ~}  $ ~cout << a * n << '\n' ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~string s ;  $ ~cin >> s ;  $ ~for ( int i = 0 ; i < s . size ( ) ; ++ i ) {  $ ~~if ( '9' - s [ i ] < s [ i ] - '0' ) {  $ ~~~if ( i > 0 || s [ i ] != '9' ) { s [ i ] = '0' + '9' - s [ i ] ; }  $ ~~}  $ ~}  $ ~cout << s << endl ;  $ ~return 0 ;  $ }
int a [ 400000 ] ;  $ int main ( ) {  $ ~int t ;  $ ~cin >> t ;  $ ~for ( int i = 1 ; i <= t ; i ++ ) {  $ ~~cin >> a [ i ] ;  $ ~~if ( 360 % ( 180 - a [ i ] ) == 0 ) {  $ ~~~cout << "YES" << endl ;  $ ~~} else {  $ ~~~cout << "NO" << endl ;  $ ~~}  $ ~}  $ }
int n , i , a [ 1111111 ] , ans = 0 , d [ 1111111 ] ;  $ int main ( ) {  $ ~cin >> n ;  $ ~for ( i = 0 ; i < n ; i ++ ) cin >> a [ i ] ;  $ ~d [ 1 ] = 1 ;  $ ~for ( i = 2 ; i < n ; i ++ ) d [ i ] = d [ i / 2 ] * 2 ;  $ ~for ( i = 0 ; i + 1 < n ; i ++ ) {  $ ~~a [ i + d [ n - i - 1 ] ] += a [ i ] ;  $ ~~ans += a [ i ] ;  $ ~~cout << ans << endl ;  $ ~}  $ ~return 0 ;  $ }
int main ( ) {  $ ~bool arr [ 105 ] = { 0 } ;  $ ~int n , m = 0 , i = 0 , j = 0 , counter = 0 ;  $ ~cin >> n ;  $ ~cin >> m ;  $ ~int k , p ;  $ ~for ( i = 1 ; i <= n ; i ++ ) {  $ ~~cin >> k ;  $ ~~for ( j = 1 ; j <= k ; j ++ ) {  $ ~~~cin >> p ;  $ ~~~arr [ p ] = 1 ;  $ ~~}  $ ~}  $ ~for ( i = 0 ; i < 105 ; i ++ ) {  $ ~~if ( arr [ i ] == true ) { counter ++ ; }  $ ~}  $ ~if ( counter == m ) {  $ ~~cout << "YES" << endl ;  $ ~} else {  $ ~~cout << "NO" << endl ;  $ ~}  $ ~return 0 ;  $ }
int main ( ) {  $ ~string s , s1 , s2 ;  $ ~int n , i ;  $ ~cin >> n ;  $ ~for ( i = 0 ; i < n ; i ++ ) {  $ ~~cin >> s ;  $ ~~s1 += s ;  $ ~}  $ ~s2 = s1 ;  $ ~reverse ( s2 . begin ( ) , s2 . end ( ) ) ;  $ ~cout << ( ( s2 == s1 ) ? "YES" : "NO" ) << endl ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~int n ;  $ ~string a ;  $ ~string b ;  $ ~cin >> a >> b ;  $ ~map < string , int > mp ;  $ ~mp [ "monday" ] = 1 ;  $ ~mp [ "tuesday" ] = 2 ;  $ ~mp [ "wednesday" ] = 3 ;  $ ~mp [ "thursday" ] = 4 ;  $ ~mp [ "friday" ] = 5 ;  $ ~mp [ "saturday" ] = 6 ;  $ ~mp [ "sunday" ] = 0 ;  $ ~int p1 = mp [ a ] ;  $ ~int p2 = mp [ b ] ;  $ ~if ( ( p1 + 30 ) % 7 == p2 ) {  $ ~~puts ( "YES" ) ;  $ ~~return 0 ;  $ ~}  $ ~if ( ( p1 + 28 ) % 7 == p2 ) {  $ ~~puts ( "YES" ) ;  $ ~~return 0 ;  $ ~}  $ ~if ( ( p1 + 31 ) % 7 == p2 ) {  $ ~~puts ( "YES" ) ;  $ ~~return 0 ;  $ ~}  $ ~cout << "NO" << endl ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~string s ;  $ ~cin >> s ;  $ ~int count = 0 , x = 0 ;  $ ~for ( int i = s . size ( ) - 1 ; i >= 0 ; i -- ) {  $ ~~if ( s [ i ] == '0' ) count ++ ;  $ ~~if ( s [ i ] == '1' && count >= 6 ) x = 1 ;  $ ~}  $ ~if ( x == 1 )  $ ~~cout << "yes" << endl ;  $ ~else  $ ~~cout << "no" << endl ;  $ }
int main ( ) {  $ ~int n , s , h , m , a [ 1000 ] ;  $ ~cin >> n >> s ;  $ ~int time = 0 ;  $ ~a [ 0 ] = 0 ;  $ ~for ( int i = 1 ; i <= n ; i ++ ) {  $ ~~cin >> h >> m ;  $ ~~int t = h * 60 + m ;  $ ~~a [ i ] = t ;  $ ~}  $ ~for ( int i = 1 ; i < n ; i ++ ) {  $ ~~if ( ( a [ i + 1 ] - a [ i ] ) >= ( 2 * s + 2 ) ) {  $ ~~~time = a [ i ] + s + 1 ;  $ ~~~break ;  $ ~~}  $ ~}  $ ~if ( time == 0 ) time = a [ n ] + s + 1 ;  $ ~if ( ( a [ 1 ] - a [ 0 ] ) >= ( s + 1 ) ) time = 0 ;  $ ~int t_h = ( time / 60 ) ;  $ ~int t_m = time % 60 ;  $ ~cout << t_h << " " << t_m << endl ;  $ }
int main ( ) {  $ ~int n , x , ans = 0 ;  $ ~cin >> n >> x ;  $ ~for ( int i = 1 ; i <= n ; i ++ ) {  $ ~~if ( x % i == 0 ) {  $ ~~~if ( ( x / i ) <= n ) ans ++ ;  $ ~~}  $ ~}  $ ~cout << ans << endl ;  $ ~return 0 ;  $ }
char a [ 109 ] [ 109 ] ;  $ int main ( ) {  $ ~int i , j , n , m ;  $ ~int bl = 0 , wh = 0 ;  $ ~cin >> n >> m ;  $ ~for ( i = 0 ; i < n ; i ++ ) cin >> a [ i ] ;  $ ~for ( i = 0 ; i < n ; i ++ ) {  $ ~~if ( i % 2 == 0 )  $ ~~~bl = 1 ;  $ ~~else  $ ~~~wh = 1 ;  $ ~~for ( j = 0 ; j < m ; j ++ ) {  $ ~~~if ( a [ i ] [ j ] == '.' ) {  $ ~~~~if ( bl == 1 ) {  $ ~~~~~a [ i ] [ j ] = 'B' ;  $ ~~~~~bl = 0 , wh = 1 ;  $ ~~~~} else {  $ ~~~~~a [ i ] [ j ] = 'W' ;  $ ~~~~~bl = 1 , wh = 0 ;  $ ~~~~}  $ ~~~} else {  $ ~~~~if ( bl == 1 ) {  $ ~~~~~bl = 0 , wh = 1 ;  $ ~~~~} else {  $ ~~~~~bl = 1 , wh = 0 ;  $ ~~~~}  $ ~~~}  $ ~~}  $ ~~bl = 0 , wh = 0 ;  $ ~}  $ ~for ( i = 0 ; i < n ; i ++ ) {  $ ~~for ( j = 0 ; j < m ; j ++ ) cout << a [ i ] [ j ] ;  $ ~~cout << endl ;  $ ~}  $ }
int main ( ) {  $ ~int n ;  $ ~cin >> n ;  $ ~if ( n == 0 )  $ ~~cout << 0 << endl ;  $ ~else if ( n == 2 )  $ ~~cout << 2 << endl ;  $ ~else  $ ~~cout << 1 << endl ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~int n ;  $ ~cin >> n ;  $ ~int a [ n ] ;  $ ~for ( int i = 0 ; i < n ; i ++ ) {  $ ~~cin >> a [ i ] ;  $ ~~if ( 360 % ( 180 - a [ i ] ) == 0 ) {  $ ~~~cout << "YES" << endl ;  $ ~~} else {  $ ~~~cout << "NO" << endl ;  $ ~~}  $ ~}  $ ~return 0 ;  $ }
int main ( ) {  $ ~string a [ 2 ] ;  $ ~string s ;  $ ~cin >> s ;  $ ~a [ 0 ] = s ;  $ ~cout << s << " " ;  $ ~cin >> s ;  $ ~a [ 1 ] = s ;  $ ~cout << s << endl ;  $ ~int n ;  $ ~cin >> n ;  $ ~string u , o ;  $ ~for ( int i = 0 ; i < n ; i ++ ) {  $ ~~cin >> u >> o ;  $ ~~if ( u == a [ 0 ] ) { a [ 0 ] = o ; }  $ ~~if ( u == a [ 1 ] ) { a [ 1 ] = o ; }  $ ~~cout << a [ 0 ] << " " ;  $ ~~cout << a [ 1 ] << endl ;  $ ~}  $ ~return 0 ;  $ }
int main ( ) {  $ ~int k , n , temp , ans = 0 ;  $ ~cin >> k >> n ;  $ ~k %= 10 ;  $ ~if ( k == 0 ) {  $ ~~ans = 1 ;  $ ~} else  $ ~~for ( int i = 1 ; i < 11 ; i ++ ) {  $ ~~~temp = k * i ;  $ ~~~temp %= 10 ;  $ ~~~if ( temp == 0 || temp == n ) {  $ ~~~~ans = i ;  $ ~~~~break ;  $ ~~~}  $ ~~}  $ ~cout << ans << endl ;  $ }
static int mod = 1e9 + 7 ;  $ int main ( ) {  $ ~int n , m , row [ 105 ] , col [ 105 ] , table [ 105 ] [ 105 ] , minn , flag ;  $ ~while ( cin >> n >> m ) {  $ ~~int tmp = 0 ;  $ ~~memset ( row , 0 , sizeof ( row ) ) ;  $ ~~memset ( col , 0 , sizeof ( col ) ) ;  $ ~~for ( int i = 1 ; i <= n ; i ++ ) {  $ ~~~for ( int j = 1 ; j <= m ; j ++ ) cin >> table [ i ] [ j ] ;  $ ~~}  $ ~~if ( m >= n ) {  $ ~~~for ( int i = 1 ; i <= n ; i ++ ) {  $ ~~~~minn = 0 x3f3f3f3f ;  $ ~~~~for ( int j = 1 ; j <= m ; j ++ ) {  $ ~~~~~if ( table [ i ] [ j ] < minn ) minn = table [ i ] [ j ] ;  $ ~~~~}  $ ~~~~if ( minn ) {  $ ~~~~~tmp += minn ;  $ ~~~~~row [ i ] = minn ;  $ ~~~~~for ( int j = 1 ; j <= m ; j ++ ) table [ i ] [ j ] -= minn ;  $ ~~~~}  $ ~~~}  $ ~~~for ( int j = 1 ; j <= m ; j ++ ) {  $ ~~~~minn = 0 x3f3f3f3f ;  $ ~~~~for ( int i = 1 ; i <= n ; i ++ ) {  $ ~~~~~if ( table [ i ] [ j ] < minn ) minn = table [ i ] [ j ] ;  $ ~~~~}  $ ~~~~if ( minn ) {  $ ~~~~~tmp += minn ;  $ ~~~~~col [ j ] = minn ;  $ ~~~~~for ( int i = 1 ; i <= n ; i ++ ) table [ i ] [ j ] -= minn ;  $ ~~~~}  $ ~~~}  $ ~~} else {  $ ~~~for ( int j = 1 ; j <= m ; j ++ ) {  $ ~~~~minn = 0 x3f3f3f3f ;  $ ~~~~for ( int i = 1 ; i <= n ; i ++ ) {  $ ~~~~~if ( table [ i ] [ j ] < minn ) minn = table [ i ] [ j ] ;  $ ~~~~}  $ ~~~~if ( minn ) {  $ ~~~~~tmp += minn ;  $ ~~~~~col [ j ] = minn ;  $ ~~~~~for ( int i = 1 ; i <= n ; i ++ ) table [ i ] [ j ] -= minn ;  $ ~~~~}  $ ~~~}  $ ~~~for ( int i = 1 ; i <= n ; i ++ ) {  $ ~~~~minn = 0 x3f3f3f3f ;  $ ~~~~for ( int j = 1 ; j <= m ; j ++ ) {  $ ~~~~~if ( table [ i ] [ j ] < minn ) minn = table [ i ] [ j ] ;  $ ~~~~}  $ ~~~~if ( minn ) {  $ ~~~~~tmp += minn ;  $ ~~~~~row [ i ] = minn ;  $ ~~~~~for ( int j = 1 ; j <= m ; j ++ ) table [ i ] [ j ] -= minn ;  $ ~~~~}  $ ~~~}  $ ~~}  $ ~~flag = 1 ;  $ ~~for ( int i = 1 ; i <= n ; i ++ )  $ ~~~for ( int j = 1 ; j <= m ; j ++ )  $ ~~~~if ( table [ i ] [ j ] ) {  $ ~~~~~flag = 0 ;  $ ~~~~~break ;  $ ~~~~}  $ ~~if ( flag ) {  $ ~~~cout << tmp << '\n' ;  $ ~~~for ( int i = 1 ; i <= n ; i ++ ) {  $ ~~~~for ( int k = 1 ; k <= row [ i ] ; k ++ ) cout << "row " << i << '\n' ;  $ ~~~}  $ ~~~for ( int j = 1 ; j <= m ; j ++ ) {  $ ~~~~for ( int k = 1 ; k <= col [ j ] ; k ++ ) cout << "col " << j << '\n' ;  $ ~~~}  $ ~~} else  $ ~~~cout << "-1\n" ;  $ ~}  $ ~return 0 ;  $ }
const int M = 2e5 + 5 ;  $ const int inf = 1e9 + 5 ;  $ int main ( ) {  $ ~int n ;  $ ~vector < int > v ;  $ ~cin >> n ;  $ ~for ( int i = 0 ; i < n ; i ++ ) {  $ ~~int t ;  $ ~~cin >> t ;  $ ~~v . push_back ( t ) ;  $ ~}  $ ~sort ( v . begin ( ) , v . end ( ) ) ;  $ ~cout << v [ n / 2 ] << endl ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~int a , b , diff , same ;  $ ~cin >> a >> b ;  $ ~if ( a < b )  $ ~~diff = a ;  $ ~else  $ ~~diff = b ;  $ ~a = a - diff ;  $ ~b = b - diff ;  $ ~if ( a < b )  $ ~~same = b / 2 ;  $ ~else  $ ~~same = a / 2 ;  $ ~cout << diff << " " << same << endl ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~int n ;  $ ~cin >> n ;  $ ~bool poss1 = true , poss2 = true ;  $ ~int poss1_p1 , poss1_p2 , poss1_spec , poss2_p1 , poss2_p2 , poss2_spec ;  $ ~poss1_p1 = 1 ;  $ ~poss1_p2 = 2 ;  $ ~poss1_spec = 3 ;  $ ~for ( int i = 0 ; i < n ; i ++ ) {  $ ~~int winner ;  $ ~~cin >> winner ;  $ ~~if ( poss1 ) {  $ ~~~if ( winner == poss1_spec ) poss1 = false ;  $ ~~~int temp = poss1_spec ;  $ ~~~poss1_spec = poss1_p1 == winner ? poss1_p2 : poss1_p1 ;  $ ~~~if ( poss1_spec == poss1_p1 )  $ ~~~~poss1_p1 = temp ;  $ ~~~else  $ ~~~~poss1_p2 = temp ;  $ ~~}  $ ~}  $ ~if ( ! poss1 )  $ ~~cout << "NO" << endl ;  $ ~else  $ ~~cout << "YES" << endl ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~double a , b , c ;  $ ~cin >> a >> b >> c ;  $ ~cout << ( sqrt ( a * b / c ) + sqrt ( c * a / b ) + sqrt ( c * b / a ) ) * 4 << endl ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~int n ;  $ ~char mp [ 110 ] [ 110 ] ;  $ ~cin >> n ;  $ ~memset ( mp , '*' , sizeof ( mp ) ) ;  $ ~for ( int i = 1 ; i <= n ; ++ i )  $ ~~for ( int j = 1 ; j <= n ; ++ j ) cin >> mp [ j ] [ i ] ;  $ ~bool flag = true ;  $ ~for ( int i = 1 ; i <= n && flag ; ++ i ) {  $ ~~int cnt = 0 ;  $ ~~for ( int j = 1 ; j <= n ; ++ j ) {  $ ~~~if ( mp [ j - 1 ] [ i ] == 'o' ) cnt ++ ;  $ ~~~if ( mp [ j + 1 ] [ i ] == 'o' ) cnt ++ ;  $ ~~~if ( mp [ j ] [ i - 1 ] == 'o' ) cnt ++ ;  $ ~~~if ( mp [ j ] [ i + 1 ] == 'o' ) cnt ++ ;  $ ~~~if ( cnt % 2 != 0 ) {  $ ~~~~flag = false ;  $ ~~~~break ;  $ ~~~}  $ ~~}  $ ~}  $ ~puts ( flag ? "YES" : "NO" ) ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~string s ;  $ ~cin >> s ;  $ ~int b , a = s . size ( ) ;  $ ~if ( a == 1 ) {  $ ~~cout << "51" << endl ;  $ ~} else {  $ ~~b = 51 + ( 25 * ( a - 1 ) ) ;  $ ~~cout << b << endl ;  $ ~}  $ ~return 0 ;  $ }
int main ( ) {  $ ~int n ;  $ ~cin >> n ;  $ ~if ( n % 2 )  $ ~~cout << ( n - 1 ) / 2 << endl ;  $ ~else  $ ~~cout << ( n - ( 1 << ( 31 - __builtin_clz ( n ) ) ) ) / 2 << endl ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~int n , x , t = 0 , out = 0 , k = 0 ;  $ ~cin >> n >> x ;  $ ~int z [ n ] ;  $ ~while ( k < n ) {  $ ~~cin >> z [ k ] ;  $ ~~t += z [ k ] ;  $ ~~k ++ ;  $ ~}  $ ~if ( t > 0 ) {  $ ~~while ( t > 0 ) {  $ ~~~if ( t - x >= 0 ) {  $ ~~~~t -= x ;  $ ~~~~out ++ ;  $ ~~~} else  $ ~~~~x -- ;  $ ~~}  $ ~} else if ( t < 0 ) {  $ ~~while ( t < 0 ) {  $ ~~~if ( t + x <= 0 ) {  $ ~~~~t += x ;  $ ~~~~out ++ ;  $ ~~~} else  $ ~~~~x -- ;  $ ~~}  $ ~}  $ ~cout << out << endl ;  $ ~return 0 ;  $ }
int a , b ;  $ int res = 0 ;  $ int q ;  $ int t ;  $ int main ( ) {  $ ~cin >> t ;  $ ~while ( t -- ) {  $ ~~cin >> a >> b ;  $ ~~res = 0 ;  $ ~~while ( 1 ) {  $ ~~~if ( a == b || a == 0 || b == 0 ) {  $ ~~~~res ++ ;  $ ~~~~break ;  $ ~~~}  $ ~~~if ( a > b ) swap ( a , b ) ;  $ ~~~if ( b / a == 1 ) {  $ ~~~~b = b - a ;  $ ~~~~res = res + 1 ;  $ ~~~} else {  $ ~~~~q = b / a - 1 ;  $ ~~~~res += q ;  $ ~~~~b = b - q * a ;  $ ~~~}  $ ~~}  $ ~~cout << res ;  $ ~~cout << endl ;  $ ~}  $ ~return 0 ;  $ }
int main ( ) {  $ ~int n ;  $ ~cin >> n ;  $ ~cout << n % 2 << "\n" ;  $ ~return 0 ;  $ }
int used [ 100005 ] ;  $ int main ( ) {  $ ~int n ;  $ ~cin >> n ;  $ ~for ( int i = 0 ; i < n - 1 ; i ++ ) {  $ ~~int x ;  $ ~~cin >> x ;  $ ~~used [ x ] = 1 ;  $ ~}  $ ~for ( int i = 1 ; i <= n ; i ++ )  $ ~~if ( ! used [ i ] ) cout << i << endl ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~int n ;  $ ~cin >> n ;  $ ~if ( n <= 10 || n > 21 )  $ ~~cout << "0\n" ;  $ ~else {  $ ~~int ans = 0 ;  $ ~~int tmp = n - 10 ;  $ ~~if ( tmp == 10 ) {  $ ~~~ans = 15 ;  $ ~~} else {  $ ~~~ans = 4 ;  $ ~~}  $ ~~cout << ans << endl ;  $ ~}  $ }
const int maxn = 1e4 + 10 ;  $ map < string , int > mp ;  $ string a , b , c ;  $ int main ( ) {  $ ~mp [ "C" ] = 1 ;  $ ~mp [ "C#" ] = 2 ;  $ ~mp [ "D" ] = 3 ;  $ ~mp [ "D#" ] = 4 ;  $ ~mp [ "E" ] = 5 ;  $ ~mp [ "F" ] = 6 ;  $ ~mp [ "F#" ] = 7 ;  $ ~mp [ "G" ] = 8 ;  $ ~mp [ "G#" ] = 9 ;  $ ~mp [ "A" ] = 10 ;  $ ~mp [ "B" ] = 11 ;  $ ~mp [ "H" ] = 12 ;  $ ~cin >> a >> b >> c ;  $ ~if ( mp [ a ] > mp [ b ] ) swap ( a , b ) ;  $ ~if ( mp [ a ] > mp [ c ] ) swap ( a , c ) ;  $ ~if ( mp [ b ] > mp [ c ] ) swap ( b , c ) ;  $ ~for ( int i = 1 ; i <= 100 ; i ++ ) {  $ ~~if ( mp [ b ] - mp [ a ] == 4 && mp [ c ] - mp [ b ] == 3 ) {  $ ~~~cout << "major" << endl ;  $ ~~~return 0 ;  $ ~~} else if ( mp [ b ] - mp [ a ] == 3 && mp [ c ] - mp [ b ] == 4 ) {  $ ~~~cout << "minor" << endl ;  $ ~~~return 0 ;  $ ~~} else {  $ ~~~mp [ a ] += 12 ;  $ ~~~string tem = a ;  $ ~~~a = b ;  $ ~~~b = c ;  $ ~~~c = tem ;  $ ~~}  $ ~}  $ ~cout << "strange" << endl ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~int n , b , p , B , P ;  $ ~cin >> n >> b >> p ;  $ ~B = 0 ;  $ ~P = 0 ;  $ ~P = n * p ;  $ ~while ( n > 1 ) {  $ ~~int r = n % 2 ;  $ ~~n /= 2 ;  $ ~~B += n * ( 2 * b + 1 ) ;  $ ~~n += r ;  $ ~}  $ ~cout << B << " " << P << endl ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~long long n , c , t , sum = 0 ;  $ ~cin >> n ;  $ ~cin >> c ;  $ ~cin >> t ;  $ ~sum ++ ;  $ ~int a = t ;  $ ~for ( int i = 1 ; i < n ; i ++ ) {  $ ~~cin >> t ;  $ ~~if ( t - a <= c )  $ ~~~sum ++ ;  $ ~~else if ( t - a > c )  $ ~~~sum = 1 ;  $ ~~a = t ;  $ ~}  $ ~cout << sum << endl ;  $ ~return 0 ;  $ }
long long mx [ 1011 ] , arr [ 1001 ] , arr2 [ 1001 ] , n ;  $ int main ( ) {  $ ~cin >> n ;  $ ~for ( int i = 0 ; i < n ; i ++ ) cin >> arr [ i ] ;  $ ~for ( int i = 0 ; i < n ; i ++ ) cin >> arr2 [ i ] ;  $ ~long long ans = - 1 ;  $ ~for ( int i = 0 ; i < n ; i ++ ) {  $ ~~long long add = arr [ i ] ;  $ ~~long long add2 = arr2 [ i ] ;  $ ~~for ( int j = i + 1 ; j < n ; j ++ ) {  $ ~~~add |= arr [ j ] ;  $ ~~~add2 |= arr2 [ j ] ;  $ ~~~mx [ i ] = max ( mx [ i ] , add + add2 ) ;  $ ~~~ans = max ( ans , mx [ i ] ) ;  $ ~~}  $ ~~mx [ i ] = max ( mx [ i ] , add + add2 ) ;  $ ~~ans = max ( ans , mx [ i ] ) ;  $ ~}  $ ~cout << ans << endl ;  $ }
int main ( ) {  $ ~int n ;  $ ~cin >> n ;  $ ~int counter = 0 ;  $ ~int b = 0 ;  $ ~int max = 0 ;  $ ~int x ;  $ ~while ( n -- ) {  $ ~~cin >> x ;  $ ~~if ( x >= b ) {  $ ~~~counter ++ ;  $ ~~~if ( counter >= max ) { max = counter ; }  $ ~~} else {  $ ~~~counter = 1 ;  $ ~~}  $ ~~b = x ;  $ ~}  $ ~cout << max << endl ;  $ }
int main ( ) {  $ ~long long int n ;  $ ~cin >> n ;  $ ~if ( n % 2 == 0 )  $ ~~cout << ( n / 2 ) << endl ;  $ ~else  $ ~~cout << - ( ( n / 2 ) + 1 ) << endl ;  $ ~return 0 ;  $ }
int a [ 105 ] ;  $ int main ( ) {  $ ~int n , m ;  $ ~cin >> n >> m ;  $ ~int k = 0 ;  $ ~for ( int i = 1 ; i <= n ; i ++ ) {  $ ~~int x ;  $ ~~cin >> x ;  $ ~~for ( int j = 0 ; j < x ; j ++ ) {  $ ~~~int t ;  $ ~~~cin >> t ;  $ ~~~a [ t ] = 1 ;  $ ~~}  $ ~}  $ ~for ( int i = 1 ; i <= m ; i ++ ) {  $ ~~if ( a [ i ] != 1 ) {  $ ~~~k = 1 ;  $ ~~~break ;  $ ~~}  $ ~}  $ ~if ( k == 0 )  $ ~~cout << "YES" << endl ;  $ ~else  $ ~~cout << "NO" << endl ;  $ }
int main ( ) {  $ ~int n , k ;  $ ~cin >> n >> k ;  $ ~string s ;  $ ~vector < char > alfa ( 26 ) ;  $ ~for ( int i = 0 ; i < int ( 26 ) ; i ++ ) alfa [ i ] = char ( int ( 'a' ) + i ) ;  $ ~int cont = 0 ;  $ ~for ( int i = 0 ; i < int ( n ) ; i ++ ) {  $ ~~s += alfa [ cont ] ;  $ ~~cont ++ ;  $ ~~if ( cont == 26 or cont == k ) cont = 0 ;  $ ~}  $ ~cout << s << endl ;  $ ~return 0 ;  $ }
const int inf = 0 x3f3f3f3f ;  $ const int maxn = 110 ;  $ int max ( int a , int b ) {  $ ~return a > b ? a : b ;  $ }  $ int min ( int a , int b ) {  $ ~return a > b ? b : a ;  $ }  $ int a [ maxn ] ;  $ int main ( ) {  $ ~int i , n ;  $ ~while ( cin >> n ) {  $ ~~a [ 0 ] = 0 , a [ n + 1 ] = 1001 ;  $ ~~for ( i = 1 ; i <= n ; i ++ ) cin >> a [ i ] ;  $ ~~int l ;  $ ~~int maxi = 1 ;  $ ~~for ( l = 0 ; l <= n ; l ++ ) {  $ ~~~int pos = l ;  $ ~~~while ( l <= n && a [ l ] + 1 == a [ l + 1 ] ) { l ++ ; }  $ ~~~if ( l - pos + 1 > maxi ) { maxi = l - pos + 1 ; }  $ ~~}  $ ~~if ( maxi == 1 )  $ ~~~cout << "0" << endl ;  $ ~~else  $ ~~~cout << maxi - 2 << endl ;  $ ~}  $ ~return 0 ;  $ }
int main ( ) {  $ ~int a , b ;  $ ~cin >> a >> b ;  $ ~int min ;  $ ~int max ;  $ ~if ( a < b ) {  $ ~~min = a ;  $ ~~max = b ;  $ ~} else {  $ ~~min = b ;  $ ~~max = a ;  $ ~}  $ ~cout << min << " " ;  $ ~cout << ( max - min ) / 2 << endl ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~int i , n , x , s = 0 , max = 0 ;  $ ~cin >> n ;  $ ~for ( i = 0 ; i < n ; i ++ ) {  $ ~~cin >> x ;  $ ~~if ( x > max ) max = x ;  $ ~~s += x ;  $ ~}  $ ~cout << n * max - s << endl ;  $ ~return 0 ;  $ }
long long q [ 100100 ] , a [ 100100 ] ;  $ int main ( ) {  $ ~long long n , m ;  $ ~cin >> m ;  $ ~for ( long long i = 0 ; i < m ; ++ i ) cin >> q [ i ] ;  $ ~sort ( q , q + m ) ;  $ ~cin >> n ;  $ ~for ( long long i = 0 ; i < n ; ++ i ) cin >> a [ i ] ;  $ ~sort ( a , a + n ) ;  $ ~long long now = 0 ;  $ ~long long sum = 0 ;  $ ~bool flag = 0 ;  $ ~for ( long long i = n - 1 ; i >= 0 ; -- i ) {  $ ~~if ( now == q [ 0 ] ) {  $ ~~~if ( flag )  $ ~~~~now = 0 ;  $ ~~~else  $ ~~~~flag = 1 ;  $ ~~} else {  $ ~~~++ now ;  $ ~~~sum += a [ i ] ;  $ ~~~flag = 0 ;  $ ~~}  $ ~}  $ ~cout << sum << "\n" ;  $ ~return 0 ;  $ }
string str ;  $ bool check ( int x , int y ) {  $ ~int i = x , j = y ;  $ ~while ( i < j ) {  $ ~~if ( str [ i ] == str [ j ] ) {  $ ~~~i ++ ;  $ ~~~j -- ;  $ ~~} else  $ ~~~return false ;  $ ~}  $ ~return true ;  $ }  $ int main ( ) {  $ ~int k ;  $ ~cin >> str >> k ;  $ ~int len = str . size ( ) ;  $ ~if ( len % k != 0 ) {  $ ~~cout << "NO" << endl ;  $ ~~return 0 ;  $ ~}  $ ~k = len / k ;  $ ~int i = 0 ;  $ ~while ( i < len ) {  $ ~~if ( ! check ( i , i + k - 1 ) ) {  $ ~~~cout << "NO" << endl ;  $ ~~~return 0 ;  $ ~~}  $ ~~i += k ;  $ ~}  $ ~cout << "YES" << endl ;  $ ~return 0 ;  $ }
const long long mod = 100 ;  $ long long re ( long long a , long long n ) {  $ ~long long ans = 1 ;  $ ~while ( n > 0 ) {  $ ~~if ( n & 1 ) ans = ( ans * a ) % mod ;  $ ~~a = ( a * a ) % mod ;  $ ~~n >> = 1 ;  $ ~}  $ ~return ans ;  $ }  $ int main ( ) {  $ ~long long n ;  $ ~while ( cin >> n ) { cout << "25" << endl ; }  $ ~return 0 ;  $ }
int main ( ) {  $ ~int k , a , b , v ;  $ ~cin >> k >> a >> b >> v ;  $ ~int cnt = 0 ;  $ ~while ( true ) {  $ ~~cnt ++ ;  $ ~~int box = min ( k - 1 , b ) ;  $ ~~b = b - box ;  $ ~~int nuts = ( box + 1 ) * v ;  $ ~~a = a - nuts ;  $ ~~if ( a <= 0 ) break ;  $ ~}  $ ~cout << cnt << endl ;  $ }
int main ( ) {  $ ~int FoundCard ;  $ ~int MaxNum ;  $ ~int numbers ;  $ ~int sum = 0 ;  $ ~cin >> FoundCard >> MaxNum ;  $ ~for ( int i = 0 ; i < FoundCard ; i ++ ) {  $ ~~cin >> numbers ;  $ ~~sum += numbers ;  $ ~}  $ ~if ( sum < 0 ) sum *= - 1 ;  $ ~if ( sum % MaxNum == 0 )  $ ~~sum /= MaxNum ;  $ ~else  $ ~~sum = ( sum / MaxNum ) + 1 ;  $ ~cout << sum << endl ;  $ ~return 0 ;  $ }
int charToInt ( char c1 ) {  $ ~int p1 ;  $ ~if ( int ( c1 ) == 94 )  $ ~~p1 = 1 ;  $ ~else if ( int ( c1 ) == 62 )  $ ~~p1 = 2 ;  $ ~else if ( int ( c1 ) == 118 )  $ ~~p1 = 3 ;  $ ~else if ( int ( c1 ) == 60 )  $ ~~p1 = 4 ;  $ ~return p1 ;  $ }  $ int main ( ) {  $ ~char c1 , c2 ;  $ ~cin >> c1 ;  $ ~cin >> c2 ;  $ ~long long r ;  $ ~cin >> r ;  $ ~int n = r % 4 ;  $ ~int p1 = charToInt ( c1 ) , p2 = charToInt ( c2 ) ;  $ ~int s1 = p1 , s2 = p1 ;  $ ~for ( int i = 0 ; i < n ; i ++ ) {  $ ~~if ( s1 < 4 )  $ ~~~s1 ++ ;  $ ~~else  $ ~~~s1 = 1 ;  $ ~~if ( s2 > 1 )  $ ~~~s2 -- ;  $ ~~else  $ ~~~s2 = 4 ;  $ ~}  $ ~if ( ( s1 == p2 ) && ( s2 == p2 ) )  $ ~~cout << "undefined" << endl ;  $ ~else if ( ( s1 == p2 ) )  $ ~~cout << "cw" << endl ;  $ ~else  $ ~~cout << "ccw" << endl ;  $ }
bool ra ( int x1 , int y1 , int x2 , int y2 , int x3 , int y3 ) {  $ ~int d1 = ( abs ( x1 - x2 ) ) * ( abs ( x1 - x2 ) ) + ( abs ( y1 - y2 ) ) * ( abs ( y1 - y2 ) ) ;  $ ~int d2 = ( abs ( x1 - x3 ) ) * ( abs ( x1 - x3 ) ) + ( abs ( y1 - y3 ) ) * ( abs ( y1 - y3 ) ) ;  $ ~int d3 = ( abs ( x3 - x2 ) ) * ( abs ( x3 - x2 ) ) + ( abs ( y3 - y2 ) ) * ( abs ( y3 - y2 ) ) ;  $ ~if ( ( d1 && d2 && d3 ) == 0 ) return false ;  $ ~if ( d1 + d2 == d3 || d1 + d3 == d2 || d2 + d3 == d1 ) return true ;  $ ~return false ;  $ }  $ int main ( ) {  $ ~int n , x1 , x2 , x3 , y1 , y2 , y3 ;  $ ~cin >> x1 >> y1 >> x2 >> y2 >> x3 >> y3 ;  $ ~if ( ra ( x1 , y1 , x2 , y2 , x3 , y3 ) ) {  $ ~~cout << "RIGHT" << endl ;  $ ~~return 0 ;  $ ~}  $ ~x1 ++ ;  $ ~if ( ra ( x1 , y1 , x2 , y2 , x3 , y3 ) ) {  $ ~~cout << "ALMOST" << endl ;  $ ~~return 0 ;  $ ~}  $ ~x1 -= 2 ;  $ ~if ( ra ( x1 , y1 , x2 , y2 , x3 , y3 ) ) {  $ ~~cout << "ALMOST" << endl ;  $ ~~return 0 ;  $ ~}  $ ~x1 ++ ;  $ ~y1 ++ ;  $ ~if ( ra ( x1 , y1 , x2 , y2 , x3 , y3 ) ) {  $ ~~cout << "ALMOST" << endl ;  $ ~~return 0 ;  $ ~}  $ ~y1 -= 2 ;  $ ~if ( ra ( x1 , y1 , x2 , y2 , x3 , y3 ) ) {  $ ~~cout << "ALMOST" << endl ;  $ ~~return 0 ;  $ ~}  $ ~y1 ++ ;  $ ~x2 ++ ;  $ ~if ( ra ( x1 , y1 , x2 , y2 , x3 , y3 ) ) {  $ ~~cout << "ALMOST" << endl ;  $ ~~return 0 ;  $ ~}  $ ~x2 -= 2 ;  $ ~if ( ra ( x1 , y1 , x2 , y2 , x3 , y3 ) ) {  $ ~~cout << "ALMOST" << endl ;  $ ~~return 0 ;  $ ~}  $ ~x2 ++ ;  $ ~y2 ++ ;  $ ~if ( ra ( x1 , y1 , x2 , y2 , x3 , y3 ) ) {  $ ~~cout << "ALMOST" << endl ;  $ ~~return 0 ;  $ ~}  $ ~y2 -= 2 ;  $ ~if ( ra ( x1 , y1 , x2 , y2 , x3 , y3 ) ) {  $ ~~cout << "ALMOST" << endl ;  $ ~~return 0 ;  $ ~}  $ ~y2 ++ ;  $ ~x3 ++ ;  $ ~if ( ra ( x1 , y1 , x2 , y2 , x3 , y3 ) ) {  $ ~~cout << "ALMOST" << endl ;  $ ~~return 0 ;  $ ~}  $ ~x3 -= 2 ;  $ ~if ( ra ( x1 , y1 , x2 , y2 , x3 , y3 ) ) {  $ ~~cout << "ALMOST" << endl ;  $ ~~return 0 ;  $ ~}  $ ~x3 ++ ;  $ ~y3 ++ ;  $ ~if ( ra ( x1 , y1 , x2 , y2 , x3 , y3 ) ) {  $ ~~cout << "ALMOST" << endl ;  $ ~~return 0 ;  $ ~}  $ ~y3 -= 2 ;  $ ~if ( ra ( x1 , y1 , x2 , y2 , x3 , y3 ) ) {  $ ~~cout << "ALMOST" << endl ;  $ ~~return 0 ;  $ ~}  $ ~cout << "NEITHER" << endl ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~int n , i , a , b , x , y ;  $ ~while ( cin >> n ) {  $ ~~x = 0 ;  $ ~~y = 0 ;  $ ~~for ( i = 0 ; i < n ; i ++ ) {  $ ~~~cin >> a >> b ;  $ ~~~if ( a > b ) {  $ ~~~~x ++ ;  $ ~~~} else if ( a < b ) {  $ ~~~~y ++ ;  $ ~~~}  $ ~~}  $ ~~if ( x > y ) {  $ ~~~cout << "Mishka" << endl ;  $ ~~} else if ( x < y ) {  $ ~~~cout << "Chris" << endl ;  $ ~~} else {  $ ~~~cout << "Friendship is magic!^^" << endl ;  $ ~~}  $ ~}  $ }
int main ( ) {  $ ~int c [ 4 ] = { } ;  $ ~int n ;  $ ~cin >> n ;  $ ~for ( int i = 0 ; i < n ; i ++ ) {  $ ~~int a ;  $ ~~cin >> a ;  $ ~~c [ a ] ++ ;  $ ~}  $ ~int sum = c [ 1 ] + c [ 2 ] + c [ 3 ] ;  $ ~int ma = max ( c [ 1 ] , max ( c [ 2 ] , c [ 3 ] ) ) ;  $ ~cout << sum - ma << endl ;  $ }
int main ( ) {  $ ~vector < int > f ;  $ ~vector < int > s ;  $ ~vector < int > h ;  $ ~int n ;  $ ~cin >> n ;  $ ~for ( int i = 0 ; i < n ; i ++ ) {  $ ~~int t ;  $ ~~cin >> t ;  $ ~~if ( t == 1 ) {  $ ~~~f . push_back ( i + 1 ) ;  $ ~~} else if ( t == 2 ) {  $ ~~~s . push_back ( i + 1 ) ;  $ ~~} else {  $ ~~~h . push_back ( i + 1 ) ;  $ ~~}  $ ~}  $ ~int r = min ( f . size ( ) , min ( s . size ( ) , h . size ( ) ) ) ;  $ ~cout << r << "\n" ;  $ ~for ( int i = 0 ; i < r ; i ++ ) { cout << f [ i ] << " " << s [ i ] << " " << h [ i ] << "\n" ; }  $ ~return 0 ;  $ }
int main ( ) {  $ ~long long n , d , i ;  $ ~cin >> n >> d ;  $ ~long long a [ n ] , count = 0 , m = 10001 ;  $ ~for ( i = 0 ; i < n ; i ++ ) { cin >> a [ i ] ; }  $ ~sort ( a , a + n ) ;  $ ~long long index1 , j , index2 ;  $ ~for ( i = 0 ; i < n ; i ++ ) {  $ ~~count = 0 ;  $ ~~for ( j = n - 1 ; j > i ; j -- ) {  $ ~~~if ( ( a [ j ] - a [ i ] ) > d ) { count ++ ; }  $ ~~}  $ ~~m = min ( count + i , m ) ;  $ ~}  $ ~cout << m << endl ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~long long T , S , q ;  $ ~cin >> T >> S >> q ;  $ ~int ans = 0 ;  $ ~while ( S < T ) {  $ ~~ans ++ ;  $ ~~S = S * q ;  $ ~}  $ ~cout << ans << endl ;  $ ~return 0 ;  $ }
const int maxn = 100 ;  $ const int INF = 0 x3f3f3f3f ;  $ const int MOD = 998244353 ;  $ int n , a [ 105 ] , b [ 105 ] , numa [ 6 ] , numb [ 6 ] , ans = 0 ;  $ int main ( ) {  $ ~memset ( numa , 0 , sizeof ( numa ) ) ;  $ ~memset ( numb , 0 , sizeof ( numb ) ) ;  $ ~cin >> n ;  $ ~for ( int i = 0 ; i < n ; i ++ ) {  $ ~~cin >> a [ i ] ;  $ ~~numa [ a [ i ] ] ++ ;  $ ~}  $ ~for ( int i = 0 ; i < n ; i ++ ) {  $ ~~cin >> b [ i ] ;  $ ~~numb [ b [ i ] ] ++ ;  $ ~}  $ ~for ( int i = 1 ; i <= 5 ; i ++ ) {  $ ~~if ( ( numa [ i ] + numb [ i ] ) % 2 == 1 ) {  $ ~~~ans = - 1 ;  $ ~~~break ;  $ ~~} else {  $ ~~~ans += ( abs ( numb [ i ] + numa [ i ] ) / 2 - min ( numb [ i ] , numa [ i ] ) ) ;  $ ~~}  $ ~}  $ ~cout << ( ans == - 1 ? - 1 : ans / 2 ) << endl ;  $ ~return 0 ;  $ }
double N , A , B , val ;  $ int main ( ) {  $ ~cin >> N >> A >> B ;  $ ~val = N / ( A + B ) * A ;  $ ~cout << val << '\n' ;  $ }
long int abs ( long int x , long int y ) {  $ ~if ( x >= y ) {  $ ~~return x - y ;  $ ~} else {  $ ~~return y - x ;  $ ~}  $ }  $ int main ( ) {  $ ~long int n , h , a , b , k , i , ta , fa , tb , fb , banyak ;  $ ~cin >> n >> h >> a >> b >> k ;  $ ~for ( i = 0 ; i < k ; i ++ ) {  $ ~~banyak = 0 ;  $ ~~cin >> ta >> fa >> tb >> fb ;  $ ~~if ( ta == tb ) {  $ ~~~cout << abs ( fa , fb ) << endl ;  $ ~~} else {  $ ~~~if ( fa > b ) {  $ ~~~~banyak += fa - b ;  $ ~~~~banyak += abs ( b , fb ) ;  $ ~~~} else if ( fa < a ) {  $ ~~~~banyak += a - fa ;  $ ~~~~banyak += abs ( a , fb ) ;  $ ~~~} else {  $ ~~~~banyak += abs ( fa , fb ) ;  $ ~~~}  $ ~~~banyak += abs ( ta , tb ) ;  $ ~~~cout << banyak << endl ;  $ ~~}  $ ~}  $ ~return 0 ;  $ }
long long MOD = 1000000009 ;  $ long long pw ( long long a , long long b ) {  $ ~if ( b == 0 ) return 1 ;  $ ~if ( b == 1 ) return a % MOD ;  $ ~if ( b % 2 ) {  $ ~~long long rs = pw ( a , b - 1 ) ;  $ ~~return ( rs * a ) % MOD ;  $ ~}  $ ~long long rs = pw ( a , b / 2 ) ;  $ ~return ( rs * rs ) % MOD ;  $ }  $ vector < long long > sm ;  $ long long solve ( long long a , long long b ) {  $ ~if ( b == 0 ) return 0 ;  $ ~for ( long long i = 0 ; i < 35 ; i ++ ) {  $ ~~long long ba = ( 1 LL << i ) & b ;  $ ~~if ( ba == 0 ) continue ;  $ ~~return ( sm [ i ] + solve ( a , b - ( 1 LL << i ) ) * pw ( a , ( 1 LL << i ) ) ) % MOD ;  $ ~}  $ }  $ int main ( ) {  $ ~long long n , a , b , k ;  $ ~cin >> n >> a >> b >> k ;  $ ~string s ;  $ ~cin >> s ;  $ ~long long X = 1 , Y = 1 ;  $ ~for ( long long i = 0 ; i < k ; i ++ ) {  $ ~~X *= b ;  $ ~~X %= MOD ;  $ ~}  $ ~for ( long long i = 0 ; i < k ; i ++ ) {  $ ~~Y *= a ;  $ ~~Y %= MOD ;  $ ~}  $ ~X *= pw ( Y , MOD - 2 ) ;  $ ~X %= MOD ;  $ ~sm . push_back ( 1 ) ;  $ ~for ( long long i = 0 ; i < 40 ; i ++ ) {  $ ~~sm . push_back ( sm . back ( ) + sm . back ( ) * pw ( X , ( 1 LL << i ) ) ) ;  $ ~~sm . back ( ) %= MOD ;  $ ~}  $ ~long long st = solve ( X , ( n + 1 ) / k ) ;  $ ~long long ans = 0 ;  $ ~for ( long long i = 0 ; i < k ; i ++ ) {  $ ~~long long rs = ( pw ( b , i ) * pw ( a , n - i ) ) % MOD ;  $ ~~if ( s [ i ] == '-' ) rs *= - 1 ;  $ ~~rs *= st ;  $ ~~ans += rs ;  $ ~~ans %= MOD ;  $ ~}  $ ~if ( ans < 0 ) ans += MOD ;  $ ~cout << ans << endl ;  $ }
int main ( ) {  $ ~long long n , sum = 0 ;  $ ~cin >> n ;  $ ~int arr [ n ] ;  $ ~for ( int i = 0 ; i < n ; i ++ ) {  $ ~~cin >> arr [ i ] ;  $ ~~if ( i > 0 ) arr [ i ] += arr [ i - 1 ] ;  $ ~}  $ ~for ( int i = 0 ; i < n ; i ++ ) {  $ ~~if ( arr [ i ] >= arr [ n - 1 ] / 2 && arr [ n - 1 ] % 2 == 0 )  $ ~~~return cout << i + 1 << "\n" , 0 ;  $ ~~else if ( arr [ i ] > arr [ n - 1 ] / 2 )  $ ~~~return cout << i + 1 << "\n" , 0 ;  $ ~}  $ ~return 0 ;  $ }
int main ( ) {  $ ~int i , j , k ;  $ ~char s [ 100010 ] ;  $ ~while ( gets ( s ) ) {  $ ~~int len = strlen ( s ) ;  $ ~~for ( i = 0 ; i < len ; i ++ ) {  $ ~~~if ( s [ i ] != 'a' ) { break ; }  $ ~~}  $ ~~for ( j = i ; j < len ; j ++ ) {  $ ~~~if ( s [ j ] == 'a' ) { break ; }  $ ~~~s [ j ] -- ;  $ ~~}  $ ~~if ( i == len ) { s [ len - 1 ] = 'z' ; }  $ ~~cout << s << endl ;  $ ~}  $ ~return 0 ;  $ }
int main ( ) {  $ ~long long x1 , x2 , y1 , y2 , n ;  $ ~cin >> x1 >> y1 >> x2 >> y2 ;  $ ~cin >> n ;  $ ~int t = 0 ;  $ ~for ( int i = 0 ; i < n ; i ++ ) {  $ ~~long long a , b , c ;  $ ~~cin >> a >> b >> c ;  $ ~~if ( ( a * x1 + b * y1 + c ) > 0 && ( a * x2 + b * y2 + c ) < 0 ) t ++ ;  $ ~~if ( ( a * x1 + b * y1 + c ) < 0 && ( a * x2 + b * y2 + c ) > 0 ) t ++ ;  $ ~}  $ ~cout << t << endl ;  $ }
int n , a , b ;  $ bool so = true ;  $ int main ( ) {  $ ~cin >> n >> a ;  $ ~bool res [ n ] ;  $ ~for ( int i = 0 ; i < n ; i ++ ) { res [ i ] = false ; }  $ ~for ( int i = 0 ; i < a ; i ++ ) {  $ ~~int temp ;  $ ~~cin >> temp ;  $ ~~res [ temp - 1 ] = true ;  $ ~}  $ ~cin >> b ;  $ ~for ( int i = 0 ; i < b ; i ++ ) {  $ ~~int temp ;  $ ~~cin >> temp ;  $ ~~res [ temp - 1 ] = true ;  $ ~}  $ ~for ( int i = 0 ; i < n ; i ++ ) {  $ ~~if ( res [ i ] == false ) {  $ ~~~so = false ;  $ ~~~break ;  $ ~~}  $ ~}  $ ~if ( so )  $ ~~cout << "I become the guy." << endl ;  $ ~else  $ ~~cout << "Oh, my keyboard!" << endl ;  $ ~return 0 ;  $ }
bool full [ 101 ] ;  $ int main ( ) {  $ ~int n ;  $ ~int x , y ;  $ ~cin >> n >> x >> y ;  $ ~for ( int i = 1 ; i < n ; i ++ ) {  $ ~~int u , v ;  $ ~~cin >> u >> v ;  $ ~~for ( int i = u ; i < v ; i ++ ) full [ i ] = 1 ;  $ ~}  $ ~int res = 0 ;  $ ~for ( int i = x ; i < y ; i ++ ) res += ! full [ i ] ;  $ ~cout << res << endl ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~int x , hour , minit ;  $ ~cin >> x >> hour >> minit ;  $ ~if ( hour == 0 ) hour = 24 ;  $ ~int cnt = 0 ;  $ ~while ( 1 ) {  $ ~~if ( hour % 10 == 7 || minit % 10 == 7 ) break ;  $ ~~minit -= x ;  $ ~~if ( minit < 0 ) {  $ ~~~hour -= 1 ;  $ ~~~minit = 60 + minit ;  $ ~~}  $ ~~if ( hour <= 0 ) hour = 24 ;  $ ~~cnt ++ ;  $ ~}  $ ~cout << cnt << endl ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~int n , m , lmin = 0 , cmin = 0 , lmax = 0 , cmax = 0 ;  $ ~int k = 0 , x = 0 ;  $ ~cin >> n >> m ;  $ ~string s [ 55 ] ;  $ ~for ( int i = 0 ; i < n ; i ++ ) { cin >> s [ i ] ; }  $ ~for ( int i = 0 ; i < n ; i ++ ) {  $ ~~for ( int j = 0 ; j < m ; j ++ ) {  $ ~~~if ( s [ i ] [ j ] == '*' ) {  $ ~~~~if ( k == 0 or i < lmin ) {  $ ~~~~~lmin = i ;  $ ~~~~~k ++ ;  $ ~~~~}  $ ~~~}  $ ~~~if ( s [ i ] [ j ] == '*' ) {  $ ~~~~if ( i >= lmax ) { lmax = i ; }  $ ~~~}  $ ~~~if ( s [ i ] [ j ] == '*' ) {  $ ~~~~if ( j < cmin or x == 0 ) {  $ ~~~~~cmin = j ;  $ ~~~~~x ++ ;  $ ~~~~}  $ ~~~}  $ ~~~if ( s [ i ] [ j ] == '*' ) {  $ ~~~~if ( j >= cmax ) { cmax = j ; }  $ ~~~}  $ ~~}  $ ~}  $ ~for ( int i = lmin ; i <= lmax ; i ++ ) {  $ ~~for ( int j = cmin ; j <= cmax ; j ++ ) { cout << s [ i ] [ j ] ; }  $ ~~cout << endl ;  $ ~}  $ }
char c , d ;  $ long long n , x , y ;  $ map < char , long long > m ;  $ map < long long , char > M ;  $ void solve ( ) {  $ ~cin >> c >> d >> n ;  $ ~if ( n % 2 == 0 ) {  $ ~~cout << "undefined" << endl ;  $ ~~return ;  $ ~} ;  $ ~x = n % 4 ;  $ ~y = ( m [ c ] + x ) % 4 ;  $ ~if ( M [ y ] == d ) {  $ ~~cout << "cw" << endl ;  $ ~~return ;  $ ~} ;  $ ~y = ( m [ c ] - x + 4 ) % 4 ;  $ ~if ( M [ y ] == d ) {  $ ~~cout << "ccw" << endl ;  $ ~~return ;  $ ~} ;  $ ~{  $ ~~cout << "undefined" << endl ;  $ ~~return ;  $ ~} ;  $ }  $ void prep ( ) {  $ ~m [ '^' ] = 0 , m [ '>' ] = 1 , m [ 'v' ] = 2 , m [ '<' ] = 3 ;  $ ~M [ 0 ] = '^' , M [ 1 ] = '>' , M [ 2 ] = 'v' , M [ 3 ] = '<' ;  $ }  $ int main ( ) {  $ ~int t = 1 ;  $ ~prep ( ) ;  $ ~cout << fixed << setprecision ( 12 ) ;  $ ~while ( t -- ) solve ( ) ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~string str ;  $ ~cin >> str ;  $ ~int index = 0 ;  $ ~vector < char > v ;  $ ~v . reserve ( 5 ) ;  $ ~if ( str . length ( ) >= 5 ) {  $ ~~for ( int i = 0 ; i < str . length ( ) ; i ++ ) {  $ ~~~if ( str [ i ] == 'h' ) {  $ ~~~~v . push_back ( 'h' ) ;  $ ~~~~index = i + 1 ;  $ ~~~~break ;  $ ~~~}  $ ~~}  $ ~~for ( int i = index ; i < str . length ( ) ; i ++ ) {  $ ~~~if ( str [ i ] == 'e' ) {  $ ~~~~v . push_back ( 'e' ) ;  $ ~~~~index = i + 1 ;  $ ~~~~break ;  $ ~~~}  $ ~~}  $ ~~int cnt = 1 ;  $ ~~for ( int i = index ; i < str . length ( ) ; i ++ ) {  $ ~~~if ( str [ i ] == 'l' && cnt <= 2 ) {  $ ~~~~v . push_back ( 'l' ) ;  $ ~~~~cnt ++ ;  $ ~~~}  $ ~~}  $ ~~for ( int i = index + 1 ; i < str . length ( ) ; i ++ ) {  $ ~~~if ( str [ i ] == 'o' ) {  $ ~~~~v . push_back ( str [ i ] ) ;  $ ~~~~break ;  $ ~~~}  $ ~~}  $ ~}  $ ~if ( v [ 0 ] == 'h' && v [ 1 ] == 'e' && v [ 2 ] == 'l' && v [ 3 ] == 'l' && v [ 4 ] == 'o' )  $ ~~cout << "YES" << endl ;  $ ~else  $ ~~cout << "NO" << endl ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~int n ;  $ ~int soma = 0 ;  $ ~int a1 , b1 , a2 , b2 , a3 , b3 , n1 , n2 , n3 ;  $ ~cin >> n >> a1 >> b1 >> a2 >> b2 >> a3 >> b3 ;  $ ~soma = a1 + a2 + a3 ;  $ ~n1 = 0 ;  $ ~n2 = 0 ;  $ ~n3 = 0 ;  $ ~if ( soma == n ) {  $ ~~n1 = a1 ;  $ ~~n2 = a2 ;  $ ~~n3 = a3 ;  $ ~} else if ( n - soma <= b1 - a1 ) {  $ ~~n1 = a1 + n - soma ;  $ ~~n2 = a2 ;  $ ~~n3 = a3 ;  $ ~} else if ( n - soma > b1 - a1 ) {  $ ~~soma = b1 + a2 + a3 ;  $ ~~if ( n - soma <= b2 - a2 ) {  $ ~~~n1 = b1 ;  $ ~~~n2 = a2 + n - soma ;  $ ~~~n3 = a3 ;  $ ~~} else {  $ ~~~soma = b1 + b2 + a3 ;  $ ~~~n1 = b1 ;  $ ~~~n2 = b2 ;  $ ~~~n3 = a3 + n - soma ;  $ ~~}  $ ~}  $ ~cout << n1 << " " << n2 << " " << n3 << "\n" ;  $ }
int main ( ) {  $ ~long long n , k ;  $ ~cin >> n >> k ;  $ ~if ( ( n / k ) % 2 == 0 ) {  $ ~~cout << "NO" << endl ;  $ ~} else {  $ ~~cout << "YES" << endl ;  $ ~}  $ ~return 0 ;  $ }
string s ;  $ int a , b ;  $ int len ;  $ int main ( ) {  $ ~cin >> s ;  $ ~int n = s . length ( ) ;  $ ~int w [ n + 10 ] ;  $ ~for ( int i = 0 ; i < s . length ( ) ; i ++ ) {  $ ~~if ( s [ i ] == '(' ) {  $ ~~~a ++ ;  $ ~~} else if ( s [ i ] == '#' ) {  $ ~~~w [ ++ len ] = 1 ;  $ ~~~a -- ;  $ ~~} else if ( s [ i ] == ')' ) {  $ ~~~a -- ;  $ ~~}  $ ~~if ( a < 0 ) {  $ ~~~cout << - 1 << endl ;  $ ~~~return 0 ;  $ ~~}  $ ~}  $ ~for ( int i = s . length ( ) - 1 ; i >= 0 ; i -- ) {  $ ~~if ( s [ i ] == ')' ) {  $ ~~~b ++ ;  $ ~~} else if ( s [ i ] == '(' ) {  $ ~~~b -- ;  $ ~~} else if ( s [ i ] == '#' ) {  $ ~~~break ;  $ ~~}  $ ~~if ( b < 0 ) {  $ ~~~cout << - 1 << endl ;  $ ~~~return 0 ;  $ ~~}  $ ~}  $ ~w [ len ] += a ;  $ ~for ( int i = 1 ; i <= len ; i ++ ) { cout << w [ i ] << endl ; }  $ ~return 0 ;  $ }
bool isPalindrome ( string s ) {  $ ~string sCopy = s ;  $ ~reverse ( s . begin ( ) , s . end ( ) ) ;  $ ~if ( s == sCopy )  $ ~~return true ;  $ ~else  $ ~~return false ;  $ }  $ int main ( ) {  $ ~string s ;  $ ~int k ;  $ ~cin >> s ;  $ ~cin >> k ;  $ ~int n = s . size ( ) ;  $ ~int check = 0 ;  $ ~if ( n % k == 0 ) {  $ ~~int len = n / k ;  $ ~~for ( int i = 0 ; i < n ; i ++ ) {  $ ~~~string word = s . substr ( i , len ) ;  $ ~~~if ( isPalindrome ( word ) ) check ++ ;  $ ~~~i += len - 1 ;  $ ~~}  $ ~~if ( check == k )  $ ~~~cout << "YES" << endl ;  $ ~~else  $ ~~~cout << "NO" << endl ;  $ ~~return 0 ;  $ ~}  $ ~cout << "NO" << endl ;  $ }
int main ( ) {  $ ~int a [ 110 ] , b [ 110 ] , ant = 0 , bnt = 0 , n ;  $ ~cin >> n ;  $ ~for ( int i = 1 ; i <= n ; i ++ ) {  $ ~~cin >> a [ i ] >> b [ i ] ;  $ ~~if ( a [ i ] & 1 ) ant ++ ;  $ ~~if ( b [ i ] & 1 ) bnt ++ ;  $ ~}  $ ~if ( ant % 2 == 0 && bnt % 2 == 0 ) {  $ ~~cout << 0 << endl ;  $ ~} else if ( ( ant + bnt ) % 2 != 0 ) {  $ ~~cout << - 1 << endl ;  $ ~} else {  $ ~~for ( int i = 1 ; i <= n ; i ++ ) {  $ ~~~if ( a [ i ] & 1 && b [ i ] % 2 == 0 ) return cout << 1 << endl , 0 ;  $ ~~~if ( b [ i ] & 1 && a [ i ] % 2 == 0 ) return cout << 1 << endl , 0 ;  $ ~~}  $ ~~cout << - 1 << endl ;  $ ~}  $ ~return 0 ;  $ }
int main ( ) {  $ ~string s , t ;  $ ~cin >> s >> t ;  $ ~int pos = 0 ;  $ ~for ( int i = 0 ; i < t . length ( ) ; i ++ ) {  $ ~~if ( t [ i ] == s [ pos ] ) { pos ++ ; }  $ ~}  $ ~cout << pos + 1 << "\n" ;  $ ~return 0 ;  $ }
int list1 [ 1000010 ] , list2 [ 1000010 ] ;  $ int main ( ) {  $ ~int n , k , lastZero = - 1 ;  $ ~cin >> n >> k ;  $ ~for ( int i = 0 ; i < n ; i ++ ) {  $ ~~cin >> list1 [ i ] ;  $ ~~if ( list1 [ i ] == 0 ) lastZero = i ;  $ ~}  $ ~for ( int i = 0 ; i < k ; i ++ ) cin >> list2 [ i ] ;  $ ~if ( k > 1 )  $ ~~cout << "Yes" << endl ;  $ ~else {  $ ~~list1 [ lastZero ] = list2 [ 0 ] ;  $ ~~bool band = 0 ;  $ ~~for ( int i = 1 ; i < n ; i ++ ) {  $ ~~~if ( list1 [ i ] <= list1 [ i - 1 ] ) {  $ ~~~~band = 1 ;  $ ~~~~break ;  $ ~~~}  $ ~~}  $ ~~if ( band )  $ ~~~cout << "Yes" << endl ;  $ ~~else  $ ~~~cout << "No" << endl ;  $ ~}  $ ~return 0 ;  $ }
const int N = 50 + 10 , INF = 1e9 + 7 ;  $ int n , ans , d ;  $ int main ( ) {  $ ~cin >> n ;  $ ~int k = n / 2 , t = - 1 ;  $ ~for ( int i = 0 ; i < n ; i ++ ) {  $ ~~for ( int j = 0 ; j < k ; j ++ ) cout << "*" ;  $ ~~for ( int j = 0 ; j < ( n - k - k ) ; j ++ ) cout << "D" ;  $ ~~for ( int j = 0 ; j < k ; j ++ ) cout << "*" ;  $ ~~cout << '\n' ;  $ ~~if ( i == ( n / 2 ) ) t = 1 ;  $ ~~k += t ;  $ ~}  $ ~return 0 ;  $ }
int points [ 103 ] ;  $ int main ( ) {  $ ~int n , d ;  $ ~cin >> n >> d ;  $ ~for ( int i = 0 ; i < n ; i ++ ) cin >> points [ i ] ;  $ ~int result = 101 ;  $ ~sort ( points , points + n ) ;  $ ~for ( int i = 0 ; i < n ; i ++ ) {  $ ~~int j = i ;  $ ~~while ( j < n ) {  $ ~~~if ( points [ j ] - points [ i ] > d ) break ;  $ ~~~result = min ( result , n - ( j - i + 1 ) ) ;  $ ~~~j ++ ;  $ ~~}  $ ~}  $ ~cout << result << endl ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~int n , m , i , j , c = 0 , f = 0 , ix = 0 , jy = 0 ;  $ ~cin >> n >> m ;  $ ~char a [ n + 1 ] [ m + 1 ] ;  $ ~for ( i = 0 ; i < n ; i ++ ) {  $ ~~for ( j = 0 ; j < m ; j ++ ) {  $ ~~~cin >> a [ i ] [ j ] ;  $ ~~~if ( a [ i ] [ j ] == 'B' && f == 0 && c == 0 ) {  $ ~~~~f = 1 ;  $ ~~~~c = 1 ;  $ ~~~~ix = i ;  $ ~~~~jy = j ;  $ ~~~}  $ ~~~if ( f == 1 && a [ i ] [ j ] == 'B' ) c ++ ;  $ ~~}  $ ~~f = 0 ;  $ ~}  $ ~cout << ix + c / 2 << " " << jy + c / 2 << endl ;  $ ~return 0 ;  $ }
const int maxn = 100000 ;  $ int a [ maxn ] , b [ maxn ] , n , r = 1 , ans ;  $ int main ( ) {  $ ~cin >> n ;  $ ~for ( int i = 1 ; i <= n ; i ++ ) { cin >> a [ i ] ; }  $ ~sort ( a + 1 , a + 1 + n ) ;  $ ~for ( int i = 1 ; i <= n ; i ++ ) {  $ ~~while ( r <= n && a [ r ] <= a [ i ] ) r ++ ;  $ ~~if ( r <= n ) ans ++ , r ++ ;  $ ~}  $ ~cout << ans << endl ;  $ ~return 0 ;  $ }
int k , a , b , v , cnt ;  $ int main ( ) {  $ ~cin >> k >> a >> b >> v ;  $ ~while ( a > 0 && b != 0 ) {  $ ~~if ( b < k - 1 ) {  $ ~~~a -= ( ( b + 1 ) * v ) ;  $ ~~~b = 0 ;  $ ~~} else {  $ ~~~a -= k * v ;  $ ~~~b -= k - 1 ;  $ ~~}  $ ~~cnt ++ ;  $ ~}  $ ~while ( a > 0 ) {  $ ~~a -= v ;  $ ~~cnt ++ ;  $ ~}  $ ~cout << cnt << endl ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~int x ;  $ ~cin >> x ;  $ ~if ( x == 1 )  $ ~~puts ( "-1" ) ;  $ ~else  $ ~~cout << x << " " << x << endl ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~int n ;  $ ~cin >> n ;  $ ~vector < int > v ( n , 0 ) ;  $ ~v [ 0 ] = - 1 ;  $ ~for ( int i = 1 ; i <= n ; i ++ ) { cin >> v [ i ] ; }  $ ~int min = 0 x7fffffff , min_index = 0 , sum = 0 ;  $ ~for ( int x = 1 ; x <= n ; x ++ ) {  $ ~~sum = 0 ;  $ ~~for ( int i = 1 ; i <= n ; i ++ ) { sum += 2 * v [ i ] * ( abs ( i - x ) + i - 1 + x - 1 ) ; }  $ ~~if ( sum < min ) {  $ ~~~min = sum ;  $ ~~~min_index = x ;  $ ~~}  $ ~}  $ ~cout << min << endl ;  $ }
const double pi = acos ( - 1 ) ;  $ const long long MODPRIMA = ( long long ) 1e9 + 7 ;  $ const long long MAXX = ( long long ) 1e18 ;  $ const long long MINN = - ( long long ) 1e18 ;  $ const double EPS = 1e-9 ;  $ int N , feet , inch ;  $ int main ( ) {  $ ~cin >> N ;  $ ~feet = ( N / 36 ) ;  $ ~N -= 36 * feet ;  $ ~inch = ( N / 3 ) ;  $ ~if ( N % 3 == 2 ) inch ++ ;  $ ~if ( inch >= 12 ) {  $ ~~feet ++ ;  $ ~~inch -= 12 ;  $ ~}  $ ~cout << feet << " " << inch << '\n' ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~int a ;  $ ~cin >> a ;  $ ~if ( a % 2 == 0 )  $ ~~cout << 0 << endl ;  $ ~else  $ ~~cout << 1 << endl ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~int n ;  $ ~cin >> n ;  $ ~int res = 0 ;  $ ~for ( int i = 0 ; i < 4 ; i ++ ) {  $ ~~for ( int j = 1 ; j <= 13 ; j ++ ) {  $ ~~~if ( i == 0 && j == 12 ) continue ;  $ ~~~if ( j == 1 ) {  $ ~~~~if ( 11 + 10 == n ) res ++ ;  $ ~~~}  $ ~~~if ( min ( j , 10 ) + 10 == n ) res ++ ;  $ ~~}  $ ~}  $ ~cout << res << endl ;  $ }
int main ( ) {  $ ~cin . exceptions ( cin . failbit ) ;  $ ~int n , a , b , c , count = 0 ;  $ ~cin >> n ;  $ ~while ( n -- ) {  $ ~~cin >> a >> b >> c ;  $ ~~if ( a + b + c >= 2 ) { count ++ ; }  $ ~}  $ ~cout << count << endl ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~float n ;  $ ~cin >> n ;  $ ~float l = n / 5.0 ;  $ ~if ( l - ( int ) l == 0 ) {  $ ~~cout << l << endl ;  $ ~~return 0 ;  $ ~}  $ ~cout << ( int ) l + 1 << endl ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~int n , points ;  $ ~cin >> n >> points ;  $ ~int min ( points ) , max ( points ) , amazing ( 0 ) ;  $ ~while ( -- n ) {  $ ~~cin >> points ;  $ ~~if ( points < min ) {  $ ~~~min = points ;  $ ~~~++ amazing ;  $ ~~}  $ ~~if ( points > max ) {  $ ~~~max = points ;  $ ~~~++ amazing ;  $ ~~}  $ ~}  $ ~cout << amazing << endl ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~int n , a , b , sum = 0 , num = 0 ;  $ ~cin >> n ;  $ ~for ( int i = 1 ; i <= n ; i ++ ) {  $ ~~cin >> a >> b ;  $ ~~if ( a > b ) { sum ++ ; }  $ ~~if ( b > a ) { num ++ ; }  $ ~}  $ ~if ( sum > num ) { cout << "Mishka" << endl ; }  $ ~if ( sum == num ) { cout << "Friendship is magic!^^" << endl ; }  $ ~if ( sum < num ) { cout << "Chris" << endl ; }  $ ~return 0 ;  $ }
string s [ ] = { "C" , "C#" , "D" , "D#" , "E" , "F" , "F#" , "G" , "G#" , "A" , "B" , "H" } ;  $ int d [ 20 ] [ 20 ] ;  $ map < string , int > mp ;  $ int check ( int x , int y , int z ) {  $ ~if ( d [ x ] [ y ] == 4 && d [ y ] [ z ] == 3 ) return 1 ;  $ ~if ( d [ x ] [ y ] == 3 && d [ y ] [ z ] == 4 ) return 2 ;  $ ~return 3 ;  $ }  $ int main ( ) {  $ ~for ( int i = 0 ; i < 12 ; i ++ ) {  $ ~~for ( int j = 0 ; j < 12 ; j ++ ) {  $ ~~~if ( j >= i ) {  $ ~~~~d [ i ] [ j ] = j - i ;  $ ~~~} else {  $ ~~~~d [ i ] [ j ] = j + 12 - i ;  $ ~~~}  $ ~~}  $ ~}  $ ~for ( int i = 0 ; i < 12 ; i ++ ) { mp . insert ( pair < string , int > ( s [ i ] , i ) ) ; }  $ ~string X , Y , Z ;  $ ~int a , b , c ;  $ ~cin >> X >> Y >> Z ;  $ ~a = mp [ X ] ;  $ ~b = mp [ Y ] ;  $ ~c = mp [ Z ] ;  $ ~if ( check ( a , b , c ) == 1 ) {  $ ~~cout << "major" << endl ;  $ ~~return 0 ;  $ ~}  $ ~if ( check ( a , b , c ) == 2 ) {  $ ~~cout << "minor" << endl ;  $ ~~return 0 ;  $ ~}  $ ~if ( check ( a , c , b ) == 1 ) {  $ ~~cout << "major" << endl ;  $ ~~return 0 ;  $ ~}  $ ~if ( check ( a , c , b ) == 2 ) {  $ ~~cout << "minor" << endl ;  $ ~~return 0 ;  $ ~}  $ ~if ( check ( b , a , c ) == 1 ) {  $ ~~cout << "major" << endl ;  $ ~~return 0 ;  $ ~}  $ ~if ( check ( b , a , c ) == 2 ) {  $ ~~cout << "minor" << endl ;  $ ~~return 0 ;  $ ~}  $ ~if ( check ( b , c , a ) == 1 ) {  $ ~~cout << "major" << endl ;  $ ~~return 0 ;  $ ~}  $ ~if ( check ( b , c , a ) == 2 ) {  $ ~~cout << "minor" << endl ;  $ ~~return 0 ;  $ ~}  $ ~if ( check ( c , a , b ) == 1 ) {  $ ~~cout << "major" << endl ;  $ ~~return 0 ;  $ ~}  $ ~if ( check ( c , a , b ) == 2 ) {  $ ~~cout << "minor" << endl ;  $ ~~return 0 ;  $ ~}  $ ~if ( check ( c , b , a ) == 1 ) {  $ ~~cout << "major" << endl ;  $ ~~return 0 ;  $ ~}  $ ~if ( check ( c , b , a ) == 2 ) {  $ ~~cout << "minor" << endl ;  $ ~~return 0 ;  $ ~}  $ ~cout << "strange" << endl ;  $ ~return 0 ;  $ }
vector < int > adj [ 101 ] ;  $ int dis = 0 ;  $ bool vis [ 101 ] ;  $ int n ;  $ int gcd ( int a , int b ) {  $ ~if ( b == 0 ) {  $ ~~return a ;  $ ~} else {  $ ~~return gcd ( b , a % b ) ;  $ ~}  $ }  $ int lcm ( int a , int b ) {  $ ~return ( ( a * b ) / gcd ( a , b ) ) ;  $ }  $ vector < int > ans ;  $ void dfs ( int start ) {  $ ~vis [ start ] = true ;  $ ~int size = adj [ start ] . size ( ) ;  $ ~dis ++ ;  $ ~for ( int i = 0 ; i <= size - 1 ; i ++ ) {  $ ~~int v = adj [ start ] [ i ] ;  $ ~~if ( ! vis [ v ] ) { dfs ( v ) ; }  $ ~}  $ }  $ int masuk [ 101 ] ;  $ void lakukan ( ) {  $ ~dis = 0 ;  $ ~for ( int i = 1 ; i <= n ; i ++ ) {  $ ~~if ( ! vis [ i ] ) {  $ ~~~dis = 0 ;  $ ~~~dfs ( i ) ;  $ ~~~ans . push_back ( dis ) ;  $ ~~}  $ ~}  $ ~int size = ans . size ( ) - 1 ;  $ ~for ( int i = 0 ; i <= size ; i ++ ) {  $ ~~if ( ans [ i ] % 2 == 0 ) { ans [ i ] = ans [ i ] / 2 ; }  $ ~}  $ ~int hasil = 1 ;  $ ~for ( int i = 0 ; i <= size ; i ++ ) { hasil = lcm ( hasil , ans [ i ] ) ; }  $ ~cout << hasil << endl ;  $ }  $ int main ( ) {  $ ~cin >> n ;  $ ~memset ( masuk , ( 0 ) , sizeof ( masuk ) ) ;  $ ~memset ( vis , ( false ) , sizeof ( vis ) ) ;  $ ~for ( int i = 1 ; i <= n ; i ++ ) {  $ ~~int x ;  $ ~~cin >> x ;  $ ~~masuk [ x ] ++ ;  $ ~~adj [ i ] . push_back ( x ) ;  $ ~}  $ ~bool bisa = true ;  $ ~for ( int i = 1 ; i <= n ; i ++ ) {  $ ~~if ( masuk [ i ] != 1 ) bisa = false ;  $ ~}  $ ~if ( bisa == false ) {  $ ~~cout << - 1 << endl ;  $ ~} else {  $ ~~lakukan ( ) ;  $ ~}  $ ~return 0 ;  $ }
int main ( ) {  $ ~int n , arr [ 100 ] , s , t , min = 0 , min2 = 0 ;  $ ~cin >> n ;  $ ~for ( int i = 0 ; i < n ; i ++ ) cin >> arr [ i ] ;  $ ~cin >> s >> t ;  $ ~if ( s > t ) {  $ ~~int temp ;  $ ~~temp = s ;  $ ~~s = t ;  $ ~~t = temp ;  $ ~}  $ ~for ( int i = 0 ; i < t - s ; i ++ ) min += arr [ s + i - 1 ] ;  $ ~for ( int i = 0 ; i <= n - t ; i ++ ) min2 += arr [ t + i - 1 ] ;  $ ~for ( int i = 0 ; i < s - 1 ; i ++ ) min2 += arr [ i ] ;  $ ~if ( min < min2 )  $ ~~cout << min << endl ;  $ ~else  $ ~~cout << min2 << endl ;  $ }
int main ( ) {  $ ~int n , c = 1 , m = 0 ;  $ ~cin >> n ;  $ ~int arr [ n ] ;  $ ~cin >> arr [ 0 ] ;  $ ~for ( int i = 1 ; i < n ; i ++ ) {  $ ~~cin >> arr [ i ] ;  $ ~~if ( arr [ i ] > arr [ i - 1 ] ) {  $ ~~~c ++ ;  $ ~~} else {  $ ~~~if ( m < c ) { m = c ; }  $ ~~~c = 1 ;  $ ~~}  $ ~}  $ ~cout << max ( m , c ) << endl ;  $ }
int main ( ) {  $ ~long long int k , i ;  $ ~cin >> k ;  $ ~long long int A [ 12 ] ;  $ ~for ( i = 0 ; i < 12 ; i ++ ) cin >> A [ i ] ;  $ ~if ( k == 0 ) {  $ ~~cout << 0 << "\n" ;  $ ~~exit ( 0 ) ;  $ ~}  $ ~sort ( A , A + 12 , greater < long long int > ( ) ) ;  $ ~long long int sum = 0 ;  $ ~for ( i = 0 ; i < 12 ; i ++ ) {  $ ~~sum = sum + A [ i ] ;  $ ~~if ( sum >= k ) { break ; }  $ ~}  $ ~if ( i == 12 )  $ ~~cout << - 1 << "\n" ;  $ ~else  $ ~~cout << i + 1 << "\n" ;  $ }
bool ok ;  $ int main ( ) {  $ ~int n , m , i , a [ 10 ] , b [ 10 ] ;  $ ~cin >> n >> m ;  $ ~for ( i = 0 ; i < n ; i ++ ) { cin >> a [ i ] ; }  $ ~for ( i = 0 ; i < m ; i ++ ) { cin >> b [ i ] ; }  $ ~for ( i = 0 ; i < n ; i ++ ) {  $ ~~for ( int j = 0 ; j < m ; j ++ ) {  $ ~~~if ( a [ i ] == b [ j ] ) {  $ ~~~~if ( ok ) cout << " " ;  $ ~~~~cout << a [ i ] ;  $ ~~~~if ( ok == false ) { ok = true ; }  $ ~~~}  $ ~~}  $ ~}  $ ~cout << endl ;  $ }
int main ( ) {  $ ~long long n ;  $ ~cin >> n ;  $ ~long long c = 0 ;  $ ~c += n / 100 ;  $ ~n %= 100 ;  $ ~c += n / 20 ;  $ ~n %= 20 ;  $ ~c += n / 10 ;  $ ~n %= 10 ;  $ ~c += n / 5 ;  $ ~n %= 5 ;  $ ~c += n ;  $ ~cout << c << endl ;  $ }
int main ( ) {  $ ~int n , c ;  $ ~string s ;  $ ~cin >> n >> s ;  $ ~int o , z ;  $ ~o = z = 0 ;  $ ~for ( int i = 0 ; i < n ; i ++ ) {  $ ~~if ( s [ i ] == '1' )  $ ~~~o ++ ;  $ ~~else  $ ~~~z ++ ;  $ ~}  $ ~cout << n - 2 * min ( o , z ) << endl ;  $ ~return 0 ;  $ }
const long long int N = 107 ;  $ long long int a [ N ] , b [ N ] , ax [ 7 ] , bx [ 7 ] , cnt [ 7 ] ;  $ int main ( ) {  $ ~long long int n , m , i , j , u , v , ansx = 1 , ans = 0 ;  $ ~cin >> n ;  $ ~for ( i = 1 ; i <= n ; i ++ ) cin >> a [ i ] , ax [ a [ i ] ] ++ ;  $ ~for ( i = 1 ; i <= n ; i ++ ) cin >> b [ i ] , bx [ b [ i ] ] ++ ;  $ ~for ( i = 1 ; i <= 5 ; i ++ )  $ ~~if ( ( ax [ i ] + bx [ i ] ) % 2 == 1 )  $ ~~~ansx = 0 ;  $ ~~else  $ ~~~cnt [ i ] = ( ax [ i ] + bx [ i ] ) / 2 ;  $ ~if ( ! ansx ) {  $ ~~cout << - 1 << '\n' ;  $ ~~return 0 ;  $ ~}  $ ~for ( i = 1 ; i <= 5 ; i ++ ) ans += abs ( cnt [ i ] - ax [ i ] ) ;  $ ~cout << ans / 2 << '\n' ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~string s = "hello" ;  $ ~string t ;  $ ~cin >> t ;  $ ~int l , i , j , a = 0 , b = 0 ;  $ ~l = t . size ( ) ;  $ ~for ( i = 0 ; i < l ; i ++ ) {  $ ~~if ( t [ i ] == s [ a ] ) {  $ ~~~a ++ ;  $ ~~~b ++ ;  $ ~~}  $ ~}  $ ~if ( b == 5 ) {  $ ~~cout << "YES" << endl ;  $ ~} else {  $ ~~cout << "NO" << endl ;  $ ~}  $ ~return 0 ;  $ }
int main ( ) {  $ ~int n ;  $ ~cin >> n ;  $ ~int count = 0 ;  $ ~while ( n > 1 ) {  $ ~~if ( n & 1 ) { count ++ ; }  $ ~~n /= 2 ;  $ ~}  $ ~cout << count + 1 << endl ;  $ ~return 0 ;  $ }
const int M = 50 + 5 ;  $ int main ( ) {  $ ~int a , b , c ;  $ ~cin >> a >> b >> c ;  $ ~int t1 = c * a - c * b ;  $ ~int t = t1 / b + ( t1 % b != 0 ) ;  $ ~cout << t << endl ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~int n , x ;  $ ~cin >> n >> x ;  $ ~int cnt = 0 ;  $ ~for ( int i = 1 ; i <= n ; i ++ ) {  $ ~~if ( x % i == 0 && x / i <= n ) cnt ++ ;  $ ~}  $ ~cout << cnt << endl ;  $ ~return 0 ;  $ }
int n , f [ 601 ] , x , s = 0 ;  $ int main ( ) {  $ ~cin >> n ;  $ ~memset ( f , 0 , sizeof ( f ) ) ;  $ ~for ( int i = 1 ; i <= n ; i ++ ) {  $ ~~cin >> x ;  $ ~~if ( x != 0 && f [ x ] == 0 ) {  $ ~~~f [ x ] = 1 ;  $ ~~~s ++ ;  $ ~~}  $ ~}  $ ~cout << s << endl ;  $ ~return 0 ;  $ }
int n ;  $ int a [ 3 ] ;  $ const int N = 1e6 + 5 ;  $ int main ( ) {  $ ~int x ;  $ ~cin >> n ;  $ ~for ( int i = 0 ; i < n ; i ++ ) {  $ ~~cin >> x ;  $ ~~a [ x ] ++ ;  $ ~}  $ ~int m = 0 ;  $ ~for ( int j = 1 ; j <= 3 ; j ++ ) m = max ( m , a [ j ] ) ;  $ ~cout << n - m << endl ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~int a , b , c , d , i , j , k , n , t ;  $ ~char ch [ 105 ] [ 105 ] ;  $ ~cin >> n ;  $ ~for ( i = 1 ; i <= n ; i ++ ) {  $ ~~for ( j = 1 ; j <= n ; j ++ ) { cin >> ch [ i ] [ j ] ; }  $ ~}  $ ~i = 0 ;  $ ~for ( j = 0 ; j <= n + 1 ; j ++ ) { ch [ i ] [ j ] = 'a' ; }  $ ~i = n + 1 ;  $ ~for ( j = 0 ; j <= n + 1 ; j ++ ) { ch [ i ] [ j ] = 'a' ; }  $ ~i = 0 ;  $ ~for ( j = 0 ; j <= n + 1 ; j ++ ) { ch [ j ] [ i ] = 'a' ; }  $ ~i = n + 1 ;  $ ~for ( j = 0 ; j <= n + 1 ; j ++ ) { ch [ j ] [ i ] = 'a' ; }  $ ~for ( i = 1 ; i <= n ; i ++ ) {  $ ~~for ( j = 1 ; j <= n ; j ++ ) {  $ ~~~t = 0 ;  $ ~~~if ( ch [ i ] [ j + 1 ] == 'o' ) ++ t ;  $ ~~~if ( ch [ i ] [ j - 1 ] == 'o' ) ++ t ;  $ ~~~if ( ch [ i + 1 ] [ j ] == 'o' ) ++ t ;  $ ~~~if ( ch [ i - 1 ] [ j ] == 'o' ) ++ t ;  $ ~~~if ( t % 2 != 0 ) {  $ ~~~~cout << "NO" << endl ;  $ ~~~~return 0 ;  $ ~~~}  $ ~~}  $ ~}  $ ~cout << "YES" << endl ;  $ ~return 0 ;  $ ~for ( i = 0 ; i <= n + 1 ; i ++ ) {  $ ~~for ( j = 0 ; j <= n + 1 ; j ++ ) { cout << ch [ i ] [ j ] ; }  $ ~~cout << endl ;  $ ~}  $ ~cout << "YES" << endl ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~long long int y , n , x , i , dis = 0 , sum = 0 ;  $ ~cin >> n >> x ;  $ ~sum = x ;  $ ~char c ;  $ ~while ( n -- ) {  $ ~~cin >> c >> y ;  $ ~~if ( c == '-' ) {  $ ~~~if ( sum >= y )  $ ~~~~sum -= y ;  $ ~~~else  $ ~~~~dis ++ ;  $ ~~} else if ( c == '+' ) {  $ ~~~sum += y ;  $ ~~}  $ ~}  $ ~cout << sum << " " << dis << endl ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~int a , b , c = 0 ;  $ ~cin >> a >> b ;  $ ~while ( b ) {  $ ~~int d = b % 10 ;  $ ~~c = c * 10 + d ;  $ ~~b /= 10 ;  $ ~}  $ ~cout << a + c << endl ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~int n ;  $ ~cin >> n ;  $ ~int x [ n ] , y [ n ] , a = 0 , b = 0 ;  $ ~bool sw = true ;  $ ~for ( int i = 0 ; i < n * 2 ; i ++ ) {  $ ~~if ( sw ) {  $ ~~~cin >> x [ a ] ;  $ ~~~a ++ ;  $ ~~~sw = false ;  $ ~~} else {  $ ~~~cin >> y [ b ] ;  $ ~~~b ++ ;  $ ~~~sw = true ;  $ ~~}  $ ~}  $ ~int cont = 0 ;  $ ~for ( int i = 0 ; i < n ; i ++ ) {  $ ~~bool upper = false , lower = false , right = false , left = false ;  $ ~~for ( int j = 0 ; j < n ; j ++ ) {  $ ~~~if ( i != j ) {  $ ~~~~if ( x [ i ] < x [ j ] && y [ i ] == y [ j ] ) right = true ;  $ ~~~~if ( x [ i ] > x [ j ] && y [ i ] == y [ j ] ) left = true ;  $ ~~~~if ( x [ i ] == x [ j ] && y [ i ] > y [ j ] ) lower = true ;  $ ~~~~if ( x [ i ] == x [ j ] && y [ i ] < y [ j ] ) upper = true ;  $ ~~~}  $ ~~}  $ ~~if ( upper && lower && right && left ) cont ++ ;  $ ~}  $ ~cout << cont << endl ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~int n ;  $ ~string s ;  $ ~cin >> n >> s ;  $ ~int one = 0 , zero = 0 ;  $ ~for ( int i = 0 ; i < n ; i ++ ) {  $ ~~if ( s [ i ] == '0' )  $ ~~~zero ++ ;  $ ~~else  $ ~~~one ++ ;  $ ~}  $ ~if ( one != 0 ) cout << "1" ;  $ ~for ( int i = 0 ; i < zero ; i ++ ) cout << "0" ;  $ ~cout << endl ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~int rnum = 0 , cnt0 = 0 , cnt1 = 0 ;  $ ~cin >> rnum ;  $ ~int pro [ rnum ] [ 3 ] , sum [ rnum ] ;  $ ~for ( int i = 0 ; i < rnum ; i ++ ) {  $ ~~cnt1 = cnt0 = 0 ;  $ ~~for ( int j = 0 ; j < 3 ; j ++ ) {  $ ~~~cin >> pro [ i ] [ j ] ;  $ ~~~if ( pro [ i ] [ j ] == 1 )  $ ~~~~cnt1 ++ ;  $ ~~~else  $ ~~~~cnt0 ++ ;  $ ~~}  $ ~~if ( cnt1 > cnt0 )  $ ~~~sum [ i ] = 1 ;  $ ~~else  $ ~~~sum [ i ] = 0 ;  $ ~}  $ ~cnt1 = cnt0 = 0 ;  $ ~for ( int i = 0 ; i < rnum ; i ++ ) {  $ ~~if ( sum [ i ] == 1 ) cnt1 ++ ;  $ ~}  $ ~cout << cnt1 << endl ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~int y ;  $ ~cin >> y ;  $ ~while ( true ) {  $ ~~y += 1 ;  $ ~~int a = y / 1000 ;  $ ~~int b = y / 100 % 10 ;  $ ~~int c = y / 10 % 10 ;  $ ~~int d = y % 10 ;  $ ~~if ( a != b && a != c && a != d && b != c && b != d && c != d ) { break ; }  $ ~}  $ ~cout << y << endl ;  $ ~return 0 ;  $ }
string s ;  $ int pd ( ) {  $ ~if ( s . length ( ) < 5 ) return 0 ;  $ ~int x = 0 , y = 0 , z = 0 ;  $ ~for ( int i = 0 ; i < s . length ( ) ; i ++ ) {  $ ~~if ( s [ i ] <= 'Z' && s [ i ] >= 'A' ) x = 1 ;  $ ~~if ( s [ i ] <= 'z' && s [ i ] >= 'a' ) y = 1 ;  $ ~~if ( s [ i ] <= '9' && s [ i ] >= '0' ) z = 1 ;  $ ~}  $ ~return x && y && z ;  $ }  $ int main ( ) {  $ ~cin >> s ;  $ ~if ( pd ( ) )  $ ~~cout << "Correct" << endl ;  $ ~else  $ ~~cout << "Too weak" << endl ;  $ ~return 0 ;  $ }
void File ( ) {  $ ~freopen ( "output.txt" , "w" , stdout ) ;  $ ~freopen ( "input.txt" , "r" , stdin ) ;  $ }  $ void fast ( ) { }  $ const double pi = 2 * acos ( 0.0 ) ;  $ const int nn = 1e4 + 5 ;  $ const int oo = 0 x3f3f3f3f ;  $ int main ( ) {  $ ~fast ( ) ;  $ ~int n , m , k , ans = 0 ;  $ ~cin >> n >> m >> k ;  $ ~int arr [ nn ] ;  $ ~for ( int i = 0 ; i < n ; i ++ ) cin >> arr [ i ] ;  $ ~sort ( arr , arr + n ) ;  $ ~for ( int i = n - 1 ; i >= 0 && k < m ; i -- ) {  $ ~~k += arr [ i ] ;  $ ~~k -- ;  $ ~~ans ++ ;  $ ~}  $ ~if ( k < m )  $ ~~cout << - 1 << "\n" ;  $ ~else  $ ~~cout << ans << "\n" ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~char s1 [ 10 ] , s2 [ 10 ] ;  $ ~int a , b ;  $ ~cin >> s1 >> s2 ;  $ ~if ( s1 [ 0 ] == 'm' ) a = 1 ;  $ ~if ( s1 [ 0 ] == 't' && s1 [ 1 ] == 'u' ) a = 2 ;  $ ~if ( s1 [ 0 ] == 'w' ) a = 3 ;  $ ~if ( s1 [ 0 ] == 't' && s1 [ 1 ] == 'h' ) a = 4 ;  $ ~if ( s1 [ 0 ] == 'f' ) a = 5 ;  $ ~if ( s1 [ 0 ] == 's' && s1 [ 1 ] == 'a' ) a = 6 ;  $ ~if ( s1 [ 0 ] == 's' && s1 [ 1 ] == 'u' ) a = 7 ;  $ ~if ( s2 [ 0 ] == 'm' ) b = 1 ;  $ ~if ( s2 [ 0 ] == 't' && s2 [ 1 ] == 'u' ) b = 2 ;  $ ~if ( s2 [ 0 ] == 'w' ) b = 3 ;  $ ~if ( s2 [ 0 ] == 't' && s2 [ 1 ] == 'h' ) b = 4 ;  $ ~if ( s2 [ 0 ] == 'f' ) b = 5 ;  $ ~if ( s2 [ 0 ] == 's' && s2 [ 1 ] == 'a' ) b = 6 ;  $ ~if ( s2 [ 0 ] == 's' && s2 [ 1 ] == 'u' ) b = 7 ;  $ ~if ( a > b ) b += 7 ;  $ ~int flag = 0 ;  $ ~if ( ( b - a ) == 2 || ( b - a ) == 3 || ( a == b ) ) flag = 1 ;  $ ~if ( flag == 1 )  $ ~~cout << "YES" << endl ;  $ ~else  $ ~~cout << "NO" << endl ;  $ ~return 0 ;  $ }
set < int > amulets ;  $ set < int > taken ;  $ int main ( ) {  $ ~int N ;  $ ~cin >> N ;  $ ~for ( int i = 0 ; i < N ; i ++ ) {  $ ~~if ( i > 0 ) {  $ ~~~string starstar ;  $ ~~~cin >> starstar ;  $ ~~}  $ ~~int A , B ;  $ ~~cin >> A >> B ;  $ ~~int num = A * 100 + B % 10 * 10 + B / 10 ;  $ ~~if ( ! taken . count ( num ) ) {  $ ~~~amulets . insert ( num ) ;  $ ~~~for ( int j = 0 ; j < 4 ; j ++ ) {  $ ~~~~taken . insert ( num ) ;  $ ~~~~num = ( num / 1000 ) + ( num * 10 % 10000 ) ;  $ ~~~}  $ ~~}  $ ~}  $ ~cout << amulets . size ( ) << endl ;  $ ~return 0 ;  $ }
int n , a , b ;  $ string s ;  $ int main ( ) {  $ ~cin >> n >> a >> b >> s ;  $ ~if ( s [ b - 1 ] == s [ a - 1 ] ) {  $ ~~cout << 0 << endl ;  $ ~~return 0 ;  $ ~} else {  $ ~~cout << 1 << endl ;  $ ~~return 0 ;  $ ~}  $ ~return 0 ;  $ }
string s80 ;  $ string s [ 10 ] ;  $ string cp ( string s , int l , int r ) {  $ ~string res = "" ;  $ ~for ( int i = l ; i < r ; i ++ ) res += s [ i ] ;  $ ~return res ;  $ }  $ int main ( ) {  $ ~cin >> s80 ;  $ ~for ( int i = 0 ; i < 10 ; ++ i ) cin >> s [ i ] ;  $ ~for ( int i = 0 ; i + 10 <= s80 . length ( ) ; i += 10 )  $ ~~for ( int j = 0 ; j < 10 ; j ++ )  $ ~~~if ( cp ( s80 , i , i + 10 ) == s [ j ] ) {  $ ~~~~cout << j ;  $ ~~~~break ;  $ ~~~}  $ ~cout << endl ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~int n ;  $ ~cin >> n ;  $ ~int index = 0 ;  $ ~vector < int > arr ;  $ ~int x ;  $ ~cin >> x ;  $ ~arr . push_back ( x ) ;  $ ~index = 0 ;  $ ~for ( int i = 1 ; i < n ; i ++ ) {  $ ~~cin >> x ;  $ ~~arr . push_back ( x ) ;  $ ~~if ( arr [ index ] >= arr [ i ] ) { index = i ; }  $ ~}  $ ~int val = arr [ index ] ;  $ ~int count = 0 ;  $ ~for ( int i = 0 ; i < n ; i ++ ) {  $ ~~if ( arr [ i ] == val ) { count ++ ; }  $ ~}  $ ~if ( count == 1 ) {  $ ~~cout << index + 1 << endl ;  $ ~} else {  $ ~~cout << "Still Rozdil" << endl ;  $ ~}  $ ~return 0 ;  $ }
int main ( ) {  $ ~long long v ;  $ ~cin >> v ;  $ ~if ( v <= 2 )  $ ~~cout << v << "\n" ;  $ ~else  $ ~~cout << "1\n" ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~int x , count = 0 ;  $ ~cin >> x ;  $ ~x *= 2 ;  $ ~while ( x /= 2 ) count += x % 2 ;  $ ~cout << count << endl ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~int n , i , temp , cnt = - 1 , res = 0 ;  $ ~vector < int > a ;  $ ~cin >> n ;  $ ~a . push_back ( 0 ) ;  $ ~a . push_back ( 0 ) ;  $ ~for ( i = 0 ; i < n ; i ++ ) {  $ ~~cin >> temp ;  $ ~~a . push_back ( temp ) ;  $ ~}  $ ~a . push_back ( 1001 ) ;  $ ~for ( i = 2 ; i <= n + 2 ; i ++ ) {  $ ~~if ( a [ i ] == a [ i - 1 ] + 1 ) {  $ ~~~cnt ++ ;  $ ~~} else {  $ ~~~if ( cnt > res ) { res = cnt ; }  $ ~~~cnt = - 1 ;  $ ~~}  $ ~}  $ ~if ( cnt > res ) { res = cnt ; }  $ ~cout << res << endl ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~string s ;  $ ~cin >> s ;  $ ~int sz = s . size ( ) ;  $ ~cout << ( sz + 1 ) * 25 + 1 << endl ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~int k , a , b , v , i ;  $ ~cin >> k >> a >> b >> v ;  $ ~for ( i = 1 ; a > 0 ; i ++ ) {  $ ~~if ( b == 0 ) {  $ ~~~a -= v ;  $ ~~~continue ;  $ ~~}  $ ~~if ( k > b + 1 ) {  $ ~~~a -= v * ( b + 1 ) ;  $ ~~~b = 0 ;  $ ~~~continue ;  $ ~~}  $ ~~a -= k * v ;  $ ~~b -= k - 1 ;  $ ~}  $ ~i = i - 1 ;  $ ~cout << i << endl ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~int capacity = 0 , a , b , passenger = 0 ;  $ ~int stop ;  $ ~cin >> stop ;  $ ~while ( stop -- ) {  $ ~~cin >> a >> b ;  $ ~~passenger += ( b - a ) ;  $ ~~if ( capacity < passenger ) capacity = passenger ;  $ ~}  $ ~cout << capacity << endl ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~int p1 , p2 , p3 , p4 , a , b ;  $ ~cin >> p1 >> p2 >> p3 >> p4 >> a >> b ;  $ ~int num = 0 ;  $ ~for ( int i = a ; i <= b ; i ++ ) {  $ ~~if ( i % p1 % p2 % p3 % p4 == i ) num ++ ;  $ ~}  $ ~cout << num << endl ;  $ }
string restorePass ( string binaryCode , string binaryChar [ ] ) ;  $ int main ( ) {  $ ~string binaryCode , binaryChar [ 10 ] ;  $ ~getline ( cin , binaryCode ) ;  $ ~for ( int i = 0 ; i < 10 ; i ++ ) { getline ( cin , binaryChar [ i ] ) ; }  $ ~cout << restorePass ( binaryCode , binaryChar ) << endl ;  $ ~return 0 ;  $ }  $ string restorePass ( string binaryCode , string binaryChar [ ] ) {  $ ~string binaryResult = "" ;  $ ~for ( int i = 0 ; i < binaryCode . length ( ) ; i += 10 ) {  $ ~~string sub = binaryCode . substr ( i , 10 ) ;  $ ~~for ( int j = 0 ; j < 10 ; j ++ ) {  $ ~~~if ( binaryChar [ j ] == sub ) {  $ ~~~~stringstream ss ;  $ ~~~~ss << j ;  $ ~~~~binaryResult += ss . str ( ) ;  $ ~~~}  $ ~~}  $ ~}  $ ~return binaryResult ;  $ }
int arr [ 101 ] ;  $ int main ( ) {  $ ~int n ;  $ ~cin >> n ;  $ ~for ( int i = 0 ; i < n ; i ++ ) {  $ ~~int x ;  $ ~~cin >> x ;  $ ~~arr [ x ] ++ ;  $ ~}  $ ~int mx = 0 ;  $ ~for ( int i = 1 ; i < 101 ; i ++ ) { mx = max ( mx , arr [ i ] ) ; }  $ ~cout << mx << endl ;  $ }
int main ( ) {  $ ~bool flag ;  $ ~int i , n ;  $ ~string str ;  $ ~int a [ 5 ] , b [ 100005 ] ;  $ ~int ans = 0 ;  $ ~memset ( a , 0 , sizeof ( a ) ) ;  $ ~cin >> str ;  $ ~n = str . length ( ) ;  $ ~flag = false ;  $ ~for ( i = 0 ; i < n ; i ++ ) {  $ ~~if ( str [ i ] == '#' ) {  $ ~~~a [ 1 ] ++ ;  $ ~~~if ( a [ 3 ] + a [ 1 ] > a [ 2 ] || i == 0 ) flag = true ;  $ ~~~ans = a [ 2 ] - a [ 3 ] + 1 ;  $ ~~} else if ( str [ i ] == '(' ) {  $ ~~~a [ 2 ] ++ ;  $ ~~~if ( i == n - 1 || a [ 3 ] + a [ 1 ] > a [ 2 ] ) flag = true ;  $ ~~} else {  $ ~~~a [ 3 ] ++ ;  $ ~~~if ( a [ 3 ] + a [ 1 ] > a [ 2 ] || i == 0 ) flag = true ;  $ ~~}  $ ~}  $ ~if ( ans < a [ 2 ] - a [ 3 ] + 1 ) { flag = true ; }  $ ~if ( flag ) {  $ ~~cout << - 1 << endl ;  $ ~~return 0 ;  $ ~}  $ ~for ( i = 1 ; i < a [ 1 ] ; i ++ ) { cout << 1 << endl ; }  $ ~cout << a [ 2 ] - a [ 3 ] - a [ 1 ] + 1 << endl ;  $ }
int main ( ) {  $ ~int n , m ;  $ ~cin >> n >> m ;  $ ~int * nums = new int [ m ] ;  $ ~for ( int i = 0 ; i < m ; i ++ ) { cin >> nums [ i ] ; }  $ ~sort ( nums , nums + m ) ;  $ ~int min = INT_MAX ;  $ ~n -- ;  $ ~for ( int i = 0 ; i < m - n ; i ++ ) {  $ ~~if ( nums [ i + n ] - nums [ i ] < min ) min = nums [ i + n ] - nums [ i ] ;  $ ~}  $ ~cout << min << endl ;  $ ~return 0 ;  $ }
string a [ 10 ] ;  $ bool book [ 10 ] ;  $ map < string , int > c ;  $ void Init ( ) {  $ ~a [ 1 ] = "Power" ;  $ ~a [ 2 ] = "Time" ;  $ ~a [ 3 ] = "Space" ;  $ ~a [ 4 ] = "Soul" ;  $ ~a [ 5 ] = "Reality" ;  $ ~a [ 6 ] = "Mind" ;  $ ~c [ "purple" ] = 1 ;  $ ~c [ "green" ] = 2 ;  $ ~c [ "blue" ] = 3 ;  $ ~c [ "orange" ] = 4 ;  $ ~c [ "red" ] = 5 ;  $ ~c [ "yellow" ] = 6 ;  $ }  $ int main ( ) {  $ ~Init ( ) ;  $ ~memset ( book , 0 , sizeof ( book ) ) ;  $ ~int n ;  $ ~cin >> n ;  $ ~for ( int i = 0 ; i < n ; i ++ ) {  $ ~~string temp ;  $ ~~cin >> temp ;  $ ~~book [ c [ temp ] ] = true ;  $ ~}  $ ~cout << 6 - n << endl ;  $ ~for ( int i = 1 ; i <= 6 ; i ++ ) {  $ ~~if ( book [ i ] == false ) cout << a [ i ] << endl ;  $ ~}  $ ~return 0 ;  $ }
void fast_io ( ) { }  $ const int INF = ( int ) 2e9 ;  $ const double EPS = ( double ) 1e-9 ;  $ const double PI = ( double ) acos ( - 1 ) ;  $ const long long MOD = ( long long ) 1e9 + 7 ;  $ const int N = 1e5 + 5 ;  $ int main ( ) {  $ ~int n , m , a , b ;  $ ~string s ;  $ ~cin >> n >> m ;  $ ~cin >> s ;  $ ~for ( int i = 0 ; i < n ; i ++ ) {  $ ~~if ( s [ i ] == 'G' ) a = i ;  $ ~~if ( s [ i ] == 'T' ) b = i ;  $ ~}  $ ~if ( b > a && ( b - a ) % m == 0 ) {  $ ~~for ( int i = a ; i <= b ; i += m ) {  $ ~~~if ( s [ i ] == '#' ) {  $ ~~~~cout << "NO\n" ;  $ ~~~~break ;  $ ~~~}  $ ~~~if ( i == b ) cout << "YES\n" ;  $ ~~}  $ ~} else if ( a > b && ( a - b ) % m == 0 ) {  $ ~~for ( int i = a ; i >= b ; i -= m ) {  $ ~~~if ( s [ i ] == '#' ) {  $ ~~~~cout << "NO\n" ;  $ ~~~~break ;  $ ~~~}  $ ~~~if ( i == b ) cout << "YES\n" ;  $ ~~}  $ ~} else  $ ~~cout << "NO\n" ;  $ ~return 0 ;  $ }
string num ;  $ int main ( ) {  $ ~int n , count_8 = 0 , count_no = 0 ;  $ ~cin >> n ;  $ ~cin >> num ;  $ ~count_no = n / 11 ;  $ ~for ( int i = 0 ; i < num . length ( ) ; i ++ ) {  $ ~~if ( num [ i ] == '8' ) count_8 ++ ;  $ ~}  $ ~cout << ( count_8 >= count_no ? count_no : count_8 ) << endl ;  $ }
map < string , int > Hash ;  $ int N ;  $ int main ( ) {  $ ~cin >> N ;  $ ~for ( register int i = 1 ; i <= N ; ++ i ) {  $ ~~string s ;  $ ~~cin >> s ;  $ ~~++ Hash [ s ] ;  $ ~}  $ ~int Ans = 0 ;  $ ~for ( register int i = 1 ; i <= N ; ++ i ) {  $ ~~string s ;  $ ~~cin >> s ;  $ ~~if ( Hash [ s ] )  $ ~~~-- Hash [ s ] ;  $ ~~else  $ ~~~++ Ans ;  $ ~}  $ ~cout << Ans << endl ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~char board [ 101 ] [ 101 ] ;  $ ~int n , m ;  $ ~cin >> n >> m ;  $ ~for ( int i ( 0 ) ; i < n ; i ++ ) {  $ ~~for ( int j ( 0 ) ; j < m ; j ++ ) { cin >> board [ j ] [ i ] ; }  $ ~}  $ ~for ( int i ( 0 ) ; i < n ; i ++ ) {  $ ~~for ( int j ( 0 ) ; j < m ; j ++ ) {  $ ~~~if ( board [ j ] [ i ] == '.' ) {  $ ~~~~if ( ( j + i ) % 2 == 0 ) {  $ ~~~~~board [ j ] [ i ] = 'B' ;  $ ~~~~} else  $ ~~~~~board [ j ] [ i ] = 'W' ;  $ ~~~}  $ ~~}  $ ~}  $ ~for ( int i ( 0 ) ; i < n ; i ++ ) {  $ ~~for ( int j ( 0 ) ; j < m ; j ++ ) { cout << board [ j ] [ i ] ; }  $ ~~cout << endl ;  $ ~}  $ ~return 0 ;  $ }
int main ( ) {  $ ~string s ;  $ ~int c = 0 ;  $ ~cin >> s ;  $ ~for ( int i = 0 ; i < s . length ( ) ; i ++ ) {  $ ~~if ( s [ i ] == '4' || s [ i ] == '7' ) c ++ ;  $ ~}  $ ~if ( c == 4 || c == 7 )  $ ~~cout << "YES" << endl ;  $ ~else  $ ~~cout << "NO" << endl ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~int n , s , ans ;  $ ~cin >> n >> s ;  $ ~ans = s / n ;  $ ~if ( s % n ) ans ++ ;  $ ~cout << ans << endl ;  $ ~return 0 ;  $ }
string solve ( long d ) {  $ ~float k = 100000 , p = 0 ;  $ ~for ( int i = 3 ; i < k ; i ++ ) {  $ ~~p = ( i - 2 ) * 180 ;  $ ~~p /= i ;  $ ~~if ( p == d ) return "YES" ;  $ ~}  $ ~return "NO" ;  $ }  $ int main ( ) {  $ ~long n , degree = 0 , val = 0 ;  $ ~cin >> n ;  $ ~for ( long i = 0 ; i < n ; i ++ ) {  $ ~~cin >> degree ;  $ ~~cout << solve ( degree ) << endl ;  $ ~}  $ ~return 0 ;  $ }
long long int a [ 100000 ] ;  $ int main ( ) {  $ ~long long int b , d , x , y , z , c = 0 , e = 0 , p , i = 1 , j , k = 50 , f = 0 ;  $ ~cin >> x ;  $ ~for ( i = 1 ; i <= x ; i ++ ) { cin >> a [ i ] ; }  $ ~cin >> b >> d ;  $ ~if ( d < b ) {  $ ~~p = d ;  $ ~~d = b ;  $ ~~b = p ;  $ ~}  $ ~y = b ;  $ ~z = d ;  $ ~for ( i = b ; i < d ; i ++ ) c += a [ i ] ;  $ ~for ( i = d ; i <= x ; i ++ ) e += a [ i ] ;  $ ~for ( i = 1 ; i < b ; i ++ ) e += a [ i ] ;  $ ~if ( c > e )  $ ~~cout << e << endl ;  $ ~else  $ ~~cout << c << endl ;  $ ~return 0 ;  $ }
int l , r , a , ans ;  $ int main ( ) {  $ ~cin >> l >> r >> a ;  $ ~if ( l == 0 && a ) l ++ , a -- ;  $ ~if ( r == 0 && a ) r ++ , a -- ;  $ ~while ( l != 0 && r != 0 ) {  $ ~~l -- , r -- , ans += 2 ;  $ ~~if ( l == 0 && a ) l ++ , a -- ;  $ ~~if ( r == 0 && a ) r ++ , a -- ;  $ ~}  $ ~cout << ans << endl ;  $ }
int main ( ) {  $ ~int n ;  $ ~double segment = 0.0 ;  $ ~int length = 0 ;  $ ~cin >> n ;  $ ~int a [ 101 ] , b [ 101 ] ;  $ ~for ( int i = 1 ; i <= n ; i ++ ) { cin >> a [ i ] >> b [ i ] ; }  $ ~segment = double ( a [ 1 ] ) - 0.5 ;  $ ~for ( int i = 1 ; i <= b [ 1 ] - a [ 1 ] ; i ++ ) {  $ ~~segment = segment + 1 ;  $ ~~for ( int j = 2 ; j <= n ; j ++ ) {  $ ~~~if ( segment > double ( a [ j ] ) && segment < double ( b [ j ] ) ) {  $ ~~~~length ++ ;  $ ~~~~break ;  $ ~~~}  $ ~~}  $ ~}  $ ~cout << b [ 1 ] - a [ 1 ] - length << endl ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~int n , k ;  $ ~cin >> n >> k ;  $ ~char s [ 101 ] ;  $ ~cin >> s ;  $ ~if ( k > n / 2 ) {  $ ~~for ( int i = k ; i < n ; i ++ ) cout << "RIGHT" << endl ;  $ ~~for ( int i = n - 1 ; i > 0 ; i -- ) {  $ ~~~cout << "PRINT " << s [ i ] << endl ;  $ ~~~cout << "LEFT" << endl ;  $ ~~}  $ ~~cout << "PRINT " << s [ 0 ] << endl ;  $ ~} else {  $ ~~for ( int i = k - 1 ; i > 0 ; i -- ) cout << "LEFT" << endl ;  $ ~~for ( int i = 0 ; i < n - 1 ; i ++ ) {  $ ~~~cout << "PRINT " << s [ i ] << endl ;  $ ~~~cout << "RIGHT" << endl ;  $ ~~}  $ ~~cout << "PRINT " << s [ n - 1 ] << endl ;  $ ~}  $ ~return 0 ;  $ }
int num [ 5001 ] ;  $ int main ( ) {  $ ~int n , flag = 0 ;  $ ~cin >> n ;  $ ~for ( int i = 1 ; i <= n ; i ++ ) cin >> num [ i ] ;  $ ~for ( int i = 1 ; i <= n ; i ++ ) {  $ ~~if ( i == num [ num [ num [ i ] ] ] ) {  $ ~~~flag = 1 ;  $ ~~~break ;  $ ~~}  $ ~}  $ ~if ( flag )  $ ~~cout << "YES" << endl ;  $ ~else  $ ~~cout << "NO" << endl ;  $ }
int main ( ) {  $ ~int n , k ;  $ ~while ( cin >> n >> k ) {  $ ~~int a = n * 2 / k + ( n * 2 % k == 0 ? 0 : 1 ) ;  $ ~~int b = n * 5 / k + ( n * 5 % k == 0 ? 0 : 1 ) ;  $ ~~int c = n * 8 / k + ( n * 8 % k == 0 ? 0 : 1 ) ;  $ ~~cout << a + b + c << endl ;  $ ~}  $ ~return 0 ;  $ }
int main ( ) {  $ ~int s , t , x ;  $ ~while ( cin >> s >> t >> x ) {  $ ~~if ( x < s + t )  $ ~~~if ( x == s )  $ ~~~~cout << "YES" << endl ;  $ ~~~else  $ ~~~~cout << "NO" << endl ;  $ ~~else {  $ ~~~if ( ( x - s ) % t == 0 || ( x - s - 1 ) % t == 0 )  $ ~~~~cout << "YES" << endl ;  $ ~~~else  $ ~~~~cout << "NO" << endl ;  $ ~~}  $ ~}  $ ~return 0 ;  $ }
int main ( ) {  $ ~int n , ans = 0 , mod = 0 , k , cou = 0 ;  $ ~cin >> n >> k ;  $ ~for ( int i = 0 ; i < n ; i ++ ) {  $ ~~int a ;  $ ~~cin >> a ;  $ ~~a += mod ;  $ ~~mod = 0 ;  $ ~~if ( ans < k ) cou ++ ;  $ ~~ans += min ( 8 , a ) ;  $ ~~mod += max ( 0 , a - 8 ) ;  $ ~}  $ ~if ( ans >= k )  $ ~~cout << cou << endl ;  $ ~else  $ ~~cout << - 1 << endl ;  $ ~return 0 ;  $ }
int absi ( int n ) {  $ ~if ( n < 0 ) { return - 1 * n ; }  $ ~return n ;  $ }  $ long long int absl ( long long int n ) {  $ ~if ( n < 0 ) { return - 1 * n ; }  $ ~return n ;  $ }  $ int main ( ) {  $ ~int i , count = 0 ;  $ ~string str ;  $ ~cin >> str ;  $ ~int n = str . size ( ) ;  $ ~for ( i = 0 ; i < n ; i ++ ) {  $ ~~string r1 = str . substr ( n - 1 - i , i + 1 ) ;  $ ~~string r2 = str . substr ( 0 , n - i - 1 ) ;  $ ~~count ++ ;  $ ~~if ( r1 + r2 == str ) { break ; }  $ ~}  $ ~cout << count << '\n' ;  $ }
int main ( ) {  $ ~int t ;  $ ~cin >> t ;  $ ~while ( t -- ) {  $ ~~int n ;  $ ~~cin >> n ;  $ ~~float sides = ( float ) 360 / ( 180 - n ) ;  $ ~~int sidesI = ( int ) sides ;  $ ~~if ( sides == sidesI )  $ ~~~cout << "YES\n" ;  $ ~~else  $ ~~~cout << "NO\n" ;  $ ~}  $ }
int main ( ) {  $ ~int T ;  $ ~string x ;  $ ~cin >> T ;  $ ~while ( T -- ) {  $ ~~cin >> x ;  $ ~~if ( x . length ( ) > 10 )  $ ~~~cout << x [ 0 ] << x . length ( ) - 2 << x [ x . length ( ) - 1 ] << endl ;  $ ~~else  $ ~~~cout << x << endl ;  $ ~}  $ ~return 0 ;  $ }
long n , a [ 100005 ] , i ;  $ int main ( ) {  $ ~while ( cin >> n && n ) {  $ ~~long num = 0 ;  $ ~~long ao = 0 ;  $ ~~for ( i = 0 ; i < n ; i ++ ) { cin >> a [ i ] ; }  $ ~~sort ( a , a + n ) ;  $ ~~for ( i = 0 ; i < n - 1 ; i ++ ) {  $ ~~~if ( a [ i ] == a [ i + 1 ] && a [ i ] != 0 ) num ++ ;  $ ~~~if ( a [ i ] == 0 ) ao ++ ;  $ ~~}  $ ~~if ( a [ i ] == 0 ) ao ++ ;  $ ~~cout << n - num - ao << endl ;  $ ~}  $ }
int c [ 5 ] , a [ 5 ] [ 5005 ] ;  $ int main ( ) {  $ ~int n , x ;  $ ~while ( cin >> n ) {  $ ~~memset ( c , 0 , sizeof ( c ) ) ;  $ ~~for ( int i = 1 ; i <= n ; i ++ ) {  $ ~~~cin >> x ;  $ ~~~a [ x ] [ ++ c [ x ] ] = i ;  $ ~~}  $ ~~for ( int i = 1 ; i <= 3 ; i ++ ) n = min ( n , c [ i ] ) ;  $ ~~cout << n << endl ;  $ ~~for ( int i = 1 ; i <= n ; i ++ ) cout << a [ 1 ] [ i ] << " " << a [ 2 ] [ i ] << " " << a [ 3 ] [ i ] << endl ;  $ ~}  $ ~return 0 ;  $ }
int main ( ) {  $ ~int i , N , k , a ;  $ ~cin >> N >> k ;  $ ~for ( i = 1 ; i <= k ; i ++ ) {  $ ~~a = N % 10 ;  $ ~~if ( a != 0 ) {  $ ~~~N = N - 1 ;  $ ~~} else {  $ ~~~N = N / 10 ;  $ ~~}  $ ~}  $ ~cout << N << endl ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~int i , counter = 0 ;  $ ~string arr ;  $ ~cin >> arr ;  $ ~for ( i = 0 ; i < arr . size ( ) - 1 ; i ++ ) {  $ ~~if ( arr [ i ] == '1' && arr [ i + 1 ] == '0' ) {  $ ~~~arr [ i + 1 ] = ' ' ;  $ ~~~counter ++ ;  $ ~~~break ;  $ ~~}  $ ~}  $ ~if ( counter == 0 ) {  $ ~~if ( arr [ 0 ] == '0' ) {  $ ~~~arr [ 0 ] = ' ' ;  $ ~~} else {  $ ~~~arr [ arr . size ( ) - 1 ] = ' ' ;  $ ~~}  $ ~}  $ ~for ( i = 0 ; i < arr . size ( ) ; i ++ ) {  $ ~~if ( arr [ i ] != ' ' ) { cout << arr [ i ] ; }  $ ~}  $ ~cout << endl ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~string input , insertion ;  $ ~int unique , inputLength = 0 ;  $ ~cin >> input >> unique ;  $ ~inputLength = input . length ( ) ;  $ ~if ( inputLength < unique ) {  $ ~~cout << "impossible" << endl ;  $ ~} else {  $ ~~set < string > inputs ;  $ ~~for ( int i = 0 ; i < inputLength ; i ++ ) {  $ ~~~insertion = input [ i ] ;  $ ~~~inputs . insert ( insertion ) ;  $ ~~}  $ ~~if ( unique > inputs . size ( ) )  $ ~~~cout << unique - inputs . size ( ) << endl ;  $ ~~else  $ ~~~cout << 0 << endl ;  $ ~}  $ }
const int maxn = 1e5 + 7 ;  $ int a [ maxn ] ;  $ int b [ maxn ] ;  $ int c [ maxn ] ;  $ int main ( ) {  $ ~int n ;  $ ~cin >> n ;  $ ~for ( int i = 1 ; i <= n ; i ++ ) { cin >> a [ i ] ; }  $ ~for ( int i = 1 ; i < n ; i ++ ) { b [ i ] = abs ( a [ i ] - a [ i + 1 ] ) ; }  $ ~for ( int i = 1 ; i < n ; i ++ ) {  $ ~~if ( i % 2 ) {  $ ~~~c [ i ] = b [ i ] ;  $ ~~} else {  $ ~~~c [ i ] = ( - 1 ) * b [ i ] ;  $ ~~}  $ ~}  $ ~for ( int i = 1 ; i < n ; i ++ ) {  $ ~~if ( i % 2 )  $ ~~~a [ i ] = ( - 1 ) * b [ i ] ;  $ ~~else  $ ~~~a [ i ] = b [ i ] ;  $ ~}  $ ~long long suma = 0 , sumb = 0 ;  $ ~long long ansa = - 0 x3f3f3f3f , ansb = - 0 x3f3f3f3f ;  $ ~for ( int i = 1 ; i < n ; i ++ ) {  $ ~~suma += c [ i ] ;  $ ~~ansa = max ( ansa , suma ) ;  $ ~~if ( suma < 0 ) { suma = 0 ; }  $ ~}  $ ~for ( int i = 1 ; i < n ; i ++ ) {  $ ~~sumb += a [ i ] ;  $ ~~ansb = max ( ansb , sumb ) ;  $ ~~if ( sumb < 0 ) sumb = 0 ;  $ ~}  $ ~cout << max ( ansa , ansb ) << endl ;  $ ~return 0 ;  $ }
int z [ 1005 ] ;  $ int main ( ) {  $ ~string s ;  $ ~int n ;  $ ~while ( cin >> n ) {  $ ~~getchar ( ) ;  $ ~~getline ( cin , s ) ;  $ ~~int sum = 0 , d = 0 ;  $ ~~for ( int i = 0 ; i < n ; i ++ ) {  $ ~~~if ( s [ i ] == ' ' ) {  $ ~~~~z [ d ] = sum ;  $ ~~~~sum = 0 ;  $ ~~~~d ++ ;  $ ~~~} else {  $ ~~~~if ( s [ i ] >= 'A' && s [ i ] <= 'Z' ) { sum ++ ; }  $ ~~~}  $ ~~}  $ ~~z [ d ] = sum ;  $ ~~d ++ ;  $ ~~int max = z [ 0 ] ;  $ ~~for ( int i = 0 ; i < d ; i ++ ) {  $ ~~~if ( z [ i ] > max ) { max = z [ i ] ; }  $ ~~}  $ ~~cout << max << endl ;  $ ~}  $ }
int main ( ) {  $ ~int v ;  $ ~cin >> v ;  $ ~cout << ( v == 2 ) + 1 << endl ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~int a , n , x , i , tt = 0 ;  $ ~cin >> n >> x ;  $ ~for ( i = 1 ; i <= n ; i ++ ) {  $ ~~cin >> a ;  $ ~~tt += a ;  $ ~}  $ ~tt = abs ( tt ) ;  $ ~if ( tt % x == 0 )  $ ~~tt /= x ;  $ ~else  $ ~~tt = ( tt - tt % x ) / x + 1 ;  $ ~cout << tt << endl ;  $ }
int main ( ) {  $ ~int n = 0 ;  $ ~int m = 0 ;  $ ~int x = 0 ;  $ ~int y = 0 ;  $ ~int a [ 100000 ] ;  $ ~int b [ 100000 ] ;  $ ~cin >> n ;  $ ~cin >> m ;  $ ~cin >> x ;  $ ~cin >> y ;  $ ~for ( int i = 0 ; i < n ; i ++ ) cin >> a [ i ] ;  $ ~for ( int i = 0 ; i < m ; i ++ ) cin >> b [ i ] ;  $ ~int count = 0 ;  $ ~int index = 0 ;  $ ~bool isStop = false ;  $ ~for ( int i = 0 ; i < m ; i ++ ) {  $ ~~for ( int j = index ; j < n ; j ++ ) {  $ ~~~if ( a [ index ] - x > b [ i ] ) break ;  $ ~~~if ( a [ n - 1 ] + y < b [ i ] ) isStop = true ;  $ ~~~if ( a [ j ] - x <= b [ i ] && b [ i ] <= a [ j ] + y ) {  $ ~~~~a [ count ] = j + 1 ;  $ ~~~~b [ count ] = i + 1 ;  $ ~~~~count ++ ;  $ ~~~~index = j + 1 ;  $ ~~~~break ;  $ ~~~} else if ( b [ i ] < a [ j ] - x )  $ ~~~~break ;  $ ~~}  $ ~~if ( isStop ) break ;  $ ~}  $ ~cout << count << endl ;  $ ~for ( int i = 0 ; i < count ; i ++ ) cout << a [ i ] << " " << b [ i ] << endl ;  $ ~return 0 ;  $ }
int n ;  $ int a [ 35 ] [ 35 ] ;  $ int getColumn ( int x , int y ) {  $ ~int c = 0 ;  $ ~for ( int i = 0 ; i < n ; i ++ ) { c += a [ i ] [ y ] ; }  $ ~return c ;  $ }  $ int getRow ( int x , int y ) {  $ ~int r = 0 ;  $ ~for ( int i = 0 ; i < n ; i ++ ) { r += a [ x ] [ i ] ; }  $ ~return r ;  $ }  $ int main ( ) {  $ ~cin >> n ;  $ ~for ( int i = 0 ; i < n ; i ++ ) {  $ ~~for ( int j = 0 ; j < n ; j ++ ) { cin >> a [ i ] [ j ] ; }  $ ~}  $ ~int ans = 0 ;  $ ~for ( int i = 0 ; i < n ; i ++ ) {  $ ~~for ( int j = 0 ; j < n ; j ++ ) {  $ ~~~if ( getColumn ( i , j ) > getRow ( i , j ) ) { ans ++ ; }  $ ~~}  $ ~}  $ ~cout << ans << "\n" ;  $ }
int main ( ) {  $ ~string s ;  $ ~cin >> s ;  $ ~char ch = s [ 0 ] ;  $ ~int ans = 26 ;  $ ~ans += s . size ( ) * 25 ;  $ ~cout << ans << endl ;  $ ~return 0 ;  $ }
const int maxn = 200000 + 5 ;  $ int zw [ maxn << 2 ] ;  $ pair < int , int > G [ maxn ] ;  $ int ans [ maxn ] ;  $ int a [ maxn ] ;  $ int b [ 30 ] ;  $ int main ( ) {  $ ~int n , m ;  $ ~string s , ss , sss ;  $ ~while ( cin >> n >> m ) {  $ ~~for ( int i = 1 ; i < n ; i ++ ) { cin >> a [ i ] ; }  $ ~~int pos = 1 ;  $ ~~while ( pos < m ) { pos += a [ pos ] ; }  $ ~~if ( pos != m )  $ ~~~cout << "NO" << endl ;  $ ~~else  $ ~~~cout << "YES" << endl ;  $ ~}  $ ~return 0 ;  $ }
int main ( ) {  $ ~int t , n ;  $ ~cin >> t ;  $ ~string s ;  $ ~while ( t -- ) {  $ ~~cin >> s ;  $ ~~n = s . size ( ) ;  $ ~~if ( n <= 10 )  $ ~~~cout << s << endl ;  $ ~~else  $ ~~~cout << s [ 0 ] << n - 2 << s [ n - 1 ] << endl ;  $ ~}  $ ~return 0 ;  $ }
long long n , dia [ 10010 ] , m , ans = 0 , mis = 100000 , k , need = 0 ;  $ int main ( ) {  $ ~cin >> n >> m >> k ;  $ ~for ( int i = 1 ; i <= n ; ++ i ) {  $ ~~cin >> dia [ i ] ;  $ ~~if ( mis > dia [ i ] && i % 2 == 1 ) mis = dia [ i ] ;  $ ~}  $ ~need = n / 2 + 1 ;  $ ~if ( n % 2 == 0 || need > m )  $ ~~;  $ ~else {  $ ~~ans = m / need * k ;  $ ~~ans = min ( mis , ans ) ;  $ ~}  $ ~cout << ans << endl ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~int l , r , a ;  $ ~cin >> l >> r >> a ;  $ ~int ans ;  $ ~int s = a - abs ( l - r ) ;  $ ~if ( s >= 0 ) {  $ ~~ans = max ( l , r ) + s / 2 ;  $ ~} else {  $ ~~ans = max ( l , r ) + s ;  $ ~}  $ ~cout << ans * 2 << endl ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~int m , n , i ;  $ ~cin >> m >> n ;  $ ~for ( i = 0 ; m <= n ; i ++ ) {  $ ~~m *= 3 ;  $ ~~n *= 2 ;  $ ~}  $ ~cout << i << endl ;  $ ~return 0 ;  $ }
const int N = 1e5 + 10 ;  $ const int mod = 1e7 + 9 ;  $ int a [ N ] , b [ N ] ;  $ int main ( ) {  $ ~int n , k ;  $ ~cin >> n >> k ;  $ ~for ( int i = 1 ; i <= n ; i ++ ) cin >> a [ i ] ;  $ ~for ( int i = 1 ; i <= k ; i ++ ) cin >> b [ i ] ;  $ ~sort ( b + 1 , b + 1 + k ) ;  $ ~reverse ( b + 1 , b + 1 + k ) ;  $ ~int cnt = 1 ;  $ ~bool flag = false ;  $ ~for ( int i = 1 ; i <= n ; i ++ ) {  $ ~~if ( a [ i ] == 0 ) { a [ i ] = b [ cnt ++ ] ; }  $ ~}  $ ~for ( int i = 2 ; i <= n ; i ++ ) {  $ ~~if ( a [ i ] < a [ i - 1 ] ) flag = true ;  $ ~~if ( flag ) break ;  $ ~}  $ ~if ( flag ) {  $ ~~cout << "Yes" << endl ;  $ ~} else  $ ~~cout << "No" << endl ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~int n , m , k , a = 1 ;  $ ~cin >> n ;  $ ~k = 0 ;  $ ~while ( n -- ) {  $ ~~cin >> m ;  $ ~~while ( m % 2 == 0 ) m /= 2 ;  $ ~~while ( m % 3 == 0 ) m /= 3 ;  $ ~~if ( k != 0 && m != k ) a = 0 ;  $ ~~k = m ;  $ ~}  $ ~if ( a == 1 )  $ ~~cout << "Yes" << endl ;  $ ~else  $ ~~cout << "No" << endl ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~string a , b , c , d ;  $ ~int n ;  $ ~cin >> a >> b >> n ;  $ ~cout << a << ' ' << b << endl ;  $ ~while ( n -- ) {  $ ~~cin >> c >> d ;  $ ~~if ( a == c )  $ ~~~a = d ;  $ ~~else  $ ~~~b = d ;  $ ~~cout << a << ' ' << b << endl ;  $ ~}  $ ~return 0 ;  $ }
int main ( ) {  $ ~int n , m ;  $ ~cin >> n >> m ;  $ ~string d [ n ] ;  $ ~for ( int i = 0 ; i < n ; i ++ ) { cin >> d [ i ] ; }  $ ~int k ;  $ ~for ( int i = 0 ; i < n ; i ++ ) {  $ ~~k = 0 ;  $ ~~for ( int j = 0 ; j < m ; j ++ ) {  $ ~~~if ( d [ i ] [ j ] == 'B' ) k ++ ;  $ ~~}  $ ~~if ( k > 0 ) {  $ ~~~int p = 0 ;  $ ~~~for ( int j = 0 ; j < m ; j ++ ) {  $ ~~~~if ( d [ i ] [ j ] == 'B' ) p ++ ;  $ ~~~~if ( p == ( k / 2 ) + 1 ) {  $ ~~~~~cout << i + k / 2 + 1 << " " << j + 1 << endl ;  $ ~~~~~return 0 ;  $ ~~~~}  $ ~~~}  $ ~~}  $ ~}  $ }
bool arr [ 305 ] = { } ;  $ int main ( ) {  $ ~int mod , items ;  $ ~int win = - 2 ;  $ ~int y ;  $ ~cin >> mod >> items ;  $ ~for ( int a1 = 0 ; a1 < items ; a1 ++ ) {  $ ~~cin >> y ;  $ ~~if ( arr [ y % mod ] == true && win == - 2 ) { win = a1 ; }  $ ~~arr [ y % mod ] = true ;  $ ~}  $ ~cout << win + 1 << endl ;  $ }
int main ( ) {  $ ~int l2r [ 100000 ] ;  $ ~int n , er , el , ql , qr ;  $ ~cin >> n >> el >> er >> ql >> qr ;  $ ~for ( int i = 0 ; i < n ; i ++ ) { cin >> l2r [ i ] ; }  $ ~for ( int i = 1 ; i < n ; i ++ ) { l2r [ i ] += l2r [ i - 1 ] ; }  $ ~long long sum = l2r [ n - 1 ] ;  $ ~long long mn = min ( sum * er + ( n - 1 ) * qr , sum * el + ( n - 1 ) * ql ) ;  $ ~for ( int i = 0 ; i < n - 1 ; i ++ ) {  $ ~~long long tmp = l2r [ i ] * el ;  $ ~~int diff = ( n - i - 1 ) - ( i + 1 ) ;  $ ~~tmp += ( sum - l2r [ i ] ) * er ;  $ ~~if ( diff < - 1 )  $ ~~~tmp += ( - diff - 1 ) * ql ;  $ ~~else if ( diff > 1 )  $ ~~~tmp += ( diff - 1 ) * qr ;  $ ~~mn = min ( mn , tmp ) ;  $ ~}  $ ~cout << mn << '\n' ;  $ ~;  $ ~return 0 ;  $ }
int main ( ) {  $ ~int n , a [ 100 ] ;  $ ~cin >> n ;  $ ~for ( int i = 0 ; i < n ; i ++ ) cin >> a [ i ] ;  $ ~int mx = 0 , ans ;  $ ~for ( int i = 0 ; i < n ; i ++ )  $ ~~for ( int j = i ; j < n ; j ++ ) {  $ ~~~ans = 0 ;  $ ~~~for ( int k = 0 ; k < n ; k ++ )  $ ~~~~if ( k >= i && k <= j )  $ ~~~~~ans += 1 - a [ k ] ;  $ ~~~~else  $ ~~~~~ans += a [ k ] ;  $ ~~~mx = max ( mx , ans ) ;  $ ~~}  $ ~cout << mx << endl ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~int ct , x ;  $ ~cin >> ct >> x ;  $ ~int vet [ ct ] ;  $ ~for ( int i = 0 ; i < ct ; i ++ ) { vet [ i ] = 2 ; }  $ ~int j = 0 ;  $ ~int aux = 0 ;  $ ~if ( ct * 2 == x ) {  $ ~~cout << ct << endl ;  $ ~~return 0 ;  $ ~}  $ ~while ( ct * 2 + aux != x ) {  $ ~~if ( j >= ct ) j -= ct ;  $ ~~if ( ct * 2 + aux < x ) {  $ ~~~vet [ j ] ++ ;  $ ~~~aux ++ ;  $ ~~~j ++ ;  $ ~~} else if ( ct * 2 + aux > x && vet [ j ] > 2 ) {  $ ~~~vet [ j ] -- ;  $ ~~~aux -- ;  $ ~~~j ++ ;  $ ~~} else  $ ~~~j ++ ;  $ ~}  $ ~int ans = 0 ;  $ ~for ( int i = 0 ; i < ct ; i ++ ) {  $ ~~if ( vet [ i ] == 2 ) ans ++ ;  $ ~}  $ ~cout << ans << endl ;  $ }
int n , a [ 1005 ] , b [ 1005 ] , l , r , am , bm , ma , t ;  $ int main ( ) {  $ ~cin >> n ;  $ ~am = 0 ;  $ ~bm = 0 ;  $ ~t = 0 ;  $ ~for ( int i = 0 ; i < n ; i ++ ) {  $ ~~cin >> a [ i ] ;  $ ~~if ( a [ i ] > t ) {  $ ~~~am = i ;  $ ~~~t = a [ i ] ;  $ ~~}  $ ~}  $ ~t = 0 ;  $ ~for ( int i = 0 ; i < n ; i ++ ) {  $ ~~cin >> b [ i ] ;  $ ~~if ( b [ i ] > t ) {  $ ~~~bm = i ;  $ ~~~t = b [ i ] ;  $ ~~}  $ ~}  $ ~l = min ( am , bm ) ;  $ ~r = max ( am , bm ) ;  $ ~am = 0 ;  $ ~bm = 0 ;  $ ~for ( int i = l ; i <= r ; i ++ ) {  $ ~~am = am | a [ i ] ;  $ ~~bm = bm | b [ i ] ;  $ ~}  $ ~ma = am + bm ;  $ ~while ( l > 0 || r < n - 1 ) {  $ ~~int ha = 0 , hb = 0 ;  $ ~~if ( l > 0 ) {  $ ~~~ha = am | a [ l - 1 ] ;  $ ~~~hb = bm | b [ l - 1 ] ;  $ ~~~if ( ha + hb > ma ) ma = ha + hb ;  $ ~~~l -- ;  $ ~~}  $ ~~if ( r < n - 1 ) {  $ ~~~ha = am | a [ r + 1 ] ;  $ ~~~hb = bm | b [ r + 1 ] ;  $ ~~~if ( ha + hb > ma ) ma = ha + hb ;  $ ~~~r ++ ;  $ ~~}  $ ~~if ( l >= 0 ) {  $ ~~~ha = ha | a [ l ] ;  $ ~~~hb = hb | b [ l ] ;  $ ~~~if ( ha + hb > ma ) ma = ha + hb ;  $ ~~}  $ ~~am = ha ;  $ ~~bm = hb ;  $ ~}  $ ~cout << ma << endl ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~int arr [ 5 ] ;  $ ~int sum = 0 ;  $ ~for ( int i = 0 ; i < 5 ; i ++ ) {  $ ~~cin >> arr [ i ] ;  $ ~~sum += arr [ i ] ;  $ ~}  $ ~if ( sum == 0 ) {  $ ~~cout << - 1 << endl ;  $ ~~return 0 ;  $ ~}  $ ~if ( sum % 5 == 0 )  $ ~~cout << sum / 5 << endl ;  $ ~else  $ ~~cout << - 1 << endl ;  $ }
int main ( ) {  $ ~int no , max = 0 , t = 1 ;  $ ~int arr [ 100001 ] ;  $ ~cin >> no ;  $ ~for ( int i = 0 ; i < no ; i ++ ) { cin >> arr [ i ] ; }  $ ~for ( int i = 1 ; i < no ; i ++ ) {  $ ~~if ( arr [ i ] > arr [ i - 1 ] ) {  $ ~~~t ++ ;  $ ~~} else {  $ ~~~if ( t > max ) { max = t ; }  $ ~~~t = 1 ;  $ ~~}  $ ~}  $ ~if ( t > max ) { max = t ; }  $ ~cout << max << "\n" ;  $ }
int fun ( int x , int y ) {  $ ~int a , b , c = 1 ;  $ ~a = max ( x , y ) ;  $ ~b = min ( x , y ) ;  $ ~while ( c != 0 ) {  $ ~~c = a % b ;  $ ~~a = b ;  $ ~~b = c ;  $ ~}  $ ~return x * y / a ;  $ }  $ int main ( ) {  $ ~int n , m , s , ans ;  $ ~while ( cin >> n >> m >> s ) {  $ ~~ans = 0 ;  $ ~~int a = fun ( n , m ) ;  $ ~~int b = a ;  $ ~~while ( b <= s ) {  $ ~~~ans ++ ;  $ ~~~b += a ;  $ ~~}  $ ~~cout << ans << endl ;  $ ~}  $ }
set < int > se ;  $ int main ( ) {  $ ~int n ;  $ ~cin >> n ;  $ ~for ( int i = 0 ; i < n ; i ++ ) {  $ ~~int x ;  $ ~~cin >> x ;  $ ~~if ( x ) se . insert ( x ) ;  $ ~}  $ ~cout << se . size ( ) << endl ;  $ }
static const int MOD = 1e9 + 7 ;  $ static const int N = 1 << 17 ;  $ long long gcd ( long long x , long long y ) {  $ ~return y == 0 ? x : gcd ( y , x % y ) ;  $ }  $ int solve ( ) {  $ ~int n ;  $ ~int row [ 128 ] = { } ;  $ ~cin >> n ;  $ ~int ans = 0 ;  $ ~for ( int i = ( 0 ) , __b = ( n ) ; i < __b ; ++ i ) {  $ ~~int c = 0 ;  $ ~~string s ;  $ ~~cin >> s ;  $ ~~for ( int j = ( 0 ) , __b = ( n ) ; j < __b ; ++ j )  $ ~~~if ( s [ j ] == 'C' ) ++ c , ++ row [ j ] ;  $ ~~ans += c * ( c - 1 ) / 2 ;  $ ~}  $ ~for ( int i = ( 0 ) , __b = ( n ) ; i < __b ; ++ i ) ans += row [ i ] * ( row [ i ] - 1 ) / 2 ;  $ ~cout << ans << endl ;  $ ~return 0 ;  $ }  $ int main ( ) {  $ ~: : cout . precision ( 20 ) ;  $ ~solve ( ) ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~int a , b ;  $ ~while ( cin >> a >> b ) { cout << min ( a , b ) << " " << ( max ( a , b ) - min ( a , b ) ) / 2 << endl ; }  $ }
int a [ 2000 ] ;  $ int main ( ) {  $ ~int n , p , x , i , j , count = 0 ;  $ ~cin >> n ;  $ ~cin >> p ;  $ ~for ( i = 0 ; i < p ; i ++ ) {  $ ~~cin >> j ;  $ ~~a [ j ] = 1 ;  $ ~}  $ ~cin >> x ;  $ ~for ( i = 0 ; i < x ; i ++ ) {  $ ~~cin >> j ;  $ ~~a [ j ] = 1 ;  $ ~}  $ ~for ( i = 1 ; i <= n ; i ++ ) {  $ ~~if ( a [ i ] == 0 ) count = 1 ;  $ ~}  $ ~if ( count == 1 )  $ ~~cout << "Oh, my keyboard!" << endl ;  $ ~else  $ ~~cout << "I become the guy." << endl ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~int n , m , l , r ;  $ ~char c1 , c2 ;  $ ~cin >> n >> m ;  $ ~string s ;  $ ~cin >> s ;  $ ~for ( int i = 0 ; i < m ; i ++ ) {  $ ~~cin >> l >> r >> c1 >> c2 ;  $ ~~for ( int j = l - 1 ; j < r ; j ++ ) {  $ ~~~if ( s [ j ] == c1 ) { s [ j ] = c2 ; }  $ ~~}  $ ~}  $ ~cout << s << endl ;  $ }
map < long long , long long > mp ;  $ void PD ( long long a , long long b ) {  $ ~if ( mp . find ( a ) == mp . end ( ) ) mp [ a ] = 0 ;  $ ~mp [ a ] += b ;  $ }  $ int main ( ) {  $ ~long long n , s , u , v , w , d = 0 ;  $ ~cin >> n ;  $ ~while ( n -- ) {  $ ~~cin >> s >> u >> v ;  $ ~~if ( s == 1 ) {  $ ~~~cin >> w ;  $ ~~~while ( 1 ) {  $ ~~~~if ( u == v )  $ ~~~~~break ;  $ ~~~~else if ( u > v ) {  $ ~~~~~PD ( u , w ) ;  $ ~~~~~u = u / 2 ;  $ ~~~~} else if ( u < v ) {  $ ~~~~~PD ( v , w ) ;  $ ~~~~~v = v / 2 ;  $ ~~~~}  $ ~~~}  $ ~~} else if ( s == 2 ) {  $ ~~~while ( 1 ) {  $ ~~~~if ( u == v )  $ ~~~~~break ;  $ ~~~~else if ( u > v ) {  $ ~~~~~d += mp [ u ] ;  $ ~~~~~u = u / 2 ;  $ ~~~~} else if ( u < v ) {  $ ~~~~~d += mp [ v ] ;  $ ~~~~~v = v / 2 ;  $ ~~~~}  $ ~~~}  $ ~~~cout << d << endl ;  $ ~~~d = 0 ;  $ ~~}  $ ~}  $ ~return 0 ;  $ }
int cari ( int mulai , string a , char b ) {  $ ~int len = a . length ( ) ;  $ ~for ( int i = mulai ; i < len ; i ++ ) {  $ ~~if ( a [ i ] == b ) return i ;  $ ~}  $ ~return - 1 ;  $ }  $ int main ( ) {  $ ~string a ;  $ ~cin >> a ;  $ ~int searchres ;  $ ~searchres = cari ( 0 , a , 'h' ) ;  $ ~if ( searchres == - 1 ) {  $ ~~cout << "NO" << endl ;  $ ~~return 0 ;  $ ~}  $ ~searchres = cari ( searchres , a , 'e' ) ;  $ ~if ( searchres == - 1 ) {  $ ~~cout << "NO" << endl ;  $ ~~return 0 ;  $ ~}  $ ~searchres = cari ( searchres , a , 'l' ) ;  $ ~if ( searchres == - 1 ) {  $ ~~cout << "NO" << endl ;  $ ~~return 0 ;  $ ~}  $ ~searchres = cari ( searchres + 1 , a , 'l' ) ;  $ ~if ( searchres == - 1 ) {  $ ~~cout << "NO" << endl ;  $ ~~return 0 ;  $ ~}  $ ~searchres = cari ( searchres , a , 'o' ) ;  $ ~if ( searchres == - 1 ) {  $ ~~cout << "NO" << endl ;  $ ~~return 0 ;  $ ~}  $ ~cout << "YES" << endl ;  $ }
int main ( ) {  $ ~int n ;  $ ~cin >> n ;  $ ~vector < int > a ( n ) ;  $ ~for ( int i = 0 ; i < n ; i ++ ) cin >> a [ i ] ;  $ ~int res = 0 ;  $ ~int head = 0 ;  $ ~for ( int i = 1 ; i < n ; i ++ ) {  $ ~~if ( a [ i ] == a [ i - 1 ] ) {  $ ~~~int tar = i - 1 ;  $ ~~~res = max ( res , tar - head ) ;  $ ~~~int len = ( tar - head ) / 2 ;  $ ~~~for ( int j = head ; j <= head + len ; j ++ ) { a [ j ] = a [ head ] ; }  $ ~~~for ( int j = head + len + 1 ; j < i ; j ++ ) { a [ j ] = a [ i ] ; }  $ ~~~head = i ;  $ ~~}  $ ~}  $ ~int tar = n - 1 ;  $ ~res = max ( res , tar - head ) ;  $ ~int len = ( tar - head ) / 2 ;  $ ~for ( int j = head ; j <= head + len ; j ++ ) { a [ j ] = a [ head ] ; }  $ ~for ( int j = head + len + 1 ; j < n ; j ++ ) { a [ j ] = a [ n - 1 ] ; }  $ ~cout << res / 2 << endl ;  $ ~for ( int i = 0 ; i < n ; i ++ ) { cout << a [ i ] << ( i + 1 == n ? "\n" : " " ) ; }  $ ~return 0 ;  $ }
int n , m , k ;  $ int main ( ) {  $ ~cin >> n >> m >> k ;  $ ~int p = ( k - 1 ) / 2 ;  $ ~int ans = p / m + 1 ;  $ ~int ans1 = p % m + 1 ;  $ ~if ( k % 2 != 0 ) {  $ ~~cout << ans << " " << ans1 << " L" << endl ;  $ ~} else {  $ ~~cout << ans << " " << ans1 << " R" << endl ;  $ ~}  $ }
unsigned long long a [ 2000000 ] ;  $ unsigned long long b [ 2000000 ] ;  $ int n ;  $ bool judge ( int n ) {  $ ~for ( int i = 0 ; i < n - 1 ; ++ i ) {  $ ~~if ( a [ i ] == a [ i + 1 ] ) return true ;  $ ~}  $ ~return false ;  $ }  $ int main ( ) {  $ ~while ( cin >> n ) {  $ ~~memset ( a , 0 , sizeof ( a ) ) ;  $ ~~for ( int i = 0 ; i < n ; ++ i ) {  $ ~~~cin >> a [ i ] ;  $ ~~~b [ a [ i ] ] ++ ;  $ ~~}  $ ~~sort ( a , a + n ) ;  $ ~~int ans = 0 ;  $ ~~for ( int i = 1 ; i < 2000000 ; ++ i ) {  $ ~~~b [ i ] += ( b [ i - 1 ] / 2 ) ;  $ ~~~b [ i - 1 ] %= 2 ;  $ ~~~ans += b [ i - 1 ] ;  $ ~~}  $ ~~cout << ans << endl ;  $ ~}  $ }
int v [ 110 ] ;  $ int n , m , k , sum , x ;  $ int main ( ) {  $ ~cin >> n >> m ;  $ ~memset ( v , 0 , sizeof ( v ) ) ;  $ ~for ( int i = 0 ; i < m ; i ++ ) {  $ ~~k = 1 ;  $ ~~sum = - 1 ;  $ ~~for ( int i = 1 ; i <= n ; i ++ ) {  $ ~~~cin >> x ;  $ ~~~if ( sum < x ) {  $ ~~~~sum = x ;  $ ~~~~k = i ;  $ ~~~}  $ ~~}  $ ~~v [ k ] ++ ;  $ ~}  $ ~int Max = 0 ;  $ ~int ans = 1 ;  $ ~for ( int i = 1 ; i <= n ; i ++ ) {  $ ~~if ( v [ i ] > Max ) {  $ ~~~Max = v [ i ] ;  $ ~~~ans = i ;  $ ~~}  $ ~}  $ ~cout << ans << endl ;  $ }
long long arr [ 1000000 ] ;  $ int main ( ) {  $ ~long long n ;  $ ~cin >> n ;  $ ~long long sum = 0 ;  $ ~for ( long long i = 1 ; i <= n ; i ++ ) {  $ ~~cin >> arr [ i ] ;  $ ~~sum += arr [ i ] ;  $ ~}  $ ~long long ans = 0 ;  $ ~if ( sum % 2 == 0 )  $ ~~sum /= 2 ;  $ ~else  $ ~~sum = sum / 2 + 1 ;  $ ~for ( long long i = 1 ; i <= n ; i ++ ) {  $ ~~if ( ans >= sum ) {  $ ~~~cout << i << endl ;  $ ~~~return 0 ;  $ ~~}  $ ~~ans += arr [ i ] ;  $ ~~if ( ans >= sum ) {  $ ~~~cout << i << endl ;  $ ~~~return 0 ;  $ ~~}  $ ~}  $ ~return 0 ;  $ }
set < string > st ;  $ string s ;  $ int answer = 0 ;  $ int p [ 3 ] [ 6 ] = { { 1 , 5 , 2 , 3 , 0 , 4 } , { 3 , 1 , 0 , 5 , 4 , 2 } , { 0 , 2 , 4 , 1 , 3 , 5 } } ;  $ void permut ( string & s , int type ) {  $ ~string new_s = s ;  $ ~for ( int i = 0 ; i < 6 ; i ++ ) s [ i ] = new_s [ p [ type ] [ i ] ] ;  $ } ;  $ int main ( ) {  $ ~cin >> s ;  $ ~sort ( s . begin ( ) , s . end ( ) ) ;  $ ~do {  $ ~~if ( st . find ( s ) == st . end ( ) ) {  $ ~~~answer ++ ;  $ ~~~string t = s ;  $ ~~~for ( int i = 0 ; i < 4 ; i ++ ) {  $ ~~~~permut ( t , 0 ) ;  $ ~~~~for ( int j = 0 ; j < 4 ; j ++ ) {  $ ~~~~~permut ( t , 1 ) ;  $ ~~~~~for ( int k = 0 ; k < 4 ; k ++ ) {  $ ~~~~~~permut ( t , 2 ) ;  $ ~~~~~~st . insert ( t ) ;  $ ~~~~~} ;  $ ~~~~} ;  $ ~~~} ;  $ ~~} ;  $ ~} while ( next_permutation ( s . begin ( ) , s . end ( ) ) ) ;  $ ~cout << answer << endl ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~int n , sum ;  $ ~cin >> n ;  $ ~for ( int i = 1 ; i <= 1000 ; i ++ ) {  $ ~~int k = 0 ;  $ ~~sum = n * i + 1 ;  $ ~~for ( int j = 2 ; j < sum ; j ++ ) {  $ ~~~if ( sum % j == 0 ) {  $ ~~~~k = 1 ;  $ ~~~~break ;  $ ~~~}  $ ~~}  $ ~~if ( k == 1 ) {  $ ~~~cout << i << endl ;  $ ~~~break ;  $ ~~}  $ ~}  $ ~return 0 ;  $ }
int main ( ) {  $ ~int num [ 4 ] = { 0 } ;  $ ~int n ;  $ ~cin >> n ;  $ ~for ( int i = 1 ; i <= n ; i ++ ) {  $ ~~int tmp ;  $ ~~cin >> tmp ;  $ ~~num [ tmp ] ++ ;  $ ~}  $ ~if ( num [ 1 ] >= num [ 2 ] && num [ 1 ] >= num [ 3 ] )  $ ~~cout << num [ 2 ] + num [ 3 ] << endl ;  $ ~else if ( num [ 2 ] >= num [ 1 ] && num [ 2 ] >= num [ 3 ] )  $ ~~cout << num [ 1 ] + num [ 3 ] << endl ;  $ ~else  $ ~~cout << num [ 1 ] + num [ 2 ] << endl ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~int a , b ;  $ ~int m = 0 ;  $ ~cin >> b >> a ;  $ ~while ( a != 0 ) {  $ ~~m = m * 10 + a % 10 ;  $ ~~a /= 10 ;  $ ~}  $ ~cout << m + b << endl ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~int k , r ;  $ ~cin >> k >> r ;  $ ~for ( int i = 1 ; ; i ++ ) {  $ ~~if ( i * k % 10 == 0 || ( i * k - r ) % 10 == 0 ) {  $ ~~~cout << i << endl ;  $ ~~~break ;  $ ~~}  $ ~}  $ }
int main ( ) {  $ ~int n , k ;  $ ~cin >> n >> k ;  $ ~int arya = 0 , bran = 0 ;  $ ~int mnd = 0 ;  $ ~for ( int i = 0 ; i < n ; ++ i ) {  $ ~~int today ;  $ ~~cin >> today ;  $ ~~if ( today + arya >= 8 ) {  $ ~~~bran += 8 ;  $ ~~~arya += today - 8 ;  $ ~~~++ mnd ;  $ ~~} else {  $ ~~~bran += today + arya ;  $ ~~~arya = 0 ;  $ ~~~++ mnd ;  $ ~~}  $ ~~if ( bran >= k ) {  $ ~~~cout << mnd << "\n" ;  $ ~~~return 0 ;  $ ~~}  $ ~}  $ ~if ( bran < k ) { cout << - 1 << "\n" ; }  $ ~return 0 ;  $ }
int main ( ) {  $ ~long long int n , i = 0 , diff , row , col ;  $ ~cin >> n ;  $ ~for ( i = 1 ; i * i <= n ; i ++ ) {  $ ~~if ( n % i == 0 ) {  $ ~~~if ( abs ( i - ( n / i ) ) < diff ) {  $ ~~~~row = i ;  $ ~~~~col = n / i ;  $ ~~~~diff = abs ( i - ( n / i ) ) ;  $ ~~~}  $ ~~}  $ ~}  $ ~cout << row << " " << col << endl ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~int n , i , x , y , m = 10000 , s = 0 ;  $ ~cin >> n ;  $ ~for ( i = 0 ; i < n ; i ++ ) {  $ ~~cin >> x >> y ;  $ ~~m = min ( m , y ) ;  $ ~~s += m * x ;  $ ~}  $ ~cout << s << endl ;  $ }
int main ( ) {  $ ~int n ;  $ ~while ( cin >> n ) {  $ ~~int ans_a [ 6 ] , ans_b [ 6 ] ;  $ ~~memset ( ans_a , 0 , sizeof ( ans_a ) ) ;  $ ~~memset ( ans_b , 0 , sizeof ( ans_b ) ) ;  $ ~~int k , i ;  $ ~~for ( i = 0 ; i < n ; i ++ ) {  $ ~~~cin >> k ;  $ ~~~ans_a [ k ] ++ ;  $ ~~}  $ ~~for ( i = 0 ; i < n ; i ++ ) {  $ ~~~cin >> k ;  $ ~~~ans_b [ k ] ++ ;  $ ~~}  $ ~~int cnt = 0 ;  $ ~~bool flag = true ;  $ ~~for ( int i = 1 ; i <= 5 ; i ++ ) {  $ ~~~if ( ( ans_a [ i ] + ans_b [ i ] ) % 2 != 0 ) {  $ ~~~~flag = false ;  $ ~~~~break ;  $ ~~~}  $ ~~~cnt += abs ( ans_a [ i ] - ans_b [ i ] ) / 2 ;  $ ~~}  $ ~~if ( flag == false )  $ ~~~cout << - 1 << endl ;  $ ~~else  $ ~~~cout << ( cnt / 2 ) << endl ;  $ ~}  $ ~return 0 ;  $ }
int main ( ) {  $ ~int a , b , cnt , x , y ;  $ ~cin >> a >> b ;  $ ~if ( a > b ) {  $ ~~x = ( a - b ) / 2 ;  $ ~~cout << b << " " << x << endl ;  $ ~} else {  $ ~~y = ( b - a ) / 2 ;  $ ~~cout << a << " " << y << endl ;  $ ~}  $ ~return 0 ;  $ }
int main ( ) {  $ ~long long int n ;  $ ~cin >> n ;  $ ~long long int firstdata , seconddata , saved = 0 ;  $ ~long long int result = n ;  $ ~cin >> firstdata ;  $ ~for ( long long int i = 0 ; i < n - 1 ; i ++ ) {  $ ~~cin >> seconddata ;  $ ~~if ( firstdata != seconddata ) {  $ ~~~saved = 0 ;  $ ~~~firstdata = seconddata ;  $ ~~~continue ;  $ ~~} else {  $ ~~~saved ++ ;  $ ~~~result += saved ;  $ ~~~firstdata = seconddata ;  $ ~~}  $ ~}  $ ~cout << result << endl ;  $ }
int main ( ) {  $ ~int n ;  $ ~cin >> n ;  $ ~for ( int i = 0 ; i < n ; i ++ ) {  $ ~~int tmp = min ( i + 1 , n - i ) ;  $ ~~int a = tmp * 2 - 1 ;  $ ~~int b = ( n - a ) / 2 ;  $ ~~for ( int i = 0 ; i < b ; i ++ ) cout << "*" ;  $ ~~for ( int i = 0 ; i < a ; i ++ ) cout << "D" ;  $ ~~for ( int i = 0 ; i < b ; i ++ ) cout << "*" ;  $ ~~cout << endl ;  $ ~}  $ }
int main ( ) {  $ ~string n ;  $ ~cin >> n ;  $ ~int j ;  $ ~bool ok = true ;  $ ~for ( j = 0 ; j < n . size ( ) ; ++ j ) {  $ ~~if ( n [ j ] == '1' ) {  $ ~~~if ( j + 1 < n . size ( ) and n [ j + 1 ] == '4' ) {  $ ~~~~if ( j + 2 < n . size ( ) and n [ j + 2 ] == '4' ) { j ++ ; }  $ ~~~~j ++ ;  $ ~~~}  $ ~~} else {  $ ~~~ok = false ;  $ ~~}  $ ~}  $ ~if ( ok )  $ ~~cout << "YES" ;  $ ~else  $ ~~cout << "NO" ;  $ ~cout << '\n' ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~const int duration = 86400 ;  $ ~int n , t ;  $ ~while ( cin >> n >> t ) {  $ ~~vector < int > a ( n + 1 , 0 ) ;  $ ~~for ( int i = 0 ; i < n ; ++ i ) { cin >> a [ i ] ; }  $ ~~int answ = 0 ;  $ ~~while ( t > 0 ) {  $ ~~~t -= ( duration - a [ answ ] ) ;  $ ~~~++ answ ;  $ ~~}  $ ~~cout << answ << endl ;  $ ~}  $ ~return 0 ;  $ }
int main ( ) {  $ ~int n ;  $ ~while ( cin >> n ) { cout << n / 2 + 1 << endl ; }  $ }
int main ( ) {  $ ~int n ;  $ ~while ( cin >> n ) { cout << n / 2 + 1 << endl ; }  $ ~return 0 ;  $ }
long long mul ( long long x , long long p ) {  $ ~long long ans = 1 ;  $ ~while ( p ) {  $ ~~if ( p & 1 ) ans = ans * x % 1000000007 ;  $ ~~x = x * x % 1000000007 ;  $ ~~p = p >> 1 ;  $ ~}  $ ~return ans ;  $ }  $ int main ( ) {  $ ~long long n ;  $ ~cin >> n ;  $ ~if ( n ) {  $ ~~long long w = mul ( 2 , n - 1 ) ;  $ ~~cout << ( w + 2 * w * w % 1000000007 ) % 1000000007 << endl ;  $ ~} else  $ ~~cout << 1 << endl ;  $ ~return 0 ;  $ }
const int inf = ( 1 << 30 ) - 1 ;  $ int main ( ) {  $ ~int n , l , r , Ql , Qr , ans = inf ;  $ ~bool L = false , R = false ;  $ ~cin >> n >> l >> r >> Ql >> Qr ;  $ ~int a [ n + 1 ] ;  $ ~a [ 0 ] = 0 ;  $ ~for ( int i = 1 ; i <= n ; ++ i ) {  $ ~~cin >> a [ i ] ;  $ ~~a [ i ] += a [ i - 1 ] ;  $ ~}  $ ~for ( int i = 0 ; i <= n ; ++ i ) {  $ ~~int sum1 = a [ i ] , sum2 = a [ n ] - a [ i ] , x = i , y = n - i ;  $ ~~if ( x < y ) {  $ ~~~int d = max ( 0 , y - x - 1 ) ;  $ ~~~ans = min ( ans , sum1 * l + sum2 * r + d * Qr ) ;  $ ~~}  $ ~~if ( x >= y ) {  $ ~~~int d = max ( 0 , x - y - 1 ) ;  $ ~~~ans = min ( ans , sum1 * l + sum2 * r + d * Ql ) ;  $ ~~}  $ ~}  $ ~cout << ans << "\n" ;  $ }
int main ( ) {  $ ~int n ;  $ ~string s ;  $ ~cin >> n >> s ;  $ ~int ans = 0 , d = 0 ;  $ ~for ( int i = 0 ; i < s . size ( ) ; i ++ ) {  $ ~~if ( s [ i ] == '1' )  $ ~~~++ d ;  $ ~~else {  $ ~~~if ( d != 0 ) ans = ans + d , d = 0 ;  $ ~~~ans = ans * 10 ;  $ ~~}  $ ~}  $ ~if ( d != 0 ) ans = ans + d ;  $ ~cout << ans << endl ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~int n , m ;  $ ~cin >> n >> m ;  $ ~for ( int i = 1 ; true ; i = ( i + 1 ) % ( n + 1 ) ) {  $ ~~if ( m >= i ) {  $ ~~~m = m - i ;  $ ~~} else {  $ ~~~break ;  $ ~~}  $ ~}  $ ~cout << m << endl ;  $ }
int main ( ) {  $ ~unsigned long long n , k ;  $ ~cin >> n >> k ;  $ ~if ( ( n / k ) % 2 ) {  $ ~~cout << "YES" << endl ;  $ ~} else {  $ ~~cout << "NO" << endl ;  $ ~}  $ ~return 0 ;  $ }
int main ( ) {  $ ~int n , b ( 0 ) ;  $ ~cin >> n ;  $ ~n *= 2 ;  $ ~while ( n /= 2 ) b += n % 2 ;  $ ~cout << b << endl ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~int n ;  $ ~cin >> n ;  $ ~long long int arr [ 2 * n ] ;  $ ~for ( int i = 0 ; i < 2 * n ; i ++ ) cin >> arr [ i ] ;  $ ~sort ( arr , arr + 2 * n ) ;  $ ~long long int X = arr [ n - 1 ] - arr [ 0 ] ;  $ ~long long int Y = arr [ 2 * n - 1 ] - arr [ n ] ;  $ ~long long int ans = X * Y ;  $ ~for ( int i = 1 ; i < n ; i ++ ) { ans = min ( ans , ( arr [ 2 * n - 1 ] - arr [ 0 ] ) * ( arr [ i + n - 1 ] - arr [ i ] ) ) ; }  $ ~cout << ans << endl ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~int n ;  $ ~cin >> n ;  $ ~int arr [ n + 1 ] ;  $ ~fill ( arr , arr + n + 1 , - 1 ) ;  $ ~int num ;  $ ~int count = 0 , mx = 0 ;  $ ~for ( int i = 1 ; i <= 2 * n ; ++ i ) {  $ ~~cin >> num ;  $ ~~if ( arr [ num ] == - 1 ) {  $ ~~~arr [ num ] = 0 ;  $ ~~~++ count ;  $ ~~} else if ( arr [ num ] == 0 ) {  $ ~~~arr [ num ] = 1 ;  $ ~~~-- count ;  $ ~~}  $ ~~mx = max ( mx , count ) ;  $ ~}  $ ~cout << mx << '\n' ;  $ }
int main ( ) {  $ ~int n ;  $ ~cin >> n ;  $ ~int a [ 110 ] ;  $ ~memset ( a , 0 , sizeof ( a ) ) ;  $ ~for ( int i = 1 ; i <= n ; i ++ ) { cin >> a [ i ] ; }  $ ~int temp ;  $ ~int ans = - 1 ;  $ ~for ( int i = 0 ; i <= n + 1 ; i ++ ) {  $ ~~temp = 0 ;  $ ~~for ( int j = 1 ; j <= i && j <= n ; j ++ ) {  $ ~~~if ( a [ j ] == 0 ) { temp ++ ; }  $ ~~}  $ ~~for ( int j = i ; j <= n ; j ++ ) {  $ ~~~if ( a [ j ] == 1 ) { temp ++ ; }  $ ~~}  $ ~~ans = max ( ans , temp ) ;  $ ~}  $ ~cout << ans << endl ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~int n ;  $ ~cin >> n ;  $ ~vector < int > v ( n ) ;  $ ~for ( int i = 0 ; i < n ; i ++ ) cin >> v [ i ] ;  $ ~vector < int > cnt ( 3 ) ;  $ ~for ( int j = 0 ; j < 3 ; j ++ ) {  $ ~~for ( int i = 0 ; i < n ; i ++ ) {  $ ~~~if ( v [ i ] != j + 1 ) cnt [ j ] ++ ;  $ ~~}  $ ~}  $ ~cout << min ( cnt [ 0 ] , min ( cnt [ 1 ] , cnt [ 2 ] ) ) << '\n' ;  $ }
int main ( ) {  $ ~int n , p , q ;  $ ~cin >> n ;  $ ~cin >> p ;  $ ~int P [ p ] ;  $ ~for ( int i = 0 ; i < p ; i ++ ) cin >> P [ i ] ;  $ ~cin >> q ;  $ ~int Q [ q ] ;  $ ~for ( int i = 0 ; i < q ; i ++ ) cin >> Q [ i ] ;  $ ~int check [ n + 1 ] = { 0 } ;  $ ~for ( int i = 1 ; i <= n ; i ++ ) {  $ ~~for ( int y = 0 ; y < q ; y ++ ) {  $ ~~~if ( Q [ y ] == i ) check [ i ] = 1 ;  $ ~~}  $ ~}  $ ~for ( int i = 1 ; i <= n ; i ++ ) {  $ ~~for ( int x = 0 ; x < p ; x ++ ) {  $ ~~~if ( P [ x ] == i ) check [ i ] = 1 ;  $ ~~}  $ ~}  $ ~int f = 1 ;  $ ~for ( int i = 1 ; i <= n ; i ++ ) {  $ ~~if ( check [ i ] == 0 ) {  $ ~~~f = 0 ;  $ ~~~break ;  $ ~~}  $ ~}  $ ~if ( f == 0 )  $ ~~cout << "Oh, my keyboard!" << '\n' ;  $ ~else  $ ~~cout << "I become the guy."  $ ~~~<< "\n" ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~int x = 0 ;  $ ~for ( int i = 1 ; i <= 5 ; ++ i ) {  $ ~~for ( int j = 1 ; j <= 5 ; ++ j ) {  $ ~~~cin >> x ;  $ ~~~if ( x == 1 ) { cout << abs ( i - 3 ) + abs ( j - 3 ) << endl ; }  $ ~~}  $ ~}  $ ~return 0 ;  $ }
int main ( ) {  $ ~int a , b , s ;  $ ~cin >> a >> b >> s ;  $ ~int ans = s - abs ( a ) - abs ( b ) ;  $ ~if ( ans >= 0 && ans % 2 == 0 )  $ ~~cout << "Yes" << endl ;  $ ~else  $ ~~cout << "No" << endl ;  $ ~return 0 ;  $ }
int n ;  $ vector < int > ar ;  $ int main ( ) {  $ ~cin >> n ;  $ ~for ( int i = 0 ; i < n ; i ++ ) {  $ ~~int el ;  $ ~~cin >> el ;  $ ~~ar . push_back ( el ) ;  $ ~}  $ ~int ans = 0 ;  $ ~for ( int i = 1 ; i < n - 1 ; i ++ ) {  $ ~~if ( ar [ i ] > ar [ i - 1 ] && ar [ i ] > ar [ i + 1 ] ) ans ++ ;  $ ~~if ( ar [ i ] < ar [ i - 1 ] && ar [ i ] < ar [ i + 1 ] ) ans ++ ;  $ ~}  $ ~cout << ans << endl ;  $ ~return 0 ;  $ }
char basis [ 10 ] , input1 , input2 , sementara ;  $ int rotasi , a ;  $ bool c1 = false , c2 = false ;  $ int main ( ) {  $ ~cin >> input1 >> input2 >> rotasi ;  $ ~basis [ 1 ] = 'v' ;  $ ~basis [ 2 ] = '<' ;  $ ~basis [ 3 ] = '^' ;  $ ~basis [ 4 ] = '>' ;  $ ~basis [ 5 ] = 'v' ;  $ ~basis [ 6 ] = '<' ;  $ ~basis [ 7 ] = '^' ;  $ ~basis [ 8 ] = '>' ;  $ ~rotasi = rotasi % 4 ;  $ ~for ( int x = 1 ; x <= 4 ; x ++ ) {  $ ~~if ( input1 == basis [ x ] ) {  $ ~~~a = x ;  $ ~~~break ;  $ ~~}  $ ~}  $ ~if ( a + rotasi > 8 ) {  $ ~~sementara = basis [ a + rotasi - 8 ] ;  $ ~} else {  $ ~~sementara = basis [ a + rotasi ] ;  $ ~}  $ ~if ( sementara == input2 ) { c1 = true ; }  $ ~if ( a - rotasi < 1 ) {  $ ~~sementara = basis [ 8 + a - rotasi ] ;  $ ~} else {  $ ~~sementara = basis [ a - rotasi ] ;  $ ~}  $ ~if ( sementara == input2 ) { c2 = true ; }  $ ~if ( c1 == true && c2 == true ) {  $ ~~cout << "undefined" << endl ;  $ ~} else if ( c2 == true ) {  $ ~~cout << "ccw" << endl ;  $ ~} else if ( c1 == true ) {  $ ~~cout << "cw" << endl ;  $ ~}  $ ~return 0 ;  $ }
int main ( ) {  $ ~string s ;  $ ~cin >> s ;  $ ~size_t pos = 0 ;  $ ~while ( pos < s . length ( ) && s [ pos ] != 'h' ) ++ pos ;  $ ~++ pos ;  $ ~while ( pos < s . length ( ) && s [ pos ] != 'e' ) ++ pos ;  $ ~++ pos ;  $ ~while ( pos < s . length ( ) && s [ pos ] != 'l' ) ++ pos ;  $ ~++ pos ;  $ ~while ( pos < s . length ( ) && s [ pos ] != 'l' ) ++ pos ;  $ ~++ pos ;  $ ~while ( pos < s . length ( ) && s [ pos ] != 'o' ) ++ pos ;  $ ~if ( pos < s . length ( ) ) {  $ ~~cout << "YES" << endl ;  $ ~} else {  $ ~~cout << "NO" << endl ;  $ ~}  $ ~return 0 ;  $ }
int main ( ) {  $ ~string str ;  $ ~cin >> str ;  $ ~int i ;  $ ~for ( i = 0 ; i < str . size ( ) && str [ i ] == 'a' ; i ++ ) { }  $ ~for ( int j = i ; j < str . size ( ) ; j ++ ) {  $ ~~if ( str [ j ] == 'a' ) { break ; }  $ ~~str [ j ] -- ;  $ ~}  $ ~if ( i == str . size ( ) ) { str [ str . size ( ) - 1 ] = 'z' ; }  $ ~cout << str << endl ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~long long n , k ;  $ ~cin >> n >> k ;  $ ~long long d = n / ( 2 * ( k + 1 ) ) , c = k * d , rem = n - ( d + c ) ;  $ ~cout << d << " " << c << " " << rem << endl ;  $ ~return 0 ;  $ }
long long n ;  $ int main ( ) {  $ ~cin >> n ;  $ ~long long x = 3 ;  $ ~while ( n % x == 0 ) x *= 3 ;  $ ~cout << n / x + 1 << endl ;  $ ~return 0 ;  $ }
int n , k , a ;  $ int main ( ) {  $ ~cin >> n ;  $ ~int ans = 0 ;  $ ~for ( int i = 0 ; i < n ; i ++ ) {  $ ~~cin >> k >> a ;  $ ~~if ( 1 == a ) k ++ ;  $ ~~while ( a != 1 ) {  $ ~~~if ( a % 4 != 0 )  $ ~~~~a = a / 4 + 1 ;  $ ~~~else  $ ~~~~a /= 4 ;  $ ~~~k ++ ;  $ ~~}  $ ~~ans = k > ans ? k : ans ;  $ ~}  $ ~cout << ans << endl ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~long long n , m , k ;  $ ~cin >> n >> m >> k ;  $ ~vector < long long > a ( n ) ;  $ ~long long mn = 1e9 ;  $ ~for ( int i = 0 ; i < n ; i ++ ) {  $ ~~cin >> a [ i ] ;  $ ~~if ( i % 2 == 0 ) mn = min ( mn , a [ i ] ) ;  $ ~}  $ ~if ( n % 2 == 0 ) {  $ ~~cout << 0 << endl ;  $ ~~return 0 ;  $ ~}  $ ~cout << min ( m / ( n / 2 + 1 ) * k , mn ) << endl ;  $ ~return 0 ;  $ }
const int INF = ( int ) 1e9 ;  $ const int mod = ( int ) 1e9 + 7 ;  $ const int MAX = ( int ) 2e5 + 5 ;  $ void build ( ) {  $ ~return ;  $ }  $ string s ;  $ int l ;  $ void Init ( ) {  $ ~cin >> s ;  $ ~l = s . length ( ) ;  $ ~return ;  $ }  $ bool flag1 , flag2 , flag3 ;  $ void sol ( ) {  $ ~for ( int i = 0 ; i < ( l ) ; ++ i ) {  $ ~~if ( s [ i ] >= 'A' && s [ i ] <= 'Z' )  $ ~~~flag1 = 1 ;  $ ~~else if ( s [ i ] >= 'a' && s [ i ] <= 'z' )  $ ~~~flag2 = 1 ;  $ ~~else if ( s [ i ] >= '0' && s [ i ] <= '9' )  $ ~~~flag3 = 1 ;  $ ~}  $ ~if ( flag1 && flag2 && flag3 && l >= 5 )  $ ~~puts ( "Correct" ) ;  $ ~else  $ ~~puts ( "Too weak" ) ;  $ ~return ;  $ }  $ int main ( ) {  $ ~Init ( ) ;  $ ~build ( ) ;  $ ~sol ( ) ;  $ ~return 0 ;  $ }
int A [ 100 ] [ 100 ] ;  $ int B [ 26000 ] ;  $ vector < int > NEB [ 27000 ] ;  $ int yy = 0 ;  $ int vis [ 27000 ] , low [ 27000 ] , malow [ 27000 ] , tim [ 27000 ] , F [ 27000 ] ;  $ int t = 1 ;  $ int uu = 0 ;  $ vector < int > check ;  $ void dfs ( int s ) {  $ ~low [ s ] = t ;  $ ~vis [ s ] = 1 ;  $ ~tim [ s ] = t ;  $ ~t ++ ;  $ ~int pp = 0 ;  $ ~for ( int i = 0 ; i < NEB [ s ] . size ( ) ; i ++ ) {  $ ~~int l = NEB [ s ] [ i ] ;  $ ~~if ( F [ s ] != l ) {  $ ~~~if ( vis [ l ] == 1 ) {  $ ~~~~low [ s ] = min ( low [ s ] , tim [ l ] ) ;  $ ~~~} else {  $ ~~~~pp ++ ;  $ ~~~~F [ l ] = s ;  $ ~~~~dfs ( l ) ;  $ ~~~~int u = s ;  $ ~~~~low [ u ] = min ( low [ u ] , low [ l ] ) ;  $ ~~~~malow [ u ] = max ( malow [ u ] , low [ l ] ) ;  $ ~~~}  $ ~~}  $ ~}  $ ~int u = s ;  $ ~if ( s == yy && pp > 1 ) {  $ ~~uu = 1 ;  $ ~~check . push_back ( s ) ;  $ ~} else if ( s != yy && malow [ u ] >= tim [ u ] ) {  $ ~~uu = 1 ;  $ ~~check . push_back ( s ) ;  $ ~}  $ }  $ int main ( ) {  $ ~int n , m ;  $ ~cin >> n >> m ;  $ ~int no = 0 ;  $ ~for ( int i = 1 ; i <= n ; i ++ ) {  $ ~~for ( int j = 1 ; j <= m ; j ++ ) {  $ ~~~char c ;  $ ~~~cin >> c ;  $ ~~~if ( c == '#' ) {  $ ~~~~no ++ ;  $ ~~~~A [ i ] [ j ] = 1 ;  $ ~~~~B [ ( m + 1 ) * i + j ] = 1 ;  $ ~~~~yy = ( m + 1 ) * i + j ;  $ ~~~}  $ ~~}  $ ~}  $ ~int P [ 4 ] = { - 1 , 1 , ( 0 - m - 1 ) , m + 1 } ;  $ ~for ( int i = 1 ; i < 2700 ; i ++ ) {  $ ~~for ( int j = 0 ; j < 4 ; j ++ ) {  $ ~~~if ( i + P [ j ] >= 0 && B [ i + P [ j ] ] == 1 ) NEB [ i ] . push_back ( i + P [ j ] ) ;  $ ~~}  $ ~}  $ ~dfs ( yy ) ;  $ ~if ( no < 3 )  $ ~~cout << - 1 << endl ;  $ ~else {  $ ~~if ( uu == 1 )  $ ~~~cout << 1 << endl ;  $ ~~else  $ ~~~cout << 2 << endl ;  $ ~}  $ }
int main ( ) {  $ ~int n ;  $ ~cin >> n ;  $ ~int m = ( n / 2 ) ;  $ ~int x = ( ( 2 * n ) - m ) ;  $ ~cout << x << endl ;  $ }
int main ( ) {  $ ~int n , num = 1 ;  $ ~cin >> n ;  $ ~for ( int i = 1 ; i < n ; i ++ ) num = num * 3 % 1000003 ;  $ ~cout << num << endl ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~int T ;  $ ~cin >> T ;  $ ~int n , d ;  $ ~bool flag ;  $ ~string s ;  $ ~while ( T -- ) {  $ ~~cin >> n ;  $ ~~cin >> s ;  $ ~~flag = true ;  $ ~~for ( int i = 0 ; i < n ; i ++ ) {  $ ~~~d = s [ i ] - s [ n - i - 1 ] ;  $ ~~~if ( ! ( d == 0 || d == 2 || d == - 2 ) ) {  $ ~~~~flag = false ;  $ ~~~~break ;  $ ~~~}  $ ~~}  $ ~~if ( flag )  $ ~~~cout << "YES" << endl ;  $ ~~else  $ ~~~cout << "NO" << endl ;  $ ~}  $ ~return 0 ;  $ }
int main ( ) {  $ ~int n , m , a , b , x , y , flag = 0 ;  $ ~cin >> n >> m ;  $ ~char c [ n ] [ m ] ;  $ ~for ( int i = 0 ; i < n ; i ++ ) {  $ ~~for ( int j = 0 ; j < m ; j ++ ) {  $ ~~~cin >> c [ i ] [ j ] ;  $ ~~~if ( c [ i ] [ j ] == 'B' && flag == 0 ) {  $ ~~~~a = i ;  $ ~~~~b = j ;  $ ~~~~x = i ;  $ ~~~~y = j ;  $ ~~~~flag = 1 ;  $ ~~~}  $ ~~~if ( c [ i ] [ j ] == 'B' && flag != 0 ) {  $ ~~~~x = i ;  $ ~~~~y = j ;  $ ~~~}  $ ~~}  $ ~}  $ ~int d = ( a + x ) / 2 , f = ( b + y ) / 2 ;  $ ~d ++ ;  $ ~f ++ ;  $ ~cout << d << " " << f << endl ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~int Hy , Ay , Dy ;  $ ~int Hm , Am , Dm ;  $ ~int Hs , As , Ds ;  $ ~cin >> Hy >> Ay >> Dy ;  $ ~cin >> Hm >> Am >> Dm ;  $ ~cin >> Hs >> As >> Ds ;  $ ~int resp = INT_MAX ;  $ ~int mas = max ( Hm + Dm - Ay + 1 , 1 ) ;  $ ~int maxi = max ( Am - Dy , 1 ) ;  $ ~int A , D , H ;  $ ~for ( int i = 0 ; i <= 1000 ; i ++ ) {  $ ~~for ( int j = 0 ; j <= 1000 ; j ++ ) {  $ ~~~if ( ( Ay + i ) - ( Dm ) <= 0 ) continue ;  $ ~~~int P = 0 ;  $ ~~~int r = Hm / ( ( Ay + i ) - ( Dm ) ) ;  $ ~~~if ( Hm % ( ( Ay + i ) - ( Dm ) ) != 0 ) r ++ ;  $ ~~~P += ( As * i ) ;  $ ~~~P += ( Ds * j ) ;  $ ~~~P += max ( r * max ( Am - Dy - j , 0 ) - Hy + 1 , 0 ) * Hs ;  $ ~~~if ( P < resp ) {  $ ~~~~resp = P ;  $ ~~~~A = i ;  $ ~~~~D = j ;  $ ~~~~H = ( r * ( Am - Dy ) ) ;  $ ~~~}  $ ~~}  $ ~}  $ ~if ( resp < 0 ) {  $ ~~cout << 0 << endl ;  $ ~~return 0 ;  $ ~}  $ ~cout << resp << endl ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~string str1 , str2 ;  $ ~cin >> str1 >> str2 ;  $ ~int i = 1 ;  $ ~while ( str1 [ i ] < str2 [ 0 ] ) i ++ ;  $ ~cout << str1 . substr ( 0 , i ) << str2 [ 0 ] << endl ;  $ }
int main ( ) {  $ ~int a , b ;  $ ~while ( cin >> a >> b ) {  $ ~~int x = min ( a , b ) , y = 0 ;  $ ~~a -= x , b -= x ;  $ ~~y = a / 2 + b / 2 ;  $ ~~cout << x << ' ' << y << endl ;  $ ~}  $ ~return 0 ;  $ }
int main ( ) {  $ ~int n ;  $ ~cin >> n ;  $ ~if ( n == 20 )  $ ~~cout << 15 << endl ;  $ ~else if ( n > 10 && n <= 21 )  $ ~~cout << 4 << endl ;  $ ~else  $ ~~cout << 0 << endl ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~int n ;  $ ~cin >> n ;  $ ~if ( n == 0 ) {  $ ~~cout << 1 << endl ;  $ ~~return 0 ;  $ ~}  $ ~int j = n ;  $ ~for ( int i = 1 ; i <= n ; i ++ ) {  $ ~~if ( 1 LL * i * i + 1 LL * j * j <= 1 LL * n * n ) continue ;  $ ~~j -- ;  $ ~}  $ ~cout << ( n + j ) * 4 << endl ;  $ }
int main ( ) {  $ ~int n , a [ 100 ] ;  $ ~cin >> n ;  $ ~for ( int i = 0 ; i < n ; i ++ ) cin >> a [ i ] ;  $ ~int mx = 0 , ans ;  $ ~for ( int i = 0 ; i < n ; i ++ )  $ ~~for ( int j = i ; j < n ; j ++ ) {  $ ~~~ans = 0 ;  $ ~~~for ( int k = 0 ; k < n ; k ++ )  $ ~~~~if ( k >= i && k <= j )  $ ~~~~~ans += ! a [ k ] ;  $ ~~~~else  $ ~~~~~ans += a [ k ] ;  $ ~~~mx = max ( mx , ans ) ;  $ ~~}  $ ~cout << mx << endl ;  $ ~return 0 ;  $ }
int ord ( char x ) {  $ ~if ( x == '^' )  $ ~~return 0 ;  $ ~else if ( x == '>' )  $ ~~return 1 ;  $ ~else if ( x == 'v' )  $ ~~return 2 ;  $ ~else if ( x == '<' )  $ ~~return 3 ;  $ ~return - 1 ;  $ }  $ int main ( ) {  $ ~char x , y ;  $ ~cin >> x >> y ;  $ ~int p = ord ( x ) , q = ord ( y ) , n ;  $ ~cin >> n ;  $ ~n %= 4 ;  $ ~bool cw = false , ccw = false ;  $ ~if ( ( p + n ) % 4 == q ) cw = true ;  $ ~if ( ( p + 8 - n ) % 4 == q ) ccw = true ;  $ ~if ( cw && ccw )  $ ~~cout << "undefined\n" ;  $ ~else if ( cw )  $ ~~cout << "cw\n" ;  $ ~else if ( ccw )  $ ~~cout << "ccw\n" ;  $ }
int main ( ) {  $ ~int n ;  $ ~cin >> n ;  $ ~string s [ n ] ;  $ ~for ( int i = 0 ; i < n ; i ++ ) { cin >> s [ i ] ; }  $ ~int k = 0 ;  $ ~for ( int i = 0 ; i < n ; i ++ ) {  $ ~~if ( ( s [ i ] ) [ 0 ] == 'I' ) {  $ ~~~k = k + 20 ;  $ ~~} else if ( ( s [ i ] ) [ 0 ] == 'D' ) {  $ ~~~k = k + 12 ;  $ ~~} else if ( ( s [ i ] ) [ 0 ] == 'O' ) {  $ ~~~k = k + 8 ;  $ ~~} else if ( ( s [ i ] ) [ 0 ] == 'C' ) {  $ ~~~k = k + 6 ;  $ ~~} else {  $ ~~~k = k + 4 ;  $ ~~}  $ ~}  $ ~cout << k << endl ;  $ }
int main ( ) {  $ ~int n , m ;  $ ~cin >> n >> m ;  $ ~int a [ 105 ] ;  $ ~memset ( a , 0 , sizeof ( a ) ) ;  $ ~for ( int i = 1 ; i <= n ; i ++ ) {  $ ~~int x1 ;  $ ~~cin >> x1 ;  $ ~~int y1 ;  $ ~~for ( int j = 1 ; j <= x1 ; j ++ ) {  $ ~~~cin >> y1 ;  $ ~~~a [ y1 ] = 1 ;  $ ~~}  $ ~}  $ ~int judge = 1 ;  $ ~for ( int i = 1 ; i <= m ; i ++ ) {  $ ~~if ( a [ i ] == 0 ) {  $ ~~~judge = 0 ;  $ ~~~cout << "NO" << endl ;  $ ~~~break ;  $ ~~}  $ ~}  $ ~if ( judge ) { cout << "YES" << endl ; }  $ ~return 0 ;  $ }
const int N = 110 ;  $ int a [ N ] ;  $ int main ( ) {  $ ~memset ( a , 0 , sizeof ( a ) ) ;  $ ~int n , d , i , j ;  $ ~cin >> n >> d ;  $ ~for ( i = 0 ; i < n ; i ++ ) { cin >> a [ i ] ; }  $ ~sort ( a , a + n ) ;  $ ~int count1 = 0 ;  $ ~for ( i = 0 ; i < n ; i ++ ) {  $ ~~for ( j = i ; j < n ; j ++ ) {  $ ~~~if ( a [ j ] - a [ i ] <= d ) { count1 = max ( count1 , j - i + 1 ) ; }  $ ~~}  $ ~}  $ ~cout << n - count1 << endl ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~int r , b ;  $ ~cin >> r >> b ;  $ ~int mn = min ( r , b ) ;  $ ~int mx = max ( r , b ) ;  $ ~cout << mn << " " << ( mx - mn ) / 2 << endl ;  $ }
int main ( ) {  $ ~long long int n ;  $ ~cin >> n ;  $ ~cout << 2 - ( n % 2 ) << endl ;  $ ~return 0 ;  $ }
int a [ 101 ] , b [ 101 ] ;  $ int main ( ) {  $ ~int n , s , h1 , m1 , tt = 0 , flag = 1 , total , ans = 0 , i = 1 ;  $ ~cin >> n >> s ;  $ ~for ( int i = 0 ; i < n ; i ++ ) { cin >> a [ i ] >> b [ i ] ; }  $ ~for ( int i = 0 ; i < n ; i ++ ) {  $ ~~total = a [ i ] * 60 + b [ i ] ;  $ ~~if ( i == 0 ) {  $ ~~~if ( s + 1 <= total ) {  $ ~~~~cout << 0 << " " << 0 << endl ;  $ ~~~~return 0 ;  $ ~~~}  $ ~~}  $ ~~if ( tt + 2 * s + 2 <= total ) {  $ ~~~ans = tt + s + 1 ;  $ ~~~cout << ans / 60 << " " << ans % 60 << endl ;  $ ~~~return 0 ;  $ ~~}  $ ~~tt = total ;  $ ~}  $ ~tt += s + 1 ;  $ ~cout << tt / 60 << " " << tt % 60 << endl ;  $ }
int main ( ) {  $ ~int n ;  $ ~cin >> n ;  $ ~while ( n -- ) {  $ ~~int a ;  $ ~~cin >> a ;  $ ~~if ( 360 % ( 180 - a ) == 0 ) {  $ ~~~cout << "YES" << endl ;  $ ~~} else {  $ ~~~cout << "NO" << endl ;  $ ~~}  $ ~}  $ }
int main ( ) {  $ ~int n , m , a1 , a2 ;  $ ~cin >> n >> m ;  $ ~int a [ 105 ] , b [ 105 ] [ 105 ] = { 0 } ;  $ ~for ( int i = 1 ; i <= n ; i ++ ) cin >> a [ i ] ;  $ ~while ( m -- ) {  $ ~~cin >> a1 >> a2 ;  $ ~~b [ a1 ] [ a2 ] = 1 ;  $ ~}  $ ~int minnum = 3000000 , num , kk = 0 ;  $ ~for ( int i = 1 ; i <= n - 2 ; i ++ )  $ ~~for ( int j = i + 1 ; j <= n - 1 ; j ++ ) {  $ ~~~if ( b [ i ] [ j ] == 1 || b [ j ] [ i ] == 1 ) {  $ ~~~~for ( int k = j + 1 ; k <= n ; k ++ ) {  $ ~~~~~if ( ( b [ i ] [ k ] == 1 || b [ k ] [ i ] == 1 ) && ( b [ j ] [ k ] == 1 || b [ k ] [ j ] == 1 ) ) {  $ ~~~~~~num = a [ i ] + a [ j ] + a [ k ] ;  $ ~~~~~~kk = 1 ;  $ ~~~~~~if ( num < minnum ) minnum = num ;  $ ~~~~~}  $ ~~~~}  $ ~~~}  $ ~~}  $ ~if ( kk == 1 )  $ ~~cout << minnum << endl ;  $ ~else  $ ~~cout << - 1 << endl ;  $ ~return 0 ;  $ }
char cw [ 5 ] = { 'v' , '<' , '^' , '>' } , ccw [ 5 ] = { 'v' , '>' , '^' , '<' } ;  $ char x , y ;  $ int num , cws , ccws ;  $ int main ( ) {  $ ~cin >> x >> y >> num ;  $ ~for ( int i = 0 ; i < 4 ; i ++ ) {  $ ~~if ( x == cw [ i ] ) cws = i ;  $ ~~if ( x == ccw [ i ] ) ccws = i ;  $ ~}  $ ~if ( y == cw [ ( num + cws ) % 4 ] && y == ccw [ ( num + ccws ) % 4 ] )  $ ~~cout << "undefined" << endl ;  $ ~else if ( y == cw [ ( num + cws ) % 4 ] )  $ ~~cout << "cw" << endl ;  $ ~else if ( y == ccw [ ( num + ccws ) % 4 ] )  $ ~~cout << "ccw" << endl ;  $ ~else  $ ~~cout << "undefined" << endl ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~int n , k , t = 0 , c = 0 , x ;  $ ~cin >> n >> k ;  $ ~for ( int i = 0 ; i < n ; i ++ ) {  $ ~~cin >> x ;  $ ~~x = x + t ;  $ ~~t = 0 ;  $ ~~if ( x <= 8 ) {  $ ~~~c = c + x ;  $ ~~} else {  $ ~~~t = x - 8 ;  $ ~~~c = c + 8 ;  $ ~~}  $ ~~if ( c >= k ) {  $ ~~~cout << i + 1 << endl ;  $ ~~~return 0 ;  $ ~~}  $ ~}  $ ~cout << - 1 << endl ;  $ ~return 0 ;  $ }
void find_it ( int n ) {  $ ~int req = n / 2 ;  $ ~cout << req + 1 << "\n" ;  $ }  $ int main ( ) {  $ ~int n ;  $ ~cin >> n ;  $ ~find_it ( n ) ;  $ ~return 0 ;  $ }
void file ( ) {  $ ~freopen ( "input.txt" , "r" , stdin ) ;  $ ~freopen ( "output.txt" , "w" , stdout ) ;  $ }  $ void run ( ) {  $ ~int testCases , length ;  $ ~string falseLine ;  $ ~cin >> testCases ;  $ ~getline ( cin , falseLine ) ;  $ ~string str1 [ testCases ] ;  $ ~getline ( cin , str1 [ 0 ] ) ;  $ ~length = str1 [ 0 ] . size ( ) ;  $ ~int answer = 0 ;  $ ~bool breakFlag = true ;  $ ~for ( int i = 1 ; i < testCases ; i ++ ) {  $ ~~breakFlag = true ;  $ ~~getline ( cin , str1 [ i ] ) ;  $ ~~while ( breakFlag ) {  $ ~~~if ( str1 [ 0 ] . compare ( 0 , length , str1 [ i ] , 0 , length ) == 0 ) {  $ ~~~~answer = length ;  $ ~~~~breakFlag = false ;  $ ~~~} else {  $ ~~~~length -- ;  $ ~~~}  $ ~~}  $ ~}  $ ~cout << answer << "\n" ;  $ }  $ int main ( ) {  $ ~run ( ) ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~int n , x , sum = 0 , a ;  $ ~cin >> n >> x ;  $ ~for ( int i = 0 ; i < n ; i ++ ) {  $ ~~cin >> a ;  $ ~~sum = sum + a ;  $ ~}  $ ~int l = abs ( sum - 0 ) ;  $ ~if ( l % x == 0 ) {  $ ~~cout << l / x << endl ;  $ ~} else {  $ ~~cout << ( l / x ) + 1 << endl ;  $ ~}  $ ~return 0 ;  $ }
int main ( ) {  $ ~int n , c , ans = 1 ;  $ ~cin >> n >> c ;  $ ~int a [ n ] ;  $ ~for ( int i = 0 ; i < n ; i ++ ) { cin >> a [ i ] ; }  $ ~for ( int i = 1 ; i < n ; i ++ ) {  $ ~~if ( ( a [ i ] - a [ i - 1 ] ) <= c ) {  $ ~~~ans ++ ;  $ ~~} else {  $ ~~~ans = 1 ;  $ ~~}  $ ~}  $ ~cout << ans << '\n' ;  $ }
int main ( ) {  $ ~int n ;  $ ~cin >> n ;  $ ~int a , b , acnt = 0 , bcnt = 0 , abcnt = 0 ;  $ ~for ( int i = 1 ; i <= n ; i ++ ) {  $ ~~cin >> a >> b ;  $ ~~if ( a % 2 != 0 ) { acnt ++ ; }  $ ~~if ( b % 2 != 0 ) { bcnt ++ ; }  $ ~~if ( ( a % 2 == 0 && b % 2 == 1 ) || ( a % 2 == 1 && b % 2 == 0 ) ) { abcnt ++ ; }  $ ~}  $ ~if ( ( acnt + bcnt ) % 2 != 0 ) {  $ ~~cout << "-1" << endl ;  $ ~} else if ( acnt % 2 == 0 && bcnt % 2 == 0 ) {  $ ~~cout << "0" << endl ;  $ ~} else {  $ ~~if ( abcnt == 0 ) {  $ ~~~cout << "-1" << endl ;  $ ~~} else {  $ ~~~cout << "1" << endl ;  $ ~~}  $ ~}  $ ~return 0 ;  $ }
int main ( ) {  $ ~int n ;  $ ~cin >> n ;  $ ~list < string > L1 ;  $ ~while ( n -- ) {  $ ~~string s , s1 ;  $ ~~cin >> s >> s1 ;  $ ~~s += s1 ;  $ ~~swap ( s [ 2 ] , s [ 3 ] ) ;  $ ~~s += s ;  $ ~~L1 . push_back ( s ) ;  $ ~~char c1 , c2 ;  $ ~~cin >> c1 >> c2 ;  $ ~}  $ ~list < string > : : iterator p = L1 . begin ( ) , p1 ;  $ ~for ( p ; p != L1 . end ( ) ; p ++ ) {  $ ~~p1 = p ;  $ ~~p1 ++ ;  $ ~~for ( p1 ; p1 != L1 . end ( ) ; ) {  $ ~~~string s2 = * p1 , s3 = * p ;  $ ~~~for ( int i = 0 ; i < 4 ; i ++ ) {  $ ~~~~if ( s3 . substr ( 0 , 4 ) == s2 . substr ( i , 4 ) ) {  $ ~~~~~L1 . erase ( p1 ++ ) ;  $ ~~~~~goto line1 ;  $ ~~~~}  $ ~~~}  $ ~~~p1 ++ ;  $ ~~line1 : ;  $ ~~}  $ ~}  $ ~cout << L1 . size ( ) << endl ;  $ ~return 0 ;  $ }
int n ;  $ string t ;  $ int k ;  $ int ans_len ;  $ char str [ 20 * 100010 ] ;  $ int chars [ 80 * 100010 ] ;  $ void push_up ( int rt ) {  $ ~chars [ rt ] = chars [ rt << 1 ] + chars [ rt << 1 | 1 ] ;  $ }  $ void update ( int L , int R , int left , int right , int rt ) {  $ ~if ( chars [ rt ] >= right - left + 1 ) return ;  $ ~if ( left == right ) {  $ ~~chars [ rt ] = 1 ;  $ ~~str [ left ] = t [ left - L ] ;  $ ~~return ;  $ ~}  $ ~if ( L > right || R < left ) return ;  $ ~int mid = ( left + right ) >> 1 ;  $ ~if ( mid >= R )  $ ~~update ( L , R , left , mid , rt << 1 ) ;  $ ~else if ( mid < L )  $ ~~update ( L , R , mid + 1 , right , rt << 1 | 1 ) ;  $ ~else {  $ ~~update ( L , R , left , mid , rt << 1 ) ;  $ ~~update ( L , R , mid + 1 , right , rt << 1 | 1 ) ;  $ ~}  $ ~push_up ( rt ) ;  $ }  $ int main ( ) {  $ ~int pos ;  $ ~int endpos ;  $ ~cin >> n ;  $ ~ans_len = 0 ;  $ ~for ( int i = 1 ; i < 2000010 ; i ++ ) str [ i ] = 'a' ;  $ ~memset ( chars , 0 , sizeof ( chars ) ) ;  $ ~for ( int i = 1 ; i <= n ; i ++ ) {  $ ~~cin >> t >> k ;  $ ~~for ( int j = 1 ; j <= k ; j ++ ) {  $ ~~~cin >> pos ;  $ ~~~endpos = pos + t . length ( ) - 1 ;  $ ~~~update ( pos , endpos , 1 , 2000010 , 1 ) ;  $ ~~~if ( j == k ) {  $ ~~~~if ( endpos > ans_len ) ans_len = endpos ;  $ ~~~}  $ ~~}  $ ~}  $ ~for ( int i = 1 ; i <= ans_len ; i ++ ) cout << str [ i ] ;  $ ~cout << endl ;  $ }
const int inf = 2147483647 ;  $ const int MAX = 1e5 + 10 ;  $ const int mod = 1e9 + 7 ;  $ int n , m , ans , ma , mb ;  $ int h [ MAX ] , book [ MAX ] ;  $ void Init ( ) {  $ ~ma = 0 ;  $ ~mb = 0 ;  $ ~ans = 0 ;  $ ~memset ( book , 0 , sizeof ( book ) ) ;  $ }  $ int main ( ) {  $ ~Init ( ) ;  $ ~cin >> n >> m ;  $ ~for ( int i = 1 ; i <= n ; i ++ ) { cin >> h [ i ] ; }  $ ~sort ( h + 1 , h + n + 1 ) ;  $ ~int a , b , c ;  $ ~for ( int i = 1 ; i <= m ; i ++ ) {  $ ~~cin >> a >> b >> c ;  $ ~~if ( a > 1 ) continue ;  $ ~~if ( b == 1e9 ) {  $ ~~~ans ++ ;  $ ~~~continue ;  $ ~~}  $ ~~int temp = upper_bound ( h + 1 , h + n + 1 , b ) - h - 1 ;  $ ~~while ( book [ temp ] ) temp -- ;  $ ~~if ( temp >= 0 ) book [ temp ] = 1 ;  $ ~}  $ ~for ( int i = 1 ; i <= n ; i ++ ) {  $ ~~if ( book [ i ] ) ans ++ ;  $ ~}  $ ~cout << ans << endl ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~char wb [ 10 ] [ 10 ] ;  $ ~for ( int i = 1 ; i <= 8 ; i ++ ) {  $ ~~for ( int j = 1 ; j <= 8 ; j ++ ) cin >> wb [ i ] [ j ] ;  $ ~}  $ ~int judge = 1 ;  $ ~for ( int i = 1 ; i <= 8 ; i ++ ) {  $ ~~for ( int j = 1 ; j <= 7 ; j ++ ) {  $ ~~~if ( wb [ i ] [ j ] == wb [ i ] [ j + 1 ] ) { judge = 0 ; }  $ ~~}  $ ~}  $ ~if ( judge == 1 ) {  $ ~~cout << "YES" << endl ;  $ ~} else  $ ~~cout << "NO" << endl ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~int n ;  $ ~cin >> n ;  $ ~int a [ 105 ] ;  $ ~int sum1 = 0 ;  $ ~int sum2 = 0 ;  $ ~int cnt = 0 ;  $ ~for ( int i = 0 ; i < n ; i ++ ) {  $ ~~cin >> a [ i ] ;  $ ~~sum1 += a [ i ] ;  $ ~}  $ ~sort ( a , a + n ) ;  $ ~if ( n == 1 )  $ ~~cout << 1 << endl ;  $ ~else {  $ ~~for ( int i = n - 1 ; i >= 0 ; i -- ) {  $ ~~~sum1 -= a [ i ] ;  $ ~~~sum2 += a [ i ] ;  $ ~~~if ( sum2 <= sum1 )  $ ~~~~cnt ++ ;  $ ~~~else  $ ~~~~break ;  $ ~~}  $ ~~cout << cnt + 1 << endl ;  $ ~}  $ }
int main ( ) {  $ ~string s ;  $ ~cin >> s ;  $ ~int cont = 0 ;  $ ~char tc = 'a' ;  $ ~for ( int i = 0 ; i < s . length ( ) ; i ++ ) {  $ ~~int a , b ;  $ ~~a = tc ;  $ ~~b = s [ i ] ;  $ ~~if ( abs ( a - b ) > 13 )  $ ~~~cont += ( 26 - abs ( a - b ) ) ;  $ ~~else  $ ~~~cont += abs ( a - b ) ;  $ ~~tc = s [ i ] ;  $ ~}  $ ~cout << cont << endl ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~string s ;  $ ~cin >> s ;  $ ~string m = "000" ;  $ ~if ( s . length ( ) <= 6 ) {  $ ~~cout << "no" << endl ;  $ ~~return 0 ;  $ ~} else {  $ ~~int count = 0 ;  $ ~~int flag = 0 ;  $ ~~int flag_1 = 0 ;  $ ~~reverse ( s . begin ( ) , s . end ( ) ) ;  $ ~~for ( int i = 0 ; i < s . length ( ) ; i ++ ) {  $ ~~~if ( s [ i ] == 48 ) { count ++ ; }  $ ~~~if ( count == 6 ) {  $ ~~~~flag_1 = i ;  $ ~~~~break ;  $ ~~~}  $ ~~}  $ ~~for ( int i = flag_1 ; i < s . length ( ) ; i ++ ) {  $ ~~~if ( s [ i ] == 49 && count == 6 ) { flag = 1 ; }  $ ~~}  $ ~~if ( flag == 1 ) {  $ ~~~cout << "yes" << endl ;  $ ~~} else  $ ~~~cout << "no" << endl ;  $ ~}  $ }
const int maxn = 5e5 + 1000 ;  $ int a [ maxn ] ;  $ int b [ maxn ] ;  $ int main ( ) {  $ ~int n1 , n2 ;  $ ~int k , m ;  $ ~cin >> n1 >> n2 >> k >> m ;  $ ~for ( int i = 1 ; i <= n1 ; i ++ ) cin >> a [ i ] ;  $ ~for ( int i = 1 ; i <= n2 ; i ++ ) cin >> b [ i ] ;  $ ~sort ( a + 1 , a + n1 + 1 ) ;  $ ~sort ( b + 1 , b + n2 + 1 , greater < int > ( ) ) ;  $ ~if ( a [ k ] < b [ m ] )  $ ~~cout << "YES\n" ;  $ ~else  $ ~~cout << "NO\n" ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~int n ;  $ ~cin >> n ;  $ ~int resp1 = 0 , resp2 = 0 ;  $ ~for ( int i = 1 ; i <= n ; i ++ ) {  $ ~~int x ;  $ ~~cin >> x ;  $ ~~resp1 |= x ;  $ ~}  $ ~for ( int i = 1 ; i <= n ; i ++ ) {  $ ~~int x ;  $ ~~cin >> x ;  $ ~~resp2 |= x ;  $ ~}  $ ~cout << resp1 + resp2 << endl ;  $ }
const int TAM = 1e3 + 3 ;  $ int n ;  $ int arr [ 105 ] ;  $ int gcd ( int a , int b ) {  $ ~if ( a > b ) swap ( a , b ) ;  $ ~if ( ! a ) return b ;  $ ~return gcd ( b % a , a ) ;  $ }  $ void dvs ( ) {  $ ~int val = arr [ 0 ] ;  $ ~for ( int i = 1 ; i < n ; i ++ ) val = gcd ( val , arr [ i ] ) ;  $ ~for ( int i = 0 ; i < n ; i ++ ) arr [ i ] /= val ;  $ }  $ int main ( ) {  $ ~cin >> n ;  $ ~for ( int i = 0 ; i < n ; i ++ ) cin >> arr [ i ] ;  $ ~sort ( arr , arr + n ) ;  $ ~dvs ( ) ;  $ ~if ( ( arr [ n - 1 ] - n ) % 2 == 1 )  $ ~~cout << "Alice\n" ;  $ ~else  $ ~~cout << "Bob\n" ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~long long n , t , a , temp = 1 , i ;  $ ~vector < long long > v ;  $ ~cin >> n >> t ;  $ ~for ( i = 0 ; i < n - 1 ; i ++ ) {  $ ~~cin >> a ;  $ ~~v . push_back ( a ) ;  $ ~}  $ ~while ( temp <= n ) {  $ ~~if ( temp == t ) {  $ ~~~cout << "YES" << endl ;  $ ~~~return 0 ;  $ ~~}  $ ~~if ( temp > t ) break ;  $ ~~temp = temp + v [ temp - 1 ] ;  $ ~}  $ ~cout << "NO" << endl ;  $ }
string s ;  $ int l [ 1000001 ] , r [ 1000001 ] , s1 , s2 ;  $ void enter ( ) {  $ ~cin >> s ;  $ }  $ void solve ( ) {  $ ~for ( int i = 0 ; i < s . length ( ) ; i ++ ) {  $ ~~if ( s [ i ] == 'l' ) s1 ++ , l [ s1 ] = i + 1 ;  $ ~~if ( s [ i ] == 'r' ) s2 ++ , r [ s2 ] = i + 1 ;  $ ~}  $ ~for ( int i = 1 ; i <= s2 ; i ++ ) cout << r [ i ] << "\n" ;  $ ~for ( int i = s1 ; i >= 1 ; i -- ) cout << l [ i ] << "\n" ;  $ }  $ int main ( ) {  $ ~enter ( ) ;  $ ~solve ( ) ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~int w , h , u1 , d1 , u2 , d2 , w1 ;  $ ~cin >> w >> h ;  $ ~cin >> u1 >> d1 ;  $ ~cin >> u2 >> d2 ;  $ ~w1 = w + h ;  $ ~if ( ( h == d1 ) && ( w1 > u1 ) ) {  $ ~~w1 = w1 - u1 ;  $ ~} else if ( ( h == d1 ) && ( w1 < u1 ) ) {  $ ~~w1 = 0 ;  $ ~} else if ( ( h == d2 ) && ( w1 > u2 ) ) {  $ ~~w1 = w1 - u2 ;  $ ~} else if ( ( h == d2 ) && ( w1 < u2 ) ) {  $ ~~w1 = 0 ;  $ ~}  $ ~h -- ;  $ ~while ( h > 0 ) {  $ ~~w1 = w1 + h ;  $ ~~if ( ( h == d1 ) && ( w1 >= u1 ) ) {  $ ~~~w1 = w1 - u1 ;  $ ~~} else if ( ( h == d1 ) && ( w1 < u1 ) ) {  $ ~~~w1 = 0 ;  $ ~~} else if ( ( h == d2 ) && ( w1 >= u2 ) ) {  $ ~~~w1 = w1 - u2 ;  $ ~~} else if ( ( h == d2 ) && ( w1 < u2 ) ) {  $ ~~~w1 = 0 ;  $ ~~}  $ ~~h -- ;  $ ~}  $ ~cout << w1 << endl ;  $ }
int main ( ) {  $ ~int a , b , c ;  $ ~while ( cin >> a >> b >> c ) {  $ ~~while ( c -- ) {  $ ~~~if ( a > b ) {  $ ~~~~a ^ = b ;  $ ~~~~b ^ = a ;  $ ~~~~a ^ = b ;  $ ~~~}  $ ~~~a ++ ;  $ ~~}  $ ~~if ( a > b ) {  $ ~~~a ^ = b ;  $ ~~~b ^ = a ;  $ ~~~a ^ = b ;  $ ~~}  $ ~~cout << a * 2 << endl ;  $ ~}  $ }
int main ( ) {  $ ~int matrix ;  $ ~string diamond = "D" ;  $ ~string up = "" , down = "" ;  $ ~cin >> matrix ;  $ ~if ( matrix == 0 ) return 0 ;  $ ~for ( int counter = 0 ; counter < matrix / 2 ; counter ++ ) up += '*' ;  $ ~bool once = true ;  $ ~while ( true ) {  $ ~~if ( up != "" ) {  $ ~~~cout << up << diamond << up << endl ;  $ ~~~diamond += "DD" ;  $ ~~~up . erase ( 0 , 1 ) ;  $ ~~} else {  $ ~~~if ( once ) cout << up << diamond << up << endl ;  $ ~~~once = false ;  $ ~~~down += '*' ;  $ ~~~diamond . erase ( 0 , 2 ) ;  $ ~~~up . erase ( 0 , 2 ) ;  $ ~~~if ( diamond == "" ) break ;  $ ~~~cout << down << diamond << down << endl ;  $ ~~}  $ ~}  $ ~return 0 ;  $ }
int main ( ) {  $ ~int n ;  $ ~cin >> n ;  $ ~cout << ( ( n & 1 ) == 0 ? "home\n" : "contest\n" ) ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~string s ;  $ ~long long c = 26 ;  $ ~cin >> s ;  $ ~int len = s . size ( ) ;  $ ~c += 25 * len ;  $ ~cout << c << endl ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~int n , num ;  $ ~vector < int > v ;  $ ~cin >> n >> num ;  $ ~for ( int i = 0 ; i < n - 1 ; i ++ ) {  $ ~~int a ;  $ ~~cin >> a ;  $ ~~v . push_back ( a ) ;  $ ~}  $ ~sort ( v . begin ( ) , v . end ( ) ) ;  $ ~int sz = v . size ( ) - 1 , temp = num ;  $ ~if ( num > v [ sz ] ) return ( cout << 0 << "\n" , 0 ) ;  $ ~if ( num == v [ sz ] ) return ( cout << 1 << "\n" , 0 ) ;  $ ~while ( v [ sz ] >= temp ) {  $ ~~v [ sz ] -- ;  $ ~~temp ++ ;  $ ~~sort ( v . begin ( ) , v . end ( ) ) ;  $ ~}  $ ~cout << temp - num << "\n" ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~int n , a , b , c , s1 , s2 ;  $ ~cin >> a >> b >> c ;  $ ~s1 = a + b + c ;  $ ~cin >> a >> b >> c ;  $ ~s2 = a + b + c ;  $ ~cin >> n ;  $ ~n -= s1 / 5 ;  $ ~s1 %= 5 ;  $ ~if ( s1 ) n -- ;  $ ~n -= s2 / 10 ;  $ ~s2 %= 10 ;  $ ~if ( s2 ) n -- ;  $ ~if ( n >= 0 )  $ ~~cout << "YES" << endl ;  $ ~else  $ ~~cout << "NO" << endl ;  $ }
const long long sz = 1e5 + 5 , p = 998244353 ;  $ int a [ sz ] , c [ sz ] ;  $ int main ( ) {  $ ~int n , m , i , j ;  $ ~cin >> n >> m ;  $ ~for ( i = 0 ; i < n ; i ++ ) cin >> c [ i ] ;  $ ~for ( i = 0 ; i < m ; i ++ ) cin >> a [ i ] ;  $ ~int ans = 0 ;  $ ~j = 0 ;  $ ~for ( i = 0 ; i < n && j < m ; i ++ ) {  $ ~~if ( c [ i ] <= a [ j ] ) {  $ ~~~ans ++ ;  $ ~~~j ++ ;  $ ~~}  $ ~}  $ ~cout << ans << endl ;  $ }
int main ( ) {  $ ~string s ;  $ ~int n , k ;  $ ~cin >> n >> k ;  $ ~cin >> s ;  $ ~int a [ 26 ] = { 0 } ;  $ ~for ( int t = 0 ; t < n ; t ++ ) { a [ s [ t ] - 'a' ] ++ ; }  $ ~int flag = 0 ;  $ ~for ( int t = 0 ; t < 26 ; t ++ ) {  $ ~~if ( a [ t ] > k ) { flag = 1 ; }  $ ~}  $ ~if ( flag ) {  $ ~~cout << "NO" << endl ;  $ ~} else {  $ ~~cout << "YES" << endl ;  $ ~}  $ ~return 0 ;  $ }
int main ( ) {  $ ~int n , k ;  $ ~string str ;  $ ~cin >> n >> k ;  $ ~cin >> str ;  $ ~int tmp = k ;  $ ~int mid = n / 2 ;  $ ~if ( n % 2 == 1 ) mid ++ ;  $ ~int dir = 1 ;  $ ~int end = n ;  $ ~int numPrinted = 0 ;  $ ~if ( tmp < mid ) {  $ ~~dir = - 1 ;  $ ~~end = 1 ;  $ ~}  $ ~if ( n % 2 == 0 && tmp == mid ) {  $ ~~dir = - 1 ;  $ ~~end = 1 ;  $ ~}  $ ~if ( tmp == 1 ) {  $ ~~end = 1 ;  $ ~~dir = - 1 ;  $ ~}  $ ~if ( tmp == n ) {  $ ~~end = n ;  $ ~~dir = 1 ;  $ ~}  $ ~while ( tmp != end ) {  $ ~~if ( tmp > end )  $ ~~~cout << "LEFT\n" ;  $ ~~else  $ ~~~cout << "RIGHT\n" ;  $ ~~tmp += dir ;  $ ~}  $ ~if ( end == 1 )  $ ~~end = n ;  $ ~else  $ ~~end = 1 ;  $ ~while ( tmp != end ) {  $ ~~cout << "PRINT " << str [ tmp - 1 ] << endl ;  $ ~~if ( tmp > end )  $ ~~~cout << "LEFT\n" ;  $ ~~else  $ ~~~cout << "RIGHT\n" ;  $ ~~tmp -= dir ;  $ ~}  $ ~cout << "PRINT " << str [ tmp - 1 ] << endl ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~int i , n , c , ans = 0 ;  $ ~string a , b ;  $ ~cin >> n ;  $ ~cin >> a >> b ;  $ ~c = a . size ( ) ;  $ ~for ( i = 0 ; i < c ; i ++ ) { ans += min ( 10 - abs ( a [ i ] - b [ i ] ) , abs ( a [ i ] - b [ i ] ) ) ; }  $ ~cout << ans << endl ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~double k , n , s , p ;  $ ~cin >> k >> n >> s >> p ;  $ ~double sheetsPerPerson = ceil ( n / s ) ;  $ ~double totalSheets = sheetsPerPerson * k ;  $ ~double pack = ceil ( totalSheets / p ) ;  $ ~cout << fixed << ( long long ) pack << endl ;  $ }
int N , K , ans = 2e9 , val ;  $ int main ( ) {  $ ~cin >> N ;  $ ~for ( int i = 1 ; i <= N ; i ++ ) {  $ ~~cin >> K ;  $ ~~if ( K < ans ) {  $ ~~~ans = K ;  $ ~~~val = i ;  $ ~~} else if ( K == ans ) {  $ ~~~val = 0 ;  $ ~~}  $ ~}  $ ~if ( val == 0 )  $ ~~cout << "Still Rozdil\n" ;  $ ~else  $ ~~cout << val << '\n' ;  $ }
const long long INF = 9223372036854775807 LL ;  $ const long double PI = acos ( - 1 ) ;  $ const int MAX_N = 1e+6 ;  $ const int ALPH = 26 ;  $ const string alph = "abcdefghijklmnopqrstuvwxyz" ;  $ void count ( int & pos , string & s , int & xd ) {  $ ~int l = s . size ( ) ;  $ ~while ( pos < l ) {  $ ~~if ( s [ pos ] == '|' ) {  $ ~~~xd ++ ;  $ ~~~pos ++ ;  $ ~~} else  $ ~~~break ;  $ ~}  $ ~pos ++ ;  $ }  $ void print ( int a , int b , int c ) {  $ ~for ( int i = 0 ; i < a ; i ++ ) cout << "|" ;  $ ~cout << "+" ;  $ ~for ( int i = 0 ; i < b ; i ++ ) cout << "|" ;  $ ~cout << "=" ;  $ ~for ( int i = 0 ; i < c ; i ++ ) cout << "|" ;  $ ~cout << endl ;  $ }  $ bool check ( int a , int b , int c ) {  $ ~if ( a <= 0 or b <= 0 or c <= 0 ) return false ;  $ ~return a + b == c ;  $ }  $ void solve ( ) {  $ ~string s ;  $ ~cin >> s ;  $ ~int l = s . size ( ) ;  $ ~int a , b , c ;  $ ~a = b = c = 0 ;  $ ~int pos = 0 ;  $ ~count ( pos , s , a ) ;  $ ~count ( pos , s , b ) ;  $ ~count ( pos , s , c ) ;  $ ~if ( a + b == c ) {  $ ~~print ( a , b , c ) ;  $ ~} else {  $ ~~if ( check ( a + 1 , b - 1 , c ) ) {  $ ~~~print ( a + 1 , b - 1 , c ) ;  $ ~~~return ;  $ ~~}  $ ~~if ( check ( a + 1 , b , c - 1 ) ) {  $ ~~~print ( a + 1 , b , c - 1 ) ;  $ ~~~return ;  $ ~~}  $ ~~if ( check ( a - 1 , b + 1 , c ) ) {  $ ~~~print ( a - 1 , b + 1 , c ) ;  $ ~~~return ;  $ ~~}  $ ~~if ( check ( a , b + 1 , c - 1 ) ) {  $ ~~~print ( a , b + 1 , c - 1 ) ;  $ ~~~return ;  $ ~~}  $ ~~if ( check ( a - 1 , b , c + 1 ) ) {  $ ~~~print ( a - 1 , b , c + 1 ) ;  $ ~~~return ;  $ ~~}  $ ~~if ( check ( a , b - 1 , c + 1 ) ) {  $ ~~~print ( a , b - 1 , c + 1 ) ;  $ ~~~return ;  $ ~~}  $ ~~cout << "Impossible" << endl ;  $ ~}  $ }  $ int main ( ) {  $ ~int t = 1 ;  $ ~while ( t -- ) solve ( ) ;  $ ~return 0 ;  $ }
int arr [ 4 ] ;  $ int main ( ) {  $ ~int diff , i ;  $ ~for ( i = 0 ; i < 3 ; i ++ ) { cin >> arr [ i ] ; }  $ ~sort ( arr , arr + 3 ) ;  $ ~diff = arr [ 2 ] - ( arr [ 0 ] + arr [ 1 ] ) ;  $ ~if ( diff >= 0 )  $ ~~cout << diff + 1 << endl ;  $ ~else  $ ~~cout << 0 << endl ;  $ }
int main ( ) {  $ ~int n ;  $ ~cin >> n ;  $ ~if ( n <= 10 || n >= 22 ) {  $ ~~cout << 0 << endl ;  $ ~} else if ( n == 21 || n < 20 ) {  $ ~~cout << 4 << endl ;  $ ~} else if ( n == 20 ) {  $ ~~cout << 15 << endl ;  $ ~}  $ ~return 0 ;  $ }
int main ( ) {  $ ~int x ;  $ ~cin >> x ;  $ ~int a = 0 ;  $ ~for ( ; ; ) {  $ ~~if ( x == 0 ) break ;  $ ~~a = a + x % 2 ;  $ ~~x = x / 2 ;  $ ~}  $ ~cout << a << endl ;  $ ~return 0 ;  $ }
int a [ 1000010 ] ;  $ const int inf = 0 x3f3f3f3f ;  $ int main ( ) {  $ ~int n ;  $ ~while ( cin >> n ) {  $ ~~int a [ 310 ] , b [ 310 ] ;  $ ~~cin >> a [ 0 ] ;  $ ~~int m = 0 ;  $ ~~for ( int i = 1 ; i < n ; i ++ ) {  $ ~~~cin >> a [ i ] ;  $ ~~~b [ i ] = a [ i ] - a [ i - 1 ] ;  $ ~~~if ( b [ i ] > m ) m = b [ i ] ;  $ ~~}  $ ~~int mi = inf ;  $ ~~for ( int i = 1 ; i < n - 1 ; i ++ ) {  $ ~~~b [ i ] = b [ i ] + b [ i + 1 ] ;  $ ~~~if ( b [ i ] < mi ) mi = b [ i ] ;  $ ~~}  $ ~~if ( mi > m )  $ ~~~cout << mi << endl ;  $ ~~else  $ ~~~cout << m << endl ;  $ ~}  $ ~return 0 ;  $ }
bool even ( int number ) {  $ ~if ( number % 2 == 0 ) {  $ ~~return true ;  $ ~} else {  $ ~~return false ;  $ ~}  $ }  $ int main ( ) {  $ ~int x , y , differentSocks , sameSocks , remainings ;  $ ~cin >> x >> y ;  $ ~if ( x < y ) {  $ ~~differentSocks = x ;  $ ~~remainings = y - x ;  $ ~~if ( even ( remainings ) ) {  $ ~~~sameSocks = remainings / 2 ;  $ ~~} else {  $ ~~~sameSocks = ( remainings - 1 ) / 2 ;  $ ~~}  $ ~} else if ( x > y ) {  $ ~~differentSocks = y ;  $ ~~remainings = x - y ;  $ ~~if ( even ( remainings ) ) {  $ ~~~sameSocks = remainings / 2 ;  $ ~~} else {  $ ~~~sameSocks = ( remainings - 1 ) / 2 ;  $ ~~}  $ ~} else {  $ ~~differentSocks = x ;  $ ~~sameSocks = 0 ;  $ ~}  $ ~cout << differentSocks << " " << sameSocks << "\n" ;  $ ~return 0 ;  $ }
int alr [ 6 ] = { 0 } , ar [ 6 ] = { 0 } , br [ 6 ] = { 0 } ;  $ int main ( ) {  $ ~int n , a ;  $ ~cin >> n ;  $ ~for ( int i = 0 ; i < n ; i ++ ) {  $ ~~cin >> a ;  $ ~~ar [ a ] ++ ;  $ ~~alr [ a ] ++ ;  $ ~}  $ ~for ( int i = 0 ; i < n ; i ++ ) {  $ ~~cin >> a ;  $ ~~br [ a ] ++ ;  $ ~~alr [ a ] ++ ;  $ ~}  $ ~long long ans = 0 ;  $ ~for ( int i = 1 ; i < 6 ; i ++ ) {  $ ~~if ( alr [ i ] % 2 != 0 ) ans = - 2 ;  $ ~}  $ ~if ( ans != - 2 ) {  $ ~~for ( int i = 1 ; i < 6 ; i ++ ) { ans += abs ( alr [ i ] / 2 - ar [ i ] ) ; }  $ ~}  $ ~cout << ans / 2 << endl ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~long long n , x = 0 , y = 0 , a ;  $ ~cin >> n ;  $ ~for ( int i = 0 ; i < n ; i ++ ) {  $ ~~cin >> a ;  $ ~~x |= a ;  $ ~}  $ ~for ( int i = 0 ; i < n ; i ++ ) {  $ ~~cin >> a ;  $ ~~y |= a ;  $ ~}  $ ~cout << x + y << endl ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~long long int i , j , k , rest , n ;  $ ~char ch , ch1 ;  $ ~cin >> n >> k ;  $ ~rest = n - k ;  $ ~ch = 'a' ;  $ ~for ( i = 0 ; i < k ; i ++ ) {  $ ~~cout << ch ;  $ ~~ch += 1 ;  $ ~}  $ ~ch1 = 'a' ;  $ ~for ( i = 0 , j = 1 ; i < rest ; i ++ , j ++ ) {  $ ~~cout << ch1 ;  $ ~~ch1 += 1 ;  $ ~~if ( j == k ) {  $ ~~~ch1 = 'a' ;  $ ~~~j = 0 ;  $ ~~}  $ ~}  $ ~cout << endl ;  $ ~return 0 ;  $ }
const long long mod = 998244353 ;  $ const int maxn = 2e5 ;  $ int main ( ) {  $ ~int t ;  $ ~long long n , a , b , c ;  $ ~cin >> n ;  $ ~cin >> a >> b >> c ;  $ ~long long one = a , two = b - c ;  $ ~long long sum1 = n / one , yu1 = n % one , ci ;  $ ~while ( yu1 / b > 0 ) {  $ ~~ci = ( yu1 - c ) / two ;  $ ~~yu1 = yu1 - ci * two ;  $ ~~sum1 += ci ;  $ ~}  $ ~long long yu2 = n , sum2 = 0 , ans = 0 ;  $ ~while ( yu2 / b > 0 ) {  $ ~~ci = ( yu2 - c ) / two ;  $ ~~yu2 = yu2 - ci * two ;  $ ~~sum2 += ci ;  $ ~}  $ ~sum2 += yu2 / one ;  $ ~yu2 = yu2 % one ;  $ ~ans = max ( ans , sum2 ) ;  $ ~ans = max ( sum1 , ans ) ;  $ ~cout << ans << endl ;  $ ~return 0 ;  $ }
long long gcd ( long long a , long long b ) {  $ ~return ( b == 0 ? a : gcd ( b , a % b ) ) ;  $ }  $ long long lcm ( long long a , long long b ) {  $ ~return a * ( b / gcd ( a , b ) ) ;  $ }  $ int main ( ) {  $ ~long long a , b ;  $ ~cin >> a >> b ;  $ ~long long time = 0 ;  $ ~long long ta = 0 , tb = 0 ;  $ ~long long l = lcm ( a , b ) ;  $ ~while ( time < l ) {  $ ~~long long da = a - ( time % a ) ;  $ ~~long long db = b - ( time % b ) ;  $ ~~if ( da < db ) {  $ ~~~ta += da ;  $ ~~~time += da ;  $ ~~} else if ( db < da ) {  $ ~~~tb += db ;  $ ~~~time += db ;  $ ~~} else {  $ ~~~if ( a < b ) {  $ ~~~~time += da ;  $ ~~~~tb += da ;  $ ~~~} else {  $ ~~~~time += da ;  $ ~~~~ta += da ;  $ ~~~}  $ ~~}  $ ~}  $ ~cout << ( ta < tb ? "Masha\n" : ta == tb ? "Equal\n" : "Dasha\n" ) ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~int t ;  $ ~cin >> t ;  $ ~while ( t -- ) {  $ ~~int n , r , s = 0 ;  $ ~~cin >> n >> r ;  $ ~~for ( int i = 1 , x ; i < n ; ++ i ) cin >> x , s += x ;  $ ~~cout << ( ( r - s ) % n + n ) % n + 1 << '\n' ;  $ ~}  $ }
int main ( ) {  $ ~int TESTS = 1 ;  $ ~while ( TESTS -- ) {  $ ~~long long n , k ;  $ ~~cin >> n >> k ;  $ ~~vector < long long int > v ;  $ ~~long long c = 0 ;  $ ~~for ( long long int i = 0 ; i < n ; i ++ ) {  $ ~~~long long x ;  $ ~~~cin >> x ;  $ ~~~v . push_back ( x ) ;  $ ~~}  $ ~~for ( long long int i = 0 ; i < n ; i ++ ) {  $ ~~~if ( v [ i ] > 0 && v [ i ] >= v [ k - 1 ] ) c ++ ;  $ ~~}  $ ~~cout << c << '\n' ;  $ ~}  $ ~return 0 ;  $ }
string a , b ;  $ int n ;  $ int main ( ) {  $ ~cin >> a >> b ;  $ ~cin >> n ;  $ ~cout << a << ' ' << b << endl ;  $ ~string resa = a , resb = b ;  $ ~while ( n -- ) {  $ ~~cin >> a >> b ;  $ ~~if ( a == resa ) {  $ ~~~cout << b << ' ' << resb << endl ;  $ ~~~resa = b ;  $ ~~} else {  $ ~~~cout << resa << ' ' << b << endl ;  $ ~~~resb = b ;  $ ~~}  $ ~}  $ ~return 0 ;  $ }
void solve ( ) {  $ ~long long n , i , j , x ;  $ ~cin >> n >> x ;  $ ~long long sum = 0 , temp ;  $ ~for ( long long i = 0 ; i < n ; ++ i ) {  $ ~~cin >> temp ;  $ ~~sum += temp ;  $ ~}  $ ~long long ans ;  $ ~if ( abs ( sum ) % x == 0 ) {  $ ~~ans = abs ( sum ) / x ;  $ ~} else  $ ~~ans = abs ( sum ) / x + 1 ;  $ ~cout << ans << '\n' ;  $ }  $ int main ( ) {  $ ~long long t = 1 ;  $ ~while ( t -- ) { solve ( ) ; }  $ ~return 0 ;  $ }
int main ( ) {  $ ~long long a , b ;  $ ~cin >> a >> b ;  $ ~for ( long long i = 1 ; i < 7 ; i ++ ) {  $ ~~a = 3 * a ;  $ ~~b = 2 * b ;  $ ~~if ( a > b ) {  $ ~~~cout << i << endl ;  $ ~~~break ;  $ ~~}  $ ~}  $ }
int cl ( int a ) {  $ ~int ans = 0 ;  $ ~while ( a ) {  $ ~~if ( a % 10 == 4 || a % 10 == 7 ) ans ++ ;  $ ~~a /= 10 ;  $ ~}  $ ~return ans ;  $ }  $ int main ( ) {  $ ~int n , k ;  $ ~cin >> n >> k ;  $ ~int cnt = 0 ;  $ ~for ( int i = 0 ; i < n ; i ++ ) {  $ ~~int a ;  $ ~~cin >> a ;  $ ~~if ( cl ( a ) <= k ) cnt ++ ;  $ ~}  $ ~cout << cnt << endl ;  $ }
int main ( ) {  $ ~int n ;  $ ~cin >> n ;  $ ~pair < int , int > x [ 1000 ] ;  $ ~int a = 0 , b = 0 ;  $ ~for ( int i = 0 ; i < n ; i ++ ) { cin >> x [ i ] . first >> x [ i ] . second ; }  $ ~int a1 , a2 , a3 , a4 ;  $ ~a1 = a2 = a3 = a4 = 0 ;  $ ~for ( int i = 0 ; i < n ; i ++ ) {  $ ~~for ( int j = 0 ; j < n ; j ++ ) {  $ ~~~if ( x [ i ] . first > x [ j ] . first && ( x [ i ] . second == x [ j ] . second ) ) {  $ ~~~~if ( a1 == 0 ) a ++ ;  $ ~~~~a1 ++ ;  $ ~~~} else if ( x [ i ] . first < x [ j ] . first && ( x [ i ] . second == x [ j ] . second ) ) {  $ ~~~~if ( a2 == 0 ) a ++ ;  $ ~~~~a2 ++ ;  $ ~~~} else if ( x [ i ] . first == x [ j ] . first && ( x [ i ] . second < x [ j ] . second ) ) {  $ ~~~~if ( a3 == 0 ) a ++ ;  $ ~~~~a3 ++ ;  $ ~~~}  $ ~~~if ( x [ i ] . first == x [ j ] . first && ( x [ i ] . second > x [ j ] . second ) ) {  $ ~~~~if ( a4 == 0 ) a ++ ;  $ ~~~~a4 ++ ;  $ ~~~}  $ ~~}  $ ~~if ( a == 4 ) b ++ ;  $ ~~a = a1 = a2 = a3 = a4 = 0 ;  $ ~}  $ ~cout << b << endl ;  $ ~return 0 ;  $ }
int n , k ;  $ int main ( ) {  $ ~cin >> n >> k ;  $ ~k = 240 - k ;  $ ~for ( int i = 1 ; i <= n ; i ++ ) {  $ ~~if ( i * 5 > k ) {  $ ~~~cout << i - 1 << endl ;  $ ~~~return 0 ;  $ ~~}  $ ~~k -= i * 5 ;  $ ~}  $ ~cout << n << endl ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~int x1 , x2 , x3 ;  $ ~cin >> x1 >> x2 >> x3 ;  $ ~int sum = sqrt ( ( x1 * x3 ) / x2 ) + sqrt ( ( x2 * x1 ) / x3 ) + sqrt ( ( x3 * x2 ) / x1 ) ;  $ ~sum = sum * 4 ;  $ ~cout << sum << endl ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~long long int c , n , N = 1 ;  $ ~cin >> n ;  $ ~cin >> c ;  $ ~int * t = new int [ n ] ;  $ ~for ( int i = 0 ; i < n ; ++ i ) { cin >> t [ i ] ; }  $ ~for ( int i = 1 ; i < n ; ++ i ) {  $ ~~if ( t [ i ] - t [ i - 1 ] <= c ) {  $ ~~~N += 1 ;  $ ~~} else {  $ ~~~N = 1 ;  $ ~~}  $ ~}  $ ~cout << N << endl ;  $ }
int main ( ) {  $ ~int n ;  $ ~cin >> n ;  $ ~string s ;  $ ~cin >> s ;  $ ~vector < int > r , l ;  $ ~for ( int i = 0 ; i < n ; ++ i ) {  $ ~~if ( s [ i ] == 'R' )  $ ~~~r . push_back ( i ) ;  $ ~~else  $ ~~~l . push_back ( i ) ;  $ ~}  $ ~int v [ n ] ;  $ ~for ( int i = 0 ; i < n ; ++ i ) { cin >> v [ i ] ; }  $ ~int k1 = 0 , k2 = 0 , min = INT_MAX ;  $ ~while ( k1 < r . size ( ) && k2 < l . size ( ) ) {  $ ~~if ( r [ k1 ] < l [ k2 ] ) {  $ ~~~int num = ( v [ l [ k2 ] ] - v [ r [ k1 ] ] ) / 2 ;  $ ~~~if ( num < min ) min = num ;  $ ~~~k1 ++ ;  $ ~~} else {  $ ~~~k2 ++ ;  $ ~~}  $ ~}  $ ~if ( min == INT_MAX )  $ ~~cout << - 1 << endl ;  $ ~else  $ ~~cout << min << endl ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~long long n , m , a , d , i , j , r = 0 , x , y ;  $ ~cin >> n >> m >> a >> d ;  $ ~vector < long long > v ( m + 1 ) ;  $ ~for ( i = 1 ; i <= m ; i ++ ) cin >> v [ i ] ;  $ ~i = j = 1 ;  $ ~x = ( d / a ) + 1 ;  $ ~while ( i <= m && j <= n ) {  $ ~~y = j * a ;  $ ~~if ( v [ i ] > y ) {  $ ~~~y = ( min ( n * a , v [ i ] ) - y ) / a ;  $ ~~~y = ( y / x ) + 1 ;  $ ~~~r += y , j += x * y ;  $ ~~~y = ( j - x ) * a + d + 1 ;  $ ~~~while ( i <= m && v [ i ] < y ) i ++ ;  $ ~~} else {  $ ~~~r ++ ;  $ ~~~y = v [ i ] + d ;  $ ~~~while ( i <= m && v [ i ] <= y ) i ++ ;  $ ~~~j = ( y / a ) + 1 ;  $ ~~}  $ ~}  $ ~while ( i <= m ) {  $ ~~r ++ ;  $ ~~y = v [ i ] + d ;  $ ~~while ( i <= m && v [ i ] <= y ) i ++ ;  $ ~}  $ ~if ( j <= n ) {  $ ~~j = n - j ;  $ ~~r += ( j / x ) + 1 ;  $ ~}  $ ~cout << r << endl ;  $ }
int main ( ) {  $ ~long long t , s , q , load , count = 1 ;  $ ~cin >> t >> s >> q ;  $ ~load = s * q ;  $ ~while ( load < t ) {  $ ~~load *= q ;  $ ~~count ++ ;  $ ~}  $ ~cout << count << endl ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~string table ;  $ ~map < char , int > has ;  $ ~while ( cin >> table ) {  $ ~~has . clear ( ) ;  $ ~~for ( int i = 0 ; i < table . size ( ) ; i ++ ) { has [ table [ i ] ] ++ ; }  $ ~~bool flag = false ;  $ ~~string hand ;  $ ~~for ( int i = 1 ; i <= 5 ; i ++ ) {  $ ~~~cin >> hand ;  $ ~~~for ( int i = 0 ; i < 2 ; i ++ ) {  $ ~~~~if ( has [ hand [ i ] ] != 0 ) { flag = true ; }  $ ~~~}  $ ~~}  $ ~~if ( flag ) {  $ ~~~cout << "YES" << endl ;  $ ~~} else {  $ ~~~cout << "NO" << endl ;  $ ~~}  $ ~}  $ ~return 0 ;  $ }
int main ( ) {  $ ~int a , b ;  $ ~cin >> a >> b ;  $ ~int c = 0 ;  $ ~while ( b ) {  $ ~~c = c * 10 + b % 10 ;  $ ~~b /= 10 ;  $ ~}  $ ~cout << a + c << endl ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~int n , m , l , r ;  $ ~string s ;  $ ~char c1 , c2 ;  $ ~cin >> n >> m ;  $ ~cin >> s ;  $ ~for ( int i = 0 ; i != m ; ++ i ) {  $ ~~cin >> l >> r >> c1 >> c2 ;  $ ~~-- l ;  $ ~~for ( int i = l ; i != r ; ++ i ) {  $ ~~~if ( s [ i ] == c1 ) s [ i ] = c2 ;  $ ~~}  $ ~}  $ ~cout << s << endl ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~set < int > sett ;  $ ~int year ;  $ ~while ( cin >> year ) {  $ ~~while ( true ) {  $ ~~~year ++ ;  $ ~~~int x = year % 10 ;  $ ~~~int y = year / 10 ;  $ ~~~int z = y % 10 ;  $ ~~~int a = y / 10 ;  $ ~~~int b = a % 10 ;  $ ~~~int c = a / 10 ;  $ ~~~int d = c % 10 ;  $ ~~~int e = c / 10 ;  $ ~~~sett . insert ( d ) ;  $ ~~~sett . insert ( b ) ;  $ ~~~sett . insert ( z ) ;  $ ~~~sett . insert ( x ) ;  $ ~~~if ( d != b && d != z && d != x && b != z && b != x && z != x ) break ;  $ ~~}  $ ~~cout << year << endl ;  $ ~}  $ ~return 0 ;  $ }
int main ( ) {  $ ~long long n , k , s , i ;  $ ~while ( cin >> n >> k ) {  $ ~~i = k / n ;  $ ~~s = k % n ;  $ ~~if ( s > 0 ) i = i + 1 ;  $ ~~cout << i << endl ;  $ ~}  $ ~return 0 ;  $ }
int main ( ) {  $ ~string s ;  $ ~cin >> s ;  $ ~int n = count ( ( s ) . begin ( ) , ( s ) . end ( ) , 'o' ) ;  $ ~if ( n )  $ ~~cout << ( s . size ( ) % n == 0 ? "YES" : "NO" ) << endl ;  $ ~else  $ ~~cout << "YES" << endl ;  $ }
int main ( ) {  $ ~int x , t , a , b , da , db ;  $ ~cin >> x >> t >> a >> b >> da >> db ;  $ ~int l = b ;  $ ~int flag = 0 ;  $ ~if ( x == 0 ) flag = 1 ;  $ ~for ( int i = 0 ; i < t ; i ++ ) {  $ ~~b = l ;  $ ~~for ( int j = 0 ; j < t ; j ++ ) {  $ ~~~if ( x == a + b || x == a || x == b ) {  $ ~~~~flag = 1 ;  $ ~~~~break ;  $ ~~~}  $ ~~~b -= db ;  $ ~~}  $ ~~a -= da ;  $ ~}  $ ~if ( flag == 1 )  $ ~~cout << "YES" << endl ;  $ ~else  $ ~~cout << "NO" << endl ;  $ }
const int maxn = 105 ;  $ int v [ maxn ] ;  $ int main ( ) {  $ ~int n ;  $ ~cin >> n ;  $ ~for ( int i = 1 ; i <= n ; i ++ ) cin >> v [ i ] ;  $ ~int act1 = 1 ;  $ ~int act2 = 2 ;  $ ~int spect = 3 ;  $ ~for ( int i = 1 ; i <= n ; i ++ ) {  $ ~~if ( v [ i ] == spect ) {  $ ~~~cout << "NO"  $ ~~~~<< "\n" ;  $ ~~~return 0 ;  $ ~~}  $ ~~if ( act1 == v [ i ] )  $ ~~~swap ( act2 , spect ) ;  $ ~~else if ( act2 == v [ i ] )  $ ~~~swap ( act1 , spect ) ;  $ ~}  $ ~cout << "YES"  $ ~~<< "\n" ;  $ ~return 0 ;  $ }
int arr [ 100005 ] , has ;  $ int main ( ) {  $ ~int n ;  $ ~cin >> n ;  $ ~for ( int i = 1 ; i <= n ; i ++ ) {  $ ~~if ( i == 1 ) {  $ ~~~cin >> arr [ 1 ] ;  $ ~~~has = 1 ;  $ ~~} else {  $ ~~~cin >> arr [ i ] ;  $ ~~~if ( arr [ i ] < arr [ has ] ) { has = i ; }  $ ~~}  $ ~}  $ ~for ( int i = 1 ; i <= n ; i ++ ) {  $ ~~if ( i != has ) {  $ ~~~if ( arr [ i ] == arr [ has ] ) {  $ ~~~~cout << "Still Rozdil" << endl ;  $ ~~~~exit ( 0 ) ;  $ ~~~}  $ ~~}  $ ~}  $ ~cout << has << endl ;  $ }
bool p [ 4 ] ;  $ int n , a ;  $ int main ( ) {  $ ~cin >> n ;  $ ~p [ 1 ] = true ;  $ ~p [ 2 ] = true ;  $ ~bool possible = true ;  $ ~while ( n -- ) {  $ ~~cin >> a ;  $ ~~if ( ! p [ a ] ) {  $ ~~~possible = false ;  $ ~~} else {  $ ~~~for ( int i = 1 ; i <= 3 ; i ++ ) {  $ ~~~~if ( ! p [ i ] ) {  $ ~~~~~p [ i ] = true ;  $ ~~~~} else if ( p [ i ] && i != a ) {  $ ~~~~~p [ i ] = false ;  $ ~~~~}  $ ~~~}  $ ~~}  $ ~}  $ ~if ( possible )  $ ~~cout << "YES\n" ;  $ ~else  $ ~~cout << "NO\n" ;  $ }
int main ( ) {  $ ~char c ;  $ ~cin >> c ;  $ ~string s , s1 , s2 , s3 , ns ;  $ ~cin >> s ;  $ ~s1 = "qwertyuiop" ;  $ ~s2 = "asdfghjkl;" ;  $ ~s3 = "zxcvbnm,./" ;  $ ~for ( int i = 0 ; i < s . size ( ) ; i ++ ) {  $ ~~for ( int j = 0 ; j < 10 ; j ++ ) {  $ ~~~if ( s [ i ] == s1 [ j ] ) {  $ ~~~~if ( c == 'L' )  $ ~~~~~ns += s1 [ j + 1 ] ;  $ ~~~~else  $ ~~~~~ns += s1 [ j - 1 ] ;  $ ~~~}  $ ~~~if ( s [ i ] == s2 [ j ] ) {  $ ~~~~if ( c == 'L' )  $ ~~~~~ns += s2 [ j + 1 ] ;  $ ~~~~else  $ ~~~~~ns += s2 [ j - 1 ] ;  $ ~~~}  $ ~~~if ( s [ i ] == s3 [ j ] ) {  $ ~~~~if ( c == 'L' )  $ ~~~~~ns += s3 [ j + 1 ] ;  $ ~~~~else  $ ~~~~~ns += s3 [ j - 1 ] ;  $ ~~~}  $ ~~}  $ ~}  $ ~cout << ns << endl ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~int n , c = 0 , v = 0 ;  $ ~cin >> n ;  $ ~char A [ n + 10 ] [ n + 10 ] ;  $ ~for ( int i = 0 ; i < n + 2 ; i ++ ) {  $ ~~for ( int j = 0 ; j < n + 2 ; j ++ ) {  $ ~~~A [ 0 ] [ j ] = 'p' ;  $ ~~~A [ i ] [ 0 ] = 'p' ;  $ ~~~A [ n + 1 ] [ j ] = 'p' ;  $ ~~~A [ i ] [ n + 1 ] = 'p' ;  $ ~~}  $ ~}  $ ~for ( int i = 1 ; i < n + 1 ; i ++ ) {  $ ~~for ( int j = 1 ; j < n + 1 ; j ++ ) { cin >> A [ i ] [ j ] ; }  $ ~}  $ ~for ( int i = 1 ; i < n + 1 ; i ++ ) {  $ ~~for ( int j = 1 ; j < n + 1 ; j ++ ) {  $ ~~~if ( A [ i - 1 ] [ j ] == 'o' ) c ++ ;  $ ~~~if ( A [ i + 1 ] [ j ] == 'o' ) c ++ ;  $ ~~~if ( A [ i ] [ j - 1 ] == 'o' ) c ++ ;  $ ~~~if ( A [ i ] [ j + 1 ] == 'o' ) c ++ ;  $ ~~~if ( c % 2 == 1 ) {  $ ~~~~cout << "NO" << endl ;  $ ~~~~return 0 ;  $ ~~~}  $ ~~}  $ ~}  $ ~cout << "YES" << endl ;  $ }
int main ( ) {  $ ~string num ;  $ ~cin >> num ;  $ ~int i , sum , c4 = 0 , c1 = 0 , c0 = 0 , j , c44 = 0 ;  $ ~for ( i = 0 ; i < num . size ( ) ; i ++ ) {  $ ~~if ( num [ i ] == '1' ) {  $ ~~~c1 ++ ;  $ ~~} else if ( num [ i ] == '4' ) {  $ ~~~c4 ++ ;  $ ~~} else {  $ ~~~c0 ++ ;  $ ~~}  $ ~}  $ ~for ( j = 0 ; j < num . size ( ) ; j ++ ) {  $ ~~if ( num [ j ] == '4' && num [ j + 1 ] == '4' && num [ j + 2 ] == '4' ) { c44 ++ ; }  $ ~}  $ ~if ( num [ 0 ] == '1' && c0 == 0 && c44 == 0 ) {  $ ~~cout << "YES" << endl ;  $ ~} else {  $ ~~cout << "NO" << endl ;  $ ~}  $ }
int main ( ) {  $ ~int k , a , b , v , num = 0 ;  $ ~cin >> k >> a >> b >> v ;  $ ~while ( a > 0 ) {  $ ~~if ( b >= ( k - 1 ) ) {  $ ~~~a -= k * v ;  $ ~~~b -= k - 1 ;  $ ~~} else {  $ ~~~a -= ( b + 1 ) * v ;  $ ~~~b = 0 ;  $ ~~}  $ ~~num ++ ;  $ ~}  $ ~cout << num << endl ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~string a ;  $ ~cin >> a ;  $ ~int sum = 0 ;  $ ~for ( int i = a . length ( ) - 1 ; i >= 0 ; i -- ) {  $ ~~if ( a [ i ] == '0' ) sum += 1 ;  $ ~~if ( sum >= 6 ) {  $ ~~~if ( a [ i - 1 ] == '1' ) {  $ ~~~~cout << "yes" << endl ;  $ ~~~~return 0 ;  $ ~~~} else  $ ~~~~continue ;  $ ~~}  $ ~}  $ ~cout << "no" << endl ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~int n , m , i , j , stu [ 105 ] , sum = 0 ;  $ ~char s [ 105 ] [ 105 ] ;  $ ~cin >> n >> m ;  $ ~for ( i = 0 ; i < n ; i ++ ) {  $ ~~stu [ i ] = 0 ;  $ ~~for ( j = 0 ; j < m ; j ++ ) { cin >> s [ i ] [ j ] ; }  $ ~}  $ ~for ( j = 0 ; j < m ; j ++ ) {  $ ~~char temp = s [ 0 ] [ j ] ;  $ ~~for ( i = 0 ; i < n ; i ++ ) {  $ ~~~if ( s [ i ] [ j ] >= temp ) { temp = s [ i ] [ j ] ; }  $ ~~}  $ ~~for ( i = 0 ; i < n ; i ++ ) {  $ ~~~if ( s [ i ] [ j ] == temp ) { stu [ i ] = 1 ; }  $ ~~}  $ ~}  $ ~for ( i = 0 ; i < n ; i ++ ) { sum += stu [ i ] ; }  $ ~cout << sum << endl ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~int i , n ;  $ ~int a [ 1005 ] ;  $ ~cin >> n ;  $ ~for ( i = 0 ; i < n ; i ++ ) cin >> a [ i ] ;  $ ~sort ( a , a + n ) ;  $ ~int gay ;  $ ~gay = n / 2 ;  $ ~if ( n % 2 == 0 ) {  $ ~~cout << a [ gay - 1 ] << endl ;  $ ~} else {  $ ~~cout << a [ gay ] << endl ;  $ ~}  $ ~return 0 ;  $ }
bool qo ( bool x ) {  $ ~return ( x ? 0 : qo ( ! x ) ) ;  $ }  $ const int mnx = 1e7 + 9 ;  $ const int mod = 1e9 + 7 ;  $ long long n , m , k ;  $ int main ( ) {  $ ~cin >> n >> m >> k ;  $ ~long long lcm = n * m / __gcd ( n , m ) ;  $ ~cout << k / lcm << '\n' ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~int x , a , b ;  $ ~cin >> x ;  $ ~cin >> a >> b ;  $ ~if ( a / 10 == 7 || a % 10 == 7 || b / 10 == 7 || b % 10 == 7 ) {  $ ~~cout << 0 << endl ;  $ ~~return 0 ;  $ ~}  $ ~int c = 0 ;  $ ~while ( true ) {  $ ~~if ( b == 0 ) {  $ ~~~a = ( a - 1 + 24 ) % 24 ;  $ ~~~b = 60 ;  $ ~~}  $ ~~b -- ;  $ ~~c ++ ;  $ ~~if ( b % 10 == 7 || a % 10 == 7 || a / 10 == 7 ) {  $ ~~~if ( c % x == 0 ) {  $ ~~~~cout << c / x << endl ;  $ ~~~~return 0 ;  $ ~~~}  $ ~~}  $ ~}  $ }
int main ( ) {  $ ~long long a , b , c = 0 ;  $ ~cin >> a >> b ;  $ ~while ( b ) {  $ ~~c = c * 10 + b % 10 ;  $ ~~b /= 10 ;  $ ~}  $ ~cout << a + c << endl ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~long long n ;  $ ~cin >> n ;  $ ~long long a [ n ] ;  $ ~for ( int i = 0 ; i < n ; i ++ ) cin >> a [ i ] ;  $ ~long long cnt = 1 , c = 1 ;  $ ~for ( int i = 1 ; i < n ; i ++ ) {  $ ~~cnt ++ ;  $ ~~if ( a [ i ] == a [ i - 1 ] )  $ ~~~c ++ ;  $ ~~else {  $ ~~~cnt += ( c * ( c - 1 ) ) / 2 ;  $ ~~~c = 1 ;  $ ~~}  $ ~}  $ ~cnt += ( c * ( c - 1 ) ) / 2 ;  $ ~cout << cnt << endl ;  $ }
int arr [ 105 ] ;  $ int main ( ) {  $ ~int n , aux ;  $ ~memset ( arr , 0 , sizeof arr ) ;  $ ~cin >> n ;  $ ~for ( int i = 0 ; i < n ; i ++ ) {  $ ~~cin >> aux ;  $ ~~arr [ aux ] ++ ;  $ ~}  $ ~int ans = 0 ;  $ ~for ( int i = 0 ; i < 102 ; i ++ ) ans = max ( ans , arr [ i ] ) ;  $ ~cout << ans << "\n" ;  $ }
const int INF = 0 x3f3f3f3f ;  $ int main ( ) {  $ ~int n , m ;  $ ~cin >> n >> m ;  $ ~int ans [ 105 ] [ 105 ] = { 0 } , ar [ 105 ] [ 105 ] = { 0 } ;  $ ~for ( int i = 1 ; i <= n ; i ++ )  $ ~~for ( int j = 1 ; j <= m ; j ++ ) {  $ ~~~cin >> ans [ i ] [ j ] ;  $ ~~~ar [ i ] [ j ] = ans [ i ] [ j ] ;  $ ~~}  $ ~int mins = INF , sum = 0 ;  $ ~int temp [ 6 ] [ 200 ] = { 0 } ;  $ ~for ( int i = 1 ; i <= n ; i ++ ) {  $ ~~mins = INF ;  $ ~~for ( int j = 1 ; j <= m ; j ++ ) mins = min ( mins , ans [ i ] [ j ] ) ;  $ ~~temp [ 1 ] [ i ] = mins ;  $ ~~for ( int j = 1 ; j <= m ; j ++ ) ans [ i ] [ j ] -= mins ;  $ ~}  $ ~for ( int j = 1 ; j <= m ; j ++ ) {  $ ~~mins = INF ;  $ ~~for ( int i = 1 ; i <= n ; i ++ ) mins = min ( mins , ans [ i ] [ j ] ) ;  $ ~~temp [ 2 ] [ j ] = mins ;  $ ~~for ( int i = 1 ; i <= n ; i ++ ) ans [ i ] [ j ] -= mins ;  $ ~}  $ ~for ( int j = 1 ; j <= m ; j ++ ) {  $ ~~mins = INF ;  $ ~~for ( int i = 1 ; i <= n ; i ++ ) mins = min ( mins , ar [ i ] [ j ] ) ;  $ ~~temp [ 3 ] [ j ] = mins ;  $ ~~for ( int i = 1 ; i <= n ; i ++ ) ar [ i ] [ j ] -= mins ;  $ ~}  $ ~for ( int i = 1 ; i <= n ; i ++ ) {  $ ~~mins = INF ;  $ ~~for ( int j = 1 ; j <= m ; j ++ ) mins = min ( mins , ar [ i ] [ j ] ) ;  $ ~~temp [ 4 ] [ i ] = mins ;  $ ~~for ( int j = 1 ; j <= m ; j ++ ) ar [ i ] [ j ] -= mins ;  $ ~}  $ ~int flag1 = 0 , flag2 = 0 ;  $ ~for ( int i = 1 ; i <= n ; i ++ ) {  $ ~~for ( int j = 1 ; j <= m ; j ++ ) {  $ ~~~if ( ans [ i ] [ j ] != 0 ) {  $ ~~~~flag1 = 1 ;  $ ~~~~break ;  $ ~~~}  $ ~~}  $ ~}  $ ~for ( int i = 1 ; i <= n ; i ++ ) {  $ ~~for ( int j = 1 ; j <= m ; j ++ ) {  $ ~~~if ( ar [ i ] [ j ] != 0 ) {  $ ~~~~flag2 = 1 ;  $ ~~~~break ;  $ ~~~}  $ ~~}  $ ~}  $ ~if ( flag1 == 1 && flag2 == 1 )  $ ~~cout << - 1 << endl ;  $ ~else if ( flag1 == 0 && flag2 == 0 ) {  $ ~~int sum1 = 0 , sum2 = 0 ;  $ ~~for ( int i = 1 ; i <= n ; i ++ ) {  $ ~~~sum1 += temp [ 1 ] [ i ] ;  $ ~~~sum2 += temp [ 4 ] [ i ] ;  $ ~~}  $ ~~for ( int j = 1 ; j <= m ; j ++ ) {  $ ~~~sum1 += temp [ 2 ] [ j ] ;  $ ~~~sum2 += temp [ 3 ] [ j ] ;  $ ~~}  $ ~~if ( sum1 > sum2 ) {  $ ~~~cout << sum2 << endl ;  $ ~~~for ( int i = 1 ; i <= n ; i ++ )  $ ~~~~for ( int j = 1 ; j <= temp [ 4 ] [ i ] ; j ++ ) cout << "row " << i << endl ;  $ ~~~for ( int j = 1 ; j <= m ; j ++ )  $ ~~~~for ( int i = 1 ; i <= temp [ 3 ] [ j ] ; i ++ ) cout << "col " << j << endl ;  $ ~~} else {  $ ~~~cout << sum1 << endl ;  $ ~~~for ( int i = 1 ; i <= n ; i ++ )  $ ~~~~for ( int j = 1 ; j <= temp [ 1 ] [ i ] ; j ++ ) cout << "row " << i << endl ;  $ ~~~for ( int j = 1 ; j <= m ; j ++ )  $ ~~~~for ( int i = 1 ; i <= temp [ 2 ] [ j ] ; i ++ ) cout << "col " << j << endl ;  $ ~~}  $ ~} else if ( flag1 == 1 ) {  $ ~~int sum2 = 0 ;  $ ~~for ( int i = 1 ; i <= n ; i ++ ) { sum2 += temp [ 4 ] [ i ] ; }  $ ~~for ( int j = 1 ; j <= m ; j ++ ) { sum2 += temp [ 3 ] [ j ] ; }  $ ~~cout << sum2 << endl ;  $ ~~for ( int i = 1 ; i <= n ; i ++ )  $ ~~~for ( int j = 1 ; j <= temp [ 4 ] [ i ] ; j ++ ) cout << "row " << i << endl ;  $ ~~for ( int j = 1 ; j <= m ; j ++ )  $ ~~~for ( int i = 1 ; i <= temp [ 3 ] [ j ] ; i ++ ) cout << "col " << j << endl ;  $ ~} else if ( flag2 == 1 ) {  $ ~~int sum1 = 0 ;  $ ~~for ( int i = 1 ; i <= n ; i ++ ) { sum1 += temp [ 4 ] [ i ] ; }  $ ~~for ( int j = 1 ; j <= m ; j ++ ) { sum1 += temp [ 3 ] [ j ] ; }  $ ~~cout << sum1 << endl ;  $ ~~for ( int i = 1 ; i <= n ; i ++ )  $ ~~~for ( int j = 1 ; j <= temp [ 1 ] [ i ] ; j ++ ) cout << "row " << i << endl ;  $ ~~for ( int j = 1 ; j <= m ; j ++ )  $ ~~~for ( int i = 1 ; i <= temp [ 2 ] [ j ] ; i ++ ) cout << "col " << j << endl ;  $ ~}  $ ~return 0 ;  $ }
int main ( ) {  $ ~string s ;  $ ~cin >> s ;  $ ~for ( int i = 0 ; i < s . length ( ) - 1 ; i ++ ) {  $ ~~int i2 = i + 1 ;  $ ~~if ( s [ i ] == 'A' && s [ i2 ] == 'B' ) {  $ ~~~for ( int j = 0 ; j < s . length ( ) - 1 ; j ++ ) {  $ ~~~~int j2 = j + 1 ;  $ ~~~~if ( s [ j ] == 'B' && s [ j2 ] == 'A' ) {  $ ~~~~~if ( i != j && i != j2 && i2 != j && i2 != j2 ) {  $ ~~~~~~cout << "YES" << endl ;  $ ~~~~~~return 0 ;  $ ~~~~~}  $ ~~~~}  $ ~~~}  $ ~~}  $ ~}  $ ~cout << "NO" << endl ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~int n , a , sum = 0 ;  $ ~cin >> n ;  $ ~while ( n -- ) {  $ ~~cin >> a ;  $ ~~if ( a < 0 )  $ ~~~sum = sum - a ;  $ ~~else  $ ~~~sum = sum + a ;  $ ~}  $ ~cout << sum << endl ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~int a , b ;  $ ~cin >> a >> b ;  $ ~int rb = 0 ;  $ ~while ( b ) {  $ ~~rb = rb * 10 + b % 10 ;  $ ~~b /= 10 ;  $ ~}  $ ~cout << a + rb << endl ;  $ }
int main ( ) {  $ ~long long N , M , K , L , res ;  $ ~cin >> N >> M >> K >> L ;  $ ~if ( M > N || L + K > N ) {  $ ~~res = - 1 ;  $ ~} else {  $ ~~if ( ! ( ( L + K ) % M ) )  $ ~~~res = ( L + K ) / M ;  $ ~~else  $ ~~~res = ( L + K ) / M + 1 ;  $ ~~if ( res * M > N ) res = - 1 ;  $ ~}  $ ~cout << res << endl ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~string s ;  $ ~cin >> s ;  $ ~reverse ( s . begin ( ) , s . end ( ) ) ;  $ ~string t ;  $ ~cin >> t ;  $ ~if ( t == s ) {  $ ~~cout << "YES" << endl ;  $ ~} else {  $ ~~cout << "NO" << endl ;  $ ~}  $ ~return 0 ;  $ }
int arr [ 10005 ] ;  $ int main ( ) {  $ ~int a ;  $ ~int n , sum = 0 ;  $ ~cin >> n ;  $ ~for ( int i = 1 ; i <= n ; i ++ ) {  $ ~~cin >> a ;  $ ~~arr [ a ] ++ ;  $ ~~if ( arr [ a ] == 1 && a != 0 ) { sum ++ ; }  $ ~}  $ ~cout << sum << endl ;  $ }
int main ( ) {  $ ~int n , s [ 1009 ] ;  $ ~int ss [ 1009 ] ;  $ ~while ( cin >> n ) {  $ ~~int sum = 0 ;  $ ~~int j = 0 ;  $ ~~for ( int i = 0 ; i < n ; i ++ ) {  $ ~~~cin >> s [ i ] ;  $ ~~~if ( s [ i ] == 1 ) { sum ++ ; }  $ ~~~if ( s [ i ] == 1 && i != 0 ) { ss [ j ++ ] = s [ i - 1 ] ; }  $ ~~}  $ ~~ss [ j ++ ] = s [ n - 1 ] ;  $ ~~cout << sum << endl << ss [ 0 ] ;  $ ~~for ( int i = 1 ; i < sum ; i ++ ) cout << " " << ss [ i ] ;  $ ~~cout << endl ;  $ ~}  $ ~return 0 ;  $ }
const int M = 50 + 5 ;  $ bool lead0 ( string s ) {  $ ~int slen = s . length ( ) ;  $ ~if ( slen > 1 ) {  $ ~~if ( s [ 0 ] == '0' ) { return true ; }  $ ~}  $ ~return false ;  $ }  $ long long int ston ( string s ) {  $ ~int slen = s . length ( ) ;  $ ~long long int num = 0 ;  $ ~for ( int i = 0 ; i < slen ; i ++ ) {  $ ~~num = num * 10 + s [ i ] - '0' ;  $ ~~if ( num > 1000000 ) {  $ ~~~num = 1000000 + 1 ;  $ ~~~break ;  $ ~~}  $ ~}  $ ~return num ;  $ }  $ int main ( ) {  $ ~string s ;  $ ~cin >> s ;  $ ~int slen = s . length ( ) ;  $ ~long long int ans = - 1 ;  $ ~for ( int i = 0 ; i < slen - 2 ; i ++ ) {  $ ~~for ( int j = i + 1 ; j < slen - 1 ; j ++ ) {  $ ~~~string t1 , t2 , t3 ;  $ ~~~t1 = t2 = t3 = "" ;  $ ~~~for ( int k = 0 ; k <= i ; k ++ ) { t1 = t1 + s [ k ] ; }  $ ~~~for ( int k = i + 1 ; k <= j ; k ++ ) { t2 = t2 + s [ k ] ; }  $ ~~~for ( int k = j + 1 ; k < slen ; k ++ ) { t3 = t3 + s [ k ] ; }  $ ~~~bool lead01 = lead0 ( t1 ) ;  $ ~~~bool lead02 = lead0 ( t2 ) ;  $ ~~~bool lead03 = lead0 ( t3 ) ;  $ ~~~long long int num1 = ston ( t1 ) ;  $ ~~~long long int num2 = ston ( t2 ) ;  $ ~~~long long int num3 = ston ( t3 ) ;  $ ~~~if ( lead01 == false && lead02 == false && lead03 == false ) {  $ ~~~~if ( num1 <= 1000000 && num2 <= 1000000 && num3 <= 1000000 ) {  $ ~~~~~if ( num1 + num2 + num3 > ans ) { ans = num1 + num2 + num3 ; }  $ ~~~~}  $ ~~~}  $ ~~}  $ ~}  $ ~cout << ans << endl ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~int a , b , sum = 0 ;  $ ~cin >> a >> b ;  $ ~if ( a < b ) {  $ ~~cout << a ;  $ ~~sum = b - a ;  $ ~} else {  $ ~~cout << b ;  $ ~~sum = a - b ;  $ ~}  $ ~cout << " " << sum / 2 << endl ;  $ }
int main ( ) {  $ ~int n , h , m , num = 0 ;  $ ~cin >> n ;  $ ~cin >> h >> m ;  $ ~while ( 1 ) {  $ ~~if ( h == 07 || h == 17 || m % 10 == 7 )  $ ~~~break ;  $ ~~else {  $ ~~~num ++ ;  $ ~~~m = m - n ;  $ ~~~if ( m < 0 ) {  $ ~~~~m = m + 60 ;  $ ~~~~h -- ;  $ ~~~}  $ ~~~if ( h < 0 ) h = h + 24 ;  $ ~~}  $ ~}  $ ~cout << num << endl ;  $ }
int main ( ) {  $ ~int y ;  $ ~int a , b , c , d ;  $ ~cin >> y ;  $ ~for ( int i = y + 1 ; i <= 9999 ; i ++ ) {  $ ~~a = i / 1000 ;  $ ~~b = i / 100 % 10 ;  $ ~~c = i / 10 % 10 ;  $ ~~d = i % 10 ;  $ ~~if ( a != b && a != c && a != d && b != c && b != d && c != d ) {  $ ~~~cout << i << endl ;  $ ~~~break ;  $ ~~}  $ ~}  $ ~return 0 ;  $ }
int main ( ) {  $ ~int n ;  $ ~cin >> n ;  $ ~int * p = new int [ n ] ;  $ ~int sum = 0 ;  $ ~int max = 0 ;  $ ~for ( int i = 0 ; i < n ; i ++ ) {  $ ~~cin >> p [ i ] ;  $ ~~if ( p [ i ] >= max ) { max = p [ i ] ; }  $ ~~sum += p [ i ] ;  $ ~}  $ ~int s = 0 ;  $ ~for ( int i = 0 ; i < n ; i ++ ) { s = s + ( max - p [ i ] ) ; }  $ ~int count = max ;  $ ~while ( s <= sum ) {  $ ~~s += n ;  $ ~~count ++ ;  $ ~}  $ ~cout << count << '\n' ;  $ ~return 0 ;  $ }
int a [ 100005 ] ;  $ int main ( ) {  $ ~int n , i ;  $ ~while ( cin >> n ) {  $ ~~int m = 0 ;  $ ~~for ( i = 0 ; i < n ; i ++ ) {  $ ~~~cin >> a [ i ] ;  $ ~~~if ( a [ i ] == 0 ) m = 1 ;  $ ~~}  $ ~~sort ( a , a + n ) ;  $ ~~int sum ;  $ ~~sum = unique ( a , a + n ) - a ;  $ ~~sum = sum - m ;  $ ~~cout << sum << endl ;  $ ~}  $ ~return 0 ;  $ }
int main ( ) {  $ ~int n ;  $ ~cin >> n ;  $ ~if ( 1 == n ) {  $ ~~cout << - 1 << endl ;  $ ~} else {  $ ~~cout << n << " " << n << endl ;  $ ~}  $ ~return 0 ;  $ }
int n ;  $ int main ( ) {  $ ~cin >> n ;  $ ~for ( int i = 0 ; i < n ; i ++ , cout << endl )  $ ~~for ( int j = 0 ; j < n ; j ++ )  $ ~~~if ( abs ( i - n / 2 ) + abs ( j - n / 2 ) <= n / 2 )  $ ~~~~cout << "D" ;  $ ~~~else  $ ~~~~cout << "*" ;  $ }
const int maxn = 3e5 + 1 , inf = 1.5e7 + 10 ;  $ int n , gcd , t = 0 ;  $ int a [ maxn ] , b [ inf ] , prime [ inf ] ;  $ int GCD ( int m , int n ) {  $ ~if ( m < n ) swap ( m , n ) ;  $ ~if ( n == 0 )  $ ~~return m ;  $ ~else  $ ~~return GCD ( n , m % n ) ;  $ }  $ int main ( ) {  $ ~cin >> n ;  $ ~for ( int i = 1 ; i <= n ; ++ i ) {  $ ~~cin >> a [ i ] ;  $ ~~gcd = GCD ( a [ i ] , gcd ) ;  $ ~}  $ ~for ( int i = 1 ; i <= n ; ++ i ) ++ b [ a [ i ] / gcd ] ;  $ ~for ( int i = 2 ; i <= inf - 1 ; ++ i ) {  $ ~~if ( ! prime [ i ] ) {  $ ~~~int h = 0 ;  $ ~~~for ( int j = i ; j < inf ; j += i ) h += b [ j ] , prime [ j ] = 1 ;  $ ~~~t = max ( t , h ) ;  $ ~~}  $ ~}  $ ~t ? cout << n - t << endl : cout << - 1 << endl ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~int k , d ;  $ ~cin >> k >> d ;  $ ~if ( k > 1 && d == 0 ) {  $ ~~cout << "No solution\n" ;  $ ~~return 0 ;  $ ~}  $ ~string ans = "" ;  $ ~ans += char ( d + '0' ) ;  $ ~for ( int i = 2 ; i <= k ; i ++ ) ans += "0" ;  $ ~cout << ans << endl ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~string s ;  $ ~cin >> s ;  $ ~int lower = 0 , upper = 0 ;  $ ~for ( int i = 0 ; i < s . size ( ) ; i ++ ) {  $ ~~if ( s [ i ] >= 65 && s [ i ] <= 90 ) {  $ ~~~upper ++ ;  $ ~~} else {  $ ~~~lower ++ ;  $ ~~}  $ ~}  $ ~if ( upper > lower ) {  $ ~~for ( int i = 0 ; i < s . size ( ) ; i ++ ) { s [ i ] = toupper ( s [ i ] ) ; }  $ ~} else {  $ ~~for ( int i = 0 ; i < s . size ( ) ; i ++ ) { s [ i ] = tolower ( s [ i ] ) ; }  $ ~}  $ ~cout << s << endl ;  $ }
const int MAXN = 100000 + 10 ;  $ int a [ MAXN ] ;  $ string s ;  $ int main ( ) {  $ ~int n ;  $ ~cin >> n >> s ;  $ ~bool flag = false ;  $ ~for ( int i = 0 ; i < n ; i ++ ) {  $ ~~a [ s [ i ] - 'a' ] ++ ;  $ ~~if ( a [ s [ i ] - 'a' ] > 1 || n == 1 ) flag = true ;  $ ~}  $ ~flag ? puts ( "Yes" ) : puts ( "No" ) ;  $ ~return 0 ;  $ }
int n , t , x , y = 1 ;  $ int main ( ) {  $ ~cin >> n >> t ;  $ ~for ( int i = 0 ; y < t && i < n - 1 ; ++ i ) {  $ ~~cin >> x ;  $ ~~if ( i + 1 == y ) { y += x ; }  $ ~}  $ ~cout << ( y == t ? "YES\n" : "NO\n" ) ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~long long int n ;  $ ~cin >> n ;  $ ~cout << floor ( ( double ) log10 ( n ) / log10 ( 2 ) + 1 ) << endl ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~int n , a [ 100 ] , s = 0 , d = 0 ;  $ ~cin >> n ;  $ ~for ( int i = 0 ; i < n ; i ++ ) {  $ ~~cin >> a [ i ] ;  $ ~~s += a [ i ] ;  $ ~~if ( a [ i ] > d ) { d = a [ i ] ; }  $ ~}  $ ~s *= 2 ;  $ ~s /= n ;  $ ~s ++ ;  $ ~if ( s < d ) s = d ;  $ ~cout << s << endl ;  $ }
int main ( ) {  $ ~int T ;  $ ~cin >> T ;  $ ~while ( T -- ) {  $ ~~int n ;  $ ~~cin >> n ;  $ ~~int v , l , r ;  $ ~~cin >> v >> l >> r ;  $ ~~int a , b , c ;  $ ~~int k = l ;  $ ~~a = n / v ;  $ ~~b = r / v ;  $ ~~c = l / v ;  $ ~~if ( k % v == 0 ) c -- ;  $ ~~cout << a + c - b << endl ;  $ ~}  $ ~return 0 ;  $ }
string s ;  $ int a , b , n ;  $ int main ( ) {  $ ~cin >> n ;  $ ~cin >> s ;  $ ~for ( int i = 0 ; i < n ; i ++ ) {  $ ~~if ( s [ i ] == '0' )  $ ~~~a ++ ;  $ ~~else  $ ~~~b ++ ;  $ ~}  $ ~cout << abs ( b - a ) << endl ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~int a , b , ans , n , c ;  $ ~cin >> n ;  $ ~while ( n != 0 ) {  $ ~~ans = 0 ;  $ ~~cin >> a >> b ;  $ ~~while ( a > 0 && b > 0 ) {  $ ~~~if ( a >= b ) {  $ ~~~~c = ( a / b ) ;  $ ~~~~a %= b ;  $ ~~~} else {  $ ~~~~c = ( b / a ) ;  $ ~~~~b %= a ;  $ ~~~}  $ ~~~ans += c ;  $ ~~}  $ ~~cout << ans << endl ;  $ ~~n -- ;  $ ~}  $ }
int main ( ) {  $ ~int max_sections , n_of_nuts , divis , max_nuts_in_sec ;  $ ~cin >> max_sections >> n_of_nuts >> divis >> max_nuts_in_sec ;  $ ~int ans = 0 ;  $ ~while ( n_of_nuts > 0 ) {  $ ~~ans ++ ;  $ ~~int newnuts = max_nuts_in_sec * ( min ( max_sections , divis + 1 ) ) ;  $ ~~divis -= min ( max_sections , divis + 1 ) - 1 ;  $ ~~n_of_nuts -= newnuts ;  $ ~}  $ ~cout << ans << endl ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~int n ;  $ ~cin >> n ;  $ ~if ( n % 2 )  $ ~~cout << "1\n" ;  $ ~else  $ ~~cout << "0\n" ;  $ }
int main ( ) {  $ ~int maxn = 0 , d , n , sum = 0 ;  $ ~char t ;  $ ~cin >> n >> d ;  $ ~while ( d -- ) {  $ ~~bool flag = false ;  $ ~~for ( int i = 1 ; i <= n ; i ++ ) {  $ ~~~cin >> t ;  $ ~~~if ( t == '0' ) flag = true ;  $ ~~}  $ ~~if ( flag ) {  $ ~~~sum ++ ;  $ ~~~maxn = max ( sum , maxn ) ;  $ ~~} else  $ ~~~sum = 0 ;  $ ~}  $ ~cout << maxn << endl ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~int n ;  $ ~while ( cin >> n ) {  $ ~~cout << "I hate " ;  $ ~~;  $ ~~for ( int i = 2 ; i <= n ; i ++ ) {  $ ~~~cout << "that I " ;  $ ~~~if ( i % 2 )  $ ~~~~cout << "hate " ;  $ ~~~else  $ ~~~~cout << "love " ;  $ ~~}  $ ~~cout << "it" << endl ;  $ ~}  $ ~return 0 ;  $ }
int main ( ) {  $ ~string s , y ;  $ ~string S , Y ;  $ ~cin >> s >> y ;  $ ~S = string ( y . size ( ) , '0' ) + s ;  $ ~Y = string ( s . size ( ) , '0' ) + y ;  $ ~if ( Y > S )  $ ~~cout << "<" << endl ;  $ ~else if ( S > Y )  $ ~~cout << ">" << endl ;  $ ~else {  $ ~~cout << "=" << endl ;  $ ~}  $ ~return 0 ;  $ }
const int N = 1e3 + 5 ;  $ int n , arr [ N ] , cnt1 ;  $ int main ( ) {  $ ~cin >> n ;  $ ~for ( int i = 0 ; i < n ; i ++ ) {  $ ~~cin >> arr [ i ] ;  $ ~~if ( arr [ i ] ) cnt1 ++ ;  $ ~}  $ ~for ( int i = 0 ; i < n - 2 ; i ++ )  $ ~~if ( arr [ i ] && ! arr [ i + 1 ] && arr [ i + 2 ] ) cnt1 ++ ;  $ ~cout << cnt1 << endl ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~int a , b , c , d , e , f = 0 , g = 0 , h ;  $ ~cin >> a ;  $ ~while ( a -- ) {  $ ~~cin >> b >> c ;  $ ~~d = 6 - b ;  $ ~~e = 6 - c ;  $ ~~if ( d > e )  $ ~~~f ++ ;  $ ~~else if ( d < e )  $ ~~~g ++ ;  $ ~}  $ ~if ( f < g )  $ ~~cout << "Mishka" << endl ;  $ ~else if ( f > g )  $ ~~cout << "Chris" << endl ;  $ ~else  $ ~~cout << "Friendship is magic!^^" << endl ;  $ }
void solve ( ) {  $ ~long long n ;  $ ~cin >> n ;  $ ~if ( n != 180 && n != 0 ) {  $ ~~if ( 360 % ( 180 - n ) == 0 ) {  $ ~~~cout << "YES" << endl ;  $ ~~~return ;  $ ~~}  $ ~~cout << "NO" << endl ;  $ ~} else {  $ ~~cout << "NO" << endl ;  $ ~}  $ }  $ int main ( ) {  $ ~long long t = 1 ;  $ ~cin >> t ;  $ ~while ( t -- ) { solve ( ) ; }  $ ~return 0 ;  $ }
int main ( ) {  $ ~int n , h ;  $ ~cin >> n >> h ;  $ ~int ara [ n ] ;  $ ~for ( int i = 0 ; i < n ; i ++ ) { cin >> ara [ i ] ; }  $ ~int cnt = 0 ;  $ ~for ( int i = 0 , j = 1 ; j < n ; i ++ , j ++ ) {  $ ~~if ( ( ara [ j ] - ara [ i ] ) <= h ) {  $ ~~~cnt ++ ;  $ ~~} else {  $ ~~~cnt = 0 ;  $ ~~}  $ ~}  $ ~cnt ++ ;  $ ~cout << cnt << endl ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~int n ;  $ ~cin >> n ;  $ ~vector < int > v ;  $ ~int x ;  $ ~for ( int i = 0 ; i < n ; ++ i ) { cin >> x , v . push_back ( x ) ; }  $ ~int ans = 0 ;  $ ~int now = - 1 , cnt = 0 ;  $ ~for ( int i = 0 ; i < n ; ++ i ) {  $ ~~if ( v [ i ] > now ) {  $ ~~~++ cnt , now = v [ i ] ;  $ ~~} else {  $ ~~~ans = max ( ans , cnt ) ;  $ ~~~cnt = 1 , now = v [ i ] ;  $ ~~}  $ ~}  $ ~ans = max ( ans , cnt ) ;  $ ~cout << ans << '\n' ;  $ }
int main ( ) {  $ ~int n , x , mx = 0 ;  $ ~cin >> n ;  $ ~int cnt0 = 0 , cnt1 = 0 ;  $ ~for ( int i = 0 ; i < n ; ++ i ) {  $ ~~cin >> x ;  $ ~~if ( x == 1 ) ++ cnt1 ;  $ ~~if ( x == 0 ) {  $ ~~~++ cnt0 ;  $ ~~~if ( cnt0 > mx ) mx = cnt0 ;  $ ~~} else if ( cnt0 )  $ ~~~-- cnt0 ;  $ ~}  $ ~if ( mx == 0 ) -- mx ;  $ ~cout << mx + cnt1 << '\n' ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~int i ;  $ ~string s1 , s2 ;  $ ~cin >> s1 >> s2 ;  $ ~for ( i = 0 ; i < s1 . size ( ) ; i ++ ) {  $ ~~s1 [ i ] = tolower ( s1 [ i ] ) ;  $ ~~s2 [ i ] = tolower ( s2 [ i ] ) ;  $ ~}  $ ~if ( s1 == s2 )  $ ~~cout << "0" << endl ;  $ ~else {  $ ~~for ( i = 0 ; i < s1 . size ( ) ; i ++ ) {  $ ~~~if ( s1 [ i ] < s2 [ i ] ) {  $ ~~~~cout << "-1" << endl ;  $ ~~~~break ;  $ ~~~} else if ( s1 [ i ] > s2 [ i ] ) {  $ ~~~~cout << "1" << endl ;  $ ~~~~break ;  $ ~~~}  $ ~~}  $ ~}  $ ~return 0 ;  $ }
int main ( ) {  $ ~int n ;  $ ~cin >> n ;  $ ~vector < int > monedas ;  $ ~for ( int i = 0 ; i < n ; i ++ ) {  $ ~~int aux ;  $ ~~cin >> aux ;  $ ~~monedas . push_back ( aux ) ;  $ ~}  $ ~sort ( monedas . begin ( ) , monedas . end ( ) ) ;  $ ~int rep = 1 ;  $ ~int aux = 1 ;  $ ~for ( int i = 1 ; i < monedas . size ( ) ; i ++ ) {  $ ~~if ( monedas [ i ] != monedas [ i - 1 ] ) {  $ ~~~if ( aux > rep ) { rep = aux ; }  $ ~~~aux = 1 ;  $ ~~} else {  $ ~~~aux ++ ;  $ ~~}  $ ~}  $ ~if ( aux > rep ) rep = aux ;  $ ~cout << rep << endl ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~long long n ;  $ ~long long ans ;  $ ~while ( cin >> n ) {  $ ~~if ( n == 1 )  $ ~~~ans = 1 ;  $ ~~else if ( n == 2 )  $ ~~~ans = 2 ;  $ ~~else if ( n == 3 )  $ ~~~ans = 6 ;  $ ~~else if ( n & 1 )  $ ~~~ans = n * ( n - 1 ) * ( n - 2 ) ;  $ ~~else {  $ ~~~if ( n % 3 != 0 )  $ ~~~~ans = n * ( n - 1 ) * ( n - 3 ) ;  $ ~~~else  $ ~~~~ans = ( n - 1 ) * ( n - 2 ) * ( n - 3 ) ;  $ ~~}  $ ~~cout << ans << endl ;  $ ~}  $ ~return 0 ;  $ }
int main ( ) {  $ ~int q ;  $ ~cin >> q ;  $ ~while ( q -- ) {  $ ~~int n ;  $ ~~cin >> n ;  $ ~~string str ;  $ ~~cin >> str ;  $ ~~if ( n == 2 ) {  $ ~~~char ch = str [ 0 ] ;  $ ~~~char ch2 = str [ 1 ] ;  $ ~~~if ( ch2 <= ch ) {  $ ~~~~cout << "NO" << endl ;  $ ~~~~continue ;  $ ~~~}  $ ~~~cout << "YES" << endl ;  $ ~~~cout << 2 << endl ;  $ ~~~cout << ch << " " << ch2 << endl ;  $ ~~~continue ;  $ ~~} else {  $ ~~~cout << "YES" << endl ;  $ ~~~cout << 2 << endl ;  $ ~~~string s = "" ;  $ ~~~for ( int i = 1 ; i < n ; i ++ ) { s += str [ i ] ; }  $ ~~~cout << str [ 0 ] << " " << s << endl ;  $ ~~}  $ ~}  $ ~return 0 ;  $ }
const int maxN = 0 ;  $ int q ;  $ int main ( ) {  $ ~cin >> q ;  $ ~while ( q -- ) {  $ ~~int n ;  $ ~~string s ;  $ ~~cin >> n >> s ;  $ ~~if ( n == 2 ) {  $ ~~~if ( s [ 0 ] < s [ 1 ] ) {  $ ~~~~cout << "YES" << endl << 2 << endl ;  $ ~~~~cout << s [ 0 ] << " " << s [ 1 ] << endl ;  $ ~~~} else  $ ~~~~cout << "NO" << endl ;  $ ~~} else {  $ ~~~cout << "YES" << endl << 2 << endl ;  $ ~~~cout << s [ 0 ] << " " << s . substr ( 1 ) << endl ;  $ ~~}  $ ~}  $ ~return 0 ;  $ }
int main ( ) {  $ ~vector < long long int > vs ( 3 ) ;  $ ~for ( long long int i = 0 ; i < 3 ; i ++ ) cin >> vs [ i ] ;  $ ~sort ( vs . begin ( ) , vs . end ( ) ) ;  $ ~long long int ans = 0 ;  $ ~if ( vs [ 2 ] >= vs [ 0 ] + vs [ 1 ] ) ans = ( vs [ 2 ] + 1 ) - ( vs [ 0 ] + vs [ 1 ] ) ;  $ ~cout << ans << '\n' ;  $ ~return 0 ;  $ }
long long const M = 5e5 + 10 , M2 = 1e7 + 10 , mod = 1e9 + 7 , inf = 1e18 + 10 ;  $ long long n , m , a [ M ] , siz ;  $ long long fans ( long long x , long long t ) {  $ ~long long res = t / siz ;  $ ~long long hlp = siz * res ;  $ ~long long rim = t % siz ;  $ ~if ( x - 1 >= rim ) {  $ ~~return x - 1 + hlp ;  $ ~} else if ( n - 1 + n - x >= rim )  $ ~~return hlp + ( n - 1 + n - x ) ;  $ ~else  $ ~~return fans ( x + siz , t ) ;  $ }  $ int main ( ) {  $ ~cin >> m >> n ;  $ ~siz = 2 * n - 2 ;  $ ~while ( m -- ) {  $ ~~long long s , f , t ;  $ ~~cin >> s >> f >> t ;  $ ~~if ( s == f ) {  $ ~~~cout << t << endl ;  $ ~~~continue ;  $ ~~}  $ ~~t = fans ( s , t ) ;  $ ~~t = fans ( f , t ) ;  $ ~~cout << t << endl ;  $ ~}  $ }
int gcd ( int a , int b ) {  $ ~if ( b == 0 )  $ ~~return a ;  $ ~else  $ ~~gcd ( b , a % b ) ;  $ }  $ int main ( ) {  $ ~int x , y , z ;  $ ~while ( cin >> x >> y >> z ) {  $ ~~int dif1 = abs ( x - y ) + abs ( x - z ) ;  $ ~~int dif2 = abs ( y - x ) + abs ( y - z ) ;  $ ~~int dif3 = abs ( z - x ) + abs ( z - y ) ;  $ ~~int mi = min ( dif1 , dif2 ) ;  $ ~~mi = min ( mi , dif3 ) ;  $ ~~cout << mi << endl ;  $ ~}  $ }
int main ( ) {  $ ~int n ;  $ ~cin >> n ;  $ ~int a = n / 36 ;  $ ~int b = ( ( n % 36 + 1 ) / 3 ) ;  $ ~if ( b == 12 ) {  $ ~~a ++ ;  $ ~~b = 0 ;  $ ~}  $ ~cout << a << " " << b << endl ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~int n ;  $ ~cin >> n ;  $ ~vector < int > a ( n ) ;  $ ~vector < int > cnt ( 1000 , 0 ) ;  $ ~for ( int i = 0 ; i < n ; i ++ ) {  $ ~~cin >> a [ i ] ;  $ ~~cnt [ a [ i ] ] ++ ;  $ ~}  $ ~cout << * max_element ( cnt . begin ( ) , cnt . end ( ) ) << endl ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~long long t , a , b ;  $ ~cin >> t ;  $ ~while ( t -- ) {  $ ~~cin >> a >> b ;  $ ~~for ( long long i = 1 ; i <= b - a ; i *= 2 ) {  $ ~~~if ( ! ( a & i ) ) { a += i ; }  $ ~~}  $ ~~cout << a << endl ;  $ ~}  $ }
int main ( ) {  $ ~int n ;  $ ~cin >> n ;  $ ~long long num [ n ] ;  $ ~for ( int i = 0 ; i < n ; i ++ ) { cin >> num [ i ] ; }  $ ~int len = 1 , maxl = 1 ;  $ ~for ( int i = 1 ; i < n ; i ++ ) {  $ ~~if ( num [ i ] > num [ i - 1 ] ) {  $ ~~~len ++ ;  $ ~~} else  $ ~~~len = 1 ;  $ ~~if ( len > maxl ) maxl = len ;  $ ~}  $ ~cout << maxl << "\n" ;  $ }
int main ( ) {  $ ~int n , m , k = 1 ;  $ ~cin >> n >> m ;  $ ~for ( int i = 1 ; i <= n ; i ++ ) {  $ ~~if ( i % 2 == 1 )  $ ~~~for ( int i = 0 ; i < m ; i ++ ) cout << "#" ;  $ ~~else if ( i % 2 == 0 && k % 2 == 1 ) {  $ ~~~for ( int i = 0 ; i < m - 1 ; i ++ ) cout << "." ;  $ ~~~k ++ ;  $ ~~~cout << "#" ;  $ ~~} else {  $ ~~~cout << "#" ;  $ ~~~for ( int i = 0 ; i < m - 1 ; i ++ ) cout << "." ;  $ ~~~k ++ ;  $ ~~}  $ ~~cout << endl ;  $ ~}  $ }
int a [ 110 ] ;  $ int main ( ) {  $ ~int n , m , mx , indx ;  $ ~cin >> n >> m ;  $ ~while ( m -- ) {  $ ~~mx = - 999 ;  $ ~~for ( int i = 1 ; i <= n ; i ++ ) {  $ ~~~int x ;  $ ~~~cin >> x ;  $ ~~~if ( x > mx ) {  $ ~~~~mx = x ;  $ ~~~~indx = i ;  $ ~~~}  $ ~~}  $ ~~a [ indx ] ++ ;  $ ~}  $ ~mx = - 999 ;  $ ~for ( int i = 1 ; i <= n ; i ++ ) {  $ ~~if ( a [ i ] > mx ) {  $ ~~~mx = a [ i ] ;  $ ~~~indx = i ;  $ ~~}  $ ~}  $ ~cout << indx << "\n" ;  $ ~return 0 ;  $ }
int n , i , rez , sum , sum1 , Dp [ 2 ] [ 2 ] [ 205 ] , A [ 100005 ] , cr , j ;  $ void f ( int & a , int b ) {  $ ~a = a + b ;  $ ~if ( a >= 998244353 ) a -= 998244353 ;  $ }  $ int main ( ) {  $ ~cin >> n ;  $ ~for ( i = 1 ; i <= n ; i ++ ) cin >> A [ i ] ;  $ ~if ( A [ 1 ] != - 1 )  $ ~~Dp [ 1 ] [ 1 ] [ A [ 1 ] ] = 1 ;  $ ~else  $ ~~for ( i = 1 ; i <= 200 ; i ++ ) Dp [ 1 ] [ 1 ] [ i ] = 1 ;  $ ~cr = 1 ;  $ ~for ( i = 2 ; i <= n ; i ++ ) {  $ ~~cr = 1 - cr ;  $ ~~if ( A [ i ] != - 1 ) {  $ ~~~for ( j = 1 ; j <= 200 ; j ++ ) {  $ ~~~~if ( A [ i ] < j ) f ( Dp [ cr ] [ 0 ] [ A [ i ] ] , Dp [ 1 - cr ] [ 0 ] [ j ] ) ;  $ ~~~~if ( A [ i ] == j ) {  $ ~~~~~f ( Dp [ cr ] [ 0 ] [ A [ i ] ] , Dp [ 1 - cr ] [ 0 ] [ j ] ) ;  $ ~~~~~f ( Dp [ cr ] [ 0 ] [ A [ i ] ] , Dp [ 1 - cr ] [ 1 ] [ j ] ) ;  $ ~~~~}  $ ~~~~if ( A [ i ] > j ) {  $ ~~~~~f ( Dp [ cr ] [ 1 ] [ A [ i ] ] , Dp [ 1 - cr ] [ 0 ] [ j ] ) ;  $ ~~~~~f ( Dp [ cr ] [ 1 ] [ A [ i ] ] , Dp [ 1 - cr ] [ 1 ] [ j ] ) ;  $ ~~~~}  $ ~~~~Dp [ 1 - cr ] [ 1 ] [ j ] = Dp [ 1 - cr ] [ 0 ] [ j ] = 0 ;  $ ~~~}  $ ~~} else {  $ ~~~sum = 0 ;  $ ~~~for ( j = 1 ; j <= 200 ; j ++ ) f ( sum , Dp [ 1 - cr ] [ 0 ] [ j ] ) ;  $ ~~~sum1 = 0 ;  $ ~~~for ( j = 1 ; j <= 200 ; j ++ ) {  $ ~~~~f ( Dp [ cr ] [ 0 ] [ j ] , sum ) ;  $ ~~~~f ( Dp [ cr ] [ 0 ] [ j ] , Dp [ 1 - cr ] [ 1 ] [ j ] ) ;  $ ~~~~f ( sum , 998244353 - Dp [ 1 - cr ] [ 0 ] [ j ] ) ;  $ ~~~~f ( Dp [ cr ] [ 1 ] [ j ] , sum1 ) ;  $ ~~~~f ( sum1 , Dp [ 1 - cr ] [ 1 ] [ j ] ) ;  $ ~~~~f ( sum1 , Dp [ 1 - cr ] [ 0 ] [ j ] ) ;  $ ~~~~Dp [ 1 - cr ] [ 0 ] [ j ] = Dp [ 1 - cr ] [ 1 ] [ j ] = 0 ;  $ ~~~}  $ ~~}  $ ~}  $ ~for ( i = 1 ; i <= 200 ; i ++ ) f ( rez , Dp [ cr ] [ 0 ] [ i ] ) ;  $ ~cout << rez << "\n" ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~int n , i , j ;  $ ~cin >> n ;  $ ~for ( i = n / 2 ; i >= 1 ; i -- ) {  $ ~~for ( j = 1 ; j <= i ; j ++ ) { cout << "*" ; }  $ ~~for ( j = 1 ; j <= 2 * ( n / 2 - i ) + 1 ; j ++ ) { cout << "D" ; }  $ ~~for ( j = 1 ; j <= i ; j ++ ) { cout << "*" ; }  $ ~~cout << "\n" ;  $ ~}  $ ~for ( i = 1 ; i <= n ; i ++ ) { cout << "D" ; }  $ ~cout << "\n" ;  $ ~for ( i = 1 ; i <= n / 2 ; i ++ ) {  $ ~~for ( j = 1 ; j <= i ; j ++ ) { cout << "*" ; }  $ ~~for ( j = 1 ; j <= 2 * ( n / 2 - i ) + 1 ; j ++ ) { cout << "D" ; }  $ ~~for ( j = 1 ; j <= i ; j ++ ) { cout << "*" ; }  $ ~~cout << "\n" ;  $ ~}  $ ~return 0 ;  $ }
long long int x ;  $ int main ( ) {  $ ~cin >> x ;  $ ~if ( x <= 1 ) {  $ ~~cout << "-1\n" ;  $ ~} else {  $ ~~cout << x << ' ' << x << '\n' ;  $ ~}  $ }
int main ( ) {  $ ~long long n , k ;  $ ~cin >> n >> k ;  $ ~long long a [ n ] ;  $ ~for ( int i = 0 ; i < n ; i ++ ) cin >> a [ i ] ;  $ ~long long cnt = 0 ;  $ ~long long i = 0 ;  $ ~while ( a [ i ] <= k ) {  $ ~~cnt ++ ;  $ ~~;  $ ~~i ++ ;  $ ~}  $ ~long long j = n - 1 ;  $ ~while ( a [ j ] <= k && i < j ) {  $ ~~cnt ++ ;  $ ~~;  $ ~~j -- ;  $ ~}  $ ~cout << cnt << endl ;  $ }
char arr1 [ 103 ] ;  $ char arr2 [ 103 ] ;  $ int main ( ) {  $ ~cin >> arr1 >> arr2 ;  $ ~for ( int i = 0 ; i < strlen ( arr1 ) ; i ++ ) {  $ ~~arr1 [ i ] = toupper ( arr1 [ i ] ) ;  $ ~~arr2 [ i ] = toupper ( arr2 [ i ] ) ;  $ ~}  $ ~int ret = strcmp ( arr1 , arr2 ) ;  $ ~if ( ret < 0 )  $ ~~cout << - 1 << endl ;  $ ~else if ( ret == 0 )  $ ~~cout << 0 << endl ;  $ ~else  $ ~~cout << 1 << endl ;  $ ~return 0 ;  $ }
long long n ;  $ int main ( ) {  $ ~cin >> n ;  $ ~long long m = n ;  $ ~for ( long long i = 1 ; i <= m ; i ++ ) {  $ ~~if ( n > i )  $ ~~~n -= i ;  $ ~~else {  $ ~~~cout << n << endl ;  $ ~~~break ;  $ ~~}  $ ~}  $ ~return 0 ;  $ }
int main ( ) {  $ ~int t , s , q , c = 0 ;  $ ~cin >> t >> s >> q ;  $ ~while ( s < t ) {  $ ~~c ++ ;  $ ~~s *= q ;  $ ~~;  $ ~}  $ ~cout << c << endl ;  $ ~return 0 ;  $ }
int n ;  $ int is_x1 ( int a , int b ) {  $ ~if ( b == 0 && a >= 0 && a <= n ) return 1 ;  $ ~return 0 ;  $ }  $ int is_x2 ( int a , int b ) {  $ ~if ( b == n && a >= 0 && a <= n ) return 3 ;  $ ~return 0 ;  $ }  $ int is_y1 ( int b , int a ) {  $ ~if ( b == 0 && a >= 0 && a <= n ) return 4 ;  $ ~return 0 ;  $ }  $ int is_y2 ( int b , int a ) {  $ ~if ( b == n && a >= 0 && a <= n ) return 2 ;  $ ~return 0 ;  $ }  $ int main ( ) {  $ ~int t ;  $ ~int x1 , x2 , y1 , y2 , j ;  $ ~cin >> n >> x1 >> y1 >> x2 >> y2 ;  $ ~int value1 , value2 , val = 0 , a , b ;  $ ~for ( int i = 0 ; i < 2 ; i ++ ) {  $ ~~if ( i == 0 ) {  $ ~~~a = x1 , b = y1 ;  $ ~~} else {  $ ~~~a = x2 , b = y2 ;  $ ~~}  $ ~~j = 1 ;  $ ~~while ( ! val ) {  $ ~~~if ( j == 1 )  $ ~~~~val = is_x1 ( a , b ) ;  $ ~~~else if ( j == 2 )  $ ~~~~val = is_y1 ( a , b ) ;  $ ~~~else if ( j == 3 )  $ ~~~~val = is_x2 ( a , b ) ;  $ ~~~else if ( j == 4 )  $ ~~~~val = is_y2 ( a , b ) ;  $ ~~~j ++ ;  $ ~~}  $ ~~if ( i == 0 )  $ ~~~value1 = val ;  $ ~~else  $ ~~~value2 = val ;  $ ~~val = 0 ;  $ ~}  $ ~if ( value1 == value2 ) {  $ ~~if ( value1 == 1 || value1 == 3 ) {  $ ~~~cout << abs ( x1 - x2 ) << "\n" ;  $ ~~} else  $ ~~~cout << abs ( y1 - y2 ) << "\n" ;  $ ~} else if ( ( value1 == 1 && value2 == 2 ) || ( value1 == 2 && value2 == 1 ) ) {  $ ~~if ( value1 == 1 )  $ ~~~cout << ( n - x1 ) + y2 << "\n" ;  $ ~~else  $ ~~~cout << ( n - x2 ) + y1 << "\n" ;  $ ~} else if ( ( value1 == 1 && value2 == 4 ) || ( value1 == 4 && value2 == 1 ) ) {  $ ~~if ( value1 == 1 )  $ ~~~cout << x1 + y2 << "\n" ;  $ ~~else  $ ~~~cout << x2 + y1 << "\n" ;  $ ~} else if ( ( value1 == 2 && value2 == 3 ) || ( value1 == 3 && value2 == 2 ) ) {  $ ~~if ( value1 == 2 )  $ ~~~cout << ( n - y1 ) + ( n - x2 ) << "\n" ;  $ ~~else  $ ~~~cout << ( n - y2 ) + ( n - x1 ) << "\n" ;  $ ~} else if ( ( value1 == 3 && value2 == 4 ) || ( value1 == 4 && value2 == 3 ) ) {  $ ~~if ( value1 == 3 )  $ ~~~cout << x1 + n - y2 << "\n" ;  $ ~~else  $ ~~~cout << x2 + n - y1 << "\n" ;  $ ~} else if ( ( value1 == 1 && value2 == 3 ) || ( value1 == 3 && value2 == 1 ) ) {  $ ~~cout << ( min ( x1 + n + x2 , n - x1 + n + n - x2 ) ) << "\n" ;  $ ~} else if ( ( value1 == 2 && value2 == 4 ) || ( value1 == 4 && value2 == 2 ) ) {  $ ~~cout << ( min ( y1 + n + y2 , n - y1 + n + n - y2 ) ) << "\n" ;  $ ~}  $ ~return 0 ;  $ }
long long x , y ;  $ long long exgcd ( long long a , long long b ) {  $ ~if ( b == 0 ) {  $ ~~x = 1 ;  $ ~~y = 0 ;  $ ~~return a ;  $ ~}  $ ~long long d = exgcd ( b , a % b ) ;  $ ~long long t = x ;  $ ~x = y ;  $ ~y = t - a / b * y ;  $ ~return d ;  $ }  $ int main ( ) {  $ ~long long m , h1 , a1 , x1 , y1 , h2 , a2 , x2 , y2 ;  $ ~long long p1 , p2 , q1 , q2 ;  $ ~while ( cin >> m >> h1 >> a1 >> x1 >> y1 >> h2 >> a2 >> x2 >> y2 ) {  $ ~~p1 = p2 = q1 = q2 = 0 ;  $ ~~for ( long long i = 1 ; i <= 2 * m ; i ++ ) {  $ ~~~h1 = ( h1 * x1 + y1 ) % m ;  $ ~~~if ( h1 == a1 ) {  $ ~~~~if ( p1 == 0 )  $ ~~~~~p1 = i ;  $ ~~~~else if ( q1 == 0 ) {  $ ~~~~~q1 = i - p1 ;  $ ~~~~~break ;  $ ~~~~}  $ ~~~}  $ ~~}  $ ~~for ( long long i = 1 ; i <= 2 * m ; i ++ ) {  $ ~~~h2 = ( h2 * x2 + y2 ) % m ;  $ ~~~if ( h2 == a2 ) {  $ ~~~~if ( p2 == 0 )  $ ~~~~~p2 = i ;  $ ~~~~else if ( q2 == 0 ) {  $ ~~~~~q2 = i - p2 ;  $ ~~~~~break ;  $ ~~~~}  $ ~~~}  $ ~~}  $ ~~long long d = exgcd ( q1 , - q2 ) ;  $ ~~long long c = p2 - p1 ;  $ ~~if ( d == 0 ) {  $ ~~~puts ( "-1" ) ;  $ ~~~continue ;  $ ~~}  $ ~~if ( c % d ) {  $ ~~~puts ( "-1" ) ;  $ ~~~continue ;  $ ~~}  $ ~~if ( p1 == 0 || p2 == 0 ) {  $ ~~~puts ( "-1" ) ;  $ ~~~continue ;  $ ~~}  $ ~~if ( q2 == 0 && q1 == 0 && p1 != p2 ) {  $ ~~~puts ( "-1" ) ;  $ ~~~continue ;  $ ~~}  $ ~~if ( ( q2 == 0 && p2 - p1 < 0 ) || ( q1 == 0 && p1 - p2 < 0 ) ) {  $ ~~~puts ( "-1" ) ;  $ ~~~continue ;  $ ~~}  $ ~~long long k = c / d ;  $ ~~x *= k ;  $ ~~y *= k ;  $ ~~if ( d < 0 ) d = - d ;  $ ~~if ( x < 0 || y < 0 ) {  $ ~~~while ( 1 ) {  $ ~~~~x += q2 / d ;  $ ~~~~y += q1 / d ;  $ ~~~~if ( x >= 0 && y >= 0 ) break ;  $ ~~~}  $ ~~}  $ ~~if ( x > 0 && y > 0 ) {  $ ~~~while ( 1 ) {  $ ~~~~x -= q2 / d ;  $ ~~~~y -= q1 / d ;  $ ~~~~if ( x < 0 || y < 0 ) {  $ ~~~~~x += q2 / d ;  $ ~~~~~y += q1 / d ;  $ ~~~~~break ;  $ ~~~~}  $ ~~~}  $ ~~}  $ ~~long long ans = x * q1 + p1 ;  $ ~~cout << ans << endl ;  $ ~}  $ ~return 0 ;  $ }
int main ( ) {  $ ~int n , reqNo , waysCount ;  $ ~cin >> n ;  $ ~reqNo = n - 10 ;  $ ~if ( ( reqNo >= 1 && reqNo <= 9 ) || reqNo == 11 ) {  $ ~~waysCount = 4 ;  $ ~} else if ( reqNo == 10 ) {  $ ~~waysCount = 15 ;  $ ~} else {  $ ~~waysCount = 0 ;  $ ~}  $ ~cout << waysCount << endl ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~int n , i , t ;  $ ~cin >> n ;  $ ~for ( i = 0 ; i < n ; ++ i ) {  $ ~~cin >> t ;  $ ~~if ( 360 % ( 180 - t ) == 0 )  $ ~~~cout << "YES"  $ ~~~~<< "\n" ;  $ ~~else  $ ~~~cout << "NO"  $ ~~~~<< "\n" ;  $ ~}  $ }
const int maxn = 105 ;  $ int n ;  $ int a ;  $ int t = 3 ;  $ int main ( ) {  $ ~cin >> n ;  $ ~for ( int i = 1 ; i <= n ; i ++ ) {  $ ~~cin >> a ;  $ ~~if ( a == t ) {  $ ~~~cout << "NO" << endl ;  $ ~~~return 0 ;  $ ~~}  $ ~~if ( t == 3 && a == 1 ) {  $ ~~~t = 2 ;  $ ~~~continue ;  $ ~~}  $ ~~if ( t == 3 && a == 2 ) {  $ ~~~t = 1 ;  $ ~~~continue ;  $ ~~}  $ ~~if ( t == 2 && a == 1 ) {  $ ~~~t = 3 ;  $ ~~~continue ;  $ ~~}  $ ~~if ( t == 2 && a == 3 ) {  $ ~~~t = 1 ;  $ ~~~continue ;  $ ~~}  $ ~~if ( t == 1 && a == 2 ) {  $ ~~~t = 3 ;  $ ~~~continue ;  $ ~~}  $ ~~if ( t == 1 && a == 3 ) {  $ ~~~t = 2 ;  $ ~~~continue ;  $ ~~}  $ ~}  $ ~cout << "YES" << endl ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~cout << "Karen" << endl ;  $ ~return 0 ;  $ }
const int maxn = 100005 ;  $ int main ( ) {  $ ~int l , r , a ;  $ ~cin >> l >> r >> a ;  $ ~while ( a > 0 ) {  $ ~~if ( l < r )  $ ~~~++ l ;  $ ~~else  $ ~~~++ r ;  $ ~~-- a ;  $ ~}  $ ~cout << min ( l , r ) * 2 << endl ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~int k , r ;  $ ~cin >> k >> r ;  $ ~int flag ;  $ ~for ( int i = 1 ; i <= 1000 ; i ++ ) {  $ ~~flag = k * i ;  $ ~~if ( flag % 10 == r || flag % 10 == 0 ) {  $ ~~~cout << i << endl ;  $ ~~~return 0 ;  $ ~~}  $ ~~flag = k ;  $ ~}  $ ~return 0 ;  $ }
int n , m , i , j , k , mi , ma ;  $ int a [ 10000 ] ;  $ string s ;  $ int main ( ) {  $ ~cin >> n >> m >> mi >> ma ;  $ ~for ( i = 1 ; i <= m ; i ++ ) cin >> a [ i ] ;  $ ~sort ( a + 1 , a + m + 1 ) ;  $ ~if ( ma > a [ m ] ) j ++ ;  $ ~if ( mi < a [ 1 ] ) j ++ ;  $ ~if ( ma < a [ m ] || mi > a [ 1 ] ) {  $ ~~cout << "Incorrect" << endl ;  $ ~~return 0 ;  $ ~}  $ ~if ( n - m >= j ) {  $ ~~cout << "Correct" << endl ;  $ ~} else  $ ~~cout << "Incorrect" << endl ;  $ }
string s ;  $ int main ( ) {  $ ~cin >> s ;  $ ~int l = s . length ( ) ;  $ ~for ( int i = 0 ; i < l ; i ++ ) {  $ ~~for ( int j = 0 ; j < 3 ; j ++ ) {  $ ~~~for ( int k = 0 ; k < 3 ; k ++ ) {  $ ~~~~for ( int p = 0 ; p < 3 ; p ++ ) {  $ ~~~~~if ( j != k && j != p && k != p ) {  $ ~~~~~~char c1 = 'A' + j ;  $ ~~~~~~char c2 = 'A' + k ;  $ ~~~~~~char c3 = 'A' + p ;  $ ~~~~~~if ( s [ i ] == c1 && s [ i + 1 ] == c2 && s [ i + 2 ] == c3 ) {  $ ~~~~~~~cout << "Yes" << endl ;  $ ~~~~~~~return 0 ;  $ ~~~~~~}  $ ~~~~~}  $ ~~~~}  $ ~~~}  $ ~~}  $ ~}  $ ~cout << "No" << endl ;  $ ~return 0 ;  $ }
int a [ 200010 ] ;  $ int main ( ) {  $ ~int n ;  $ ~int t ;  $ ~while ( cin >> n ) {  $ ~~for ( int i = 0 ; i < n ; ++ i ) { cin >> a [ i ] ; }  $ ~~sort ( a , a + n ) ;  $ ~~int m = ( n - 2 ) / 2 , minn = INT_MAX ;  $ ~~for ( int i = 0 ; i <= m ; i ++ ) { minn = min ( minn , a [ i + m + 1 ] - a [ i ] ) ; }  $ ~~cout << minn << endl ;  $ ~}  $ ~return 0 ;  $ }
int main ( ) {  $ ~int n , m ;  $ ~cin >> n >> m ;  $ ~string txt ;  $ ~cin >> txt ;  $ ~for ( int i = 0 ; i < m ; i ++ ) {  $ ~~int st , en ;  $ ~~char old , update ;  $ ~~cin >> st >> en >> old >> update ;  $ ~~for ( int j = st - 1 ; j < en ; j ++ ) {  $ ~~~if ( txt [ j ] == old ) txt [ j ] = update ;  $ ~~}  $ ~}  $ ~cout << txt << endl ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~long long n , a [ 100010 ] ;  $ ~cin >> n ;  $ ~long long mn = 1999999999 ;  $ ~for ( int i = 1 ; i <= n ; i ++ ) {  $ ~~cin >> a [ i ] ;  $ ~~mn = min ( mn , a [ i ] ) ;  $ ~}  $ ~int pos = 0 , ans = 1999999999 ;  $ ~for ( int i = 1 ; i <= n ; i ++ ) {  $ ~~if ( a [ i ] == mn ) {  $ ~~~if ( i - pos < ans && pos ) ans = i - pos ;  $ ~~~pos = i ;  $ ~~}  $ ~}  $ ~cout << ans << endl ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~long int n , b , d , a , sum = 0 , cc = 0 ;  $ ~long int c [ 100001 ] ;  $ ~cin >> n >> b >> d ;  $ ~for ( int i = 0 ; i < n ; i ++ ) {  $ ~~cin >> c [ i ] ;  $ ~~if ( c [ i ] <= b ) sum += c [ i ] ;  $ ~~if ( sum > d ) {  $ ~~~sum = 0 ;  $ ~~~cc ++ ;  $ ~~}  $ ~}  $ ~cout << cc << endl ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~int t , s , q ;  $ ~int res = 1 , p ;  $ ~cin >> t >> s >> q ;  $ ~p = s ;  $ ~p += p * ( q - 1 ) ;  $ ~while ( p < t ) {  $ ~~res ++ ;  $ ~~p += p * ( q - 1 ) ;  $ ~}  $ ~cout << res << endl ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~int T , N , R , sum , temp ;  $ ~cin >> T ;  $ ~int ans [ T ] ;  $ ~for ( int i = 0 ; i < T ; i ++ ) {  $ ~~cin >> N >> R ;  $ ~~sum = 0 ;  $ ~~for ( int j = 0 ; j < N - 1 ; j ++ ) {  $ ~~~cin >> temp ;  $ ~~~sum += temp ;  $ ~~}  $ ~~sum = sum % N ;  $ ~~ans [ i ] = ( N + R - sum ) % N + 1 ;  $ ~}  $ ~for ( int i = 0 ; i < T ; i ++ ) { cout << ans [ i ] << "\n" ; }  $ ~return 0 ;  $ }
const long long M = 1e5 ;  $ const long long MOD = 998244353 ;  $ const double PI = 3.14159265358979323846 ;  $ int main ( ) {  $ ~string a , b ;  $ ~cin >> a >> b ;  $ ~long long i = 0 , ans = 0 ;  $ ~while ( i < a . length ( ) ) {  $ ~~long long c = 0 ;  $ ~~for ( long long j = 0 ; j < b . length ( ) ; j ++ ) {  $ ~~~if ( ( i + j ) >= a . length ( ) ) break ;  $ ~~~if ( a [ i + j ] == b [ j ] ) c ++ ;  $ ~~}  $ ~~i ++ ;  $ ~~ans = max ( ans , c ) ;  $ ~}  $ ~i = 0 ;  $ ~while ( i < b . length ( ) ) {  $ ~~long long c = 0 ;  $ ~~for ( long long j = 0 ; j < a . length ( ) ; j ++ ) {  $ ~~~if ( ( i + j ) >= b . length ( ) ) break ;  $ ~~~if ( b [ i + j ] == a [ j ] ) c ++ ;  $ ~~}  $ ~~i ++ ;  $ ~~ans = max ( ans , c ) ;  $ ~}  $ ~cout << b . length ( ) - ans << "\n" ;  $ }
const int MAXN = 128 ;  $ int n , m , a [ MAXN ] [ MAXN ] , b [ MAXN ] ;  $ int main ( ) {  $ ~cin >> n >> m ;  $ ~for ( int i = 0 ; i < m ; i ++ ) {  $ ~~int pos = - 1 , x = - 1 ;  $ ~~for ( int j = 0 ; j < n ; j ++ ) {  $ ~~~cin >> a [ i ] [ j ] ;  $ ~~~if ( a [ i ] [ j ] > x ) {  $ ~~~~pos = j ;  $ ~~~~x = a [ i ] [ j ] ;  $ ~~~}  $ ~~}  $ ~~b [ pos ] ++ ;  $ ~}  $ ~int pos = - 1 , x = - 1 ;  $ ~for ( int i = 0 ; i < n ; i ++ ) {  $ ~~if ( b [ i ] > x ) {  $ ~~~pos = i ;  $ ~~~x = b [ i ] ;  $ ~~}  $ ~}  $ ~pos ++ ;  $ ~cout << pos << '\n' ;  $ ~return false ;  $ }
int main ( ) {  $ ~int l , r , n , m ;  $ ~char c1 , c2 ;  $ ~string s ;  $ ~cin >> n >> m ;  $ ~cin >> s ;  $ ~for ( int i = 0 ; i < m ; i ++ ) {  $ ~~cin >> l >> r >> c1 >> c2 ;  $ ~~for ( int j = l ; j <= r ; j ++ ) {  $ ~~~if ( s . at ( j - 1 ) == c1 ) { s . at ( j - 1 ) = c2 ; }  $ ~~}  $ ~}  $ ~cout << s << endl ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~long long n ;  $ ~cin >> n ;  $ ~vector < long long > a ( n ) ;  $ ~long long i ;  $ ~for ( i = 0 ; i < n ; i ++ ) { cin >> a [ i ] ; }  $ ~long long pi = 0 , ml = 0 ;  $ ~for ( i = 1 ; i < n ; i ++ ) {  $ ~~if ( a [ i ] <= a [ i - 1 ] ) {  $ ~~~long long d = i - pi ;  $ ~~~ml = max ( d , ml ) ;  $ ~~~pi = i ;  $ ~~}  $ ~}  $ ~long long f = i - pi ;  $ ~ml = max ( f , ml ) ;  $ ~cout << ml << endl ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~int n = 0 , l = 0 ;  $ ~string str ;  $ ~while ( cin >> n ) {  $ ~~for ( int i = 0 ; i < n ; i ++ ) {  $ ~~~cin >> str ;  $ ~~~l = str . length ( ) ;  $ ~~~if ( l <= 10 )  $ ~~~~cout << str << endl ;  $ ~~~else  $ ~~~~cout << str [ 0 ] << l - 2 << str [ l - 1 ] << endl ;  $ ~~}  $ ~}  $ ~return 0 ;  $ }
int main ( ) {  $ ~char str [ 105 ] [ 105 ] ;  $ ~int n , m , i , j ;  $ ~cin >> n >> m ;  $ ~for ( i = 0 ; i < n ; i ++ )  $ ~~for ( j = 0 ; j < m ; j ++ ) cin >> str [ i ] [ j ] ;  $ ~for ( i = 0 ; i < n ; i ++ ) {  $ ~~if ( i & 1 ) {  $ ~~~for ( j = 0 ; j < m ; j ++ ) {  $ ~~~~if ( str [ i ] [ j ] == '-' ) continue ;  $ ~~~~if ( j & 1 )  $ ~~~~~str [ i ] [ j ] = 'B' ;  $ ~~~~else  $ ~~~~~str [ i ] [ j ] = 'W' ;  $ ~~~}  $ ~~} else {  $ ~~~for ( j = 0 ; j < m ; j ++ ) {  $ ~~~~if ( str [ i ] [ j ] == '-' ) continue ;  $ ~~~~if ( j & 1 )  $ ~~~~~str [ i ] [ j ] = 'W' ;  $ ~~~~else  $ ~~~~~str [ i ] [ j ] = 'B' ;  $ ~~~}  $ ~~}  $ ~}  $ ~for ( i = 0 ; i < n ; i ++ ) {  $ ~~for ( j = 0 ; j < m ; j ++ ) {  $ ~~~cout << str [ i ] [ j ] ;  $ ~~~if ( j == m - 1 ) cout << endl ;  $ ~~}  $ ~}  $ ~return 0 ;  $ }
int main ( ) {  $ ~int n ;  $ ~cin >> n ;  $ ~int arr [ 1000100 ] ;  $ ~int ans = 0 ;  $ ~int min = 2147483647 ;  $ ~int pos = 0 ;  $ ~for ( int i = 0 ; i < n ; ++ i ) { cin >> arr [ i ] ; }  $ ~for ( int i = 0 ; i < n ; ++ i ) {  $ ~~if ( arr [ i ] < min ) {  $ ~~~min = arr [ i ] ;  $ ~~~pos = i ;  $ ~~}  $ ~}  $ ~int count = 0 ;  $ ~for ( int i = 0 ; i < n ; ++ i ) {  $ ~~if ( arr [ i ] == min ) ++ count ;  $ ~}  $ ~if ( count > 1 )  $ ~~cout << "Still Rozdil" << endl ;  $ ~else  $ ~~cout << pos + 1 << endl ;  $ }
long long int a [ 20 ] ;  $ long long int b [ 20 ] ;  $ int main ( ) {  $ ~long long int n ;  $ ~cin >> n ;  $ ~cout << n / 2 + 1 << endl ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~int m ;  $ ~while ( cin >> m ) {  $ ~~int c [ 101 ] = { 0 } , k = 0 ;  $ ~~for ( int i = 1 ; i < m + 1 ; ++ i ) {  $ ~~~cin >> c [ i ] ;  $ ~~~c [ i ] += c [ i - 1 ] ;  $ ~~}  $ ~~int x , y ;  $ ~~cin >> x >> y ;  $ ~~for ( int i = 1 ; i < m + 1 ; ++ i ) {  $ ~~~if ( c [ i ] > y || c [ m ] - c [ i ] < x ) break ;  $ ~~~if ( c [ i ] >= x && c [ m ] - c [ i ] <= y ) {  $ ~~~~k = i + 1 ;  $ ~~~~break ;  $ ~~~}  $ ~~}  $ ~~cout << k << endl ;  $ ~}  $ ~return 0 ;  $ }
int main ( ) {  $ ~int n , i , p , q , count = 0 ;  $ ~cin >> n ;  $ ~for ( i = 0 ; i < n ; i ++ ) {  $ ~~cin >> p >> q ;  $ ~~if ( q - p >= 2 ) count ++ ;  $ ~}  $ ~cout << count << endl ;  $ ~return 0 ;  $ }
const long double PI = 3.141592653589793238 L ;  $ const long long N = 100005 ;  $ int main ( ) {  $ ~char s [ 6 ] ;  $ ~for ( int i = 0 ; i < 6 ; ++ i ) cin >> s [ i ] ;  $ ~int ar [ 6 ] = { 0 } ;  $ ~for ( int i = 0 ; i < 6 ; i ++ ) {  $ ~~if ( s [ i ] == 'R' ) ar [ 0 ] ++ ;  $ ~~if ( s [ i ] == 'O' ) ar [ 1 ] ++ ;  $ ~~if ( s [ i ] == 'Y' ) ar [ 2 ] ++ ;  $ ~~if ( s [ i ] == 'G' ) ar [ 3 ] ++ ;  $ ~~if ( s [ i ] == 'B' ) ar [ 4 ] ++ ;  $ ~~if ( s [ i ] == 'V' ) ar [ 5 ] ++ ;  $ ~}  $ ~sort ( ar , ar + 6 ) ;  $ ~if ( ar [ 5 ] == 6 || ar [ 5 ] == 5 )  $ ~~cout << 1 << '\n' ;  $ ~else if ( ar [ 5 ] == 4 )  $ ~~cout << 2 << '\n' ;  $ ~else if ( ar [ 5 ] == 3 && ar [ 4 ] == 1 )  $ ~~cout << 5 << '\n' ;  $ ~else if ( ar [ 5 ] == 3 && ar [ 4 ] == 2 )  $ ~~cout << 3 << '\n' ;  $ ~else if ( ar [ 5 ] == 3 && ar [ 4 ] == 3 )  $ ~~cout << 2 << '\n' ;  $ ~else if ( ar [ 5 ] == 2 && ar [ 4 ] == 1 )  $ ~~cout << 15 << '\n' ;  $ ~else if ( ar [ 5 ] == 2 && ar [ 4 ] == 2 && ar [ 3 ] == 2 )  $ ~~cout << 6 << '\n' ;  $ ~else if ( ar [ 5 ] == 2 && ar [ 4 ] == 2 )  $ ~~cout << 8 << '\n' ;  $ ~else if ( ar [ 5 ] == 1 )  $ ~~cout << 30 << '\n' ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~string cA , cB ;  $ ~int n ;  $ ~cin >> cA >> cB >> n ;  $ ~for ( int i = 0 ; i < n ; ++ i ) {  $ ~~cout << cA << " " << cB << "\n" ;  $ ~~string a , b ;  $ ~~cin >> a >> b ;  $ ~~if ( a == cA )  $ ~~~cA . swap ( b ) ;  $ ~~else  $ ~~~cB . swap ( b ) ;  $ ~}  $ ~cout << cA << " " << cB << "\n" ;  $ ~return 0 ;  $ }
long long max ( long long a , long long b ) {  $ ~return a > b ? a : b ;  $ }  $ long long min ( long long a , long long b ) {  $ ~return a < b ? a : b ;  $ }  $ long long modd ( long long a ) {  $ ~if ( a < 0 LL ) return a * - 1 LL ;  $ ~return a ;  $ }  $ int main ( ) {  $ ~int n ;  $ ~cin >> n ;  $ ~int a [ n ] , b [ n ] ;  $ ~for ( int i = 0 ; i < n ; i ++ ) cin >> a [ i ] >> b [ i ] ;  $ ~int rem = 0 , ans = 0 ;  $ ~for ( int i = 0 ; i < n ; i ++ ) {  $ ~~rem -= a [ i ] ;  $ ~~rem += b [ i ] ;  $ ~~ans = max ( ans , rem ) ;  $ ~}  $ ~cout << ans << endl ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~int n , k , x ;  $ ~int v ;  $ ~cin >> n >> k >> x ;  $ ~int total = 0 ;  $ ~for ( int i = 1 ; i <= n ; i ++ ) {  $ ~~cin >> v ;  $ ~~if ( n - i < k ) {  $ ~~~total += min ( x , v ) ;  $ ~~} else {  $ ~~~total += v ;  $ ~~}  $ ~}  $ ~cout << total << endl ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~int w , h , u1 , d1 , u2 , d2 ;  $ ~cin >> w ;  $ ~cin >> h ;  $ ~cin >> u1 ;  $ ~cin >> d1 ;  $ ~cin >> u2 ;  $ ~cin >> d2 ;  $ ~int k = w ;  $ ~for ( int i = h ; i > 0 ; i -- ) {  $ ~~k = k + i ;  $ ~~if ( i == d1 ) {  $ ~~~k = k - u1 ;  $ ~~~if ( k < 0 ) k = 0 ;  $ ~~} else if ( i == d2 ) {  $ ~~~k = k - u2 ;  $ ~~~if ( k < 0 ) k = 0 ;  $ ~~}  $ ~}  $ ~cout << k << endl ;  $ }
int main ( ) {  $ ~vector < long long int > v ;  $ ~long long int n , a , sum ;  $ ~cin >> n ;  $ ~for ( int i = 0 ; i < n ; ++ i ) {  $ ~~cin >> a ;  $ ~~v . push_back ( a ) ;  $ ~}  $ ~sort ( v . begin ( ) , v . end ( ) ) ;  $ ~sum = v [ v . size ( ) - 1 ] - v [ 0 ] + 1 ;  $ ~cout << sum - v . size ( ) << endl ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~int n , m , x , y , flag = 1 ;  $ ~cin >> n >> m ;  $ ~char mat [ n + 1 ] [ m + 1 ] ;  $ ~for ( int i = 0 ; i < n ; i ++ ) { cin >> mat [ i ] ; }  $ ~for ( int i = 0 ; i < n && flag ; i ++ ) {  $ ~~for ( int j = 0 ; j < m ; j ++ ) {  $ ~~~if ( mat [ i ] [ j ] == 'B' ) {  $ ~~~~x = i ;  $ ~~~~y = j ;  $ ~~~~flag = 0 ;  $ ~~~~break ;  $ ~~~}  $ ~~}  $ ~}  $ ~flag = 1 ;  $ ~for ( int i = n - 1 ; i >= 0 && flag ; i -- ) {  $ ~~for ( int j = m - 1 ; j >= 0 ; j -- ) {  $ ~~~if ( mat [ i ] [ j ] == 'B' ) {  $ ~~~~x += i ;  $ ~~~~y += j ;  $ ~~~~flag = 0 ;  $ ~~~~break ;  $ ~~~}  $ ~~}  $ ~}  $ ~x /= 2 ;  $ ~y /= 2 ;  $ ~cout << x + 1 << " " << y + 1 << "\n" ;  $ }
int main ( ) {  $ ~int n , m , k , t , x ;  $ ~while ( cin >> n >> m >> k >> t ) {  $ ~~int i ;  $ ~~for ( i = 1 ; i < 10000000 ; i ++ ) {  $ ~~~if ( m <= k * i ) {  $ ~~~~x = i ;  $ ~~~~break ;  $ ~~~}  $ ~~}  $ ~~for ( i = 1 ; i < 200000000 ; i ++ ) {  $ ~~~if ( i * t >= x * n ) {  $ ~~~~cout << i << endl ;  $ ~~~~break ;  $ ~~~}  $ ~~}  $ ~}  $ ~return 0 ;  $ }
int wz [ 202 ] ;  $ int main ( ) {  $ ~int day ;  $ ~for ( int i = 0 ; i < 202 ; i ++ ) wz [ i ] = 0 ;  $ ~int n , m ;  $ ~cin >> n >> m ;  $ ~for ( int i = 0 ; i < n ; i ++ ) wz [ i ] = 1 ;  $ ~for ( int i = 1 ; i <= 202 ; i ++ ) {  $ ~~if ( wz [ i - 1 ] == 0 ) {  $ ~~~cout << i - 1 << endl ;  $ ~~~break ;  $ ~~}  $ ~~if ( i % m == 0 ) {  $ ~~~wz [ n ] = 1 ;  $ ~~~n ++ ;  $ ~~}  $ ~}  $ ~return 0 ;  $ }
long long a , b , c , d , e , tp , f , g , h , p [ 100 ] , pi , q [ 100 ] , qi , pas ;  $ map < pair < long long , long long > , long long > m ;  $ int main ( ) {  $ ~cin >> a ;  $ ~for ( b = 1 ; b <= a ; b ++ ) {  $ ~~cin >> tp ;  $ ~~if ( tp == 1 ) {  $ ~~~cin >> c >> d >> e ;  $ ~~~pi = 0 ;  $ ~~~while ( c > 0 ) {  $ ~~~~pi ++ ;  $ ~~~~p [ pi ] = c % 2 ;  $ ~~~~c /= 2 ;  $ ~~~}  $ ~~~c = d ;  $ ~~~for ( d = 1 ; d <= pi / 2 ; d ++ ) { swap ( p [ d ] , p [ pi - d + 1 ] ) ; }  $ ~~~d = c ;  $ ~~~qi = 0 ;  $ ~~~while ( d > 0 ) {  $ ~~~~qi ++ ;  $ ~~~~q [ qi ] = d % 2 ;  $ ~~~~d /= 2 ;  $ ~~~}  $ ~~~for ( d = 1 ; d <= qi / 2 ; d ++ ) { swap ( q [ d ] , q [ qi - d + 1 ] ) ; }  $ ~~~c = 0 ;  $ ~~~f = 0 ;  $ ~~~for ( d = 1 ; d <= min ( pi , qi ) ; d ++ ) {  $ ~~~~if ( p [ d ] == q [ d ] ) {  $ ~~~~~g = c ;  $ ~~~~~if ( p [ d ] == 0 )  $ ~~~~~~c = c * 2 ;  $ ~~~~~else  $ ~~~~~~c = c * 2 + 1 ;  $ ~~~~} else {  $ ~~~~~break ;  $ ~~~~}  $ ~~~}  $ ~~~f = d ;  $ ~~~h = c ;  $ ~~~for ( d = f ; d <= pi ; d ++ ) {  $ ~~~~g = c ;  $ ~~~~if ( p [ d ] == 0 )  $ ~~~~~c = c * 2 ;  $ ~~~~else  $ ~~~~~c = c * 2 + 1 ;  $ ~~~~m [ make_pair ( g , c ) ] += e ;  $ ~~~}  $ ~~~c = h ;  $ ~~~for ( d = f ; d <= qi ; d ++ ) {  $ ~~~~g = c ;  $ ~~~~if ( q [ d ] == 0 )  $ ~~~~~c = c * 2 ;  $ ~~~~else  $ ~~~~~c = c * 2 + 1 ;  $ ~~~~m [ make_pair ( g , c ) ] += e ;  $ ~~~}  $ ~~} else {  $ ~~~cin >> c >> d ;  $ ~~~pas = 0 ;  $ ~~~pi = 0 ;  $ ~~~while ( c > 0 ) {  $ ~~~~pi ++ ;  $ ~~~~p [ pi ] = c % 2 ;  $ ~~~~c /= 2 ;  $ ~~~}  $ ~~~c = d ;  $ ~~~for ( d = 1 ; d <= pi / 2 ; d ++ ) { swap ( p [ d ] , p [ pi - d + 1 ] ) ; }  $ ~~~d = c ;  $ ~~~qi = 0 ;  $ ~~~while ( d > 0 ) {  $ ~~~~qi ++ ;  $ ~~~~q [ qi ] = d % 2 ;  $ ~~~~d /= 2 ;  $ ~~~}  $ ~~~for ( d = 1 ; d <= qi / 2 ; d ++ ) { swap ( q [ d ] , q [ qi - d + 1 ] ) ; }  $ ~~~c = 0 ;  $ ~~~f = 0 ;  $ ~~~for ( d = 1 ; d <= min ( pi , qi ) ; d ++ ) {  $ ~~~~if ( p [ d ] == q [ d ] ) {  $ ~~~~~g = c ;  $ ~~~~~if ( p [ d ] == 0 )  $ ~~~~~~c = c * 2 ;  $ ~~~~~else  $ ~~~~~~c = c * 2 + 1 ;  $ ~~~~} else {  $ ~~~~~break ;  $ ~~~~}  $ ~~~}  $ ~~~f = d ;  $ ~~~h = c ;  $ ~~~for ( d = f ; d <= pi ; d ++ ) {  $ ~~~~g = c ;  $ ~~~~if ( p [ d ] == 0 )  $ ~~~~~c = c * 2 ;  $ ~~~~else  $ ~~~~~c = c * 2 + 1 ;  $ ~~~~pas = pas + m [ make_pair ( g , c ) ] ;  $ ~~~}  $ ~~~c = h ;  $ ~~~for ( d = f ; d <= qi ; d ++ ) {  $ ~~~~g = c ;  $ ~~~~if ( q [ d ] == 0 )  $ ~~~~~c = c * 2 ;  $ ~~~~else  $ ~~~~~c = c * 2 + 1 ;  $ ~~~~pas = pas + m [ make_pair ( g , c ) ] ;  $ ~~~}  $ ~~~cout << pas << endl ;  $ ~~}  $ ~}  $ ~return 0 ;  $ }
int main ( ) {  $ ~int n ;  $ ~cin >> n ;  $ ~if ( n % 2 )  $ ~~cout << "1\n" ;  $ ~else  $ ~~cout << "0\n" ;  $ }
int main ( ) {  $ ~string str ;  $ ~cin >> str ;  $ ~int len = str . size ( ) ;  $ ~for ( int i = 0 ; i < len ; i ++ )  $ ~~if ( str [ i ] == 'r' ) cout << i + 1 << '\n' ;  $ ~for ( int i = len - 1 ; i >= 0 ; i -- )  $ ~~if ( str [ i ] == 'l' ) cout << i + 1 << '\n' ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~long long int n , x ;  $ ~cin >> n >> x ;  $ ~long long int dis = 0 ;  $ ~for ( int i = 0 ; i < n ; i ++ ) {  $ ~~char a ;  $ ~~long long int d ;  $ ~~cin >> a >> d ;  $ ~~if ( a == '+' ) x += d ;  $ ~~if ( a == '-' ) {  $ ~~~if ( d > x )  $ ~~~~dis ++ ;  $ ~~~else  $ ~~~~x -= d ;  $ ~~}  $ ~}  $ ~cout << x << " " << dis << endl ;  $ }
int main ( ) {  $ ~int n , k , t , i ;  $ ~int a [ 15 ] ;  $ ~a [ 0 ] = 0 ;  $ ~cin >> n >> k ;  $ ~if ( 5 * ( 1 + n ) * n / 2 <= 240 - k ) {  $ ~~cout << n << endl ;  $ ~~return 0 ;  $ ~}  $ ~t = 240 ;  $ ~for ( i = 1 ; i < 1 + n ; i ++ ) {  $ ~~a [ i ] = i * 5 + a [ i - 1 ] ;  $ ~~if ( a [ i ] > t - k ) { break ; }  $ ~}  $ ~cout << i - 1 << endl ;  $ ~return 0 ;  $ }
const int inf = 0 x3f3f3f3f ;  $ const int maxn = 110 ;  $ int max ( int a , int b ) {  $ ~return a > b ? a : b ;  $ }  $ int min ( int a , int b ) {  $ ~return a > b ? b : a ;  $ }  $ int a [ maxn ] ;  $ int main ( ) {  $ ~int i , n ;  $ ~while ( cin >> n ) {  $ ~~for ( i = 0 ; i < n ; i ++ ) cin >> a [ i ] ;  $ ~~int l ;  $ ~~int maxi = 1 ;  $ ~~for ( l = 0 ; l < n - 1 ; l ++ ) {  $ ~~~int pos = l ;  $ ~~~while ( l < n - 1 && a [ l ] + 1 == a [ l + 1 ] ) { l ++ ; }  $ ~~~if ( l - pos + 1 > maxi ) { maxi = l - pos + 1 ; }  $ ~~}  $ ~~int cnt1 = 1 ;  $ ~~if ( a [ 0 ] == 1 ) {  $ ~~~for ( i = 0 ; i < maxi - 1 ; i ++ ) {  $ ~~~~if ( ( a [ i ] + 1 ) != a [ i + 1 ] ) {  $ ~~~~~break ;  $ ~~~~} else  $ ~~~~~cnt1 ++ ;  $ ~~~}  $ ~~}  $ ~~int cnt2 = 1 ;  $ ~~if ( a [ n - 1 ] == 1000 ) {  $ ~~~for ( i = 0 ; i < maxi - 1 ; i ++ ) {  $ ~~~~if ( ( a [ n - 1 - i ] - 1 ) != a [ n - 1 - i - 1 ] ) {  $ ~~~~~break ;  $ ~~~~} else  $ ~~~~~cnt2 ++ ;  $ ~~~}  $ ~~}  $ ~~if ( cnt1 == maxi || cnt2 == maxi ) {  $ ~~~cout << maxi - 1 << endl ;  $ ~~} else  $ ~~~cout << maxi - 2 << endl ;  $ ~}  $ ~return 0 ;  $ }
int main ( ) {  $ ~int n , m , t = 0 ;  $ ~cin >> n >> m ;  $ ~while ( n ) {  $ ~~t ++ ;  $ ~~if ( t % m == 0 ) n ++ ;  $ ~~n -- ;  $ ~}  $ ~cout << t << endl ;  $ ~return 0 ;  $ }
int judge ( int i ) {  $ ~int ans = 0 ;  $ ~while ( i != 0 ) {  $ ~~ans += i % 10 ;  $ ~~i /= 10 ;  $ ~}  $ ~return ans ;  $ }  $ int num [ 100000 ] ;  $ int main ( ) {  $ ~int n ;  $ ~cin >> n ;  $ ~int cont = 0 ;  $ ~for ( int i = max ( 1 , n - 100 ) ; i <= n ; i ++ ) {  $ ~~int ans = 0 ;  $ ~~ans = i + judge ( i ) ;  $ ~~if ( ans == n ) { num [ cont ++ ] = i ; }  $ ~}  $ ~if ( cont == 0 ) {  $ ~~cout << 0 ;  $ ~~cout << endl ;  $ ~} else {  $ ~~cout << cont << endl ;  $ ~~for ( int i = 0 ; i < cont ; i ++ ) { cout << num [ i ] << endl ; }  $ ~}  $ }
int main ( ) {  $ ~int k , m , n1 , n2 ;  $ ~cin >> n1 >> n2 >> k >> m ;  $ ~vector < int > a ( n1 ) ;  $ ~for ( int i = 0 ; i < a . size ( ) ; ++ i ) cin >> a [ i ] ;  $ ~vector < int > b ( n2 ) ;  $ ~for ( int i = 0 ; i < b . size ( ) ; ++ i ) cin >> b [ i ] ;  $ ~if ( a [ k - 1 ] < b [ n2 - m ] )  $ ~~cout << "YES\n" ;  $ ~else  $ ~~cout << "NO\n" ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~long long int n ;  $ ~cin >> n ;  $ ~long long int x = 0 ;  $ ~while ( n >= 1 ) {  $ ~~if ( n % 2 == 0 )  $ ~~~n /= 2 ;  $ ~~else {  $ ~~~x ++ ;  $ ~~~n -- ;  $ ~~}  $ ~}  $ ~cout << x << endl ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~int n , a [ 10 ] = { 2 , 7 , 2 , 3 , 3 , 4 , 2 , 5 , 1 , 2 } ;  $ ~while ( cin >> n ) { cout << a [ n / 10 ] * a [ n % 10 ] << endl ; }  $ ~return 0 ;  $ }
int main ( ) {  $ ~int n , x ;  $ ~while ( cin >> n >> x ) {  $ ~~int cnt = 0 ;  $ ~~for ( int i = 1 ; i <= n ; i ++ ) {  $ ~~~int quo = x / i ;  $ ~~~if ( quo <= n && quo * i == x ) { cnt ++ ; }  $ ~~}  $ ~~cout << cnt << endl ;  $ ~}  $ ~return 0 ;  $ }
int main ( ) {  $ ~string num ;  $ ~cin >> num ;  $ ~string r0 = "O-" , r1 = "-O" ;  $ ~string left [ 5 ] = { "|-OOOO" , "|O-OOO" , "|OO-OO" , "|OOO-O" , "|OOOO-" } ;  $ ~for ( int i = num . length ( ) - 1 ; i >= 0 ; i -- ) {  $ ~~if ( ( num [ i ] - '0' ) >= 5 )  $ ~~~cout << r1 + left [ ( num [ i ] - '0' ) - 5 ] << endl ;  $ ~~else  $ ~~~cout << r0 + left [ num [ i ] - '0' ] << endl ;  $ ~}  $ ~return 0 ;  $ }
void A ( int l , int r , int a ) {  $ ~int s , ab ;  $ ~if ( l == r ) {  $ ~~s = 0 ;  $ ~~if ( a != 0 ) s = a / 2 ;  $ ~~cout << l + r + ( 2 * s ) << endl ;  $ ~}  $ ~if ( l < r ) {  $ ~~if ( a + l <= r )  $ ~~~cout << 2 * ( a + l ) << endl ;  $ ~~else {  $ ~~~ab = ( a - ( r - l ) ) / 2 ;  $ ~~~cout << abs ( ab ) * 2 + 2 * r << endl ;  $ ~~}  $ ~}  $ ~if ( r < l ) {  $ ~~if ( a + r <= l )  $ ~~~cout << 2 * ( a + r ) << endl ;  $ ~~else {  $ ~~~ab = ( a - ( l - r ) ) / 2 ;  $ ~~~cout << abs ( ab ) * 2 + 2 * l << endl ;  $ ~~}  $ ~}  $ }  $ int main ( ) {  $ ~int l , r , a ;  $ ~cin >> l >> r >> a ;  $ ~A ( l , r , a ) ;  $ ~return 0 ;  $ }
const int MAXN = 100001 ;  $ const int inf = 1000000000 ;  $ const long double INF = 1.0 / 0.0 ;  $ const long double EPS = 1e-7 ;  $ const int mod = inf + 7 ;  $ const long double PI = acos ( - 1.0 ) ;  $ int main ( ) {  $ ~set < long long > x ;  $ ~for ( long long i = 3 ; i < 228228 ; ++ i ) {  $ ~~if ( ( i - 2 ) * 180 % i == 0 ) { x . insert ( ( i - 2 ) * 180 / i ) ; }  $ ~}  $ ~long long t ;  $ ~cin >> t ;  $ ~while ( t -- ) {  $ ~~long long a ;  $ ~~cin >> a ;  $ ~~if ( x . find ( a ) != x . end ( ) ) {  $ ~~~cout << "YES" << endl ;  $ ~~} else {  $ ~~~cout << "NO" << endl ;  $ ~~}  $ ~}  $ }
int main ( ) {  $ ~long long n ;  $ ~cin >> n ;  $ ~if ( n >= 0 )  $ ~~cout << n << endl ;  $ ~else {  $ ~~if ( n % 10 < ( n % 100 ) / 10 )  $ ~~~cout << n / 10 << endl ;  $ ~~else {  $ ~~~int digit = abs ( n ) % 10 ;  $ ~~~n = abs ( n ) / 100 * - 10 - digit ;  $ ~~~cout << n << endl ;  $ ~~}  $ ~}  $ ~return 0 ;  $ }
int main ( ) {  $ ~char a [ 1000 ] [ 1000 ] ;  $ ~int n ;  $ ~cin >> n ;  $ ~for ( int i = 0 ; i < n ; i ++ ) {  $ ~~for ( int j = 0 ; j < n ; j ++ ) { cin >> a [ i ] [ j ] ; }  $ ~}  $ ~int sum = 0 ;  $ ~for ( int i = 0 ; i < n ; i ++ ) {  $ ~~int c = 0 ;  $ ~~for ( int j = 0 ; j < n ; j ++ ) {  $ ~~~if ( a [ i ] [ j ] == 'C' ) c ++ ;  $ ~~}  $ ~~sum = sum + ( c * ( c - 1 ) / 2 ) ;  $ ~}  $ ~for ( int i = 0 ; i < n ; i ++ ) {  $ ~~int c = 0 ;  $ ~~for ( int j = 0 ; j < n ; j ++ ) {  $ ~~~if ( a [ j ] [ i ] == 'C' ) c ++ ;  $ ~~}  $ ~~sum = sum + ( c * ( c - 1 ) / 2 ) ;  $ ~}  $ ~cout << sum << endl ;  $ }
char Grades [ 200005 ] ;  $ int main ( ) {  $ ~int lfp = - 1 , zp , n , i , t , last ;  $ ~bool carryFlag = false , pf = false ;  $ ~cin >> n >> t >> ( Grades + 1 ) ;  $ ~for ( i = 1 ; i <= n ; ++ i ) {  $ ~~if ( Grades [ i ] == '.' ) {  $ ~~~++ i ;  $ ~~~break ;  $ ~~}  $ ~}  $ ~while ( Grades [ i ] && t > 0 ) {  $ ~~if ( Grades [ i ] >= '5' ) {  $ ~~~lfp = i ;  $ ~~~break ;  $ ~~}  $ ~~++ i ;  $ ~}  $ ~while ( ( ~ lfp ) && t > 0 && ! pf ) {  $ ~~if ( Grades [ lfp - 1 ] == '.' ) {  $ ~~~Grades [ lfp - 1 ] = 0 ;  $ ~~~Grades [ lfp - 2 ] ++ ;  $ ~~~last = lfp - 2 ;  $ ~~~pf = true ;  $ ~~} else {  $ ~~~Grades [ lfp ] = 0 ;  $ ~~~Grades [ lfp - 1 ] ++ ;  $ ~~~last = lfp - 1 ;  $ ~~}  $ ~~lfp = - 1 ;  $ ~~t -- ;  $ ~~if ( Grades [ last ] > '9' ) {  $ ~~~int c = 1 ;  $ ~~~Grades [ last ] = '0' ;  $ ~~~last -- ;  $ ~~~while ( c ) {  $ ~~~~c = 0 ;  $ ~~~~if ( Grades [ last ] == '.' ) {  $ ~~~~~Grades [ last ] = '\0' ;  $ ~~~~~Grades [ last - 1 ] ++ ;  $ ~~~~~last -= 2 ;  $ ~~~~~pf = true ;  $ ~~~~} else if ( last == '\0' ) {  $ ~~~~~carryFlag = true ;  $ ~~~~~Grades [ 0 ] = '1' ;  $ ~~~~~break ;  $ ~~~~} else {  $ ~~~~~Grades [ last ] ++ ;  $ ~~~~}  $ ~~~~if ( Grades [ last ] > '9' ) {  $ ~~~~~if ( ! pf )  $ ~~~~~~Grades [ last ] = '\0' ;  $ ~~~~~else  $ ~~~~~~Grades [ last ] = '0' ;  $ ~~~~~last -- ;  $ ~~~~~c = 1 ;  $ ~~~~}  $ ~~~~if ( Grades [ last ] >= '5' ) lfp = last ;  $ ~~~}  $ ~~} else if ( Grades [ last ] >= '5' ) {  $ ~~~lfp = last ;  $ ~~}  $ ~}  $ ~if ( carryFlag )  $ ~~cout << Grades << endl ;  $ ~else  $ ~~cout << ( Grades + 1 ) << endl ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~int n ;  $ ~cin >> n ;  $ ~if ( n - 10 == 10 ) {  $ ~~cout << 15 << endl ;  $ ~} else if ( n - 10 == 1 || n - 10 == 11 ) {  $ ~~cout << 4 << endl ;  $ ~} else if ( n - 10 <= 9 && n - 10 >= 2 ) {  $ ~~cout << 4 << endl ;  $ ~} else {  $ ~~cout << 0 << endl ;  $ ~}  $ }
int n , k ;  $ int judge ( int x ) {  $ ~int a [ 11 ] = { 0 } ;  $ ~while ( x ) {  $ ~~int p = x % 10 ;  $ ~~a [ p ] = 1 ;  $ ~~x /= 10 ;  $ ~}  $ ~for ( int i = 0 ; i <= k ; i ++ ) {  $ ~~if ( a [ i ] != 1 ) { return 0 ; }  $ ~}  $ ~return 1 ;  $ }  $ int main ( ) {  $ ~while ( cin >> n >> k ) {  $ ~~int sum = 0 ;  $ ~~for ( int i = 0 ; i < n ; i ++ ) {  $ ~~~int x ;  $ ~~~cin >> x ;  $ ~~~int p = judge ( x ) ;  $ ~~~if ( p == 1 ) { sum ++ ; }  $ ~~}  $ ~~cout << sum << endl ;  $ ~}  $ ~return 0 ;  $ }
int main ( ) {  $ ~int n ;  $ ~cin >> n ;  $ ~if ( 1 > 4 * floor ( n * sqrt ( 2 ) ) )  $ ~~cout << 1 << endl ;  $ ~else  $ ~~cout << ( long long ) ( 4 * ( long long ) ( floor ( n * sqrt ( 2 ) ) ) ) << endl ;  $ ~return 0 ;  $ }
void output1 ( int x ) {  $ ~for ( int i = 0 ; i < x ; i ++ ) { cout << "*" ; }  $ }  $ void output2 ( int x ) {  $ ~for ( int i = 0 ; i < x ; i ++ ) { cout << "D" ; }  $ }  $ int main ( ) {  $ ~int n ;  $ ~cin >> n ;  $ ~for ( int i = n / 2 ; i >= 0 ; i -- ) {  $ ~~output1 ( i ) ;  $ ~~output2 ( n - 2 * i ) ;  $ ~~output1 ( i ) ;  $ ~~cout << endl ;  $ ~}  $ ~for ( int i = 1 ; i <= n / 2 ; i ++ ) {  $ ~~output1 ( i ) ;  $ ~~output2 ( n - 2 * i ) ;  $ ~~output1 ( i ) ;  $ ~~cout << endl ;  $ ~}  $ }
int main ( ) {  $ ~int k , a , b , v ;  $ ~while ( cin >> k >> a >> b >> v ) {  $ ~~int ans = 0 ;  $ ~~while ( a ) {  $ ~~~int sec = 0 ;  $ ~~~if ( k >= b + 1 ) {  $ ~~~~sec = b + 1 ;  $ ~~~~b = 0 ;  $ ~~~} else {  $ ~~~~sec = k ;  $ ~~~~b -= k - 1 ;  $ ~~~}  $ ~~~int num = sec * v ;  $ ~~~if ( num > a ) {  $ ~~~~a = 0 ;  $ ~~~} else {  $ ~~~~a -= num ;  $ ~~~}  $ ~~~ans ++ ;  $ ~~}  $ ~~cout << ans << endl ;  $ ~}  $ ~return 0 ;  $ }
int main ( ) {  $ ~int a , b , r ;  $ ~cin >> a >> b >> r ;  $ ~if ( 2 * r > min ( a , b ) ) {  $ ~~puts ( "Second" ) ;  $ ~} else {  $ ~~puts ( "First" ) ;  $ ~}  $ ~return true & false ;  $ }
int main ( ) {  $ ~int n ;  $ ~cin >> n ;  $ ~int arr [ n ] ;  $ ~if ( n == 1 ) {  $ ~~cin >> n ;  $ ~~if ( n == 0 ) {  $ ~~~cout << "UP" << endl ;  $ ~~} else if ( n == 15 ) {  $ ~~~cout << "DOWN" << endl ;  $ ~~} else {  $ ~~~cout << - 1 << endl ;  $ ~~}  $ ~} else {  $ ~~for ( int i = 1 ; i <= n ; i ++ ) { cin >> arr [ i ] ; }  $ ~~if ( arr [ n ] == 15 ) {  $ ~~~cout << "DOWN" << endl ;  $ ~~} else if ( arr [ n ] == 0 ) {  $ ~~~cout << "UP" << endl ;  $ ~~} else if ( arr [ n ] < arr [ n - 1 ] ) {  $ ~~~cout << "DOWN" << endl ;  $ ~~} else {  $ ~~~cout << "UP" << endl ;  $ ~~}  $ ~}  $ ~return 0 ;  $ }
int main ( ) {  $ ~int n , x , tmp , sum = 0 , ans ;  $ ~cin >> n >> x ;  $ ~for ( int i = 0 ; i < n ; i ++ ) {  $ ~~cin >> tmp ;  $ ~~sum += tmp ;  $ ~}  $ ~ans = abs ( sum / x ) ;  $ ~if ( abs ( sum % x ) > 0 ) ans ++ ;  $ ~cout << ans << endl ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~int n , m , min , max , rec ;  $ ~cin >> n >> m >> min >> max ;  $ ~int minr = max + 1 , maxr = min - 1 ;  $ ~for ( int i = 0 ; i < m ; i ++ ) {  $ ~~cin >> rec ;  $ ~~if ( rec < minr ) minr = rec ;  $ ~~if ( rec > maxr ) maxr = rec ;  $ ~}  $ ~int reqrec = 2 ;  $ ~if ( min == minr ) reqrec -- ;  $ ~if ( max == maxr ) reqrec -- ;  $ ~if ( min > minr || max < maxr ) reqrec = - 1 ;  $ ~if ( reqrec == - 1 || n - m < reqrec )  $ ~~cout << "Incorrect" << endl ;  $ ~else  $ ~~cout << "Correct" << endl ;  $ ~cin >> n ;  $ ~return 0 ;  $ }
int n , p ;  $ string s , t , a , b ;  $ map < pair < string , string > , bool > ma ;  $ int main ( ) {  $ ~cin >> n ;  $ ~for ( int i = 0 ; i < n ; ++ i ) {  $ ~~if ( i != 0 ) { cin >> s ; }  $ ~~cin >> s >> t ;  $ ~~if ( ma [ { s , t } ] ) { continue ; }  $ ~~ma [ { s , t } ] = 1 ;  $ ~~a = b = "" ;  $ ~~a += t [ 0 ] ;  $ ~~a += s [ 0 ] ;  $ ~~b += t [ 1 ] ;  $ ~~b += s [ 1 ] ;  $ ~~ma [ { a , b } ] = 1 ;  $ ~~a = b = "" ;  $ ~~a += t [ 1 ] ;  $ ~~a += t [ 0 ] ;  $ ~~b += s [ 1 ] ;  $ ~~b += s [ 0 ] ;  $ ~~ma [ { a , b } ] = 1 ;  $ ~~a = b = "" ;  $ ~~a += s [ 1 ] ;  $ ~~a += t [ 1 ] ;  $ ~~b += s [ 0 ] ;  $ ~~b += t [ 0 ] ;  $ ~~ma [ { a , b } ] = 1 ;  $ ~~++ p ;  $ ~}  $ ~cout << p << "\n" ;  $ }
int main ( ) {  $ ~int n , h = 0 , i = 1 , j = 1 ;  $ ~cin >> n ;  $ ~while ( n - i >= 0 ) {  $ ~~n = n - i ;  $ ~~j ++ ;  $ ~~i += j ;  $ ~~h ++ ;  $ ~}  $ ~cout << h << endl ;  $ }
int main ( ) {  $ ~int n ;  $ ~vector < int > v ;  $ ~int a ;  $ ~cin >> n ;  $ ~for ( int i = 1 ; i <= n ; i ++ ) {  $ ~~cin >> a ;  $ ~~v . push_back ( a ) ;  $ ~}  $ ~if ( v [ n - 1 ] == 15 ) {  $ ~~cout << "DOWN\n" ;  $ ~~return 0 ;  $ ~}  $ ~if ( v [ n - 1 ] == 0 ) {  $ ~~cout << "UP\n" ;  $ ~~return 0 ;  $ ~}  $ ~if ( n == 1 && v [ 0 ] != 0 && v [ 0 ] != 15 ) {  $ ~~cout << - 1 << "\n" ;  $ ~~return 0 ;  $ ~}  $ ~a = v [ n - 1 ] - v [ n - 2 ] ;  $ ~if ( a < 0 ) {  $ ~~cout << "DOWN\n" ;  $ ~} else {  $ ~~cout << "UP\n" ;  $ ~}  $ ~return 0 ;  $ }
long long n , m , a ;  $ long long mod = ( 1000000 ) + 3 ;  $ long long poww ( long long x , long long y ) {  $ ~if ( y == 0 ) return 1 ;  $ ~if ( y == 1 ) return x ;  $ ~if ( y % 2 ) return ( ( poww ( x , y / 2 ) % mod ) * ( poww ( x , y / 2 ) % mod ) * ( x % mod ) ) % mod ;  $ ~return ( ( poww ( x , y / 2 ) % mod ) * ( poww ( x , y / 2 ) % mod ) ) % mod ;  $ }  $ int main ( ) {  $ ~cin >> n ;  $ ~if ( ! n )  $ ~~cout << 1 << endl ;  $ ~else  $ ~~cout << poww ( 3 , n - 1 ) << endl ;  $ ~return 0 ;  $ }
void acceleration ( ) { }  $ long long const size = 1e2 ;  $ vector < long long > g [ size ] ;  $ int path [ size ] [ size ] ;  $ vector < long long > road ;  $ int main ( ) {  $ ~acceleration ( ) ;  $ ~long long n , u , v , weight , sum1 = 0 , sum2 = 0 , begin , current , previous ;  $ ~cin >> n ;  $ ~for ( int i = 0 ; i < n ; i ++ ) {  $ ~~cin >> u >> v >> weight ;  $ ~~u -- ;  $ ~~v -- ;  $ ~~if ( i == 0 ) begin = u ;  $ ~~g [ u ] . push_back ( v ) ;  $ ~~g [ v ] . push_back ( u ) ;  $ ~~path [ v ] [ u ] = weight ;  $ ~}  $ ~current = g [ begin ] [ 0 ] ;  $ ~road . push_back ( begin ) ;  $ ~previous = begin ;  $ ~while ( current != begin ) {  $ ~~road . push_back ( current ) ;  $ ~~if ( g [ current ] [ 0 ] == previous ) {  $ ~~~previous = current ;  $ ~~~current = g [ current ] [ 1 ] ;  $ ~~} else {  $ ~~~previous = current ;  $ ~~~current = g [ current ] [ 0 ] ;  $ ~~}  $ ~}  $ ~for ( int i = 1 ; i < n ; i ++ ) { sum1 += path [ road [ i - 1 ] ] [ road [ i ] ] ; }  $ ~sum1 += path [ road [ n - 1 ] ] [ road [ 0 ] ] ;  $ ~for ( int i = n - 1 ; i > 0 ; i -- ) { sum2 += path [ road [ i ] ] [ road [ i - 1 ] ] ; }  $ ~sum2 += path [ road [ 0 ] ] [ road [ n - 1 ] ] ;  $ ~cout << min ( sum1 , sum2 ) << endl ;  $ }
int n , wnk = 0 ;  $ bool Tb [ 102 ] ;  $ int main ( ) {  $ ~cin >> n ;  $ ~Tb [ 0 ] = 0 ;  $ ~Tb [ n + 1 ] = 0 ;  $ ~for ( int i = 1 ; i <= n ; i ++ ) cin >> Tb [ i ] ;  $ ~for ( int i = 1 ; i <= n ; i ++ ) {  $ ~~if ( Tb [ i ] )  $ ~~~wnk ++ ;  $ ~~else if ( ! Tb [ i ] && ( Tb [ i - 1 ] && Tb [ i + 1 ] ) )  $ ~~~wnk ++ ;  $ ~}  $ ~cout << wnk << "\n" ;  $ ~return 0 ;  $ }
long long ui ( int x ) {  $ ~int i ;  $ ~int k = 0 ;  $ ~for ( i = 1 ; i <= x ; i ++ ) { k += i ; }  $ ~return k ;  $ }  $ int main ( ) {  $ ~int n ;  $ ~while ( cin >> n ) {  $ ~~int i ;  $ ~~int u ;  $ ~~long long t = 0 ;  $ ~~for ( i = 1 ; i < 100000 ; i ++ ) {  $ ~~~t += ui ( i ) ;  $ ~~~if ( n >= t ) {  $ ~~~~u = i ;  $ ~~~} else {  $ ~~~~break ;  $ ~~~}  $ ~~}  $ ~~cout << u << endl ;  $ ~}  $ }
int gcd ( int a , int b ) {  $ ~int i , g ;  $ ~for ( i = 1 ; i <= a && i <= b ; i ++ ) {  $ ~~if ( a % i == 0 && b % i == 0 ) { g = i ; }  $ ~}  $ ~return g ;  $ }  $ int main ( ) {  $ ~int i , j , t , l ;  $ ~cin >> t ;  $ ~int a [ t ] ;  $ ~for ( i = 0 ; i <= t - 1 ; i ++ ) { cin >> a [ i ] ; }  $ ~l = gcd ( a [ 0 ] , a [ 1 ] ) ;  $ ~for ( j = 2 ; j <= t - 1 ; j ++ ) { l = gcd ( l , a [ j ] ) ; }  $ ~cout << l * t << endl ;  $ }
const int maxx = 1e6 ;  $ int a [ maxx ] ;  $ int read ( ) {  $ ~int k ;  $ ~cin >> k ;  $ ~return k ;  $ }  $ long long sum ;  $ long long n , m ;  $ long long Max = 0 , A , S ;  $ int main ( ) {  $ ~cin >> n ;  $ ~if ( n % 10 <= 5 )  $ ~~n -= n % 10 ;  $ ~else  $ ~~n = n - n % 10 + 10 ;  $ ~cout << n << endl ;  $ ~return 0 ;  $ }
int n , k , a , s = 0 , all = 0 ;  $ int main ( ) {  $ ~cin >> n >> k ;  $ ~for ( int i = 1 ; i <= n ; i ++ ) {  $ ~~cin >> a ;  $ ~~a += s ;  $ ~~s = 0 ;  $ ~~if ( a > 8 ) {  $ ~~~s += a - 8 ;  $ ~~~a = 8 ;  $ ~~}  $ ~~all += a ;  $ ~~if ( all >= k ) {  $ ~~~cout << i << endl ;  $ ~~~return 0 ;  $ ~~}  $ ~}  $ ~cout << - 1 << endl ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~int n , m , cnt = 0 ;  $ ~string str ;  $ ~int arr [ 15 ] ;  $ ~cin >> n >> m ;  $ ~for ( int i = 0 ; i < n ; i ++ ) {  $ ~~for ( int j = 0 ; j <= m ; j ++ ) { arr [ j ] = 0 ; }  $ ~~cin >> str ;  $ ~~int len = str . length ( ) ;  $ ~~for ( int j = 0 ; j < len ; j ++ ) { arr [ str [ j ] - '0' ] = 1 ; }  $ ~~int flag = 0 ;  $ ~~for ( int j = 0 ; j <= m ; j ++ ) {  $ ~~~if ( arr [ j ] == 0 ) {  $ ~~~~flag = 1 ;  $ ~~~~break ;  $ ~~~}  $ ~~}  $ ~~if ( ! flag ) { cnt ++ ; }  $ ~}  $ ~cout << cnt << endl ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~int t , s , q , ans = 1 ;  $ ~;  $ ~cin >> t >> s >> q ;  $ ~while ( q * s < t ) {  $ ~~ans ++ ;  $ ~~s *= q ;  $ ~}  $ ~cout << ans << '\n' ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~int x , y , z , a ;  $ ~cin >> x >> y >> z ;  $ ~a = sqrt ( x * y / z ) ;  $ ~a += sqrt ( x * z / y ) ;  $ ~a += sqrt ( z * y / x ) ;  $ ~cout << a * 4 << endl ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~int n ;  $ ~cin >> n ;  $ ~string arr [ n ] [ 2 ] ;  $ ~for ( int r = 0 ; r < n ; r ++ ) { cin >> arr [ r ] [ 0 ] >> arr [ r ] [ 1 ] ; }  $ ~for ( int r = 0 ; r < n ; r ++ ) {  $ ~~if ( arr [ r ] [ 1 ] == "rat" ) { cout << arr [ r ] [ 0 ] << endl ; }  $ ~}  $ ~for ( int r = 0 ; r < n ; r ++ ) {  $ ~~if ( ( arr [ r ] [ 1 ] == "woman" ) || ( arr [ r ] [ 1 ] == "child" ) ) { cout << arr [ r ] [ 0 ] << endl ; }  $ ~}  $ ~for ( int r = 0 ; r < n ; r ++ ) {  $ ~~if ( arr [ r ] [ 1 ] == "man" ) { cout << arr [ r ] [ 0 ] << endl ; }  $ ~}  $ ~for ( int r = 0 ; r < n ; r ++ ) {  $ ~~if ( arr [ r ] [ 1 ] == "captain" ) { cout << arr [ r ] [ 0 ] << endl ; }  $ ~}  $ ~return 0 ;  $ }
int main ( ) {  $ ~int n ;  $ ~int a [ 102 ] ;  $ ~int sum = 0 ;  $ ~cin >> n ;  $ ~for ( int i = 1 ; i <= n ; i ++ ) {  $ ~~cin >> a [ i ] ;  $ ~~sum += a [ i ] * ( i - 1 ) * 4 ;  $ ~}  $ ~cout << sum << endl ;  $ ~return 0 ;  $ }
int n , a [ 105 ] ;  $ map < char , int > mp ;  $ int main ( ) {  $ ~cin >> n ;  $ ~mp [ 'R' ] = 5 ;  $ ~mp [ 'G' ] = 6 ;  $ ~mp [ 'B' ] = 7 ;  $ ~mp [ 'Y' ] = 8 ;  $ ~mp [ 'W' ] = 9 ;  $ ~for ( int i = 0 ; i < n ; i ++ ) {  $ ~~string s ;  $ ~~cin >> s ;  $ ~~int c , v ;  $ ~~c = mp [ s [ 0 ] ] ;  $ ~~v = s [ 1 ] - '0' - 1 ;  $ ~~a [ i ] = ( 1 << c ) | ( 1 << v ) ;  $ ~}  $ ~sort ( a , a + n ) ;  $ ~n = unique ( a , a + n ) - a ;  $ ~int ans = 11 ;  $ ~for ( int msk = 0 ; msk < ( 1 << 10 ) ; msk ++ ) {  $ ~~bool f = true ;  $ ~~for ( int i = 0 ; i < n ; i ++ ) {  $ ~~~for ( int j = i + 1 ; j < n ; j ++ ) {  $ ~~~~int t = a [ i ] ^ a [ j ] ;  $ ~~~~if ( ( msk & t ) == 0 ) {  $ ~~~~~f = false ;  $ ~~~~~break ;  $ ~~~~}  $ ~~~}  $ ~~~if ( ! f ) break ;  $ ~~}  $ ~~if ( f ) { ans = min ( ans , __builtin_popcount ( msk ) ) ; }  $ ~}  $ ~cout << ans << endl ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~int a ;  $ ~cin >> a ;  $ ~cout << a % 2 << endl ;  $ }
int main ( ) {  $ ~int test = 1 ;  $ ~while ( test -- ) {  $ ~~int n , m , i , j , x , y , s , q , a , b , c ;  $ ~~long int k ;  $ ~~cin >> n ;  $ ~~int count = 0 ;  $ ~~while ( n ) {  $ ~~~n &= ( n - 1 ) ;  $ ~~~count ++ ;  $ ~~}  $ ~~cout << count << "\n" ;  $ ~}  $ ~return 0 ;  $ }
int main ( ) {  $ ~int n , x , y , z , xsum ( 0 ) , ysum ( 0 ) , zsum ( 0 ) ;  $ ~cin >> n ;  $ ~while ( n -- ) {  $ ~~cin >> x >> y >> z ;  $ ~~xsum += x ;  $ ~~ysum += y ;  $ ~~zsum += z ;  $ ~}  $ ~if ( xsum == 0 && ysum == 0 && zsum == 0 ) {  $ ~~cout << "YES" << endl ;  $ ~} else {  $ ~~cout << "NO" << endl ;  $ ~}  $ ~return 0 ;  $ }
int arr [ 6 ] ;  $ int main ( ) {  $ ~int sum = 0 ;  $ ~for ( int i = 0 ; i < 6 ; i ++ ) {  $ ~~cin >> arr [ i ] ;  $ ~~sum += arr [ i ] ;  $ ~}  $ ~for ( int i = 0 ; i < 4 ; i ++ ) {  $ ~~for ( int j = i + 1 ; j < 5 ; j ++ ) {  $ ~~~for ( int k = j + 1 ; k < 6 ; k ++ ) {  $ ~~~~int curs = arr [ i ] + arr [ j ] + arr [ k ] ;  $ ~~~~if ( sum == curs * 2 ) {  $ ~~~~~cout << "YES\n" ;  $ ~~~~~return 0 ;  $ ~~~~}  $ ~~~}  $ ~~}  $ ~}  $ ~cout << "NO\n" ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~int n { } , t { } , k { } , d { } ;  $ ~cin >> n >> t >> k >> d ;  $ ~if ( ( ( d + t ) / t ) * k < n )  $ ~~cout << "YES" << endl ;  $ ~else  $ ~~cout << "NO" << endl ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~int n , k ;  $ ~cin >> n >> k ;  $ ~int red = ceil ( 2 * n * 1.0 / k ) ;  $ ~int green = ceil ( 5 * n * 1.0 / k ) ;  $ ~int blue = ceil ( 8 * n * 1.0 / k ) ;  $ ~cout << red + green + blue << endl ;  $ ~return 0 ;  $ }
const long long N = 1e9 + 3 ;  $ const long long MN = 1e9 ;  $ long long k , n , s , p , c , cnt ;  $ int main ( ) {  $ ~cin >> k >> n >> s >> p ;  $ ~c = ( n + s - 1 ) / s ;  $ ~cnt = c * k ;  $ ~cout << ( cnt + p - 1 ) / p ;  $ ~cout << "\n" ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~int a , b ;  $ ~int arr [ 5 ] [ 5 ] ;  $ ~for ( int i = 0 ; i < 5 ; i ++ ) {  $ ~~for ( int j = 0 ; j < 5 ; j ++ ) {  $ ~~~cin >> arr [ i ] [ j ] ;  $ ~~~if ( arr [ i ] [ j ] == 1 ) {  $ ~~~~a = i ;  $ ~~~~b = j ;  $ ~~~}  $ ~~}  $ ~}  $ ~int k = 0 ;  $ ~while ( a != 2 ) {  $ ~~if ( a > 2 ) {  $ ~~~a -- ;  $ ~~~k ++ ;  $ ~~} else {  $ ~~~a ++ ;  $ ~~~k ++ ;  $ ~~}  $ ~}  $ ~while ( b != 2 ) {  $ ~~if ( b > 2 ) {  $ ~~~b -- ;  $ ~~~k ++ ;  $ ~~} else {  $ ~~~b ++ ;  $ ~~~k ++ ;  $ ~~}  $ ~}  $ ~cout << k << endl ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~int n , sum , a [ 1001 ] ;  $ ~while ( cin >> n ) {  $ ~~sum = 0 ;  $ ~~for ( int i = 0 ; i < n ; i ++ ) { cin >> a [ i ] ; }  $ ~~for ( int i = 1 ; i < n - 1 ; i ++ ) {  $ ~~~if ( a [ i ] < a [ i - 1 ] )  $ ~~~~if ( a [ i ] < a [ i + 1 ] ) { sum ++ ; }  $ ~~~if ( a [ i ] > a [ i - 1 ] )  $ ~~~~if ( a [ i ] > a [ i + 1 ] ) { sum ++ ; }  $ ~~}  $ ~~cout << sum << endl ;  $ ~}  $ ~return 0 ;  $ }
int main ( ) {  $ ~int n , p , q ;  $ ~cin >> n ;  $ ~cin >> p ;  $ ~int x ;  $ ~map < int , bool > m ;  $ ~for ( int i = 0 ; i < p ; i ++ ) {  $ ~~cin >> x ;  $ ~~m [ x ] = true ;  $ ~}  $ ~cin >> q ;  $ ~for ( int i = 0 ; i < q ; i ++ ) {  $ ~~cin >> x ;  $ ~~m [ x ] = true ;  $ ~}  $ ~int flag = 0 ;  $ ~if ( p + q < n ) {  $ ~~cout << "Oh, my keyboard!" << endl ;  $ ~~return 0 ;  $ ~}  $ ~for ( int i = 1 ; i <= n ; i ++ ) {  $ ~~if ( m [ i ] == false ) {  $ ~~~flag = 1 ;  $ ~~~cout << "Oh, my keyboard!" << endl ;  $ ~~~break ;  $ ~~}  $ ~}  $ ~if ( flag == 0 ) cout << "I become the guy." << endl ;  $ ~return 0 ;  $ }
vector < int > ans ;  $ int main ( ) {  $ ~int n , temp , temp1 ;  $ ~cin >> n ;  $ ~for ( int i = 1 ; i <= 90 ; i ++ ) {  $ ~~temp = n - i ;  $ ~~if ( temp <= 0 ) break ;  $ ~~temp1 = 0 ;  $ ~~while ( temp ) {  $ ~~~int d = temp % 10 ;  $ ~~~temp1 += d ;  $ ~~~temp /= 10 ;  $ ~~}  $ ~~if ( temp1 == i ) ans . push_back ( n - i ) ;  $ ~}  $ ~cout << ans . size ( ) << endl ;  $ ~for ( int i = ans . size ( ) - 1 ; i >= 0 ; i -- ) cout << ans [ i ] << endl ;  $ ~return 0 ;  $ }
int l ;  $ char a [ 150 ] , b [ 150 ] ;  $ int main ( ) {  $ ~cin >> a >> b ;  $ ~l = strlen ( a ) ;  $ ~for ( int i = 0 ; i < l ; i ++ ) {  $ ~~if ( 'A' <= a [ i ] && a [ i ] <= 'Z' ) a [ i ] = a [ i ] + 32 ;  $ ~~if ( 'A' <= b [ i ] && b [ i ] <= 'Z' ) b [ i ] = b [ i ] + 32 ;  $ ~~if ( a [ i ] < b [ i ] ) {  $ ~~~cout << "-1" << endl ;  $ ~~~break ;  $ ~~} else {  $ ~~~if ( b [ i ] < a [ i ] ) {  $ ~~~~cout << "1" << endl ;  $ ~~~~break ;  $ ~~~} else if ( a [ i ] == b [ i ] && i == l - 1 )  $ ~~~~cout << "0" << endl ;  $ ~~}  $ ~}  $ ~return 0 ;  $ }
int a [ 105 ] ;  $ long long summ ( int l , int r ) {  $ ~long long ans = 0 ;  $ ~for ( int i = l ; i <= r ; i ++ ) { ans += a [ i ] ; }  $ ~return ans ;  $ }  $ int main ( ) {  $ ~int n ;  $ ~cin >> n ;  $ ~long long sum = 0 ;  $ ~int ans = 0 ;  $ ~for ( int i = 1 ; i <= n ; i ++ ) {  $ ~~cin >> a [ i ] ;  $ ~~sum += a [ i ] ;  $ ~~if ( a [ i ] == 0 ) ans ++ ;  $ ~}  $ ~if ( sum == 0 ) {  $ ~~if ( ans == n ) {  $ ~~~cout << "NO" << endl ;  $ ~~} else {  $ ~~~for ( int i = 1 ; i < n ; i ++ ) {  $ ~~~~if ( summ ( 1 , i ) != 0 && summ ( i + 1 , n ) != 0 ) {  $ ~~~~~cout << "YES" << endl << 2 << endl ;  $ ~~~~~cout << 1 << " " << i << endl ;  $ ~~~~~cout << i + 1 << " " << n << endl ;  $ ~~~~~break ;  $ ~~~~}  $ ~~~}  $ ~~}  $ ~} else {  $ ~~cout << "YES" << endl ;  $ ~~cout << 1 << endl ;  $ ~~cout << 1 << " " << n << endl ;  $ ~}  $ ~return 0 ;  $ }
int main ( ) {  $ ~int i , j , k , l ;  $ ~int a [ 3 ] [ 3 ] = { 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 } ;  $ ~int b [ 3 ] [ 3 ] ;  $ ~for ( i = 0 ; i < 3 ; i ++ ) {  $ ~~for ( j = 0 ; j < 3 ; j ++ ) { cin >> b [ i ] [ j ] ; }  $ ~}  $ ~for ( i = 0 ; i < 3 ; i ++ ) {  $ ~~for ( j = 0 ; j < 3 ; j ++ ) {  $ ~~~if ( b [ i ] [ j ] % 2 == 1 ) {  $ ~~~~a [ i ] [ j ] = a [ i ] [ j ] ^ 1 ;  $ ~~~~if ( i + 1 >= 0 && i + 1 <= 2 ) { a [ i + 1 ] [ j ] = a [ i + 1 ] [ j ] ^ 1 ; }  $ ~~~~if ( j + 1 >= 0 && j + 1 <= 2 ) { a [ i ] [ j + 1 ] = a [ i ] [ j + 1 ] ^ 1 ; }  $ ~~~~if ( i - 1 >= 0 && i - 1 <= 2 ) { a [ i - 1 ] [ j ] = a [ i - 1 ] [ j ] ^ 1 ; }  $ ~~~~if ( j - 1 >= 0 && j - 1 <= 2 ) { a [ i ] [ j - 1 ] = a [ i ] [ j - 1 ] ^ 1 ; }  $ ~~~}  $ ~~}  $ ~}  $ ~for ( k = 0 ; k < 3 ; k ++ ) {  $ ~~for ( l = 0 ; l < 3 ; l ++ ) { cout << a [ k ] [ l ] ; }  $ ~~cout << endl ;  $ ~}  $ ~return 0 ;  $ }
multimap < long long int , long long int > m ;  $ int main ( ) {  $ ~long long int a , b , i , j ;  $ ~cin >> a >> b ;  $ ~long long int flag = 1 ;  $ ~for ( i = 1 ; i <= a ; i ++ ) {  $ ~~if ( i % 2 != 0 ) {  $ ~~~for ( j = 0 ; j < b ; j ++ ) cout << "#" ;  $ ~~~cout << endl ;  $ ~~}  $ ~~if ( i % 2 == 0 ) {  $ ~~~if ( flag ) {  $ ~~~~for ( j = 0 ; j < b - 1 ; j ++ ) cout << "." ;  $ ~~~~cout << "#" << endl ;  $ ~~~~flag = 0 ;  $ ~~~} else {  $ ~~~~cout << "#" ;  $ ~~~~flag = 1 ;  $ ~~~~for ( j = 0 ; j < b - 1 ; j ++ ) cout << "." ;  $ ~~~~cout << endl ;  $ ~~~}  $ ~~}  $ ~}  $ }
int main ( ) {  $ ~int n ;  $ ~cin >> n ;  $ ~while ( n ) {  $ ~~int d ;  $ ~~cin >> d ;  $ ~~if ( 360 % ( 180 - d ) == 0 )  $ ~~~cout << "YES" << endl ;  $ ~~else  $ ~~~cout << "NO" << endl ;  $ ~~n -- ;  $ ~}  $ ~return 0 ;  $ }
int main ( ) {  $ ~string b ;  $ ~char sz [ 101 ] [ 101 ] ;  $ ~int n , m ;  $ ~cin >> n >> m ;  $ ~for ( int i = 1 ; i <= n ; i ++ ) {  $ ~~cin >> b ;  $ ~~for ( int j = 1 ; j <= m ; j ++ )  $ ~~~if ( b [ j - 1 ] == '.' ) {  $ ~~~~if ( ( i + j ) % 2 == 1 )  $ ~~~~~sz [ i ] [ j ] = 'W' ;  $ ~~~~else  $ ~~~~~sz [ i ] [ j ] = 'B' ;  $ ~~~} else  $ ~~~~sz [ i ] [ j ] = b [ j - 1 ] ;  $ ~}  $ ~for ( int i = 1 ; i <= n ; i ++ ) {  $ ~~for ( int j = 1 ; j <= m ; j ++ ) { cout << sz [ i ] [ j ] ; }  $ ~~cout << endl ;  $ ~}  $ ~return 0 ;  $ }
int main ( ) {  $ ~int x ;  $ ~cin >> x ;  $ ~x -= 10 ;  $ ~if ( x == 10 )  $ ~~cout << 15 << endl ;  $ ~else if ( x >= 1 && x <= 11 )  $ ~~cout << 4 << endl ;  $ ~else  $ ~~cout << 0 << endl ;  $ ~return 0 ;  $ }
const int man = 1e5 + 5 ;  $ const long long mod = 1e9 + 7 ;  $ int main ( ) {  $ ~double l , a , b ;  $ ~double t1 , t2 ;  $ ~double a1 , a2 ;  $ ~cin >> l >> a >> b ;  $ ~t1 = l / ( a + b ) ;  $ ~a1 = a * t1 ;  $ ~cout << a1 << endl ;  $ ~return 0 ;  $ }
int a [ 300005 ] ;  $ int main ( ) {  $ ~long long int n ;  $ ~cin >> n ;  $ ~long long int sum = 0 ;  $ ~for ( long long int i = 0 ; i < n ; i ++ ) { cin >> a [ i ] ; }  $ ~sort ( a , a + n ) ;  $ ~for ( long long int i = 0 ; i < n ; i ++ ) { sum += a [ i ] * ( i + 2 ) ; }  $ ~cout << sum - a [ n - 1 ] << endl ;  $ }
int ring ( int a , int b ) {  $ ~return 2 * a + 2 * b - 4 ;  $ }  $ int main ( ) {  $ ~int n , m , a ;  $ ~cin >> n >> m >> a ;  $ ~int suma = 0 ;  $ ~for ( int i = 1 ; i <= a ; i ++ ) { suma += ring ( n - 4 * i + 4 , m - 4 * i + 4 ) ; }  $ ~cout << suma << endl ;  $ ~return 0 ;  $ }
int teto ( int num , int div ) {  $ ~if ( num == 0 ) return 0 ;  $ ~return 1 + ( num - 1 ) / div ;  $ }  $ int main ( ) {  $ ~int n , m ;  $ ~cin >> n >> m ;  $ ~int a [ n ] ;  $ ~for ( int i = 0 ; i < n ; i ++ ) cin >> a [ i ] ;  $ ~int mx = * max_element ( a , a + n ) ;  $ ~int ans2 = mx + m ;  $ ~sort ( a , a + n ) ;  $ ~int aux = m ;  $ ~for ( int i = 0 ; i < n - 1 ; i ++ ) {  $ ~~if ( aux < ( a [ n - 1 ] - a [ i ] ) ) {  $ ~~~cout << a [ n - 1 ] << ' ' << ans2 << '\n' ;  $ ~~~return 0 ;  $ ~~}  $ ~~aux -= ( a [ n - 1 ] - a [ i ] ) ;  $ ~}  $ ~cout << a [ n - 1 ] + teto ( aux , n ) << ' ' << ans2 << '\n' ;  $ ~return 0 ;  $ }
map < string , int > m ;  $ map < string , int > : : iterator it ;  $ int main ( ) {  $ ~string x ;  $ ~cin >> x ;  $ ~for ( int i = x . size ( ) ; i > 0 ; i -- ) {  $ ~~m . clear ( ) ;  $ ~~for ( int j = 0 ; j <= x . size ( ) - i ; j ++ ) {  $ ~~~string s ( x . begin ( ) + j , x . begin ( ) + j + i ) ;  $ ~~~m [ s ] ++ ;  $ ~~}  $ ~~for ( it = m . begin ( ) ; it != m . end ( ) ; it ++ ) {  $ ~~~if ( it -> second > 1 ) return cout << i << endl && 0 ;  $ ~~}  $ ~}  $ ~cout << 0 << endl ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~cout << "Karen" << endl ;  $ }
int n , m ;  $ string s ;  $ int main ( ) {  $ ~cin >> n >> m >> s ;  $ ~int l , r ;  $ ~char a , b ;  $ ~for ( int i = 0 ; i < m ; i ++ ) {  $ ~~cin >> l >> r >> a >> b ;  $ ~~for ( int j = l - 1 ; j < r ; j ++ )  $ ~~~if ( s [ j ] == a ) s [ j ] = b ;  $ ~}  $ ~cout << s << endl ;  $ }
int main ( ) {  $ ~vector < int > v [ 4 ] ;  $ ~int n , x , m = 5005 ;  $ ~cin >> n ;  $ ~for ( int i = 1 ; i <= n ; i ++ ) {  $ ~~cin >> x ;  $ ~~v [ x ] . push_back ( i ) ;  $ ~}  $ ~for ( int i = 1 ; i <= 3 ; i ++ ) m = min ( ( int ) v [ i ] . size ( ) , m ) ;  $ ~cout << m << endl ;  $ ~for ( int i = 0 ; i < m ; i ++ ) { cout << v [ 1 ] [ i ] << " " << v [ 2 ] [ i ] << " " << v [ 3 ] [ i ] << endl ; }  $ ~return 0 ;  $ }
int main ( ) {  $ ~string s ;  $ ~cin >> s ;  $ ~bool ok = 0 ;  $ ~int len = ( int ) s . size ( ) ;  $ ~for ( int i = 0 ; i < len && ! ok ; ) {  $ ~~if ( s [ i ] == '1' && s [ i + 1 ] == '4' && s [ i + 2 ] == '4' )  $ ~~~i += 3 ;  $ ~~else if ( s [ i ] == '1' && s [ i + 1 ] == '4' )  $ ~~~i += 2 ;  $ ~~else if ( s [ i ] == '1' )  $ ~~~i ++ ;  $ ~~else  $ ~~~ok = 1 ;  $ ~}  $ ~if ( ok )  $ ~~cout << "NO" << endl ;  $ ~else  $ ~~cout << "YES" << endl ;  $ ~return 0 ;  $ }
const int M = 50 + 5 ;  $ int main ( ) {  $ ~int n , m ;  $ ~cin >> n >> m ;  $ ~if ( n == 0 ) {  $ ~~if ( m > 0 ) {  $ ~~~cout << "Impossible" << endl ;  $ ~~} else {  $ ~~~cout << "0 0" << endl ;  $ ~~}  $ ~} else {  $ ~~if ( m == 0 ) {  $ ~~~cout << n << " " << n << endl ;  $ ~~} else {  $ ~~~int minv = n + max ( m - n , 0 ) ;  $ ~~~int maxv = n + m - 1 ;  $ ~~~cout << minv << " " << maxv << endl ;  $ ~~}  $ ~}  $ ~return 0 ;  $ }
int main ( ) {  $ ~int n ;  $ ~int x1 , y1 , x2 , y2 ;  $ ~while ( cin >> n ) {  $ ~~int s = 0 ;  $ ~~while ( n -- ) {  $ ~~~cin >> x1 >> y1 >> x2 >> y2 ;  $ ~~~s += ( x2 - x1 + 1 ) * ( y2 - y1 + 1 ) ;  $ ~~}  $ ~~cout << s << endl ;  $ ~}  $ ~return 0 ;  $ }
void brickSort ( int arr [ ] , int num ) {  $ ~bool sorted = false ;  $ ~while ( ! sorted ) {  $ ~~sorted = true ;  $ ~~for ( int i = 1 ; i <= num - 2 ; i = i + 2 ) {  $ ~~~if ( arr [ i ] > arr [ i + 1 ] ) {  $ ~~~~swap ( arr [ i ] , arr [ i + 1 ] ) ;  $ ~~~~sorted = false ;  $ ~~~}  $ ~~}  $ ~~for ( int i = 0 ; i <= num - 2 ; i = i + 2 ) {  $ ~~~if ( arr [ i ] > arr [ i + 1 ] ) {  $ ~~~~swap ( arr [ i ] , arr [ i + 1 ] ) ;  $ ~~~~sorted = false ;  $ ~~~}  $ ~~}  $ ~}  $ ~return ;  $ }  $ int main ( ) {  $ ~int secretaries_num ;  $ ~int counter = 0 ;  $ ~int flag = 0 ;  $ ~cin >> secretaries_num ;  $ ~int spyke_id [ secretaries_num ] ;  $ ~for ( int i = 0 ; i < secretaries_num ; i ++ ) { cin >> spyke_id [ i ] ; }  $ ~brickSort ( spyke_id , secretaries_num ) ;  $ ~for ( int i = 0 ; i < secretaries_num ; i ++ ) {  $ ~~flag = i + 2 ;  $ ~~if ( spyke_id [ i ] == spyke_id [ i + 1 ] && spyke_id [ i ] != 0 ) { counter ++ ; }  $ ~~if ( spyke_id [ i ] == spyke_id [ flag ] && spyke_id [ i ] != 0 ) {  $ ~~~counter = - 1 ;  $ ~~~break ;  $ ~~}  $ ~}  $ ~cout << counter << endl ;  $ }
int main ( ) {  $ ~int X ;  $ ~cin >> X ;  $ ~if ( X <= 2 ) {  $ ~~cout << X << '\n' ;  $ ~~return 0 ;  $ ~}  $ ~cout << 1 << '\n' ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~float m , n ;  $ ~float k ;  $ ~cin >> k ;  $ ~cin >> n >> m ;  $ ~double p ;  $ ~p = ( k ) / ( n + m ) ;  $ ~double answer ;  $ ~answer = p * ( n ) ;  $ ~cout << answer << endl ;  $ }
int main ( ) {  $ ~string a ;  $ ~int n ;  $ ~cin >> a >> n ;  $ ~int l = a . length ( ) ;  $ ~if ( l % n ) {  $ ~~cout << "NO\n" ;  $ ~~return 0 ;  $ ~}  $ ~n = l / n ;  $ ~for ( int i = 0 ; i < l ; i += n ) {  $ ~~int end = i + n - 1 ;  $ ~~int begin = i ;  $ ~~while ( begin <= end ) {  $ ~~~if ( a [ begin ] == a [ end ] ) {  $ ~~~~begin ++ ;  $ ~~~~end -- ;  $ ~~~} else {  $ ~~~~cout << "NO\n" ;  $ ~~~~return 0 ;  $ ~~~}  $ ~~}  $ ~}  $ ~cout << "YES\n" ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~int n ;  $ ~cin >> n ;  $ ~int * A = new int [ n ] ;  $ ~for ( int i = 0 ; i < n ; i ++ ) cin >> A [ i ] ;  $ ~int count1 ( 0 ) , count2 ( 0 ) , count3 ( 0 ) ;  $ ~for ( int i = 0 ; i < n ; i ++ )  $ ~~if ( A [ i ] == 1 )  $ ~~~count1 ++ ;  $ ~~else if ( A [ i ] == 2 )  $ ~~~count2 ++ ;  $ ~~else if ( A [ i ] == 3 )  $ ~~~count3 ++ ;  $ ~int result = - 1 ;  $ ~if ( count1 >= count2 ) {  $ ~~if ( count1 >= count3 )  $ ~~~result = count2 + count3 ;  $ ~~else  $ ~~~result = count1 + count2 ;  $ ~} else if ( count2 >= count3 )  $ ~~result = count1 + count3 ;  $ ~else  $ ~~result = count1 + count2 ;  $ ~cout << result << endl ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~int n , i , ct = 0 ;  $ ~string ch ;  $ ~cin >> n ;  $ ~for ( i = 1 ; i <= n ; i ++ ) {  $ ~~cin >> ch ;  $ ~~if ( ch == "Tetrahedron" ) {  $ ~~~ct = ct + 4 ;  $ ~~} else if ( ch == "Cube" ) {  $ ~~~ct = ct + 6 ;  $ ~~} else if ( ch == "Icosahedron" ) {  $ ~~~ct = ct + 20 ;  $ ~~} else if ( ch == "Octahedron" ) {  $ ~~~ct = ct + 8 ;  $ ~~} else if ( ch == "Dodecahedron" ) {  $ ~~~ct = ct + 12 ;  $ ~~} else {  $ ~~}  $ ~}  $ ~cout << ct << endl ;  $ ~return 0 ;  $ }
long long x , y , x2 , y2 , a , b ;  $ int main ( ) {  $ ~cin >> x >> y >> x2 >> y2 >> a >> b ;  $ ~if ( abs ( x - x2 ) % a != 0 || abs ( y - y2 ) % b != 0 ) {  $ ~~cout << "NO" << endl ;  $ ~~return 0 ;  $ ~}  $ ~long long o1 = abs ( x - x2 ) / a ;  $ ~long long o2 = abs ( y - y2 ) / b ;  $ ~if ( o1 % 2 != o2 % 2 ) {  $ ~~cout << "NO" << endl ;  $ ~~return 0 ;  $ ~}  $ ~cout << "YES" << endl ;  $ ~return 0 ;  $ }
int n , k ;  $ string s ;  $ bool way = 0 ;  $ int main ( ) {  $ ~cin >> n >> k >> s ;  $ ~if ( 2 * k <= n ) {  $ ~~way = 1 ;  $ ~~for ( int i = 1 ; i < k ; i ++ ) cout << "LEFT\n" ;  $ ~~k = 0 ;  $ ~} else {  $ ~~way = 0 ;  $ ~~for ( int i = 1 ; i <= n - k ; i ++ ) cout << "RIGHT\n" ;  $ ~~k = n - 1 ;  $ ~}  $ ~if ( way == 1 ) {  $ ~~cout << "PRINT " << s [ 0 ] << endl ;  $ ~~for ( int i = 1 ; i < n ; i ++ ) {  $ ~~~cout << "RIGHT\n" ;  $ ~~~cout << "PRINT " << s [ i ] << endl ;  $ ~~}  $ ~} else {  $ ~~cout << "PRINT " << s [ n - 1 ] << endl ;  $ ~~for ( int i = n - 2 ; i >= 0 ; i -- ) {  $ ~~~cout << "LEFT\n" ;  $ ~~~cout << "PRINT " << s [ i ] << endl ;  $ ~~}  $ ~}  $ }
int main ( ) {  $ ~int s , v1 , v2 , t1 , t2 , a , b , c , d ;  $ ~cin >> s >> v1 >> v2 >> t1 >> t2 ;  $ ~c = v1 * s + 2 * t1 ;  $ ~d = v2 * s + 2 * t2 ;  $ ~if ( c < d ) {  $ ~~cout << "First" << endl ;  $ ~} else if ( c == d ) {  $ ~~cout << "Friendship" << endl ;  $ ~} else if ( c > d ) {  $ ~~cout << "Second" << endl ;  $ ~}  $ ~return 0 ;  $ }
int main ( ) {  $ ~int n , k ;  $ ~cin >> n >> k ;  $ ~vector < int > v ( n ) ;  $ ~for ( int i = 0 ; i < n ; i ++ ) cin >> v [ i ] ;  $ ~int ans = 0 ;  $ ~int fi = n - 1 ;  $ ~for ( int i = 0 ; i < ( int ) v . size ( ) ; i ++ ) {  $ ~~if ( v [ i ] <= k )  $ ~~~ans ++ ;  $ ~~else {  $ ~~~fi = i ;  $ ~~~break ;  $ ~~}  $ ~}  $ ~for ( int i = n - 1 ; i > fi ; i -- ) {  $ ~~if ( v [ i ] <= k )  $ ~~~ans ++ ;  $ ~~else  $ ~~~break ;  $ ~}  $ ~cout << ans << endl ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~int input_len , input_op ;  $ ~cin >> input_len >> input_op ;  $ ~string str ;  $ ~cin >> str ;  $ ~int start , end ;  $ ~char c1 , c2 ;  $ ~while ( cin >> start >> end >> c1 >> c2 ) {  $ ~~for ( int i = start - 1 ; i < end ; i ++ ) {  $ ~~~if ( str [ i ] == c1 ) str [ i ] = c2 ;  $ ~~}  $ ~}  $ ~cout << str << endl ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~long long w , h , k ;  $ ~cin >> w >> h >> k ;  $ ~cout << 2 * k * ( w + h - 2 ) - 8 * ( k * ( k - 1 ) ) << endl ;  $ }
const long long int MOD = 1000000007 ;  $ long long int N , M , K , H , W , L , R ;  $ int main ( ) {  $ ~cin >> N ;  $ ~cout << N % 2 << endl ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~int n ;  $ ~cin >> n ;  $ ~int a [ n ] ;  $ ~for ( int i = 0 ; i < n ; i ++ ) { cin >> a [ i ] ; }  $ ~int out = 0 ;  $ ~for ( int i = 0 ; i < n ; i ++ ) {  $ ~~if ( a [ i ] == 1 ) { out ++ ; }  $ ~}  $ ~for ( int i = 1 ; i < n - 1 ; i ++ ) {  $ ~~if ( a [ i ] == 0 && a [ i - 1 ] == 1 && a [ i + 1 ] == 1 ) { out ++ ; }  $ ~}  $ ~cout << out << endl ;  $ }
int main ( ) {  $ ~long long int n , k ;  $ ~long long int m ;  $ ~cin >> n >> k ;  $ ~if ( k <= n )  $ ~~m = 1 ;  $ ~else if ( k % n == 0 )  $ ~~m = k / n ;  $ ~else  $ ~~m = k / n + 1 ;  $ ~cout << m << endl ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~long long int n , a , b ;  $ ~cin >> n >> a >> b ;  $ ~string s ;  $ ~cin >> s ;  $ ~if ( s [ a - 1 ] == s [ b - 1 ] ) {  $ ~~cout << "0" << '\n' ;  $ ~} else {  $ ~~cout << "1" << '\n' ;  $ ~}  $ ~return 0 ;  $ }
int main ( ) {  $ ~char a [ 10 ] , b [ 10 ] ;  $ ~cin >> a >> b ;  $ ~int x1 = a [ 0 ] - 'a' + 1 , y1 = a [ 1 ] - '0' , x2 = b [ 0 ] - 'a' + 1 , y2 = b [ 1 ] - '0' ;  $ ~int ans = max ( fabs ( x1 - x2 ) , fabs ( y1 - y2 ) ) ;  $ ~cout << ans << endl ;  $ ~while ( ans -- ) {  $ ~~if ( x1 != x2 ) {  $ ~~~if ( x1 > x2 ) {  $ ~~~~if ( y1 == y2 ) {  $ ~~~~~x1 -- ;  $ ~~~~~cout << "L" << endl ;  $ ~~~~} else if ( y1 > y2 ) {  $ ~~~~~y1 -- ;  $ ~~~~~x1 -- ;  $ ~~~~~cout << "LD" << endl ;  $ ~~~~} else {  $ ~~~~~y2 -- ;  $ ~~~~~x1 -- ;  $ ~~~~~cout << "LU" << endl ;  $ ~~~~}  $ ~~~} else {  $ ~~~~if ( y1 == y2 ) {  $ ~~~~~x2 -- ;  $ ~~~~~cout << "R" << endl ;  $ ~~~~} else if ( y1 > y2 ) {  $ ~~~~~y1 -- ;  $ ~~~~~x2 -- ;  $ ~~~~~cout << "RD" << endl ;  $ ~~~~} else {  $ ~~~~~y2 -- ;  $ ~~~~~x2 -- ;  $ ~~~~~cout << "RU" << endl ;  $ ~~~~}  $ ~~~}  $ ~~} else {  $ ~~~if ( y1 > y2 ) {  $ ~~~~y1 -- ;  $ ~~~~cout << "D" << endl ;  $ ~~~} else {  $ ~~~~y2 -- ;  $ ~~~~cout << "U" << endl ;  $ ~~~}  $ ~~}  $ ~}  $ ~return 0 ;  $ }
int main ( ) {  $ ~int n ;  $ ~cin >> n ;  $ ~int arr [ n ] ;  $ ~for ( int i = 0 ; i < n ; i ++ ) cin >> arr [ i ] ;  $ ~int j = n - 2 , i = n - 1 ;  $ ~while ( i > 0 ) {  $ ~~sort ( arr , arr + n ) ;  $ ~~if ( j < 0 ) {  $ ~~~i -- ;  $ ~~~j = i - 1 ;  $ ~~} else if ( arr [ i ] > arr [ j ] )  $ ~~~arr [ i ] = arr [ i ] - arr [ j ] ;  $ ~~else  $ ~~~j -- ;  $ ~}  $ ~int sum = 0 ;  $ ~for ( i = 0 ; i < n ; i ++ ) sum += arr [ i ] ;  $ ~cout << sum << endl ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~string s1 , s2 ;  $ ~cin >> s1 >> s2 ;  $ ~for ( int i = 0 ; i < s1 . length ( ) ; i ++ ) {  $ ~~int n = s1 [ i ] ;  $ ~~if ( n >= 65 && n <= 90 ) {  $ ~~~n += 32 ;  $ ~~~s1 [ i ] = n ;  $ ~~}  $ ~}  $ ~for ( int i = 0 ; i < s2 . length ( ) ; i ++ ) {  $ ~~int n = s2 [ i ] ;  $ ~~if ( n >= 65 && n <= 90 ) {  $ ~~~n += 32 ;  $ ~~~s2 [ i ] = n ;  $ ~~}  $ ~}  $ ~int x = 0 ;  $ ~for ( int i = 0 ; i < s1 . length ( ) ; i ++ ) {  $ ~~if ( s1 [ i ] > s2 [ i ] ) {  $ ~~~x = 1 ;  $ ~~~break ;  $ ~~}  $ ~~if ( s1 [ i ] < s2 [ i ] ) {  $ ~~~x = - 1 ;  $ ~~~break ;  $ ~~}  $ ~}  $ ~cout << x << endl ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~int t ;  $ ~cin >> t ;  $ ~for ( ; t > 0 ; t -- ) {  $ ~~int a , b ;  $ ~~long long int res = 0 ;  $ ~~cin >> a >> b ;  $ ~~while ( a && b ) {  $ ~~~if ( a < b ) {  $ ~~~~res += b / a ;  $ ~~~~b %= a ;  $ ~~~} else {  $ ~~~~res += a / b ;  $ ~~~~a %= b ;  $ ~~~}  $ ~~}  $ ~~cout << res << endl ;  $ ~}  $ }
int main ( ) {  $ ~long long int i , j , k , l , p , q , r , t , u , v , w , x , y , z , n ;  $ ~string s ;  $ ~cin >> t ;  $ ~for ( i = 1 ; i <= t ; i ++ ) {  $ ~~cin >> n >> s ;  $ ~~l = s . size ( ) ;  $ ~~long long int temp = 0 ;  $ ~~long long int first ;  $ ~~long long int second ;  $ ~~for ( j = 0 ; j < l / 2 ; j ++ ) {  $ ~~~first = int ( s [ j ] ) ;  $ ~~~second = int ( s [ l - j - 1 ] ) ;  $ ~~~if ( abs ( first - second ) == 2 || ( abs ( first - second ) ) == 0 ) {  $ ~~~~temp = 0 ;  $ ~~~} else {  $ ~~~~temp = 1 ;  $ ~~~~break ;  $ ~~~}  $ ~~}  $ ~~if ( temp == 1 ) {  $ ~~~cout << "NO" << '\n' ;  $ ~~} else {  $ ~~~cout << "YES" << '\n' ;  $ ~~}  $ ~}  $ }
const int maxn = 110 ;  $ int a [ maxn ] , b [ maxn ] ;  $ int mex ( int A , int B ) {  $ ~if ( A != 0 && B != 0 ) return 0 ;  $ ~if ( A != 1 && B != 1 ) return 1 ;  $ ~if ( A != 2 && B != 2 ) return 2 ;  $ }  $ void end ( ) {  $ ~cout << "NO\n" ;  $ ~exit ( 0 ) ;  $ }  $ int main ( ) {  $ ~int n ;  $ ~cin >> n ;  $ ~for ( int i = 0 ; i < n ; i ++ ) cin >> a [ i ] , a [ i ] -- ;  $ ~if ( a [ 0 ] == 2 ) end ( ) ;  $ ~if ( a [ 0 ] == 0 ) b [ 0 ] = 1 ;  $ ~bool okay = true ;  $ ~for ( int i = 1 ; i < n ; i ++ ) {  $ ~~if ( a [ i ] == b [ i - 1 ] ) end ( ) ;  $ ~~b [ i ] = mex ( a [ i ] , b [ i - 1 ] ) ;  $ ~}  $ ~if ( okay )  $ ~~cout << "YES\n" ;  $ ~else  $ ~~cout << "NO\n" ;  $ ~return 0 ;  $ }
bool go [ 200005 ] ;  $ int nex [ 200005 ] ;  $ int n ;  $ void dfs ( int x ) {  $ ~if ( go [ x ] ) return ;  $ ~go [ x ] = 1 ;  $ ~dfs ( nex [ x ] ) ;  $ }  $ int main ( ) {  $ ~cin >> n ;  $ ~for ( int i = 1 ; i <= n ; i ++ ) { cin >> nex [ i ] ; }  $ ~int cnt = 0 ;  $ ~for ( int i = 1 ; i <= n ; i ++ ) {  $ ~~int x ;  $ ~~cin >> x ;  $ ~~cnt += x ;  $ ~}  $ ~int ans = 0 ;  $ ~for ( int i = 1 ; i <= n ; i ++ ) {  $ ~~if ( ! go [ i ] ) {  $ ~~~ans ++ ;  $ ~~~dfs ( i ) ;  $ ~~}  $ ~}  $ ~if ( ans == 1 ) ans = 0 ;  $ ~cout << ans + 1 - ( cnt & 1 ) << endl ;  $ }
int main ( ) {  $ ~int n , m = 1 ;  $ ~cin >> n ;  $ ~for ( int a = 1 ; a <= n / 2 ; a ++ ) {  $ ~~for ( int i = 1 ; i <= ( n - m ) / 2 ; i ++ ) cout << "*" ;  $ ~~for ( int i = 1 ; i <= m ; i ++ ) cout << "D" ;  $ ~~for ( int i = 1 ; i <= ( n - m ) / 2 ; i ++ ) cout << "*" ;  $ ~~cout << endl ;  $ ~~m += 2 ;  $ ~}  $ ~for ( int i = 1 ; i <= n ; i ++ ) cout << "D" ;  $ ~cout << endl ;  $ ~m = n - 2 ;  $ ~for ( int a = 1 ; a <= n / 2 ; a ++ ) {  $ ~~for ( int i = 1 ; i <= ( n - m ) / 2 ; i ++ ) cout << "*" ;  $ ~~for ( int i = 1 ; i <= m ; i ++ ) cout << "D" ;  $ ~~for ( int i = 1 ; i <= ( n - m ) / 2 ; i ++ ) cout << "*" ;  $ ~~cout << endl ;  $ ~~m -= 2 ;  $ ~}  $ }
int k , r , res ;  $ int main ( ) {  $ ~cin >> k >> r ;  $ ~for ( int i = 1 ; ; i ++ ) {  $ ~~int x = k * i ;  $ ~~if ( x % 10 == 0 ) {  $ ~~~cout << i << "\n" ;  $ ~~~break ;  $ ~~} else if ( ( x - r ) % 10 == 0 ) {  $ ~~~cout << i << "\n" ;  $ ~~~break ;  $ ~~}  $ ~}  $ ~return 0 ;  $ }
int main ( ) {  $ ~int n , a [ 10 ] = { 0 } , b [ 10 ] = { 0 } , c [ 10 ] = { 0 } ;  $ ~while ( cin >> n ) {  $ ~~memset ( a , 0 , sizeof a ) ;  $ ~~memset ( b , 0 , sizeof b ) ;  $ ~~memset ( c , 0 , sizeof c ) ;  $ ~~for ( int i = 0 ; i < n ; i ++ ) {  $ ~~~int temp ;  $ ~~~cin >> temp ;  $ ~~~a [ temp ] ++ ;  $ ~~~c [ temp ] ++ ;  $ ~~}  $ ~~for ( int i = 0 ; i < n ; i ++ ) {  $ ~~~int temp ;  $ ~~~cin >> temp ;  $ ~~~b [ temp ] ++ ;  $ ~~~c [ temp ] ++ ;  $ ~~}  $ ~~int flag = 0 , sum = 0 ;  $ ~~for ( int i = 1 ; i <= 5 ; i ++ ) {  $ ~~~if ( c [ i ] % 2 == 1 ) {  $ ~~~~flag = 1 ;  $ ~~~~break ;  $ ~~~}  $ ~~~sum += abs ( a [ i ] - c [ i ] / 2 ) ;  $ ~~}  $ ~~if ( flag )  $ ~~~cout << "-1" << endl ;  $ ~~else  $ ~~~cout << sum / 2 << endl ;  $ ~}  $ ~return 0 ;  $ }
const long long N = 1e5 + 5 , mod = 1e9 + 7 , inf = 1e18 + 7 ;  $ int main ( ) {  $ ~long long n ;  $ ~cin >> n ;  $ ~string a [ n ] , t ;  $ ~set < string > b ;  $ ~for ( long long i = 0 ; i < n ; i ++ ) {  $ ~~cin >> a [ i ] ;  $ ~~sort ( a [ i ] . begin ( ) , a [ i ] . end ( ) ) ;  $ ~~;  $ ~~t = "" ;  $ ~~t . push_back ( a [ i ] [ 0 ] ) ;  $ ~~for ( long long j = 1 ; j < a [ i ] . length ( ) ; j ++ ) {  $ ~~~if ( a [ i ] [ j ] != a [ i ] [ j - 1 ] ) t . push_back ( a [ i ] [ j ] ) ;  $ ~~}  $ ~~b . insert ( t ) ;  $ ~}  $ ~cout << b . size ( ) << '\n' ;  $ }
int main ( ) {  $ ~string a , b , c , d ;  $ ~cin >> a >> b ;  $ ~cout << a + ' ' + b << '\n' ;  $ ~int n ;  $ ~cin >> n ;  $ ~for ( int i = 0 ; i < n ; i ++ ) {  $ ~~cin >> c >> d ;  $ ~~if ( c == a )  $ ~~~a = d ;  $ ~~else  $ ~~~b = d ;  $ ~~cout << a + ' ' + b << '\n' ;  $ ~}  $ ~return 0 ;  $ }
int main ( ) {  $ ~int t ;  $ ~int a [ 101 ] , b [ 101 ] , a1 [ 6 ] = { 0 } , b1 [ 6 ] = { 0 } ;  $ ~cin >> t ;  $ ~for ( int i = 0 ; i < t ; i ++ ) {  $ ~~cin >> a [ i ] ;  $ ~~a1 [ a [ i ] ] ++ ;  $ ~}  $ ~for ( int i = 0 ; i < t ; i ++ ) {  $ ~~cin >> b [ i ] ;  $ ~~b1 [ b [ i ] ] ++ ;  $ ~}  $ ~int sum = 0 ;  $ ~for ( int i = 1 ; i < 6 ; i ++ ) {  $ ~~if ( ( a1 [ i ] + b1 [ i ] ) % 2 != 0 ) {  $ ~~~cout << - 1 << endl ;  $ ~~~return 0 ;  $ ~~}  $ ~~sum += abs ( b1 [ i ] - a1 [ i ] ) / 2 ;  $ ~}  $ ~cout << sum / 2 << endl ;  $ ~return 0 ;  $ }
int n , k , num [ 1000 ] ;  $ int main ( ) {  $ ~string a ;  $ ~cin >> n >> k ;  $ ~cin >> a ;  $ ~for ( int i = 0 ; i < n ; i ++ ) { num [ a [ i ] ] ++ ; }  $ ~for ( int i = 0 ; i < 1000 ; i ++ ) {  $ ~~if ( num [ i ] > k ) {  $ ~~~cout << "NO\n" ;  $ ~~~return 0 ;  $ ~~}  $ ~}  $ ~cout << "YES\n" ;  $ ~return 0 ;  $ }
string s ;  $ int a [ 27 ] ;  $ int main ( ) {  $ ~int n , k , f = 0 ;  $ ~cin >> n >> k ;  $ ~cin >> s ;  $ ~for ( int i = 0 ; i < n ; i ++ ) a [ s [ i ] - 'a' ] ++ ;  $ ~for ( int i = 0 ; i < 26 ; i ++ )  $ ~~if ( a [ i ] != 0 && a [ i ] > k ) {  $ ~~~cout << "NO" << endl ;  $ ~~~f = 1 ;  $ ~~~break ;  $ ~~}  $ ~if ( ! f ) cout << "YES" << endl ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~int n , l , r , ql , qr , Ar [ 100000 ] , sum = 0 ;  $ ~cin >> n >> l >> r >> ql >> qr ;  $ ~for ( int i = 1 ; i <= n ; i ++ ) {  $ ~~cin >> Ar [ i ] ;  $ ~~Ar [ i ] += Ar [ i - 1 ] ;  $ ~}  $ ~int answer = 1e9 ;  $ ~for ( int i = 0 ; i <= n ; i ++ ) {  $ ~~int result = Ar [ i ] * l + ( Ar [ n ] - Ar [ i ] ) * r ;  $ ~~if ( i < n - i ) { result += ( n - i - i - 1 ) * qr ; }  $ ~~if ( i > n - i ) { result += ( i - n + i - 1 ) * ql ; }  $ ~~answer = min ( answer , result ) ;  $ ~}  $ ~cout << answer << endl ;  $ }
int main ( ) {  $ ~string a , b ;  $ ~int c , d , cnt ;  $ ~int flag ;  $ ~while ( cin >> a >> b ) {  $ ~~if ( a . size ( ) != b . size ( ) ) {  $ ~~~cout << "NO" << endl ;  $ ~~~continue ;  $ ~~} else {  $ ~~~flag = 1 ;  $ ~~~cnt = 0 ;  $ ~~~for ( int i = 0 ; i < a . size ( ) ; i ++ ) {  $ ~~~~if ( a [ i ] != b [ i ] && cnt == 0 ) {  $ ~~~~~cnt ++ ;  $ ~~~~~c = i ;  $ ~~~~} else if ( a [ i ] != b [ i ] && cnt == 1 ) {  $ ~~~~~cnt ++ ;  $ ~~~~~d = i ;  $ ~~~~} else if ( a [ i ] != b [ i ] && cnt == 2 ) {  $ ~~~~~cout << "NO" << endl ;  $ ~~~~~flag = 0 ;  $ ~~~~~break ;  $ ~~~~}  $ ~~~}  $ ~~~if ( flag == 0 ) {  $ ~~~~continue ;  $ ~~~} else {  $ ~~~~if ( cnt == 1 ) {  $ ~~~~~cout << "NO" << endl ;  $ ~~~~~continue ;  $ ~~~~}  $ ~~~~if ( a [ c ] == b [ d ] && a [ d ] == b [ c ] ) {  $ ~~~~~cout << "YES" << endl ;  $ ~~~~} else {  $ ~~~~~cout << "NO" << endl ;  $ ~~~~}  $ ~~~}  $ ~~}  $ ~}  $ ~return 0 ;  $ }
long long n , m , a , b , res ;  $ int main ( ) {  $ ~cin >> n >> m >> a >> b ;  $ ~res = n * b ;  $ ~res = min ( res , ( n - ( n / m ) * m ) * b ) ;  $ ~res = min ( res , ( ( n / m + 1 ) * m - n ) * a ) ;  $ ~cout << res << endl ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~int n , k ;  $ ~cin >> n >> k ;  $ ~vector < int > vec ( n ) ;  $ ~int result = 0 ;  $ ~for ( int i = 0 ; i < n ; i ++ ) { cin >> vec [ i ] ; }  $ ~int score = vec [ k - 1 ] ;  $ ~for ( int i = 0 ; i < n ; i ++ ) {  $ ~~if ( vec [ i ] >= score && vec [ i ] > 0 ) result ++ ;  $ ~}  $ ~cout << result << endl ;  $ ~return 0 ;  $ }
vector < int > tu [ 1005 ] ;  $ int a [ 1005 ] , cnt [ 1005 ] , n , checks [ 1005 ] ;  $ int check ( int x ) {  $ ~int i , k ;  $ ~int sum = - 1 ;  $ ~queue < int > qua [ 5 ] ;  $ ~for ( i = 1 ; i <= n ; i ++ ) {  $ ~~if ( cnt [ i ] == 0 ) { qua [ a [ i ] ] . push ( i ) ; }  $ ~}  $ ~for ( ; ; ) {  $ ~~if ( qua [ 1 ] . size ( ) == 0 && qua [ 2 ] . size ( ) == 0 && qua [ 3 ] . size ( ) == 0 ) break ;  $ ~~while ( ! qua [ x ] . empty ( ) ) {  $ ~~~sum ++ ;  $ ~~~k = qua [ x ] . front ( ) ;  $ ~~~qua [ x ] . pop ( ) ;  $ ~~~for ( i = 0 ; i < tu [ k ] . size ( ) ; i ++ ) {  $ ~~~~int xx = tu [ k ] [ i ] ;  $ ~~~~cnt [ xx ] -- ;  $ ~~~~if ( cnt [ xx ] == 0 ) qua [ a [ xx ] ] . push ( xx ) ;  $ ~~~}  $ ~~}  $ ~~if ( x == 1 )  $ ~~~x = 2 ;  $ ~~else if ( x == 2 )  $ ~~~x = 3 ;  $ ~~else if ( x == 3 )  $ ~~~x = 1 ;  $ ~~sum ++ ;  $ ~}  $ ~if ( sum == - 1 )  $ ~~return 0 ;  $ ~else  $ ~~return sum ;  $ }  $ int main ( ) {  $ ~int i ;  $ ~int ans , T , x ;  $ ~cin >> n ;  $ ~memset ( a , 0 , sizeof ( a ) ) ;  $ ~memset ( tu , 0 , sizeof ( tu ) ) ;  $ ~memset ( cnt , 0 , sizeof ( cnt ) ) ;  $ ~for ( i = 1 ; i <= n ; i ++ ) { cin >> a [ i ] ; }  $ ~for ( i = 1 ; i <= n ; i ++ ) {  $ ~~cin >> T ;  $ ~~while ( T -- ) {  $ ~~~cin >> x ;  $ ~~~tu [ x ] . push_back ( i ) ;  $ ~~~checks [ i ] ++ ;  $ ~~}  $ ~}  $ ~ans = 1 << 30 ;  $ ~int j ;  $ ~for ( i = 1 ; i <= 3 ; i ++ ) {  $ ~~for ( j = 1 ; j <= n ; j ++ ) { cnt [ j ] = checks [ j ] ; }  $ ~~ans = min ( ans , check ( i ) ) ;  $ ~}  $ ~cout << ans << endl ;  $ }
int main ( ) {  $ ~long long int a , b ;  $ ~cin >> a ;  $ ~b = a / 5 ;  $ ~if ( a == b * 5 )  $ ~~cout << b << endl ;  $ ~else  $ ~~cout << b + 1 << endl ;  $ ~return 0 ;  $ }
long long n , k , x ;  $ int main ( ) {  $ ~cin >> n >> k ;  $ ~x = n / k ;  $ ~if ( x % 2 == 0 ) {  $ ~~cout << "NO" << endl ;  $ ~} else {  $ ~~cout << "YES" << endl ;  $ ~}  $ ~return 0 ;  $ }
char Names [ 6 ] [ 15 ] = { "Power" , "Time" , "Space" , "Soul" , "Reality" , "Mind" } ;  $ void DeleteIt ( int x ) {  $ ~strcpy ( Names [ x ] , " " ) ;  $ ~return ;  $ }  $ int main ( ) {  $ ~int n , i ;  $ ~cin >> n ;  $ ~if ( n != 0 ) {  $ ~~char Colours [ n ] [ 10 ] ;  $ ~~for ( i = 0 ; i < n ; i ++ ) cin >> Colours [ i ] ;  $ ~~for ( i = 0 ; i < n ; i ++ ) {  $ ~~~if ( strcmp ( Colours [ i ] , "purple" ) == 0 ) {  $ ~~~~DeleteIt ( 0 ) ;  $ ~~~~continue ;  $ ~~~}  $ ~~~if ( strcmp ( Colours [ i ] , "green" ) == 0 ) {  $ ~~~~DeleteIt ( 1 ) ;  $ ~~~~continue ;  $ ~~~}  $ ~~~if ( strcmp ( Colours [ i ] , "blue" ) == 0 ) {  $ ~~~~DeleteIt ( 2 ) ;  $ ~~~~continue ;  $ ~~~}  $ ~~~if ( strcmp ( Colours [ i ] , "orange" ) == 0 ) {  $ ~~~~DeleteIt ( 3 ) ;  $ ~~~~continue ;  $ ~~~}  $ ~~~if ( strcmp ( Colours [ i ] , "red" ) == 0 ) {  $ ~~~~DeleteIt ( 4 ) ;  $ ~~~~continue ;  $ ~~~}  $ ~~~if ( strcmp ( Colours [ i ] , "yellow" ) == 0 ) {  $ ~~~~DeleteIt ( 5 ) ;  $ ~~~~continue ;  $ ~~~}  $ ~~}  $ ~}  $ ~cout << 6 - n << endl ;  $ ~for ( i = 0 ; i < 6 ; i ++ ) {  $ ~~if ( strcmp ( Names [ i ] , " " ) == 0 ) continue ;  $ ~~cout << Names [ i ] << endl ;  $ ~}  $ ~return 0 ;  $ }
int main ( ) {  $ ~int n , m , g ;  $ ~cin >> n >> m ;  $ ~int arr [ 105 ] ;  $ ~for ( int i = 0 ; i < n ; i ++ ) { cin >> arr [ i ] ; }  $ ~for ( int i = n ; i ; ) {  $ ~~for ( int j = 0 ; j < n ; j ++ ) {  $ ~~~if ( arr [ j ] > 0 ) {  $ ~~~~arr [ j ] -= m ;  $ ~~~~if ( arr [ j ] <= 0 ) {  $ ~~~~~g = j ;  $ ~~~~~i -- ;  $ ~~~~}  $ ~~~}  $ ~~}  $ ~}  $ ~cout << g + 1 << endl ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~int m , n ;  $ ~cin >> m >> n ;  $ ~cout << ( m * n ) / 2 << endl ;  $ }
long long mod = 1e9 + 9 ;  $ long long qm ( long long a , long long b ) {  $ ~long long ans = 1 ;  $ ~while ( b > 0 ) {  $ ~~if ( b & 1 ) ans = ans * a % mod ;  $ ~~b >> = 1 ;  $ ~~a = a * a % mod ;  $ ~}  $ ~return ( ans % mod + mod ) % mod ;  $ }  $ char c [ 1000005 ] ;  $ int main ( ) {  $ ~long long n , a , b , k ;  $ ~cin >> n >> a >> b >> k ;  $ ~cin >> c ;  $ ~long long ans = 0 ;  $ ~if ( n + 1 <= k ) {  $ ~~for ( long long i = 0 ; i <= n ; i ++ ) {  $ ~~~if ( c [ i ] == '-' ) {  $ ~~~~ans = ans - qm ( a , n - i ) * qm ( b , i ) ;  $ ~~~~ans = ( ans % mod + mod ) % mod ;  $ ~~~} else {  $ ~~~~ans = ans + qm ( a , n - i ) * qm ( b , i ) ;  $ ~~~~ans = ( ans % mod + mod ) % mod ;  $ ~~~}  $ ~~}  $ ~~ans = ( ans % mod + mod ) % mod ;  $ ~~cout << ans << endl ;  $ ~} else {  $ ~~long long t = ( n + 1 ) / k ;  $ ~~long long g = ( n + 1 ) % k ;  $ ~~long long x = 0 ;  $ ~~if ( g == 0 ) {  $ ~~~for ( long long i = 0 ; i < k ; i ++ ) {  $ ~~~~if ( c [ i ] == '-' ) {  $ ~~~~~x = x - qm ( a , n - i ) * qm ( b , i ) ;  $ ~~~~~x = ( x % mod + mod ) % mod ;  $ ~~~~} else {  $ ~~~~~x = x + qm ( a , n - i ) * qm ( b , i ) ;  $ ~~~~~x = ( x % mod + mod ) % mod ;  $ ~~~~}  $ ~~~}  $ ~~~if ( qm ( a , k ) == qm ( b , k ) ) {  $ ~~~~ans = t * x ;  $ ~~~~ans = ( ans % mod + mod ) % mod ;  $ ~~~~cout << ans << endl ;  $ ~~~~return 0 ;  $ ~~~}  $ ~~~long long jj = qm ( a , t * k ) - qm ( b , t * k ) ;  $ ~~~jj = x * jj % mod ;  $ ~~~jj = jj * qm ( a , k ) % mod ;  $ ~~~;  $ ~~~jj = jj % mod ;  $ ~~~long long nn = ( qm ( a , k ) - qm ( b , k ) ) ;  $ ~~~nn = nn % mod ;  $ ~~~nn = nn * qm ( a , t * k ) ;  $ ~~~nn = nn % mod ;  $ ~~~nn = qm ( nn , mod - 2 ) ;  $ ~~~ans = jj * nn ;  $ ~~~ans = ( ans % mod + mod ) % mod ;  $ ~~~cout << ans << endl ;  $ ~~} else {  $ ~~~for ( long long i = 0 ; i < k ; i ++ ) {  $ ~~~~if ( c [ i ] == '-' ) {  $ ~~~~~x = x - qm ( a , n - i ) * qm ( b , i ) ;  $ ~~~~~x = ( x % mod + mod ) % mod ;  $ ~~~~} else {  $ ~~~~~x = x + qm ( a , n - i ) * qm ( b , i ) ;  $ ~~~~~x = ( x % mod + mod ) % mod ;  $ ~~~~}  $ ~~~}  $ ~~~if ( qm ( a , k ) == qm ( b , k ) ) {  $ ~~~~ans = t * x ;  $ ~~~~ans = ( ans % mod + mod ) % mod ;  $ ~~~~for ( long long hh = 0 ; hh < g ; hh ++ ) {  $ ~~~~~if ( c [ hh ] == '-' ) {  $ ~~~~~~ans = ans - qm ( a , n - ( t * k + hh ) ) * qm ( b , ( t * k + hh ) ) ;  $ ~~~~~~ans = ( ans % mod + mod ) % mod ;  $ ~~~~~} else {  $ ~~~~~~ans = ans + qm ( a , n - ( t * k + hh ) ) * qm ( b , ( t * k + hh ) ) ;  $ ~~~~~~ans = ( ans % mod + mod ) % mod ;  $ ~~~~~}  $ ~~~~}  $ ~~~~ans = ( ans % mod + mod ) % mod ;  $ ~~~~cout << ans << endl ;  $ ~~~~return 0 ;  $ ~~~}  $ ~~~long long jj = qm ( a , t * k ) - qm ( b , t * k ) ;  $ ~~~jj = x * jj % mod ;  $ ~~~jj = jj * qm ( a , k ) % mod ;  $ ~~~;  $ ~~~jj = jj % mod ;  $ ~~~long long nn = ( qm ( a , k ) - qm ( b , k ) ) ;  $ ~~~nn = nn % mod ;  $ ~~~nn = nn * qm ( a , t * k ) ;  $ ~~~nn = nn % mod ;  $ ~~~nn = qm ( nn , mod - 2 ) ;  $ ~~~ans = jj * nn ;  $ ~~~ans = ( ans % mod + mod ) % mod ;  $ ~~~for ( long long hh = 0 ; hh < g ; hh ++ ) {  $ ~~~~if ( c [ hh ] == '-' ) {  $ ~~~~~ans = ans - qm ( a , n - ( t * k + hh ) ) * qm ( b , ( t * k + hh ) ) ;  $ ~~~~~ans = ( ans % mod + mod ) % mod ;  $ ~~~~} else {  $ ~~~~~ans = ans + qm ( a , n - ( t * k + hh ) ) * qm ( b , ( t * k + hh ) ) ;  $ ~~~~~ans = ( ans % mod + mod ) % mod ;  $ ~~~~}  $ ~~~}  $ ~~~ans = ( ans % mod + mod ) % mod ;  $ ~~~cout << ans << endl ;  $ ~~}  $ ~}  $ }
int gcd ( int x , int y ) {  $ ~if ( y == 0 ) return x ;  $ ~return gcd ( y , x % y ) ;  $ }  $ int main ( ) {  $ ~int n , i , a , g , mv = 0 ;  $ ~cin >> n ;  $ ~for ( i = 1 ; i <= n ; i ++ ) {  $ ~~cin >> a ;  $ ~~mv = max ( mv , a ) ;  $ ~~if ( i == 1 )  $ ~~~g = a ;  $ ~~else  $ ~~~g = gcd ( g , a ) ;  $ ~}  $ ~int turns = mv / g - n ;  $ ~if ( turns % 2 == 0 ) {  $ ~~cout << "Bob\n" ;  $ ~} else {  $ ~~cout << "Alice\n" ;  $ ~}  $ ~return 0 ;  $ }
int main ( ) {  $ ~bool p = 0 ;  $ ~int n , x ;  $ ~cin >> n >> x ;  $ ~int cur = 1 ;  $ ~if ( x == 1 ) p = 1 ;  $ ~for ( int i = 1 ; i < n ; i ++ ) {  $ ~~int a ;  $ ~~cin >> a ;  $ ~~if ( cur == i ) { cur += a ; }  $ ~~if ( cur == x ) p = 1 ;  $ ~}  $ ~if ( p )  $ ~~cout << "YES" << endl ;  $ ~else  $ ~~cout << "NO" << endl ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~string str ;  $ ~int i , j , len , ans = 0 , k1 , k2 , t ;  $ ~cin >> str ;  $ ~len = str . length ( ) ;  $ ~for ( i = 0 ; i < len ; i ++ )  $ ~~for ( j = i + 1 ; j < len ; j ++ ) {  $ ~~~k1 = i ;  $ ~~~k2 = j ;  $ ~~~t = 0 ;  $ ~~~while ( str [ k1 ++ ] == str [ k2 ++ ] ) t ++ ;  $ ~~~ans = max ( ans , t ) ;  $ ~~}  $ ~cout << ans << endl ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~int N , K ;  $ ~cin >> N >> K ;  $ ~K = 240 - K ;  $ ~int ans = 0 ;  $ ~while ( K > 0 ) {  $ ~~K -= ( ans + 1 ) * 5 ;  $ ~~ans ++ ;  $ ~~if ( ans > N ) {  $ ~~~cout << ans - 1 << endl ;  $ ~~~return 0 ;  $ ~~}  $ ~}  $ ~if ( K == 0 ) cout << ans << endl ;  $ ~if ( K < 0 ) cout << ans - 1 << endl ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~long long int n , k , x ;  $ ~cin >> n >> k >> x ;  $ ~long long int a [ n ] ;  $ ~for ( int i = 0 ; i < n ; i ++ ) cin >> a [ i ] ;  $ ~for ( int i = 0 ; i < k ; i ++ ) a [ n - 1 - i ] = x ;  $ ~long long int time = 0 ;  $ ~for ( int i = 0 ; i < n ; i ++ ) time += a [ i ] ;  $ ~cout << time << endl ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~int n ;  $ ~cin >> n ;  $ ~int x = 0 ;  $ ~int gcd = 0 ;  $ ~for ( int i = 0 ; i < n ; i ++ ) {  $ ~~int w ;  $ ~~cin >> w ;  $ ~~x = max ( x , w ) ;  $ ~~gcd = __gcd ( gcd , w ) ;  $ ~}  $ ~if ( ( x / gcd - n ) & 1 )  $ ~~cout << "Alice" << endl ;  $ ~else  $ ~~cout << "Bob" << endl ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~int n ;  $ ~cin >> n ;  $ ~n -= 10 ;  $ ~if ( n > 11 || n < 1 ) {  $ ~~cout << "0\n" ;  $ ~} else if ( n == 10 ) {  $ ~~cout << "15\n" ;  $ ~} else {  $ ~~cout << "4\n" ;  $ ~}  $ }
const int INF = 0 x3f3f3f3f ;  $ const int maxn = 120 ;  $ int arr [ maxn ] ;  $ int main ( ) {  $ ~int n ;  $ ~cin >> n ;  $ ~int mx = 0 ;  $ ~int sum = 0 ;  $ ~for ( int i = 1 ; i <= n ; i ++ ) {  $ ~~cin >> arr [ i ] ;  $ ~~sum += arr [ i ] ;  $ ~~if ( arr [ i ] > mx ) mx = arr [ i ] ;  $ ~}  $ ~for ( int i = mx ; ; i ++ ) {  $ ~~if ( i * n - sum > sum ) {  $ ~~~cout << i << endl ;  $ ~~~return 0 ;  $ ~~}  $ ~}  $ ~return 0 ;  $ }
int main ( ) {  $ ~int n ;  $ ~cin >> n ;  $ ~bool C [ 5 ] [ 5 ] = { } ;  $ ~string color = "RGBYW" ;  $ ~string value = "12345" ;  $ ~for ( int i = 0 ; i < n ; i ++ ) {  $ ~~string c ;  $ ~~cin >> c ;  $ ~~for ( int i = 0 ; i < 5 ; i ++ )  $ ~~~for ( int j = 0 ; j < 5 ; j ++ )  $ ~~~~if ( c [ 0 ] == color [ i ] && c [ 1 ] == value [ j ] ) C [ i ] [ j ] = true ;  $ ~}  $ ~int ans = 25 ;  $ ~for ( int bc = 0 ; bc < 1 << 5 ; bc ++ )  $ ~~for ( int bv = 0 ; bv < 1 << 5 ; bv ++ ) {  $ ~~~bool ok = true ;  $ ~~~for ( int c = 0 ; c < 5 ; c ++ )  $ ~~~~if ( bc >> c & 1 ) {  $ ~~~~~int t = 0 ;  $ ~~~~~for ( int v = 0 ; v < 5 ; v ++ )  $ ~~~~~~if ( ! ( bv >> v & 1 ) ) t += ( int ) C [ c ] [ v ] ;  $ ~~~~~if ( t > 1 ) ok = false ;  $ ~~~~}  $ ~~~for ( int v = 0 ; v < 5 ; v ++ )  $ ~~~~if ( bv >> v & 1 ) {  $ ~~~~~int t = 0 ;  $ ~~~~~for ( int c = 0 ; c < 5 ; c ++ )  $ ~~~~~~if ( ! ( bc >> c & 1 ) ) t += ( int ) C [ c ] [ v ] ;  $ ~~~~~if ( t > 1 ) ok = false ;  $ ~~~~}  $ ~~~int t = 0 ;  $ ~~~for ( int c = 0 ; c < 5 ; c ++ )  $ ~~~~for ( int v = 0 ; v < 5 ; v ++ )  $ ~~~~~if ( ! ( bc >> c & 1 ) && ! ( bv >> v & 1 ) ) t += ( int ) C [ c ] [ v ] ;  $ ~~~if ( t > 1 ) ok = false ;  $ ~~~if ( ok ) {  $ ~~~~int a = 0 ;  $ ~~~~for ( int i = 0 ; i < 5 ; i ++ ) a += ( bc >> i & 1 ) + ( bv >> i & 1 ) ;  $ ~~~~ans = min ( ans , a ) ;  $ ~~~}  $ ~~}  $ ~cout << ans << endl ;  $ }
int main ( ) {  $ ~int n = 0 ;  $ ~string dict [ 5 ] = { "rat" , "child" , "woman" , "man" , "captain" } ;  $ ~cin >> n ;  $ ~string * name = new string [ n ] ;  $ ~string * pos = new string [ n ] ;  $ ~for ( int i = 0 ; i < n ; i ++ ) { cin >> name [ i ] >> pos [ i ] ; }  $ ~for ( int i = 0 ; i < 5 ; i ++ ) {  $ ~~if ( i == 0 || i > 2 ) {  $ ~~~for ( int j = 0 ; j < n ; j ++ ) {  $ ~~~~if ( dict [ i ] == pos [ j ] ) { cout << name [ j ] << '\n' ; }  $ ~~~}  $ ~~} else {  $ ~~~for ( int j = 0 ; j < n ; j ++ ) {  $ ~~~~if ( dict [ i ] == pos [ j ] ) { cout << name [ j ] << '\n' ; }  $ ~~~~if ( dict [ i + 1 ] == pos [ j ] ) { cout << name [ j ] << '\n' ; }  $ ~~~}  $ ~~~i ++ ;  $ ~~}  $ ~}  $ }
int main ( ) {  $ ~int w , h , w1 , h1 , w2 , h2 ;  $ ~cin >> w >> h >> w1 >> h1 >> w2 >> h2 ;  $ ~for ( int i = h ; i >= 0 ; i -- ) {  $ ~~w += i ;  $ ~~if ( i == h1 ) w -= w1 ;  $ ~~if ( i == h2 ) w -= w2 ;  $ ~~if ( w < 0 ) w = 0 ;  $ ~}  $ ~cout << w << endl ;  $ }
int main ( ) {  $ ~int n , s ;  $ ~cin >> n >> s ;  $ ~int a [ n ] ;  $ ~int b [ n ] ;  $ ~for ( int i = 0 ; i < n ; i ++ ) cin >> a [ i ] ;  $ ~for ( int i = 0 ; i < n ; i ++ ) cin >> b [ i ] ;  $ ~if ( a [ 0 ] == 0 )  $ ~~cout << "NO" << endl ;  $ ~else {  $ ~~if ( b [ s - 1 ] == 0 && a [ s - 1 ] == 0 )  $ ~~~cout << "NO" << endl ;  $ ~~else if ( a [ s - 1 ] == 1 ) {  $ ~~~cout << "YES" << endl ;  $ ~~} else {  $ ~~~int flag = 0 ;  $ ~~~for ( int i = s ; i < n ; i ++ ) {  $ ~~~~if ( a [ i ] == 1 && b [ i ] == 1 ) {  $ ~~~~~flag = 1 ;  $ ~~~~~break ;  $ ~~~~}  $ ~~~}  $ ~~~if ( flag == 1 )  $ ~~~~cout << "YES" << endl ;  $ ~~~else  $ ~~~~cout << "NO" << endl ;  $ ~~}  $ ~}  $ }
int main ( ) {  $ ~int t ;  $ ~cin >> t ;  $ ~while ( t -- ) {  $ ~~int n , x , y , d ;  $ ~~cin >> n >> x >> y >> d ;  $ ~~int ans = ( 1e9 ) ;  $ ~~int delta = abs ( x - y ) ;  $ ~~if ( delta % d == 0 ) { ans = delta / d ; }  $ ~~delta = y - 1 ;  $ ~~if ( delta % d == 0 ) { ans = min ( ans , delta / d + ( x - 1 + d - 1 ) / d ) ; }  $ ~~delta = n - y ;  $ ~~if ( delta % d == 0 ) { ans = min ( ans , delta / d + ( n - x + d - 1 ) / d ) ; }  $ ~~if ( ans == ( 1e9 ) ) ans = - 1 ;  $ ~~cout << ans << endl ;  $ ~}  $ ~return 0 ;  $ }
int main ( ) {  $ ~int n ;  $ ~cin >> n ;  $ ~int ans = 2 * n - ( n / 2 ) ;  $ ~cout << ans << endl ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~int n ;  $ ~cin >> n ;  $ ~int a [ 1005 ] = { 0 } , ok [ 1005 ] = { 0 } ;  $ ~int j = 0 ;  $ ~for ( int i = 0 ; i < n ; i ++ ) { cin >> a [ i ] ; }  $ ~for ( int i = 1 ; i < n - 1 ; i ++ ) {  $ ~~if ( a [ i ] < a [ i - 1 ] && a [ i ] < a [ i + 1 ] ) {  $ ~~~ok [ j ] = a [ i ] ;  $ ~~~j ++ ;  $ ~~} else if ( a [ i ] > a [ i - 1 ] && a [ i ] > a [ i + 1 ] ) {  $ ~~~ok [ j ] = a [ i ] ;  $ ~~~j ++ ;  $ ~~}  $ ~}  $ ~cout << j << endl ;  $ }
int main ( ) {  $ ~int k , num , i ;  $ ~cin >> num >> k ;  $ ~i = 0 ;  $ ~while ( i < k ) {  $ ~~if ( num % 10 == 0 ) {  $ ~~~num = num / 10 ;  $ ~~} else {  $ ~~~num -- ;  $ ~~}  $ ~~i ++ ;  $ ~}  $ ~cout << num << endl ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~int n , i , pposi , nposi ;  $ ~char now , prev ;  $ ~string str ;  $ ~cin >> n ;  $ ~cin >> str ;  $ ~for ( i = 0 ; i < n ; i ++ ) {  $ ~~if ( i == 0 ) {  $ ~~~prev = str [ i ] ;  $ ~~~pposi = 0 ;  $ ~~} else {  $ ~~~now = str [ i ] ;  $ ~~~if ( now != prev ) {  $ ~~~~nposi = i ;  $ ~~~~break ;  $ ~~~} else {  $ ~~~~prev = str [ i ] ;  $ ~~~~pposi = i ;  $ ~~~}  $ ~~}  $ ~}  $ ~if ( i != n ) {  $ ~~cout << "YES" << endl ;  $ ~~cout << str [ pposi ] << str [ nposi ] << endl ;  $ ~} else  $ ~~cout << "NO" << endl ;  $ ~return 0 ;  $ }
int p [ 2000 ] ;  $ int next ( int n , int k ) {  $ ~if ( n == 0 ) return 0 ;  $ ~int x = p [ n - 1 ] ;  $ ~for ( int d = 0 ; d < ( int ) 4 ; ++ d )  $ ~~if ( d ) {  $ ~~~if ( x + d < k ) {  $ ~~~~if ( ( n < 2 || p [ n - 2 ] != x + d ) && ( n < 3 || p [ n - 3 ] != x + d ) ) {  $ ~~~~~p [ n - 1 ] = x + d ;  $ ~~~~~return 1 ;  $ ~~~~}  $ ~~~}  $ ~~}  $ ~if ( next ( n - 1 , k ) ) {  $ ~~for ( int d = 0 ; d < ( int ) 3 ; ++ d ) {  $ ~~~if ( ( n < 2 || p [ n - 2 ] != d ) && ( n < 3 || p [ n - 3 ] != d ) ) {  $ ~~~~p [ n - 1 ] = d ;  $ ~~~~return 1 ;  $ ~~~}  $ ~~}  $ ~}  $ ~return 0 ;  $ }  $ int main ( ) {  $ ~int n , k ;  $ ~cin >> n >> k ;  $ ~string s ;  $ ~cin >> s ;  $ ~if ( k == 1 ) {  $ ~~cout << "NO" << endl ;  $ ~~return 0 ;  $ ~}  $ ~if ( k == 2 ) {  $ ~~if ( s == "ab" )  $ ~~~cout << "ba" << endl ;  $ ~~else if ( s == "a" )  $ ~~~cout << "b" << endl ;  $ ~~else  $ ~~~cout << "NO" << endl ;  $ ~~return 0 ;  $ ~}  $ ~for ( int i = 0 ; i < ( int ) n ; ++ i ) p [ i ] = s [ i ] - 'a' ;  $ ~if ( next ( n , k ) ) {  $ ~~for ( int i = 0 ; i < ( int ) n ; ++ i ) s [ i ] = p [ i ] + 'a' ;  $ ~} else  $ ~~s = "NO" ;  $ ~cout << s << endl ;  $ }
int main ( ) {  $ ~long long n ;  $ ~cin >> n ;  $ ~long long x = 3 ;  $ ~long long res = 1 ;  $ ~while ( 1 ) {  $ ~~if ( n % x != 0 ) {  $ ~~~res = n / x + 1 ;  $ ~~~break ;  $ ~~} else {  $ ~~~x = ( x * 3 ) ;  $ ~~}  $ ~}  $ ~cout << res << "\n" ;  $ }
int main ( ) {  $ ~long long n ;  $ ~cin >> n ;  $ ~long long r = 1 ;  $ ~while ( n > r * 5 ) {  $ ~~n = n - ( r * 5 ) ;  $ ~~r = r * 2 ;  $ ~}  $ ~long long a = ( n - 1 ) / r ;  $ ~if ( a == 0 ) {  $ ~~cout << "Sheldon" << endl ;  $ ~} else if ( a == 1 ) {  $ ~~cout << "Leonard" << endl ;  $ ~} else if ( a == 2 ) {  $ ~~cout << "Penny" << endl ;  $ ~} else if ( a == 3 ) {  $ ~~cout << "Rajesh" << endl ;  $ ~} else {  $ ~~cout << "Howard" << endl ;  $ ~}  $ ~return 0 ;  $ }
int main ( ) {  $ ~int n , m , mn , mx ;  $ ~cin >> n >> m >> mn >> mx ;  $ ~vector < int > V ( m ) ;  $ ~for ( int i = 0 ; i < m ; ++ i ) cin >> V [ i ] ;  $ ~sort ( V . begin ( ) , V . end ( ) ) ;  $ ~int cnt = ( V [ 0 ] != mn ) + ( V [ m - 1 ] != mx ) ;  $ ~if ( V [ 0 ] < mn || V [ m - 1 ] > mx || n < m + cnt )  $ ~~cout << "Incorrect\n" ;  $ ~else  $ ~~cout << "Correct\n" ;  $ ~return 0 ;  $ }
void subtraction ( istream & r , ostream & w ) {  $ ~int arg1 , arg2 ;  $ ~r >> arg1 ;  $ ~r >> arg2 ;  $ ~if ( arg1 > arg2 ) {  $ ~~int temp = arg1 ;  $ ~~arg1 = arg2 ;  $ ~~arg2 = temp ;  $ ~}  $ ~int quotient = 0 ;  $ ~int remainder ;  $ ~do {  $ ~~quotient += arg2 / arg1 ;  $ ~~remainder = arg2 % arg1 ;  $ ~~arg2 = arg1 ;  $ ~~arg1 = remainder ;  $ ~} while ( remainder != 0 ) ;  $ ~w << quotient << endl ;  $ }  $ void evaluate ( istream & r , ostream & w ) {  $ ~int numOfTestCases ;  $ ~r >> numOfTestCases ;  $ ~for ( int i = 1 ; i <= numOfTestCases ; i ++ ) { subtraction ( r , w ) ; }  $ }  $ int main ( ) {  $ ~evaluate ( cin , cout ) ;  $ ~return 0 ;  $ }
int a , b , c , d ;  $ int check ( int t1 , int t2 ) {  $ ~if ( t1 < t2 )  $ ~~return 1 ;  $ ~else if ( t1 > t2 )  $ ~~return - 1 ;  $ ~return 0 ;  $ }  $ int main ( ) {  $ ~cin >> a >> b >> c >> d ;  $ ~int x = 0 , y = 0 ;  $ ~int t1 = b , t2 = d ;  $ ~while ( true ) {  $ ~~if ( check ( t1 , t2 ) == 1 ) {  $ ~~~t1 += a ;  $ ~~~x ++ ;  $ ~~}  $ ~~if ( check ( t1 , t2 ) == - 1 ) {  $ ~~~t2 += c ;  $ ~~~y ++ ;  $ ~~}  $ ~~if ( check ( t1 , t2 ) == 0 ) {  $ ~~~cout << t1 << endl ;  $ ~~~break ;  $ ~~}  $ ~~if ( x > 1000 || y > 1000 ) {  $ ~~~cout << "-1" << endl ;  $ ~~~return 0 ;  $ ~~}  $ ~}  $ }
int main ( ) {  $ ~int tt ;  $ ~cin >> tt ;  $ ~while ( tt -- ) {  $ ~~int x , y , p , q ;  $ ~~cin >> x >> y >> p >> q ;  $ ~~if ( p == 0 ) {  $ ~~~cout << ( x == 0 ? 0 : - 1 ) << endl ;  $ ~~~continue ;  $ ~~}  $ ~~if ( p == q ) {  $ ~~~cout << ( x == y ? 0 : - 1 ) << endl ;  $ ~~~continue ;  $ ~~}  $ ~~int t1 = ( x + p - 1 ) / p ;  $ ~~int t2 = ( ( y - x ) + ( q - p ) - 1 ) / ( q - p ) ;  $ ~~cout << ( q * 1 LL * max ( t1 , t2 ) - y ) << endl ;  $ ~}  $ ~return 0 ;  $ }
int main ( ) {  $ ~int k , a , b , v ;  $ ~cin >> k >> a >> b >> v ;  $ ~int ans = 0 ;  $ ~while ( a ) {  $ ~~int x = min ( k - 1 , b ) ;  $ ~~a = max ( 0 , a - ( x + 1 ) * v ) ;  $ ~~b -= x ;  $ ~~ans ++ ;  $ ~}  $ ~cout << ans << endl ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~int t , a ;  $ ~cin >> t ;  $ ~for ( int i = 1 ; i <= t ; i ++ ) {  $ ~~cin >> a ;  $ ~~if ( 360 % ( 180 - a ) == 0 && 360 / ( 180 - a ) > 2 )  $ ~~~cout << "YES" << endl ;  $ ~~else  $ ~~~cout << "NO" << endl ;  $ ~}  $ ~return 0 ;  $ }
int main ( ) {  $ ~int result = 0 , n , m = 0 ;  $ ~cin >> n ;  $ ~for ( int i = 0 ; i < n ; i ++ ) {  $ ~~int x , y ;  $ ~~cin >> x >> y ;  $ ~~m -= x - y ;  $ ~~if ( result < m ) { result = m ; }  $ ~}  $ ~cout << result << endl ;  $ }
int a [ 21 ] , b [ 21 ] ;  $ vector < int > p ;  $ int main ( ) {  $ ~int n , m ;  $ ~cin >> n >> m ;  $ ~for ( int i = 1 ; i <= n ; i ++ ) cin >> a [ i ] ;  $ ~for ( int i = 1 ; i <= m ; i ++ ) cin >> b [ i ] ;  $ ~for ( int i = 1 ; i <= n ; i ++ ) {  $ ~~for ( int j = 1 ; j <= m ; j ++ ) {  $ ~~~if ( b [ j ] == a [ i ] ) {  $ ~~~~p . push_back ( b [ j ] ) ;  $ ~~~~continue ;  $ ~~~}  $ ~~}  $ ~}  $ ~if ( p . empty ( ) )  $ ~~cout << '\n' ;  $ ~else {  $ ~~for ( int i = 0 ; i < p . size ( ) - 1 ; i ++ ) cout << p [ i ] << " " ;  $ ~~cout << p [ p . size ( ) - 1 ] << endl ;  $ ~}  $ ~return 0 ;  $ }
int main ( ) {  $ ~int n , m ;  $ ~cin >> n >> m ;  $ ~int piche = 0 ;  $ ~char snake [ n ] [ m ] ;  $ ~for ( int i = 0 ; i < n ; i ++ ) {  $ ~~for ( int j = 0 ; j < m ; j ++ ) snake [ i ] [ j ] = '#' ;  $ ~}  $ ~for ( int i = 0 ; i < n ; i ++ ) {  $ ~~if ( ( i & 1 ) ) {  $ ~~~if ( piche == 0 ) {  $ ~~~~for ( int j = 0 ; j < m - 1 ; j ++ ) {  $ ~~~~~snake [ i ] [ j ] = '.' ;  $ ~~~~~piche = 1 ;  $ ~~~~}  $ ~~~} else {  $ ~~~~for ( int j = 1 ; j < m ; j ++ ) {  $ ~~~~~snake [ i ] [ j ] = '.' ;  $ ~~~~~piche = 0 ;  $ ~~~~}  $ ~~~}  $ ~~}  $ ~}  $ ~for ( int i = 0 ; i < n ; i ++ ) {  $ ~~for ( int j = 0 ; j < m ; j ++ ) cout << snake [ i ] [ j ] ;  $ ~~cout << "\n" ;  $ ~}  $ }
int main ( ) {  $ ~int t ;  $ ~cin >> t ;  $ ~while ( t -- ) {  $ ~~char maze [ 10 ] [ 10 ] ;  $ ~~int flag = 0 , sx , sy , gx , gy ;  $ ~~for ( int i = 0 ; i < 8 ; i ++ ) {  $ ~~~for ( int j = 0 ; j < 8 ; j ++ ) {  $ ~~~~cin >> maze [ i ] [ j ] ;  $ ~~~~if ( maze [ i ] [ j ] == 'K' && flag == 0 ) {  $ ~~~~~flag ++ ;  $ ~~~~~sx = i ;  $ ~~~~~sy = j ;  $ ~~~~} else if ( maze [ i ] [ j ] == 'K' && flag == 1 ) {  $ ~~~~~flag ++ ;  $ ~~~~~gx = i ;  $ ~~~~~gy = j ;  $ ~~~~}  $ ~~~}  $ ~~}  $ ~~int a , b ;  $ ~~a = abs ( sx - gx ) ;  $ ~~b = abs ( gy - sy ) ;  $ ~~if ( a % 4 == 0 && b % 4 == 0 ) {  $ ~~~cout << "YES" << endl ;  $ ~~} else  $ ~~~cout << "NO" << endl ;  $ ~}  $ }
int main ( ) {  $ ~int number ;  $ ~string temp ;  $ ~cin >> number ;  $ ~string name [ number ] ;  $ ~for ( int i = 0 ; i < number ; i ++ ) { cin >> name [ i ] ; }  $ ~for ( int i = 0 ; i < number ; i ++ ) {  $ ~~if ( name [ i ] . size ( ) > 10 ) {  $ ~~~int num = name [ i ] . size ( ) - 2 ;  $ ~~~cout << name [ i ] [ 0 ] << num << name [ i ] [ name [ i ] . size ( ) - 1 ] << endl ;  $ ~~} else  $ ~~~cout << name [ i ] << endl ;  $ ~}  $ ~return 0 ;  $ }
int main ( ) {  $ ~map < char , int > m ;  $ ~int n , k , cek = 1 ;  $ ~string s ;  $ ~cin >> n >> k >> s ;  $ ~for ( int i = 0 ; i < s . length ( ) ; i ++ ) {  $ ~~if ( s [ i ] == 'G' ) m [ 'G' ] = i ;  $ ~~if ( s [ i ] == 'T' ) m [ 'T' ] = i ;  $ ~}  $ ~if ( m [ 'G' ] < m [ 'T' ] ) {  $ ~~if ( ( m [ 'T' ] - m [ 'G' ] ) % k != 0 )  $ ~~~cek = 0 ;  $ ~~else {  $ ~~~for ( int i = m [ 'G' ] ; i <= m [ 'T' ] ; i += k ) {  $ ~~~~if ( s [ i ] == '#' ) cek = 0 ;  $ ~~~}  $ ~~}  $ ~} else if ( m [ 'G' ] > m [ 'T' ] ) {  $ ~~if ( ( m [ 'G' ] - m [ 'T' ] ) % k != 0 )  $ ~~~cek = 0 ;  $ ~~else {  $ ~~~for ( int i = m [ 'G' ] ; i >= m [ 'T' ] ; i -= k ) {  $ ~~~~if ( s [ i ] == '#' ) cek = 0 ;  $ ~~~}  $ ~~}  $ ~}  $ ~if ( cek )  $ ~~cout << "YES" << endl ;  $ ~else  $ ~~cout << "NO" << endl ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~double n , a ;  $ ~cin >> n ;  $ ~for ( int i = 0 ; i < n ; i ++ ) {  $ ~~double temp = 3 , ans = 0 ;  $ ~~cin >> a ;  $ ~~while ( ans < a ) {  $ ~~~ans = ( ( temp - 2 ) * 180 ) / temp ;  $ ~~~temp ++ ;  $ ~~}  $ ~~if ( ans == a )  $ ~~~cout << "YES\n" ;  $ ~~else  $ ~~~cout << "NO\n" ;  $ ~}  $ ~return 0 ;  $ }
int main ( ) {  $ ~string ch ;  $ ~cin >> ch ;  $ ~int n , sum ;  $ ~n = ch . size ( ) ;  $ ~sum = 26 * ( n + 1 ) - n ;  $ ~cout << sum << endl ;  $ }
int main ( ) {  $ ~int n ;  $ ~cin >> n ;  $ ~int arr [ n ] ;  $ ~for ( int i = 0 ; i < n ; i ++ ) { cin >> arr [ i ] ; }  $ ~if ( n < 3 ) {  $ ~~cout << 0 << endl ;  $ ~~return 0 ;  $ ~}  $ ~sort ( arr , arr + n ) ;  $ ~int cnt = 0 ;  $ ~for ( int i = 1 ; i < n - 1 ; i ++ ) {  $ ~~if ( arr [ i ] > arr [ 0 ] && arr [ i ] < arr [ n - 1 ] ) cnt ++ ;  $ ~}  $ ~cout << cnt << endl ;  $ ~return 0 ;  $ }
bool isGood ( string s , int k ) {  $ ~for ( int i = 0 ; i <= k ; i ++ ) {  $ ~~if ( s . find ( i + '0' ) == string : : npos ) { return false ; }  $ ~}  $ ~return true ;  $ }  $ int main ( ) {  $ ~int n , k ;  $ ~string s ;  $ ~cin >> n >> k ;  $ ~int res = 0 ;  $ ~while ( n -- ) {  $ ~~cin >> s ;  $ ~~if ( isGood ( s , k ) ) { res ++ ; }  $ ~}  $ ~cout << res << endl ;  $ }
int main ( ) {  $ ~int n ;  $ ~int a [ 1001 ] ;  $ ~cin >> n ;  $ ~for ( int i = 0 ; i < n ; i ++ ) { cin >> a [ i ] ; }  $ ~if ( a [ n - 1 ] == 15 ) {  $ ~~cout << "DOWN" << endl ;  $ ~} else if ( a [ n - 1 ] == 0 ) {  $ ~~cout << "UP" << endl ;  $ ~} else if ( n == 1 ) {  $ ~~cout << - 1 << endl ;  $ ~} else if ( a [ n - 1 ] < a [ n - 2 ] ) {  $ ~~cout << "DOWN" << endl ;  $ ~} else if ( a [ n - 1 ] > a [ n - 2 ] ) {  $ ~~cout << "UP" << endl ;  $ ~}  $ }
int main ( ) {  $ ~int l1 , s1 , r1 , p1 , l2 , s2 , r2 , p2 , l3 , s3 , r3 , p3 , l4 , s4 , r4 , p4 ;  $ ~cin >> l1 >> s1 >> r1 >> p1 ;  $ ~cin >> l2 >> s2 >> r2 >> p2 ;  $ ~cin >> l3 >> s3 >> r3 >> p3 ;  $ ~cin >> l4 >> s4 >> r4 >> p4 ;  $ ~if ( ( l1 || s1 || r1 ) && p1 ) {  $ ~~cout << "YES\n" ;  $ ~~return 0 ;  $ ~}  $ ~if ( ( l2 || s2 || r2 ) && p2 ) {  $ ~~cout << "YES\n" ;  $ ~~return 0 ;  $ ~}  $ ~if ( ( l3 || s3 || r3 ) && p3 ) {  $ ~~cout << "YES\n" ;  $ ~~return 0 ;  $ ~}  $ ~if ( ( l4 || s4 || r4 ) && p4 ) {  $ ~~cout << "YES\n" ;  $ ~~return 0 ;  $ ~}  $ ~if ( l1 && p4 ) {  $ ~~cout << "YES\n" ;  $ ~~return 0 ;  $ ~}  $ ~if ( s1 && p3 ) {  $ ~~cout << "YES\n" ;  $ ~~return 0 ;  $ ~}  $ ~if ( r1 && p2 ) {  $ ~~cout << "YES\n" ;  $ ~~return 0 ;  $ ~}  $ ~if ( l4 && p3 ) {  $ ~~cout << "YES\n" ;  $ ~~return 0 ;  $ ~}  $ ~if ( s4 && p2 ) {  $ ~~cout << "YES\n" ;  $ ~~return 0 ;  $ ~}  $ ~if ( r4 && p1 ) {  $ ~~cout << "YES\n" ;  $ ~~return 0 ;  $ ~}  $ ~if ( l3 && p2 ) {  $ ~~cout << "YES\n" ;  $ ~~return 0 ;  $ ~}  $ ~if ( s3 && p1 ) {  $ ~~cout << "YES\n" ;  $ ~~return 0 ;  $ ~}  $ ~if ( r3 && p4 ) {  $ ~~cout << "YES\n" ;  $ ~~return 0 ;  $ ~}  $ ~if ( l2 && p1 ) {  $ ~~cout << "YES\n" ;  $ ~~return 0 ;  $ ~}  $ ~if ( s2 && p4 ) {  $ ~~cout << "YES\n" ;  $ ~~return 0 ;  $ ~}  $ ~if ( r2 && p3 ) {  $ ~~cout << "YES\n" ;  $ ~~return 0 ;  $ ~}  $ ~cout << "NO\n" ;  $ }
int freq [ 1005 ] ;  $ int main ( ) {  $ ~string str = "qwertyuiopasdfghjkl;zxcvbnm,./" ;  $ ~string s ;  $ ~char dir ;  $ ~cin >> dir ;  $ ~cin >> s ;  $ ~int j ;  $ ~string newstr ;  $ ~for ( int i = 0 ; i < s . size ( ) ; i ++ ) {  $ ~~for ( j = 0 ; j < str . size ( ) ; j ++ ) {  $ ~~~if ( str [ j ] == s [ i ] ) break ;  $ ~~}  $ ~~if ( dir == 'R' )  $ ~~~newstr += str [ j - 1 ] ;  $ ~~else  $ ~~~newstr += str [ j + 1 ] ;  $ ~}  $ ~cout << newstr << endl ;  $ }
string S , T ;  $ int x , a , b ;  $ bool status = true ;  $ int main ( ) {  $ ~cin >> S >> T ;  $ ~for ( x = 0 ; x < S . length ( ) ; x ++ ) {  $ ~~if ( S [ x ] > 'Z' ) S [ x ] = S [ x ] - 'a' + 'A' ;  $ ~~if ( T [ x ] > 'Z' ) T [ x ] = T [ x ] - 'a' + 'A' ;  $ ~~if ( S [ x ] > T [ x ] ) {  $ ~~~cout << 1 << endl ;  $ ~~~status = false ;  $ ~~~break ;  $ ~~}  $ ~~if ( S [ x ] < T [ x ] ) {  $ ~~~cout << - 1 << endl ;  $ ~~~status = false ;  $ ~~~break ;  $ ~~}  $ ~}  $ ~if ( status ) cout << 0 << endl ;  $ ~return 0 ;  $ }
int a [ 105 ] ;  $ int main ( ) {  $ ~int n , m ;  $ ~while ( cin >> n >> m ) {  $ ~~memset ( a , 0 , sizeof ( a ) ) ;  $ ~~for ( int i = 0 ; i < n ; i ++ ) {  $ ~~~int x ;  $ ~~~cin >> x ;  $ ~~~for ( int j = 0 ; j < x ; j ++ ) {  $ ~~~~int w ;  $ ~~~~cin >> w ;  $ ~~~~a [ w ] = 1 ;  $ ~~~}  $ ~~}  $ ~~int f = 0 ;  $ ~~for ( int i = 1 ; i <= m ; i ++ ) {  $ ~~~if ( ! a [ i ] ) {  $ ~~~~f = 1 ;  $ ~~~~break ;  $ ~~~}  $ ~~}  $ ~~if ( f )  $ ~~~cout << "NO\n" ;  $ ~~else  $ ~~~cout << "YES\n" ;  $ ~}  $ }
void fast ( ) { }  $ int gcd ( int a , int b ) {  $ ~if ( b == 0 ) return a ;  $ ~return gcd ( b , a % b ) ;  $ }  $ int main ( ) {  $ ~fast ( ) ;  $ ~int n , x ;  $ ~cin >> n ;  $ ~for ( int i = 0 ; i < n ; i ++ ) {  $ ~~cin >> x ;  $ ~~double m = 360.0 / ( 180.0 - x ) ;  $ ~~if ( m == int ( m ) )  $ ~~~cout << "YES\n" ;  $ ~~else  $ ~~~cout << "NO\n" ;  $ ~}  $ ~return 0 ;  $ }
int main ( ) {  $ ~int n , k ;  $ ~cin >> n >> k ;  $ ~int ans = n ;  $ ~k -= n * 2 ;  $ ~ans -= k ;  $ ~if ( ans < 0 ) ans = 0 ;  $ ~cout << ans << endl ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~int n ;  $ ~cin >> n ;  $ ~int q1 , q2 , k1 , k2 , c1 , c2 ;  $ ~cin >> q1 >> q2 >> k1 >> k2 >> c1 >> c2 ;  $ ~int f = 0 ;  $ ~if ( ( k1 < q1 && c1 < q1 ) || ( k1 > q1 && c1 > q1 ) ) {  $ ~~if ( ( k2 < q2 && c2 < q2 ) || ( k2 > q2 && c2 > q2 ) ) { f = 1 ; }  $ ~}  $ ~if ( f == 0 )  $ ~~cout << "NO" << endl ;  $ ~else  $ ~~cout << "YES" << endl ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~long long int n , x , a , c = 0 ;  $ ~char ch ;  $ ~cin >> n >> x ;  $ ~for ( long long int i = 0 ; i < n ; i ++ ) {  $ ~~cin >> ch >> a ;  $ ~~if ( ch == '+' ) {  $ ~~~x += a ;  $ ~~} else {  $ ~~~if ( x < a ) {  $ ~~~~c ++ ;  $ ~~~} else {  $ ~~~~x -= a ;  $ ~~~}  $ ~~}  $ ~}  $ ~cout << x << " " << c << endl ;  $ }
int main ( ) {  $ ~string s ;  $ ~cin >> s ;  $ ~set < string > ss ;  $ ~sort ( s . begin ( ) , s . end ( ) ) ;  $ ~do {  $ ~~string m = s ;  $ ~~vector < string > v ;  $ ~~for ( int i = 0 ; i < 3 ; i ++ ) { v . push_back ( s . substr ( 2 * i , 2 ) ) ; }  $ ~~for ( int i = 0 ; i < 4 ; i ++ ) {  $ ~~~for ( int i = 0 ; i < 4 ; i ++ ) {  $ ~~~~for ( int i = 0 ; i < 4 ; i ++ ) {  $ ~~~~~string str = v [ 0 ] + v [ 1 ] + v [ 2 ] ;  $ ~~~~~m = min ( m , str ) ;  $ ~~~~~swap ( v [ 1 ] , v [ 2 ] ) ;  $ ~~~~~swap ( v [ 2 ] [ 0 ] , v [ 2 ] [ 1 ] ) ;  $ ~~~~}  $ ~~~~swap ( v [ 0 ] , v [ 1 ] ) ;  $ ~~~~swap ( v [ 0 ] [ 0 ] , v [ 0 ] [ 1 ] ) ;  $ ~~~}  $ ~~~swap ( v [ 0 ] , v [ 2 ] ) ;  $ ~~~swap ( v [ 2 ] [ 0 ] , v [ 2 ] [ 1 ] ) ;  $ ~~}  $ ~~ss . insert ( m ) ;  $ ~} while ( next_permutation ( s . begin ( ) , s . end ( ) ) ) ;  $ ~cout << ss . size ( ) << "\n" ;  $ }
int main ( ) {  $ ~int month [ 13 ] = { 0 , 31 , 28 , 31 , 30 , 31 , 30 , 31 , 31 , 30 , 31 , 30 , 31 } ;  $ ~int m , d ;  $ ~while ( cin >> m >> d ) {  $ ~~int res ;  $ ~~int temp = month [ m ] + d - 1 ;  $ ~~if ( temp % 7 ) {  $ ~~~res = temp / 7 + 1 ;  $ ~~} else  $ ~~~res = temp / 7 ;  $ ~~cout << res << endl ;  $ ~}  $ ~return 0 ;  $ }
int main ( ) {  $ ~int n ;  $ ~int a [ 101 ] ;  $ ~int ans = 1000000000 ;  $ ~cin >> n ;  $ ~for ( int i = 1 ; i <= n ; i ++ ) cin >> a [ i ] ;  $ ~for ( int x = 1 ; x <= n ; x ++ ) {  $ ~~int e = 0 ;  $ ~~for ( int i = 1 ; i <= n ; i ++ ) { e += ( abs ( x - i ) + i - 1 + x - 1 ) * a [ i ] ; }  $ ~~if ( e < ans ) ans = e ;  $ ~}  $ ~cout << 2 * ans << endl ;  $ ~return 0 ;  $ }
int n , m , i , j , ans ;  $ char a [ 105 ] [ 105 ] ;  $ int main ( ) {  $ ~cin >> n ;  $ ~for ( i = 1 ; i <= n ; i ++ )  $ ~~for ( j = 1 ; j <= n ; j ++ ) cin >> a [ i ] [ j ] ;  $ ~for ( i = 1 ; i <= n ; i ++ ) {  $ ~~m = 0 ;  $ ~~for ( j = 1 ; j <= n ; j ++ )  $ ~~~if ( a [ i ] [ j ] == 'C' ) m ++ ;  $ ~~ans += m * ( m - 1 ) / 2 ;  $ ~}  $ ~for ( j = 1 ; j <= n ; j ++ ) {  $ ~~m = 0 ;  $ ~~for ( i = 1 ; i <= n ; i ++ )  $ ~~~if ( a [ i ] [ j ] == 'C' ) m ++ ;  $ ~~ans += m * ( m - 1 ) / 2 ;  $ ~}  $ ~cout << ans << endl ;  $ ~return 0 ;  $ }
bool won1 ( string a , string b ) {  $ ~if ( a == "rock" && b == "scissors" ) return true ;  $ ~if ( a == "scissors" && b == "paper" ) return true ;  $ ~if ( a == "paper" && b == "rock" ) return true ;  $ ~return false ;  $ }  $ int main ( ) {  $ ~string names [ 3 ] = { "F" , "M" , "S" } ;  $ ~string a [ 3 ] ;  $ ~for ( int _n ( ( 3 ) - 1 ) , i ( 0 ) ; i <= _n ; i ++ ) cin >> a [ i ] ;  $ ~for ( int _n ( ( 3 ) - 1 ) , i ( 0 ) ; i <= _n ; i ++ ) {  $ ~~bool won = true ;  $ ~~for ( int _n ( ( 3 ) - 1 ) , j ( 0 ) ; j <= _n ; j ++ )  $ ~~~if ( i != j ) won &= won1 ( a [ i ] , a [ j ] ) ;  $ ~~if ( won ) {  $ ~~~cout << names [ i ] << endl ;  $ ~~~exit ( 0 ) ;  $ ~~}  $ ~}  $ ~cout << "?" << endl ;  $ ~return 0 ;  $ }
const int INF = 1000007 ;  $ const int MAXN = 99999 ;  $ const int QW = 55555 ;  $ void File ( ) {  $ ~freopen ( "in.in" , "r" , stdin ) ;  $ ~freopen ( "out.out" , "w" , stdout ) ;  $ }  $ inline void boost ( ) { }  $ int main ( ) {  $ ~int k , a , b , v ;  $ ~cin >> k >> a >> b >> v ;  $ ~int cnt = 0 ;  $ ~while ( 1 ) {  $ ~~cnt ++ ;  $ ~~int box = min ( k - 1 , b ) ;  $ ~~b = b - box ;  $ ~~int nuts = ( box + 1 ) * v ;  $ ~~a = a - nuts ;  $ ~~if ( a <= 0 ) break ;  $ ~}  $ ~cout << cnt << endl ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~int students , g1 [ 105 ] , g2 [ 105 ] , amounts1 [ 105 ] , amounts2 [ 105 ] ;  $ ~memset ( amounts1 , 0 , sizeof ( amounts1 ) ) ;  $ ~memset ( amounts2 , 0 , sizeof ( amounts2 ) ) ;  $ ~cin >> students ;  $ ~for ( int i = 0 ; i < students ; i ++ ) { cin >> g1 [ i ] ; }  $ ~for ( int i = 0 ; i < students ; i ++ ) { cin >> g2 [ i ] ; }  $ ~for ( int i = 0 ; i < students ; i ++ ) {  $ ~~amounts1 [ g1 [ i ] ] ++ ;  $ ~~amounts2 [ g2 [ i ] ] ++ ;  $ ~}  $ ~for ( int i = 1 ; i <= 5 ; i ++ ) {  $ ~~if ( ( amounts1 [ i ] + amounts2 [ i ] ) % 2 == 1 ) {  $ ~~~cout << "-1" << endl ;  $ ~~~return 0 ;  $ ~~}  $ ~}  $ ~int sitch = 0 ;  $ ~for ( int i = 1 ; i <= 5 ; i ++ ) { sitch += abs ( ( ( amounts1 [ i ] - amounts2 [ i ] ) / 2 ) ) ; }  $ ~sitch /= 2 ;  $ ~cout << sitch << endl ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~int n , sol ;  $ ~cin >> n ;  $ ~sol = 0 ;  $ ~for ( int i = 1 ; i <= n ; i ++ ) {  $ ~~int x1 , y1 , x2 , y2 ;  $ ~~cin >> x1 >> y1 >> x2 >> y2 ;  $ ~~sol += ( x2 - x1 + 1 ) * ( y2 - y1 + 1 ) ;  $ ~}  $ ~cout << sol << '\n' ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~long long n ;  $ ~while ( cin >> n ) {  $ ~~long long a = 0 , i = 0 , p = 0 ;  $ ~~if ( n < 1 ) cout << 0 << endl ;  $ ~~for ( int j = 1 ; j <= n ; j ++ ) {  $ ~~~p = ( j * ( j + 1 ) ) / 2 ;  $ ~~~a += p ;  $ ~~~if ( a > n ) break ;  $ ~~~i ++ ;  $ ~~}  $ ~~cout << i << endl ;  $ ~}  $ ~return 0 ;  $ }
int n , a [ 209 ] ;  $ int main ( ) {  $ ~cin >> n ;  $ ~for ( int i = 1 ; i <= n * 2 ; ++ i ) cin >> a [ i ] ;  $ ~sort ( a + 1 , a + 1 + n * 2 ) ;  $ ~if ( a [ n + 1 ] > a [ n ] )  $ ~~cout << "YES" << endl ;  $ ~else  $ ~~cout << "NO" << endl ;  $ ~return 0 ;  $ }
long long fp ( long long n , long long p ) {  $ ~if ( p == 0 ) return 1 ;  $ ~if ( p == 1 ) return n ;  $ ~long long res = fp ( n , p / 2 ) ;  $ ~res = ( ( res ) * ( res ) ) ;  $ ~if ( p % 2 ) res = ( res * n ) ;  $ ~return res ;  $ }  $ int main ( ) {  $ ~long long n , m , a , b , ans = 0 , t ;  $ ~cin >> n >> a >> b >> m ;  $ ~while ( a > 0 ) {  $ ~~t = min ( n - 1 , b ) ;  $ ~~a -= m * ( t + 1 ) ;  $ ~~b -= t ;  $ ~~ans ++ ;  $ ~}  $ ~cout << ans << '\n' ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~int a , b , c ;  $ ~cin >> a >> b >> c ;  $ ~cout << 2 * c * ( a + b - 2 ) - 8 * ( c * ( c - 1 ) ) << endl ;  $ }
const int MAXN = 110 ;  $ bool mark [ MAXN ] ;  $ int main ( ) {  $ ~memset ( mark , false , sizeof mark ) ;  $ ~int n , m ;  $ ~cin >> n >> m ;  $ ~for ( int i = 1 ; i <= n ; i ++ ) {  $ ~~int x , y ;  $ ~~cin >> x >> y ;  $ ~~for ( int j = x ; j < y ; j ++ ) { mark [ j ] = true ; }  $ ~}  $ ~bool flag = true ;  $ ~for ( int i = 0 ; i < m ; i ++ ) {  $ ~~if ( mark [ i ] == false ) {  $ ~~~flag = false ;  $ ~~~break ;  $ ~~}  $ ~}  $ ~if ( flag == true )  $ ~~cout << "YES" << endl ;  $ ~else  $ ~~cout << "NO" << endl ;  $ }
int a [ 110 ] ;  $ int main ( ) {  $ ~int n , m , x , y ;  $ ~cin >> n >> m ;  $ ~memset ( a , 0 , sizeof ( a ) ) ;  $ ~int flag = 0 ;  $ ~for ( int i = 0 ; i < n ; i ++ ) {  $ ~~cin >> x ;  $ ~~for ( int j = 0 ; j < x ; j ++ ) {  $ ~~~cin >> y ;  $ ~~~a [ y ] = 1 ;  $ ~~}  $ ~}  $ ~for ( int i = 1 ; i <= m ; i ++ ) {  $ ~~if ( a [ i ] == 0 ) {  $ ~~~flag = 1 ;  $ ~~~break ;  $ ~~}  $ ~}  $ ~if ( flag )  $ ~~cout << "NO" << endl ;  $ ~else  $ ~~cout << "YES" << endl ;  $ }
int main ( ) {  $ ~int len ;  $ ~int n0 = 0 ;  $ ~int n1 = 0 ;  $ ~string galaxy ;  $ ~cin >> len ;  $ ~cin >> galaxy ;  $ ~for ( int i = 0 ; i < len ; i ++ ) {  $ ~~if ( galaxy [ i ] == '0' )  $ ~~~n0 ++ ;  $ ~~else  $ ~~~n1 ++ ;  $ ~}  $ ~cout << abs ( n0 - n1 ) << endl ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~int n , k ;  $ ~char s [ 111 ] ;  $ ~while ( cin >> n >> k ) {  $ ~~cin >> s ;  $ ~~int x , y ;  $ ~~for ( int i = 0 ; i < n ; i ++ ) {  $ ~~~if ( s [ i ] == 'G' ) { x = i ; }  $ ~~~if ( s [ i ] == 'T' ) { y = i ; }  $ ~~}  $ ~~int a = 1 ;  $ ~~int flag = 0 ;  $ ~~if ( x < y ) {  $ ~~~while ( 1 ) {  $ ~~~~if ( s [ x + k * a ] == 'T' ) {  $ ~~~~~flag = 1 ;  $ ~~~~~break ;  $ ~~~~}  $ ~~~~if ( s [ x + k * a ] == '#' ) { break ; }  $ ~~~~if ( x + k * a >= n ) break ;  $ ~~~~a ++ ;  $ ~~~}  $ ~~} else {  $ ~~~while ( 1 ) {  $ ~~~~if ( s [ x - k * a ] == 'T' ) {  $ ~~~~~flag = 1 ;  $ ~~~~~break ;  $ ~~~~}  $ ~~~~if ( s [ x - k * a ] == '#' ) { break ; }  $ ~~~~if ( x - k * a < 0 ) break ;  $ ~~~~a ++ ;  $ ~~~}  $ ~~}  $ ~~if ( flag == 1 )  $ ~~~cout << "YES" << endl ;  $ ~~else  $ ~~~cout << "NO" << endl ;  $ ~}  $ ~return 0 ;  $ }
int main ( ) {  $ ~int n , x , sum = 0 , v = 0 ;  $ ~while ( cin >> n >> x ) {  $ ~~for ( int i = 0 ; i < n ; i ++ ) {  $ ~~~int z [ n ] ;  $ ~~~cin >> z [ i ] ;  $ ~~~sum += z [ i ] ;  $ ~~}  $ ~~if ( sum > 0 ) {  $ ~~~while ( ( sum > 0 ) ) {  $ ~~~~if ( ( ( sum % x != sum ) && ( sum / x != sum ) ) || ( sum == x ) ) {  $ ~~~~~sum -= x ;  $ ~~~~~v ++ ;  $ ~~~~} else  $ ~~~~~x -- ;  $ ~~~}  $ ~~} else if ( sum < 0 ) {  $ ~~~sum *= - 1 ;  $ ~~~while ( ( sum > 0 ) ) {  $ ~~~~if ( ( sum % x == 0 || sum % x > 0 ) && ( sum / x != 0 ) ) {  $ ~~~~~sum -= x ;  $ ~~~~~v ++ ;  $ ~~~~} else  $ ~~~~~x -- ;  $ ~~~}  $ ~~}  $ ~~cout << v << endl ;  $ ~~v = 0 ;  $ ~}  $ }
int main ( ) {  $ ~int a , b ;  $ ~cin >> a >> b ;  $ ~int * arr = new int [ 1000 ] ;  $ ~int * brr = new int [ 1000 ] ;  $ ~for ( int i = 0 ; i < a ; i ++ ) cin >> arr [ i ] ;  $ ~for ( int j = 0 ; j < a ; j ++ ) cin >> brr [ j ] ;  $ ~if ( arr [ 0 ] == 0 ) {  $ ~~cout << "NO" << endl ;  $ ~~return 0 ;  $ ~}  $ ~if ( arr [ b - 1 ] == 1 ) {  $ ~~cout << "YES" << endl ;  $ ~~return 0 ;  $ ~}  $ ~for ( int i = b - 1 ; i <= a - 1 ; i ++ ) {  $ ~~if ( arr [ i ] == 1 && brr [ i ] == 1 && brr [ b - 1 ] == 1 ) {  $ ~~~cout << "YES" << endl ;  $ ~~~return 0 ;  $ ~~}  $ ~}  $ ~cout << "NO" << endl ;  $ }
int main ( ) {  $ ~int a , b , c ;  $ ~cin >> a >> b >> c ;  $ ~int n ;  $ ~cin >> n ;  $ ~int ans = 0 ;  $ ~for ( int i = 0 ; i < n ; i ++ ) {  $ ~~int cnt ;  $ ~~cin >> cnt ;  $ ~~if ( cnt > b && cnt < c ) { ++ ans ; }  $ ~}  $ ~cout << ans << endl ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~long long n , k ;  $ ~cin >> n >> k ;  $ ~long long x = ( n / 2 ) / ( 1 + k ) ;  $ ~cout << x << " " << x * k << ' ' << n - ( x ) * ( 1 + k ) << "\n" ;  $ }
int main ( ) {  $ ~int n ;  $ ~cin >> n ;  $ ~int mas [ 100 ] ;  $ ~for ( int i = 0 ; i < 100 ; i ++ ) mas [ i ] = 0 ;  $ ~while ( n -- ) {  $ ~~int a ;  $ ~~cin >> a ;  $ ~~mas [ a - 1 ] ++ ;  $ ~}  $ ~int ans = mas [ 0 ] ;  $ ~for ( int i = 1 ; i < 100 ; i ++ ) { ans = max ( ans , mas [ i ] ) ; }  $ ~cout << ans << '\n' ;  $ }
int main ( ) {  $ ~int a [ 110 ] ;  $ ~int n ;  $ ~while ( cin >> n ) {  $ ~~for ( int i = 0 ; i < n ; i ++ ) { cin >> a [ i ] ; }  $ ~~for ( int i = 0 ; i < n ; i ++ ) {  $ ~~~if ( i == 0 || i == n - 1 ) continue ;  $ ~~~if ( a [ i ] == 0 && a [ i - 1 ] == 1 && a [ i + 1 ] == 1 ) a [ i ] = 1 ;  $ ~~}  $ ~~int num = 0 ;  $ ~~for ( int i = 0 ; i < n ; i ++ ) {  $ ~~~if ( a [ i ] == 1 ) num ++ ;  $ ~~}  $ ~~cout << num << endl ;  $ ~}  $ }
int main ( ) {  $ ~long int n ;  $ ~cin >> n ;  $ ~int c = 0 ;  $ ~while ( n > 0 ) {  $ ~~int x = log2 ( n ) ;  $ ~~n -= pow ( 2 , x ) ;  $ ~~c ++ ;  $ ~}  $ ~cout << c << "\n" ;  $ ~return 0 ;  $ }
char c [ 1000 ] ;  $ int res [ 1000 ] ;  $ int l , mn , pl = 1 , n ;  $ int main ( ) {  $ ~char ch ;  $ ~cin >> ch ;  $ ~while ( cin >> ch ) {  $ ~~if ( ch == '=' ) break ;  $ ~~c [ l ] = ch ;  $ ~~if ( c [ l ] == '+' )  $ ~~~pl ++ ;  $ ~~else  $ ~~~mn ++ ;  $ ~~l ++ ;  $ ~~cin >> ch ;  $ ~}  $ ~cin >> n ;  $ ~if ( n * pl - mn < n || pl - n * mn > n )  $ ~~cout << "Impossible" << endl ;  $ ~else {  $ ~~cout << "Possible" << endl ;  $ ~~for ( int i = 0 ; i <= l ; i ++ ) res [ i ] = 1 ;  $ ~~int d = n - ( pl - mn ) ;  $ ~~for ( int i = 0 ; i <= l ; i ++ ) {  $ ~~~if ( ( i == 0 || c [ i - 1 ] == '+' ) && d > 0 ) {  $ ~~~~if ( d < n - res [ i ] ) {  $ ~~~~~res [ i ] += d ;  $ ~~~~~d = 0 ;  $ ~~~~} else {  $ ~~~~~d -= n - res [ i ] ;  $ ~~~~~res [ i ] = n ;  $ ~~~~}  $ ~~~} else if ( i != 0 && c [ i - 1 ] == '-' && d < 0 ) {  $ ~~~~if ( - d < n - res [ i ] ) {  $ ~~~~~res [ i ] += - d ;  $ ~~~~~d = 0 ;  $ ~~~~} else {  $ ~~~~~d += n - res [ i ] ;  $ ~~~~~res [ i ] = n ;  $ ~~~~}  $ ~~~}  $ ~~}  $ ~~cout << res [ 0 ] ;  $ ~~for ( int i = 0 ; i < l ; i ++ ) cout << " " << c [ i ] << " " << res [ i + 1 ] ;  $ ~~cout << " = " << n << endl ;  $ ~}  $ ~return 0 ;  $ }
string s ;  $ int f1 , f2 ;  $ int main ( ) {  $ ~cin >> s ;  $ ~int len = s . length ( ) ;  $ ~int st = - 1 , en = - 2 ;  $ ~for ( int i = 0 ; i <= len - 1 ; i ++ ) {  $ ~~if ( f1 == 0 && s [ i ] == 'a' ) continue ;  $ ~~f1 = 1 ;  $ ~~if ( f2 == 0 ) {  $ ~~~st = i ;  $ ~~~f2 = 1 ;  $ ~~}  $ ~~if ( s [ i ] == 'a' ) break ;  $ ~~en = i ;  $ ~}  $ ~for ( int i = st ; i <= en ; i ++ ) s [ i ] -= 1 ;  $ ~if ( ! f1 ) s [ len - 1 ] = 'z' ;  $ ~cout << s << endl ;  $ ~return 0 ;  $ }
int n , k , cur , ans ;  $ int main ( ) {  $ ~cin >> n >> k ;  $ ~while ( n -- ) {  $ ~~int x ;  $ ~~cin >> x ;  $ ~~cur += x ;  $ ~~int r = min ( 8 , cur ) ;  $ ~~cur -= r ;  $ ~~k -= r ;  $ ~~ans ++ ;  $ ~~if ( k <= 0 ) break ;  $ ~}  $ ~if ( k > 0 )  $ ~~cout << - 1 << '\n' ;  $ ~else  $ ~~cout << ans << '\n' ;  $ ~return 0 ;  $ }
int const MAXN = 5005 ;  $ string izq ( string c ) {  $ ~string temp ( 6 , ' ' ) ;  $ ~temp [ 0 ] = c [ 3 ] ;  $ ~temp [ 1 ] = c [ 5 ] ;  $ ~temp [ 2 ] = c [ 2 ] ;  $ ~temp [ 3 ] = c [ 1 ] ;  $ ~temp [ 4 ] = c [ 4 ] ;  $ ~temp [ 5 ] = c [ 0 ] ;  $ ~return temp ;  $ }  $ string abajo ( string c ) {  $ ~string temp ( 6 , ' ' ) ;  $ ~temp [ 0 ] = c [ 0 ] ;  $ ~temp [ 1 ] = c [ 1 ] ;  $ ~temp [ 2 ] = c [ 3 ] ;  $ ~temp [ 3 ] = c [ 4 ] ;  $ ~temp [ 4 ] = c [ 5 ] ;  $ ~temp [ 5 ] = c [ 2 ] ;  $ ~return temp ;  $ }  $ string last ( string c ) {  $ ~string ans = c ;  $ ~for ( int i = 0 ; i < 3000 ; ++ i ) {  $ ~~if ( rand ( ) % 2 )  $ ~~~c = izq ( c ) ;  $ ~~else  $ ~~~c = abajo ( c ) ;  $ ~~ans = max ( ans , c ) ;  $ ~}  $ ~return ans ;  $ }  $ int main ( ) {  $ ~string color ;  $ ~cin >> color ;  $ ~sort ( color . begin ( ) , color . end ( ) ) ;  $ ~set < string > ans ;  $ ~do {  $ ~~string maxi = last ( color ) ;  $ ~~if ( ans . find ( maxi ) == ans . end ( ) ) ans . insert ( maxi ) ;  $ ~} while ( next_permutation ( color . begin ( ) , color . end ( ) ) ) ;  $ ~cout << ans . size ( ) << '\n' ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~int a , b , c , d ;  $ ~cin >> a >> b >> c >> d ;  $ ~if ( __gcd ( a , c ) != 1 && b % __gcd ( a , c ) != d % __gcd ( a , c ) )  $ ~~cout << - 1 << endl ;  $ ~else {  $ ~~while ( b != d ) {  $ ~~~if ( b < d )  $ ~~~~b += a ;  $ ~~~else  $ ~~~~d += c ;  $ ~~}  $ ~~cout << b << endl ;  $ ~}  $ ~return 0 ;  $ }
int a , b ;  $ int main ( ) {  $ ~cin >> a >> b ;  $ ~if ( abs ( a - b ) >= 2 ) {  $ ~~cout << "NO\n" ;  $ ~} else {  $ ~~if ( a == 0 && b == 0 ) {  $ ~~~cout << "NO\n" ;  $ ~~} else {  $ ~~~cout << "YES\n" ;  $ ~~}  $ ~}  $ ~return 0 ;  $ }
int main ( ) {  $ ~long long a , b , c , d , e , n ;  $ ~string s ;  $ ~cin >> s ;  $ ~n = s . size ( ) ;  $ ~n = ( n + 1 ) * 26 - n ;  $ ~cout << n << endl ;  $ }
const int M = 50 + 5 ;  $ int main ( ) {  $ ~int x , t , a , b , da , db ;  $ ~cin >> x >> t >> a >> b >> da >> db ;  $ ~bool ok = false ;  $ ~for ( int i = 0 ; i <= t - 1 ; i ++ ) {  $ ~~for ( int j = 0 ; j <= t - 1 ; j ++ ) {  $ ~~~int tsum = a - da * i + b - db * j ;  $ ~~~if ( tsum == x ) { ok = true ; }  $ ~~}  $ ~}  $ ~for ( int i = 0 ; i <= t - 1 ; i ++ ) {  $ ~~int tsum = a - da * i ;  $ ~~if ( tsum == x ) { ok = true ; }  $ ~}  $ ~for ( int i = 0 ; i <= t - 1 ; i ++ ) {  $ ~~int tsum = b - db * i ;  $ ~~if ( tsum == x ) { ok = true ; }  $ ~}  $ ~if ( x == 0 ) { ok = true ; }  $ ~string ans = ok ? "YES" : "NO" ;  $ ~cout << ans << endl ;  $ ~return 0 ;  $ }
bool isPrime ( long long n ) {  $ ~if ( n <= 1 ) return false ;  $ ~if ( n <= 3 ) return true ;  $ ~if ( n % 2 == 0 || n % 3 == 0 ) return false ;  $ ~for ( long long i = 5 ; i * i <= n ; i = i + 6 )  $ ~~if ( n % i == 0 || n % ( i + 2 ) == 0 ) return false ;  $ ~return true ;  $ }  $ int main ( ) {  $ ~long long t = 0 , n , x = 0 , y = 0 , i , j , k = 0 , m = 0 , ans = 0 ;  $ ~string s , p ;  $ ~cin >> t ;  $ ~while ( t -- ) {  $ ~~cin >> n ;  $ ~~if ( 360 % ( 180 - n ) == 0 ) {  $ ~~~cout << "YES\n" ;  $ ~~} else  $ ~~~cout << "NO\n" ;  $ ~}  $ }
int main ( ) {  $ ~int n , x ;  $ ~cin >> n >> x ;  $ ~vector < int > cards ( n + 1 ) ;  $ ~int tot = 0 ;  $ ~for ( int i = 0 ; i < n ; ++ i ) {  $ ~~cin >> cards [ i ] ;  $ ~~tot += cards [ i ] ;  $ ~}  $ ~tot = abs ( tot ) ;  $ ~int cnt = tot / x ;  $ ~if ( tot % x > 0 ) cnt ++ ;  $ ~cout << cnt << "\n" ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~string s , u ;  $ ~cin >> s >> u ;  $ ~int m = u . length ( ) ;  $ ~for ( int i = 0 ; i < m ; ++ i ) { s = '.' + s + '.' ; }  $ ~int mini = m , cur = 0 ;  $ ~for ( int i = 0 ; i < ( s . length ( ) - u . length ( ) ) + 1 ; ++ i ) {  $ ~~cur = 0 ;  $ ~~for ( int j = 0 ; j < u . length ( ) ; ++ j ) {  $ ~~~if ( s [ i + j ] != u [ j ] ) { ++ cur ; }  $ ~~}  $ ~~mini = min ( mini , cur ) ;  $ ~}  $ ~cout << mini << endl ;  $ ~return 0 ;  $ }
const int maxl = 2e5 + 10 ;  $ int la , lb ;  $ char s [ maxl ] , t [ maxl ] ;  $ int main ( ) {  $ ~cin >> la >> lb >> s >> t ;  $ ~int tar = - 1 ;  $ ~for ( int i = 0 ; i < la ; ++ i )  $ ~~if ( s [ i ] == '*' ) tar = i ;  $ ~if ( tar == - 1 ) {  $ ~~if ( la != lb ) {  $ ~~~puts ( "NO" ) ;  $ ~~~return 0 ;  $ ~~}  $ ~~for ( int i = 0 ; i < la ; ++ i )  $ ~~~if ( s [ i ] != t [ i ] ) {  $ ~~~~puts ( "NO" ) ;  $ ~~~~return 0 ;  $ ~~~}  $ ~~puts ( "YES" ) ;  $ ~~return 0 ;  $ ~}  $ ~if ( la - 1 > lb ) {  $ ~~puts ( "NO" ) ;  $ ~~return 0 ;  $ ~}  $ ~for ( int i = 0 ; i < tar ; ++ i )  $ ~~if ( s [ i ] != t [ i ] ) {  $ ~~~puts ( "NO" ) ;  $ ~~~return 0 ;  $ ~~}  $ ~for ( int i = 0 ; la - i - 1 > tar ; ++ i )  $ ~~if ( s [ la - i - 1 ] != t [ lb - i - 1 ] ) {  $ ~~~puts ( "NO" ) ;  $ ~~~return 0 ;  $ ~~}  $ ~puts ( "YES" ) ;  $ ~return 0 ;  $ }
