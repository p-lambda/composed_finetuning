string s ;  $ short int sz ;  $ bool flag = false ;  $ int main ( ) {  $ ~cin >> s ;  $ ~for ( int i = s . size ( ) - 1 ; i >= 0 ; i -- ) {  $ ~~if ( s [ i ] != '/' ) {  $ ~~~sz = i ;  $ ~~~break ;  $ ~~}  $ ~}  $ ~for ( int i = 0 ; i <= sz ; i ++ ) {  $ ~~if ( flag == false && s [ i ] == '/' ) {  $ ~~~flag = true ;  $ ~~~cout << s [ i ] ;  $ ~~} else if ( s [ i ] != '/' ) {  $ ~~~flag = false ;  $ ~~~cout << s [ i ] ;  $ ~~}  $ ~}  $ ~cout << '\n' ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~char a [ 110 ] ;  $ ~int len , i , j ;  $ ~cin >> a ;  $ ~len = strlen ( a ) ;  $ ~for ( i = 1 , j = 0 ; i < len ; i ++ ) {  $ ~~if ( a [ j ] != '/' || a [ i ] != '/' ) { a [ ++ j ] = a [ i ] ; }  $ ~}  $ ~while ( j > 0 && a [ j ] == '/' ) { j -- ; }  $ ~a [ j + 1 ] = '\0' ;  $ ~for ( i = 0 ; a [ i ] != '\0' ; i ++ ) cout << a [ i ] ;  $ ~cout << endl ;  $ ~return 0 ;  $ }
const long double eps = 1e-7 ;  $ const int inf = 1000000010 ;  $ const int mod = 1000000007 ;  $ const int MAXN = 100010 ;  $ string s , t ;  $ int main ( ) {  $ ~getline ( cin , s ) ;  $ ~t = s [ 0 ] ;  $ ~for ( int i = 1 ; i < s . size ( ) ; i ++ ) {  $ ~~if ( s [ i ] == '/' && s [ i - 1 ] == '/' ) continue ;  $ ~~t += s [ i ] ;  $ ~}  $ ~if ( t [ t . size ( ) - 1 ] == '/' ) t = t . substr ( 0 , t . size ( ) - 1 ) ;  $ ~if ( t == "" ) t = "/" ;  $ ~cout << t << endl ;  $ ~return 0 ;  $ }
const long double eps = 1e-7 ;  $ const int inf = 1000000010 ;  $ const int mod = 1000000007 ;  $ const int MAXN = 100010 ;  $ string s , t ;  $ int main ( ) {  $ ~getline ( cin , s ) ;  $ ~t = s [ 0 ] ;  $ ~for ( int i = 1 ; i < s . size ( ) ; i ++ ) {  $ ~~if ( s [ i ] == '/' && s [ i - 1 ] == '/' ) continue ;  $ ~~t += s [ i ] ;  $ ~}  $ ~if ( t [ t . size ( ) - 1 ] == '/' ) t = t . substr ( 0 , t . size ( ) - 1 ) ;  $ ~if ( t == "" ) t = "/" ;  $ ~cout << t << endl ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~string str ;  $ ~cin >> str ;  $ ~vector < char > ans ;  $ ~bool flag = false ;  $ ~for ( long long ( i ) = ( 0 ) ; ( i ) < ( str . size ( ) ) ; ++ i ) {  $ ~~if ( str [ i ] == '/' ) {  $ ~~~if ( flag ) continue ;  $ ~~~flag = true ;  $ ~~} else {  $ ~~~flag = false ;  $ ~~}  $ ~~ans . push_back ( str [ i ] ) ;  $ ~}  $ ~for ( long long ( i ) = ( 0 ) ; ( i ) < ( ans . size ( ) ) ; ++ i ) {  $ ~~if ( ans . size ( ) > 1 && i == ans . size ( ) - 1 && ans [ i ] == '/' ) continue ;  $ ~~cout << ans [ i ] ;  $ ~}  $ ~cout << endl ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~string str ;  $ ~cin >> str ;  $ ~vector < char > ans ;  $ ~bool flag = false ;  $ ~for ( long long ( i ) = ( 0 ) ; ( i ) < ( str . size ( ) ) ; ++ i ) {  $ ~~if ( str [ i ] == '/' ) {  $ ~~~if ( flag ) continue ;  $ ~~~flag = true ;  $ ~~} else {  $ ~~~flag = false ;  $ ~~}  $ ~~ans . push_back ( str [ i ] ) ;  $ ~}  $ ~for ( long long ( i ) = ( 0 ) ; ( i ) < ( ans . size ( ) ) ; ++ i ) {  $ ~~if ( ans . size ( ) > 1 && i == ans . size ( ) - 1 && ans [ i ] == '/' ) continue ;  $ ~~cout << ans [ i ] ;  $ ~}  $ ~cout << endl ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~string s ;  $ ~cin >> s ;  $ ~int t = 2 ;  $ ~string ans = "" , temps = "" ;  $ ~bool chk = false , lol = false ;  $ ~for ( int i = 0 ; i < s . size ( ) ; i ++ ) {  $ ~~if ( isalpha ( s [ i ] ) ) {  $ ~~~temps += s [ i ] ;  $ ~~~chk = true ;  $ ~~} else {  $ ~~~if ( chk == true ) {  $ ~~~~ans += "/" + temps ;  $ ~~~~temps = "" ;  $ ~~~~chk = false ;  $ ~~~}  $ ~~~lol = true ;  $ ~~}  $ ~}  $ ~if ( temps . size ( ) != 0 ) ans += "/" + temps ;  $ ~if ( ans . size ( ) == 0 && lol == true ) ans += "/" ;  $ ~cout << ans << endl ;  $ }
int main ( ) {  $ ~string s ;  $ ~cin >> s ;  $ ~int l = s . size ( ) ;  $ ~int n = 0 ;  $ ~for ( int i = 1 ; i < l ; i ++ ) {  $ ~~if ( ! ( s [ i ] == s [ i - 1 ] && s [ i ] == '/' ) ) {  $ ~~~++ n ;  $ ~~~cout << s [ i - 1 ] ;  $ ~~}  $ ~}  $ ~if ( s [ l - 1 ] != '/' || n == 0 ) cout << s [ l - 1 ] ;  $ ~cout << endl ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~string s ;  $ ~cin >> s ;  $ ~int l = s . size ( ) ;  $ ~int n = 0 ;  $ ~for ( int i = 1 ; i < l ; i ++ ) {  $ ~~if ( ! ( s [ i ] == s [ i - 1 ] && s [ i ] == '/' ) ) {  $ ~~~++ n ;  $ ~~~cout << s [ i - 1 ] ;  $ ~~}  $ ~}  $ ~if ( s [ l - 1 ] != '/' || n == 0 ) cout << s [ l - 1 ] ;  $ ~cout << endl ;  $ ~return 0 ;  $ }
const int maxn = 200005 ;  $ const int mod = 1e9 + 7 ;  $ const double eps = 1e-8 ;  $ const double PI = acos ( - 1.0 ) ;  $ double judge ( double x1 , double x2 , double x3 , double y1 , double y2 , double y3 ) {  $ ~if ( x1 == x2 && y1 == y2 || x2 == x3 && y2 == y3 || x3 == x1 && y3 == y1 ) return 0 ;  $ ~double a [ 3 ] ;  $ ~a [ 0 ] = ( x1 - x2 ) * ( x1 - x2 ) + ( y1 - y2 ) * ( y1 - y2 ) ;  $ ~a [ 1 ] = ( x2 - x3 ) * ( x2 - x3 ) + ( y2 - y3 ) * ( y2 - y3 ) ;  $ ~a [ 2 ] = ( x1 - x3 ) * ( x1 - x3 ) + ( y1 - y3 ) * ( y1 - y3 ) ;  $ ~sort ( a , a + 3 ) ;  $ ~if ( a [ 0 ] + a [ 1 ] == a [ 2 ] ) return 1 ;  $ ~return 0 ;  $ }  $ int dx [ ] = { 0 , 0 , 1 , - 1 } ;  $ int dy [ ] = { 1 , - 1 , 0 , 0 } ;  $ int main ( ) {  $ ~double x1 , x2 , x3 , y1 , y2 , y3 ;  $ ~while ( cin >> x1 >> y1 >> x2 >> y2 >> x3 >> y3 ) {  $ ~~if ( judge ( x1 , x2 , x3 , y1 , y2 , y3 ) )  $ ~~~cout << "RIGHT" << endl ;  $ ~~else {  $ ~~~int flag = 0 ;  $ ~~~for ( int i = 0 ; i < 4 ; i ++ ) {  $ ~~~~double xx = x1 + dx [ i ] , yy = y1 + dy [ i ] ;  $ ~~~~if ( judge ( xx , x2 , x3 , yy , y2 , y3 ) ) {  $ ~~~~~flag = 1 ;  $ ~~~~~cout << "ALMOST" << endl ;  $ ~~~~~break ;  $ ~~~~}  $ ~~~}  $ ~~~if ( flag ) continue ;  $ ~~~for ( int i = 0 ; i < 4 ; i ++ ) {  $ ~~~~double xx = x2 + dx [ i ] , yy = y2 + dy [ i ] ;  $ ~~~~if ( judge ( x1 , xx , x3 , y1 , yy , y3 ) ) {  $ ~~~~~flag = 1 ;  $ ~~~~~cout << "ALMOST" << endl ;  $ ~~~~~break ;  $ ~~~~}  $ ~~~}  $ ~~~if ( flag ) continue ;  $ ~~~for ( int i = 0 ; i < 4 ; i ++ ) {  $ ~~~~double xx = x3 + dx [ i ] , yy = y3 + dy [ i ] ;  $ ~~~~if ( judge ( x1 , x2 , xx , y1 , y2 , yy ) ) {  $ ~~~~~flag = 1 ;  $ ~~~~~cout << "ALMOST" << endl ;  $ ~~~~~break ;  $ ~~~~}  $ ~~~}  $ ~~~if ( ! flag ) cout << "NEITHER" << endl ;  $ ~~}  $ ~}  $ ~return 0 ;  $ }
int main ( ) {  $ ~string s ;  $ ~while ( cin >> s ) {  $ ~~int sz = s . size ( ) ;  $ ~~string ns = "" ;  $ ~~int flag = 0 ;  $ ~~for ( int i = 0 ; i < sz ; i ++ ) {  $ ~~~if ( s [ i ] == '/' ) {  $ ~~~~flag ++ ;  $ ~~~} else {  $ ~~~~flag = 0 ;  $ ~~~}  $ ~~~if ( flag == 0 || flag == 1 ) { ns += s [ i ] ; }  $ ~~}  $ ~~if ( ns . size ( ) == 1 )  $ ~~~cout << ns << endl ;  $ ~~else if ( ns [ ns . size ( ) - 1 ] == '/' )  $ ~~~cout << ns . substr ( 0 , ns . size ( ) - 1 ) << endl ;  $ ~~else  $ ~~~cout << ns << endl ;  $ ~}  $ ~return 0 ;  $ }
int main ( ) {  $ ~string s ;  $ ~while ( cin >> s ) {  $ ~~int sz = s . size ( ) ;  $ ~~string ns = "" ;  $ ~~int flag = 0 ;  $ ~~for ( int i = 0 ; i < sz ; i ++ ) {  $ ~~~if ( s [ i ] == '/' ) {  $ ~~~~flag ++ ;  $ ~~~} else {  $ ~~~~flag = 0 ;  $ ~~~}  $ ~~~if ( flag == 0 || flag == 1 ) { ns += s [ i ] ; }  $ ~~}  $ ~~if ( ns . size ( ) == 1 )  $ ~~~cout << ns << endl ;  $ ~~else if ( ns [ ns . size ( ) - 1 ] == '/' )  $ ~~~cout << ns . substr ( 0 , ns . size ( ) - 1 ) << endl ;  $ ~~else  $ ~~~cout << ns << endl ;  $ ~}  $ ~return 0 ;  $ }
int main ( ) {  $ ~string s ;  $ ~cin >> s ;  $ ~vector < string > vv ;  $ ~int i , j ;  $ ~int n = s . size ( ) ;  $ ~string str = "" , temp ;  $ ~temp = str ;  $ ~if ( s [ 0 ] == '/' ) {  $ ~~vv . push_back ( "/" ) ;  $ ~~i = 0 ;  $ ~~for ( j = i + 1 ; j < n ; j ++ ) {  $ ~~~if ( s [ j ] != '/' ) break ;  $ ~~}  $ ~}  $ ~i = j ;  $ ~for ( ; i < n ; i ++ ) {  $ ~~if ( s [ i ] == '/' ) {  $ ~~~if ( temp != str ) vv . push_back ( str ) ;  $ ~~~str = "" ;  $ ~~~for ( j = i + 1 ; j < n ; j ++ ) {  $ ~~~~if ( s [ j ] != '/' ) break ;  $ ~~~}  $ ~~~i = j - 1 ;  $ ~~~if ( i != n - 1 ) vv . push_back ( "/" ) ;  $ ~~} else {  $ ~~~str += s [ i ] ;  $ ~~}  $ ~}  $ ~if ( str != temp ) vv . push_back ( str ) ;  $ ~for ( i = 0 ; i < vv . size ( ) ; i ++ ) cout << vv [ i ] ;  $ ~cout << '\n' ;  $ }
int main ( ) {  $ ~string s ;  $ ~cin >> s ;  $ ~vector < string > vv ;  $ ~int i , j ;  $ ~int n = s . size ( ) ;  $ ~string str = "" , temp ;  $ ~temp = str ;  $ ~if ( s [ 0 ] == '/' ) {  $ ~~vv . push_back ( "/" ) ;  $ ~~i = 0 ;  $ ~~for ( j = i + 1 ; j < n ; j ++ ) {  $ ~~~if ( s [ j ] != '/' ) break ;  $ ~~}  $ ~}  $ ~i = j ;  $ ~for ( ; i < n ; i ++ ) {  $ ~~if ( s [ i ] == '/' ) {  $ ~~~if ( temp != str ) vv . push_back ( str ) ;  $ ~~~str = "" ;  $ ~~~for ( j = i + 1 ; j < n ; j ++ ) {  $ ~~~~if ( s [ j ] != '/' ) break ;  $ ~~~}  $ ~~~i = j - 1 ;  $ ~~~if ( i != n - 1 ) vv . push_back ( "/" ) ;  $ ~~} else {  $ ~~~str += s [ i ] ;  $ ~~}  $ ~}  $ ~if ( str != temp ) vv . push_back ( str ) ;  $ ~for ( i = 0 ; i < vv . size ( ) ; i ++ ) cout << vv [ i ] ;  $ ~cout << '\n' ;  $ }
const int maxn = 200005 ;  $ const int mod = 1e9 + 7 ;  $ const double eps = 1e-8 ;  $ const double PI = acos ( - 1.0 ) ;  $ double judge ( double x1 , double x2 , double x3 , double y1 , double y2 , double y3 ) {  $ ~if ( x1 == x2 && y1 == y2 || x2 == x3 && y2 == y3 || x3 == x1 && y3 == y1 ) return 0 ;  $ ~double a [ 3 ] ;  $ ~a [ 0 ] = ( x1 - x2 ) * ( x1 - x2 ) + ( y1 - y2 ) * ( y1 - y2 ) ;  $ ~a [ 1 ] = ( x2 - x3 ) * ( x2 - x3 ) + ( y2 - y3 ) * ( y2 - y3 ) ;  $ ~a [ 2 ] = ( x1 - x3 ) * ( x1 - x3 ) + ( y1 - y3 ) * ( y1 - y3 ) ;  $ ~sort ( a , a + 3 ) ;  $ ~if ( a [ 0 ] + a [ 1 ] == a [ 2 ] ) return 1 ;  $ ~return 0 ;  $ }  $ int dx [ ] = { 0 , 0 , 1 , - 1 } ;  $ int dy [ ] = { 1 , - 1 , 0 , 0 } ;  $ int main ( ) {  $ ~double x1 , x2 , x3 , y1 , y2 , y3 ;  $ ~while ( cin >> x1 >> y1 >> x2 >> y2 >> x3 >> y3 ) {  $ ~~if ( judge ( x1 , x2 , x3 , y1 , y2 , y3 ) )  $ ~~~cout << "RIGHT" << endl ;  $ ~~else {  $ ~~~int flag = 0 ;  $ ~~~for ( int i = 0 ; i < 4 ; i ++ ) {  $ ~~~~double xx = x1 + dx [ i ] , yy = y1 + dy [ i ] ;  $ ~~~~if ( judge ( xx , x2 , x3 , yy , y2 , y3 ) ) {  $ ~~~~~flag = 1 ;  $ ~~~~~cout << "ALMOST" << endl ;  $ ~~~~~break ;  $ ~~~~}  $ ~~~}  $ ~~~if ( flag ) continue ;  $ ~~~for ( int i = 0 ; i < 4 ; i ++ ) {  $ ~~~~double xx = x2 + dx [ i ] , yy = y2 + dy [ i ] ;  $ ~~~~if ( judge ( x1 , xx , x3 , y1 , yy , y3 ) ) {  $ ~~~~~flag = 1 ;  $ ~~~~~cout << "ALMOST" << endl ;  $ ~~~~~break ;  $ ~~~~}  $ ~~~}  $ ~~~if ( flag ) continue ;  $ ~~~for ( int i = 0 ; i < 4 ; i ++ ) {  $ ~~~~double xx = x3 + dx [ i ] , yy = y3 + dy [ i ] ;  $ ~~~~if ( judge ( x1 , x2 , xx , y1 , y2 , yy ) ) {  $ ~~~~~flag = 1 ;  $ ~~~~~cout << "ALMOST" << endl ;  $ ~~~~~break ;  $ ~~~~}  $ ~~~}  $ ~~~if ( ! flag ) cout << "NEITHER" << endl ;  $ ~~}  $ ~}  $ ~return 0 ;  $ }
int main ( ) {  $ ~const int size = 101 ;  $ ~char str [ size ] ;  $ ~cin . getline ( str , size ) ;  $ ~bool flag = false ;  $ ~char * start = str ;  $ ~char * s = start ;  $ ~char * p = start ;  $ ~while ( * s != '\0' ) {  $ ~~if ( * s == '/' ) {  $ ~~~if ( ! flag ) {  $ ~~~~flag = true ;  $ ~~~} else {  $ ~~~~s ++ ;  $ ~~~~continue ;  $ ~~~}  $ ~~} else {  $ ~~~flag = false ;  $ ~~}  $ ~~* p = * s ;  $ ~~p ++ ;  $ ~~s ++ ;  $ ~}  $ ~* p = '\0' ;  $ ~size_t len = strlen ( str ) ;  $ ~if ( len > 1 && str [ len - 1 ] == '/' ) { str [ len - 1 ] = '\0' ; }  $ ~strcpy ( str , start ) ;  $ ~puts ( str ) ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~const int size = 101 ;  $ ~char str [ size ] ;  $ ~cin . getline ( str , size ) ;  $ ~bool flag = false ;  $ ~char * start = str ;  $ ~char * s = start ;  $ ~char * p = start ;  $ ~while ( * s != '\0' ) {  $ ~~if ( * s == '/' ) {  $ ~~~if ( ! flag ) {  $ ~~~~flag = true ;  $ ~~~} else {  $ ~~~~s ++ ;  $ ~~~~continue ;  $ ~~~}  $ ~~} else {  $ ~~~flag = false ;  $ ~~}  $ ~~* p = * s ;  $ ~~p ++ ;  $ ~~s ++ ;  $ ~}  $ ~* p = '\0' ;  $ ~size_t len = strlen ( str ) ;  $ ~if ( len > 1 && str [ len - 1 ] == '/' ) { str [ len - 1 ] = '\0' ; }  $ ~strcpy ( str , start ) ;  $ ~puts ( str ) ;  $ ~return 0 ;  $ }
int l1 , l2 , l3 ;  $ int a [ 5 ] , b [ 5 ] , c [ 5 ] , d [ 5 ] , j , i ;  $ int dix [ ] = { 1 , 0 , - 1 , 0 } ;  $ int diy [ ] = { 0 , 1 , 0 , - 1 } ;  $ int main ( ) {  $ ~for ( i = 1 ; i <= 3 ; i ++ ) { cin >> a [ i ] >> b [ i ] ; }  $ ~l1 = abs ( a [ 1 ] - a [ 2 ] ) * abs ( a [ 1 ] - a [ 2 ] ) + abs ( b [ 1 ] - b [ 2 ] ) * abs ( b [ 1 ] - b [ 2 ] ) ;  $ ~l2 = abs ( a [ 2 ] - a [ 3 ] ) * abs ( a [ 2 ] - a [ 3 ] ) + abs ( b [ 2 ] - b [ 3 ] ) * abs ( b [ 2 ] - b [ 3 ] ) ;  $ ~l3 = abs ( a [ 3 ] - a [ 1 ] ) * abs ( a [ 3 ] - a [ 1 ] ) + abs ( b [ 3 ] - b [ 1 ] ) * abs ( b [ 3 ] - b [ 1 ] ) ;  $ ~if ( l1 + l2 == l3 || l1 + l3 == l2 || l2 + l3 == l1 ) {  $ ~~if ( l1 != 0 && l2 != 0 && l3 != 0 ) {  $ ~~~cout << "RIGHT" << endl ;  $ ~~~return 0 ;  $ ~~}  $ ~}  $ ~for ( i = 1 ; i <= 3 ; i ++ ) {  $ ~~c [ 1 ] = a [ 1 ] , c [ 2 ] = a [ 2 ] , c [ 3 ] = a [ 3 ] ;  $ ~~d [ 1 ] = b [ 1 ] , d [ 2 ] = b [ 2 ] , d [ 3 ] = b [ 3 ] ;  $ ~~for ( j = 0 ; j < 4 ; j ++ ) {  $ ~~~c [ i ] = a [ i ] + dix [ j ] ;  $ ~~~d [ i ] = b [ i ] + diy [ j ] ;  $ ~~~l1 = abs ( c [ 1 ] - c [ 2 ] ) * abs ( c [ 1 ] - c [ 2 ] ) + abs ( d [ 1 ] - d [ 2 ] ) * abs ( d [ 1 ] - d [ 2 ] ) ;  $ ~~~l2 = abs ( c [ 2 ] - c [ 3 ] ) * abs ( c [ 2 ] - c [ 3 ] ) + abs ( d [ 2 ] - d [ 3 ] ) * abs ( d [ 2 ] - d [ 3 ] ) ;  $ ~~~l3 = abs ( c [ 3 ] - c [ 1 ] ) * abs ( c [ 3 ] - c [ 1 ] ) + abs ( d [ 3 ] - d [ 1 ] ) * abs ( d [ 3 ] - d [ 1 ] ) ;  $ ~~~if ( l1 + l2 == l3 || l1 + l3 == l2 || l2 + l3 == l1 ) {  $ ~~~~if ( l1 != 0 && l2 != 0 && l3 != 0 ) {  $ ~~~~~cout << "ALMOST" << endl ;  $ ~~~~~return 0 ;  $ ~~~~}  $ ~~~}  $ ~~}  $ ~}  $ ~cout << "NEITHER" << endl ;  $ }
int main ( ) {  $ ~const int size = 101 ;  $ ~char str [ size ] ;  $ ~cin . getline ( str , size ) ;  $ ~bool flag = false ;  $ ~char * start = str ;  $ ~char * s = start ;  $ ~char * p = start ;  $ ~while ( * s != '\0' ) {  $ ~~if ( * s == '/' ) {  $ ~~~if ( ! flag ) {  $ ~~~~flag = true ;  $ ~~~} else {  $ ~~~~s ++ ;  $ ~~~~continue ;  $ ~~~}  $ ~~} else {  $ ~~~flag = false ;  $ ~~}  $ ~~* p = * s ;  $ ~~p ++ ;  $ ~~s ++ ;  $ ~}  $ ~* p = '\0' ;  $ ~size_t len = strlen ( str ) ;  $ ~if ( len > 1 && str [ len - 1 ] == '/' ) { str [ len - 1 ] = '\0' ; }  $ ~puts ( start ) ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~const int size = 101 ;  $ ~char str [ size ] ;  $ ~cin . getline ( str , size ) ;  $ ~bool flag = false ;  $ ~char * start = str ;  $ ~char * s = start ;  $ ~char * p = start ;  $ ~while ( * s != '\0' ) {  $ ~~if ( * s == '/' ) {  $ ~~~if ( ! flag ) {  $ ~~~~flag = true ;  $ ~~~} else {  $ ~~~~s ++ ;  $ ~~~~continue ;  $ ~~~}  $ ~~} else {  $ ~~~flag = false ;  $ ~~}  $ ~~* p = * s ;  $ ~~p ++ ;  $ ~~s ++ ;  $ ~}  $ ~* p = '\0' ;  $ ~size_t len = strlen ( str ) ;  $ ~if ( len > 1 && str [ len - 1 ] == '/' ) { str [ len - 1 ] = '\0' ; }  $ ~puts ( start ) ;  $ ~return 0 ;  $ }
int d [ 6 ] ;  $ int sqr ( int n ) {  $ ~return n * n ;  $ }  $ void check ( string s ) {  $ ~int a , b , c ;  $ ~a = sqr ( d [ 0 ] - d [ 2 ] ) + sqr ( d [ 1 ] - d [ 3 ] ) ;  $ ~b = sqr ( d [ 0 ] - d [ 4 ] ) + sqr ( d [ 1 ] - d [ 5 ] ) ;  $ ~c = sqr ( d [ 2 ] - d [ 4 ] ) + sqr ( d [ 3 ] - d [ 5 ] ) ;  $ ~if ( ( a && b && c ) == 0 ) return ;  $ ~if ( a + b == c || a + c == b || b + c == a ) {  $ ~~cout << s ;  $ ~~exit ( 0 ) ;  $ ~}  $ }  $ int main ( ) {  $ ~int i ;  $ ~for ( i = 0 ; i < 6 ; i ++ ) { cin >> d [ i ] ; }  $ ~check ( "RIGHT\n" ) ;  $ ~for ( i = 0 ; i < 6 ; i ++ ) {  $ ~~d [ i ] -- ;  $ ~~check ( "ALMOST\n" ) ;  $ ~~d [ i ] += 2 ;  $ ~~check ( "ALMOST\n" ) ;  $ ~~d [ i ] -- ;  $ ~}  $ ~cout << "NEITHER\n" ;  $ ~return 0 ;  $ }
int d [ 6 ] ;  $ int sqr ( int n ) {  $ ~return n * n ;  $ }  $ void check ( string s ) {  $ ~int a , b , c ;  $ ~a = sqr ( d [ 0 ] - d [ 2 ] ) + sqr ( d [ 1 ] - d [ 3 ] ) ;  $ ~b = sqr ( d [ 0 ] - d [ 4 ] ) + sqr ( d [ 1 ] - d [ 5 ] ) ;  $ ~c = sqr ( d [ 2 ] - d [ 4 ] ) + sqr ( d [ 3 ] - d [ 5 ] ) ;  $ ~if ( ( a && b && c ) == 0 ) return ;  $ ~if ( a + b == c || a + c == b || b + c == a ) {  $ ~~cout << s ;  $ ~~exit ( 0 ) ;  $ ~}  $ }  $ int main ( ) {  $ ~int i ;  $ ~for ( i = 0 ; i < 6 ; i ++ ) { cin >> d [ i ] ; }  $ ~check ( "RIGHT\n" ) ;  $ ~for ( i = 0 ; i < 6 ; i ++ ) {  $ ~~d [ i ] -- ;  $ ~~check ( "ALMOST\n" ) ;  $ ~~d [ i ] += 2 ;  $ ~~check ( "ALMOST\n" ) ;  $ ~~d [ i ] -- ;  $ ~}  $ ~cout << "NEITHER\n" ;  $ ~return 0 ;  $ }
bool check ( int x1 , int y1 , int x2 , int y2 , int x3 , int y3 ) {  $ ~if ( ( x1 == x2 && y1 == y2 ) || ( x1 == x3 && y1 == y3 ) || ( x3 == x2 && y3 == y2 ) ) return false ;  $ ~if ( ( y2 - y1 ) * ( y3 - y2 ) == ( ( x1 - x2 ) * ( x3 - x2 ) ) ) return true ;  $ ~if ( ( y3 - y2 ) * ( y1 - y3 ) == ( ( x2 - x3 ) * ( x1 - x3 ) ) ) return true ;  $ ~if ( ( y1 - y3 ) * ( y2 - y1 ) == ( ( x3 - x1 ) * ( x2 - x1 ) ) ) return true ;  $ ~return false ;  $ }  $ int main ( ) {  $ ~int x1 , y1 , x2 , y2 , x3 , y3 ;  $ ~cin >> x1 >> y1 >> x2 >> y2 >> x3 >> y3 ;  $ ~if ( check ( x1 , y1 , x2 , y2 , x3 , y3 ) ) {  $ ~~cout << "RIGHT" << endl ;  $ ~~return 0 ;  $ ~}  $ ~if ( check ( x1 - 1 , y1 , x2 , y2 , x3 , y3 ) ) {  $ ~~cout << "ALMOST" << endl ;  $ ~~return 0 ;  $ ~}  $ ~if ( check ( x1 + 1 , y1 , x2 , y2 , x3 , y3 ) ) {  $ ~~cout << "ALMOST" << endl ;  $ ~~return 0 ;  $ ~}  $ ~if ( check ( x1 , y1 - 1 , x2 , y2 , x3 , y3 ) ) {  $ ~~cout << "ALMOST" << endl ;  $ ~~return 0 ;  $ ~}  $ ~if ( check ( x1 , y1 + 1 , x2 , y2 , x3 , y3 ) ) {  $ ~~cout << "ALMOST" << endl ;  $ ~~return 0 ;  $ ~}  $ ~if ( check ( x1 , y1 , x2 - 1 , y2 , x3 , y3 ) ) {  $ ~~cout << "ALMOST" << endl ;  $ ~~return 0 ;  $ ~}  $ ~if ( check ( x1 , y1 , x2 + 1 , y2 , x3 , y3 ) ) {  $ ~~cout << "ALMOST" << endl ;  $ ~~return 0 ;  $ ~}  $ ~if ( check ( x1 , y1 , x2 , y2 - 1 , x3 , y3 ) ) {  $ ~~cout << "ALMOST" << endl ;  $ ~~return 0 ;  $ ~}  $ ~if ( check ( x1 , y1 , x2 , y2 + 1 , x3 , y3 ) ) {  $ ~~cout << "ALMOST" << endl ;  $ ~~return 0 ;  $ ~}  $ ~if ( check ( x1 , y1 , x2 , y2 , x3 - 1 , y3 ) ) {  $ ~~cout << "ALMOST" << endl ;  $ ~~return 0 ;  $ ~}  $ ~if ( check ( x1 , y1 , x2 , y2 , x3 + 1 , y3 ) ) {  $ ~~cout << "ALMOST" << endl ;  $ ~~return 0 ;  $ ~}  $ ~if ( check ( x1 , y1 , x2 , y2 , x3 , y3 - 1 ) ) {  $ ~~cout << "ALMOST" << endl ;  $ ~~return 0 ;  $ ~}  $ ~if ( check ( x1 , y1 , x2 , y2 , x3 , y3 + 1 ) ) {  $ ~~cout << "ALMOST" << endl ;  $ ~~return 0 ;  $ ~}  $ ~cout << "NEITHER" << endl ;  $ ~return 0 ;  $ }
bool check ( int x1 , int y1 , int x2 , int y2 , int x3 , int y3 ) {  $ ~int a , b , c ;  $ ~a = ( x1 - x2 ) * ( x1 - x2 ) + ( y1 - y2 ) * ( y1 - y2 ) ;  $ ~b = ( x1 - x3 ) * ( x1 - x3 ) + ( y1 - y3 ) * ( y1 - y3 ) ;  $ ~c = ( x3 - x2 ) * ( x3 - x2 ) + ( y3 - y2 ) * ( y3 - y2 ) ;  $ ~if ( a == 0 || b == 0 || c == 0 ) return 0 ;  $ ~if ( a + b == c || a + c == b || b + c == a )  $ ~~return 1 ;  $ ~else  $ ~~return 0 ;  $ }  $ int main ( ) {  $ ~int move [ 4 ] [ 2 ] = { { 0 , 1 } , { 1 , 0 } , { 0 , - 1 } , { - 1 , 0 } } ;  $ ~int x1 [ 4 ] , y1 [ 4 ] ;  $ ~for ( int i = 0 ; i < 3 ; i ++ ) { cin >> x1 [ i ] >> y1 [ i ] ; }  $ ~if ( check ( x1 [ 0 ] , y1 [ 0 ] , x1 [ 1 ] , y1 [ 1 ] , x1 [ 2 ] , y1 [ 2 ] ) ) {  $ ~~cout << "RIGHT" << endl ;  $ ~~return 0 ;  $ ~}  $ ~int tx , ty ;  $ ~for ( int i = 0 ; i <= 3 ; i ++ ) {  $ ~~for ( int j = 0 ; j <= 3 ; j ++ ) {  $ ~~~tx = x1 [ i ] + move [ j ] [ 0 ] ;  $ ~~~ty = y1 [ i ] + move [ j ] [ 1 ] ;  $ ~~~if ( i == 0 && check ( tx , ty , x1 [ 1 ] , y1 [ 1 ] , x1 [ 2 ] , y1 [ 2 ] ) ) {  $ ~~~~cout << "ALMOST" << endl ;  $ ~~~~return 0 ;  $ ~~~}  $ ~~~if ( i == 1 && check ( x1 [ 0 ] , y1 [ 0 ] , tx , ty , x1 [ 2 ] , y1 [ 2 ] ) ) {  $ ~~~~cout << "ALMOST" << endl ;  $ ~~~~return 0 ;  $ ~~~}  $ ~~~if ( i == 2 && check ( x1 [ 0 ] , y1 [ 0 ] , x1 [ 1 ] , y1 [ 1 ] , tx , ty ) ) {  $ ~~~~cout << "ALMOST" << endl ;  $ ~~~~return 0 ;  $ ~~~}  $ ~~}  $ ~~if ( i == 3 ) cout << "NEITHER" << endl ;  $ ~}  $ ~return 0 ;  $ }
bool check ( int x1 , int y1 , int x2 , int y2 , int x3 , int y3 ) {  $ ~int a , b , c ;  $ ~a = ( x1 - x2 ) * ( x1 - x2 ) + ( y1 - y2 ) * ( y1 - y2 ) ;  $ ~b = ( x1 - x3 ) * ( x1 - x3 ) + ( y1 - y3 ) * ( y1 - y3 ) ;  $ ~c = ( x3 - x2 ) * ( x3 - x2 ) + ( y3 - y2 ) * ( y3 - y2 ) ;  $ ~if ( a == 0 || b == 0 || c == 0 ) return 0 ;  $ ~if ( a + b == c || a + c == b || b + c == a )  $ ~~return 1 ;  $ ~else  $ ~~return 0 ;  $ }  $ int main ( ) {  $ ~int move [ 4 ] [ 2 ] = { { 0 , 1 } , { 1 , 0 } , { 0 , - 1 } , { - 1 , 0 } } ;  $ ~int x1 [ 4 ] , y1 [ 4 ] ;  $ ~for ( int i = 0 ; i < 3 ; i ++ ) { cin >> x1 [ i ] >> y1 [ i ] ; }  $ ~if ( check ( x1 [ 0 ] , y1 [ 0 ] , x1 [ 1 ] , y1 [ 1 ] , x1 [ 2 ] , y1 [ 2 ] ) ) {  $ ~~cout << "RIGHT" << endl ;  $ ~~return 0 ;  $ ~}  $ ~int tx , ty ;  $ ~for ( int i = 0 ; i <= 3 ; i ++ ) {  $ ~~for ( int j = 0 ; j <= 3 ; j ++ ) {  $ ~~~tx = x1 [ i ] + move [ j ] [ 0 ] ;  $ ~~~ty = y1 [ i ] + move [ j ] [ 1 ] ;  $ ~~~if ( i == 0 && check ( tx , ty , x1 [ 1 ] , y1 [ 1 ] , x1 [ 2 ] , y1 [ 2 ] ) ) {  $ ~~~~cout << "ALMOST" << endl ;  $ ~~~~return 0 ;  $ ~~~}  $ ~~~if ( i == 1 && check ( x1 [ 0 ] , y1 [ 0 ] , tx , ty , x1 [ 2 ] , y1 [ 2 ] ) ) {  $ ~~~~cout << "ALMOST" << endl ;  $ ~~~~return 0 ;  $ ~~~}  $ ~~~if ( i == 2 && check ( x1 [ 0 ] , y1 [ 0 ] , x1 [ 1 ] , y1 [ 1 ] , tx , ty ) ) {  $ ~~~~cout << "ALMOST" << endl ;  $ ~~~~return 0 ;  $ ~~~}  $ ~~}  $ ~~if ( i == 3 ) cout << "NEITHER" << endl ;  $ ~}  $ ~return 0 ;  $ }
bool right_tri ( int x1 , int y1 , int x2 , int y2 , int x3 , int y3 ) {  $ ~int a = ( ( x3 - x1 ) * ( x3 - x1 ) ) + ( ( y3 - y1 ) * ( y3 - y1 ) ) ;  $ ~int b = ( ( x2 - x1 ) * ( x2 - x1 ) ) + ( ( y2 - y1 ) * ( y2 - y1 ) ) ;  $ ~int c = ( ( x3 - x2 ) * ( x3 - x2 ) ) + ( ( y3 - y2 ) * ( y3 - y2 ) ) ;  $ ~vector < int > temp ;  $ ~temp . push_back ( a ) , temp . push_back ( b ) , temp . push_back ( c ) ;  $ ~sort ( temp . rbegin ( ) , temp . rend ( ) ) ;  $ ~if ( temp [ 2 ] == 0 ) return false ;  $ ~if ( temp [ 1 ] + temp [ 2 ] == temp [ 0 ] ) return true ;  $ ~return false ;  $ }  $ int main ( ) {  $ ~vector < int > a ( 6 ) ;  $ ~for ( int i = 0 ; i < 6 ; i ++ ) cin >> a [ i ] ;  $ ~if ( right_tri ( a [ 0 ] , a [ 1 ] , a [ 2 ] , a [ 3 ] , a [ 4 ] , a [ 5 ] ) == true ) {  $ ~~cout << "RIGHT" << endl ;  $ ~~return 0 ;  $ ~}  $ ~for ( int i = 0 ; i < 6 ; i ++ ) {  $ ~~for ( int j = 0 ; j < 2 ; j ++ ) {  $ ~~~int offset = ( j == 0 ) ? ( - 1 ) : ( 1 ) ;  $ ~~~a [ i ] += offset ;  $ ~~~if ( right_tri ( a [ 0 ] , a [ 1 ] , a [ 2 ] , a [ 3 ] , a [ 4 ] , a [ 5 ] ) == true ) {  $ ~~~~cout << "ALMOST" << endl ;  $ ~~~~return 0 ;  $ ~~~}  $ ~~~a [ i ] -= offset ;  $ ~~}  $ ~}  $ ~cout << "NEITHER" << endl ;  $ }
bool right_tri ( int x1 , int y1 , int x2 , int y2 , int x3 , int y3 ) {  $ ~int a = ( ( x3 - x1 ) * ( x3 - x1 ) ) + ( ( y3 - y1 ) * ( y3 - y1 ) ) ;  $ ~int b = ( ( x2 - x1 ) * ( x2 - x1 ) ) + ( ( y2 - y1 ) * ( y2 - y1 ) ) ;  $ ~int c = ( ( x3 - x2 ) * ( x3 - x2 ) ) + ( ( y3 - y2 ) * ( y3 - y2 ) ) ;  $ ~vector < int > temp ;  $ ~temp . push_back ( a ) , temp . push_back ( b ) , temp . push_back ( c ) ;  $ ~sort ( temp . rbegin ( ) , temp . rend ( ) ) ;  $ ~if ( temp [ 2 ] == 0 ) return false ;  $ ~if ( temp [ 1 ] + temp [ 2 ] == temp [ 0 ] ) return true ;  $ ~return false ;  $ }  $ int main ( ) {  $ ~vector < int > a ( 6 ) ;  $ ~for ( int i = 0 ; i < 6 ; i ++ ) cin >> a [ i ] ;  $ ~if ( right_tri ( a [ 0 ] , a [ 1 ] , a [ 2 ] , a [ 3 ] , a [ 4 ] , a [ 5 ] ) == true ) {  $ ~~cout << "RIGHT" << endl ;  $ ~~return 0 ;  $ ~}  $ ~for ( int i = 0 ; i < 6 ; i ++ ) {  $ ~~for ( int j = 0 ; j < 2 ; j ++ ) {  $ ~~~int offset = ( j == 0 ) ? ( - 1 ) : ( 1 ) ;  $ ~~~a [ i ] += offset ;  $ ~~~if ( right_tri ( a [ 0 ] , a [ 1 ] , a [ 2 ] , a [ 3 ] , a [ 4 ] , a [ 5 ] ) == true ) {  $ ~~~~cout << "ALMOST" << endl ;  $ ~~~~return 0 ;  $ ~~~}  $ ~~~a [ i ] -= offset ;  $ ~~}  $ ~}  $ ~cout << "NEITHER" << endl ;  $ }
char s [ 100005 ] ;  $ char revs [ 100005 ] ;  $ int ln , ln1 , ln2 ;  $ char str [ 100005 ] ;  $ char src1 [ 100005 ] ;  $ char src2 [ 100005 ] ;  $ bool flag1 , flag2 ;  $ int main ( ) {  $ ~cin . getline ( s , 100005 ) ;  $ ~ln = strlen ( s ) ;  $ ~for ( int i = 0 ; i < ln ; ++ i ) { revs [ i ] = s [ ln - i - 1 ] ; }  $ ~cin . getline ( src1 , 100005 ) ;  $ ~cin . getline ( src2 , 100005 ) ;  $ ~ln1 = strlen ( src1 ) ;  $ ~ln2 = strlen ( src2 ) ;  $ ~char * p = strstr ( s , src1 ) ;  $ ~if ( p ) {  $ ~~char * p2 = strstr ( p + ln1 , src2 ) ;  $ ~~if ( p2 ) { flag1 = true ; }  $ ~}  $ ~p = strstr ( revs , src1 ) ;  $ ~if ( p ) {  $ ~~char * p2 = strstr ( p + ln1 , src2 ) ;  $ ~~if ( p2 ) { flag2 = true ; }  $ ~}  $ ~if ( flag1 && flag2 ) {  $ ~~cout << "both\n" ;  $ ~} else if ( flag1 ) {  $ ~~cout << "forward\n" ;  $ ~} else if ( flag2 ) {  $ ~~cout << "backward\n" ;  $ ~} else {  $ ~~cout << "fantasy\n" ;  $ ~}  $ ~return 0 ;  $ }
int main ( ) {  $ ~string s , a , b ;  $ ~while ( cin >> s >> a >> b ) {  $ ~~bool isok [ 2 ] = { 0 , 0 } ;  $ ~~for ( int i = 0 ; i < 2 ; i ++ ) {  $ ~~~int idx = s . find ( a ) ;  $ ~~~if ( idx != string : : npos ) {  $ ~~~~idx = s . find ( b , idx + a . size ( ) ) ;  $ ~~~~if ( idx != string : : npos ) isok [ i ] = 1 ;  $ ~~~}  $ ~~~reverse ( s . begin ( ) , s . end ( ) ) ;  $ ~~}  $ ~~if ( isok [ 0 ] && isok [ 1 ] )  $ ~~~cout << "both" << endl ;  $ ~~else if ( isok [ 0 ] )  $ ~~~cout << "forward" << endl ;  $ ~~else if ( isok [ 1 ] )  $ ~~~cout << "backward" << endl ;  $ ~~else  $ ~~~cout << "fantasy" << endl ;  $ ~}  $ ~return 0 ;  $ }
int main ( ) {  $ ~string s , a , b ;  $ ~while ( cin >> s >> a >> b ) {  $ ~~bool isok [ 2 ] = { 0 , 0 } ;  $ ~~for ( int i = 0 ; i < 2 ; i ++ ) {  $ ~~~int idx = s . find ( a ) ;  $ ~~~if ( idx != string : : npos ) {  $ ~~~~idx = s . find ( b , idx + a . size ( ) ) ;  $ ~~~~if ( idx != string : : npos ) isok [ i ] = 1 ;  $ ~~~}  $ ~~~reverse ( s . begin ( ) , s . end ( ) ) ;  $ ~~}  $ ~~if ( isok [ 0 ] && isok [ 1 ] )  $ ~~~cout << "both" << endl ;  $ ~~else if ( isok [ 0 ] )  $ ~~~cout << "forward" << endl ;  $ ~~else if ( isok [ 1 ] )  $ ~~~cout << "backward" << endl ;  $ ~~else  $ ~~~cout << "fantasy" << endl ;  $ ~}  $ ~return 0 ;  $ }
int main ( ) {  $ ~string s , a , b ;  $ ~bool atob = false , btoa = false ;  $ ~cin >> s >> a >> b ;  $ ~int pos = s . find ( a ) ;  $ ~if ( pos != - 1 && ( int ) s . find ( b , pos + a . length ( ) ) != - 1 ) atob = true ;  $ ~reverse ( s . begin ( ) , s . end ( ) ) ;  $ ~pos = s . find ( a ) ;  $ ~if ( pos != - 1 && ( int ) s . find ( b , pos + a . length ( ) ) != - 1 ) btoa = true ;  $ ~if ( atob && btoa )  $ ~~cout << "both" << endl ;  $ ~else if ( atob )  $ ~~cout << "forward" << endl ;  $ ~else if ( btoa )  $ ~~cout << "backward" << endl ;  $ ~else  $ ~~cout << "fantasy" << endl ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~string s , a , b ;  $ ~bool atob = false , btoa = false ;  $ ~cin >> s >> a >> b ;  $ ~int pos = s . find ( a ) ;  $ ~if ( pos != - 1 && ( int ) s . find ( b , pos + a . length ( ) ) != - 1 ) atob = true ;  $ ~reverse ( s . begin ( ) , s . end ( ) ) ;  $ ~pos = s . find ( a ) ;  $ ~if ( pos != - 1 && ( int ) s . find ( b , pos + a . length ( ) ) != - 1 ) btoa = true ;  $ ~if ( atob && btoa )  $ ~~cout << "both" << endl ;  $ ~else if ( atob )  $ ~~cout << "forward" << endl ;  $ ~else if ( btoa )  $ ~~cout << "backward" << endl ;  $ ~else  $ ~~cout << "fantasy" << endl ;  $ ~return 0 ;  $ }
const double PI = acos ( - 1.0 ) ;  $ const int INF = 1000 * 1000 * 1000 + 7 ;  $ const long long LINF = INF * ( long long ) INF ;  $ const int MAX = 1000 + 7 ;  $ string s , a , b ;  $ bool can ( ) {  $ ~int p1 = - 1 ;  $ ~for ( int i = ( 0 ) ; i < ( ( int ) s . size ( ) ) ; i ++ ) {  $ ~~bool ok = true ;  $ ~~for ( int j = ( 0 ) ; j < ( ( int ) a . size ( ) ) ; j ++ ) {  $ ~~~if ( i + j >= ( int ) s . size ( ) || s [ i + j ] != a [ j ] ) {  $ ~~~~ok = false ;  $ ~~~~break ;  $ ~~~}  $ ~~}  $ ~~if ( ok ) {  $ ~~~p1 = i ;  $ ~~~break ;  $ ~~}  $ ~}  $ ~if ( p1 == - 1 ) return false ;  $ ~int p2 = - 1 ;  $ ~for ( int i = ( ( int ) s . size ( ) ) - 1 ; i >= ( 0 ) ; i -- ) {  $ ~~bool ok = true ;  $ ~~for ( int j = ( 0 ) ; j < ( ( int ) b . size ( ) ) ; j ++ ) {  $ ~~~if ( i + j >= ( int ) s . size ( ) || s [ i + j ] != b [ j ] ) {  $ ~~~~ok = false ;  $ ~~~~break ;  $ ~~~}  $ ~~}  $ ~~if ( ok ) {  $ ~~~p2 = i ;  $ ~~~break ;  $ ~~}  $ ~}  $ ~if ( p1 + ( int ) a . size ( ) - 1 < p2 ) return true ;  $ ~return false ;  $ }  $ int main ( ) {  $ ~cin >> s >> a >> b ;  $ ~bool forward = can ( ) ;  $ ~reverse ( s . begin ( ) , s . end ( ) ) ;  $ ~bool backward = can ( ) ;  $ ~if ( forward && backward ) {  $ ~~cout << "both" << endl ;  $ ~~return 0 ;  $ ~}  $ ~if ( forward ) {  $ ~~cout << "forward" << endl ;  $ ~~return 0 ;  $ ~}  $ ~if ( backward ) {  $ ~~cout << "backward" << endl ;  $ ~~return 0 ;  $ ~}  $ ~cout << "fantasy" << endl ;  $ }
char s [ 123456 ] ;  $ char a [ 128 ] ;  $ char b [ 128 ] ;  $ int p [ 128 ] , p2 [ 128 ] ;  $ bool check ( ) {  $ ~p [ 0 ] = - 1 ;  $ ~int sa = strlen ( a ) ;  $ ~int sb = strlen ( b ) ;  $ ~for ( int i = ( 1 ) , _b ( sa ) ; i < _b ; ++ i ) {  $ ~~p [ i ] = p [ i - 1 ] ;  $ ~~while ( p [ i ] != - 1 && a [ p [ i ] + 1 ] != a [ i ] ) p [ i ] = p [ p [ i ] ] ;  $ ~~if ( a [ p [ i ] + 1 ] == a [ i ] ) p [ i ] ++ ;  $ ~}  $ ~p2 [ 0 ] = - 1 ;  $ ~for ( int i = ( 1 ) , _b ( sb ) ; i < _b ; ++ i ) {  $ ~~p2 [ i ] = p2 [ i - 1 ] ;  $ ~~while ( p2 [ i ] != - 1 && b [ p2 [ i ] + 1 ] != b [ i ] ) p2 [ i ] = p2 [ p2 [ i ] ] ;  $ ~~if ( b [ p2 [ i ] + 1 ] == b [ i ] ) p2 [ i ] ++ ;  $ ~}  $ ~int n = strlen ( s ) ;  $ ~int x = - 1 ;  $ ~for ( int i = ( 0 ) , _b ( n ) ; i < _b ; ++ i ) {  $ ~~while ( x != - 1 && a [ x + 1 ] != s [ i ] ) x = p [ x ] ;  $ ~~if ( a [ x + 1 ] == s [ i ] ) ++ x ;  $ ~~if ( x == sa - 1 ) {  $ ~~~x = - 1 ;  $ ~~~for ( ++ i ; i < n ; ++ i ) {  $ ~~~~while ( x != - 1 && b [ x + 1 ] != s [ i ] ) x = p2 [ x ] ;  $ ~~~~if ( b [ x + 1 ] == s [ i ] ) ++ x ;  $ ~~~~if ( x == sb - 1 ) return true ;  $ ~~~}  $ ~~~return false ;  $ ~~}  $ ~}  $ ~return false ;  $ }  $ int main ( ) {  $ ~gets ( s ) ;  $ ~gets ( a ) ;  $ ~gets ( b ) ;  $ ~bool q = check ( ) ;  $ ~reverse ( s , s + strlen ( s ) ) ;  $ ~bool w = check ( ) ;  $ ~if ( q && w ) cout << "both\n" ;  $ ~if ( q && ! w ) cout << "forward\n" ;  $ ~if ( ! q && w ) cout << "backward\n" ;  $ ~if ( ! q && ! w ) cout << "fantasy\n" ;  $ ~return 0 ;  $ }
char s [ 100010 ] ;  $ char a [ 100010 ] , b [ 100010 ] ;  $ int main ( ) {  $ ~cin >> s + 1 >> a + 1 >> b + 1 ;  $ ~int ls = strlen ( s + 1 ) , la = strlen ( a + 1 ) , lb = strlen ( b + 1 ) ;  $ ~int p1 = - 1 , p2 = - 1 ;  $ ~bool f1 = 0 , f2 = 0 ;  $ ~for ( register int i = 1 ; i <= ls - la + 1 ; i ++ ) {  $ ~~bool flag = 1 ;  $ ~~for ( register int j = 1 , k = i ; j <= la ; j ++ , k ++ )  $ ~~~if ( a [ j ] != s [ k ] ) {  $ ~~~~flag = 0 ;  $ ~~~~break ;  $ ~~~}  $ ~~if ( flag ) {  $ ~~~p1 = i + la - 1 ;  $ ~~~break ;  $ ~~}  $ ~}  $ ~if ( p1 != - 1 ) {  $ ~~for ( register int i = p1 + 1 ; i <= ls - lb + 1 ; i ++ ) {  $ ~~~f1 = 1 ;  $ ~~~for ( register int j = 1 , k = i ; j <= lb ; j ++ , k ++ )  $ ~~~~if ( b [ j ] != s [ k ] ) {  $ ~~~~~f1 = 0 ;  $ ~~~~~break ;  $ ~~~~}  $ ~~~if ( f1 ) break ;  $ ~~}  $ ~}  $ ~for ( register int i = 1 ; i <= ls - lb + 1 ; i ++ ) {  $ ~~bool flag = 1 ;  $ ~~for ( register int j = 1 , k = i + lb - 1 ; j <= lb ; j ++ , k -- )  $ ~~~if ( b [ j ] != s [ k ] ) {  $ ~~~~flag = 0 ;  $ ~~~~break ;  $ ~~~}  $ ~~if ( flag ) {  $ ~~~p2 = i + lb - 1 ;  $ ~~~break ;  $ ~~}  $ ~}  $ ~if ( p2 != - 1 ) {  $ ~~for ( register int i = p2 + 1 ; i <= ls - la + 1 ; i ++ ) {  $ ~~~f2 = 1 ;  $ ~~~for ( register int j = 1 , k = i + la - 1 ; j <= la ; j ++ , k -- )  $ ~~~~if ( a [ j ] != s [ k ] ) {  $ ~~~~~f2 = 0 ;  $ ~~~~~break ;  $ ~~~~}  $ ~~~if ( f2 ) break ;  $ ~~}  $ ~}  $ ~if ( f1 && f2 )  $ ~~puts ( "both" ) ;  $ ~else if ( f1 )  $ ~~puts ( "forward" ) ;  $ ~else if ( f2 )  $ ~~puts ( "backward" ) ;  $ ~else  $ ~~puts ( "fantasy" ) ;  $ ~return 0 ;  $ }
char s [ 123456 ] ;  $ char a [ 128 ] ;  $ char b [ 128 ] ;  $ int p [ 128 ] , p2 [ 128 ] ;  $ bool check ( ) {  $ ~p [ 0 ] = - 1 ;  $ ~int sa = strlen ( a ) ;  $ ~int sb = strlen ( b ) ;  $ ~for ( int i = ( 1 ) , _b ( sa ) ; i < _b ; ++ i ) {  $ ~~p [ i ] = p [ i - 1 ] ;  $ ~~while ( p [ i ] != - 1 && a [ p [ i ] + 1 ] != a [ i ] ) p [ i ] = p [ p [ i ] ] ;  $ ~~if ( a [ p [ i ] + 1 ] == a [ i ] ) p [ i ] ++ ;  $ ~}  $ ~p2 [ 0 ] = - 1 ;  $ ~for ( int i = ( 1 ) , _b ( sb ) ; i < _b ; ++ i ) {  $ ~~p2 [ i ] = p2 [ i - 1 ] ;  $ ~~while ( p2 [ i ] != - 1 && b [ p2 [ i ] + 1 ] != b [ i ] ) p2 [ i ] = p2 [ p2 [ i ] ] ;  $ ~~if ( b [ p2 [ i ] + 1 ] == b [ i ] ) p2 [ i ] ++ ;  $ ~}  $ ~int n = strlen ( s ) ;  $ ~int x = - 1 ;  $ ~for ( int i = ( 0 ) , _b ( n ) ; i < _b ; ++ i ) {  $ ~~while ( x != - 1 && a [ x + 1 ] != s [ i ] ) x = p [ x ] ;  $ ~~if ( a [ x + 1 ] == s [ i ] ) ++ x ;  $ ~~if ( x == sa - 1 ) {  $ ~~~x = - 1 ;  $ ~~~for ( ++ i ; i < n ; ++ i ) {  $ ~~~~while ( x != - 1 && b [ x + 1 ] != s [ i ] ) x = p2 [ x ] ;  $ ~~~~if ( b [ x + 1 ] == s [ i ] ) ++ x ;  $ ~~~~if ( x == sb - 1 ) return true ;  $ ~~~}  $ ~~~return false ;  $ ~~}  $ ~}  $ ~return false ;  $ }  $ int main ( ) {  $ ~gets ( s ) ;  $ ~gets ( a ) ;  $ ~gets ( b ) ;  $ ~bool q = check ( ) ;  $ ~reverse ( s , s + strlen ( s ) ) ;  $ ~bool w = check ( ) ;  $ ~if ( q && w ) cout << "both\n" ;  $ ~if ( q && ! w ) cout << "forward\n" ;  $ ~if ( ! q && w ) cout << "backward\n" ;  $ ~if ( ! q && ! w ) cout << "fantasy\n" ;  $ ~return 0 ;  $ }
char s [ 123456 ] ;  $ char a [ 128 ] ;  $ char b [ 128 ] ;  $ int p [ 128 ] , p2 [ 128 ] ;  $ bool check ( ) {  $ ~p [ 0 ] = - 1 ;  $ ~int sa = strlen ( a ) ;  $ ~int sb = strlen ( b ) ;  $ ~for ( int i = ( 1 ) , _b ( sa ) ; i < _b ; ++ i ) {  $ ~~p [ i ] = p [ i - 1 ] ;  $ ~~while ( p [ i ] != - 1 && a [ p [ i ] + 1 ] != a [ i ] ) p [ i ] = p [ p [ i ] ] ;  $ ~~if ( a [ p [ i ] + 1 ] == a [ i ] ) p [ i ] ++ ;  $ ~}  $ ~p2 [ 0 ] = - 1 ;  $ ~for ( int i = ( 1 ) , _b ( sb ) ; i < _b ; ++ i ) {  $ ~~p2 [ i ] = p2 [ i - 1 ] ;  $ ~~while ( p2 [ i ] != - 1 && b [ p2 [ i ] + 1 ] != b [ i ] ) p2 [ i ] = p2 [ p2 [ i ] ] ;  $ ~~if ( b [ p2 [ i ] + 1 ] == b [ i ] ) p2 [ i ] ++ ;  $ ~}  $ ~int n = strlen ( s ) ;  $ ~int x = - 1 ;  $ ~for ( int i = ( 0 ) , _b ( n ) ; i < _b ; ++ i ) {  $ ~~while ( x != - 1 && a [ x + 1 ] != s [ i ] ) x = p [ x ] ;  $ ~~if ( a [ x + 1 ] == s [ i ] ) ++ x ;  $ ~~if ( x == sa - 1 ) {  $ ~~~x = - 1 ;  $ ~~~for ( ++ i ; i < n ; ++ i ) {  $ ~~~~while ( x != - 1 && b [ x + 1 ] != s [ i ] ) x = p2 [ x ] ;  $ ~~~~if ( b [ x + 1 ] == s [ i ] ) ++ x ;  $ ~~~~if ( x == sb - 1 ) return true ;  $ ~~~}  $ ~~~return false ;  $ ~~}  $ ~}  $ ~return false ;  $ }  $ int main ( ) {  $ ~gets ( s ) ;  $ ~gets ( a ) ;  $ ~gets ( b ) ;  $ ~bool q = check ( ) ;  $ ~reverse ( s , s + strlen ( s ) ) ;  $ ~bool w = check ( ) ;  $ ~if ( q && w ) cout << "both\n" ;  $ ~if ( q && ! w ) cout << "forward\n" ;  $ ~if ( ! q && w ) cout << "backward\n" ;  $ ~if ( ! q && ! w ) cout << "fantasy\n" ;  $ ~return 0 ;  $ }
char s [ 100010 ] ;  $ char a [ 100010 ] , b [ 100010 ] ;  $ int main ( ) {  $ ~cin >> s + 1 >> a + 1 >> b + 1 ;  $ ~int ls = strlen ( s + 1 ) , la = strlen ( a + 1 ) , lb = strlen ( b + 1 ) ;  $ ~int p1 = - 1 , p2 = - 1 ;  $ ~bool f1 = 0 , f2 = 0 ;  $ ~for ( register int i = 1 ; i <= ls - la + 1 ; i ++ ) {  $ ~~bool flag = 1 ;  $ ~~for ( register int j = 1 , k = i ; j <= la ; j ++ , k ++ )  $ ~~~if ( a [ j ] != s [ k ] ) {  $ ~~~~flag = 0 ;  $ ~~~~break ;  $ ~~~}  $ ~~if ( flag ) {  $ ~~~p1 = i + la - 1 ;  $ ~~~break ;  $ ~~}  $ ~}  $ ~if ( p1 != - 1 ) {  $ ~~for ( register int i = p1 + 1 ; i <= ls - lb + 1 ; i ++ ) {  $ ~~~f1 = 1 ;  $ ~~~for ( register int j = 1 , k = i ; j <= lb ; j ++ , k ++ )  $ ~~~~if ( b [ j ] != s [ k ] ) {  $ ~~~~~f1 = 0 ;  $ ~~~~~break ;  $ ~~~~}  $ ~~~if ( f1 ) break ;  $ ~~}  $ ~}  $ ~for ( register int i = 1 ; i <= ls - lb + 1 ; i ++ ) {  $ ~~bool flag = 1 ;  $ ~~for ( register int j = 1 , k = i + lb - 1 ; j <= lb ; j ++ , k -- )  $ ~~~if ( b [ j ] != s [ k ] ) {  $ ~~~~flag = 0 ;  $ ~~~~break ;  $ ~~~}  $ ~~if ( flag ) {  $ ~~~p2 = i + lb - 1 ;  $ ~~~break ;  $ ~~}  $ ~}  $ ~if ( p2 != - 1 ) {  $ ~~for ( register int i = p2 + 1 ; i <= ls - la + 1 ; i ++ ) {  $ ~~~f2 = 1 ;  $ ~~~for ( register int j = 1 , k = i + la - 1 ; j <= la ; j ++ , k -- )  $ ~~~~if ( a [ j ] != s [ k ] ) {  $ ~~~~~f2 = 0 ;  $ ~~~~~break ;  $ ~~~~}  $ ~~~if ( f2 ) break ;  $ ~~}  $ ~}  $ ~if ( f1 && f2 )  $ ~~puts ( "both" ) ;  $ ~else if ( f1 )  $ ~~puts ( "forward" ) ;  $ ~else if ( f2 )  $ ~~puts ( "backward" ) ;  $ ~else  $ ~~puts ( "fantasy" ) ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~string a , b , c ;  $ ~cin >> a >> b >> c ;  $ ~bool forward = false , backward = false ;  $ ~int pos_1 = a . find ( b ) ;  $ ~int pos_2 ;  $ ~if ( pos_1 != - 1 ) {  $ ~~pos_2 = a . find ( c , pos_1 + b . length ( ) ) ;  $ ~~if ( pos_2 != - 1 ) { forward = true ; }  $ ~}  $ ~reverse ( a . begin ( ) , a . end ( ) ) ;  $ ~pos_1 = a . find ( b ) ;  $ ~if ( pos_1 != - 1 ) {  $ ~~pos_2 = a . find ( c , pos_1 + b . length ( ) ) ;  $ ~~if ( pos_2 != - 1 ) { backward = true ; }  $ ~}  $ ~if ( backward == false && forward == false ) { puts ( "fantasy" ) ; }  $ ~if ( backward == false && forward == true ) { puts ( "forward" ) ; }  $ ~if ( forward == false && backward == true ) { puts ( "backward" ) ; }  $ ~if ( backward == true && forward == true ) { puts ( "both" ) ; }  $ }
int main ( ) {  $ ~string a , b , c ;  $ ~cin >> a >> b >> c ;  $ ~bool forward = false , backward = false ;  $ ~int pos_1 = a . find ( b ) ;  $ ~int pos_2 ;  $ ~if ( pos_1 != - 1 ) {  $ ~~pos_2 = a . find ( c , pos_1 + b . length ( ) ) ;  $ ~~if ( pos_2 != - 1 ) { forward = true ; }  $ ~}  $ ~reverse ( a . begin ( ) , a . end ( ) ) ;  $ ~pos_1 = a . find ( b ) ;  $ ~if ( pos_1 != - 1 ) {  $ ~~pos_2 = a . find ( c , pos_1 + b . length ( ) ) ;  $ ~~if ( pos_2 != - 1 ) { backward = true ; }  $ ~}  $ ~if ( backward == false && forward == false ) { puts ( "fantasy" ) ; }  $ ~if ( backward == false && forward == true ) { puts ( "forward" ) ; }  $ ~if ( forward == false && backward == true ) { puts ( "backward" ) ; }  $ ~if ( backward == true && forward == true ) { puts ( "both" ) ; }  $ }
int main ( ) {  $ ~string s , a , b ;  $ ~while ( cin >> s >> a >> b ) {  $ ~~bool isok [ 2 ] = { 0 , 0 } ;  $ ~~for ( int i = 0 ; i < 2 ; i ++ ) {  $ ~~~int idx = s . find ( a ) ;  $ ~~~if ( idx != string : : npos ) {  $ ~~~~idx = s . find ( b , idx + a . size ( ) ) ;  $ ~~~~if ( idx != string : : npos ) isok [ i ] = 1 ;  $ ~~~}  $ ~~~reverse ( s . begin ( ) , s . end ( ) ) ;  $ ~~}  $ ~~if ( isok [ 0 ] && isok [ 1 ] )  $ ~~~cout << "both" << endl ;  $ ~~else if ( isok [ 0 ] )  $ ~~~cout << "forward" << endl ;  $ ~~else if ( isok [ 1 ] )  $ ~~~cout << "backward" << endl ;  $ ~~else  $ ~~~cout << "fantasy" << endl ;  $ ~}  $ ~return 0 ;  $ }
int main ( ) {  $ ~string s , a , b ;  $ ~while ( cin >> s >> a >> b ) {  $ ~~bool isok [ 2 ] = { 0 , 0 } ;  $ ~~for ( int i = 0 ; i < 2 ; i ++ ) {  $ ~~~int idx = s . find ( a ) ;  $ ~~~if ( idx != string : : npos ) {  $ ~~~~idx = s . find ( b , idx + a . size ( ) ) ;  $ ~~~~if ( idx != string : : npos ) isok [ i ] = 1 ;  $ ~~~}  $ ~~~reverse ( s . begin ( ) , s . end ( ) ) ;  $ ~~}  $ ~~if ( isok [ 0 ] && isok [ 1 ] )  $ ~~~cout << "both" << endl ;  $ ~~else if ( isok [ 0 ] )  $ ~~~cout << "forward" << endl ;  $ ~~else if ( isok [ 1 ] )  $ ~~~cout << "backward" << endl ;  $ ~~else  $ ~~~cout << "fantasy" << endl ;  $ ~}  $ ~return 0 ;  $ }
void fill_prefix ( string & P , vector < int > & F ) {  $ ~F . resize ( P . size ( ) , 0 ) ;  $ ~for ( int j , i = 1 ; i < P . size ( ) ; ++ i ) {  $ ~~j = F [ i - 1 ] ;  $ ~~while ( j > 0 && P [ i ] != P [ j ] ) j = F [ j - 1 ] ;  $ ~~if ( P [ i ] == P [ j ] ) ++ j ;  $ ~~F [ i ] = j ;  $ ~}  $ }  $ int kmp ( string & T , string & P , vector < int > & F , int start , int end ) {  $ ~if ( start == T . size ( ) ) return - 1 ;  $ ~if ( end - start + 1 < P . size ( ) ) return - 1 ;  $ ~int i = start ;  $ ~int j = 0 ;  $ ~int idx = - 1 ;  $ ~while ( i <= end ) {  $ ~~while ( j < P . size ( ) && i <= end && T [ i ] == P [ j ] ) {  $ ~~~++ i ;  $ ~~~++ j ;  $ ~~}  $ ~~if ( j == P . size ( ) ) {  $ ~~~idx = i - P . size ( ) ;  $ ~~~return idx ;  $ ~~} else {  $ ~~~if ( j == 0 )  $ ~~~~i = i + 1 ;  $ ~~~else  $ ~~~~j = F [ j - 1 ] ;  $ ~~}  $ ~}  $ ~return idx ;  $ }  $ bool valid ( string & T , string & P1 , string & P2 , vector < int > & F1 , vector < int > & F2 ) {  $ ~int i = kmp ( T , P1 , F1 , 0 , T . size ( ) - 1 ) ;  $ ~if ( i == - 1 ) return false ;  $ ~i += P1 . size ( ) ;  $ ~i = kmp ( T , P2 , F2 , i , T . size ( ) - 1 ) ;  $ ~if ( i == - 1 ) return false ;  $ ~return true ;  $ }  $ int main ( ) {  $ ~string T , P1 , P2 ;  $ ~vector < int > F1 , F2 ;  $ ~cin >> T >> P1 >> P2 ;  $ ~fill_prefix ( P1 , F1 ) ;  $ ~fill_prefix ( P2 , F2 ) ;  $ ~bool x = valid ( T , P1 , P2 , F1 , F2 ) ;  $ ~reverse ( T . begin ( ) , T . end ( ) ) ;  $ ~bool y = valid ( T , P1 , P2 , F1 , F2 ) ;  $ ~if ( ! x && ! y )  $ ~~cout << "fantasy\n" ;  $ ~else if ( ! x && y )  $ ~~cout << "backward\n" ;  $ ~else if ( x && ! y )  $ ~~cout << "forward\n" ;  $ ~else  $ ~~cout << "both\n" ;  $ ~return 0 ;  $ }
int ind ;  $ bool forw , backw ;  $ string s , a , b , tmp ;  $ int search ( int start , string x , string y ) {  $ ~for ( int i = start ; i <= x . length ( ) - y . length ( ) ; i ++ ) {  $ ~~for ( int j = 0 ; j < y . length ( ) ; j ++ ) {  $ ~~~if ( x [ i + j ] != y [ j ] ) break ;  $ ~~~if ( j == y . length ( ) - 1 ) return i + j ;  $ ~~}  $ ~}  $ ~return - 1 ;  $ }  $ int main ( ) {  $ ~cin >> s >> a >> b ;  $ ~if ( a . length ( ) + b . length ( ) > s . length ( ) ) {  $ ~~cout << "fantasy" << endl ;  $ ~~return 0 ;  $ ~}  $ ~ind = search ( 0 , s , a ) ;  $ ~if ( ind >= 0 ) {  $ ~~ind = search ( ind + 1 , s , b ) ;  $ ~~forw = ( ind >= 0 ) ;  $ ~}  $ ~tmp = s ;  $ ~s = "" ;  $ ~for ( int i = tmp . length ( ) - 1 ; i >= 0 ; i -- ) { s += tmp [ i ] ; }  $ ~ind = search ( 0 , s , a ) ;  $ ~if ( ind >= 0 ) {  $ ~~ind = search ( ind + 1 , s , b ) ;  $ ~~backw = ( ind != - 1 ) ;  $ ~}  $ ~if ( forw && ! backw )  $ ~~cout << "forward" << endl ;  $ ~else if ( ! forw && backw )  $ ~~cout << "backward" << endl ;  $ ~else if ( forw && backw )  $ ~~cout << "both" << endl ;  $ ~else  $ ~~cout << "fantasy" << endl ;  $ }
int ind ;  $ bool forw , backw ;  $ string s , a , b , tmp ;  $ int search ( int start , string x , string y ) {  $ ~for ( int i = start ; i <= x . length ( ) - y . length ( ) ; i ++ ) {  $ ~~for ( int j = 0 ; j < y . length ( ) ; j ++ ) {  $ ~~~if ( x [ i + j ] != y [ j ] ) break ;  $ ~~~if ( j == y . length ( ) - 1 ) return i + j ;  $ ~~}  $ ~}  $ ~return - 1 ;  $ }  $ int main ( ) {  $ ~cin >> s >> a >> b ;  $ ~if ( a . length ( ) + b . length ( ) > s . length ( ) ) {  $ ~~cout << "fantasy" << endl ;  $ ~~return 0 ;  $ ~}  $ ~ind = search ( 0 , s , a ) ;  $ ~if ( ind >= 0 ) {  $ ~~ind = search ( ind + 1 , s , b ) ;  $ ~~forw = ( ind >= 0 ) ;  $ ~}  $ ~tmp = s ;  $ ~s = "" ;  $ ~for ( int i = tmp . length ( ) - 1 ; i >= 0 ; i -- ) { s += tmp [ i ] ; }  $ ~ind = search ( 0 , s , a ) ;  $ ~if ( ind >= 0 ) {  $ ~~ind = search ( ind + 1 , s , b ) ;  $ ~~backw = ( ind != - 1 ) ;  $ ~}  $ ~if ( forw && ! backw )  $ ~~cout << "forward" << endl ;  $ ~else if ( ! forw && backw )  $ ~~cout << "backward" << endl ;  $ ~else if ( forw && backw )  $ ~~cout << "both" << endl ;  $ ~else  $ ~~cout << "fantasy" << endl ;  $ }
int main ( ) {  $ ~string colors , round1 , round2 ;  $ ~cin >> colors >> round1 >> round2 ;  $ ~string colors_rev ( colors . rbegin ( ) , colors . rend ( ) ) ;  $ ~bool forwards = [ & colors , & round1 , & round2 ] ( ) {  $ ~~size_t match1 = colors . find ( round1 ) ;  $ ~~if ( match1 == string : : npos ) return false ;  $ ~~size_t match2 = colors . find ( round2 , match1 + round1 . length ( ) ) ;  $ ~~if ( match2 == string : : npos ) return false ;  $ ~~return true ;  $ ~} ( ) ;  $ ~bool backwards = [ & colors_rev , & round1 , & round2 ] ( ) {  $ ~~size_t match1 = colors_rev . find ( round1 ) ;  $ ~~if ( match1 == string : : npos ) return false ;  $ ~~size_t match2 = colors_rev . find ( round2 , match1 + round1 . length ( ) ) ;  $ ~~if ( match2 == string : : npos ) return false ;  $ ~~return true ;  $ ~} ( ) ;  $ ~if ( forwards && backwards ) {  $ ~~cout << "both" ;  $ ~} else if ( forwards ) {  $ ~~cout << "forward" ;  $ ~} else if ( backwards ) {  $ ~~cout << "backward" ;  $ ~} else {  $ ~~cout << "fantasy" ;  $ ~}  $ ~cout << '\n' ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~string s , a , b ;  $ ~while ( cin >> s >> a >> b ) {  $ ~~bool isok [ 2 ] = { 0 , 0 } ;  $ ~~for ( int i = 0 ; i < 2 ; i ++ ) {  $ ~~~int idx = s . find ( a ) ;  $ ~~~if ( idx != string : : npos ) {  $ ~~~~idx = s . find ( b , idx + a . size ( ) ) ;  $ ~~~~if ( idx != string : : npos ) isok [ i ] = 1 ;  $ ~~~}  $ ~~~reverse ( s . begin ( ) , s . end ( ) ) ;  $ ~~}  $ ~~if ( isok [ 0 ] && isok [ 1 ] )  $ ~~~cout << "both" << endl ;  $ ~~else if ( isok [ 0 ] )  $ ~~~cout << "forward" << endl ;  $ ~~else if ( isok [ 1 ] )  $ ~~~cout << "backward" << endl ;  $ ~~else  $ ~~~cout << "fantasy" << endl ;  $ ~}  $ ~return 0 ;  $ }
int main ( ) {  $ ~string s , a , b ;  $ ~while ( cin >> s >> a >> b ) {  $ ~~bool isok [ 2 ] = { 0 , 0 } ;  $ ~~for ( int i = 0 ; i < 2 ; i ++ ) {  $ ~~~int idx = s . find ( a ) ;  $ ~~~if ( idx != string : : npos ) {  $ ~~~~idx = s . find ( b , idx + a . size ( ) ) ;  $ ~~~~if ( idx != string : : npos ) isok [ i ] = 1 ;  $ ~~~}  $ ~~~reverse ( s . begin ( ) , s . end ( ) ) ;  $ ~~}  $ ~~if ( isok [ 0 ] && isok [ 1 ] )  $ ~~~cout << "both" << endl ;  $ ~~else if ( isok [ 0 ] )  $ ~~~cout << "forward" << endl ;  $ ~~else if ( isok [ 1 ] )  $ ~~~cout << "backward" << endl ;  $ ~~else  $ ~~~cout << "fantasy" << endl ;  $ ~}  $ ~return 0 ;  $ }
int main ( ) {  $ ~int n , arr [ 101 ] , c , a = 0 , counter = 0 ;  $ ~bool flag = true ;  $ ~cin >> n ;  $ ~if ( n == 1 ) {  $ ~~cout << "NO" << endl ;  $ ~~return 0 ;  $ ~}  $ ~for ( int x = 0 ; x < n ; x ++ ) cin >> arr [ x ] ;  $ ~sort ( arr , arr + n ) ;  $ ~c = arr [ 0 ] ;  $ ~for ( int x = n ; x > 0 ; x -- ) {  $ ~~if ( arr [ x ] == arr [ x - 1 ] ) {  $ ~~~flag = false ;  $ ~~~counter ++ ;  $ ~~}  $ ~}  $ ~if ( flag == false && counter == n - 1 ) {  $ ~~cout << "NO" << endl ;  $ ~~return 0 ;  $ ~}  $ ~while ( true ) {  $ ~~if ( arr [ a ] != arr [ a + 1 ] ) {  $ ~~~c = arr [ a + 1 ] ;  $ ~~~break ;  $ ~~}  $ ~~a ++ ;  $ ~}  $ ~cout << c << endl ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~int n , arr [ 101 ] , c , a = 0 , counter = 0 ;  $ ~bool flag = true ;  $ ~cin >> n ;  $ ~if ( n == 1 ) {  $ ~~cout << "NO" << endl ;  $ ~~return 0 ;  $ ~}  $ ~for ( int x = 0 ; x < n ; x ++ ) cin >> arr [ x ] ;  $ ~sort ( arr , arr + n ) ;  $ ~c = arr [ 0 ] ;  $ ~for ( int x = n ; x > 0 ; x -- ) {  $ ~~if ( arr [ x ] == arr [ x - 1 ] ) {  $ ~~~flag = false ;  $ ~~~counter ++ ;  $ ~~}  $ ~}  $ ~if ( flag == false && counter == n - 1 ) {  $ ~~cout << "NO" << endl ;  $ ~~return 0 ;  $ ~}  $ ~while ( true ) {  $ ~~if ( arr [ a ] != arr [ a + 1 ] ) {  $ ~~~c = arr [ a + 1 ] ;  $ ~~~break ;  $ ~~}  $ ~~a ++ ;  $ ~}  $ ~cout << c << endl ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~int t ;  $ ~cin >> t ;  $ ~set < int > st ;  $ ~int n ;  $ ~for ( int i = 0 ; i < t ; i ++ ) {  $ ~~cin >> n ;  $ ~~st . insert ( n ) ;  $ ~}  $ ~set < int > : : iterator it ;  $ ~int l = st . size ( ) ;  $ ~if ( l == 1 )  $ ~~cout << "NO" << endl ;  $ ~else {  $ ~~it = st . begin ( ) ;  $ ~~it ++ ;  $ ~~cout << * it << endl ;  $ ~}  $ ~return 0 ;  $ }
int main ( ) {  $ ~int t ;  $ ~cin >> t ;  $ ~set < int > st ;  $ ~int n ;  $ ~for ( int i = 0 ; i < t ; i ++ ) {  $ ~~cin >> n ;  $ ~~st . insert ( n ) ;  $ ~}  $ ~set < int > : : iterator it ;  $ ~int l = st . size ( ) ;  $ ~if ( l == 1 )  $ ~~cout << "NO" << endl ;  $ ~else {  $ ~~it = st . begin ( ) ;  $ ~~it ++ ;  $ ~~cout << * it << endl ;  $ ~}  $ ~return 0 ;  $ }
int main ( ) {  $ ~int n ;  $ ~cin >> n ;  $ ~set < int > s ;  $ ~for ( int i = 0 ; i < n ; ++ i ) {  $ ~~int b ;  $ ~~cin >> b ;  $ ~~s . insert ( b ) ;  $ ~}  $ ~if ( s . size ( ) == 1 ) {  $ ~~cout << "NO" << endl ;  $ ~~return 0 ;  $ ~}  $ ~set < int > : : iterator rit = s . begin ( ) ;  $ ~s . erase ( * rit ) ;  $ ~cout << * ( s . begin ( ) ) << endl ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~int n ;  $ ~cin >> n ;  $ ~set < int > s ;  $ ~for ( int i = 0 ; i < n ; ++ i ) {  $ ~~int b ;  $ ~~cin >> b ;  $ ~~s . insert ( b ) ;  $ ~}  $ ~if ( s . size ( ) == 1 ) {  $ ~~cout << "NO" << endl ;  $ ~~return 0 ;  $ ~}  $ ~set < int > : : iterator rit = s . begin ( ) ;  $ ~s . erase ( * rit ) ;  $ ~cout << * ( s . begin ( ) ) << endl ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~int n , i , k ;  $ ~int a [ 105 ] ;  $ ~cin >> n ;  $ ~for ( i = 0 ; i < n ; i ++ ) cin >> a [ i ] ;  $ ~sort ( a , a + n ) ;  $ ~k = 1 ;  $ ~for ( i = 1 ; i < n ; i ++ ) {  $ ~~if ( a [ i ] != a [ i - 1 ] ) k ++ ;  $ ~~if ( k == 2 ) {  $ ~~~cout << a [ i ] << endl ;  $ ~~~return 0 ;  $ ~~}  $ ~}  $ ~cout << "NO" << endl ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~int n , i , k ;  $ ~int a [ 105 ] ;  $ ~cin >> n ;  $ ~for ( i = 0 ; i < n ; i ++ ) cin >> a [ i ] ;  $ ~sort ( a , a + n ) ;  $ ~k = 1 ;  $ ~for ( i = 1 ; i < n ; i ++ ) {  $ ~~if ( a [ i ] != a [ i - 1 ] ) k ++ ;  $ ~~if ( k == 2 ) {  $ ~~~cout << a [ i ] << endl ;  $ ~~~return 0 ;  $ ~~}  $ ~}  $ ~cout << "NO" << endl ;  $ ~return 0 ;  $ }
int n , a , cnr = 0 , p [ 201 ] ;  $ int main ( ) {  $ ~cin >> n ;  $ ~while ( n -- ) {  $ ~~cin >> a ;  $ ~~p [ a + 100 ] ++ ;  $ ~}  $ ~for ( int i = 0 ; i <= 200 ; i ++ ) {  $ ~~if ( p [ i ] ) cnr ++ ;  $ ~~if ( cnr == 2 ) {  $ ~~~cout << i - 100 << endl ;  $ ~~~return 0 ;  $ ~~}  $ ~}  $ ~cout << "NO" << endl ;  $ ~;  $ ~return 0 ;  $ }
int n , a , cnr = 0 , p [ 201 ] ;  $ int main ( ) {  $ ~cin >> n ;  $ ~while ( n -- ) {  $ ~~cin >> a ;  $ ~~p [ a + 100 ] ++ ;  $ ~}  $ ~for ( int i = 0 ; i <= 200 ; i ++ ) {  $ ~~if ( p [ i ] ) cnr ++ ;  $ ~~if ( cnr == 2 ) {  $ ~~~cout << i - 100 << endl ;  $ ~~~return 0 ;  $ ~~}  $ ~}  $ ~cout << "NO" << endl ;  $ ~;  $ ~return 0 ;  $ }
int main ( ) {  $ ~int x ;  $ ~cin >> x ;  $ ~int num ;  $ ~int arr [ 201 ] ;  $ ~for ( int i = 0 ; i < 201 ; i ++ ) arr [ i ] = 900 ;  $ ~int count = 0 ;  $ ~for ( int i = 0 ; i < x ; i ++ ) {  $ ~~cin >> num ;  $ ~~if ( arr [ num + 100 ] == 900 ) count ++ ;  $ ~~arr [ num + 100 ] = num ;  $ ~}  $ ~if ( count <= 1 )  $ ~~cout << "NO" << endl ;  $ ~else {  $ ~~int cursor = 1 ;  $ ~~for ( int i = 0 ; i < 201 ; i ++ ) {  $ ~~~if ( cursor == 2 && arr [ i ] != 900 ) {  $ ~~~~cout << arr [ i ] << endl ;  $ ~~~~return 0 ;  $ ~~~} else if ( arr [ i ] != 900 ) {  $ ~~~~cursor ++ ;  $ ~~~}  $ ~~}  $ ~}  $ ~return 0 ;  $ }
int main ( ) {  $ ~int x ;  $ ~cin >> x ;  $ ~int num ;  $ ~int arr [ 201 ] ;  $ ~for ( int i = 0 ; i < 201 ; i ++ ) arr [ i ] = 900 ;  $ ~int count = 0 ;  $ ~for ( int i = 0 ; i < x ; i ++ ) {  $ ~~cin >> num ;  $ ~~if ( arr [ num + 100 ] == 900 ) count ++ ;  $ ~~arr [ num + 100 ] = num ;  $ ~}  $ ~if ( count <= 1 )  $ ~~cout << "NO" << endl ;  $ ~else {  $ ~~int cursor = 1 ;  $ ~~for ( int i = 0 ; i < 201 ; i ++ ) {  $ ~~~if ( cursor == 2 && arr [ i ] != 900 ) {  $ ~~~~cout << arr [ i ] << endl ;  $ ~~~~return 0 ;  $ ~~~} else if ( arr [ i ] != 900 ) {  $ ~~~~cursor ++ ;  $ ~~~}  $ ~~}  $ ~}  $ ~return 0 ;  $ }
int main ( ) {  $ ~set < int > s ;  $ ~set < int > : : iterator itr ;  $ ~int n ;  $ ~cin >> n ;  $ ~for ( int i = 0 ; i < n ; i ++ ) {  $ ~~int x ;  $ ~~cin >> x ;  $ ~~s . insert ( x ) ;  $ ~}  $ ~if ( s . size ( ) == 1 ) {  $ ~~cout << "NO" << endl ;  $ ~~return 0 ;  $ ~}  $ ~itr = s . begin ( ) ;  $ ~itr ++ ;  $ ~cout << * itr << endl ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~int n , i , j ;  $ ~while ( cin >> n ) {  $ ~~int a [ 500 ] = { 0 } , flog ( 0 ) , e , k ( 0 ) , f , b [ 500 ] = { 0 } ;  $ ~~for ( i = 0 ; i < n ; i ++ ) { cin >> a [ i ] ; }  $ ~~for ( i = 0 ; i < n ; i ++ ) {  $ ~~~if ( a [ i ] == a [ 0 ] ) {  $ ~~~~flog = flog ;  $ ~~~} else {  $ ~~~~flog = flog + 1 ;  $ ~~~}  $ ~~}  $ ~~if ( flog == 0 ) {  $ ~~~cout << "NO" << endl ;  $ ~~} else {  $ ~~~for ( i = 0 ; i < n ; i ++ ) {  $ ~~~~for ( j = 1 ; j < n - i ; j ++ ) {  $ ~~~~~if ( a [ j ] < a [ j - 1 ] ) {  $ ~~~~~~e = a [ j - 1 ] ;  $ ~~~~~~a [ j - 1 ] = a [ j ] ;  $ ~~~~~~a [ j ] = e ;  $ ~~~~~}  $ ~~~~}  $ ~~~}  $ ~~~for ( i = 0 ; i < n - 1 ; i ++ ) {  $ ~~~~for ( f = i + 1 ; f < n ; f ++ ) {  $ ~~~~~if ( a [ f ] == a [ i ] ) {  $ ~~~~~~for ( k = i ; k < n ; k ++ ) { a [ k ] = a [ k + 1 ] ; }  $ ~~~~~~n -- ;  $ ~~~~~~f -- ;  $ ~~~~~}  $ ~~~~}  $ ~~~}  $ ~~~if ( n == 2 ) {  $ ~~~~cout << a [ 1 ] << endl ;  $ ~~~} else {  $ ~~~~cout << a [ 1 ] << endl ;  $ ~~~}  $ ~~}  $ ~}  $ }
int n ;  $ int a [ 110 ] ;  $ int main ( ) {  $ ~cin >> n ;  $ ~for ( int i = 1 ; i <= n ; i ++ ) cin >> a [ i ] ;  $ ~for ( int i = 1 ; i < n ; i ++ )  $ ~~for ( int j = i + 1 ; j <= n ; j ++ ) {  $ ~~~if ( a [ i ] > a [ j ] ) swap ( a [ i ] , a [ j ] ) ;  $ ~~}  $ ~for ( int i = 2 ; i <= n ; i ++ ) {  $ ~~if ( a [ i ] != a [ i - 1 ] ) {  $ ~~~cout << a [ i ] << endl ;  $ ~~~return 0 ;  $ ~~}  $ ~}  $ ~cout << "NO" << endl ;  $ ~return 0 ;  $ }
int n ;  $ int a [ 110 ] ;  $ int main ( ) {  $ ~cin >> n ;  $ ~for ( int i = 1 ; i <= n ; i ++ ) cin >> a [ i ] ;  $ ~for ( int i = 1 ; i < n ; i ++ )  $ ~~for ( int j = i + 1 ; j <= n ; j ++ ) {  $ ~~~if ( a [ i ] > a [ j ] ) swap ( a [ i ] , a [ j ] ) ;  $ ~~}  $ ~for ( int i = 2 ; i <= n ; i ++ ) {  $ ~~if ( a [ i ] != a [ i - 1 ] ) {  $ ~~~cout << a [ i ] << endl ;  $ ~~~return 0 ;  $ ~~}  $ ~}  $ ~cout << "NO" << endl ;  $ ~return 0 ;  $ }
int a , cnr ;  $ bool p [ 201 ] ;  $ int main ( ) {  $ ~int n ;  $ ~cin >> n ;  $ ~while ( n -- ) {  $ ~~cin >> a ;  $ ~~p [ a + 100 ] ++ ;  $ ~}  $ ~for ( int i = 0 ; i <= 200 ; i ++ ) {  $ ~~if ( p [ i ] ) cnr ++ ;  $ ~~if ( cnr == 2 ) {  $ ~~~cout << i - 100 << endl ;  $ ~~~return 0 ;  $ ~~}  $ ~}  $ ~cout << "NO" << endl ;  $ ~;  $ ~return 0 ;  $ }
int a , cnr ;  $ bool p [ 201 ] ;  $ int main ( ) {  $ ~int n ;  $ ~cin >> n ;  $ ~while ( n -- ) {  $ ~~cin >> a ;  $ ~~p [ a + 100 ] ++ ;  $ ~}  $ ~for ( int i = 0 ; i <= 200 ; i ++ ) {  $ ~~if ( p [ i ] ) cnr ++ ;  $ ~~if ( cnr == 2 ) {  $ ~~~cout << i - 100 << endl ;  $ ~~~return 0 ;  $ ~~}  $ ~}  $ ~cout << "NO" << endl ;  $ ~;  $ ~return 0 ;  $ }
bool a [ 205 ] ;  $ void solve ( ) {  $ ~int n ;  $ ~cin >> n ;  $ ~vector < int > v ;  $ ~for ( int i = 0 ; i < n ; i ++ ) {  $ ~~int x ;  $ ~~cin >> x ;  $ ~~x += 100 ;  $ ~~if ( a [ x ] == false ) {  $ ~~~v . push_back ( x ) ;  $ ~~~a [ x ] = true ;  $ ~~}  $ ~}  $ ~sort ( v . begin ( ) , v . end ( ) ) ;  $ ~if ( v . size ( ) == 1 ) {  $ ~~cout << "NO" << endl ;  $ ~~return ;  $ ~} else  $ ~~cout << v [ 1 ] - 100 << endl ;  $ }  $ int main ( ) {  $ ~solve ( ) ;  $ ~return 0 ;  $ }
bool a [ 205 ] ;  $ void solve ( ) {  $ ~int n ;  $ ~cin >> n ;  $ ~vector < int > v ;  $ ~for ( int i = 0 ; i < n ; i ++ ) {  $ ~~int x ;  $ ~~cin >> x ;  $ ~~x += 100 ;  $ ~~if ( a [ x ] == false ) {  $ ~~~v . push_back ( x ) ;  $ ~~~a [ x ] = true ;  $ ~~}  $ ~}  $ ~sort ( v . begin ( ) , v . end ( ) ) ;  $ ~if ( v . size ( ) == 1 ) {  $ ~~cout << "NO" << endl ;  $ ~~return ;  $ ~} else  $ ~~cout << v [ 1 ] - 100 << endl ;  $ }  $ int main ( ) {  $ ~solve ( ) ;  $ ~return 0 ;  $ }
int n , x ;  $ set < int > s ;  $ int main ( ) {  $ ~cin >> n ;  $ ~for ( int i = 1 ; i <= n ; i ++ ) {  $ ~~cin >> x ;  $ ~~s . insert ( x ) ;  $ ~}  $ ~s . erase ( s . begin ( ) ) ;  $ ~if ( s . empty ( ) )  $ ~~puts ( "NO" ) ;  $ ~else  $ ~~cout << * s . begin ( ) << endl ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~int n , arr [ 100 ] , i ;  $ ~cin >> n ;  $ ~for ( i = 0 ; i < n ; i ++ ) cin >> arr [ i ] ;  $ ~sort ( arr , arr + n ) ;  $ ~if ( arr [ 0 ] == arr [ n - 1 ] || n == 1 ) {  $ ~~cout << "NO\n" ;  $ ~~return 0 ;  $ ~}  $ ~i = 1 ;  $ ~while ( arr [ i ] == arr [ 0 ] ) i ++ ;  $ ~cout << arr [ i ] << "\n" ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~int n , arr [ 100 ] , i ;  $ ~cin >> n ;  $ ~for ( i = 0 ; i < n ; i ++ ) cin >> arr [ i ] ;  $ ~sort ( arr , arr + n ) ;  $ ~if ( arr [ 0 ] == arr [ n - 1 ] || n == 1 ) {  $ ~~cout << "NO\n" ;  $ ~~return 0 ;  $ ~}  $ ~i = 1 ;  $ ~while ( arr [ i ] == arr [ 0 ] ) i ++ ;  $ ~cout << arr [ i ] << "\n" ;  $ ~return 0 ;  $ }
int n ;  $ int ns [ 100 ] ;  $ int main ( ) {  $ ~cin >> n ;  $ ~for ( int i = 0 ; i < n ; i ++ ) { cin >> ns [ i ] ; }  $ ~sort ( ns , ns + n ) ;  $ ~int i = 0 , ans = ns [ 0 ] ;  $ ~while ( i < n ) {  $ ~~if ( ns [ i ] != ns [ 0 ] ) {  $ ~~~ans = ns [ i ] ;  $ ~~~break ;  $ ~~} else {  $ ~~~i ++ ;  $ ~~}  $ ~}  $ ~if ( ans != ns [ 0 ] )  $ ~~cout << ans << endl ;  $ ~else  $ ~~cout << "NO" << endl ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~set < int > s ;  $ ~int n ;  $ ~cin >> n ;  $ ~for ( int i = 0 ; i < n ; i ++ ) {  $ ~~int k ;  $ ~~cin >> k ;  $ ~~s . insert ( k ) ;  $ ~}  $ ~s . erase ( s . begin ( ) ) ;  $ ~if ( s . empty ( ) ) {  $ ~~cout << "NO" << endl ;  $ ~} else {  $ ~~cout << * s . begin ( ) << endl ;  $ ~}  $ ~return 0 ;  $ }
int main ( ) {  $ ~int n ;  $ ~cin >> n ;  $ ~int x ;  $ ~vector < int > v ;  $ ~map < int , bool > m ;  $ ~for ( int i = 1 ; i <= n ; i ++ ) {  $ ~~cin >> x ;  $ ~~if ( ! m [ x ] ) {  $ ~~~v . push_back ( x ) ;  $ ~~~m [ x ] = 1 ;  $ ~~}  $ ~}  $ ~sort ( v . begin ( ) , v . end ( ) ) ;  $ ~if ( v . size ( ) > 1 ) {  $ ~~cout << v [ 1 ] << endl ;  $ ~} else {  $ ~~cout << "NO" << endl ;  $ ~}  $ ~return 0 ;  $ }
int main ( ) {  $ ~int n , x ;  $ ~cin >> n ;  $ ~int arr [ n ] ;  $ ~for ( int i = 0 ; i < n ; i ++ ) { cin >> arr [ i ] ; }  $ ~set < int > s ( arr , arr + n ) ;  $ ~set < int > : : iterator it ;  $ ~it = s . begin ( ) ;  $ ~if ( ++ it == s . end ( ) )  $ ~~cout << "NO" << endl ;  $ ~else  $ ~~cout << * it << endl ;  $ }
int main ( ) {  $ ~int n , x ;  $ ~cin >> n ;  $ ~int arr [ n ] ;  $ ~for ( int i = 0 ; i < n ; i ++ ) { cin >> arr [ i ] ; }  $ ~set < int > s ( arr , arr + n ) ;  $ ~set < int > : : iterator it ;  $ ~it = s . begin ( ) ;  $ ~if ( ++ it == s . end ( ) )  $ ~~cout << "NO" << endl ;  $ ~else  $ ~~cout << * it << endl ;  $ }
int main ( ) {  $ ~double x , y ;  $ ~cin >> x >> y ;  $ ~double raw = sqrt ( x * x + y * y ) ;  $ ~int p_sign = ( x * y > 0 ? 1 : 0 ) ;  $ ~int d_raw = ( int ) sqrt ( x * x + y * y ) ;  $ ~int color = ( d_raw % 2 ) + p_sign ;  $ ~if ( raw - ( int ) raw == 0 )  $ ~~cout << "black" << endl ;  $ ~else  $ ~~cout << ( ( color % 2 == 0 ) ? "white" : "black" ) << endl ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~double x , y ;  $ ~cin >> x >> y ;  $ ~double raw = sqrt ( x * x + y * y ) ;  $ ~int p_sign = ( x * y > 0 ? 1 : 0 ) ;  $ ~int d_raw = ( int ) sqrt ( x * x + y * y ) ;  $ ~int color = ( d_raw % 2 ) + p_sign ;  $ ~if ( raw - ( int ) raw == 0 )  $ ~~cout << "black" << endl ;  $ ~else  $ ~~cout << ( ( color % 2 == 0 ) ? "white" : "black" ) << endl ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~int64_t x , y ;  $ ~cin >> x >> y ;  $ ~int64_t rs = x * x + y * y ;  $ ~int64_t r = int64_t ( sqrt ( double ( rs ) ) ) ;  $ ~if ( r * r == rs || x == 0 || y == 0 ) {  $ ~~cout << "black\n" ;  $ ~} else {  $ ~~int parity = r % 2 ;  $ ~~if ( x * y >= 0 ) {  $ ~~~if ( parity ) {  $ ~~~~cout << "white\n" ;  $ ~~~} else {  $ ~~~~cout << "black\n" ;  $ ~~~}  $ ~~} else {  $ ~~~if ( parity ) {  $ ~~~~cout << "black\n" ;  $ ~~~} else {  $ ~~~~cout << "white\n" ;  $ ~~~}  $ ~~}  $ ~}  $ }
int main ( ) {  $ ~int x , y ;  $ ~cin >> x >> y ;  $ ~double r = x * x + y * y ;  $ ~r = sqrt ( r ) ;  $ ~double intpart ;  $ ~if ( modf ( r , & intpart ) == 0.0 ) {  $ ~~cout << "black" << endl ;  $ ~} else {  $ ~~int int_r = static_cast < int > ( floor ( r ) ) ;  $ ~~if ( ( x > 0 && y > 0 ) && ( int_r % 2 == 0 ) ) { cout << "black" << endl ; }  $ ~~if ( ( x < 0 && y < 0 ) && ( int_r % 2 == 0 ) ) {  $ ~~~cout << "black" << endl ;  $ ~~} else if ( ( x < 0 && y > 0 ) && ( int_r % 2 == 0 ) ) {  $ ~~~cout << "white" << endl ;  $ ~~} else if ( ( x > 0 && y < 0 ) && ( int_r % 2 == 0 ) ) {  $ ~~~cout << "white" << endl ;  $ ~~} else if ( ( x > 0 && y > 0 ) && ( int_r % 2 != 0 ) ) {  $ ~~~cout << "white" << endl ;  $ ~~} else if ( ( x < 0 && y < 0 ) && ( int_r % 2 != 0 ) ) {  $ ~~~cout << "white" << endl ;  $ ~~} else if ( ( x > 0 && y < 0 ) && ( int_r % 2 != 0 ) ) {  $ ~~~cout << "black" << endl ;  $ ~~} else if ( ( x < 0 && y > 0 ) && ( int_r % 2 != 0 ) ) {  $ ~~~cout << "black" << endl ;  $ ~~}  $ ~}  $ ~return 0 ;  $ }
int main ( ) {  $ ~int x , y ;  $ ~cin >> x >> y ;  $ ~double r = x * x + y * y ;  $ ~r = sqrt ( r ) ;  $ ~double intpart ;  $ ~if ( modf ( r , & intpart ) == 0.0 ) {  $ ~~cout << "black" << endl ;  $ ~} else {  $ ~~int int_r = static_cast < int > ( floor ( r ) ) ;  $ ~~if ( ( x > 0 && y > 0 ) && ( int_r % 2 == 0 ) ) { cout << "black" << endl ; }  $ ~~if ( ( x < 0 && y < 0 ) && ( int_r % 2 == 0 ) ) {  $ ~~~cout << "black" << endl ;  $ ~~} else if ( ( x < 0 && y > 0 ) && ( int_r % 2 == 0 ) ) {  $ ~~~cout << "white" << endl ;  $ ~~} else if ( ( x > 0 && y < 0 ) && ( int_r % 2 == 0 ) ) {  $ ~~~cout << "white" << endl ;  $ ~~} else if ( ( x > 0 && y > 0 ) && ( int_r % 2 != 0 ) ) {  $ ~~~cout << "white" << endl ;  $ ~~} else if ( ( x < 0 && y < 0 ) && ( int_r % 2 != 0 ) ) {  $ ~~~cout << "white" << endl ;  $ ~~} else if ( ( x > 0 && y < 0 ) && ( int_r % 2 != 0 ) ) {  $ ~~~cout << "black" << endl ;  $ ~~} else if ( ( x < 0 && y > 0 ) && ( int_r % 2 != 0 ) ) {  $ ~~~cout << "black" << endl ;  $ ~~}  $ ~}  $ ~return 0 ;  $ }
const int M = 1000 + 5 ;  $ int main ( ) {  $ ~int x , y ;  $ ~cin >> x >> y ;  $ ~int r = 0 ;  $ ~while ( x * x + y * y > r * r ) { r ++ ; }  $ ~if ( x == 0 || y == 0 ) {  $ ~~cout << "black" << endl ;  $ ~} else {  $ ~~if ( x * x + y * y == r * r ) {  $ ~~~cout << "black" << endl ;  $ ~~} else {  $ ~~~if ( r % 2 == 0 ) {  $ ~~~~if ( x * y > 0 ) {  $ ~~~~~cout << "white" << endl ;  $ ~~~~} else {  $ ~~~~~cout << "black" << endl ;  $ ~~~~}  $ ~~~} else {  $ ~~~~if ( x * y > 0 ) {  $ ~~~~~cout << "black" << endl ;  $ ~~~~} else {  $ ~~~~~cout << "white" << endl ;  $ ~~~~}  $ ~~~}  $ ~~}  $ ~}  $ ~return 0 ;  $ }
const int M = 1000 + 5 ;  $ int main ( ) {  $ ~int x , y ;  $ ~cin >> x >> y ;  $ ~int r = 0 ;  $ ~while ( x * x + y * y > r * r ) { r ++ ; }  $ ~if ( x == 0 || y == 0 ) {  $ ~~cout << "black" << endl ;  $ ~} else {  $ ~~if ( x * x + y * y == r * r ) {  $ ~~~cout << "black" << endl ;  $ ~~} else {  $ ~~~if ( r % 2 == 0 ) {  $ ~~~~if ( x * y > 0 ) {  $ ~~~~~cout << "white" << endl ;  $ ~~~~} else {  $ ~~~~~cout << "black" << endl ;  $ ~~~~}  $ ~~~} else {  $ ~~~~if ( x * y > 0 ) {  $ ~~~~~cout << "black" << endl ;  $ ~~~~} else {  $ ~~~~~cout << "white" << endl ;  $ ~~~~}  $ ~~~}  $ ~~}  $ ~}  $ ~return 0 ;  $ }
int main ( ) {  $ ~int x , y ;  $ ~cin >> x >> y ;  $ ~int d = x * x + y * y ;  $ ~int sq = sqrt ( d ) ;  $ ~if ( sq * sq == d )  $ ~~cout << "black" << endl ;  $ ~else if ( ( x > 0 && y > 0 ) || ( x < 0 && y < 0 ) ) {  $ ~~if ( sq & 1 )  $ ~~~cout << "white" << endl ;  $ ~~else  $ ~~~cout << "black" << endl ;  $ ~} else {  $ ~~if ( sq & 1 )  $ ~~~cout << "black" << endl ;  $ ~~else  $ ~~~cout << "white" << endl ;  $ ~}  $ ~return 0 ;  $ }
bool f ( ) {  $ ~int x , y ;  $ ~cin >> x >> y ;  $ ~if ( x == 0 || y == 0 ) { return true ; }  $ ~int s = sqrt ( x * x + y * y ) ;  $ ~if ( s * s == x * x + y * y ) { return true ; }  $ ~if ( ( x * y > 0 ) == ( s % 2 == 0 ) ) { return true ; }  $ ~return false ;  $ }  $ int main ( ) {  $ ~if ( f ( ) ) {  $ ~~cout << "black" << endl ;  $ ~} else {  $ ~~cout << "white" << endl ;  $ ~}  $ ~return 0 ;  $ }
bool f ( ) {  $ ~int x , y ;  $ ~cin >> x >> y ;  $ ~if ( x == 0 || y == 0 ) { return true ; }  $ ~int s = sqrt ( x * x + y * y ) ;  $ ~if ( s * s == x * x + y * y ) { return true ; }  $ ~if ( ( x * y > 0 ) == ( s % 2 == 0 ) ) { return true ; }  $ ~return false ;  $ }  $ int main ( ) {  $ ~if ( f ( ) ) {  $ ~~cout << "black" << endl ;  $ ~} else {  $ ~~cout << "white" << endl ;  $ ~}  $ ~return 0 ;  $ }
int main ( ) {  $ ~int x , y ;  $ ~double n ;  $ ~cin >> x >> y ;  $ ~n = sqrt ( x * x + y * y ) ;  $ ~if ( ceil ( n ) > n ) {  $ ~~if ( x * y > 0 == ( ( ( int ) ( ceil ( n ) ) ) & 1 ) ) {  $ ~~~cout << "black" << endl ;  $ ~~} else {  $ ~~~cout << "white" << endl ;  $ ~~}  $ ~} else {  $ ~~cout << "black" << endl ;  $ ~}  $ ~return 0 ;  $ }
int main ( ) {  $ ~int x , y ;  $ ~cin >> x >> y ;  $ ~int r = sqrt ( x * x + y * y ) ;  $ ~if ( r * r == x * x + y * y ) {  $ ~~cout << "black\n" ;  $ ~~return 0 ;  $ ~}  $ ~if ( ( x > 0 && y > 0 ) || ( x < 0 && y < 0 ) ) {  $ ~~if ( r % 2 )  $ ~~~cout << "white\n" ;  $ ~~else  $ ~~~cout << "black\n" ;  $ ~} else {  $ ~~if ( r % 2 )  $ ~~~cout << "black\n" ;  $ ~~else  $ ~~~cout << "white\n" ;  $ ~}  $ ~return 0 ;  $ }
int main ( ) {  $ ~int a , b ;  $ ~cin >> a >> b ;  $ ~int cnt = ( ( a > 0 ) + ( b > 0 ) ) % 2 ;  $ ~int d = a * a + b * b ;  $ ~for ( int i = 1 ; ; ++ i ) {  $ ~~if ( i * i == d ) {  $ ~~~cout << "black\n" ;  $ ~~~return 0 ;  $ ~~}  $ ~~if ( i * i > d ) {  $ ~~~int ans = ( cnt + i ) % 2 ;  $ ~~~cout << ( ans ? "black\n" : "white\n" ) ;  $ ~~~return 0 ;  $ ~~}  $ ~}  $ ~return 0 ;  $ }
int main ( ) {  $ ~int x , y ;  $ ~cin >> x >> y ;  $ ~double r = sqrt ( 1.0 * x * x + y * y ) ;  $ ~int a = ( int ) r ;  $ ~int b ;  $ ~if ( r - a > 0 )  $ ~~b = a + 1 ;  $ ~else  $ ~~b = a ;  $ ~if ( x * y > 0 ) {  $ ~~if ( b == a || a % 2 == 0 )  $ ~~~cout << "black" << endl ;  $ ~~else  $ ~~~cout << "white" << endl ;  $ ~} else {  $ ~~if ( b == a || a % 2 != 0 )  $ ~~~cout << "black" << endl ;  $ ~~else  $ ~~~cout << "white" << endl ;  $ ~}  $ ~return 0 ;  $ }
int main ( ) {  $ ~double x , y ;  $ ~cin >> x >> y ;  $ ~double r = sqrt ( x * x + y * y ) ;  $ ~double s = floor ( r ) ;  $ ~if ( abs ( s - r ) < 1e-6 ) {  $ ~~cout << "black" << endl ;  $ ~~return 0 ;  $ ~}  $ ~if ( x == 0 || y == 0 ) {  $ ~~cout << "black" << endl ;  $ ~~return 0 ;  $ ~}  $ ~if ( ( x > 0 && y > 0 ) || ( x < 0 && y < 0 ) ) {  $ ~~int a = ( ( int ) r ) % 2 ;  $ ~~if ( a )  $ ~~~cout << "white" << endl ;  $ ~~else  $ ~~~cout << "black" << endl ;  $ ~} else {  $ ~~int a = ( ( int ) r ) % 2 ;  $ ~~if ( a == 0 )  $ ~~~cout << "white" << endl ;  $ ~~else  $ ~~~cout << "black" << endl ;  $ ~}  $ ~return 0 ;  $ }
int main ( ) {  $ ~double x , y ;  $ ~double d ;  $ ~cin >> x >> y ;  $ ~d = sqrt ( x * x + y * y ) ;  $ ~int es = d / 1 ;  $ ~if ( ( es == d ) || ( x * y == 0 ) )  $ ~~cout << "black" << endl ;  $ ~else if ( x * y < 0 ) {  $ ~~if ( es % 2 == 0 )  $ ~~~cout << "white" << endl ;  $ ~~else  $ ~~~cout << "black" << endl ;  $ ~} else if ( x * y > 0 ) {  $ ~~if ( es % 2 != 0 )  $ ~~~cout << "white" << endl ;  $ ~~else  $ ~~~cout << "black" << endl ;  $ ~}  $ ~return 0 ;  $ }
long double x , y , dist ;  $ bool Greater ( int x ) {  $ ~return ( ( long double ) x >= dist ) ;  $ }  $ bool eq ( long double x , long double y ) {  $ ~if ( x >= 0 && y >= 0 ) return 1 ;  $ ~if ( x <= 0 && y <= 0 ) return 1 ;  $ ~return 0 ;  $ }  $ int main ( ) {  $ ~cin >> x >> y ;  $ ~dist = sqrt ( x * x + y * y ) ;  $ ~int r = 0 , pas = ( 1 << 30 ) ;  $ ~while ( pas ) {  $ ~~if ( Greater ( r + pas ) == 0 ) r += pas ;  $ ~~pas /= 2 ;  $ ~}  $ ~r ++ ;  $ ~if ( ( long double ) r == dist ) {  $ ~~cout << "black\n" ;  $ ~~return 0 ;  $ ~}  $ ~if ( eq ( x , y ) ) {  $ ~~if ( r % 2 )  $ ~~~cout << "black\n" ;  $ ~~else  $ ~~~cout << "white\n" ;  $ ~} else {  $ ~~if ( r % 2 == 0 )  $ ~~~cout << "black\n" ;  $ ~~else  $ ~~~cout << "white\n" ;  $ ~}  $ ~return 0 ;  $ }
int main ( ) {  $ ~int i , j , x , y ;  $ ~cin >> x >> y ;  $ ~if ( x == 0 || y == 0 ) {  $ ~~cout << "black\n" ;  $ ~~return 0 ;  $ ~}  $ ~if ( x < 0 && y < 0 ) {  $ ~~x *= - 1 ;  $ ~~y *= - 1 ;  $ ~}  $ ~int dist = x * x + y * y ;  $ ~for ( i = 2000 ; i >= 1 ; i -- ) {  $ ~~if ( i * i >= dist && ( i - 1 ) * ( i - 1 ) < dist ) break ;  $ ~}  $ ~if ( i * i == dist ) {  $ ~~cout << "black\n" ;  $ ~~return 0 ;  $ ~}  $ ~if ( x * y > 0 ) {  $ ~~if ( i % 2 == 1 )  $ ~~~cout << "black\n" ;  $ ~~else  $ ~~~cout << "white\n" ;  $ ~} else {  $ ~~if ( i % 2 == 0 )  $ ~~~cout << "black\n" ;  $ ~~else  $ ~~~cout << "white\n" ;  $ ~}  $ ~return 0 ;  $ }
map < string , int > f , g ;  $ string s [ 1005 ] ;  $ int c [ 1005 ] ;  $ int main ( ) {  $ ~int n , m = 0 ;  $ ~cin >> n ;  $ ~for ( int i = 0 ; i < n ; i ++ ) cin >> s [ i ] >> c [ i ] , f [ s [ i ] ] += c [ i ] ;  $ ~for ( int i = 0 ; i < n ; i ++ )  $ ~~if ( m < f [ s [ i ] ] ) m = f [ s [ i ] ] ;  $ ~int i ;  $ ~for ( i = 0 ; f [ s [ i ] ] < m || ( g [ s [ i ] ] += c [ i ] ) < m ; i ++ )  $ ~~;  $ ~return ( cout << s [ i ] << endl ) && 0 ;  $ }
map < string , int > f , g ;  $ string s [ 1005 ] ;  $ int c [ 1005 ] ;  $ int main ( ) {  $ ~int n , m = 0 ;  $ ~cin >> n ;  $ ~for ( int i = 0 ; i < n ; i ++ ) cin >> s [ i ] >> c [ i ] , f [ s [ i ] ] += c [ i ] ;  $ ~for ( int i = 0 ; i < n ; i ++ )  $ ~~if ( m < f [ s [ i ] ] ) m = f [ s [ i ] ] ;  $ ~int i ;  $ ~for ( i = 0 ; f [ s [ i ] ] < m || ( g [ s [ i ] ] += c [ i ] ) < m ; i ++ )  $ ~~;  $ ~return ( cout << s [ i ] << endl ) && 0 ;  $ }
int main ( ) {  $ ~int n ;  $ ~cin >> n ;  $ ~map < string , int > mmp , fq ;  $ ~int max = - 20000000 ;  $ ~string name [ 1005 ] ;  $ ~int sc [ 1005 ] ;  $ ~for ( int i = 0 ; i < n ; i ++ ) {  $ ~~cin >> name [ i ] >> sc [ i ] ;  $ ~~mmp [ name [ i ] ] += sc [ i ] ;  $ ~}  $ ~for ( int i = 0 ; i < n ; i ++ ) {  $ ~~if ( max < mmp [ name [ i ] ] ) { max = mmp [ name [ i ] ] ; }  $ ~}  $ ~for ( int i = 0 ; i < n ; i ++ ) {  $ ~~fq [ name [ i ] ] += sc [ i ] ;  $ ~~if ( fq [ name [ i ] ] >= max && mmp [ name [ i ] ] >= max ) {  $ ~~~cout << name [ i ] << endl ;  $ ~~~return 0 ;  $ ~~}  $ ~}  $ }
map < string , int > name , name2 ;  $ int main ( ) {  $ ~int n ;  $ ~cin >> n ;  $ ~string tempname [ 1010 ] ;  $ ~int score [ 1010 ] ;  $ ~int mx = 0 ;  $ ~for ( int i = 0 ; i < n ; ++ i ) {  $ ~~cin >> tempname [ i ] >> score [ i ] ;  $ ~~name [ tempname [ i ] ] += score [ i ] ;  $ ~}  $ ~for ( int i = 0 ; i < n ; ++ i ) {  $ ~~if ( name [ tempname [ i ] ] > mx ) { mx = name [ tempname [ i ] ] ; }  $ ~}  $ ~for ( int i = 0 ; i < n ; ++ i ) {  $ ~~if ( name [ tempname [ i ] ] == mx ) {  $ ~~~name2 [ tempname [ i ] ] += score [ i ] ;  $ ~~~if ( name2 [ tempname [ i ] ] >= mx ) {  $ ~~~~cout << tempname [ i ] << '\n' ;  $ ~~~~break ;  $ ~~~}  $ ~~}  $ ~}  $ ~return 0 ;  $ }
int II [ 100007 ] ;  $ string SS [ 100007 ] ;  $ map < string , int > SC1 , SC2 ;  $ int main ( ) {  $ ~int n , mx ;  $ ~mx = - 1000000007 ;  $ ~cin >> n ;  $ ~for ( int i = 0 ; i < n ; i ++ ) {  $ ~~cin >> SS [ i ] >> II [ i ] ;  $ ~~SC1 [ SS [ i ] ] += II [ i ] ;  $ ~}  $ ~map < string , int > : : iterator it = SC1 . begin ( ) ;  $ ~for ( it ; it != SC1 . end ( ) ; it ++ ) mx = max ( mx , ( * it ) . second ) ;  $ ~for ( int i = 0 ; i < n ; i ++ ) {  $ ~~SC2 [ SS [ i ] ] += II [ i ] ;  $ ~~if ( SC1 [ SS [ i ] ] >= mx && mx <= SC2 [ SS [ i ] ] ) {  $ ~~~cout << SS [ i ] << endl ;  $ ~~~return 0 ;  $ ~~}  $ ~}  $ ~return 0 ;  $ }
int n , maxn = - 1000 , sc [ 1009 ] ;  $ string stu [ 1009 ] ;  $ map < string , int > m , m1 ;  $ int main ( ) {  $ ~cin >> n ;  $ ~for ( int i = 1 ; i <= n ; i ++ ) {  $ ~~cin >> stu [ i ] >> sc [ i ] ;  $ ~~m [ stu [ i ] ] += sc [ i ] ;  $ ~}  $ ~for ( int i = 1 ; i <= n ; i ++ )  $ ~~if ( m [ stu [ i ] ] > maxn ) { maxn = m [ stu [ i ] ] ; }  $ ~for ( int i = 1 ; i <= n ; i ++ ) {  $ ~~m1 [ stu [ i ] ] += sc [ i ] ;  $ ~~if ( m1 [ stu [ i ] ] >= maxn && m [ stu [ i ] ] == maxn ) {  $ ~~~cout << stu [ i ] << endl ;  $ ~~~break ;  $ ~~}  $ ~}  $ ~return 0 ;  $ }
int n , maxn = - 1000 , sc [ 1009 ] ;  $ string stu [ 1009 ] ;  $ map < string , int > m , m1 ;  $ int main ( ) {  $ ~cin >> n ;  $ ~for ( int i = 1 ; i <= n ; i ++ ) {  $ ~~cin >> stu [ i ] >> sc [ i ] ;  $ ~~m [ stu [ i ] ] += sc [ i ] ;  $ ~}  $ ~for ( int i = 1 ; i <= n ; i ++ )  $ ~~if ( m [ stu [ i ] ] > maxn ) { maxn = m [ stu [ i ] ] ; }  $ ~for ( int i = 1 ; i <= n ; i ++ ) {  $ ~~m1 [ stu [ i ] ] += sc [ i ] ;  $ ~~if ( m1 [ stu [ i ] ] >= maxn && m [ stu [ i ] ] == maxn ) {  $ ~~~cout << stu [ i ] << endl ;  $ ~~~break ;  $ ~~}  $ ~}  $ ~return 0 ;  $ }
int a [ 1005 ] [ 1005 ] ;  $ int main ( ) {  $ ~int n , i , j , k = 0 , x , b [ 1005 ] ;  $ ~bool f ;  $ ~string name [ 1005 ] , ans , s ;  $ ~cin >> n ;  $ ~for ( i = 0 ; i < n ; i ++ ) {  $ ~~f = 0 ;  $ ~~cin >> s >> x ;  $ ~~for ( j = 0 ; j < k ; j ++ ) {  $ ~~~if ( s == name [ j ] ) {  $ ~~~~a [ i ] [ j ] = a [ i - 1 ] [ j ] + x ;  $ ~~~~;  $ ~~~~f = 1 ;  $ ~~~} else  $ ~~~~a [ i ] [ j ] = a [ i - 1 ] [ j ] ;  $ ~~}  $ ~~if ( f == 0 ) {  $ ~~~name [ k ] = s ;  $ ~~~a [ i ] [ k ] = x ;  $ ~~~k ++ ;  $ ~~}  $ ~}  $ ~for ( j = 0 ; j < k ; j ++ ) b [ j ] = a [ n - 1 ] [ j ] ;  $ ~sort ( b , b + k ) ;  $ ~if ( b [ k - 1 ] == b [ k - 2 ] ) {  $ ~~for ( i = 0 ; i < n ; i ++ )  $ ~~~for ( j = 0 ; j < k ; j ++ ) {  $ ~~~~if ( a [ i ] [ j ] >= b [ k - 1 ] && a [ n - 1 ] [ j ] == b [ k - 1 ] ) {  $ ~~~~~ans = name [ j ] ;  $ ~~~~~i = n ;  $ ~~~~~break ;  $ ~~~~}  $ ~~~}  $ ~} else {  $ ~~for ( j = 0 ; j < k ; j ++ )  $ ~~~if ( a [ n - 1 ] [ j ] == b [ k - 1 ] ) {  $ ~~~~ans = name [ j ] ;  $ ~~~~break ;  $ ~~~}  $ ~}  $ ~cout << ans << endl ;  $ ~return 0 ;  $ }
int a [ 1005 ] [ 1005 ] ;  $ int main ( ) {  $ ~int n , i , j , k = 0 , x , b [ 1005 ] ;  $ ~bool f ;  $ ~string name [ 1005 ] , ans , s ;  $ ~cin >> n ;  $ ~for ( i = 0 ; i < n ; i ++ ) {  $ ~~f = 0 ;  $ ~~cin >> s >> x ;  $ ~~for ( j = 0 ; j < k ; j ++ ) {  $ ~~~if ( s == name [ j ] ) {  $ ~~~~a [ i ] [ j ] = a [ i - 1 ] [ j ] + x ;  $ ~~~~;  $ ~~~~f = 1 ;  $ ~~~} else  $ ~~~~a [ i ] [ j ] = a [ i - 1 ] [ j ] ;  $ ~~}  $ ~~if ( f == 0 ) {  $ ~~~name [ k ] = s ;  $ ~~~a [ i ] [ k ] = x ;  $ ~~~k ++ ;  $ ~~}  $ ~}  $ ~for ( j = 0 ; j < k ; j ++ ) b [ j ] = a [ n - 1 ] [ j ] ;  $ ~sort ( b , b + k ) ;  $ ~if ( b [ k - 1 ] == b [ k - 2 ] ) {  $ ~~for ( i = 0 ; i < n ; i ++ )  $ ~~~for ( j = 0 ; j < k ; j ++ ) {  $ ~~~~if ( a [ i ] [ j ] >= b [ k - 1 ] && a [ n - 1 ] [ j ] == b [ k - 1 ] ) {  $ ~~~~~ans = name [ j ] ;  $ ~~~~~i = n ;  $ ~~~~~break ;  $ ~~~~}  $ ~~~}  $ ~} else {  $ ~~for ( j = 0 ; j < k ; j ++ )  $ ~~~if ( a [ n - 1 ] [ j ] == b [ k - 1 ] ) {  $ ~~~~ans = name [ j ] ;  $ ~~~~break ;  $ ~~~}  $ ~}  $ ~cout << ans << endl ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~int t , x , y ;  $ ~cin >> t ;  $ ~string s [ t ] ;  $ ~map < string , int > m ;  $ ~vector < string > v ;  $ ~vector < int > v1 ;  $ ~map < string , int > m1 ;  $ ~for ( int i = 0 ; i < t ; i ++ ) {  $ ~~cin >> s [ i ] >> x ;  $ ~~v . push_back ( s [ i ] ) ;  $ ~~v1 . push_back ( x ) ;  $ ~~if ( m . find ( s [ i ] ) == m . end ( ) ) {  $ ~~~m [ s [ i ] ] = x ;  $ ~~} else {  $ ~~~m [ s [ i ] ] += x ;  $ ~~}  $ ~}  $ ~map < string , int > : : iterator it ;  $ ~for ( it = m . begin ( ) ; it != m . end ( ) ; it ++ ) {  $ ~~if ( it == m . begin ( ) )  $ ~~~y = it -> second ;  $ ~~else {  $ ~~~if ( it -> second > y ) y = it -> second ;  $ ~~}  $ ~}  $ ~for ( it = m . begin ( ) ; it != m . end ( ) ; it ++ ) {  $ ~~if ( it -> second == y ) m1 [ it -> first ] = 1 ;  $ ~}  $ ~m . clear ( ) ;  $ ~for ( int i = 0 ; i < t ; i ++ ) {  $ ~~if ( m1 . find ( v [ i ] ) == m1 . end ( ) )  $ ~~~continue ;  $ ~~else {  $ ~~~if ( m . find ( v [ i ] ) == m . end ( ) ) {  $ ~~~~m [ v [ i ] ] = v1 [ i ] ;  $ ~~~~if ( m [ v [ i ] ] >= y ) {  $ ~~~~~cout << v [ i ] << endl ;  $ ~~~~~break ;  $ ~~~~}  $ ~~~} else {  $ ~~~~m [ v [ i ] ] += v1 [ i ] ;  $ ~~~~if ( m [ v [ i ] ] >= y ) {  $ ~~~~~cout << v [ i ] << endl ;  $ ~~~~~break ;  $ ~~~~}  $ ~~~}  $ ~~}  $ ~}  $ ~return 0 ;  $ }
int main ( ) {  $ ~int t , x , y ;  $ ~cin >> t ;  $ ~string s [ t ] ;  $ ~map < string , int > m ;  $ ~vector < string > v ;  $ ~vector < int > v1 ;  $ ~map < string , int > m1 ;  $ ~for ( int i = 0 ; i < t ; i ++ ) {  $ ~~cin >> s [ i ] >> x ;  $ ~~v . push_back ( s [ i ] ) ;  $ ~~v1 . push_back ( x ) ;  $ ~~if ( m . find ( s [ i ] ) == m . end ( ) ) {  $ ~~~m [ s [ i ] ] = x ;  $ ~~} else {  $ ~~~m [ s [ i ] ] += x ;  $ ~~}  $ ~}  $ ~map < string , int > : : iterator it ;  $ ~for ( it = m . begin ( ) ; it != m . end ( ) ; it ++ ) {  $ ~~if ( it == m . begin ( ) )  $ ~~~y = it -> second ;  $ ~~else {  $ ~~~if ( it -> second > y ) y = it -> second ;  $ ~~}  $ ~}  $ ~for ( it = m . begin ( ) ; it != m . end ( ) ; it ++ ) {  $ ~~if ( it -> second == y ) m1 [ it -> first ] = 1 ;  $ ~}  $ ~m . clear ( ) ;  $ ~for ( int i = 0 ; i < t ; i ++ ) {  $ ~~if ( m1 . find ( v [ i ] ) == m1 . end ( ) )  $ ~~~continue ;  $ ~~else {  $ ~~~if ( m . find ( v [ i ] ) == m . end ( ) ) {  $ ~~~~m [ v [ i ] ] = v1 [ i ] ;  $ ~~~~if ( m [ v [ i ] ] >= y ) {  $ ~~~~~cout << v [ i ] << endl ;  $ ~~~~~break ;  $ ~~~~}  $ ~~~} else {  $ ~~~~m [ v [ i ] ] += v1 [ i ] ;  $ ~~~~if ( m [ v [ i ] ] >= y ) {  $ ~~~~~cout << v [ i ] << endl ;  $ ~~~~~break ;  $ ~~~~}  $ ~~~}  $ ~~}  $ ~}  $ ~return 0 ;  $ }
const int maxn = 128 ;  $ map < string , int > mp1 , mp2 ;  $ string name [ 1010 ] ;  $ int score [ 1010 ] ;  $ int main ( ) {  $ ~int n ;  $ ~cin >> n ;  $ ~for ( int i = 0 ; i < n ; i ++ ) {  $ ~~cin >> name [ i ] >> score [ i ] ;  $ ~~mp1 [ name [ i ] ] += score [ i ] ;  $ ~}  $ ~int maxnum = 0 ;  $ ~for ( int i = 0 ; i < n ; i ++ ) {  $ ~~if ( mp1 [ name [ i ] ] > maxnum ) maxnum = mp1 [ name [ i ] ] ;  $ ~}  $ ~for ( int i = 0 ; i < n ; i ++ ) {  $ ~~mp2 [ name [ i ] ] += score [ i ] ;  $ ~~if ( mp2 [ name [ i ] ] >= maxnum && mp1 [ name [ i ] ] >= maxnum ) {  $ ~~~cout << name [ i ] << endl ;  $ ~~~break ;  $ ~~}  $ ~}  $ ~return 0 ;  $ }
int main ( ) {  $ ~int T ;  $ ~cin >> T ;  $ ~string a [ 1000 ] , max1 ;  $ ~int b [ 1000 ] , max = - 2000 ;  $ ~map < string , int > mp ;  $ ~for ( int i = 0 ; i < T ; i ++ ) {  $ ~~cin >> a [ i ] >> b [ i ] ;  $ ~~mp [ a [ i ] ] += b [ i ] ;  $ ~}  $ ~for ( map < string , int > : : iterator it = mp . begin ( ) ; it != mp . end ( ) ; it ++ ) {  $ ~~if ( max < it -> second ) {  $ ~~~max = it -> second ;  $ ~~~max1 = it -> first ;  $ ~~}  $ ~}  $ ~map < string , int > mm ;  $ ~for ( int i = 0 ; i < T ; i ++ ) {  $ ~~mm [ a [ i ] ] += b [ i ] ;  $ ~~if ( mm [ a [ i ] ] >= max && mp [ a [ i ] ] == max ) {  $ ~~~cout << a [ i ] << endl ;  $ ~~~break ;  $ ~~}  $ ~}  $ }
int main ( ) {  $ ~int T ;  $ ~cin >> T ;  $ ~string a [ 1000 ] , max1 ;  $ ~int b [ 1000 ] , max = - 2000 ;  $ ~map < string , int > mp ;  $ ~for ( int i = 0 ; i < T ; i ++ ) {  $ ~~cin >> a [ i ] >> b [ i ] ;  $ ~~mp [ a [ i ] ] += b [ i ] ;  $ ~}  $ ~for ( map < string , int > : : iterator it = mp . begin ( ) ; it != mp . end ( ) ; it ++ ) {  $ ~~if ( max < it -> second ) {  $ ~~~max = it -> second ;  $ ~~~max1 = it -> first ;  $ ~~}  $ ~}  $ ~map < string , int > mm ;  $ ~for ( int i = 0 ; i < T ; i ++ ) {  $ ~~mm [ a [ i ] ] += b [ i ] ;  $ ~~if ( mm [ a [ i ] ] >= max && mp [ a [ i ] ] == max ) {  $ ~~~cout << a [ i ] << endl ;  $ ~~~break ;  $ ~~}  $ ~}  $ }
int main ( ) {  $ ~int t , x , y ;  $ ~cin >> t ;  $ ~string s [ t ] ;  $ ~map < string , int > m ;  $ ~vector < string > v ;  $ ~vector < int > v1 ;  $ ~map < string , int > m1 ;  $ ~for ( int i = 0 ; i < t ; i ++ ) {  $ ~~cin >> s [ i ] >> x ;  $ ~~v . push_back ( s [ i ] ) ;  $ ~~v1 . push_back ( x ) ;  $ ~~if ( m . find ( s [ i ] ) == m . end ( ) ) {  $ ~~~m [ s [ i ] ] = x ;  $ ~~} else {  $ ~~~m [ s [ i ] ] += x ;  $ ~~}  $ ~}  $ ~map < string , int > : : iterator it ;  $ ~for ( it = m . begin ( ) ; it != m . end ( ) ; it ++ ) {  $ ~~if ( it == m . begin ( ) )  $ ~~~y = it -> second ;  $ ~~else {  $ ~~~if ( it -> second > y ) y = it -> second ;  $ ~~}  $ ~}  $ ~for ( it = m . begin ( ) ; it != m . end ( ) ; it ++ ) {  $ ~~if ( it -> second == y ) m1 [ it -> first ] = 1 ;  $ ~}  $ ~m . clear ( ) ;  $ ~for ( int i = 0 ; i < t ; i ++ ) {  $ ~~if ( m1 . find ( v [ i ] ) == m1 . end ( ) )  $ ~~~continue ;  $ ~~else {  $ ~~~if ( m . find ( v [ i ] ) == m . end ( ) ) {  $ ~~~~m [ v [ i ] ] = v1 [ i ] ;  $ ~~~~if ( m [ v [ i ] ] >= y ) {  $ ~~~~~cout << v [ i ] << endl ;  $ ~~~~~break ;  $ ~~~~}  $ ~~~} else {  $ ~~~~m [ v [ i ] ] += v1 [ i ] ;  $ ~~~~if ( m [ v [ i ] ] >= y ) {  $ ~~~~~cout << v [ i ] << endl ;  $ ~~~~~break ;  $ ~~~~}  $ ~~~}  $ ~~}  $ ~}  $ ~return 0 ;  $ }
int main ( ) {  $ ~int n , t , cnt0 = 0 , cnt5 = 0 ;  $ ~cin >> n ;  $ ~for ( int i = 0 ; i < n ; i ++ ) {  $ ~~cin >> t ;  $ ~~if ( t == 0 )  $ ~~~cnt0 ++ ;  $ ~~else  $ ~~~cnt5 ++ ;  $ ~}  $ ~int x = cnt5 / 9 ;  $ ~string ans ;  $ ~if ( cnt0 == 0 ) {  $ ~~ans = "-1" ;  $ ~} else {  $ ~~if ( x == 0 )  $ ~~~ans = "0" ;  $ ~~else {  $ ~~~for ( int i = 0 ; i < x ; i ++ ) { ans += "555555555" ; }  $ ~~~for ( int i = 0 ; i < cnt0 ; i ++ ) { ans += "0" ; }  $ ~~}  $ ~}  $ ~cout << ans << endl ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~long long a = 0 , b = 0 , c , d , e , f = 0 , l , g , m , n , k , i , j , t , p , q , s = 0 ;  $ ~vector < long long > v ;  $ ~cin >> n ;  $ ~for ( i = 0 ; i < n ; i ++ ) {  $ ~~cin >> a ;  $ ~~v . push_back ( a ) ;  $ ~~if ( a > f ) f = a ;  $ ~~s += a ;  $ ~}  $ ~a = n - 1 ;  $ ~c = s / a ;  $ ~if ( s % a ) c ++ ;  $ ~if ( f < c ) f = c ;  $ ~cout << f << endl ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~int refused = 0 ;  $ ~int n , a , client ;  $ ~float b , c = 0 ;  $ ~cin >> n >> a >> b ;  $ ~for ( int i = 0 ; i < n ; i ++ ) {  $ ~~cin >> client ;  $ ~~if ( client == 1 ) {  $ ~~~if ( a > 0 ) {  $ ~~~~a -- ;  $ ~~~} else if ( b > 0 ) {  $ ~~~~b -= 1 ;  $ ~~~~c += 0.5 ;  $ ~~~} else if ( c > 0 ) {  $ ~~~~c -= 0.5 ;  $ ~~~} else  $ ~~~~refused ++ ;  $ ~~} else {  $ ~~~if ( b >= 1 ) {  $ ~~~~b -- ;  $ ~~~} else  $ ~~~~refused += 2 ;  $ ~~}  $ ~}  $ ~cout << refused << endl ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~int n , m , c ;  $ ~cin >> n >> m >> c ;  $ ~for ( size_t i = 0 ; i < 10 ; i ++ ) {  $ ~~if ( ( n * 10 + i ) % m == 0 ) {  $ ~~~cout << n * 10 + i ;  $ ~~~string x ( c - 1 , '0' ) ;  $ ~~~cout << x << endl ;  $ ~~~n = 0 ;  $ ~~~break ;  $ ~~}  $ ~}  $ ~if ( n ) cout << - 1 << endl ;  $ }
int n [ 20 ] ;  $ int m [ 20 ] ;  $ int n1 ;  $ int sumn ;  $ bool p ;  $ int findn ( int ti ) {  $ ~if ( ti == 1 ) return 3 ;  $ ~if ( ti == 2 ) return 3 ;  $ ~if ( ti == 3 ) return 3 ;  $ ~if ( ti == 4 ) return 2 ;  $ ~if ( ti == 5 ) return 2 ;  $ ~if ( ti == 6 ) return 2 ;  $ ~if ( ti == 7 ) return 1 ;  $ ~if ( ti == 8 ) return 1 ;  $ ~if ( ti == 9 ) return 1 ;  $ ~if ( ti == 0 ) return 0 ;  $ }  $ int findm ( int ti ) {  $ ~if ( ti == 1 ) return 1 ;  $ ~if ( ti == 2 ) return 2 ;  $ ~if ( ti == 3 ) return 3 ;  $ ~if ( ti == 4 ) return 1 ;  $ ~if ( ti == 5 ) return 2 ;  $ ~if ( ti == 6 ) return 3 ;  $ ~if ( ti == 7 ) return 1 ;  $ ~if ( ti == 8 ) return 2 ;  $ ~if ( ti == 9 ) return 3 ;  $ ~if ( ti == 0 ) return 2 ;  $ }  $ void readin ( ) {  $ ~char c = getchar ( ) ;  $ ~while ( ! isdigit ( c ) ) { c = getchar ( ) ; }  $ ~n [ 1 ] = findn ( c - '0' ) ;  $ ~m [ 1 ] = findm ( c - '0' ) ;  $ ~for ( int i = 2 ; i <= n1 ; i ++ ) {  $ ~~c = getchar ( ) ;  $ ~~n [ i ] = findn ( c - '0' ) ;  $ ~~m [ i ] = findm ( c - '0' ) ;  $ ~}  $ ~for ( int i = n1 ; i >= 1 ; i -- ) {  $ ~~n [ i ] -= n [ i - 1 ] ;  $ ~~m [ i ] -= m [ i - 1 ] ;  $ ~}  $ }  $ void dfs ( int ni , int mi , int tip ) {  $ ~if ( tip == n1 ) {  $ ~~sumn ++ ;  $ ~~return ;  $ ~}  $ ~int ui = ni += n [ tip + 1 ] ;  $ ~int vi = mi += m [ tip + 1 ] ;  $ ~if ( ( ui >= 1 && ui <= 3 && vi >= 1 && vi <= 3 ) || ( ui == 0 && vi == 2 ) ) { dfs ( ui , vi , tip + 1 ) ; }  $ }  $ int main ( ) {  $ ~cin >> n1 ;  $ ~readin ( ) ;  $ ~for ( int i = 0 ; i <= 9 ; i ++ ) { dfs ( findn ( i ) , findm ( i ) , 1 ) ; }  $ ~if ( sumn == 1 ) {  $ ~~cout << "YES" << endl ;  $ ~} else {  $ ~~cout << "NO" << endl ;  $ ~}  $ ~return 0 ;  $ }
int main ( ) {  $ ~int n , a , b , t = 0 , x , s = 0 ;  $ ~cin >> n >> a >> b ;  $ ~for ( int i = 0 ; i < n ; i ++ ) {  $ ~~cin >> x ;  $ ~~if ( x == 1 ) {  $ ~~~if ( a > 0 )  $ ~~~~a -- ;  $ ~~~else if ( b > 0 ) {  $ ~~~~b -- ;  $ ~~~~s ++ ;  $ ~~~} else if ( s != 0 )  $ ~~~~s -- ;  $ ~~~else {  $ ~~~~t ++ ;  $ ~~~}  $ ~~} else {  $ ~~~if ( b > 0 )  $ ~~~~b -- ;  $ ~~~else  $ ~~~~t = t + 2 ;  $ ~~}  $ ~}  $ ~cout << t << endl ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~long long n ;  $ ~while ( cin >> n ) {  $ ~~int z = 0 , f = 0 , ans = 0 ;  $ ~~for ( int i = 0 ; i < n ; i ++ ) {  $ ~~~int tmp ;  $ ~~~cin >> tmp ;  $ ~~~if ( tmp == 5 ) f ++ ;  $ ~~~if ( tmp == 0 ) z ++ ;  $ ~~~if ( f % 9 == 0 ) ans = f ;  $ ~~}  $ ~~if ( ! z )  $ ~~~cout << - 1 << endl ;  $ ~~else if ( f < 9 )  $ ~~~cout << 0 << endl ;  $ ~~else {  $ ~~~for ( int i = 0 ; i < ans ; i ++ ) cout << 5 ;  $ ~~~for ( int i = 0 ; i < z ; i ++ ) cout << 0 ;  $ ~~~cout << endl ;  $ ~~}  $ ~}  $ ~return 0 ;  $ }
int main ( ) {  $ ~int a , b , n ;  $ ~cin >> a >> b >> n ;  $ ~long long ans = a ;  $ ~int flag = 0 ;  $ ~for ( int i = 0 ; i <= 9 ; i ++ ) {  $ ~~ans = a * 10 + i ;  $ ~~if ( ans % b == 0 ) {  $ ~~~flag = 1 ;  $ ~~~cout << ans ;  $ ~~~for ( int j = 1 ; j < n ; j ++ ) { cout << "0" ; }  $ ~~~cout << endl ;  $ ~~~return 0 ;  $ ~~}  $ ~}  $ ~if ( flag == 0 ) cout << "-1" << endl ;  $ ~return 0 ;  $ }
inline int read ( ) {  $ ~int x = 0 ;  $ ~char c = getchar ( ) ;  $ ~bool flag = 0 ;  $ ~while ( c < '0' || c > '9' ) {  $ ~~if ( c == '-' ) flag = 1 ;  $ ~~c = getchar ( ) ;  $ ~}  $ ~while ( c >= '0' && c <= '9' ) {  $ ~~x = ( x + ( x << 2 ) << 1 ) + c - '0' ;  $ ~~c = getchar ( ) ;  $ ~}  $ ~return flag ? - x : x ;  $ }  $ int a [ 100010 ] , n ;  $ int cmp ( int a , int b ) {  $ ~return a > b ;  $ }  $ int main ( ) {  $ ~n = read ( ) ;  $ ~for ( int i = 0 ; i < n ; i ++ ) a [ i ] = read ( ) ;  $ ~sort ( a , a + n , cmp ) ;  $ ~long long r = 100000000000 , l = 0 , ans = ( l + r ) / 2 ;  $ ~while ( l < r ) {  $ ~~long long left = ans , i ;  $ ~~for ( i = 0 ; i < n ; i ++ ) {  $ ~~~if ( a [ i ] > ans ) {  $ ~~~~l = ans + 1 ;  $ ~~~~ans = ( r + l ) / 2 ;  $ ~~~~break ;  $ ~~~} else {  $ ~~~~left = left - ( ans - a [ i ] ) ;  $ ~~~~if ( left <= 0 ) {  $ ~~~~~r = ans ;  $ ~~~~~ans = ( r + l ) / 2 ;  $ ~~~~~break ;  $ ~~~~}  $ ~~~}  $ ~~}  $ ~~if ( i == n && left > 0 ) {  $ ~~~l = ans + 1 ;  $ ~~~ans = ( r + l ) / 2 ;  $ ~~}  $ ~}  $ ~cout << ans << endl ;  $ }
int main ( ) {  $ ~int a , b , n ;  $ ~cin >> a >> b >> n ;  $ ~a *= 10 ;  $ ~int flag = 0 ;  $ ~int ans = 0 ;  $ ~for ( int i = 0 ; i <= 9 ; i ++ ) {  $ ~~int x = a + i ;  $ ~~if ( x % b == 0 ) {  $ ~~~ans = x ;  $ ~~~flag = 1 ;  $ ~~~break ;  $ ~~} else  $ ~~~flag = 0 ;  $ ~}  $ ~if ( flag == 1 ) {  $ ~~cout << ans ;  $ ~~for ( int i = 0 ; i < n - 1 ; i ++ ) { cout << "0" ; }  $ ~~cout << endl ;  $ ~} else {  $ ~~cout << - 1 << endl ;  $ ~}  $ ~return 0 ;  $ }
int i , j , k ;  $ int fr [ ] = { 0 , 0 , 1 , - 1 , - 1 , 1 , - 1 , 1 } ;  $ int fc [ ] = { - 1 , 1 , 0 , 0 , 1 , 1 , - 1 , - 1 } ;  $ int main ( ) {  $ ~long long n , m , k , mx , mn , sum = 0 , sum2 ;  $ ~cin >> n >> m >> k ;  $ ~mx = max ( n , m ) ;  $ ~mn = min ( n , m ) ;  $ ~if ( k > ( m + n - 2 ) )  $ ~~cout << - 1 << endl ;  $ ~else {  $ ~~if ( k <= mn - 1 ) {  $ ~~~sum = ( mn / ( k + 1 ) ) , sum *= mx ;  $ ~~~sum2 = ( mx / ( k + 1 ) ) , sum2 *= mn ;  $ ~~~sum = max ( sum , sum2 ) ;  $ ~~} else if ( k <= mx - 1 )  $ ~~~sum = ( mx / ( k + 1 ) ) , sum *= mn ;  $ ~~else  $ ~~~sum = mn / ( k - mx + 2 ) ;  $ ~~cout << sum << endl ;  $ ~}  $ ~return 0 ;  $ }
int main ( ) {  $ ~long long int n ;  $ ~cin >> n ;  $ ~long long int fives = 0 , tmp = 0 , zeroes = 0 ;  $ ~while ( n -- ) {  $ ~~cin >> tmp ;  $ ~~if ( tmp == 5 )  $ ~~~fives += 1 ;  $ ~~else  $ ~~~zeroes += 1 ;  $ ~}  $ ~fives /= 9 ;  $ ~if ( fives && zeroes ) {  $ ~~while ( fives -- > 0 ) { cout << "555555555" ; }  $ ~~while ( zeroes -- > 0 ) { cout << "0" ; }  $ ~~cout << endl ;  $ ~} else if ( zeroes )  $ ~~cout << "0" << endl ;  $ ~else  $ ~~cout << "-1" << endl ;  $ ~return 0 ;  $ }
long long x , y , z , a , b ;  $ deque < long long > q ;  $ int main ( ) {  $ ~cin >> x ;  $ ~for ( int i = 0 ; i < x ; i ++ ) {  $ ~~cin >> y ;  $ ~~b = max ( b , y ) ;  $ ~~a += y ;  $ ~}  $ ~x -- ;  $ ~cout << max ( b , ( long long ) ceil ( ( long double ) a / ( long double ) x ) ) << endl ;  $ ~return 0 ;  $ }
int posy [ 10 ] , posx [ 10 ] ;  $ int valid [ 5 ] [ 5 ] ;  $ string s ;  $ bool calc ( int y , int x , int id ) {  $ ~if ( id + 1 == s . size ( ) ) return true ;  $ ~int dy = y + posy [ s [ id + 1 ] - '0' ] - posy [ s [ id ] - '0' ] ;  $ ~int dx = x + posx [ s [ id + 1 ] - '0' ] - posx [ s [ id ] - '0' ] ;  $ ~if ( dy < 0 || dx < 0 || dy > 4 || dx > 4 || valid [ dy ] [ dx ] == 0 ) return false ;  $ ~return calc ( dy , dx , id + 1 ) ;  $ }  $ int main ( ) {  $ ~for ( int i = 1 ; i <= 9 ; i ++ ) {  $ ~~int x = i - 1 ;  $ ~~posy [ i ] = x / 3 ;  $ ~~posx [ i ] = x % 3 ;  $ ~~valid [ x / 3 ] [ x % 3 ] = 1 ;  $ ~}  $ ~posy [ 0 ] = 3 ;  $ ~posx [ 0 ] = 1 ;  $ ~valid [ 3 ] [ 1 ] = 1 ;  $ ~int n ;  $ ~cin >> n ;  $ ~cin >> s ;  $ ~int tot = 0 ;  $ ~for ( int i = 0 ; i < 10 ; i ++ ) {  $ ~~if ( calc ( posy [ i ] , posx [ i ] , 0 ) == true ) tot ++ ;  $ ~}  $ ~if ( tot == 1 )  $ ~~cout << "YES" << endl ;  $ ~else  $ ~~cout << "NO" << endl ;  $ }
int main ( ) {  $ ~int n ;  $ ~cin >> n ;  $ ~int a [ 3 ] ;  $ ~cin >> a [ 1 ] >> a [ 2 ] ;  $ ~a [ 0 ] = 0 ;  $ ~int inp ;  $ ~unsigned int left_out = 0 ;  $ ~for ( int i = 0 ; i < n ; i ++ ) {  $ ~~cin >> inp ;  $ ~~if ( a [ inp ] > 0 )  $ ~~~a [ inp ] -- ;  $ ~~else if ( a [ 2 ] > 0 && inp == 1 ) {  $ ~~~a [ 2 ] -- ;  $ ~~~a [ 0 ] ++ ;  $ ~~} else if ( a [ 0 ] > 0 && inp == 1 )  $ ~~~a [ 0 ] -- ;  $ ~~else  $ ~~~left_out += inp ;  $ ~}  $ ~cout << left_out << endl ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~int test = 1 ;  $ ~while ( test -- ) {  $ ~~int n , m , i , j , x , y , s , k , q , a , b , c = 0 ;  $ ~~long long int sum = 0 ;  $ ~~cin >> n ;  $ ~~for ( i = 0 ; i < n ; i ++ ) {  $ ~~~cin >> k ;  $ ~~~sum += k ;  $ ~~~c = max ( c , k ) ;  $ ~~}  $ ~~j = sum % ( n - 1 ) > 0 ? 1 : 0 ;  $ ~~sum = sum / ( n - 1 ) + j ;  $ ~~sum = sum > c ? sum : c ;  $ ~~cout << sum << "\n" ;  $ ~}  $ ~return 0 ;  $ }
int num [ 30 ] , vis [ 1010 ] ;  $ char str [ 1010 ] , ans [ 1010 ] ;  $ int main ( ) {  $ ~int t , q , i , j , k , len , t1 , mx = 0 ;  $ ~cin >> str + 1 ;  $ ~len = strlen ( str + 1 ) ;  $ ~for ( i = 1 ; i <= len ; i ++ ) {  $ ~~t = str [ i ] - 'a' + 1 ;  $ ~~num [ t ] ++ ;  $ ~~if ( num [ t ] > num [ mx ] ) mx = t ;  $ ~}  $ ~int cur = 1 , nf = 0 ;  $ ~for ( i = 2 ; i <= len ; i ++ ) {  $ ~~if ( vis [ i ] ) continue ;  $ ~~if ( i * 2 <= len ) {  $ ~~~for ( j = i ; j <= len ; j += i ) {  $ ~~~~if ( vis [ j ] ) continue ;  $ ~~~~if ( num [ mx ] <= 0 ) {  $ ~~~~~nf = 1 ;  $ ~~~~~break ;  $ ~~~~}  $ ~~~~ans [ j ] = mx - 1 + 'a' ;  $ ~~~~num [ mx ] -- ;  $ ~~~~vis [ j ] = 1 ;  $ ~~~}  $ ~~}  $ ~~if ( nf ) break ;  $ ~}  $ ~for ( i = 1 ; i <= len && ! nf ; i ++ ) {  $ ~~if ( vis [ i ] ) continue ;  $ ~~while ( num [ cur ] <= 0 && cur <= 26 ) cur ++ ;  $ ~~if ( cur > 26 ) {  $ ~~~nf = 1 ;  $ ~~~break ;  $ ~~}  $ ~~ans [ i ] = cur - 1 + 'a' ;  $ ~~num [ cur ] -- ;  $ ~}  $ ~if ( nf )  $ ~~cout << "NO\n" ;  $ ~else  $ ~~cout << "YES\n" << ans + 1 << endl ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~int n , left , right , up , down ;  $ ~string str ;  $ ~cin >> n ;  $ ~cin >> str ;  $ ~left = right = up = down = 1 ;  $ ~for ( int i = 0 ; i < n ; i ++ ) {  $ ~~if ( str [ i ] == '1' || str [ i ] == '2' || str [ i ] == '3' ) up = 0 ;  $ ~~if ( str [ i ] == '1' || str [ i ] == '4' || str [ i ] == '7' || str [ i ] == '0' ) left = 0 ;  $ ~~if ( str [ i ] == '7' || str [ i ] == '9' || str [ i ] == '0' ) down = 0 ;  $ ~~if ( str [ i ] == '6' || str [ i ] == '9' || str [ i ] == '3' || str [ i ] == '0' ) right = 0 ;  $ ~}  $ ~if ( down == 1 || up == 1 || left == 1 || right == 1 )  $ ~~cout << "NO" << endl ;  $ ~else  $ ~~cout << "YES" << endl ;  $ ~return 0 ;  $ }
void fastIo ( ) { }  $ int main ( ) {  $ ~fastIo ( ) ;  $ ~long long n , m ;  $ ~cin >> n >> m ;  $ ~long long sum = 0 ;  $ ~for ( int i = 0 ; i < n ; i ++ ) {  $ ~~long long temp ;  $ ~~cin >> temp ;  $ ~~sum += temp ;  $ ~}  $ ~if ( m - sum < 10 * ( n - 1 ) )  $ ~~cout << "-1" << endl ;  $ ~else {  $ ~~sum = m - sum - 10 * ( n - 1 ) ;  $ ~~long long cnt = ( n - 1 ) * 2 ;  $ ~~cnt += sum / 5 ;  $ ~~cout << cnt << endl ;  $ ~}  $ ~return 0 ;  $ }
int main ( ) {  $ ~long long n , i , ans = 0 , m = - 1 , sol ;  $ ~cin >> n ;  $ ~long long ar [ n ] ;  $ ~for ( i = 0 ; i < n ; i ++ ) {  $ ~~cin >> ar [ i ] ;  $ ~~ans = ans + ar [ i ] ;  $ ~~m = max ( m , ar [ i ] ) ;  $ ~}  $ ~sol = ( ans ) / ( n - 1 ) ;  $ ~if ( sol * ( n - 1 ) != ans ) { sol ++ ; }  $ ~cout << max ( m , sol ) << "\n" ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~int hy , ay , dy , hm , am , dm , h , a , d ;  $ ~cin >> hy >> ay >> dy ;  $ ~cin >> hm >> am >> dm ;  $ ~cin >> h >> a >> d ;  $ ~int minbitcoins = INT_MAX ;  $ ~for ( int t = 1 ; t < 201 ; ++ t ) {  $ ~~int defcos = 0 ;  $ ~~if ( hy <= am * t - dy * t ) { defcos = ( am * t - dy * t - hy + 1 ) * h ; }  $ ~~if ( dy * t > ( am * t - hy ) )  $ ~~~defcos = 0 ;  $ ~~else {  $ ~~~defcos = min ( defcos , ( ( am * t - hy ) / t - dy + 1 ) * d ) ;  $ ~~}  $ ~~int atcos = 0 ;  $ ~~if ( hm + dm * t > ay * t ) { atcos = ( ceil ( ( double ) ( hm + dm * t ) / t ) - ay ) * a ; }  $ ~~minbitcoins = min ( minbitcoins , atcos + defcos ) ;  $ ~}  $ ~cout << minbitcoins << "\n" ;  $ }
int main ( ) {  $ ~int n ;  $ ~cin >> n ;  $ ~int f = 0 , z = 0 ;  $ ~for ( int i = 0 ; i < n ; ++ i ) {  $ ~~int a ;  $ ~~cin >> a ;  $ ~~if ( a == 5 )  $ ~~~f += 1 ;  $ ~~else  $ ~~~z += 1 ;  $ ~}  $ ~f = f / 9 * 9 ;  $ ~if ( z == 0 ) {  $ ~~cout << - 1 << endl ;  $ ~~return 0 ;  $ ~}  $ ~cout << string ( f , '5' ) << ( f == 0 ? "0" : string ( z , '0' ) ) << endl ;  $ }
int main ( ) {  $ ~int n , a [ 11 ] = { 0 } ;  $ ~cin >> n ;  $ ~string s ;  $ ~cin >> s ;  $ ~for ( int i = 0 ; i < n ; i ++ ) { a [ s [ i ] - '0' ] = 1 ; }  $ ~int flag_u = 1 , flag_d = 1 , flag_l = 1 , flag_r = 1 ;  $ ~if ( a [ 0 ] ) {  $ ~~flag_d = 0 ;  $ ~~flag_l = 0 ;  $ ~~flag_r = 0 ;  $ ~}  $ ~if ( a [ 0 ] || ( ! a [ 0 ] && a [ 7 ] || a [ 9 ] ) ) flag_d = 0 ;  $ ~if ( a [ 1 ] || a [ 2 ] || a [ 3 ] ) flag_u = 0 ;  $ ~if ( a [ 1 ] || a [ 4 ] || a [ 7 ] ) flag_l = 0 ;  $ ~if ( a [ 3 ] || a [ 6 ] || a [ 9 ] ) flag_r = 0 ;  $ ~if ( ! flag_u && ! flag_d && ! flag_l && ! flag_r )  $ ~~cout << "YES" << endl ;  $ ~else  $ ~~cout << "NO" << endl ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~int i , j , n , count ;  $ ~char a [ 1001 ] [ 5 ] ;  $ ~cin >> n ;  $ ~for ( i = 0 ; i < n ; i ++ ) {  $ ~~for ( j = 0 ; j < 5 ; j ++ ) { cin >> a [ i ] [ j ] ; }  $ ~}  $ ~for ( int x = 0 ; x < n ; x ++ ) {  $ ~~for ( int y = 0 ; y < 5 ; y ++ ) {  $ ~~~if ( a [ x ] [ y ] == 'O' && a [ x ] [ y + 1 ] == 'O' ) {  $ ~~~~count = 0 ;  $ ~~~~cout << "YES" << endl ;  $ ~~~~a [ x ] [ y ] = '+' ;  $ ~~~~a [ x ] [ y + 1 ] = '+' ;  $ ~~~~break ;  $ ~~~} else {  $ ~~~~y += 2 ;  $ ~~~~count = 1 ;  $ ~~~}  $ ~~}  $ ~~if ( count == 0 ) break ;  $ ~}  $ ~if ( count == 1 ) { cout << "NO" << endl ; }  $ ~if ( count == 0 ) {  $ ~~for ( int k = 0 ; k < n ; k ++ ) {  $ ~~~for ( int l = 0 ; l < 5 ; l ++ ) { cout << a [ k ] [ l ] ; }  $ ~~~cout << endl ;  $ ~~}  $ ~}  $ ~return 0 ;  $ }
int k [ 10000000 ] ;  $ int main ( ) {  $ ~int a , b , p , m = 0 , j = 0 ;  $ ~cin >> p >> a >> b ;  $ ~for ( int i = 1 ; i <= p ; i ++ ) { cin >> k [ i ] ; }  $ ~for ( int i = 1 ; i <= p ; i ++ ) {  $ ~~if ( k [ i ] == 1 ) {  $ ~~~if ( a > 0 ) {  $ ~~~~a = a - 1 ;  $ ~~~~continue ;  $ ~~~} else if ( b > 0 ) {  $ ~~~~b = b - 1 ;  $ ~~~~m = m + 1 ;  $ ~~~~continue ;  $ ~~~} else if ( m > 0 ) {  $ ~~~~m = m - 1 ;  $ ~~~~continue ;  $ ~~~} else {  $ ~~~~j = j + 1 ;  $ ~~~~continue ;  $ ~~~}  $ ~~} else {  $ ~~~if ( b > 0 ) {  $ ~~~~b = b - 1 ;  $ ~~~~continue ;  $ ~~~} else {  $ ~~~~j = j + 2 ;  $ ~~~~continue ;  $ ~~~}  $ ~~}  $ ~}  $ ~cout << j << endl ;  $ ~return 0 ;  $ }
long long n ;  $ string cad ;  $ bool power ;  $ int main ( ) {  $ ~cin >> n ;  $ ~cin >> cad ;  $ ~power = true ;  $ ~for ( int i = 0 ; i < n ; i ++ ) {  $ ~~int x = cad [ i ] - '0' ;  $ ~~if ( x == 0 ) x = 1 ;  $ ~~if ( x == 1 || x == 4 || x == 7 ) power = false ;  $ ~}  $ ~if ( power ) {  $ ~~cout << "NO\n" ;  $ ~~return 0 ;  $ ~}  $ ~power = true ;  $ ~for ( int i = 0 ; i < n ; i ++ ) {  $ ~~int x = cad [ i ] - '0' ;  $ ~~if ( x == 0 ) x = 9 ;  $ ~~if ( x == 3 || x == 6 || x == 9 ) power = false ;  $ ~}  $ ~if ( power ) {  $ ~~cout << "NO\n" ;  $ ~~return 0 ;  $ ~}  $ ~power = true ;  $ ~for ( int i = 0 ; i < n ; i ++ ) {  $ ~~int x = cad [ i ] - '0' ;  $ ~~if ( x == 0 ) x = 11 ;  $ ~~if ( x - 3 < 1 ) power = false ;  $ ~}  $ ~if ( power ) {  $ ~~cout << "NO\n" ;  $ ~~return 0 ;  $ ~}  $ ~power = true ;  $ ~for ( int i = 0 ; i < n ; i ++ ) {  $ ~~int x = cad [ i ] - '0' ;  $ ~~if ( x == 8 ) x = 5 ;  $ ~~if ( x == 0 ) x = 11 ;  $ ~~if ( x + 3 > 9 ) power = false ;  $ ~}  $ ~if ( power ) {  $ ~~cout << "NO\n" ;  $ ~~return 0 ;  $ ~}  $ ~cout << "YES\n" ;  $ ~return 0 ;  $ }
int n ;  $ long long m ;  $ long long s ;  $ int main ( ) {  $ ~while ( cin >> n ) {  $ ~~s = 0 ;  $ ~~for ( int i = 0 ; i < n ; i ++ ) {  $ ~~~int t ;  $ ~~~cin >> t ;  $ ~~~s += t ;  $ ~~~if ( i == 0 )  $ ~~~~m = t ;  $ ~~~else {  $ ~~~~if ( m < t ) m = t ;  $ ~~~}  $ ~~}  $ ~~long long x = s / ( n - 1 ) ;  $ ~~if ( s % ( n - 1 ) ) x ++ ;  $ ~~if ( m > x ) x = m ;  $ ~~cout << x << endl ;  $ ~}  $ }
int main ( ) {  $ ~int n , d , t , aux = 0 ;  $ ~cin >> n >> d ;  $ ~for ( int i = 0 ; i < n ; i ++ ) {  $ ~~cin >> t ;  $ ~~aux += t ;  $ ~}  $ ~if ( aux + ( n - 1 ) * 10 > d ) {  $ ~~cout << - 1 << endl ;  $ ~~return 0 ;  $ ~} else {  $ ~~cout << ( d - aux ) / 5 << endl ;  $ ~}  $ ~return 0 ;  $ }
int main ( ) {  $ ~int n ;  $ ~bool check = false ;  $ ~cin >> n ;  $ ~string input = "" ;  $ ~vector < char > result ;  $ ~cin . ignore ( ) ;  $ ~for ( int i = 0 ; i < n ; i ++ ) {  $ ~~getline ( cin , input ) ;  $ ~~if ( ( input [ 0 ] == 'O' ) && ( input [ 1 ] == 'O' ) && ! check ) {  $ ~~~check = true ;  $ ~~~result . push_back ( '+' ) ;  $ ~~~result . push_back ( '+' ) ;  $ ~~} else {  $ ~~~result . push_back ( input [ 0 ] ) ;  $ ~~~result . push_back ( input [ 1 ] ) ;  $ ~~}  $ ~~result . push_back ( input [ 2 ] ) ;  $ ~~if ( ( input [ 3 ] == 'O' ) && ( input [ 4 ] == 'O' ) && ! check ) {  $ ~~~check = true ;  $ ~~~result . push_back ( '+' ) ;  $ ~~~result . push_back ( '+' ) ;  $ ~~~result . push_back ( '\n' ) ;  $ ~~} else {  $ ~~~result . push_back ( input [ 3 ] ) ;  $ ~~~result . push_back ( input [ 4 ] ) ;  $ ~~~result . push_back ( '\n' ) ;  $ ~~}  $ ~}  $ ~cout << ( check ? "YES" : "NO" ) << endl ;  $ ~for ( int i = 0 ; i < result . size ( ) && check ; i ++ ) { cout << result [ i ] ; }  $ ~return 0 ;  $ }
int n , m , p , a , b ;  $ void solve ( ) {  $ ~cin >> a >> b >> n ;  $ ~int tmp = a * 10 ;  $ ~for ( int i = 0 ; i < 10 ; i ++ ) {  $ ~~if ( tmp % b == 0 ) {  $ ~~~cout << tmp ;  $ ~~~for ( int i = 0 ; i < n - 1 ; ++ i ) cout << "0" ;  $ ~~~cout << endl ;  $ ~~~return ;  $ ~~}  $ ~~tmp ++ ;  $ ~}  $ ~cout << - 1 << endl ;  $ }  $ int main ( ) {  $ ~;  $ ~int T = 1 ;  $ ~for ( int i = 0 ; i < T ; i ++ ) { solve ( ) ; }  $ ~return 0 ;  $ }
long long int a [ 100010 ] , n ;  $ bool check ( long long int x ) {  $ ~long long int tmp = 0 , i ;  $ ~for ( i = 0 ; i < n ; i ++ ) tmp += ( x - a [ i ] ) ;  $ ~return ( tmp >= x ) ;  $ }  $ long long int binSearch ( long long int low , long long int high ) {  $ ~while ( low < high ) {  $ ~~long long int mid = low + ( high - low ) / 2 ;  $ ~~if ( check ( mid ) )  $ ~~~high = mid ;  $ ~~else  $ ~~~low = mid + 1 ;  $ ~}  $ ~return low ;  $ }  $ int main ( ) {  $ ~long long int t = 1 ;  $ ~while ( t -- ) {  $ ~~long long int ans = 0 , i ;  $ ~~cin >> n ;  $ ~~for ( i = 0 ; i < n ; i ++ ) cin >> a [ i ] ;  $ ~~sort ( a , a + n ) ;  $ ~~ans = binSearch ( a [ n - 1 ] , 1e14 ) ;  $ ~~cout << ans << "\n" ;  $ ~}  $ ~return 0 ;  $ }
const double pi = acos ( - 1 ) ;  $ const long long MODPRIMA = ( long long ) 1e9 + 7 ;  $ const long long MAXX = ( long long ) 1e18 ;  $ const long long MINN = - ( long long ) 1e18 ;  $ const double EPS = 1e-9 ;  $ long long N , M , K ;  $ int main ( ) {  $ ~cin >> N >> M >> K ;  $ ~if ( K > N - 1 + M - 1 )  $ ~~cout << - 1 << '\n' ;  $ ~else {  $ ~~long long ans = 0 ;  $ ~~if ( K <= N - 1 ) { ans = ( N / ( K + 1 ) ) * M ; }  $ ~~if ( K <= M - 1 ) { ans = max ( ans , ( M / ( K + 1 ) ) * N ) ; }  $ ~~if ( K > N - 1 ) { ans = max ( ans , ( M / ( K - ( N - 1 ) + 1 ) ) ) ; }  $ ~~if ( K > M - 1 ) { ans = max ( ans , ( N / ( K - ( M - 1 ) + 1 ) ) ) ; }  $ ~~cout << ans << '\n' ;  $ ~}  $ ~return 0 ;  $ }
long long int n , m , k , ans = 0 ;  $ int main ( ) {  $ ~cin >> n >> m >> k ;  $ ~if ( n > m ) {  $ ~~long long int t = n ;  $ ~~n = m ;  $ ~~m = t ;  $ ~}  $ ~if ( k > n + m - 2 ) {  $ ~~cout << - 1 << endl ;  $ ~~return 0 ;  $ ~}  $ ~if ( k < m )  $ ~~cout << max ( m / ( k + 1 ) * n , n / ( k + 1 ) * m ) << endl ;  $ ~else  $ ~~cout << ( n / ( k + 2 - m ) ) << endl ;  $ ~return 0 ;  $ }
long long n , maxn , sum , tot , ans ;  $ inline long long read ( ) {  $ ~long long X = 0 , w = 0 ;  $ ~char ch = 0 ;  $ ~while ( ! isdigit ( ch ) ) w |= ch == '-' , ch = getchar ( ) ;  $ ~while ( isdigit ( ch ) ) X = ( X << 3 ) + ( X << 1 ) + ( ch ^ 48 ) , ch = getchar ( ) ;  $ ~return w ? - X : X ;  $ }  $ inline void write ( long long x ) {  $ ~long long num = 0 ;  $ ~char ch [ 20 ] ;  $ ~if ( ! x ) ch [ ++ num ] = '0' ;  $ ~while ( x ) ch [ ++ num ] = ( x % 10 ) + 48 , x /= 10 ;  $ ~while ( num ) putchar ( ch [ num -- ] ) ;  $ ~puts ( "" ) ;  $ }  $ int main ( ) {  $ ~n = read ( ) ;  $ ~for ( int i = 1 ; i <= n ; ++ i ) {  $ ~~long long x = read ( ) ;  $ ~~sum -= x ;  $ ~~maxn = max ( maxn , x ) ;  $ ~}  $ ~tot = maxn * n + sum ;  $ ~if ( tot >= maxn )  $ ~~write ( maxn ) ;  $ ~else {  $ ~~ans = maxn + ceil ( ( maxn - tot ) / ( n - 1.0 ) ) ;  $ ~~write ( ans ) ;  $ ~}  $ ~return 0 ;  $ }
int main ( ) {  $ ~int n ;  $ ~bool z = 1 , y = 1 , x = 0 ;  $ ~char arr [ 1069 ] [ 1069 ] ;  $ ~cin >> n ;  $ ~for ( int i = 1 ; i <= n ; i ++ ) {  $ ~~for ( int j = 1 ; j <= 5 ; j ++ ) { cin >> arr [ i ] [ j ] ; }  $ ~}  $ ~for ( int i = 1 ; i <= n ; i ++ ) {  $ ~~for ( int j = 1 ; j <= 5 ; j ++ ) {  $ ~~~if ( arr [ i ] [ j ] == arr [ i ] [ j + 1 ] && arr [ i ] [ j ] == 'O' ) { x = 1 ; }  $ ~~}  $ ~}  $ ~if ( x )  $ ~~cout << "YES\n" ;  $ ~else {  $ ~~cout << "NO\n" ;  $ ~~return 0 ;  $ ~}  $ ~for ( int i = 1 ; i <= n ; i ++ ) {  $ ~~for ( int j = 1 ; j <= 5 ; j ++ ) {  $ ~~~if ( arr [ i ] [ j ] == arr [ i ] [ j + 1 ] && arr [ i ] [ j ] == 'O' && z == 1 ) {  $ ~~~~cout << "+" ;  $ ~~~~z = false ;  $ ~~~} else if ( arr [ i ] [ j ] == arr [ i ] [ j - 1 ] && arr [ i ] [ j ] == 'O' && y == 1 ) {  $ ~~~~cout << '+' ;  $ ~~~~y = 0 ;  $ ~~~} else {  $ ~~~~cout << arr [ i ] [ j ] ;  $ ~~~}  $ ~~}  $ ~~cout << endl ;  $ ~}  $ }
int main ( ) {  $ ~int n , temp ;  $ ~int zeros = 0 , fives = 0 ;  $ ~cin >> n ;  $ ~for ( int i = 0 ; i < n ; i ++ ) {  $ ~~cin >> temp ;  $ ~~if ( temp == 5 )  $ ~~~fives ++ ;  $ ~~else  $ ~~~zeros ++ ;  $ ~}  $ ~if ( zeros > 0 && fives >= 9 ) {  $ ~~int i = 0 ;  $ ~~for ( int i = 1 ; i <= ( fives - ( fives % 9 ) ) ; i ++ ) { cout << 5 ; }  $ ~~while ( zeros -- ) { cout << 0 ; }  $ ~~cout << endl ;  $ ~} else if ( zeros <= 0 ) {  $ ~~cout << "-1" << endl ;  $ ~} else {  $ ~~cout << 0 << endl ;  $ ~}  $ }
int main ( ) {  $ ~int n , a , b , sum = 0 , ans , s = 0 ;  $ ~cin >> n >> a >> b ;  $ ~for ( int i = 0 ; i < n ; i ++ ) {  $ ~~cin >> ans ;  $ ~~if ( ans == 1 ) {  $ ~~~if ( a > 0 )  $ ~~~~a -- ;  $ ~~~else if ( b > 0 ) {  $ ~~~~b -- ;  $ ~~~~s ++ ;  $ ~~~} else if ( s != 0 )  $ ~~~~s -- ;  $ ~~~else {  $ ~~~~sum ++ ;  $ ~~~}  $ ~~} else {  $ ~~~if ( b > 0 )  $ ~~~~b -- ;  $ ~~~else  $ ~~~~sum = sum + 2 ;  $ ~~}  $ ~}  $ ~cout << sum << endl ;  $ ~return 0 ;  $ }
long long sum ;  $ int mx , n ;  $ int main ( ) {  $ ~cin >> n ;  $ ~for ( int i = 0 ; i < n ; i ++ ) {  $ ~~int x ;  $ ~~cin >> x ;  $ ~~sum += x ;  $ ~~mx = max ( mx , x ) ;  $ ~}  $ ~cout << max ( 1 LL * mx , ( sum + n - 2 ) / ( n - 1 ) ) << endl ;  $ ~return 0 ;  $ }
string s [ 1001 ] ;  $ string x ;  $ int n ;  $ int main ( ) {  $ ~cin >> n ;  $ ~for ( int i = 0 ; i < n ; i ++ ) { cin >> s [ i ] ; }  $ ~for ( int i = 0 ; i < n ; i ++ ) {  $ ~~if ( s [ i ] [ 0 ] == 'O' && s [ i ] [ 0 ] == s [ i ] [ 1 ] ) {  $ ~~~s [ i ] [ 0 ] = s [ i ] [ 1 ] = '+' ;  $ ~~~cout << "YES" << endl ;  $ ~~~for ( int i = 0 ; i < n ; i ++ ) cout << s [ i ] << endl ;  $ ~~~return 0 ;  $ ~~}  $ ~~if ( s [ i ] [ 3 ] == 'O' && s [ i ] [ 3 ] == s [ i ] [ 4 ] ) {  $ ~~~s [ i ] [ 3 ] = s [ i ] [ 4 ] = '+' ;  $ ~~~cout << "YES" << endl ;  $ ~~~for ( int i = 0 ; i < n ; i ++ ) cout << s [ i ] << endl ;  $ ~~~return 0 ;  $ ~~}  $ ~}  $ ~cout << "NO" << endl ;  $ ~return 0 ;  $ }
int num [ 30 ] , vis [ 1010 ] ;  $ char str [ 1010 ] , ans [ 1010 ] ;  $ int main ( ) {  $ ~int t , q , i , j , k , len , mx = 0 , mp ;  $ ~char mw ;  $ ~cin >> str + 1 ;  $ ~len = strlen ( str + 1 ) ;  $ ~for ( i = 1 ; i <= len ; i ++ ) {  $ ~~t = str [ i ] - 'a' + 1 ;  $ ~~num [ t ] ++ ;  $ ~~if ( num [ t ] > mx ) {  $ ~~~mx = num [ t ] ;  $ ~~~mp = t ;  $ ~~}  $ ~}  $ ~int cur = 1 , nf = 0 ;  $ ~for ( i = 2 ; i <= len ; i ++ ) {  $ ~~if ( vis [ i ] ) continue ;  $ ~~if ( i * 2 <= len ) {  $ ~~~for ( j = i ; j <= len ; j += i ) {  $ ~~~~if ( vis [ j ] ) continue ;  $ ~~~~if ( num [ mp ] <= 0 ) {  $ ~~~~~nf = 1 ;  $ ~~~~~break ;  $ ~~~~}  $ ~~~~ans [ j ] = mp - 1 + 'a' ;  $ ~~~~num [ mp ] -- ;  $ ~~~~vis [ j ] = 1 ;  $ ~~~}  $ ~~}  $ ~~if ( nf ) break ;  $ ~}  $ ~for ( i = 1 ; i <= len ; i ++ ) {  $ ~~if ( vis [ i ] ) continue ;  $ ~~while ( num [ cur ] <= 0 && cur <= 26 ) cur ++ ;  $ ~~if ( cur > 26 ) {  $ ~~~nf = 1 ;  $ ~~~break ;  $ ~~}  $ ~~ans [ i ] = cur - 1 + 'a' ;  $ ~~num [ cur ] -- ;  $ ~}  $ ~if ( nf )  $ ~~cout << "NO\n" ;  $ ~else  $ ~~cout << "YES\n" << ans + 1 << endl ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~int n ;  $ ~cin >> n ;  $ ~int cf = 0 , cz = 0 ;  $ ~for ( int i = 0 ; i < n ; i ++ ) {  $ ~~int t ;  $ ~~cin >> t ;  $ ~~if ( t == 5 )  $ ~~~cf ++ ;  $ ~~else  $ ~~~cz ++ ;  $ ~}  $ ~if ( cz == 0 ) {  $ ~~cout << - 1 << endl ;  $ ~~return 0 ;  $ ~}  $ ~for ( int i = 0 ; i < cf / 9 * 9 ; i ++ ) { cout << "5" ; }  $ ~if ( cf >= 9 )  $ ~~for ( int i = 0 ; i < cz ; i ++ ) cout << "0" ;  $ ~else  $ ~~cout << "0" ;  $ ~cout << endl ;  $ }
int main ( ) {  $ ~long int a , b = 0 , c , d , i , j , k , l , n , m ;  $ ~cin >> n >> m ;  $ ~d = m ;  $ ~for ( i = 0 ; i < n ; i ++ ) {  $ ~~cin >> a ;  $ ~~b += a ;  $ ~}  $ ~m -= b ;  $ ~c = m / 10 ;  $ ~if ( c >= ( n - 1 ) && ( b <= d ) ) {  $ ~~cout << m / 5 << endl ;  $ ~} else  $ ~~cout << "-1" << endl ;  $ }
int main ( ) {  $ ~int ng , a , b , h = 0 ;  $ ~cin >> ng >> a >> b ;  $ ~int ans = 0 ;  $ ~int k ;  $ ~for ( int i = 0 ; i < ng ; ++ i ) {  $ ~~cin >> k ;  $ ~~if ( k == 1 ) {  $ ~~~if ( a > 0 )  $ ~~~~a -- ;  $ ~~~else if ( b > 0 ) {  $ ~~~~b -- ;  $ ~~~~h ++ ;  $ ~~~} else if ( h > 0 ) {  $ ~~~~h -- ;  $ ~~~} else  $ ~~~~ans ++ ;  $ ~~} else {  $ ~~~if ( b > 0 )  $ ~~~~b -- ;  $ ~~~else  $ ~~~~ans += 2 ;  $ ~~}  $ ~}  $ ~cout << ans << endl ;  $ ~return 0 ;  $ }
long long b , n , a , s , e , g , h , i , t ;  $ int main ( ) {  $ ~cin >> n >> a >> b ;  $ ~for ( i = 0 ; i < n ; i ++ ) {  $ ~~cin >> t ;  $ ~~if ( t == 1 ) {  $ ~~~if ( a > 0 )  $ ~~~~a -- ;  $ ~~~else {  $ ~~~~if ( b > 0 ) {  $ ~~~~~b -- ;  $ ~~~~~h ++ ;  $ ~~~~} else {  $ ~~~~~if ( h > 0 )  $ ~~~~~~h -- ;  $ ~~~~~else  $ ~~~~~~g ++ ;  $ ~~~~}  $ ~~~}  $ ~~}  $ ~~if ( t == 2 ) {  $ ~~~if ( b > 0 )  $ ~~~~b -- ;  $ ~~~else {  $ ~~~~g += 2 ;  $ ~~~}  $ ~~}  $ ~}  $ ~cout << g << endl ;  $ ~return 0 ;  $ }
int h1 , h2 , a1 , a2 , d1 , d2 , hc , dc , ac ;  $ int win ( int h1 , int h2 , int a1 , int d1 , int a2 , int d2 ) {  $ ~int x1 = max ( 0 , a2 - d1 ) , x2 = max ( 0 , a1 - d2 ) ;  $ ~if ( x1 == 0 && x2 != 0 ) return 1 ;  $ ~if ( x2 == 0 ) return 0 ;  $ ~int k1 = ceil ( ( double ) h1 / x1 ) , k2 = ceil ( ( double ) h2 / x2 ) ;  $ ~if ( k1 > k2 ) return 1 ;  $ ~return 0 ;  $ }  $ int main ( ) {  $ ~cin >> h1 >> a1 >> d1 ;  $ ~cin >> h2 >> a2 >> d2 ;  $ ~cin >> hc >> ac >> dc ;  $ ~int ans = 1000000 ;  $ ~if ( win ( h1 , h2 , a1 , d1 , a2 , d2 ) ) {  $ ~~cout << 0 << endl ;  $ ~~return 0 ;  $ ~}  $ ~int k ;  $ ~if ( max ( a2 - d1 , 0 ) == 0 ) {  $ ~~cout << ( d2 + 1 - a1 ) * ac << endl ;  $ ~~return 0 ;  $ ~}  $ ~k = ceil ( ( double ) h1 / ( a2 - d1 ) ) ;  $ ~for ( int d = 0 ; d <= a2 ; d ++ )  $ ~~for ( int a = 0 ; a <= 200 ; a ++ ) {  $ ~~~if ( win ( h1 , h2 , a1 + a , d1 + d , a2 , d2 ) ) {  $ ~~~~ans = min ( ans , a * ac + d * dc ) ;  $ ~~~~continue ;  $ ~~~}  $ ~~~for ( int i = k + 1 ; i <= 100 ; i ++ ) {  $ ~~~~int h = ( i - 1 ) * ( a2 - d1 ) + 1 - h1 ;  $ ~~~~if ( win ( h1 + h , h2 , a1 + a , d1 + d , a2 , d2 ) ) {  $ ~~~~~ans = min ( ans , h * hc + a * ac + d * dc ) ;  $ ~~~~~continue ;  $ ~~~~}  $ ~~~}  $ ~~}  $ ~cout << ans << endl ;  $ ~return 0 ;  $ }
int prime ( int x ) {  $ ~for ( int i = 2 ; i < x ; i ++ ) {  $ ~~if ( x % i == 0 ) return false ;  $ ~}  $ ~return true ;  $ }  $ int main ( ) {  $ ~string s ;  $ ~cin >> s ;  $ ~int comp = s . length ( ) - 1 ;  $ ~for ( int i = 2 ; i <= s . length ( ) ; i ++ ) {  $ ~~if ( 2 * i > s . length ( ) && prime ( i ) ) comp -- ;  $ ~}  $ ~vector < int > letters ( 26 , 0 ) ;  $ ~for ( size_t i = 0 ; i < s . length ( ) ; i ++ ) { ++ letters [ s [ i ] - 'a' ] ; }  $ ~bool ok = false ;  $ ~int let ;  $ ~for ( int i = 0 ; i < 26 ; i ++ ) {  $ ~~if ( letters [ i ] >= comp ) {  $ ~~~let = i , ok = true ;  $ ~~~break ;  $ ~~}  $ ~}  $ ~int cur = 0 ;  $ ~if ( ! ok ) {  $ ~~cout << "NO\n" ;  $ ~~return 0 ;  $ ~}  $ ~letters [ let ] -= comp ;  $ ~cout << "YES\n" ;  $ ~string t = "" ;  $ ~for ( int i = 1 ; i <= s . length ( ) ; i ++ ) {  $ ~~if ( i == 1 || ( 2 * i > s . length ( ) && prime ( i ) ) ) {  $ ~~~while ( letters [ cur ] == 0 ) cur ++ ;  $ ~~~t += ( char ) ( 'a' + cur ) ;  $ ~~~-- letters [ cur ] ;  $ ~~} else {  $ ~~~t += ( char ) ( 'a' + let ) ;  $ ~~}  $ ~}  $ ~cout << t << endl ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~int n , a , b ;  $ ~cin >> n >> a >> b ;  $ ~int i ;  $ ~vector < int > gp ;  $ ~for ( i = 0 ; i < n ; i ++ ) {  $ ~~int g ;  $ ~~cin >> g ;  $ ~~gp . push_back ( g ) ;  $ ~}  $ ~int count = 0 , seat = 0 ;  $ ~for ( i = 0 ; i < n ; i ++ ) {  $ ~~if ( gp [ i ] == 1 ) {  $ ~~~if ( a > 0 ) {  $ ~~~~a = a - 1 ;  $ ~~~} else {  $ ~~~~if ( b > 0 ) {  $ ~~~~~b -- ;  $ ~~~~~seat ++ ;  $ ~~~~} else if ( seat > 0 ) {  $ ~~~~~seat -- ;  $ ~~~~} else {  $ ~~~~~count ++ ;  $ ~~~~}  $ ~~~}  $ ~~} else {  $ ~~~if ( b > 0 ) {  $ ~~~~b -- ;  $ ~~~} else {  $ ~~~~count = count + 2 ;  $ ~~~}  $ ~~}  $ ~}  $ ~cout << count << endl ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~int numPeople ;  $ ~cin >> numPeople ;  $ ~long long sum = 0 ;  $ ~long long maxVal = 0 ;  $ ~for ( int i = 0 ; i < numPeople ; i ++ ) {  $ ~~long long person ;  $ ~~cin >> person ;  $ ~~maxVal = max ( maxVal , person ) ;  $ ~~sum += person ;  $ ~}  $ ~while ( maxVal * ( numPeople - 1 ) < sum ) { maxVal ++ ; }  $ ~cout << maxVal << "\n" ;  $ }
long long sum_mod ( long long a , long long b ) {  $ ~return ( a + b ) % 1000000007 ;  $ }  $ long long subtract_mod ( long long a , long long b ) {  $ ~return ( a % 1000000007 - b % 1000000007 + 1000000007 ) % 1000000007 ;  $ }  $ long long multiply_mod ( long long a , long long b ) {  $ ~return ( a % 1000000007 * b % 1000000007 ) % 1000000007 ;  $ }  $ long long modInverse ( long long x , long long y ) {  $ ~long long res = 1 ;  $ ~x = x % 1000000007 ;  $ ~while ( y > 0 ) {  $ ~~if ( y & 1 ) res = ( res * x ) % 1000000007 ;  $ ~~y = y >> 1 ;  $ ~~x = ( x * x ) % 1000000007 ;  $ ~}  $ ~return res ;  $ }  $ long long divide_mod ( long long a , long long b ) {  $ ~return ( a * modInverse ( b , 1000000007 - 2 ) ) % 1000000007 ;  $ }  $ long long gcd ( long long a , long long b ) {  $ ~while ( b ) swap ( a %= b , b ) ;  $ ~return a ;  $ }  $ int main ( ) {  $ ~long long n , d ;  $ ~cin >> n >> d ;  $ ~vector < long long > nums ( n ) ;  $ ~long long cnt = 0 , t = 0 ;  $ ~;  $ ~for ( long long i = 0 ; i < n ; ++ i ) {  $ ~~cin >> nums [ i ] ;  $ ~~t += nums [ i ] ;  $ ~~if ( i < n - 1 ) t += 10 ;  $ ~~cnt += nums [ i ] ;  $ ~}  $ ~if ( t > d )  $ ~~cout << - 1 << endl ;  $ ~else  $ ~~cout << ( d - cnt ) / 5 << endl ;  $ }
int main ( ) {  $ ~int n , a , denied = 0 , client , single = 0 ;  $ ~int b ;  $ ~cin >> n >> a >> b ;  $ ~for ( int i = 0 ; i < n ; i ++ ) {  $ ~~cin >> client ;  $ ~~if ( client == 1 ) {  $ ~~~if ( a > 0 )  $ ~~~~a -- ;  $ ~~~else if ( b > 0 ) {  $ ~~~~b -- ;  $ ~~~~single ++ ;  $ ~~~} else if ( single > 0 )  $ ~~~~single -- ;  $ ~~~else  $ ~~~~denied ++ ;  $ ~~} else if ( b > 0 )  $ ~~~b -- ;  $ ~~else  $ ~~~denied += 2 ;  $ ~}  $ ~cout << denied << endl ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~long long n , m , k ;  $ ~cin >> n >> m >> k ;  $ ~if ( n - 1 + m - 1 < k ) {  $ ~~cout << - 1 << endl ;  $ ~~return 0 ;  $ ~}  $ ~if ( n < m ) swap ( n , m ) ;  $ ~long long maxx = 0 ;  $ ~maxx = max ( maxx , n / ( k + 1 ) * m ) ;  $ ~maxx = max ( maxx , m / ( k + 1 ) * n ) ;  $ ~if ( maxx != 0 ) {  $ ~~cout << maxx << endl ;  $ ~~return 0 ;  $ ~}  $ ~k = k - ( n - 1 ) ;  $ ~cout << m / ( k + 1 ) << endl ;  $ ~return 0 ;  $ }
int a [ 5 ] [ 5 ] ;  $ int b [ 10 ] , c [ 10 ] ;  $ int main ( ) {  $ ~int x = 1 ;  $ ~int n ;  $ ~cin >> n ;  $ ~memset ( a , - 1 , sizeof ( a ) ) ;  $ ~for ( int i = 1 ; i < 4 ; i ++ )  $ ~~for ( int j = 1 ; j < 4 ; j ++ ) { a [ i ] [ j ] = x ++ ; }  $ ~a [ 4 ] [ 2 ] = 0 ;  $ ~string s ;  $ ~cin >> s ;  $ ~int last = s [ 0 ] - '0' , coun = 0 ;  $ ~for ( int i = 1 ; i < s . size ( ) ; i ++ ) {  $ ~~int y = 0 , now = s [ i ] - '0' ;  $ ~~if ( last == 0 ) last = 11 ;  $ ~~if ( now == 0 ) now = 11 ;  $ ~~x = ( now + 2 ) / 3 - ( last + 2 ) / 3 ;  $ ~~y = now - x * 3 - last ;  $ ~~b [ i ] = x ;  $ ~~c [ i ] = y ;  $ ~~last = now ;  $ ~}  $ ~for ( int i = 1 ; i < 5 ; i ++ ) {  $ ~~for ( int j = 1 ; j < 5 ; j ++ ) {  $ ~~~if ( a [ i ] [ j ] == - 1 ) continue ;  $ ~~~int k = 1 ;  $ ~~~int newX , newY ;  $ ~~~newX = i , newY = j ;  $ ~~~for ( k = 1 ; k < n ; k ++ ) {  $ ~~~~newX += b [ k ] , newY += c [ k ] ;  $ ~~~~if ( newX < 0 || newX > 4 || newY < 0 || newY > 4 || a [ newX ] [ newY ] == - 1 ) break ;  $ ~~~}  $ ~~~if ( k == n ) coun ++ ;  $ ~~}  $ ~}  $ ~if ( coun > 1 )  $ ~~cout << "NO" << endl ;  $ ~else  $ ~~cout << "YES" << endl ;  $ ~return 0 ;  $ }
long long int power ( long long int x , long long int n , long long int m ) {  $ ~if ( n == 0 ) return 1 ;  $ ~if ( n == 1 ) return x ;  $ ~x %= m ;  $ ~if ( n % 2 ) return ( x * ( power ( ( x * x ) % m , n / 2 , m ) % m ) ) % m ;  $ ~return power ( ( x * x ) % m , n / 2 , m ) % m ;  $ }  $ int main ( ) {  $ ~long long int hy , ay , dy , hm , am , dm , h , a , d ;  $ ~cin >> hy >> ay >> dy >> hm >> am >> dm >> h >> a >> d ;  $ ~long long int ans = 1000000000000000 ;  $ ~for ( long long int atk = ay ; atk <= 200 ; atk ++ ) {  $ ~~for ( long long int def = dy ; def <= 100 ; def ++ ) {  $ ~~~if ( atk <= dm ) continue ;  $ ~~~long long int t = hm / ( atk - dm ) ;  $ ~~~if ( hm % ( atk - dm ) != 0 ) t ++ ;  $ ~~~long long int hr = t * ( max ( 0 LL , am - def ) ) + 1 ;  $ ~~~long long int cost = 0 ;  $ ~~~if ( hr > hy ) cost += ( hr - hy ) * h ;  $ ~~~if ( atk > ay ) cost += ( atk - ay ) * a ;  $ ~~~if ( def > dy ) cost += ( def - dy ) * d ;  $ ~~~if ( ans > cost ) { ans = cost ; }  $ ~~}  $ ~}  $ ~cout << ans << endl ;  $ }
int main ( ) {  $ ~int h , a , d , hp1 , atk1 , def1 , hp2 , atk2 , def2 ;  $ ~int i , j , k , diff , res ;  $ ~while ( cin >> hp1 >> atk1 >> def1 ) {  $ ~~cin >> hp2 >> atk2 >> def2 ;  $ ~~cin >> h >> a >> d ;  $ ~~int temp ;  $ ~~res = 100000000 ;  $ ~~for ( i = 0 ; i < 1001 ; i ++ ) {  $ ~~~for ( j = 0 ; j < 1001 ; j ++ ) {  $ ~~~~k = 0 ;  $ ~~~~temp = hp1 + i ;  $ ~~~~diff = ( atk1 + j ) - def2 ;  $ ~~~~if ( diff <= 0 ) continue ;  $ ~~~~if ( diff > hp2 ) {  $ ~~~~~k = temp - 1 ;  $ ~~~~} else {  $ ~~~~~k = hp2 / diff ;  $ ~~~~~k = temp / k ;  $ ~~~~~while ( 1 ) {  $ ~~~~~~if ( k <= 0 )  $ ~~~~~~~break ;  $ ~~~~~~else if ( ( temp / k ) + ( temp % k > 0 ) > ( hp2 / diff ) + ( hp2 % diff > 0 ) )  $ ~~~~~~~break ;  $ ~~~~~~k -- ;  $ ~~~~~}  $ ~~~~}  $ ~~~~temp = ( 0 < atk2 - def1 ? atk2 - def1 : 0 ) ;  $ ~~~~if ( k < temp )  $ ~~~~~k = temp - k ;  $ ~~~~else  $ ~~~~~k = 0 ;  $ ~~~~res = ( res > i * h + j * a + k * d ? i * h + j * a + k * d : res ) ;  $ ~~~}  $ ~~}  $ ~~cout << res << endl ;  $ ~}  $ ~return 0 ;  $ }
int main ( ) {  $ ~long long int i , n , m , j , a , count = 0 , c = 0 , last , have , sum = 0 , rest ;  $ ~cin >> n ;  $ ~for ( i = 0 ; i < n ; i ++ ) {  $ ~~cin >> a ;  $ ~~;  $ ~~if ( a == 0 )  $ ~~~c ++ ;  $ ~~else {  $ ~~~count ++ ;  $ ~~~sum += a ;  $ ~~}  $ ~}  $ ~if ( count / 9 != 0 && c > 0 ) {  $ ~~have = sum / 9 ;  $ ~~rest = have / 5 ;  $ ~~for ( i = 0 ; i < 9 * rest ; i ++ ) cout << 5 ;  $ ~~for ( i = 0 ; i < c ; i ++ ) cout << 0 ;  $ ~~cout << endl ;  $ ~} else if ( c > 0 )  $ ~~cout << 0 << endl ;  $ ~else  $ ~~cout << - 1 << endl ;  $ ~return 0 ;  $ }
long long int n , m , k , mn , mm ;  $ int main ( ) {  $ ~cin >> n >> m >> k ;  $ ~if ( n - 1 + m - 1 < k ) {  $ ~~cout << - 1 << endl ;  $ ~~return 0 ;  $ ~} else {  $ ~~if ( k > n - 1 ) {  $ ~~~mm = m / ( k - ( n - 1 ) + 1 ) ;  $ ~~} else {  $ ~~~mm = m * ( n / ( k + 1 ) ) ;  $ ~~}  $ ~~if ( k > m - 1 ) {  $ ~~~mn = n / ( k - ( m - 1 ) + 1 ) ;  $ ~~} else {  $ ~~~mn = n * ( m / ( k + 1 ) ) ;  $ ~~}  $ ~}  $ ~cout << max ( mn , mm ) << endl ;  $ }
int main ( ) {  $ ~int n , check = 0 ;  $ ~string s [ 1000 ] ;  $ ~cin >> n ;  $ ~for ( int i = 0 ; i < n ; i ++ ) cin >> s [ i ] ;  $ ~for ( int i = 0 ; i < n ; i ++ ) {  $ ~~{  $ ~~~for ( int j = 0 ; j < s [ i ] . length ( ) - 1 ; j ++ ) {  $ ~~~~if ( s [ i ] [ j ] == 'O' && s [ i ] [ j + 1 ] == 'O' ) {  $ ~~~~~s [ i ] [ j ] = '+' ;  $ ~~~~~s [ i ] [ j + 1 ] = '+' ;  $ ~~~~~check = 1 ;  $ ~~~~~break ;  $ ~~~~}  $ ~~~}  $ ~~}  $ ~~if ( check ) break ;  $ ~}  $ ~if ( check ) {  $ ~~cout << "YES\n" ;  $ ~~for ( int i = 0 ; i < n ; i ++ ) cout << s [ i ] << endl ;  $ ~} else  $ ~~cout << "NO\n" ;  $ ~return 0 ;  $ }
const int maxn = 5005 ;  $ int main ( ) {  $ ~int n , flag1 , flag2 , flag3 , flag4 ;  $ ~cin >> n ;  $ ~string str ;  $ ~cin >> str ;  $ ~flag1 = flag2 = flag3 = flag4 = 1 ;  $ ~for ( int i = 0 ; i < n ; i ++ ) {  $ ~~if ( str [ i ] == '1' || str [ i ] == '2' || str [ i ] == '3' ) flag1 = 0 ;  $ ~~if ( str [ i ] == '1' || str [ i ] == '4' || str [ i ] == '7' || str [ i ] == '0' ) flag2 = 0 ;  $ ~~if ( str [ i ] == '7' || str [ i ] == '9' || str [ i ] == '0' ) flag3 = 0 ;  $ ~~if ( str [ i ] == '6' || str [ i ] == '9' || str [ i ] == '3' || str [ i ] == '0' ) flag4 = 0 ;  $ ~}  $ ~if ( flag1 || flag2 || flag3 || flag4 )  $ ~~cout << "NO" << endl ;  $ ~else  $ ~~cout << "YES" << endl ;  $ ~return 0 ;  $ }
const int N = 101010 ;  $ int hp , atk , def ;  $ int hp1 , atk1 , def1 ;  $ int a , b , c ;  $ int main ( ) {  $ ~cin >> hp >> atk >> def ;  $ ~cin >> hp1 >> atk1 >> def1 ;  $ ~cin >> a >> b >> c ;  $ ~int cost = 99999999 ;  $ ~for ( int j = 0 ; j < ( 100 + 100 + 1 ) ; ++ j )  $ ~~for ( int k = 0 ; k < ( 100 + 1 ) ; ++ k ) {  $ ~~~if ( atk1 - def - k <= 0 ) {  $ ~~~~if ( atk + j - def1 > 0 )  $ ~~~~~cost = min ( b * j + c * k , cost ) ;  $ ~~~~else  $ ~~~~~continue ;  $ ~~~} else {  $ ~~~~int time = ceil ( hp1 * 1 . / ( 1 . * ( atk + j - def1 ) ) ) ;  $ ~~~~int time2 = ceil ( hp / ( atk1 - def - k ) ) ;  $ ~~~~if ( time < 0 ) continue ;  $ ~~~~if ( time2 > time ) {  $ ~~~~~cost = min ( b * j + c * k , cost ) ;  $ ~~~~} else {  $ ~~~~~int addhp = max ( 0 , ( time * ( atk1 - def - k ) ) + 1 - hp ) ;  $ ~~~~~cost = min ( cost , addhp * a + j * b + c * k ) ;  $ ~~~~}  $ ~~~}  $ ~~}  $ ~cout << cost << endl ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~int n ;  $ ~while ( cin >> n ) {  $ ~~string s ;  $ ~~cin >> s ;  $ ~~bool left , right , up , down ;  $ ~~left = right = up = down = false ;  $ ~~for ( int i = 0 ; i < s . length ( ) ; i ++ ) {  $ ~~~if ( s [ i ] == '1' || s [ i ] == '2' || s [ i ] == '3' ) up = true ;  $ ~~~if ( s [ i ] == '1' || s [ i ] == '4' || s [ i ] == '7' || s [ i ] == '0' ) left = true ;  $ ~~~if ( s [ i ] == '3' || s [ i ] == '6' || s [ i ] == '9' || s [ i ] == '0' ) right = true ;  $ ~~~if ( s [ i ] == '7' || s [ i ] == '0' || s [ i ] == '9' ) down = true ;  $ ~~}  $ ~~if ( up && down && left && right )  $ ~~~cout << "YES" << endl ;  $ ~~else  $ ~~~cout << "NO" << endl ;  $ ~}  $ }
void solve ( ) {  $ ~int n ;  $ ~cin >> n ;  $ ~vector < int > v ;  $ ~for ( int i = 0 ; i < n ; i ++ ) {  $ ~~int x ;  $ ~~cin >> x ;  $ ~~v . push_back ( x ) ;  $ ~}  $ ~sort ( v . begin ( ) , v . end ( ) ) ;  $ ~int i = 0 ;  $ ~int j = n - 1 ;  $ ~int ans = 0 ;  $ ~while ( 2 * v [ i ] < v [ j ] ) {  $ ~~if ( 2 * v [ i + 1 ] >= v [ j ] ) {  $ ~~~i ++ ;  $ ~~~ans ++ ;  $ ~~} else if ( 2 * v [ i ] >= v [ j - 1 ] ) {  $ ~~~j -- ;  $ ~~~ans ++ ;  $ ~~} else {  $ ~~~ans += 2 ;  $ ~~~i ++ ;  $ ~~~j -- ;  $ ~~}  $ ~}  $ ~cout << ans << endl ;  $ }  $ void solve2 ( ) {  $ ~int a , b , n ;  $ ~cin >> a >> b >> n ;  $ ~if ( a % b == 0 ) {  $ ~~cout << a ;  $ ~~for ( int i = 0 ; i < n ; i ++ ) { cout << 0 ; }  $ ~~cout << endl ;  $ ~~return ;  $ ~}  $ ~bool c = false ;  $ ~for ( int i = 0 ; i <= 9 ; i ++ ) {  $ ~~if ( ( a * 10 + i ) % b == 0 ) {  $ ~~~cout << a << i ;  $ ~~~c = true ;  $ ~~~break ;  $ ~~}  $ ~}  $ ~if ( c ) {  $ ~~for ( int i = 0 ; i < n - 1 ; i ++ ) { cout << 0 ; }  $ ~~cout << endl ;  $ ~} else  $ ~~cout << - 1 << endl ;  $ }  $ int main ( ) {  $ ~solve2 ( ) ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~unsigned long long n , m , k ;  $ ~cin >> n >> m >> k ;  $ ~if ( n > m ) swap ( n , m ) ;  $ ~if ( k < m )  $ ~~cout << max ( ( n / ( k + 1 ) ) * m , n * ( m / ( k + 1 ) ) ) << endl ;  $ ~else if ( k <= n + m - 2 )  $ ~~cout << ( n / ( k + 2 - m ) ) << endl ;  $ ~else  $ ~~cout << - 1 << endl ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~char ch [ 1009 ] [ 200 ] ;  $ ~int n , flag = 0 , i , j ;  $ ~cin >> n ;  $ ~for ( i = 1 ; i <= n ; i ++ ) {  $ ~~for ( j = 1 ; j <= 5 ; j ++ ) { cin >> ch [ i ] [ j ] ; }  $ ~}  $ ~for ( i = 1 ; i <= n ; i ++ ) {  $ ~~for ( j = 1 ; j < 5 ; j ++ ) {  $ ~~~if ( ch [ i ] [ j ] == 'O' && ch [ i ] [ j + 1 ] == 'O' ) {  $ ~~~~ch [ i ] [ j ] = '+' ;  $ ~~~~ch [ i ] [ j + 1 ] = '+' ;  $ ~~~~flag = 1 ;  $ ~~~~break ;  $ ~~~}  $ ~~}  $ ~~if ( flag == 1 ) break ;  $ ~}  $ ~if ( flag == 1 ) {  $ ~~cout << "YES" << endl ;  $ ~~for ( i = 1 ; i <= n ; i ++ ) {  $ ~~~for ( j = 1 ; j <= 5 ; j ++ ) { cout << ch [ i ] [ j ] ; }  $ ~~~cout << endl ;  $ ~~}  $ ~} else  $ ~~cout << "NO" << endl ;  $ }
int main ( ) {  $ ~int n , a , b , x , sum = 0 , c = 0 ;  $ ~cin >> n >> a >> b ;  $ ~for ( int i = 0 ; i < n ; i ++ ) {  $ ~~cin >> x ;  $ ~~if ( x == 1 ) {  $ ~~~if ( a )  $ ~~~~a -- ;  $ ~~~else if ( b ) {  $ ~~~~b -- ;  $ ~~~~c ++ ;  $ ~~~} else if ( c )  $ ~~~~c -- ;  $ ~~~else  $ ~~~~sum ++ ;  $ ~~} else {  $ ~~~if ( b )  $ ~~~~b -- ;  $ ~~~else  $ ~~~~sum += 2 ;  $ ~~}  $ ~}  $ ~cout << sum << endl ;  $ ~return 0 ;  $ }
map < char , char > mpu ;  $ vector < long long > vec [ 1000006 ] ;  $ int b [ 1000006 ] = { } , a [ 1000006 ] = { } ;  $ bool visit [ 1000006 ] = { } ;  $ int main ( ) {  $ ~string s ;  $ ~cin >> s ;  $ ~long long n , sum = 0 ;  $ ~n = s . size ( ) ;  $ ~vector < long long > v ;  $ ~for ( int i = 2 ; i <= n ; i ++ ) {  $ ~~bool t = 0 ;  $ ~~for ( int j = 2 ; j < i ; j ++ ) {  $ ~~~if ( i % j == 0 ) {  $ ~~~~t = 1 ;  $ ~~~~break ;  $ ~~~}  $ ~~}  $ ~~if ( t == 0 ) { v . push_back ( i ) ; }  $ ~}  $ ~int w [ 26 ] = { } ;  $ ~for ( int i = 0 ; i < s . size ( ) ; i ++ ) {  $ ~~int t = int ( s [ i ] - 'a' ) ;  $ ~~w [ t ] ++ ;  $ ~}  $ ~for ( int i = 0 ; i < v . size ( ) ; i ++ ) {  $ ~~if ( v [ i ] * 2 > n ) break ;  $ ~~for ( int k = v [ i ] ; k <= s . size ( ) ; k += v [ i ] ) {  $ ~~~if ( visit [ k - 1 ] == 1 ) continue ;  $ ~~~sum ++ ;  $ ~~~visit [ k - 1 ] = 1 ;  $ ~~}  $ ~}  $ ~if ( sum == 0 ) {  $ ~~cout << "YES\n" << s << endl ;  $ ~~return 0 ;  $ ~}  $ ~int p = - 1 ;  $ ~for ( int i = 0 ; i < 26 ; i ++ ) {  $ ~~if ( w [ i ] >= sum ) { p = i ; }  $ ~}  $ ~if ( p == - 1 ) {  $ ~~cout << "NO\n" ;  $ ~~return 0 ;  $ ~}  $ ~cout << "YES\n" ;  $ ~for ( int i = 0 ; i < n ; i ++ ) {  $ ~~if ( visit [ i ] == 1 ) {  $ ~~~s [ i ] = char ( p ) + 'a' ;  $ ~~~w [ p ] -- ;  $ ~~}  $ ~}  $ ~for ( int i = 0 ; i < n ; i ++ ) {  $ ~~if ( visit [ i ] == 1 ) continue ;  $ ~~for ( int j = 0 ; j < 26 ; j ++ ) {  $ ~~~if ( w [ j ] > 0 ) {  $ ~~~~s [ i ] = char ( j ) + 'a' ;  $ ~~~~w [ j ] -- ;  $ ~~~~break ;  $ ~~~}  $ ~~}  $ ~}  $ ~cout << s << endl ;  $ }
int main ( ) {  $ ~int a ;  $ ~cin >> a ;  $ ~string s ;  $ ~string sum ;  $ ~vector < string > v2 ;  $ ~bool check = false ;  $ ~for ( int i = 0 ; i < a ; i ++ ) {  $ ~~cin >> s ;  $ ~~for ( int j = 0 ; j < s . length ( ) ; j ++ ) {  $ ~~~if ( s [ j ] == 'O' && s [ j + 1 ] == 'O' && check == false ) {  $ ~~~~s [ j ] = '+' ;  $ ~~~~s [ j + 1 ] = '+' ;  $ ~~~~check = true ;  $ ~~~}  $ ~~~if ( check == true ) {  $ ~~~~sum = "YES" ;  $ ~~~} else  $ ~~~~sum = "NO" ;  $ ~~}  $ ~~v2 . push_back ( s ) ;  $ ~}  $ ~cout << sum << endl ;  $ ~for ( int i = 0 ; i < a ; i ++ ) {  $ ~~if ( sum == "YES" ) { cout << v2 [ i ] << endl ; }  $ ~}  $ ~return 0 ;  $ }
int main ( ) {  $ ~int N ;  $ ~cin >> N ;  $ ~char mat [ N + 1 ] [ N + 1 ] ;  $ ~vector < int > rows [ N + 1 ] , columns [ N + 1 ] ;  $ ~for ( int i = 1 ; i <= N ; i ++ ) {  $ ~~for ( int j = 1 ; j <= N ; j ++ ) {  $ ~~~cin >> mat [ i ] [ j ] ;  $ ~~~if ( mat [ i ] [ j ] != 'E' ) {  $ ~~~~rows [ i ] . push_back ( j ) ;  $ ~~~~columns [ j ] . push_back ( i ) ;  $ ~~~}  $ ~~}  $ ~}  $ ~bool rowFull = false , columnFull = false ;  $ ~for ( int i = 1 ; i <= N ; i ++ ) {  $ ~~if ( ! rows [ i ] . size ( ) ) rowFull = true ;  $ ~~if ( ! columns [ i ] . size ( ) ) columnFull = true ;  $ ~}  $ ~if ( rowFull && columnFull ) {  $ ~~cout << "-1" << endl ;  $ ~} else if ( rowFull ) {  $ ~~for ( int i = 1 ; i <= N ; i ++ ) { cout << columns [ i ] [ 0 ] << " " << i << endl ; }  $ ~} else {  $ ~~for ( int i = 1 ; i <= N ; i ++ ) { cout << i << " " << rows [ i ] [ 0 ] << endl ; }  $ ~}  $ ~return 0 ;  $ }
int main ( ) {  $ ~int n ;  $ ~cin >> n ;  $ ~char str [ 10000 ] ;  $ ~for ( int i = 0 ; i < n * 5 ; i ++ ) { cin >> str [ i ] ; }  $ ~int c = 0 ;  $ ~for ( int i = 0 ; i < n * 5 ; i ++ ) {  $ ~~if ( str [ i ] == 'O' && str [ i + 1 ] == 'O' ) {  $ ~~~if ( ( ( i + 1 ) % 5 ) ) {  $ ~~~~c = 1 ;  $ ~~~~str [ i ] = '+' ;  $ ~~~~str [ i + 1 ] = '+' ;  $ ~~~~break ;  $ ~~~}  $ ~~}  $ ~}  $ ~if ( c == 1 ) {  $ ~~cout << "YES" << endl ;  $ ~~for ( int i = 0 ; i < n * 5 ; i ++ ) {  $ ~~~cout << str [ i ] ;  $ ~~~if ( ( i + 1 ) % 5 == 0 ) cout << endl ;  $ ~~}  $ ~} else {  $ ~~cout << "NO" << endl ;  $ ~}  $ }
int main ( ) {  $ ~int n ;  $ ~bool ok = false ;  $ ~cin >> n ;  $ ~char seat [ n ] [ 5 ] ;  $ ~for ( int i = 0 ; i < n ; i ++ ) {  $ ~~cin >> seat [ i ] ;  $ ~~if ( ! ok ) {  $ ~~~for ( int j = 0 ; j < 5 ; j ++ ) {  $ ~~~~if ( seat [ i ] [ j ] == 'O' && seat [ i ] [ j + 1 ] == 'O' ) {  $ ~~~~~ok = true ;  $ ~~~~~seat [ i ] [ j ] = seat [ i ] [ j + 1 ] = '+' ;  $ ~~~~~ok = true ;  $ ~~~~~goto l ;  $ ~~~~}  $ ~~~}  $ ~~l : ;  $ ~~}  $ ~}  $ end :  $ ~if ( ok ) {  $ ~~cout << "YES" << endl ;  $ ~~for ( int i = 0 ; i < n ; i ++ ) {  $ ~~~for ( int j = 0 ; j < 5 ; j ++ ) { cout << seat [ i ] [ j ] ; }  $ ~~~cout << endl ;  $ ~~}  $ ~} else  $ ~~cout << "NO" << endl ;  $ }
int hp_y , atk_y , def_y ;  $ int hp_m , atk_m , def_m ;  $ int h , a , d ;  $ int main ( ) {  $ ~cin >> hp_y >> atk_y >> def_y ;  $ ~cin >> hp_m >> atk_m >> def_m ;  $ ~cin >> h >> a >> d ;  $ ~int ans = INT_MAX ;  $ ~for ( int i = atk_y ; i <= 200 ; i ++ ) {  $ ~~for ( int j = def_y ; j <= 200 ; j ++ ) {  $ ~~~int damage_y = max ( 0 , i - def_m ) ;  $ ~~~int damage_m = max ( 0 , atk_m - j ) ;  $ ~~~if ( damage_y == 0 ) { continue ; }  $ ~~~int turn = hp_m / damage_y ;  $ ~~~if ( hp_m % damage_y != 0 ) { turn ++ ; }  $ ~~~int hp_needed = max ( 0 , 1 - ( hp_y - damage_m * turn ) ) ;  $ ~~~ans = min ( ans , ( i - atk_y ) * a + ( j - def_y ) * d + hp_needed * h ) ;  $ ~~}  $ ~}  $ ~cout << ans << "\n" ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~long long int hy , ay , dy , hm , am , dm , h , a , d , cost = 1e12 ;  $ ~cin >> hy >> ay >> dy >> hm >> am >> dm >> h >> a >> d ;  $ ~double q = hm , z = ay , n = dm ;  $ ~double temp = q / ( z - n ) ;  $ ~for ( int i = max ( dm - ay + 1 , ( long long int ) 0 ) ; i <= 200 ; i ++ ) {  $ ~~for ( int j = 0 ; j <= 200 ; j ++ ) {  $ ~~~long long int v = ( ( hm - 1 ) / ( ay - dm + i ) ) + 1 ;  $ ~~~long long int p = max ( ( long long int ) 0 , am - dy - j ) ;  $ ~~~long long int req = max ( v * p + 1 - hy , ( long long int ) 0 ) ;  $ ~~~cost = min ( cost , req * h + i * a + j * d ) ;  $ ~~}  $ ~}  $ ~cout << cost << endl ;  $ ~return 0 ;  $ }
long long n , m , k ;  $ long long ans , a , b ;  $ int main ( ) {  $ ~cin >> n >> m >> k ;  $ ~ans = 0 ;  $ ~if ( k > n + m - 2 ) {  $ ~~puts ( "-1" ) ;  $ ~~return 0 ;  $ ~}  $ ~for ( int i = 1 ; i <= sqrt ( n ) && i <= k + 1 ; i ++ )  $ ~~if ( n % i == 0 ) {  $ ~~~a = i - 1 ;  $ ~~~b = k - a ;  $ ~~~ans = max ( ans , ( long long ) ( n / ( a + 1 ) ) * ( long long ) ( m / ( b + 1 ) ) ) ;  $ ~~~a = ( n / i ) - 1 ;  $ ~~~if ( a > k ) continue ;  $ ~~~b = k - a ;  $ ~~~ans = max ( ans , ( long long ) ( n / ( a + 1 ) ) * ( long long ) ( m / ( b + 1 ) ) ) ;  $ ~~}  $ ~for ( int i = 1 ; i <= sqrt ( m ) && i <= k + 1 ; i ++ )  $ ~~if ( n % i == 0 ) {  $ ~~~b = i - 1 ;  $ ~~~a = k - b ;  $ ~~~ans = max ( ans , ( long long ) ( n / ( a + 1 ) ) * ( long long ) ( m / ( b + 1 ) ) ) ;  $ ~~~b = ( m / i ) - 1 ;  $ ~~~if ( b > k ) continue ;  $ ~~~a = k - b ;  $ ~~~ans = max ( ans , ( long long ) ( n / ( a + 1 ) ) * ( long long ) ( m / ( b + 1 ) ) ) ;  $ ~~}  $ ~cout << ans << endl ;  $ ~return 0 ;  $ }
int n , i , c = 0 ;  $ string s , ch [ 1001 ] ;  $ int main ( ) {  $ ~cin >> n ;  $ ~for ( i = 0 ; i < n ; i ++ ) {  $ ~~cin >> s ;  $ ~~if ( s [ 0 ] == 'O' && s [ 1 ] == 'O' && c == 0 ) {  $ ~~~s [ 0 ] = '+' ;  $ ~~~s [ 1 ] = '+' ;  $ ~~~c = 1 ;  $ ~~} else if ( s [ 3 ] == 'O' && s [ 4 ] == 'O' && c == 0 ) {  $ ~~~s [ 3 ] = '+' ;  $ ~~~s [ 4 ] = '+' ;  $ ~~~c = 1 ;  $ ~~}  $ ~~ch [ i ] = s ;  $ ~}  $ ~if ( c == 1 ) {  $ ~~cout << "YES" << endl ;  $ ~~for ( i = 0 ; i < n ; i ++ ) { cout << ch [ i ] << endl ; }  $ ~} else  $ ~~cout << "NO" << endl ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~int x [ 10 ] = { 3 , 0 , 0 , 0 , 1 , 1 , 1 , 2 , 2 , 2 } ;  $ ~int y [ 10 ] = { 1 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 } ;  $ ~int p [ 4 ] [ 3 ] = { } ;  $ ~int n ;  $ ~cin >> n ;  $ ~string a ;  $ ~cin >> a ;  $ ~int check = 0 ;  $ ~for ( int i = 0 ; i < n ; i ++ ) {  $ ~~int z = ( int ) a [ i ] - 48 ;  $ ~~int xx = x [ z ] ;  $ ~~int yy = y [ z ] ;  $ ~~p [ xx ] [ yy ] = 1 ;  $ ~}  $ ~int ans = 1 ;  $ ~int xxx [ 4 ] = { 1 , - 1 , 0 , 0 } ;  $ ~int yyy [ 4 ] = { 0 , 0 , 1 , - 1 } ;  $ ~for ( int i = 0 ; i < 4 ; i ++ ) {  $ ~~int check = 0 ;  $ ~~for ( int j = 0 ; j < 4 ; j ++ ) {  $ ~~~for ( int k = 0 ; k < 3 ; k ++ ) {  $ ~~~~if ( p [ j ] [ k ] == 1 ) {  $ ~~~~~if ( j == 2 && k == 1 && i == 0 ) {  $ ~~~~~~if ( j + xxx [ i ] >= 0 && j + xxx [ i ] < 4 && k + yyy [ i ] >= 0 && k + yyy [ i ] < 3 ) {  $ ~~~~~~} else {  $ ~~~~~~~check = 1 ;  $ ~~~~~~}  $ ~~~~~} else if ( ( j < 3 ) || ( j == 3 && k == 1 ) ) {  $ ~~~~~~if ( j + xxx [ i ] >= 0 && j + xxx [ i ] < 3 && k + yyy [ i ] >= 0 && k + yyy [ i ] < 3 ) {  $ ~~~~~~} else {  $ ~~~~~~~check = 1 ;  $ ~~~~~~}  $ ~~~~~}  $ ~~~~}  $ ~~~}  $ ~~}  $ ~~if ( check == 0 ) ans = 0 ;  $ ~}  $ ~if ( ans == 0 )  $ ~~cout << "NO" << endl ;  $ ~else  $ ~~cout << "YES" << endl ;  $ }
int y [ 5 ] , m [ 5 ] , s [ 5 ] ;  $ int ans , atkm , atky , mm , my , j , i , sum ;  $ int main ( ) {  $ ~for ( i = 1 ; i <= 3 ; i ++ ) { cin >> y [ i ] ; }  $ ~for ( i = 1 ; i <= 3 ; i ++ ) { cin >> m [ i ] ; }  $ ~for ( i = 1 ; i <= 3 ; i ++ ) { cin >> s [ i ] ; }  $ ~ans = 999999 ;  $ ~for ( i = 0 ; i <= 200 ; i ++ ) {  $ ~~for ( j = 0 ; j <= 200 ; j ++ ) {  $ ~~~sum = s [ 3 ] * j + s [ 2 ] * i ;  $ ~~~atky = i + y [ 2 ] - m [ 3 ] ;  $ ~~~atkm = m [ 2 ] - j - y [ 3 ] ;  $ ~~~if ( atky <= 0 ) { continue ; }  $ ~~~if ( atkm <= 0 ) {  $ ~~~~ans = min ( ans , sum ) ;  $ ~~~~continue ;  $ ~~~}  $ ~~~if ( m [ 1 ] % atky != 0 ) {  $ ~~~~mm = m [ 1 ] / atky + 1 ;  $ ~~~} else {  $ ~~~~mm = m [ 1 ] / atky ;  $ ~~~}  $ ~~~if ( y [ 1 ] % atkm != 0 ) {  $ ~~~~my = y [ 1 ] / atkm + 1 ;  $ ~~~} else {  $ ~~~~my = y [ 1 ] / atkm ;  $ ~~~}  $ ~~~if ( my <= mm ) { sum += ( mm * atkm + 1 - y [ 1 ] ) * s [ 1 ] ; }  $ ~~~ans = min ( ans , sum ) ;  $ ~~}  $ ~}  $ ~cout << ans << endl ;  $ }
int power ( int a , int x ) {  $ ~if ( x == 0 ) return 1 ;  $ ~if ( x == 1 ) return a ;  $ ~return power ( a , x / 2 ) * power ( a , x / 2 ) * power ( a , x % 2 ) ;  $ }  $ int digitLen ( int x ) {  $ ~if ( x == 0 ) return 1 ;  $ ~int cnt = 0 ;  $ ~while ( x ) {  $ ~~x /= 10 ;  $ ~~cnt ++ ;  $ ~}  $ ~return cnt ;  $ }  $ string generate ( int a ) {  $ ~string s = "" ;  $ ~while ( a ) {  $ ~~s += ( a % 10 ) + '0' ;  $ ~~a /= 10 ;  $ ~}  $ ~reverse ( s . begin ( ) , s . end ( ) ) ;  $ ~return s ;  $ }  $ int main ( ) {  $ ~int a , b , n ;  $ ~cin >> a >> b >> n ;  $ ~string s = generate ( a ) ;  $ ~bool can = false ;  $ ~for ( int i = 0 ; i <= 9 ; i ++ ) {  $ ~~if ( ( a * power ( 10 , 1 ) + i ) % b == 0 ) {  $ ~~~s += string ( 1 , i + '0' ) ;  $ ~~~can = true ;  $ ~~~break ;  $ ~~}  $ ~}  $ ~if ( ! can ) {  $ ~~cout << - 1 << endl ;  $ ~~return 0 ;  $ ~}  $ ~for ( int i = 0 ; i < n - 1 ; i ++ ) { s += "0" ; }  $ ~cout << s << endl ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~int n , d , i , sum = 0 , l = 0 ;  $ ~cin >> n >> d ;  $ ~int a [ n ] ;  $ ~for ( i = 0 ; i < n ; i ++ ) {  $ ~~cin >> a [ i ] ;  $ ~~sum += a [ i ] ;  $ ~}  $ ~if ( sum + 10 * ( n - 1 ) > d )  $ ~~cout << - 1 << endl ;  $ ~else  $ ~~cout << ( d - sum ) / 5 << endl ;  $ }
char a [ 105 ] ;  $ int n ;  $ int check ( ) {  $ ~int up = 0 , left = 0 , down = 0 , right = 0 ;  $ ~cin >> a ;  $ ~for ( int i = 0 ; i < n ; i ++ ) {  $ ~~if ( a [ i ] == '1' || a [ i ] == '2' || a [ i ] == '3' ) up = 1 ;  $ ~~if ( a [ i ] == '1' || a [ i ] == '4' || a [ i ] == '7' || a [ i ] == '0' ) left = 1 ;  $ ~~if ( a [ i ] == '7' || a [ i ] == '9' || a [ i ] == '0' ) down = 1 ;  $ ~~if ( a [ i ] == '3' || a [ i ] == '6' || a [ i ] == '9' || a [ i ] == '0' ) right = 1 ;  $ ~}  $ ~if ( up && down && left && right ) return 1 ;  $ ~return 0 ;  $ }  $ int main ( ) {  $ ~cin >> n ;  $ ~if ( check ( ) )  $ ~~cout << "YES" << endl ;  $ ~else  $ ~~cout << "NO" << endl ;  $ }
const long long N = 1001 ;  $ int n ;  $ string s [ N ] ;  $ int main ( ) {  $ ~cin >> n ;  $ ~bool ok = 0 ;  $ ~for ( int i = 0 ; i < n ; ++ i ) {  $ ~~cin >> s [ i ] ;  $ ~~if ( ! ok and s [ i ] [ 0 ] == s [ i ] [ 1 ] and s [ i ] [ 0 ] == 'O' ) {  $ ~~~ok = 1 ;  $ ~~~s [ i ] [ 0 ] = '+' ;  $ ~~~s [ i ] [ 1 ] = '+' ;  $ ~~}  $ ~~if ( ! ok and s [ i ] [ 3 ] == s [ i ] [ 4 ] and s [ i ] [ 3 ] == 'O' ) {  $ ~~~ok = 1 ;  $ ~~~s [ i ] [ 3 ] = '+' ;  $ ~~~s [ i ] [ 4 ] = '+' ;  $ ~~}  $ ~}  $ ~if ( ok ) {  $ ~~cout << "YES" << endl ;  $ ~~for ( int i = 0 ; i < n ; ++ i ) { cout << s [ i ] << endl ; }  $ ~} else {  $ ~~cout << "NO" << endl ;  $ ~}  $ ~return 0 ;  $ }
long long p = 998244353 ;  $ long long ans = 0 ;  $ int read ( ) {  $ ~int x = 0 , f = 1 ;  $ ~char c = getchar ( ) ;  $ ~while ( c < '0' || c > '9' ) {  $ ~~if ( c == '-' ) f = - 1 ;  $ ~~c = getchar ( ) ;  $ ~}  $ ~while ( c >= '0' && c <= '9' ) x = ( x << 1 ) + ( x << 3 ) + ( c ^ 48 ) , c = getchar ( ) ;  $ ~return x * f ;  $ }  $ int main ( ) {  $ ~long long n , m ;  $ ~cin >> n >> m ;  $ ~int dig_n = 0 , dig_m = 0 ;  $ ~long long a = n - 1 , b = m - 1 ;  $ ~int count_n [ 7 ] , count_m [ 7 ] ;  $ ~int ans = 0 ;  $ ~memset ( count_n , 0 , sizeof ( count_n ) ) ;  $ ~memset ( count_m , 0 , sizeof ( count_m ) ) ;  $ ~while ( a != 0 ) {  $ ~~a = a / 7 ;  $ ~~dig_n ++ ;  $ ~}  $ ~while ( b != 0 ) {  $ ~~b = b / 7 ;  $ ~~dig_m ++ ;  $ ~}  $ ~if ( n == 1 ) dig_n = 1 ;  $ ~if ( m == 1 ) dig_m = 1 ;  $ ~if ( dig_n + dig_m > 7 )  $ ~~cout << 0 << endl ;  $ ~else {  $ ~~for ( long long i = 0 ; i <= n - 1 ; i ++ ) {  $ ~~~memset ( count_n , 0 , sizeof ( count_n ) ) ;  $ ~~~a = i ;  $ ~~~int ch = 0 ;  $ ~~~int count = 0 ;  $ ~~~while ( count < dig_n ) {  $ ~~~~int r = a % 7 ;  $ ~~~~a = a / 7 ;  $ ~~~~if ( count_n [ r ] != 0 ) {  $ ~~~~~ch = 1 ;  $ ~~~~~break ;  $ ~~~~} else  $ ~~~~~count_n [ r ] = 1 ;  $ ~~~~count ++ ;  $ ~~~}  $ ~~~if ( ch == 1 ) continue ;  $ ~~~for ( long long j = 0 ; j <= m - 1 ; j ++ ) {  $ ~~~~memset ( count_m , 0 , sizeof ( count_m ) ) ;  $ ~~~~b = j ;  $ ~~~~int ch = 0 ;  $ ~~~~int count = 0 ;  $ ~~~~while ( count < dig_m ) {  $ ~~~~~int r = b % 7 ;  $ ~~~~~b = b / 7 ;  $ ~~~~~if ( count_n [ r ] != 0 || count_m [ r ] != 0 ) {  $ ~~~~~~ch = 1 ;  $ ~~~~~~break ;  $ ~~~~~} else  $ ~~~~~~count_m [ r ] = 1 ;  $ ~~~~~count ++ ;  $ ~~~~}  $ ~~~~if ( ch == 1 )  $ ~~~~~continue ;  $ ~~~~else {  $ ~~~~~ans ++ ;  $ ~~~~}  $ ~~~}  $ ~~}  $ ~~cout << ans << endl ;  $ ~}  $ ~return 0 ;  $ }
const int M = 1e9 + 7 ;  $ long long solve ( long long n , long long m , long long k ) {  $ ~if ( k > m + n - 2 )  $ ~~return - 1 ;  $ ~else if ( k < n ) {  $ ~~return n / ( k + 1 ) * m ;  $ ~} else {  $ ~~k -= n - 1 ;  $ ~~return m / ( k + 1 ) ;  $ ~}  $ }  $ int main ( ) {  $ ~long long n , m , k ;  $ ~while ( cin >> n >> m >> k ) { cout << max ( solve ( n , m , k ) , solve ( m , n , k ) ) << endl ; }  $ }
int main ( ) {  $ ~string a ;  $ ~cin >> a ;  $ ~int n = ( int ) a . size ( ) ;  $ ~if ( n <= 3 ) {  $ ~~cout << "YES" << '\n' ;  $ ~~cout << a << '\n' ;  $ ~~return 0 ;  $ ~}  $ ~vector < int > f ( 26 ) ;  $ ~for ( int i = 0 ; i < n ; i ++ ) f [ a [ i ] - 'a' ] ++ ;  $ ~vector < char > ans ( n + 1 ) ;  $ ~vector < bool > flags ( n + 1 ) ;  $ ~for ( int i = 2 ; i <= n ; i += 2 ) flags [ i ] = true ;  $ ~for ( int i = 3 ; i <= n ; i ++ ) {  $ ~~if ( ! flags [ i ] && i * 2 <= n ) {  $ ~~~for ( int j = i ; j <= n ; j += i ) flags [ j ] = true ;  $ ~~}  $ ~}  $ ~int cont = 0 ;  $ ~for ( int i = 1 ; i <= n ; i ++ ) cont += flags [ i ] ;  $ ~int most = - 1 , pos = - 1 ;  $ ~for ( int i = 0 ; i < 26 ; i ++ )  $ ~~if ( f [ i ] > most ) {  $ ~~~most = f [ i ] ;  $ ~~~pos = i ;  $ ~~}  $ ~if ( most < cont ) {  $ ~~cout << "NO" << '\n' ;  $ ~~return 0 ;  $ ~}  $ ~f [ pos ] -= cont ;  $ ~for ( int i = 1 ; i <= n ; i ++ )  $ ~~if ( flags [ i ] ) ans [ i ] = ( char ) ( pos + 'a' ) ;  $ ~for ( int i = 1 ; i <= n ; i ++ ) {  $ ~~if ( ! flags [ i ] ) {  $ ~~~for ( int j = 0 ; j < 26 ; j ++ ) {  $ ~~~~if ( f [ j ] > 0 ) {  $ ~~~~~f [ j ] -- ;  $ ~~~~~ans [ i ] = ( char ) ( j + 'a' ) ;  $ ~~~~~flags [ i ] = true ;  $ ~~~~~break ;  $ ~~~~}  $ ~~~}  $ ~~}  $ ~}  $ ~for ( int i = 1 ; i <= n ; i ++ ) {  $ ~~if ( ! flags [ i ] ) {  $ ~~~cout << "NO" << '\n' ;  $ ~~~return 0 ;  $ ~~}  $ ~}  $ ~cout << "YES" << '\n' ;  $ ~for ( int i = 1 ; i <= n ; i ++ ) cout << ans [ i ] ;  $ ~cout << '\n' ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~int h1 , a1 , d1 , h2 , a2 , d2 , h , a , d ;  $ ~cin >> h1 >> a1 >> d1 >> h2 >> a2 >> d2 >> h >> a >> d ;  $ ~int min_val = 1000000000 ;  $ ~for ( int i = 0 ; i <= 200 ; i ++ ) {  $ ~~for ( int j = 0 ; j <= 100 ; j ++ ) {  $ ~~~int a_n = a1 + i ;  $ ~~~int d_n = d1 + j ;  $ ~~~if ( a_n <= d2 ) { continue ; }  $ ~~~int t = ( h2 - ( d2 - a_n + 1 ) ) / ( a_n - d2 ) ;  $ ~~~int new_pwr = t * max ( 0 , a2 - d_n ) + 1 ;  $ ~~~min_val = min ( min_val , i * a + j * d + max ( 0 , new_pwr - h1 ) * h ) ;  $ ~~}  $ ~}  $ ~cout << min_val << endl ;  $ }
void solve ( ) {  $ ~int n ;  $ ~cin >> n ;  $ ~vector < int > v ;  $ ~for ( int i = 0 ; i < n ; i ++ ) {  $ ~~int x ;  $ ~~cin >> x ;  $ ~~v . push_back ( x ) ;  $ ~}  $ ~sort ( v . begin ( ) , v . end ( ) ) ;  $ ~int i = 0 ;  $ ~int j = n - 1 ;  $ ~int ans = 0 ;  $ ~while ( 2 * v [ i ] < v [ j ] ) {  $ ~~if ( 2 * v [ i + 1 ] >= v [ j ] ) {  $ ~~~i ++ ;  $ ~~~ans ++ ;  $ ~~} else if ( 2 * v [ i ] >= v [ j - 1 ] ) {  $ ~~~j -- ;  $ ~~~ans ++ ;  $ ~~} else {  $ ~~~ans += 2 ;  $ ~~~i ++ ;  $ ~~~j -- ;  $ ~~}  $ ~}  $ ~cout << ans << endl ;  $ }  $ void solve2 ( ) {  $ ~int a , b , n ;  $ ~cin >> a >> b >> n ;  $ ~if ( a % b == 0 ) {  $ ~~cout << a ;  $ ~~for ( int i = 0 ; i < n ; i ++ ) { cout << 0 ; }  $ ~~cout << endl ;  $ ~~return ;  $ ~}  $ ~bool c = false ;  $ ~for ( int i = 0 ; i <= 9 ; i ++ ) {  $ ~~if ( ( a * 10 + i ) % b == 0 ) {  $ ~~~cout << a << i ;  $ ~~~c = true ;  $ ~~~break ;  $ ~~}  $ ~}  $ ~if ( c ) {  $ ~~for ( int i = 0 ; i < n - 1 ; i ++ ) { cout << 0 ; }  $ ~~cout << endl ;  $ ~} else  $ ~~cout << - 1 << endl ;  $ }  $ int main ( ) {  $ ~solve2 ( ) ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~int n , a , b , p ;  $ ~while ( cin >> n >> a >> b ) {  $ ~~int r1 = 0 , r2 = 0 ;  $ ~~for ( int i = 0 ; i < n ; i ++ ) {  $ ~~~cin >> p ;  $ ~~~if ( p == 1 ) {  $ ~~~~if ( a > 0 ) {  $ ~~~~~a -- ;  $ ~~~~} else {  $ ~~~~~if ( b > 0 ) {  $ ~~~~~~b -- ;  $ ~~~~~~r1 ++ ;  $ ~~~~~} else if ( r1 > 0 )  $ ~~~~~~r1 -- ;  $ ~~~~~else  $ ~~~~~~r2 ++ ;  $ ~~~~}  $ ~~~} else {  $ ~~~~if ( b > 0 )  $ ~~~~~b -- ;  $ ~~~~else  $ ~~~~~r2 += 2 ;  $ ~~~}  $ ~~}  $ ~~cout << r2 << endl ;  $ ~}  $ ~return 0 ;  $ }
int main ( ) {  $ ~int n ;  $ ~cin >> n ;  $ ~char s [ 1000 ] [ 20 ] ;  $ ~for ( int i = 0 ; i < n ; i ++ ) {  $ ~~for ( int j = 0 ; j < 5 ; j ++ ) { cin >> s [ i ] [ j ] ; }  $ ~}  $ ~for ( int i = 0 ; i < n ; i ++ ) {  $ ~~if ( s [ i ] [ 0 ] == 'O' && s [ i ] [ 1 ] == 'O' ) {  $ ~~~s [ i ] [ 0 ] = '+' ;  $ ~~~s [ i ] [ 1 ] = '+' ;  $ ~~~cout << "YES\n" ;  $ ~~~for ( int j = 0 ; j < n ; j ++ ) {  $ ~~~~for ( int k = 0 ; k < 5 ; k ++ ) { cout << s [ j ] [ k ] ; }  $ ~~~~cout << endl ;  $ ~~~}  $ ~~~return 0 ;  $ ~~}  $ ~~if ( s [ i ] [ 3 ] == 'O' && s [ i ] [ 4 ] == 'O' ) {  $ ~~~s [ i ] [ 3 ] = '+' ;  $ ~~~s [ i ] [ 4 ] = '+' ;  $ ~~~cout << "YES\n" ;  $ ~~~for ( int j = 0 ; j < n ; j ++ ) {  $ ~~~~for ( int k = 0 ; k < 5 ; k ++ ) { cout << s [ j ] [ k ] ; }  $ ~~~~cout << endl ;  $ ~~~}  $ ~~~return 0 ;  $ ~~}  $ ~}  $ ~cout << "NO\n" ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~int n ;  $ ~int a [ 1005 ] ;  $ ~int num5 , num0 , flag ;  $ ~while ( cin >> n ) {  $ ~~num5 = 0 ;  $ ~~num0 = 0 ;  $ ~~for ( int i = 0 ; i < n ; i ++ ) {  $ ~~~cin >> a [ i ] ;  $ ~~~if ( a [ i ] == 5 )  $ ~~~~num5 ++ ;  $ ~~~else if ( a [ i ] == 0 )  $ ~~~~num0 ++ ;  $ ~~}  $ ~~flag = num5 / 9 ;  $ ~~if ( ! num0 )  $ ~~~cout << "-1" << endl ;  $ ~~else {  $ ~~~if ( flag ) {  $ ~~~~for ( int i = 0 ; i < flag * 9 ; i ++ ) cout << "5" ;  $ ~~~~for ( int i = 0 ; i < num0 ; i ++ ) cout << "0" ;  $ ~~~} else  $ ~~~~cout << "0" ;  $ ~~~cout << endl ;  $ ~~}  $ ~}  $ ~return 0 ;  $ }
int main ( ) {  $ ~int a , b , n , k = 0 , i ;  $ ~cin >> a >> b >> n ;  $ ~string s ( n - 1 , '0' ) ;  $ ~for ( i = 0 ; i < 10 ; ++ i ) {  $ ~~if ( ( a * 10 + i ) % b == 0 ) {  $ ~~~k = 1 ;  $ ~~~break ;  $ ~~}  $ ~}  $ ~if ( k != 1 ) {  $ ~~cout << - 1 << endl ;  $ ~~return 0 ;  $ ~} else {  $ ~~cout << a * 10 + i ;  $ ~~cout << s << endl ;  $ ~}  $ ~return 0 ;  $ }
const int MAXN = 1001 ;  $ int n ;  $ char s [ MAXN ] ;  $ int c [ 256 ] = { 0 } ;  $ bool f [ MAXN ] ;  $ int main ( ) {  $ ~gets ( s ) ;  $ ~n = strlen ( s ) ;  $ ~memset ( c , sizeof ( c ) , 0 ) ;  $ ~for ( int i = 0 ; i < n ; i ++ ) c [ s [ i ] ] ++ ;  $ ~int k = 0 ;  $ ~for ( int i = 0 ; i < 256 ; i ++ )  $ ~~if ( c [ i ] > c [ k ] ) k = i ;  $ ~memset ( f , true , sizeof ( f ) ) ;  $ ~for ( int i = 2 ; i * i <= n ; i ++ )  $ ~~if ( f [ i ] )  $ ~~~for ( int j = i * i ; j <= n ; j += i ) f [ j ] = false ;  $ ~f [ 1 ] = true ;  $ ~for ( int i = 2 ; i + i <= n ; i ++ ) f [ i ] = false ;  $ ~for ( int i = 1 ; i <= n ; i ++ )  $ ~~if ( ! f [ i ] ) {  $ ~~~if ( c [ k ] == 0 ) {  $ ~~~~cout << "NO" << endl ;  $ ~~~~return 0 ;  $ ~~~}  $ ~~~c [ s [ i - 1 ] = k ] -- ;  $ ~~}  $ ~k = 0 ;  $ ~for ( int i = 1 ; i <= n ; i ++ )  $ ~~if ( f [ i ] ) {  $ ~~~while ( c [ k ] == 0 ) k ++ ;  $ ~~~c [ s [ i - 1 ] = k ] -- ;  $ ~~}  $ ~cout << "YES" << endl ;  $ ~cout << s << endl ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~int n , d , t ;  $ ~int a [ 1000 ] ;  $ ~cin >> n >> d ;  $ ~int jokes = 0 ;  $ ~int mint = 0 ;  $ ~int restBetween = ( n - 1 ) * 10 ;  $ ~for ( int i = 0 ; i < n ; i ++ ) {  $ ~~cin >> a [ i ] ;  $ ~~mint += a [ i ] ;  $ ~}  $ ~if ( mint + restBetween <= d ) {  $ ~~int rem = d - ( mint + restBetween ) ;  $ ~~cout << restBetween / 5 + rem / 5 << endl ;  $ ~} else {  $ ~~cout << - 1 << endl ;  $ ~}  $ ~return 0 ;  $ }
int main ( ) {  $ ~int n ;  $ ~cin >> n ;  $ ~char a [ n + 10 ] [ 10 ] ;  $ ~for ( int i = 0 ; i < n ; i ++ ) {  $ ~~for ( int j = 0 ; j < 5 ; j ++ ) { cin >> a [ i ] [ j ] ; }  $ ~}  $ ~int flag = 0 ;  $ ~for ( int i = 0 ; i < n ; i ++ ) {  $ ~~if ( a [ i ] [ 0 ] == 'O' && a [ i ] [ 1 ] == 'O' ) {  $ ~~~a [ i ] [ 0 ] = '+' ;  $ ~~~a [ i ] [ 1 ] = '+' ;  $ ~~~flag = 1 ;  $ ~~~break ;  $ ~~} else if ( a [ i ] [ 3 ] == 'O' && a [ i ] [ 4 ] == 'O' ) {  $ ~~~a [ i ] [ 3 ] = '+' ;  $ ~~~a [ i ] [ 4 ] = '+' ;  $ ~~~flag = 1 ;  $ ~~~break ;  $ ~~}  $ ~}  $ ~if ( flag == 1 ) {  $ ~~cout << "YES" << endl ;  $ ~~for ( int i = 0 ; i < n ; i ++ ) {  $ ~~~for ( int j = 0 ; j < 5 ; j ++ ) cout << a [ i ] [ j ] ;  $ ~~~cout << endl ;  $ ~~}  $ ~} else  $ ~~cout << "NO" << endl ;  $ ~return 0 ;  $ }
const int inf = 0 x3f3f3f3f ;  $ const double pi = acos ( - 1.0 ) ;  $ int main ( ) {  $ ~long long a , b , c ;  $ ~cin >> a >> b >> c ;  $ ~if ( a + b - 2 < c )  $ ~~cout << - 1 << endl ;  $ ~else {  $ ~~if ( a > b ) swap ( a , b ) ;  $ ~~if ( a % ( c + 1 ) == 0 || b % ( c + 1 ) == 0 ) {  $ ~~~cout << a * b / ( c + 1 ) << endl ;  $ ~~} else {  $ ~~~if ( b - 1 >= c ) {  $ ~~~~if ( a - 1 >= c )  $ ~~~~~cout << max ( b / ( c + 1 ) * a , a / ( c + 1 ) * b ) << endl ;  $ ~~~~else  $ ~~~~~cout << b / ( c + 1 ) * a << endl ;  $ ~~~} else {  $ ~~~~cout << a / ( c - b + 1 + 1 ) << endl ;  $ ~~~}  $ ~~}  $ ~}  $ ~return 0 ;  $ }
int main ( ) {  $ ~int n , i , ct = 0 ;  $ ~char ch [ 100 ] ;  $ ~cin >> n ;  $ ~string arr [ 1010 ] ;  $ ~for ( i = 0 ; i < n ; i ++ ) {  $ ~~cin >> ch ;  $ ~~if ( ct == 0 ) {  $ ~~~if ( ch [ 0 ] == 'O' && ch [ 1 ] == 'O' ) {  $ ~~~~ch [ 0 ] = '+' ;  $ ~~~~ch [ 1 ] = '+' ;  $ ~~~~ct = 1 ;  $ ~~~}  $ ~~}  $ ~~if ( ct == 0 ) {  $ ~~~if ( ch [ 3 ] == 'O' && ch [ 4 ] == 'O' ) {  $ ~~~~ch [ 3 ] = '+' ;  $ ~~~~ch [ 4 ] = '+' ;  $ ~~~~ct = 1 ;  $ ~~~}  $ ~~}  $ ~~arr [ i ] = ch ;  $ ~}  $ ~if ( ct == 1 ) {  $ ~~cout << "YES" << endl ;  $ ~~for ( i = 0 ; i < n ; i ++ ) { cout << arr [ i ] << endl ; }  $ ~} else {  $ ~~cout << "NO" << endl ;  $ ~}  $ ~return 0 ;  $ }
int y [ 5 ] , m [ 5 ] , s [ 5 ] ;  $ int ans , atkm , atky , mm , my , j , i , sum ;  $ int main ( ) {  $ ~for ( i = 1 ; i <= 3 ; i ++ ) { cin >> y [ i ] ; }  $ ~for ( i = 1 ; i <= 3 ; i ++ ) { cin >> m [ i ] ; }  $ ~for ( i = 1 ; i <= 3 ; i ++ ) { cin >> s [ i ] ; }  $ ~ans = 999999 ;  $ ~for ( i = 0 ; i <= 200 ; i ++ ) {  $ ~~for ( j = 0 ; j <= 200 ; j ++ ) {  $ ~~~sum = s [ 3 ] * j + s [ 2 ] * i ;  $ ~~~atky = i + y [ 2 ] - m [ 3 ] ;  $ ~~~atkm = m [ 2 ] - j - y [ 3 ] ;  $ ~~~if ( atky <= 0 ) { continue ; }  $ ~~~if ( atkm <= 0 ) {  $ ~~~~ans = min ( ans , sum ) ;  $ ~~~~continue ;  $ ~~~}  $ ~~~if ( m [ 1 ] % atky != 0 ) {  $ ~~~~mm = m [ 1 ] / atky + 1 ;  $ ~~~} else {  $ ~~~~mm = m [ 1 ] / atky ;  $ ~~~}  $ ~~~if ( y [ 1 ] % atkm != 0 ) {  $ ~~~~my = y [ 1 ] / atkm + 1 ;  $ ~~~} else {  $ ~~~~my = y [ 1 ] / atkm ;  $ ~~~}  $ ~~~if ( my <= mm ) { sum += ( mm * atkm + 1 - y [ 1 ] ) * s [ 1 ] ; }  $ ~~~ans = min ( ans , sum ) ;  $ ~~}  $ ~}  $ ~cout << ans << endl ;  $ }
const int MAXN = 1001 ;  $ int n ;  $ char s [ MAXN ] ;  $ int c [ 256 ] ;  $ bool f [ MAXN ] ;  $ int main ( ) {  $ ~gets ( s ) ;  $ ~n = strlen ( s ) ;  $ ~for ( int i = 0 ; i < n ; ++ i ) c [ s [ i ] ] ++ ;  $ ~int k = 0 ;  $ ~for ( int i = 0 ; i < 256 ; ++ i )  $ ~~if ( c [ i ] > c [ k ] ) k = i ;  $ ~memset ( f , true , sizeof ( f ) ) ;  $ ~for ( int i = 2 ; i * i <= n ; i ++ )  $ ~~if ( f [ i ] )  $ ~~~for ( int j = i * i ; j <= n ; j += i ) f [ j ] = false ;  $ ~f [ 1 ] = true ;  $ ~for ( int i = 2 ; i + i <= n ; i ++ ) f [ i ] = false ;  $ ~for ( int i = ( 1 ) ; i <= ( n ) ; ++ i )  $ ~~if ( ! f [ i ] ) {  $ ~~~if ( c [ k ] == 0 ) {  $ ~~~~puts ( "NO" ) ;  $ ~~~~return 0 ;  $ ~~~}  $ ~~~c [ s [ i - 1 ] = k ] -- ;  $ ~~}  $ ~k = 0 ;  $ ~for ( int i = ( 1 ) ; i <= ( n ) ; ++ i )  $ ~~if ( f [ i ] ) {  $ ~~~while ( c [ k ] == 0 ) k ++ ;  $ ~~~c [ s [ i - 1 ] = k ] -- ;  $ ~~}  $ ~puts ( "YES" ) ;  $ ~puts ( s ) ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~int n , temp ;  $ ~cin >> n ;  $ ~int cont1 = 0 , cont2 = 0 ;  $ ~for ( int i = 0 ; i < n ; i ++ ) {  $ ~~cin >> temp ;  $ ~~if ( temp == 5 )  $ ~~~cont1 ++ ;  $ ~~else  $ ~~~cont2 ++ ;  $ ~}  $ ~if ( cont2 == 0 )  $ ~~cout << "-1\n" ;  $ ~else {  $ ~~int ans = 0 ;  $ ~~temp = 0 ;  $ ~~for ( int i = 1 ; i <= cont1 ; i ++ ) {  $ ~~~temp = temp * 10 + 5 ;  $ ~~~temp %= 9 ;  $ ~~~if ( temp == 0 ) { ans = i ; }  $ ~~}  $ ~~if ( ans == 0 ) {  $ ~~~cout << "0\n" ;  $ ~~} else {  $ ~~~for ( int i = 0 ; i < ans ; i ++ ) { cout << "5" ; }  $ ~~~for ( int i = 0 ; i < cont2 ; i ++ ) { cout << "0" ; }  $ ~~~cout << '\n' ;  $ ~~}  $ ~}  $ ~return 0 ;  $ }
int main ( ) {  $ ~int zeroes = 0 ;  $ ~int fives = 0 ;  $ ~int n ;  $ ~cin >> n ;  $ ~int temp ;  $ ~for ( int i = 0 ; i < n ; i ++ ) {  $ ~~cin >> temp ;  $ ~~if ( temp == 0 ) zeroes ++ ;  $ ~~if ( temp == 5 ) fives ++ ;  $ ~}  $ ~if ( zeroes && fives >= 9 ) {  $ ~~for ( int i = 0 ; i < fives / 9 * 9 ; i ++ ) { cout << "5" ; }  $ ~~for ( int i = 0 ; i < zeroes ; i ++ ) { cout << "0" ; }  $ ~~cout << "\n" ;  $ ~} else if ( zeroes ) {  $ ~~cout << "0\n" ;  $ ~} else {  $ ~~cout << "-1\n" ;  $ ~}  $ }
int main ( ) {  $ ~int n ;  $ ~char s [ 10000 ] ;  $ ~while ( cin >> n >> s ) {  $ ~~int U = 0 , D = 0 , L = 0 , R = 0 ;  $ ~~for ( int i = 0 ; i < n ; i ++ ) {  $ ~~~if ( s [ i ] == '0' ) D = R = L = 1 ;  $ ~~~if ( s [ i ] == '1' || s [ i ] == '2' || s [ i ] == '3' ) U = 1 ;  $ ~~~if ( s [ i ] == '1' || s [ i ] == '4' || s [ i ] == '7' ) L = 1 ;  $ ~~~if ( s [ i ] == '3' || s [ i ] == '6' || s [ i ] == '9' ) R = 1 ;  $ ~~~if ( s [ i ] == '7' || s [ i ] == '9' ) D = 1 ;  $ ~~}  $ ~~if ( U == 1 && D == 1 && R == 1 && L == 1 )  $ ~~~cout << "YES" << endl ;  $ ~~else  $ ~~~cout << "NO" << endl ;  $ ~}  $ ~return 0 ;  $ }
int a , b , n ;  $ int flag = 0 ;  $ long long int bb ;  $ int main ( ) {  $ ~cin >> a >> b >> n ;  $ ~for ( int i = 0 ; i <= 9 ; i ++ ) {  $ ~~bb = ( a * 10 ) + i ;  $ ~~if ( bb % b == 0 ) {  $ ~~~cout << bb ;  $ ~~~flag = 1 ;  $ ~~~for ( long long int j = 1 ; j < n ; j ++ ) { cout << 0 ; }  $ ~~~break ;  $ ~~}  $ ~}  $ ~if ( flag == 1 )  $ ~~cout << endl ;  $ ~else  $ ~~cout << "-1" << endl ;  $ }
int main ( ) {  $ ~long long int n , a , b , x , y = 0 , z = 0 ;  $ ~cin >> n >> a >> b ;  $ ~while ( n -- ) {  $ ~~cin >> x ;  $ ~~if ( x == 1 ) {  $ ~~~if ( a ) {  $ ~~~~a -- ;  $ ~~~} else if ( b ) {  $ ~~~~b -- ;  $ ~~~~z ++ ;  $ ~~~} else if ( z ) {  $ ~~~~z -- ;  $ ~~~} else {  $ ~~~~y ++ ;  $ ~~~}  $ ~~} else {  $ ~~~if ( b ) {  $ ~~~~b -- ;  $ ~~~} else {  $ ~~~~y ++ ;  $ ~~~~y ++ ;  $ ~~~}  $ ~~}  $ ~}  $ ~cout << y << "\n" ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~int n ;  $ ~cin >> n ;  $ ~int maxn = 0 ;  $ ~long long sum = 0 ;  $ ~for ( int i = 1 ; i <= n ; i ++ ) {  $ ~~int x ;  $ ~~cin >> x ;  $ ~~sum += x ;  $ ~~maxn = max ( maxn , x ) ;  $ ~}  $ ~long long ans = ( sum + n - 2 ) / ( n - 1 ) ;  $ ~ans = max ( ans , 1 LL * maxn ) ;  $ ~cout << ans << endl ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~long long s = 0 , x , n , mx = INT_MIN ;  $ ~cin >> n ;  $ ~for ( long long i = 1 ; i <= n ; i ++ ) {  $ ~~cin >> x ;  $ ~~s += x ;  $ ~~mx = max ( x , mx ) ;  $ ~}  $ ~cout << max ( mx , ( s - 1 ) / ( n - 1 ) + 1 ) << endl ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~int a , b , n ;  $ ~cin >> a >> b >> n ;  $ ~bool exist ( false ) ;  $ ~for ( int i = 0 ; i < 10 ; ++ i ) {  $ ~~if ( ( a * 10 + i ) % b == 0 ) {  $ ~~~cout << a * 10 + i ;  $ ~~~string s ( n - 1 , '0' ) ;  $ ~~~cout << s << endl ;  $ ~~~exist = true ;  $ ~~~break ;  $ ~~}  $ ~}  $ ~if ( ! exist ) { cout << - 1 << endl ; }  $ ~return 0 ;  $ }
int n , m ;  $ bool used [ 7 ] ;  $ int counter = 0 , digitn = 0 , digitm = 0 ;  $ bool checkh ( int x ) {  $ ~if ( x >= 0 && x < n ) return true ;  $ ~return false ;  $ }  $ bool checkm ( int x ) {  $ ~if ( x >= 0 && x < m ) return true ;  $ ~return false ;  $ }  $ void permutem ( int a , int number ) {  $ ~if ( number == digitm ) {  $ ~~if ( checkm ( a ) ) counter ++ ;  $ ~~return ;  $ ~}  $ ~for ( int i = 0 ; i < 7 ; i ++ )  $ ~~if ( ! used [ i ] ) {  $ ~~~used [ i ] = true ;  $ ~~~permutem ( a * 7 + i , number + 1 ) ;  $ ~~~used [ i ] = false ;  $ ~~}  $ }  $ void permuteh ( int a , int number ) {  $ ~if ( number == digitn ) {  $ ~~if ( checkh ( a ) ) permutem ( 0 , 0 ) ;  $ ~~return ;  $ ~}  $ ~for ( int i = 0 ; i < 7 ; i ++ )  $ ~~if ( ! used [ i ] ) {  $ ~~~used [ i ] = true ;  $ ~~~permuteh ( a * 7 + i , number + 1 ) ;  $ ~~~used [ i ] = false ;  $ ~~}  $ }  $ int main ( ) {  $ ~cin >> n >> m ;  $ ~int faken = n - 1 , fakem = m - 1 ;  $ ~if ( n == 1 ) faken = 1 ;  $ ~if ( m == 1 ) fakem = 1 ;  $ ~while ( faken > 0 ) {  $ ~~faken /= 7 ;  $ ~~digitn ++ ;  $ ~}  $ ~while ( fakem > 0 ) {  $ ~~fakem /= 7 ;  $ ~~digitm ++ ;  $ ~}  $ ~if ( digitn + digitm > 7 )  $ ~~cout << 0 << "\n" ;  $ ~else {  $ ~~permuteh ( 0 , 0 ) ;  $ ~~cout << counter << "\n" ;  $ ~}  $ ~return 0 ;  $ }
unsigned long long int a [ 100010 ] , n ;  $ bool check ( unsigned long long int x ) {  $ ~unsigned long long int tmp = 0 , i ;  $ ~for ( i = 0 ; i < n ; i ++ ) tmp += ( x - a [ i ] ) ;  $ ~return ( tmp >= x ) ;  $ }  $ unsigned long long int binSearch ( unsigned long long int low , unsigned long long int high ) {  $ ~while ( low < high ) {  $ ~~unsigned long long int mid = ( low + high ) / 2 ;  $ ~~if ( check ( mid ) )  $ ~~~high = mid ;  $ ~~else  $ ~~~low = mid + 1 ;  $ ~}  $ ~return low ;  $ }  $ int main ( ) {  $ ~unsigned long long int t = 1 ;  $ ~while ( t -- ) {  $ ~~unsigned long long int ans = 0 , i ;  $ ~~cin >> n ;  $ ~~for ( i = 0 ; i < n ; i ++ ) cin >> a [ i ] ;  $ ~~sort ( a , a + n ) ;  $ ~~ans = binSearch ( a [ n - 1 ] , 1e15 ) ;  $ ~~cout << ans << "\n" ;  $ ~}  $ ~return 0 ;  $ }
int main ( ) {  $ ~int n , x , num1 , num2 , ans ;  $ ~while ( cin >> n ) {  $ ~~num1 = 0 ;  $ ~~num2 = 0 ;  $ ~~for ( int i = 0 ; i < n ; i ++ ) {  $ ~~~cin >> x ;  $ ~~~if ( x == 0 )  $ ~~~~num1 ++ ;  $ ~~~else if ( x == 5 )  $ ~~~~num2 ++ ;  $ ~~}  $ ~~if ( num1 == 0 )  $ ~~~cout << "-1" << endl ;  $ ~~else {  $ ~~~ans = num2 / 9 ;  $ ~~~if ( ans && num1 ) {  $ ~~~~for ( int i = 0 ; i < ans * 9 ; i ++ ) cout << "5" ;  $ ~~~~for ( int i = 0 ; i < num1 ; i ++ ) cout << "0" ;  $ ~~~} else  $ ~~~~cout << "0" ;  $ ~~~cout << endl ;  $ ~~}  $ ~}  $ ~return 0 ;  $ }
int songs [ 100001 ] ;  $ int main ( ) {  $ ~int n , d ;  $ ~cin >> n >> d ;  $ ~for ( int i = 0 ; i < n ; i ++ ) { cin >> songs [ i ] ; }  $ ~int replica = d ;  $ ~int availabletime = d ;  $ ~for ( int i = 0 ; i < n ; i ++ ) {  $ ~~replica -= songs [ i ] ;  $ ~~replica -= 10 ;  $ ~~availabletime -= songs [ i ] ;  $ ~}  $ ~replica += 10 ;  $ ~if ( replica < 0 ) {  $ ~~cout << - 1 << endl ;  $ ~~return 0 ;  $ ~} else {  $ ~~cout << availabletime / 5 << endl ;  $ ~}  $ }
int main ( ) {  $ ~unsigned long long a , b , c , flag = 1 ;  $ ~cin >> a >> b >> c ;  $ ~for ( int i = 0 ; i < 10 ; i ++ ) {  $ ~~long long int p ;  $ ~~p = 10 * a + i ;  $ ~~if ( p % b == 0 ) {  $ ~~~flag = 0 ;  $ ~~~cout << a << i ;  $ ~~~for ( int j = 1 ; j < c ; j ++ ) { cout << 0 ; }  $ ~~~break ;  $ ~~}  $ ~}  $ ~if ( flag == 0 ) cout << endl ;  $ ~if ( flag ) cout << - 1 << endl ;  $ }
int main ( ) {  $ ~long long round , num , sum = 0 , a [ 100005 ] , max = - 1 ;  $ ~cin >> num ;  $ ~for ( int i = 0 ; i < num ; i ++ ) {  $ ~~cin >> a [ i ] ;  $ ~~sum += a [ i ] ;  $ ~~if ( a [ i ] > max ) { max = a [ i ] ; }  $ ~}  $ ~round = ceil ( sum / ( num - 1.0 ) ) ;  $ ~if ( round < max ) round = max ;  $ ~cout << round << endl ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~int n , d , a ;  $ ~cin >> n >> d ;  $ ~int s = 0 ;  $ ~for ( int i = 0 ; i < n ; i ++ ) {  $ ~~cin >> a ;  $ ~~s += a ;  $ ~}  $ ~int x = d - s ;  $ ~if ( s + ( n - 1 ) * 10 > d ) {  $ ~~cout << "-1" << endl ;  $ ~~return 0 ;  $ ~} else {  $ ~~cout << x / 5 << endl ;  $ ~~return 0 ;  $ ~}  $ ~return 0 ;  $ }
int main ( ) {  $ ~int n ;  $ ~cin >> n ;  $ ~char a [ n ] [ 5 ] ;  $ ~int i , j , c = 0 ;  $ ~for ( i = 0 ; i < n ; i ++ ) {  $ ~~for ( j = 0 ; j < 5 ; j ++ ) { cin >> a [ i ] [ j ] ; }  $ ~}  $ ~for ( i = 0 ; i < n ; i ++ ) {  $ ~~for ( j = 0 ; j < 4 ; j ++ ) {  $ ~~~if ( a [ i ] [ j ] == 'O' && a [ i ] [ j + 1 ] == 'O' ) {  $ ~~~~a [ i ] [ j ] = '+' ;  $ ~~~~a [ i ] [ j + 1 ] = '+' ;  $ ~~~~c = 1 ;  $ ~~~~goto end ;  $ ~~~}  $ ~~}  $ ~}  $ end :  $ ~if ( c == 1 )  $ ~~cout << "YES" << endl ;  $ ~else {  $ ~~cout << "NO" << endl ;  $ ~~goto end1 ;  $ ~}  $ ~for ( i = 0 ; i < n ; i ++ ) {  $ ~~for ( j = 0 ; j < 5 ; j ++ ) { cout << a [ i ] [ j ] ; }  $ ~~cout << endl ;  $ ~}  $ end1 :  $ ~return 0 ;  $ }
int main ( ) {  $ ~int n ;  $ ~cin >> n ;  $ ~char c [ 1000 ] [ 1000 ] ;  $ ~bool flag = 0 ;  $ ~for ( int i = 0 ; i < n ; i ++ ) {  $ ~~for ( int j = 0 ; j < 5 ; j ++ ) {  $ ~~~cin >> c [ i ] [ j ] ;  $ ~~~if ( c [ i ] [ 0 ] == 'O' && c [ i ] [ 1 ] == 'O' && flag == 0 ) {  $ ~~~~flag = 1 ;  $ ~~~~c [ i ] [ 0 ] = '+' ;  $ ~~~~c [ i ] [ 1 ] = '+' ;  $ ~~~}  $ ~~~if ( c [ i ] [ 3 ] == 'O' && c [ i ] [ 4 ] == 'O' && flag == 0 ) {  $ ~~~~flag = 1 ;  $ ~~~~c [ i ] [ 3 ] = '+' ;  $ ~~~~c [ i ] [ 4 ] = '+' ;  $ ~~~}  $ ~~}  $ ~}  $ ~cout << ( flag == 1 ? "YES" : "NO" ) << endl ;  $ ~if ( flag == 1 ) {  $ ~~for ( int i = 0 ; i < n ; i ++ ) {  $ ~~~for ( int j = 0 ; j < 5 ; j ++ ) { cout << c [ i ] [ j ] ; }  $ ~~~cout << '\n' ;  $ ~~}  $ ~}  $ ~return 0 ;  $ }
long long int a [ 100010 ] , n ;  $ bool check ( long long int x ) {  $ ~long long int tmp = 0 , i ;  $ ~for ( i = 0 ; i < n ; i ++ ) tmp += ( x - a [ i ] ) ;  $ ~return ( tmp >= x ) ;  $ }  $ long long int binSearch ( long long int low , long long int high ) {  $ ~while ( low < high ) {  $ ~~long long int mid = low + ( high - low ) / 2 ;  $ ~~if ( check ( mid ) )  $ ~~~high = mid ;  $ ~~else  $ ~~~low = mid + 1 ;  $ ~}  $ ~return low ;  $ }  $ int main ( ) {  $ ~long long int t = 1 ;  $ ~while ( t -- ) {  $ ~~long long int ans = 0 , i ;  $ ~~cin >> n ;  $ ~~for ( i = 0 ; i < n ; i ++ ) cin >> a [ i ] ;  $ ~~sort ( a , a + n ) ;  $ ~~ans = binSearch ( a [ n - 1 ] , 1e12 ) ;  $ ~~cout << ans << "\n" ;  $ ~}  $ ~return 0 ;  $ }
const int maxn = 105 ;  $ int main ( ) {  $ ~int n , sum = 0 ;  $ ~char a [ 12 ] ;  $ ~cin >> n ;  $ ~for ( int i = 0 ; i < n ; i ++ ) { cin >> a [ i ] ; }  $ ~int t = 1 , d = 1 , r = 1 , l = 1 ;  $ ~for ( int i = 0 ; i < n ; i ++ ) {  $ ~~if ( a [ i ] == '1' || a [ i ] == '2' || a [ i ] == '3' ) t = 0 ;  $ ~~if ( a [ i ] == '1' || a [ i ] == '4' || a [ i ] == '7' || a [ i ] == '0' ) l = 0 ;  $ ~~if ( a [ i ] == '3' || a [ i ] == '6' || a [ i ] == '9' || a [ i ] == '0' ) r = 0 ;  $ ~~if ( a [ i ] == '7' || a [ i ] == '0' || a [ i ] == '9' ) d = 0 ;  $ ~}  $ ~if ( t || l || r || d )  $ ~~cout << "NO" << endl ;  $ ~else  $ ~~cout << "YES" << endl ;  $ }
int main ( ) {  $ ~long long n , a , b ;  $ ~cin >> n >> a >> b ;  $ ~int bb = 0 ;  $ ~long long ans = 0 ;  $ ~for ( int i = 0 ; i < n ; i ++ ) {  $ ~~int tmp ;  $ ~~cin >> tmp ;  $ ~~if ( tmp == 2 && b )  $ ~~~b -- ;  $ ~~else if ( tmp == 1 && a )  $ ~~~a -- ;  $ ~~else if ( tmp == 1 && b )  $ ~~~b -- , bb ++ ;  $ ~~else if ( tmp == 1 && bb )  $ ~~~bb -- ;  $ ~~else  $ ~~~ans += tmp ;  $ ~}  $ ~cout << ans << endl ;  $ }
int n ;  $ string s ;  $ bool h [ 10 ] [ 4 ] ;  $ int main ( ) {  $ ~cin >> n >> s ;  $ ~for ( int i = 0 ; i < 4 ; i ++ ) {  $ ~~h [ 5 ] [ i ] = true ;  $ ~~h [ 8 ] [ i ] = true ;  $ ~}  $ ~h [ 2 ] [ 0 ] = true ;  $ ~h [ 3 ] [ 0 ] = true ;  $ ~h [ 6 ] [ 0 ] = true ;  $ ~h [ 9 ] [ 0 ] = true ;  $ ~h [ 1 ] [ 1 ] = true ;  $ ~h [ 4 ] [ 1 ] = true ;  $ ~h [ 7 ] [ 1 ] = true ;  $ ~h [ 2 ] [ 1 ] = true ;  $ ~h [ 4 ] [ 2 ] = true ;  $ ~h [ 6 ] [ 2 ] = true ;  $ ~h [ 7 ] [ 2 ] = true ;  $ ~h [ 9 ] [ 2 ] = true ;  $ ~h [ 0 ] [ 2 ] = true ;  $ ~h [ 1 ] [ 3 ] = true ;  $ ~h [ 2 ] [ 3 ] = true ;  $ ~h [ 3 ] [ 3 ] = true ;  $ ~h [ 4 ] [ 3 ] = true ;  $ ~h [ 6 ] [ 3 ] = true ;  $ ~for ( int j = 0 ; j < 4 ; j ++ ) {  $ ~~bool done = true ;  $ ~~for ( int i = 0 ; i < n ; i ++ )  $ ~~~if ( ! h [ s [ i ] - '0' ] [ j ] ) done = false ;  $ ~~if ( done ) {  $ ~~~cout << "NO\n" ;  $ ~~~return 0 ;  $ ~~}  $ ~}  $ ~cout << "YES\n" ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~long int n , m , x , y , z = 9 , i = 0 ;  $ ~cin >> x >> y >> m ;  $ ~while ( i <= z ) {  $ ~~if ( ( x * 10 + i ) % y == 0 ) {  $ ~~~z = 10 ;  $ ~~~break ;  $ ~~}  $ ~~i ++ ;  $ ~}  $ ~m -- ;  $ ~if ( z == 10 ) {  $ ~~cout << x * 10 + i ;  $ ~~while ( m -- ) cout << "0" ;  $ ~} else {  $ ~~cout << "-1" ;  $ ~}  $ ~cout << endl ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~int n , d ;  $ ~cin >> n >> d ;  $ ~int arr [ n ] ;  $ ~int sum = 0 ;  $ ~for ( int i = 0 ; i < n ; i ++ ) {  $ ~~cin >> arr [ i ] ;  $ ~~sum += arr [ i ] ;  $ ~}  $ ~int T = sum + ( n - 1 ) * 10 ;  $ ~if ( T > d ) {  $ ~~cout << - 1 << endl ;  $ ~~return 0 ;  $ ~}  $ ~d = d - sum ;  $ ~d = d / 5 ;  $ ~cout << d << endl ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~int n , d , arr [ 105 ] ;  $ ~cin >> n >> d ;  $ ~for ( int i = 0 ; i < n ; i ++ ) { cin >> arr [ i ] ; }  $ ~int sum = 0 ;  $ ~for ( int i = 0 ; i < n ; i ++ ) { sum += arr [ i ] ; }  $ ~int x = sum + ( n - 1 ) * 10 ;  $ ~if ( x <= d )  $ ~~cout << ( d - sum ) / 5 << endl ;  $ ~else  $ ~~cout << - 1 << endl ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~int n ;  $ ~cin >> n ;  $ ~long long arr [ n ] ;  $ ~long long sum = 0 , x = INT_MIN ;  $ ~for ( int i = 0 ; i < n ; i ++ ) {  $ ~~cin >> arr [ i ] ;  $ ~~sum += arr [ i ] ;  $ ~~x = max ( x , arr [ i ] ) ;  $ ~}  $ ~x = max ( x , ( sum + n - 2 ) / ( n - 1 ) ) ;  $ ~cout << x << endl ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~int n ;  $ ~cin >> n ;  $ ~int count5 = 0 ;  $ ~int count0 = 0 ;  $ ~for ( int i = 0 ; i < n ; i ++ ) {  $ ~~int temp = 0 ;  $ ~~cin >> temp ;  $ ~~if ( temp == 0 )  $ ~~~count0 ++ ;  $ ~~else  $ ~~~count5 ++ ;  $ ~}  $ ~int a = count5 / 9 ;  $ ~int b = count0 ;  $ ~if ( b == 0 ) {  $ ~~cout << - 1 << endl ;  $ ~} else if ( a == 0 ) {  $ ~~cout << 0 << endl ;  $ ~} else {  $ ~~for ( int i = 0 ; i < a ; i ++ ) cout << 555555555 ;  $ ~~for ( int i = 0 ; i < b ; i ++ ) cout << 0 ;  $ ~~cout << endl ;  $ ~}  $ ~return 0 ;  $ }
int main ( ) {  $ ~int n , i , j , c = 0 , flg = 0 ;  $ ~cin >> n ;  $ ~string s [ n ] ;  $ ~for ( i = 0 ; i < n ; i ++ ) {  $ ~~cin >> s [ i ] ;  $ ~~if ( s [ i ] [ 0 ] == 'O' && s [ i ] [ 1 ] == 'O' ) {  $ ~~~if ( c == 0 ) {  $ ~~~~s [ i ] [ 0 ] = '+' ;  $ ~~~~s [ i ] [ 1 ] = '+' ;  $ ~~~~flg = 1 ;  $ ~~~}  $ ~~~c ++ ;  $ ~~} else if ( s [ i ] [ 3 ] == 'O' && s [ i ] [ 4 ] == 'O' ) {  $ ~~~if ( c == 0 ) {  $ ~~~~s [ i ] [ 3 ] = '+' ;  $ ~~~~s [ i ] [ 4 ] = '+' ;  $ ~~~~flg = 1 ;  $ ~~~}  $ ~~~c ++ ;  $ ~~}  $ ~}  $ ~if ( flg == 1 ) {  $ ~~cout << "YES" << endl ;  $ ~~for ( i = 0 ; i < n ; i ++ ) { cout << s [ i ] << endl ; }  $ ~} else  $ ~~cout << "NO" << endl ;  $ ~return 0 ;  $ }
int ans = INT_MAX ;  $ int main ( ) {  $ ~int hy , ay , dy , hm , am , dm , h , a , d , xh , xa , xd ;  $ ~cin >> hy >> ay >> dy >> hm >> am >> dm >> h >> a >> d ;  $ ~for ( xh = 0 ; xh <= 1000 ; xh ++ ) {  $ ~~for ( xa = 0 ; xa <= 200 ; xa ++ ) {  $ ~~~for ( xd = 0 ; xd <= 100 ; xd ++ ) {  $ ~~~~int ll = 1 , hh = 1000 ;  $ ~~~~while ( ll <= hh ) {  $ ~~~~~int m = ( ll + hh ) / 2 ;  $ ~~~~~int l = ( hy + xh ) - m * max ( 0 , am - ( dy + xd ) ) ;  $ ~~~~~int r = hm - m * max ( 0 , ay + xa - dm ) ;  $ ~~~~~int val = h * xh + xa * a + xd * d ;  $ ~~~~~if ( l > 0 && r <= 0 ) {  $ ~~~~~~ans = min ( ans , h * xh + xa * a + xd * d ) ;  $ ~~~~~~break ;  $ ~~~~~} else if ( l <= 0 && r <= 0 )  $ ~~~~~~hh = m - 1 ;  $ ~~~~~else if ( l <= 0 && r > 0 )  $ ~~~~~~break ;  $ ~~~~~else if ( l > 0 && r > 0 )  $ ~~~~~~ll = m + 1 ;  $ ~~~~}  $ ~~~}  $ ~~}  $ ~}  $ ~cout << ans << endl ;  $ }
vector < int > digit ;  $ vector < int > : : iterator it ;  $ int main ( ) {  $ ~unsigned long long a , b , n ;  $ ~cin >> a >> b >> n ;  $ ~digit . push_back ( a ) ;  $ ~for ( unsigned long long i = 1 ; i <= n ; i ++ ) {  $ ~~int flag = 0 ;  $ ~~for ( int j = 0 ; j <= 9 ; j ++ ) {  $ ~~~if ( ( ( a * 10 ) + j ) % b == 0 ) {  $ ~~~~digit . push_back ( j ) ;  $ ~~~~a = ( ( a * 10 ) + j ) % b ;  $ ~~~~flag = 1 ;  $ ~~~~break ;  $ ~~~}  $ ~~}  $ ~~if ( flag == 0 ) {  $ ~~~cout << "-1" << endl ;  $ ~~~return 0 ;  $ ~~}  $ ~}  $ ~for ( it = digit . begin ( ) ; it != digit . end ( ) ; it ++ ) cout << ( * it ) ;  $ ~cout << endl ;  $ }
const int MAX = 100005 ;  $ int arr [ MAX ] ;  $ long long divc ( long long a , long long b ) {  $ ~if ( a % b == 0 ) return a / b ;  $ ~return ( a / b + 1 ) ;  $ }  $ int main ( ) {  $ ~int n ;  $ ~cin >> n ;  $ ~long long sum = 0 , mx = - 1 ;  $ ~for ( int i = 0 ; i < n ; i ++ ) {  $ ~~cin >> arr [ i ] ;  $ ~~sum += arr [ i ] ;  $ ~~mx = max ( mx , ( long long ) arr [ i ] ) ;  $ ~}  $ ~long long ans = divc ( sum , ( long long ) ( n - 1 ) ) ;  $ ~ans = max ( ans , mx ) ;  $ ~cout << ans << "\n" ;  $ }
int main ( ) {  $ ~int n , a , i , j , num5 , num0 , r ;  $ ~while ( cin >> n ) {  $ ~~num5 = 0 ;  $ ~~num0 = 0 ;  $ ~~for ( i = 0 ; i < n ; i ++ ) {  $ ~~~cin >> a ;  $ ~~~if ( a == 5 ) {  $ ~~~~num5 ++ ;  $ ~~~} else if ( a == 0 ) {  $ ~~~~num0 ++ ;  $ ~~~}  $ ~~}  $ ~~r = num5 / 9 ;  $ ~~if ( ! num0 ) {  $ ~~~cout << "-1" << endl ;  $ ~~} else {  $ ~~~if ( r && num0 ) {  $ ~~~~for ( i = 0 ; i < r * 9 ; i ++ ) { cout << "5" ; }  $ ~~~~for ( i = 0 ; i < num0 ; i ++ ) { cout << "0" ; }  $ ~~~} else {  $ ~~~~cout << "0" ;  $ ~~~}  $ ~~~cout << "" << endl ;  $ ~~}  $ ~}  $ ~return 0 ;  $ }
int main ( ) {  $ ~int n ;  $ ~cin >> n ;  $ ~string s ;  $ ~cin >> s ;  $ ~bool c1 = false ;  $ ~bool c3 = false ;  $ ~bool l1 = false ;  $ ~bool l3 = false ;  $ ~bool t0 = false ;  $ ~for ( int i = 0 ; i < n ; i ++ ) {  $ ~~if ( s [ i ] - '0' == 1 || s [ i ] - '0' == 2 || s [ i ] - '0' == 3 ) l1 = true ;  $ ~~if ( s [ i ] - '0' == 7 || s [ i ] - '0' == 9 ) l3 = true ;  $ ~~if ( s [ i ] - '0' == 1 || s [ i ] - '0' == 4 || s [ i ] - '0' == 7 ) c1 = true ;  $ ~~if ( s [ i ] - '0' == 3 || s [ i ] - '0' == 6 || s [ i ] - '0' == 9 ) c3 = true ;  $ ~~if ( s [ i ] - '0' == 0 ) t0 = true ;  $ ~}  $ ~if ( l1 == true && l3 == true && c1 == true && c3 == true ) {  $ ~~cout << "YES" << endl ;  $ ~~return 0 ;  $ ~}  $ ~if ( t0 == true && l1 == true ) {  $ ~~cout << "YES" << endl ;  $ ~~return 0 ;  $ ~}  $ ~cout << "NO" << endl ;  $ }
int main ( ) {  $ ~long int n , d , i ;  $ ~cin >> n >> d ;  $ ~long int arr [ n ] ;  $ ~for ( i = 0 ; i < n ; i ++ ) { cin >> arr [ i ] ; }  $ ~long int o = sizeof ( arr ) / sizeof ( arr [ 0 ] ) ;  $ ~int initial_sum = 0 , flag = 0 ;  $ ~long int y = accumulate ( arr , arr + o , initial_sum ) ;  $ ~long int p = 0 , count = 0 ;  $ ~for ( i = 0 ; i < n ; i ++ ) {  $ ~~if ( p + arr [ i ] <= d ) {  $ ~~~if ( i == n - 1 ) {  $ ~~~~flag = 1 ;  $ ~~~~p = p + arr [ i ] ;  $ ~~~} else {  $ ~~~~p = p + arr [ i ] ;  $ ~~~}  $ ~~}  $ ~~if ( p <= d - 5 ) {  $ ~~~p = p + 5 ;  $ ~~~count ++ ;  $ ~~} else {  $ ~~~break ;  $ ~~}  $ ~~if ( p <= d - 5 ) {  $ ~~~p = p + 5 ;  $ ~~~count ++ ;  $ ~~} else {  $ ~~~break ;  $ ~~}  $ ~}  $ ~if ( flag == 1 ) {  $ ~~if ( p >= d - 5 ) {  $ ~~~cout << count << endl ;  $ ~~} else {  $ ~~~while ( p <= d - 5 ) {  $ ~~~~count ++ ;  $ ~~~~p = p + 5 ;  $ ~~~}  $ ~~~cout << count << endl ;  $ ~~}  $ ~} else {  $ ~~cout << "-1" << endl ;  $ ~}  $ ~return 0 ;  $ }
int main ( ) {  $ ~long long n , m , k ;  $ ~while ( cin >> n >> m >> k ) {  $ ~~long long ans = 0 ;  $ ~~if ( k > n + m - 2 )  $ ~~~ans = - 1 ;  $ ~~else {  $ ~~~long long Max = max ( n - 1 , m - 1 ) ;  $ ~~~long long Min = min ( n - 1 , m - 1 ) ;  $ ~~~if ( k > Max ) {  $ ~~~~long long yu = k - Max ;  $ ~~~~ans = ( Min + 1 ) / ( yu + 1 ) ;  $ ~~~} else {  $ ~~~~long long a = ( n / ( k + 1 ) ) * m ;  $ ~~~~long long b = ( m / ( k + 1 ) ) * n ;  $ ~~~~ans = max ( a , b ) ;  $ ~~~}  $ ~~}  $ ~~cout << ans << endl ;  $ ~}  $ ~return 0 ;  $ }
long long c , n , a , b , i , x , y , z ;  $ int main ( ) {  $ ~cin >> a >> b >> c ;  $ ~while ( a -- ) {  $ ~~cin >> x ;  $ ~~if ( x == 1 ) {  $ ~~~if ( b )  $ ~~~~b -- ;  $ ~~~else if ( c ) {  $ ~~~~c -- , y ++ ;  $ ~~~} else if ( y )  $ ~~~~y -- ;  $ ~~~else  $ ~~~~z ++ ;  $ ~~}  $ ~~if ( x == 2 ) {  $ ~~~if ( c )  $ ~~~~c -- ;  $ ~~~else  $ ~~~~z += 2 ;  $ ~~}  $ ~}  $ ~cout << z << endl ;  $ ~;  $ ~return 0 ;  $ }
const int64_t infint64_t = 9223372036854775807 LL ;  $ void solve ( ) {  $ ~int64_t n , a , b ;  $ ~cin >> n >> a >> b ;  $ ~int64_t c = 0 ;  $ ~int64_t denied = 0 ;  $ ~for ( int64_t i = 0 ; i < n ; i ++ ) {  $ ~~int64_t t ;  $ ~~cin >> t ;  $ ~~if ( t == 1 ) {  $ ~~~if ( a > 0 ) {  $ ~~~~a -- ;  $ ~~~} else if ( b > 0 ) {  $ ~~~~b -- ;  $ ~~~~c ++ ;  $ ~~~} else if ( c > 0 ) {  $ ~~~~c -- ;  $ ~~~} else  $ ~~~~denied ++ ;  $ ~~} else {  $ ~~~if ( b > 0 ) {  $ ~~~~b -- ;  $ ~~~} else  $ ~~~~denied += 2 ;  $ ~~}  $ ~}  $ ~cout << denied << endl ;  $ }  $ int main ( ) {  $ ~solve ( ) ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~int n ;  $ ~cin >> n ;  $ ~string y = "NO" ;  $ ~string s ;  $ ~for ( int i = 0 ; i < n ; i ++ ) {  $ ~~string s1 ;  $ ~~cin >> s1 ;  $ ~~for ( int j = 0 ; j < 5 && y == "NO" ; j ++ ) {  $ ~~~if ( s1 [ j ] == 'O' && s1 [ j + 1 ] == 'O' ) {  $ ~~~~y = "YES" ;  $ ~~~~s1 [ j ] = '+' ;  $ ~~~~s1 [ j + 1 ] = '+' ;  $ ~~~}  $ ~~}  $ ~~s = s + s1 + '\n' ;  $ ~}  $ ~if ( y == "YES" )  $ ~~cout << y << endl << s ;  $ ~else  $ ~~cout << y << endl ;  $ }
int main ( ) {  $ ~int a , b , n ;  $ ~cin >> a >> b >> n ;  $ ~int d = - 1 ;  $ ~for ( int i = 0 ; i < 10 ; ++ i ) {  $ ~~if ( ( a * 10 + i ) % b == 0 ) {  $ ~~~d = i ;  $ ~~~break ;  $ ~~}  $ ~}  $ ~if ( d == - 1 ) {  $ ~~cout << - 1 << endl ;  $ ~} else {  $ ~~cout << a << d ;  $ ~~for ( int i = 0 ; i < n - 1 ; ++ i ) { cout << 0 ; }  $ ~~cout << endl ;  $ ~}  $ ~return 0 ;  $ }
int main ( ) {  $ ~int n ;  $ ~cin >> n ;  $ ~int arr [ n ] , number_of_5 = 0 , number_of_0 = 0 ;  $ ~;  $ ~for ( int i = 0 ; i < n ; i ++ ) {  $ ~~cin >> arr [ i ] ;  $ ~~if ( arr [ i ] == 5 ) {  $ ~~~number_of_5 ++ ;  $ ~~} else {  $ ~~~number_of_0 ++ ;  $ ~~}  $ ~}  $ ~if ( number_of_0 == 0 ) {  $ ~~cout << "-1\n" ;  $ ~~return 0 ;  $ ~} else {  $ ~~number_of_5 = floor ( number_of_5 / 9 ) ;  $ ~~string answer = "" ;  $ ~~for ( int i = 0 ; i < ( number_of_5 ) ; i ++ ) { answer += "555555555" ; }  $ ~~for ( int i = 1 ; i <= number_of_0 ; i ++ ) {  $ ~~~if ( answer . length ( ) == 0 ) {  $ ~~~~answer += "0" ;  $ ~~~~break ;  $ ~~~} else {  $ ~~~~answer += "0" ;  $ ~~~}  $ ~~}  $ ~~cout << answer << endl ;  $ ~}  $ ~return 0 ;  $ }
int main ( ) {  $ ~int n , d ;  $ ~int total = 0 ;  $ ~int ans = 0 ;  $ ~cin >> n >> d ;  $ ~while ( n -- ) {  $ ~~int tmp ;  $ ~~cin >> tmp ;  $ ~~total += tmp ;  $ ~~total += 10 ;  $ ~~ans += 2 ;  $ ~}  $ ~total -= 10 ;  $ ~ans -= 2 ;  $ ~if ( total > d ) {  $ ~~ans = - 1 ;  $ ~} else {  $ ~~ans += ( d - total ) / 5 ;  $ ~}  $ ~cout << ans << endl ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~int n , m ;  $ ~cin >> n >> m ;  $ ~vector < int > v ;  $ ~for ( int i = 0 ; i < n ; i ++ ) {  $ ~~int x ;  $ ~~cin >> x ;  $ ~~v . push_back ( x ) ;  $ ~}  $ ~int sum = 0 ;  $ ~for ( int i = 0 ; i < v . size ( ) ; i ++ ) { sum = sum + v [ i ] ; }  $ ~int a = sum + ( ( n - 1 ) * 10 ) ;  $ ~if ( a <= m ) {  $ ~~int b = m - a ;  $ ~~cout << ( ( n - 1 ) * 2 ) + ( m - a ) / 5 << endl ;  $ ~} else  $ ~~cout << "-1" << endl ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~long long int n , i , sum = 0 , a = 0 ;  $ ~long long int ar [ 100000 ] ;  $ ~cin >> n ;  $ ~for ( i = 0 ; i < n ; i ++ ) {  $ ~~cin >> ar [ i ] ;  $ ~~sum += ar [ i ] ;  $ ~~a = max ( a , ar [ i ] ) ;  $ ~}  $ ~n -- ;  $ ~cout << max ( a , ( long long int ) ceil ( ( double ) sum / ( double ) n ) ) << endl ;  $ ~return 0 ;  $ }
int n , d , sum , ans ;  $ int main ( ) {  $ ~cin >> n >> d ;  $ ~for ( int i = 0 ; i < n ; i ++ ) {  $ ~~int x ;  $ ~~cin >> x ;  $ ~~sum += x ;  $ ~}  $ ~sum += ( n - 1 ) * 10 ;  $ ~if ( sum > d ) {  $ ~~cout << - 1 << endl ;  $ ~~return 0 ;  $ ~} else {  $ ~~ans += ( n - 1 ) * 2 ;  $ ~}  $ ~if ( ( d - sum ) / 5 >= 1 ) ans += ( d - sum ) / 5 ;  $ ~cout << ans << endl ;  $ ~return 0 ;  $ }
char a [ 20 ] ;  $ int main ( ) {  $ ~int n ;  $ ~cin >> n ;  $ ~cin >> a ;  $ ~int x = strlen ( a ) ;  $ ~int temp1 = 1 , temp2 = 1 , temp3 = 1 , temp4 = 1 ;  $ ~for ( int i = 0 ; i < x ; i ++ ) {  $ ~~if ( a [ i ] - 48 >= 1 && a [ i ] - 48 <= 3 ) { temp1 = 0 ; }  $ ~~if ( a [ i ] - 48 == 7 || a [ i ] - 48 == 9 || a [ i ] - 48 == 0 ) { temp2 = 0 ; }  $ ~~if ( a [ i ] - 48 == 1 || a [ i ] - 48 == 4 || a [ i ] - 48 == 7 || a [ i ] - 48 == 0 ) { temp3 = 0 ; }  $ ~~if ( a [ i ] - 48 == 3 || a [ i ] - 48 == 6 || a [ i ] - 48 == 9 || a [ i ] - 48 == 0 ) { temp4 = 0 ; }  $ ~}  $ ~if ( temp1 == 0 && temp2 == 0 && temp3 == 0 && temp4 == 0 ) {  $ ~~cout << "YES" << endl ;  $ ~} else {  $ ~~cout << "NO" << endl ;  $ ~}  $ }
int main ( ) {  $ ~int a , b , n , k = 0 , i ;  $ ~cin >> a >> b >> n ;  $ ~string s ( n - 1 , '0' ) ;  $ ~for ( i = 0 ; i < 10 ; ++ i ) {  $ ~~if ( ( a * 10 + i ) % b == 0 ) {  $ ~~~k = 1 ;  $ ~~~break ;  $ ~~}  $ ~}  $ ~if ( k != 1 ) {  $ ~~cout << - 1 << endl ;  $ ~~return 0 ;  $ ~} else {  $ ~~cout << a * 10 + i ;  $ ~~cout << s << endl ;  $ ~}  $ ~return 0 ;  $ }
char pal [ 1100 ] ;  $ int qtd [ 1100 ] ;  $ bool d [ 1100 ] ;  $ bool primo ( int n ) {  $ ~if ( n == 1 ) return 0 ;  $ ~for ( int i = 2 ; i * i <= n ; i ++ ) {  $ ~~if ( n % i == 0 ) return 0 ;  $ ~}  $ ~return 1 ;  $ }  $ char res [ 1100 ] ;  $ int main ( ) {  $ ~int i ;  $ ~string a ;  $ ~cin >> a ;  $ ~int n = ( int ) a . size ( ) ;  $ ~for ( i = 0 ; i < ( int ) a . size ( ) ; i ++ ) { qtd [ ( int ) a [ i ] ] ++ ; }  $ ~int dois = 0 ;  $ ~for ( i = 2 ; i <= ( int ) a . size ( ) ; i ++ ) {  $ ~~if ( primo ( i ) && i * 2 > n ) {  $ ~~~d [ i ] = 0 ;  $ ~~} else {  $ ~~~d [ i ] = 1 ;  $ ~~~dois ++ ;  $ ~~}  $ ~}  $ ~char l = 0 ;  $ ~for ( i = 'a' ; i <= 'z' ; i ++ ) {  $ ~~if ( qtd [ i ] >= dois ) {  $ ~~~l = i ;  $ ~~~qtd [ i ] -= dois ;  $ ~~~break ;  $ ~~}  $ ~}  $ ~int j = 'a' ;  $ ~if ( l != 0 ) {  $ ~~cout << "YES" << endl ;  $ ~~for ( i = 1 ; i <= n ; i ++ ) {  $ ~~~if ( d [ i ] == 1 ) {  $ ~~~~cout << l ;  $ ~~~} else {  $ ~~~~while ( qtd [ j ] == 0 ) { j ++ ; }  $ ~~~~qtd [ j ] -- ;  $ ~~~~cout << ( char ) j ;  $ ~~~}  $ ~~}  $ ~~cout << endl ;  $ ~} else {  $ ~~cout << "NO" << endl ;  $ ~}  $ }
int main ( ) {  $ ~clock_t t1 , t2 ;  $ ~t1 = clock ( ) ;  $ ~int d , time ;  $ ~cin >> d >> time ;  $ ~int sum = 0 ;  $ ~for ( int i = 0 ; i < d ; i ++ ) {  $ ~~int x ;  $ ~~cin >> x ;  $ ~~sum += x ;  $ ~}  $ ~int rem = time - sum ;  $ ~int rest = ( d - 1 ) * 10 ;  $ ~if ( rest > rem ) {  $ ~~cout << "-1"  $ ~~~<< "\n" ;  $ ~} else {  $ ~~cout << ( rem - rest ) / 5 + rest / 5 << "\n" ;  $ ~}  $ ~t2 = clock ( ) ;  $ ~float diff = ( float ) t2 - ( float ) t1 ;  $ ~float execution_time = diff / CLOCKS_PER_SEC ;  $ }
int main ( ) {  $ ~int n , a , b , sum = 0 , ans , s = 0 ;  $ ~cin >> n >> a >> b ;  $ ~for ( int i = 0 ; i < n ; i ++ ) {  $ ~~cin >> ans ;  $ ~~if ( ans == 1 ) {  $ ~~~if ( a > 0 )  $ ~~~~a -- ;  $ ~~~else if ( b > 0 ) {  $ ~~~~b -- ;  $ ~~~~s ++ ;  $ ~~~} else if ( s != 0 )  $ ~~~~s -- ;  $ ~~~else {  $ ~~~~sum ++ ;  $ ~~~}  $ ~~} else {  $ ~~~if ( b > 0 )  $ ~~~~b -- ;  $ ~~~else  $ ~~~~sum = sum + 2 ;  $ ~~}  $ ~}  $ ~cout << sum << endl ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~char ch [ 1009 ] [ 200 ] ;  $ ~int n , flag = 0 , i , j ;  $ ~cin >> n ;  $ ~for ( i = 1 ; i <= n ; i ++ ) {  $ ~~for ( j = 1 ; j <= 5 ; j ++ ) { cin >> ch [ i ] [ j ] ; }  $ ~}  $ ~for ( i = 1 ; i <= n ; i ++ ) {  $ ~~for ( j = 1 ; j < 5 ; j ++ ) {  $ ~~~if ( ch [ i ] [ j ] == 'O' && ch [ i ] [ j + 1 ] == 'O' ) {  $ ~~~~ch [ i ] [ j ] = '+' ;  $ ~~~~ch [ i ] [ j + 1 ] = '+' ;  $ ~~~~flag = 1 ;  $ ~~~~break ;  $ ~~~}  $ ~~}  $ ~~if ( flag == 1 ) break ;  $ ~}  $ ~if ( flag == 1 ) {  $ ~~cout << "YES" << endl ;  $ ~~for ( i = 1 ; i <= n ; i ++ ) {  $ ~~~for ( j = 1 ; j <= 5 ; j ++ ) { cout << ch [ i ] [ j ] ; }  $ ~~~cout << endl ;  $ ~~}  $ ~} else  $ ~~cout << "NO" << endl ;  $ }
int main ( ) {  $ ~int hy , ay , dy , hm , am , dm , h , a , d ;  $ ~cin >> hy >> ay >> dy ;  $ ~cin >> hm >> am >> dm ;  $ ~cin >> h >> a >> d ;  $ ~int n = 300 ;  $ ~int ans = 1e9 ;  $ ~for ( int j = 0 ; j < n ; ++ j ) {  $ ~~for ( int k = 0 ; k < n ; ++ k ) {  $ ~~~int cay = ay + j ;  $ ~~~int cdy = dy + k ;  $ ~~~int damageY = max ( cay - dm , 0 ) ;  $ ~~~int damageM = max ( 0 , am - cdy ) ;  $ ~~~if ( ! damageY ) continue ;  $ ~~~int hits = hm / damageY + ( hm % damageY != 0 ) ;  $ ~~~int hp = damageM * hits ;  $ ~~~int toBuy = max ( 0 , hp - hy + 1 ) ;  $ ~~~ans = min ( ans , j * a + d * k + toBuy * h ) ;  $ ~~}  $ ~}  $ ~cout << ans << "\n" ;  $ ~return 0 ;  $ }
const int N = 1e5 + 5 ;  $ long long n , sum , Max , res , a [ N ] ;  $ void Input ( ) {  $ ~cin >> n ;  $ ~for ( int i = 1 ; i <= n ; i ++ ) {  $ ~~cin >> a [ i ] ;  $ ~~sum += a [ i ] , Max = max ( Max , a [ i ] ) ;  $ ~}  $ }  $ void Solve ( ) {  $ ~long long l = 1 , r = 1e14 ;  $ ~while ( l <= r ) {  $ ~~long long mid = ( l + r ) / 2 ;  $ ~~long long c_games = ( mid * n ) - sum ;  $ ~~if ( c_games >= mid )  $ ~~~res = mid , r = mid - 1 ;  $ ~~else  $ ~~~l = mid + 1 ;  $ ~}  $ ~cout << max ( res , Max ) << '\n' ;  $ }  $ int main ( ) {  $ ~Input ( ) ;  $ ~Solve ( ) ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~int x , y , songs , sum = 0 ;  $ ~cin >> x >> y ;  $ ~for ( int i = 0 ; i < x ; i ++ ) {  $ ~~cin >> songs ;  $ ~~sum += songs ;  $ ~}  $ ~if ( sum + ( x - 1 ) * 10 > y ) {  $ ~~cout << - 1 << endl ;  $ ~~return 0 ;  $ ~} else {  $ ~~cout << ( y - sum ) / 5 << endl ;  $ ~}  $ }
long long sushu ( long long _n ) {  $ ~long long n = _n ;  $ ~for ( int i = 2 ; i <= sqrt ( n ) ; ++ i ) {  $ ~~if ( n % i == 0 ) return n / i ;  $ ~}  $ ~return 1 ;  $ }  $ long long cnt ( long long n , long long m , long long t ) {  $ ~long long ans = - 1 ;  $ ~if ( n - 1 > t )  $ ~~ans = max ( ( n / ( t + 1 ) ) * m , ans ) ;  $ ~else  $ ~~ans = max ( m / ( t - n + 1 + 1 ) , ans ) ;  $ ~long long t1 = sushu ( n ) ;  $ ~if ( t > t1 ) {  $ ~~t -= ( t1 - 1 ) ;  $ ~~int tt = ceil ( ( t - m + 1 ) / t1 ) ;  $ ~~long long _n = n / t1 ;  $ ~~if ( m - 1 >= t )  $ ~~~ans = max ( ans , ( m / ( t + 1 ) ) * _n ) ;  $ ~~else if ( tt != 0 )  $ ~~~ans = max ( ans , _n / ( tt + 1 ) ) ;  $ ~}  $ ~return ans ;  $ }  $ int main ( ) {  $ ~long long n , m , t ;  $ ~cin >> n >> m >> t ;  $ ~long long maxt = ( long long ) ( n - 1 ) + ( m - 1 ) ;  $ ~if ( maxt < t )  $ ~~cout << - 1 << endl ;  $ ~else {  $ ~~long long ans = - 1 ;  $ ~~ans = max ( cnt ( n , m , t ) , cnt ( m , n , t ) ) ;  $ ~~cout << ans << endl ;  $ ~}  $ }
int main ( ) {  $ ~long long n ;  $ ~cin >> n ;  $ ~long long a , b , c , d , suma , sumAux ;  $ ~cin >> a >> b >> c >> d ;  $ ~long long cont = 1 ;  $ ~suma = a + b + c + d ;  $ ~for ( long long i = 0 ; i < n - 1 ; i ++ ) {  $ ~~cin >> a >> b >> c >> d ;  $ ~~sumAux = a + b + c + d ;  $ ~~if ( sumAux > suma ) cont ++ ;  $ ~}  $ ~cout << cont << endl ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~long long n , a , b , c , remaind , c1 = 0 , c2 = 0 , t1 ;  $ ~cin >> n >> a >> b >> c ;  $ ~if ( a > n && b > n ) {  $ ~~cout << "0" << endl ;  $ ~~return 0 ;  $ ~}  $ ~if ( n >= a ) {  $ ~~c1 = n / a ;  $ ~~remaind = n % a ;  $ ~~if ( remaind >= b ) {  $ ~~~remaind -= c ;  $ ~~~c1 += ( remaind / ( b - c ) ) ;  $ ~~~t1 = c1 * ( b - c ) ;  $ ~~~t1 = remaind - t1 ;  $ ~~~t1 += c ;  $ ~~~if ( t1 >= b ) c1 ++ ;  $ ~~}  $ ~}  $ ~if ( n >= b ) {  $ ~~n = n - c ;  $ ~~c2 = n / ( b - c ) ;  $ ~~t1 = c2 * ( b - c ) ;  $ ~~t1 = n - t1 ;  $ ~~t1 += c ;  $ ~~if ( t1 >= b ) {  $ ~~~c2 ++ ;  $ ~~~t1 -= ( b - c ) ;  $ ~~}  $ ~~if ( t1 >= a ) { c2 += ( t1 / a ) ; }  $ ~}  $ ~c1 = max ( c1 , c2 ) ;  $ ~cout << c1 << endl ;  $ ~return 0 ;  $ }
int test_case ;  $ char A [ 100 ] [ 100 ] ;  $ int B [ 100 ] [ 100 ] ;  $ int main ( ) {  $ ~cin >> test_case ;  $ ~while ( test_case -- ) {  $ ~~for ( int i = 1 ; i <= 8 ; i ++ ) cin >> A [ i ] + 1 ;  $ ~~int a = 0 , b = 0 , c = 0 , d = 0 ;  $ ~~for ( int i = 1 ; i <= 8 ; i ++ ) {  $ ~~~for ( int j = 1 ; j <= 8 ; j ++ ) {  $ ~~~~if ( A [ i ] [ j ] == 'K' ) {  $ ~~~~~if ( a == 0 ) {  $ ~~~~~~a = i ;  $ ~~~~~~b = j ;  $ ~~~~~} else {  $ ~~~~~~c = i ;  $ ~~~~~~d = j ;  $ ~~~~~}  $ ~~~~}  $ ~~~}  $ ~~}  $ ~~if ( ( a + b ) % 4 == ( c + d ) % 4 && a % 4 == c % 4 )  $ ~~~cout << "YES" << endl ;  $ ~~else  $ ~~~cout << "NO" << endl ;  $ ~}  $ ~return 0 ;  $ }
const int maxn = 3e5 + 5 ;  $ const double pi = 3.1415926535 ;  $ const long long mod = 1e9 + 7 ;  $ int a [ maxn ] , b [ maxn ] ;  $ int main ( ) {  $ ~int n ;  $ ~while ( cin >> n ) {  $ ~~memset ( a , 0 , sizeof ( a ) ) , memset ( b , 0 , sizeof ( b ) ) ;  $ ~~long long ans = 0 , k = 0 , pos = 0 ;  $ ~~for ( int i = 1 ; i <= n ; i ++ ) {  $ ~~~cin >> a [ i ] ;  $ ~~~for ( int j = 1 ; j <= a [ i ] ; j ++ ) {  $ ~~~~int x ;  $ ~~~~cin >> x ;  $ ~~~~if ( b [ i ] < x ) { b [ i ] = x ; }  $ ~~~}  $ ~~~if ( k < b [ i ] ) {  $ ~~~~k = b [ i ] ;  $ ~~~~pos = i ;  $ ~~~}  $ ~~}  $ ~~for ( int i = 1 ; i <= n ; i ++ ) {  $ ~~~if ( i == pos )  $ ~~~~continue ;  $ ~~~else {  $ ~~~~ans += ( long long ) a [ i ] * ( b [ pos ] - b [ i ] ) ;  $ ~~~}  $ ~~}  $ ~~cout << ans << endl ;  $ ~}  $ }
int hor [ 100 ] ;  $ int ver [ 100 ] ;  $ vector < int > hasil ;  $ int main ( ) {  $ ~memset ( hor , 0 , sizeof ( hor ) ) ;  $ ~memset ( ver , 0 , sizeof ( ver ) ) ;  $ ~int n ;  $ ~cin >> n ;  $ ~for ( int i = 1 ; i <= pow ( n , 2 ) ; i ++ ) {  $ ~~int h , v ;  $ ~~cin >> h >> v ;  $ ~~if ( hor [ h ] == 0 && ver [ v ] == 0 ) {  $ ~~~hor [ h ] = 1 ;  $ ~~~ver [ v ] = 1 ;  $ ~~~hasil . push_back ( i ) ;  $ ~~}  $ ~}  $ ~for ( int i = 0 ; i < hasil . size ( ) - 1 ; i ++ ) { cout << hasil [ i ] << " " ; }  $ ~cout << hasil [ hasil . size ( ) - 1 ] << endl ;  $ }
int main ( ) {  $ ~int a , b , c , d ;  $ ~while ( cin >> a >> b >> c >> d ) {  $ ~~int i = 0 , j = 0 , flag = 233 ;  $ ~~for ( i = 0 ; i <= 10000 ; i ++ ) {  $ ~~~for ( j = 0 ; j <= 10000 ; j ++ )  $ ~~~~if ( b + a * i == d + c * j ) {  $ ~~~~~cout << b + a * i << endl ;  $ ~~~~~flag = 1 ;  $ ~~~~~break ;  $ ~~~~}  $ ~~~if ( b + a * i == d + c * j ) break ;  $ ~~}  $ ~~if ( flag == 233 ) cout << "-1" << endl ;  $ ~}  $ ~return 0 ;  $ }
int main ( ) {  $ ~int n , m , i , j , k ;  $ ~int a [ 15 ] , b [ 15 ] , c [ 15 ] ;  $ ~cin >> n >> m ;  $ ~for ( i = 0 ; i < n ; i ++ ) cin >> a [ i ] ;  $ ~for ( j = 0 ; j < m ; j ++ ) cin >> b [ j ] ;  $ ~k = 0 ;  $ ~for ( i = 0 ; i < n ; i ++ ) {  $ ~~for ( j = 0 ; j < m ; j ++ ) {  $ ~~~if ( a [ i ] == b [ j ] ) {  $ ~~~~c [ k ] = a [ i ] ;  $ ~~~~k ++ ;  $ ~~~~break ;  $ ~~~}  $ ~~}  $ ~}  $ ~if ( k == 0 )  $ ~~cout << endl ;  $ ~else {  $ ~~for ( i = 0 ; i < k - 1 ; i ++ ) { cout << c [ i ] << " " ; }  $ ~~cout << c [ k - 1 ] << endl ;  $ ~}  $ ~return 0 ;  $ }
map < string , int > m ;  $ int main ( ) {  $ ~string a , b ;  $ ~int s ;  $ ~m [ "saturday" ] = 1 ;  $ ~m [ "sunday" ] = 2 ;  $ ~m [ "monday" ] = 3 ;  $ ~m [ "tuesday" ] = 4 ;  $ ~m [ "wednesday" ] = 5 ;  $ ~m [ "thursday" ] = 6 ;  $ ~m [ "friday" ] = 7 ;  $ ~cin >> a >> b ;  $ ~s = ( ( m [ b ] + 7 ) - m [ a ] ) % 7 ;  $ ~if ( s == 0 || s == 2 || s == 3 ) {  $ ~~cout << "YES" << endl ;  $ ~~return 0 ;  $ ~} else {  $ ~~cout << "NO" << endl ;  $ ~~return 0 ;  $ ~}  $ }
long long int mod = 1000000007 ;  $ long long int MOD = 998244353 ;  $ int main ( ) {  $ ~string s ;  $ ~cin >> s ;  $ ~int len = s . size ( ) ;  $ ~int a = 0 , b = 0 , c = 0 ;  $ ~for ( int i = 0 ; i < len ; i ++ ) {  $ ~~if ( s [ i ] == '(' ) {  $ ~~~a ++ ;  $ ~~} else if ( s [ i ] == ')' ) {  $ ~~~b ++ ;  $ ~~} else {  $ ~~~c ++ ;  $ ~~}  $ ~}  $ ~vector < int > A ;  $ ~int x = 0 , y = 0 ;  $ ~if ( b > a || ( b == a && c > 0 ) ) {  $ ~~cout << - 1 << endl ;  $ ~~return 0 ;  $ ~}  $ ~int cnt = ( a - b ) ;  $ ~string ans = "" ;  $ ~for ( int i = 0 ; i < len ; i ++ ) {  $ ~~if ( s [ i ] == '(' || s [ i ] == ')' ) {  $ ~~~ans += s [ i ] ;  $ ~~} else if ( c > 1 ) {  $ ~~~ans += ")" ;  $ ~~~c -- ;  $ ~~~cnt -- ;  $ ~~~A . push_back ( 1 ) ;  $ ~~} else {  $ ~~~A . push_back ( cnt ) ;  $ ~~~for ( int j = 0 ; j < cnt ; j ++ ) { ans += ")" ; }  $ ~~~c -- ;  $ ~~}  $ ~}  $ ~for ( int i = 0 ; i < ans . size ( ) ; i ++ ) {  $ ~~if ( ans [ i ] == '(' ) {  $ ~~~x ++ ;  $ ~~} else {  $ ~~~y ++ ;  $ ~~}  $ ~~if ( x < y ) {  $ ~~~cout << - 1 << endl ;  $ ~~~return 0 ;  $ ~~}  $ ~}  $ ~for ( int i = 0 ; i < A . size ( ) ; i ++ ) { cout << A [ i ] << endl ; }  $ ~return 0 ;  $ }
bool check ( int x1 , int y1 , int x2 , int y2 , int x3 , int y3 ) {  $ ~int a , b , c ;  $ ~a = ( x1 - x2 ) * ( x1 - x2 ) + ( y1 - y2 ) * ( y1 - y2 ) ;  $ ~b = ( x1 - x3 ) * ( x1 - x3 ) + ( y1 - y3 ) * ( y1 - y3 ) ;  $ ~c = ( x3 - x2 ) * ( x3 - x2 ) + ( y3 - y2 ) * ( y3 - y2 ) ;  $ ~if ( a == 0 || b == 0 || c == 0 ) return 0 ;  $ ~if ( a + b == c || a + c == b || b + c == a )  $ ~~return 1 ;  $ ~else  $ ~~return 0 ;  $ }  $ int main ( ) {  $ ~int move [ 4 ] [ 2 ] = { { 0 , 1 } , { 1 , 0 } , { 0 , - 1 } , { - 1 , 0 } } ;  $ ~int x1 [ 4 ] , y1 [ 4 ] ;  $ ~for ( int i = 0 ; i < 3 ; i ++ ) { cin >> x1 [ i ] >> y1 [ i ] ; }  $ ~if ( check ( x1 [ 0 ] , y1 [ 0 ] , x1 [ 1 ] , y1 [ 1 ] , x1 [ 2 ] , y1 [ 2 ] ) ) {  $ ~~cout << "RIGHT" << endl ;  $ ~~return 0 ;  $ ~}  $ ~int tx , ty ;  $ ~for ( int i = 0 ; i <= 3 ; i ++ ) {  $ ~~for ( int j = 0 ; j <= 3 ; j ++ ) {  $ ~~~tx = x1 [ i ] + move [ j ] [ 0 ] ;  $ ~~~ty = y1 [ i ] + move [ j ] [ 1 ] ;  $ ~~~if ( i == 0 && check ( tx , ty , x1 [ 1 ] , y1 [ 1 ] , x1 [ 2 ] , y1 [ 2 ] ) ) {  $ ~~~~cout << "ALMOST" << endl ;  $ ~~~~return 0 ;  $ ~~~}  $ ~~~if ( i == 1 && check ( x1 [ 0 ] , y1 [ 0 ] , tx , ty , x1 [ 2 ] , y1 [ 2 ] ) ) {  $ ~~~~cout << "ALMOST" << endl ;  $ ~~~~return 0 ;  $ ~~~}  $ ~~~if ( i == 2 && check ( x1 [ 0 ] , y1 [ 0 ] , x1 [ 1 ] , y1 [ 1 ] , tx , ty ) ) {  $ ~~~~cout << "ALMOST" << endl ;  $ ~~~~return 0 ;  $ ~~~}  $ ~~}  $ ~~if ( i == 3 ) cout << "NEITHER" << endl ;  $ ~}  $ ~return 0 ;  $ }
const int maxn = 4e6 ;  $ int prime [ maxn ] ;  $ bool vis [ maxn ] ;  $ vector < long long > ans ;  $ int cnt = 0 ;  $ void Prime ( ) {  $ ~memset ( vis , false , sizeof vis ) ;  $ ~for ( int i = 2 ; i < maxn ; i ++ ) {  $ ~~if ( ! vis [ i ] ) prime [ cnt ++ ] = i ;  $ ~~for ( int j = 0 ; j < cnt && i * prime [ j ] < maxn ; j ++ ) {  $ ~~~vis [ i * prime [ j ] ] = true ;  $ ~~~if ( i % prime [ j ] == 0 ) break ;  $ ~~}  $ ~}  $ }  $ int main ( ) {  $ ~long long n ;  $ ~cin >> n ;  $ ~for ( long long i = 2 ; i * i <= n ; i ++ ) {  $ ~~if ( n % i == 0 ) {  $ ~~~while ( n % i == 0 ) {  $ ~~~~n /= i ;  $ ~~~~ans . push_back ( i ) ;  $ ~~~}  $ ~~}  $ ~}  $ ~if ( n != 1 ) ans . push_back ( n ) ;  $ ~if ( ans . size ( ) == 0 || ans . size ( ) == 1 || ans . size ( ) >= 3 ) {  $ ~~cout << 1 << endl ;  $ ~~if ( ans . size ( ) == 0 || ans . size ( ) == 1 )  $ ~~~cout << 0 << endl ;  $ ~~else  $ ~~~cout << ans [ 0 ] * ans [ 1 ] << endl ;  $ ~} else  $ ~~cout << 2 << endl ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~int n , x , y , i , len , a [ 100005 ] ;  $ ~string s ;  $ ~cin >> s ;  $ ~len = s . size ( ) ;  $ ~for ( i = 0 ; i < len ; i ++ )  $ ~~if ( s [ i ] != 'a' ) {  $ ~~~x = i ;  $ ~~~break ;  $ ~~}  $ ~if ( i == len )  $ ~~s [ len - 1 ] = 'z' ;  $ ~else {  $ ~~for ( i = x + 1 ; i < len ; i ++ )  $ ~~~if ( s [ i ] == 'a' ) {  $ ~~~~y = i - 1 ;  $ ~~~~break ;  $ ~~~}  $ ~~if ( i == len ) y = len - 1 ;  $ ~~for ( i = x ; i <= y ; i ++ ) s [ i ] = s [ i ] - 1 ;  $ ~}  $ ~cout << s << endl ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~string a ;  $ ~while ( cin >> a ) {  $ ~~bool flag = true ;  $ ~~int num [ 3 ] = { 0 } ;  $ ~~for ( int i = 0 ; i < a . size ( ) ; i ++ ) {  $ ~~~num [ a [ i ] - 'a' ] ++ ;  $ ~~~if ( i != 0 && a [ i ] < a [ i - 1 ] ) {  $ ~~~~flag = false ;  $ ~~~~break ;  $ ~~~}  $ ~~}  $ ~~if ( num [ 2 ] != num [ 1 ] && num [ 2 ] != num [ 0 ] ) flag = false ;  $ ~~if ( num [ 0 ] == 0 || num [ 1 ] == 0 ) flag = false ;  $ ~~if ( flag )  $ ~~~cout << "YES" << endl ;  $ ~~else  $ ~~~cout << "NO" << endl ;  $ ~}  $ }
const int inf = 0 x3f3f3f3f ;  $ const long long linf = 0 x3f3f3f3fLL ;  $ const int EPS = 1e-6 ;  $ const long long mod = 1000000007 ;  $ int main ( ) {  $ ~string exp ;  $ ~cin >> exp ;  $ ~int a = 0 , b = 0 , c = 0 ;  $ ~int t = 0 ;  $ ~int ind_s = 0 ;  $ ~int ind_e = 0 ;  $ ~for ( int i = 0 ; i < exp . size ( ) ; i ++ ) {  $ ~~if ( exp [ i ] == '+' || exp [ i ] == '=' ) {  $ ~~~t ++ ;  $ ~~~if ( exp [ i ] == '+' )  $ ~~~~ind_s = i ;  $ ~~~else  $ ~~~~ind_e = i ;  $ ~~~continue ;  $ ~~}  $ ~~if ( t == 0 )  $ ~~~a ++ ;  $ ~~else if ( t == 1 )  $ ~~~b ++ ;  $ ~~else if ( t == 2 )  $ ~~~c ++ ;  $ ~}  $ ~string str ;  $ ~if ( ( a + b - 1 ) != ( c + 1 ) && ( a + b + 1 ) != ( c - 1 ) && ( a + b ) != c )  $ ~~puts ( "Impossible" ) ;  $ ~else {  $ ~~if ( a + b == c )  $ ~~~cout << exp << endl ;  $ ~~else if ( ( ( a + b ) - 1 ) == ( c + 1 ) ) {  $ ~~~if ( a == 1 ) {  $ ~~~~string s1 = exp . substr ( 0 , ind_s + 1 ) ;  $ ~~~~string s2 = exp . substr ( ind_s + 2 , ( ind_e - 1 ) - ind_s ) ;  $ ~~~~string s3 = exp . substr ( ind_e + 1 , ( exp . size ( ) - 1 ) - ind_e ) + "|" ;  $ ~~~~cout << s1 + s2 + s3 << endl ;  $ ~~~} else {  $ ~~~~str = exp . substr ( 1 , exp . size ( ) - 1 ) + "|" ;  $ ~~~~cout << str << endl ;  $ ~~~}  $ ~~} else {  $ ~~~str = "|" + exp . substr ( 0 , exp . size ( ) - 1 ) ;  $ ~~~cout << str << endl ;  $ ~~}  $ ~}  $ ~return 0 ;  $ }
int main ( ) {  $ ~long long int n , m , k , ans ;  $ ~while ( cin >> n >> m >> k ) {  $ ~~ans = 0 ;  $ ~~if ( n + m - 2 < k ) {  $ ~~~cout << - 1 << endl ;  $ ~~} else {  $ ~~~if ( n > k )  $ ~~~~ans = n / ( k + 1 ) * m ;  $ ~~~else  $ ~~~~ans = m / ( k - n + 2 ) ;  $ ~~~if ( m > k )  $ ~~~~ans = max ( m / ( k + 1 ) * n , ans ) ;  $ ~~~else  $ ~~~~ans = max ( n / ( k - m + 2 ) , ans ) ;  $ ~~~cout << ans << endl ;  $ ~~}  $ ~}  $ ~return 0 ;  $ }
const int MAXN = 100000 + 7 ;  $ const int mod = 23333333 ;  $ long long l , r , ans = 0 , n ;  $ int a [ 20 ] ;  $ long long Solve ( long long n ) {  $ ~if ( n < 10 ) return n ;  $ ~int x = n % 10 , y ;  $ ~long long tmp = n ;  $ ~while ( tmp >= 10 ) tmp /= 10 ;  $ ~y = tmp ;  $ ~if ( x >= y )  $ ~~return n / 10 + 9 ;  $ ~else  $ ~~return n / 10 + 8 ;  $ }  $ int main ( ) {  $ ~long long L , R ;  $ ~cin >> l >> r ;  $ ~ans = Solve ( r ) - Solve ( l - 1 ) ;  $ ~cout << ans << endl ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~int n ;  $ ~cin >> n ;  $ ~vector < int > v ( n ) ;  $ ~for ( int i = 0 ; i < n ; i ++ ) cin >> v [ i ] ;  $ ~int a = 0 , b = 0 ;  $ ~for ( int i = 0 ; i < n ; i ++ ) {  $ ~~if ( v [ i ] == 25 )  $ ~~~a ++ ;  $ ~~else if ( v [ i ] == 50 && a >= 1 )  $ ~~~a -- , b ++ ;  $ ~~else if ( v [ i ] == 100 && b >= 1 && a >= 1 )  $ ~~~b -- , a -- ;  $ ~~else if ( v [ i ] == 100 && a >= 3 )  $ ~~~a -= 3 ;  $ ~~else {  $ ~~~cout << "NO\n" ;  $ ~~~return 0 ;  $ ~~}  $ ~}  $ ~cout << "YES\n" ;  $ ~return 0 ;  $ }
long long n ;  $ vector < long long > vct ;  $ int main ( ) {  $ ~cin >> n ;  $ ~long long x = n ;  $ ~for ( long long i = 2 ; i * i <= n ; i ++ ) {  $ ~~while ( n % i == 0 ) {  $ ~~~vct . push_back ( i ) ;  $ ~~~n /= i ;  $ ~~}  $ ~}  $ ~if ( x != n && n != 1 ) vct . push_back ( n ) ;  $ ~if ( vct . size ( ) > 2 )  $ ~~cout << "1" << endl << vct [ 0 ] * vct [ 1 ] << endl ;  $ ~else if ( vct . size ( ) == 2 )  $ ~~cout << "2" << endl ;  $ ~else  $ ~~cout << "1" << endl << "0" << endl ;  $ ~return 0 ;  $ }
char c [ 200200 ] ;  $ int ic ;  $ int check ( char c ) {  $ ~return c == 'a' || c == 'o' || c == 'y' || c == 'e' || c == 'u' || c == 'i' ;  $ }  $ int main ( ) {  $ ~string s ;  $ ~cin >> s ;  $ ~for ( int i = 0 ; i < s . length ( ) ; i ++ ) {  $ ~~if ( s [ i ] >= 'A' && s [ i ] <= 'Z' ) s [ i ] = s [ i ] + 32 ;  $ ~~c [ ic ++ ] = s [ i ] ;  $ ~}  $ ~for ( int i = 0 ; i < ic ; i ++ ) {  $ ~~char ch = c [ i ] ;  $ ~~if ( check ( ch ) ) {  $ ~~~for ( int j = i ; j < ic - 1 ; j ++ ) c [ j ] = c [ j + 1 ] ;  $ ~~~ic -- ;  $ ~~~i -- ;  $ ~~} else {  $ ~~~for ( int j = ic ; j >= i + 1 ; j -- ) c [ j ] = c [ j - 1 ] ;  $ ~~~ic ++ ;  $ ~~~c [ i ] = '.' ;  $ ~~~i ++ ;  $ ~~}  $ ~}  $ ~for ( int i = 0 ; i < ic ; i ++ ) cout << c [ i ] ;  $ ~cout << endl ;  $ }
pair < int , int > trees [ 105 ] ;  $ int main ( ) {  $ ~int n ;  $ ~cin >> n ;  $ ~int sum = 0 , sum_pos = 0 , sum_neg = 0 ;  $ ~for ( int i = 0 ; i < n ; i ++ ) {  $ ~~cin >> trees [ i ] . first >> trees [ i ] . second ;  $ ~~sum += trees [ i ] . second ;  $ ~~if ( trees [ i ] . first < 0 ) sum_neg += trees [ i ] . second ;  $ ~~if ( trees [ i ] . first > 0 ) sum_pos += trees [ i ] . second ;  $ ~}  $ ~sort ( trees , trees + n ) ;  $ ~int pos = 0 , neg = 0 , center = - 1 ;  $ ~for ( int i = 0 ; i < n ; i ++ ) {  $ ~~if ( trees [ i ] . first > 0 ) pos ++ ;  $ ~~if ( trees [ i ] . first > 0 && center == - 1 ) center = i ;  $ ~}  $ ~if ( pos == 0 ) center = n ;  $ ~neg = n - pos ;  $ ~if ( abs ( pos - neg ) <= 1 )  $ ~~cout << sum << endl ;  $ ~else {  $ ~~if ( neg > pos ) {  $ ~~~sum = sum_pos ;  $ ~~~for ( int i = center - 1 , j = 0 ; i >= 0 && j < pos + 1 ; i -- , j ++ ) sum += trees [ i ] . second ;  $ ~~} else {  $ ~~~sum = sum_neg ;  $ ~~~for ( int i = center , j = 0 ; i < n && j < neg + 1 ; i ++ , j ++ ) sum += trees [ i ] . second ;  $ ~~}  $ ~~cout << sum << endl ;  $ ~}  $ }
int n , s ;  $ int a , b ;  $ int maxn = - 9999 ;  $ long long x , y ;  $ int main ( ) {  $ ~cin >> n >> s ;  $ ~y = s * 100 ;  $ ~for ( int i = 0 ; i < n ; i ++ ) {  $ ~~cin >> a >> b ;  $ ~~x = a * 100 + b ;  $ ~~if ( x <= y ) {  $ ~~~if ( x % 100 == 0 ) {  $ ~~~~if ( 0 > maxn ) maxn = 0 ;  $ ~~~} else if ( ( 100 - x % 100 ) > maxn )  $ ~~~~maxn = 100 - x % 100 ;  $ ~~}  $ ~}  $ ~if ( maxn < 0 )  $ ~~cout << "-1" << endl ;  $ ~else  $ ~~cout << maxn << endl ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~int n ;  $ ~cin >> n ;  $ ~int k = ( n & 1 ) ? ( n / 2 ) : ( n - ( int ) pow ( 2 , ( int ) log2 ( n ) ) ) / 2 ;  $ ~cout << k << endl ;  $ }
const long long mod = 998244353 ;  $ const int maxn = 2e5 ;  $ int main ( ) {  $ ~int t ;  $ ~long long n , a , b , c ;  $ ~cin >> n ;  $ ~cin >> a >> b >> c ;  $ ~long long one = a , two = b - c ;  $ ~long long sum1 = n / one , yu1 = n % one , ci ;  $ ~while ( yu1 / b > 0 ) {  $ ~~ci = ( yu1 - b ) / two ;  $ ~~if ( ci == 0 && yu1 >= b ) {  $ ~~~if ( yu1 / a > 0 && yu1 / a * a < yu1 / b * two ) {  $ ~~~~yu1 = yu1 - yu1 / a * a ;  $ ~~~~sum1 = sum1 + yu1 / a ;  $ ~~~} else {  $ ~~~~yu1 -= two ;  $ ~~~~sum1 ++ ;  $ ~~~}  $ ~~} else {  $ ~~~yu1 = yu1 - ci * two ;  $ ~~~sum1 += ci ;  $ ~~}  $ ~}  $ ~long long yu2 = n , sum2 = 0 , ans = 0 ;  $ ~while ( yu2 / b > 0 ) {  $ ~~ci = ( yu2 - b ) / two ;  $ ~~if ( ci == 0 && yu2 >= b ) {  $ ~~~if ( yu2 / a > 0 && yu2 / a * a < yu2 / b * two ) {  $ ~~~~yu2 = yu2 - yu2 / a * a ;  $ ~~~~sum2 += yu2 / a ;  $ ~~~} else {  $ ~~~~yu2 -= two ;  $ ~~~~sum2 ++ ;  $ ~~~}  $ ~~} else {  $ ~~~yu2 = yu2 - ci * two ;  $ ~~~sum2 += ci ;  $ ~~}  $ ~}  $ ~sum2 += yu2 / one ;  $ ~yu2 = yu2 % one ;  $ ~ans = max ( ans , sum2 ) ;  $ ~ans = max ( sum1 , ans ) ;  $ ~cout << ans << endl ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~int n ;  $ ~cin >> n ;  $ ~bool horizontal [ n + 1 ] = { } ;  $ ~bool vertikal [ n + 1 ] = { } ;  $ ~bool theyareworking [ n * n + 1 ] = { } ;  $ ~for ( int i = 1 ; i <= n * n ; i ++ ) {  $ ~~int v , h ;  $ ~~cin >> h >> v ;  $ ~~if ( horizontal [ h ] == false && vertikal [ v ] == false ) {  $ ~~~theyareworking [ i ] = true ;  $ ~~~horizontal [ h ] = true ;  $ ~~~vertikal [ v ] = true ;  $ ~~}  $ ~}  $ ~bool hihi = false ;  $ ~for ( int i = 1 ; i <= n * n ; i ++ ) {  $ ~~if ( theyareworking [ i ] == true ) {  $ ~~~if ( hihi == false ) {  $ ~~~~cout << i ;  $ ~~~~hihi = true ;  $ ~~~} else {  $ ~~~~cout << " " << i ;  $ ~~~}  $ ~~}  $ ~}  $ ~cout << endl ;  $ }
int main ( ) {  $ ~int n , ts [ 26 ] ;  $ ~string s ;  $ ~cin >> n >> s ;  $ ~if ( n == 1 ) {  $ ~~cout << "Yes" << endl ;  $ ~~return 0 ;  $ ~}  $ ~memset ( ts , 0 , sizeof ( ts ) ) ;  $ ~for ( int i = 0 ; i < n ; i ++ ) { ts [ s [ i ] - 'a' ] ++ ; }  $ ~sort ( ts , ts + 26 ) ;  $ ~if ( ts [ 25 ] < 2 )  $ ~~cout << "No" << endl ;  $ ~else  $ ~~cout << "Yes" << endl ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~int i , j = 0 , n , k = 0 , p , t = 0 , b [ 51 ] , coun = 0 , temp = 0 ;  $ ~cin >> n ;  $ ~for ( i = 0 ; i < n ; i ++ ) {  $ ~~cin >> p ;  $ ~~if ( p == 25 ) j ++ ;  $ ~~if ( p == 50 ) {  $ ~~~j -- ;  $ ~~~k ++ ;  $ ~~~if ( j < 0 ) temp = 1 ;  $ ~~} else if ( p == 100 ) {  $ ~~~if ( k != 0 & j != 0 ) {  $ ~~~~k -- ;  $ ~~~~j -- ;  $ ~~~} else {  $ ~~~~j -= 3 ;  $ ~~~}  $ ~~~if ( j < 0 ) temp = 1 ;  $ ~~}  $ ~}  $ ~if ( temp == 0 )  $ ~~cout << "YES" << endl ;  $ ~else  $ ~~cout << "NO" << endl ;  $ }
int main ( ) {  $ ~long long n , r , c , w = 0 , b = 0 ;  $ ~cin >> n >> r >> c ;  $ ~if ( r == 1 ) w = c - 1 ;  $ ~if ( c == 1 ) w = r - 1 ;  $ ~if ( w == 0 ) w = min ( r , c ) - 1 + max ( r , c ) - min ( r , c ) ;  $ ~if ( r == n ) b = abs ( c - n ) ;  $ ~if ( c == n ) b = abs ( r - n ) ;  $ ~if ( b == 0 ) b = n - max ( r , c ) + abs ( min ( r , c ) - max ( r , c ) ) ;  $ ~if ( w <= b )  $ ~~cout << "White"  $ ~~~<< "\n" ;  $ ~else  $ ~~cout << "Black"  $ ~~~<< "\n" ;  $ }
int nums [ 15000001 ] ;  $ int divisors [ 15000001 ] ;  $ inline int get_gcd ( int a , int b ) {  $ ~while ( ( a %= b ) && ( b %= a ) )  $ ~~;  $ ~return a + b ;  $ }  $ int primes [ 15000001 ] ;  $ void get_prime ( int begin , int end ) {  $ ~for ( int i = 0 ; i < end - begin + 1 ; ++ i ) {  $ ~~if ( primes [ i ] == 0 || primes [ i ] == 1 ) {  $ ~~~primes [ i ] = 0 ;  $ ~~~continue ;  $ ~~} else {  $ ~~~int appear_ctr = 0 ;  $ ~~~if ( nums [ i ] != 0 ) appear_ctr += nums [ i ] ;  $ ~~~for ( int j = i + primes [ i ] ; j < end - begin + 1 ; j += primes [ i ] ) {  $ ~~~~primes [ j ] = 0 ;  $ ~~~~if ( nums [ j ] != 0 ) appear_ctr += nums [ j ] ;  $ ~~~}  $ ~~~divisors [ i ] = appear_ctr ;  $ ~~}  $ ~}  $ }  $ int main ( ) {  $ ~int n ;  $ ~int gcd = 1 ;  $ ~cin >> n ;  $ ~bool is_first = true ;  $ ~int first_ctr = 0 ;  $ ~int max_num = 0 ;  $ ~int first ;  $ ~for ( int currnum = 1 ; currnum <= n ; ++ currnum ) {  $ ~~int temp ;  $ ~~cin >> temp ;  $ ~~max_num = max ( max_num , temp ) ;  $ ~~++ nums [ temp ] ;  $ ~~if ( is_first == true ) {  $ ~~~first = temp ;  $ ~~~gcd = temp ;  $ ~~~is_first = false ;  $ ~~} else if ( nums [ temp ] == 1 )  $ ~~~gcd = get_gcd ( gcd , temp ) ;  $ ~~if ( temp == first ) ++ first_ctr ;  $ ~}  $ ~if ( first_ctr == n ) {  $ ~~cout << - 1 << endl ;  $ ~~return 0 ;  $ ~}  $ ~if ( gcd != 1 ) {  $ ~~for ( int currnum = 1 ; currnum <= max_num ; ++ currnum ) {  $ ~~~if ( nums [ currnum ] != 0 ) {  $ ~~~~int appear = nums [ currnum ] ;  $ ~~~~nums [ currnum ] = 0 ;  $ ~~~~nums [ currnum / gcd ] = appear ;  $ ~~~}  $ ~~}  $ ~}  $ ~for ( int currnum = 1 ; currnum <= max_num ; ++ currnum ) { primes [ currnum ] = currnum ; }  $ ~get_prime ( 1 , max_num + 1 ) ;  $ ~int max_appear = 0 ;  $ ~for ( int currdiv = 1 ; currdiv <= max_num ; ++ currdiv ) { max_appear = max ( max_appear , divisors [ currdiv ] ) ; }  $ ~cout << n - max_appear << endl ;  $ ~return 0 ;  $ }
int presub ( string s ) {  $ ~int aux ;  $ ~for ( int pos = 1 ; pos < ( int ) s . size ( ) ; pos ++ ) {  $ ~~aux = 0 ;  $ ~~while ( aux + pos < ( int ) s . size ( ) && s [ aux ] == s [ pos + aux ] ) aux ++ ;  $ ~~if ( aux + pos == ( int ) s . size ( ) ) return pos ;  $ ~}  $ ~return ( int ) s . size ( ) ;  $ }  $ int main ( ) {  $ ~string s , t ;  $ ~int n , k , pos ;  $ ~cin >> n >> k ;  $ ~cin >> t ;  $ ~pos = n - presub ( t ) ;  $ ~s = t ;  $ ~for ( int i = 0 ; i < k - 1 ; i ++ )  $ ~~for ( int j = pos ; j < n ; j ++ ) s += t [ j ] ;  $ ~cout << s << endl ;  $ ~return 0 ;  $ }
int a , b , l , r , ans , T ;  $ char s [ 200 ] ;  $ bool vis [ 27 ] ;  $ int dfs ( char cp ) {  $ ~int count = 0 ;  $ ~for ( int i = 0 ; i < a ; i ++ ) s [ i ] = ( 'a' + i ) ;  $ ~for ( int i = a ; i < a + b ; i ++ ) s [ i ] = cp ;  $ ~memset ( vis , false , sizeof ( vis ) ) ;  $ ~for ( int i = b ; i < a + b ; i ++ ) vis [ s [ i ] - 'a' ] = true ;  $ ~int sta = a + b , ed = 0 ;  $ ~while ( sta < 2 * a + b ) {  $ ~~while ( vis [ ed ] ) ed ++ ;  $ ~~s [ sta ] = ed + 'a' ;  $ ~~sta ++ , ed ++ ;  $ ~}  $ ~for ( int i = 2 * a + b ; i < T ; i ++ ) s [ i ] = s [ i - 1 ] ;  $ ~memset ( vis , false , sizeof ( vis ) ) ;  $ ~if ( l <= r ) {  $ ~~for ( int i = l ; i <= r ; i ++ ) {  $ ~~~if ( ! vis [ s [ i ] - 'a' ] ) { count ++ , vis [ s [ i ] - 'a' ] = true ; }  $ ~~}  $ ~} else {  $ ~~for ( int i = 0 ; i <= r ; i ++ ) {  $ ~~~if ( ! vis [ s [ i ] - 'a' ] ) { count ++ , vis [ s [ i ] - 'a' ] = true ; }  $ ~~}  $ ~~for ( int i = l ; i < T ; i ++ ) {  $ ~~~if ( ! vis [ s [ i ] - 'a' ] ) { count ++ , vis [ s [ i ] - 'a' ] = true ; }  $ ~~}  $ ~}  $ ~return count ;  $ }  $ int main ( ) {  $ ~cin >> a >> b >> l >> r ;  $ ~l -- , r -- ;  $ ~if ( a <= b )  $ ~~ans = a + 1 ;  $ ~else  $ ~~ans = 2 * a - b ;  $ ~T = 2 * ( a + b ) ;  $ ~if ( r - l >= T )  $ ~~;  $ ~else {  $ ~~r %= T , l %= T ;  $ ~~for ( int i = 0 ; i < a ; i ++ ) { ans = min ( dfs ( 'a' + i ) , ans ) ; }  $ ~}  $ ~cout << ans << endl ;  $ ~return 0 ;  $ }
long long n ;  $ bool search ( long long t1 ) {  $ ~int l = 0 , r = sqrt ( 8 * n + 1 ) / 2 ;  $ ~int m ;  $ ~int it = 0 ;  $ ~while ( it <= 100 ) {  $ ~~m = ( l + r ) >> 1 ;  $ ~~long long t2 = m * ( m + 1 ) / 2 ;  $ ~~if ( t2 == t1 && t1 != 0 )  $ ~~~return true ;  $ ~~else if ( t2 > t1 )  $ ~~~r = m ;  $ ~~else  $ ~~~l = m ;  $ ~~it ++ ;  $ ~}  $ ~return false ;  $ }  $ int main ( ) {  $ ~long long t1 = 0 ;  $ ~cin >> n ;  $ ~bool found = false ;  $ ~if ( n != 1 ) {  $ ~~for ( int i = 1 ; i <= n && ( i * ( i + 1 ) / 2 ) <= n ; i ++ ) {  $ ~~~t1 = n - ( i * ( i + 1 ) / 2 ) ;  $ ~~~found = search ( t1 ) ;  $ ~~~if ( found ) {  $ ~~~~cout << "YES" << '\n' ;  $ ~~~~break ;  $ ~~~}  $ ~~}  $ ~}  $ ~if ( ! found ) cout << "NO" << '\n' ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~int n , m , i = 0 ;  $ ~string s , s1 ;  $ ~cin >> n >> m ;  $ ~cin >> s >> s1 ;  $ ~if ( s == s1 ) {  $ ~~cout << "YES" << endl ;  $ ~~return 0 ;  $ ~}  $ ~while ( s [ i ] == s1 [ i ] && i < min ( n , m ) ) i ++ ;  $ ~while ( s [ n - 1 ] == s1 [ m - 1 ] && i < min ( n , m ) ) n -- , m -- ;  $ ~cout << ( s [ i ] == '*' && ( n - i ) == 1 ? "YES" : "NO" ) << endl ;  $ }
int main ( ) {  $ ~int n , a = 0 , b = 0 , c ;  $ ~cin >> n ;  $ ~while ( n -- ) {  $ ~~cin >> c ;  $ ~~if ( c == 25 )  $ ~~~a ++ ;  $ ~~else if ( c == 50 ) {  $ ~~~b ++ ;  $ ~~~if ( ! a ) {  $ ~~~~puts ( "NO" ) ;  $ ~~~~return 0 ;  $ ~~~}  $ ~~~a -- ;  $ ~~} else {  $ ~~~if ( a && b )  $ ~~~~a -- , b -- ;  $ ~~~else if ( a >= 3 )  $ ~~~~a -= 3 ;  $ ~~~else {  $ ~~~~puts ( "NO" ) ;  $ ~~~~return 0 ;  $ ~~~}  $ ~~}  $ ~}  $ ~puts ( "YES" ) ;  $ }
int main ( ) {  $ ~int n , m ;  $ ~double k ;  $ ~cin >> n >> m >> k ;  $ ~string a ;  $ ~int s ;  $ ~map < string , double > sk ;  $ ~for ( int i = 0 ; i < n ; i ++ ) {  $ ~~cin >> a >> s ;  $ ~~if ( s * k < 100 )  $ ~~~;  $ ~~else  $ ~~~sk [ a ] = floor ( ( s * k + 0.00001 ) ) ;  $ ~}  $ ~for ( int i = 0 ; i < m ; i ++ ) {  $ ~~cin >> a ;  $ ~~if ( sk [ a ] == 0 ) sk [ a ] = 0 ;  $ ~}  $ ~map < string , double > : : iterator i ;  $ ~cout << sk . size ( ) << endl ;  $ ~for ( i = sk . begin ( ) ; i != sk . end ( ) ; i ++ ) { cout << i -> first << " " << i -> second << "\n" ; }  $ ~return 0 ;  $ }
int main ( ) {  $ ~long long n , a , b , c ;  $ ~while ( cin >> n ) {  $ ~~cin >> a >> b >> c ;  $ ~~long long cnt = 0 ;  $ ~~if ( b - c >= a || ( b - c < a ) && ( n < b ) )  $ ~~~cnt += n / a ;  $ ~~else {  $ ~~~cnt += ( n - b ) / ( b - c ) + 1 ;  $ ~~~n -= cnt * ( b - c ) ;  $ ~~~cnt += n / a ;  $ ~~}  $ ~~cout << cnt << endl ;  $ ~}  $ ~return 0 ;  $ }
const int MAXN = 2e5 + 5 ;  $ int N , L , T , H ;  $ int A [ MAXN ] ;  $ int main ( ) {  $ ~cin >> N >> L >> T ;  $ ~A [ 2 * N + 1 ] = L ;  $ ~for ( int i = 1 ; i <= N ; i ++ ) {  $ ~~cin >> A [ 2 * i - 1 ] >> A [ 2 * i ] ;  $ ~~A [ 2 * i ] += A [ 2 * i - 1 ] ;  $ ~}  $ ~for ( int i = 0 ; i <= N ; i ++ ) { H += ( A [ 2 * i + 1 ] - A [ 2 * i ] ) / T ; }  $ ~cout << H << '\n' ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~long long q ;  $ ~cin >> q ;  $ ~if ( q == 1 ) {  $ ~~cout << "1\n0\n" ;  $ ~~return 0 ;  $ ~}  $ ~long long a = - 1 , b = - 1 ;  $ ~for ( long long d = 2 ; d * d <= q ; d ++ ) {  $ ~~if ( q % d ) continue ;  $ ~~a = d ;  $ ~~b = q / d ;  $ ~~break ;  $ ~}  $ ~if ( a == - 1 ) {  $ ~~cout << "1\n0\n" ;  $ ~~return 0 ;  $ ~}  $ ~for ( long long d = 2 ; d * d <= b ; d ++ ) {  $ ~~if ( b % d ) continue ;  $ ~~cout << "1\n" << a * d << '\n' ;  $ ~~return 0 ;  $ ~}  $ ~cout << "2\n" ;  $ }
int main ( ) {  $ ~long double n ;  $ ~cin >> n ;  $ ~if ( n <= 127 ) {  $ ~~cout << "byte" << endl ;  $ ~} else if ( n <= 32767 ) {  $ ~~cout << "short" << endl ;  $ ~} else if ( n <= 2147483647 ) {  $ ~~cout << "int" << endl ;  $ ~} else if ( n <= 9223372036854775807 ) {  $ ~~cout << "long" << endl ;  $ ~} else {  $ ~~cout << "BigInteger" << endl ;  $ ~}  $ }
int main ( ) {  $ ~int n , m ;  $ ~cin >> n >> m ;  $ ~int dif = 99999999 ;  $ ~while ( m -- ) {  $ ~~int a , b ;  $ ~~cin >> a >> b ;  $ ~~dif = min ( dif , abs ( a - b ) + 1 ) ;  $ ~}  $ ~int j = 0 ;  $ ~cout << dif << endl ;  $ ~while ( j < n ) {  $ ~~cout << j % ( dif ) ;  $ ~~if ( j != n - 1 ) cout << " " ;  $ ~~j ++ ;  $ ~}  $ ~cout << endl ;  $ }
char x [ 11 ] [ 11 ] , y [ 11 ] [ 11 ] ;  $ int b [ 10 ] , n ;  $ int main ( ) {  $ ~cin >> n ;  $ ~for ( int i = 0 ; i < 10 ; i ++ ) b [ i ] = 1 ;  $ ~for ( int i = 0 ; i < n ; i ++ )  $ ~~for ( int j = 0 ; j < n ; j ++ ) cin >> x [ i ] [ j ] ;  $ ~for ( int i = 0 ; i < n ; i ++ )  $ ~~for ( int j = 0 ; j < n ; j ++ ) cin >> y [ i ] [ j ] ;  $ ~for ( int i = 0 ; i < n ; i ++ )  $ ~~for ( int j = 0 ; j < n ; j ++ ) {  $ ~~~if ( x [ i ] [ j ] != y [ i ] [ j ] ) b [ 0 ] = 0 ;  $ ~~~if ( x [ i ] [ j ] != y [ i ] [ n - j - 1 ] ) b [ 1 ] = 0 ;  $ ~~~if ( x [ i ] [ j ] != y [ n - i - 1 ] [ j ] ) b [ 2 ] = 0 ;  $ ~~~if ( x [ i ] [ j ] != y [ n - i - 1 ] [ n - j - 1 ] ) b [ 3 ] = 0 ;  $ ~~~if ( x [ i ] [ j ] != y [ j ] [ n - i - 1 ] ) b [ 4 ] = 0 ;  $ ~~~if ( x [ i ] [ j ] != y [ n - j - 1 ] [ n - i - 1 ] ) b [ 5 ] = 0 ;  $ ~~~if ( x [ i ] [ j ] != y [ j ] [ i ] ) b [ 6 ] = 0 ;  $ ~~~if ( x [ i ] [ j ] != y [ n - j - 1 ] [ i ] ) b [ 7 ] = 0 ;  $ ~~}  $ ~for ( int i = 0 ; i < 8 ; i ++ )  $ ~~if ( b [ i ] == 1 ) {  $ ~~~cout << "Yes\n" ;  $ ~~~return 0 ;  $ ~~}  $ ~cout << "No\n" ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~int n , a [ 1001 ] , b [ 1001 ] , num ;  $ ~cin >> n ;  $ ~num = n ;  $ ~for ( int i = 1 ; i <= n ; i ++ ) { cin >> a [ i ] >> b [ i ] ; }  $ ~for ( int j = 1 ; j <= n ; j ++ ) {  $ ~~for ( int i = 1 ; i <= n ; i ++ ) {  $ ~~~if ( i == j ) { continue ; }  $ ~~~if ( b [ j ] == a [ i ] ) {  $ ~~~~num -- ;  $ ~~~~a [ i ] = 0 ;  $ ~~~}  $ ~~}  $ ~}  $ ~cout << num << endl ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~cout . setf ( ios : : fixed ) ;  $ ~cout . precision ( 20 ) ;  $ ~int n ;  $ ~cin >> n ;  $ ~string s ;  $ ~cin >> s ;  $ ~int ans = 0 ;  $ ~for ( int i = 0 ; i < n ; ++ i ) {  $ ~~if ( s [ i ] == '<' ) {  $ ~~~++ ans ;  $ ~~} else  $ ~~~break ;  $ ~}  $ ~for ( int i = n - 1 ; i >= 0 ; -- i ) {  $ ~~if ( s [ i ] == '>' ) {  $ ~~~++ ans ;  $ ~~} else  $ ~~~break ;  $ ~}  $ ~cout << ans << '\n' ;  $ }
const int M = 100005 ;  $ long long n , m , k ;  $ long long a [ M ] ;  $ long long num [ M ] ;  $ int main ( ) {  $ ~cin >> n >> m >> k ;  $ ~for ( int i = 1 ; i <= n ; i ++ ) cin >> a [ i ] ;  $ ~if ( n % 2 == 0 ) {  $ ~~cout << "0" << endl ;  $ ~~return 0 ;  $ ~}  $ ~long long ans = 0 ;  $ ~long long movs = n / 2 + 1 ;  $ ~if ( movs > m ) {  $ ~~ans = 0 ;  $ ~} else {  $ ~~long long minn = a [ 1 ] ;  $ ~~for ( int i = 2 ; i <= n ; i ++ ) {  $ ~~~if ( i % 2 == 1 ) { minn = min ( a [ i ] , minn ) ; }  $ ~~}  $ ~~ans = min ( minn , ( long long ) m / movs * k ) ;  $ ~}  $ ~cout << ans << endl ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~long long int a , b , s ;  $ ~cin >> a >> b >> s ;  $ ~if ( s < ( abs ( a ) + abs ( b ) ) || ( ( s - abs ( a ) - abs ( b ) ) % 2 ) )  $ ~~cout << "No" << endl ;  $ ~else  $ ~~cout << "Yes" << endl ;  $ ~return 0 ;  $ }
bool ab1 = false , ba1 = false , ab2 = false , ba2 = false ;  $ int main ( ) {  $ ~string s ;  $ ~cin >> s ;  $ ~int n = s . size ( ) ;  $ ~for ( int i = 0 ; i < n - 1 ; ++ i ) {  $ ~~if ( s [ i ] == 'A' && s [ i + 1 ] == 'B' && ! ab1 ) {  $ ~~~ab1 = true ;  $ ~~~i ++ ;  $ ~~} else if ( s [ i ] == 'B' && s [ i + 1 ] == 'A' && ab1 ) {  $ ~~~ba1 = true ;  $ ~~~i ++ ;  $ ~~}  $ ~}  $ ~for ( int i = 0 ; i < n - 1 ; ++ i ) {  $ ~~if ( s [ i ] == 'B' && s [ i + 1 ] == 'A' && ! ba2 ) {  $ ~~~ba2 = true ;  $ ~~~i ++ ;  $ ~~} else if ( s [ i ] == 'A' && s [ i + 1 ] == 'B' && ba2 ) {  $ ~~~ab2 = true ;  $ ~~~i ++ ;  $ ~~}  $ ~}  $ ~if ( ab1 && ba1 )  $ ~~cout << "YES\n" ;  $ ~else if ( ab2 && ba2 )  $ ~~cout << "YES\n" ;  $ ~else  $ ~~cout << "NO\n" ;  $ }
const int MAXN = 100000 ;  $ const long long MOD = 1000000009 ;  $ long long poww_mod ( long long a , long long b ) {  $ ~long long ans = 1 ;  $ ~a = a % MOD ;  $ ~while ( b ) {  $ ~~if ( b & 1 ) ans = ( a * ans ) % MOD ;  $ ~~a = ( a * a ) % MOD ;  $ ~~b >> = 1 ;  $ ~}  $ ~return ans % MOD ;  $ }  $ long long inv ( long long t , long long p ) {  $ ~t = t % p ;  $ ~return t == 1 ? 1 : ( p - p / t ) * inv ( p % t , p ) % p ;  $ }  $ int n = 0 , k = 0 , a = 0 , b = 0 ;  $ long long ans [ MAXN + 5 ] , answer = 0 ;  $ string s ;  $ int main ( ) {  $ ~cin >> n >> a >> b >> k ;  $ ~cin >> s ;  $ ~long long pre = 0 ;  $ ~while ( k < 10000 && k < n ) {  $ ~~k = k * 2 ;  $ ~~s = s + s ;  $ ~}  $ ~for ( int i = 0 ; i < k ; ++ i ) {  $ ~~if ( s [ i ] == '+' )  $ ~~~ans [ i ] = ( pre + poww_mod ( a , n - i ) * poww_mod ( b , i ) ) % MOD ;  $ ~~else  $ ~~~ans [ i ] = ( pre - poww_mod ( a , n - i ) * poww_mod ( b , i ) ) % MOD ;  $ ~~pre = ans [ i ] ;  $ ~}  $ ~if ( n < k ) {  $ ~~if ( ans [ n ] < 0 ) ans [ n ] += MOD ;  $ ~~cout << ans [ n ] << endl ;  $ ~} else {  $ ~~int beishu = n / k ;  $ ~~int save = n - n / k ;  $ ~~long long mode = ( poww_mod ( b , k ) * inv ( poww_mod ( a , k ) , MOD ) ) % MOD ;  $ ~~answer = pre ;  $ ~~for ( int i = 1 ; i < beishu ; ++ i ) {  $ ~~~pre = ( pre * mode ) % MOD ;  $ ~~~answer = ( answer + pre ) % MOD ;  $ ~~}  $ ~~for ( int i = ( n / k ) * k ; i <= n ; ++ i ) {  $ ~~~if ( s [ i % k ] == '+' )  $ ~~~~answer = ( answer + poww_mod ( a , n - i ) * poww_mod ( b , i ) ) % MOD ;  $ ~~~else  $ ~~~~answer = ( answer - poww_mod ( a , n - i ) * poww_mod ( b , i ) ) % MOD ;  $ ~~}  $ ~~if ( answer < 0 ) answer += MOD ;  $ ~~cout << answer << endl ;  $ ~}  $ }
int main ( ) {  $ ~int n , f = 0 , cnt = 0 , i1 , i2 ;  $ ~string s , s1 ;  $ ~cin >> s >> s1 ;  $ ~if ( s . size ( ) != s1 . size ( ) )  $ ~~cout << "NO" << endl ;  $ ~else {  $ ~~for ( int i = 0 ; i < s . size ( ) ; i ++ ) {  $ ~~~if ( s [ i ] != s1 [ i ] ) {  $ ~~~~if ( ! f )  $ ~~~~~i1 = i , f = 1 ;  $ ~~~~else  $ ~~~~~i2 = i ;  $ ~~~~cnt ++ ;  $ ~~~}  $ ~~}  $ ~~if ( cnt != 2 )  $ ~~~cout << "NO" << endl ;  $ ~~else {  $ ~~~if ( s [ i2 ] == s1 [ i1 ] && s [ i1 ] == s1 [ i2 ] )  $ ~~~~cout << "YES" << endl ;  $ ~~~else  $ ~~~~cout << "NO" << endl ;  $ ~~}  $ ~}  $ }
int a , b , c , d ;  $ int check ( int t1 , int t2 ) {  $ ~if ( t1 < t2 )  $ ~~return 1 ;  $ ~else if ( t1 > t2 )  $ ~~return - 1 ;  $ ~return 0 ;  $ }  $ int main ( ) {  $ ~cin >> a >> b >> c >> d ;  $ ~int x = 0 , y = 0 ;  $ ~int t1 = b , t2 = d ;  $ ~while ( true ) {  $ ~~if ( check ( t1 , t2 ) == 1 ) {  $ ~~~t1 += a ;  $ ~~~x ++ ;  $ ~~}  $ ~~if ( check ( t1 , t2 ) == - 1 ) {  $ ~~~t2 += c ;  $ ~~~y ++ ;  $ ~~}  $ ~~if ( check ( t1 , t2 ) == 0 ) {  $ ~~~cout << t1 << endl ;  $ ~~~break ;  $ ~~}  $ ~~if ( x > 100 || y > 100 ) {  $ ~~~cout << "-1" << endl ;  $ ~~~return 0 ;  $ ~~}  $ ~}  $ }
int arr [ 100 ] = { 0 } ;  $ string str [ 6 ] = { "ABC" , "ACB" , "BAC" , "BCA" , "CAB" , "CBA" } ;  $ void CheckStr ( string s ) ;  $ void Grow ( string s , char c ) ;  $ void CheckStr ( string s ) {  $ ~bool D = false ;  $ ~for ( int i = 0 ; i < 6 ; i ++ ) {  $ ~~if ( s . find ( str [ i ] ) != string : : npos ) {  $ ~~~D = true ;  $ ~~~cout << "Yes\n" ;  $ ~~~break ;  $ ~~}  $ ~}  $ ~if ( ! D ) { cout << "No\n" ; }  $ }  $ void Grow ( string s , char c ) { }  $ int main ( ) {  $ ~string s ;  $ ~while ( cin >> s ) { CheckStr ( s ) ; }  $ }
int main ( ) {  $ ~long long n ;  $ ~cin >> n ;  $ ~char mat [ n ] [ n ] ;  $ ~for ( int i = 0 ; i < n ; i ++ )  $ ~~for ( int j = 0 ; j < n ; j ++ ) cin >> mat [ i ] [ j ] ;  $ ~bool col_x = false , row_x = false ;  $ ~for ( int i = 0 ; i < n ; i ++ ) {  $ ~~long long cnt = 0 ;  $ ~~for ( int j = 0 ; j < n ; j ++ )  $ ~~~if ( mat [ i ] [ j ] == 'E' ) cnt ++ ;  $ ~~if ( cnt == n ) {  $ ~~~row_x = true ;  $ ~~~break ;  $ ~~}  $ ~}  $ ~for ( int i = 0 ; i < n ; i ++ ) {  $ ~~long long cnt = 0 ;  $ ~~for ( int j = 0 ; j < n ; j ++ )  $ ~~~if ( mat [ j ] [ i ] == 'E' ) cnt ++ ;  $ ~~if ( cnt == n ) {  $ ~~~col_x = true ;  $ ~~~break ;  $ ~~}  $ ~}  $ ~if ( col_x && row_x )  $ ~~cout << - 1 << "\n" ;  $ ~else if ( row_x ) {  $ ~~for ( int i = 0 ; i < n ; i ++ ) {  $ ~~~for ( int j = 0 ; j < n ; j ++ ) {  $ ~~~~if ( mat [ j ] [ i ] == '.' ) {  $ ~~~~~cout << j + 1 << " " << i + 1 << "\n" ;  $ ~~~~~break ;  $ ~~~~}  $ ~~~}  $ ~~}  $ ~} else {  $ ~~for ( int i = 0 ; i < n ; i ++ ) {  $ ~~~for ( int j = 0 ; j < n ; j ++ ) {  $ ~~~~if ( mat [ i ] [ j ] == '.' ) {  $ ~~~~~cout << i + 1 << " " << j + 1 << "\n" ;  $ ~~~~~break ;  $ ~~~~}  $ ~~~}  $ ~~}  $ ~}  $ ~return 0 ;  $ }
int a [ 1005 ] ;  $ int main ( ) {  $ ~int n ;  $ ~cin >> n ;  $ ~for ( int i = ( 1 ) ; i <= ( n ) ; i ++ ) cin >> a [ i ] ;  $ ~if ( n == 1 ) {  $ ~~if ( a [ 1 ] ) {  $ ~~~puts ( "YES" ) ;  $ ~~} else {  $ ~~~puts ( "NO" ) ;  $ ~~}  $ ~~return 0 ;  $ ~}  $ ~int num = 0 ;  $ ~for ( int i = ( 1 ) ; i <= ( n ) ; i ++ ) {  $ ~~if ( ! a [ i ] ) { num ++ ; }  $ ~}  $ ~if ( num == 1 ) {  $ ~~puts ( "YES" ) ;  $ ~} else {  $ ~~puts ( "NO" ) ;  $ ~}  $ ~return 0 ;  $ }
long long int a [ 100005 ] ;  $ vector < long long int > v ;  $ int main ( ) {  $ ~string s ;  $ ~cin >> s ;  $ ~long long int n = s . length ( ) , l , sum = 0 , cum = 0 , x ;  $ ~for ( long long int i = 0 ; i < n ; i ++ ) {  $ ~~if ( s [ i ] == '(' )  $ ~~~a [ i ] = - 1 ;  $ ~~else if ( s [ i ] == ')' )  $ ~~~a [ i ] = 1 ;  $ ~~else  $ ~~~a [ i ] = 0 ;  $ ~}  $ ~for ( long long int i = n - 1 ; i >= 0 ; i -- ) {  $ ~~if ( a [ i ] == 0 ) {  $ ~~~l = i ;  $ ~~~break ;  $ ~~} else  $ ~~~sum += a [ i ] ;  $ ~}  $ ~for ( long long int i = 0 ; i < n ; i ++ ) {  $ ~~if ( a [ i ] == 0 && i != l )  $ ~~~a [ i ] = 1 , cum += 1 , v . push_back ( 1 ) ;  $ ~~else if ( a [ i ] != 0 )  $ ~~~cum += a [ i ] ;  $ ~~else if ( a [ i ] == 0 && i == l ) {  $ ~~~x = - ( cum + sum ) ;  $ ~~~if ( x <= 0 ) {  $ ~~~~cout << "-1\n" ;  $ ~~~~return 0 ;  $ ~~~} else {  $ ~~~~v . push_back ( x ) ;  $ ~~~~cum += x ;  $ ~~~}  $ ~~}  $ ~~if ( cum > 0 ) {  $ ~~~cout << "-1\n" ;  $ ~~~return 0 ;  $ ~~}  $ ~}  $ ~for ( long long int i = 0 ; i < v . size ( ) ; i ++ ) cout << v [ i ] << "\n" ;  $ }
string s , t ;  $ int l1 , l2 ;  $ int p [ 10001 ] [ 26 ] ;  $ int main ( ) {  $ ~while ( cin >> s >> t ) {  $ ~~l1 = s . size ( ) ;  $ ~~l2 = t . size ( ) ;  $ ~~memset ( p , 0 , sizeof ( p ) ) ;  $ ~~for ( int i = 0 ; i < 26 ; i ++ ) p [ l1 ] [ i ] = - 1 ;  $ ~~for ( int j = l1 ; j >= 1 ; j -- )  $ ~~~for ( int i = 0 ; i < 26 ; i ++ )  $ ~~~~if ( s [ j ] == i + 'a' )  $ ~~~~~p [ j - 1 ] [ i ] = j ;  $ ~~~~else  $ ~~~~~p [ j - 1 ] [ i ] = p [ j ] [ i ] ;  $ ~~int ans = 1 , l = - 2 ;  $ ~~for ( int i = 0 ; i < l2 ; i ++ ) {  $ ~~~if ( l == - 2 ) {  $ ~~~~if ( s [ 0 ] == t [ i ] )  $ ~~~~~l = 0 ;  $ ~~~~else  $ ~~~~~l = p [ 0 ] [ t [ i ] - 'a' ] ;  $ ~~~~if ( l == - 1 ) {  $ ~~~~~ans = - 1 ;  $ ~~~~~break ;  $ ~~~~}  $ ~~~} else {  $ ~~~~l = p [ l ] [ t [ i ] - 'a' ] ;  $ ~~~~if ( l == - 1 ) {  $ ~~~~~ans ++ ;  $ ~~~~~l = - 2 ;  $ ~~~~~i -- ;  $ ~~~~}  $ ~~~}  $ ~~}  $ ~~cout << ans << endl ;  $ ~}  $ }
long long int choose ( long long int n , long long int m ) {  $ ~long long int ans = 0 ;  $ ~long long int num = 1 ;  $ ~long long int den = 1 ;  $ ~for ( long long int i = 0 ; i < m ; i ++ ) {  $ ~~num *= ( n - i ) ;  $ ~~num = num / ( i + 1 ) ;  $ ~}  $ ~return num ;  $ }  $ bool isPrime ( int n ) {  $ ~if ( n <= 1 ) return false ;  $ ~if ( n <= 3 ) return true ;  $ ~if ( n % 2 == 0 || n % 3 == 0 ) return false ;  $ ~for ( int i = 5 ; i * i <= n ; i = i + 6 ) {  $ ~~if ( n % i == 0 || n % ( i + 2 ) == 0 ) return false ;  $ ~}  $ ~return true ;  $ }  $ long long int gcd ( long long int a , long long int b ) {  $ ~if ( a == 0 ) {  $ ~~return b ;  $ ~} else {  $ ~~return gcd ( b % a , a ) ;  $ ~}  $ }  $ int main ( ) {  $ ~long long int i , j , k , n , m , t ;  $ ~long long int a , b , c , d , ans = 0 , max1 , min2 ;  $ ~cin >> a >> b >> c >> d >> k ;  $ ~if ( a >= c ) {  $ ~~max1 = a ;  $ ~} else {  $ ~~max1 = c ;  $ ~}  $ ~if ( b >= d ) {  $ ~~min2 = d ;  $ ~} else {  $ ~~min2 = b ;  $ ~}  $ ~if ( max1 > min2 ) {  $ ~~cout << 0 << endl ;  $ ~~return 0 ;  $ ~} else {  $ ~~if ( max1 <= min2 ) {  $ ~~~if ( k > min2 || k < max1 ) {  $ ~~~~cout << min2 - max1 + 1 << endl ;  $ ~~~} else {  $ ~~~~cout << min2 - max1 << endl ;  $ ~~~}  $ ~~}  $ ~}  $ ~return 0 ;  $ }
int main ( ) {  $ ~string s1 ;  $ ~while ( cin >> s1 ) {  $ ~~if ( s1 . length ( ) < 3 )  $ ~~~cout << "NO" << endl ;  $ ~~else {  $ ~~~int a = s1 . find ( "AB" ) ;  $ ~~~int b = s1 . find ( "BA" , a + 2 ) ;  $ ~~~int c = s1 . find ( "BA" ) ;  $ ~~~int d = s1 . find ( "AB" , c + 2 ) ;  $ ~~~if ( a != - 1 && b != - 1 || c != - 1 && d != - 1 )  $ ~~~~cout << "YES" << endl ;  $ ~~~else  $ ~~~~cout << "NO" << endl ;  $ ~~}  $ ~}  $ ~return 0 ;  $ }
int s [ 101 ] [ 101 ] ;  $ int main ( ) {  $ ~int n , a , r ;  $ ~cin >> n ;  $ ~a = 100 ;  $ ~while ( a * ( a - 1 ) * ( a - 2 ) / 6 > n ) a -- ;  $ ~n -= a * ( a - 1 ) * ( a - 2 ) / 6 ;  $ ~r = a ;  $ ~for ( int i = 1 ; i < a ; i ++ )  $ ~~for ( int j = i + 1 ; j <= a ; j ++ ) s [ i ] [ j ] = s [ j ] [ i ] = 1 ;  $ ~for ( int i = a ; i >= 2 ; i -- ) {  $ ~~while ( n >= i * ( i - 1 ) / 2 ) {  $ ~~~n -= i * ( i - 1 ) / 2 ;  $ ~~~r ++ ;  $ ~~~for ( int j = 1 ; j <= i ; j ++ ) { s [ r ] [ j ] = s [ j ] [ r ] = 1 ; }  $ ~~}  $ ~}  $ ~cout << r << endl ;  $ ~for ( int i = 1 ; i <= r ; i ++ ) {  $ ~~for ( int j = 1 ; j <= r ; j ++ ) { cout << s [ i ] [ j ] ; }  $ ~~cout << endl ;  $ ~}  $ ~return 0 ;  $ }
const int max_n = 2e2 ;  $ int a [ max_n ] ;  $ int n , m , cnt , mx , ans ;  $ int main ( ) {  $ ~cin >> n >> m ;  $ ~for ( int i = 0 ; i < n ; i ++ ) {  $ ~~cin >> a [ i ] ;  $ ~~mx = max ( mx , a [ i ] ) ;  $ ~}  $ ~mx = ( mx + m - 1 ) / m ;  $ ~for ( int j = 0 ; j < mx ; j ++ )  $ ~~for ( int i = 0 ; i < n ; i ++ ) {  $ ~~~if ( a [ i ] > 0 ) {  $ ~~~~a [ i ] -= m ;  $ ~~~~if ( a [ i ] <= 0 ) ans = i ;  $ ~~~}  $ ~~}  $ ~cout << ans + 1 << '\n' ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~int s , t , x ;  $ ~while ( cin >> s >> t >> x ) {  $ ~~if ( x < s + t ) {  $ ~~~if ( x == s )  $ ~~~~cout << "YES" << endl ;  $ ~~~else  $ ~~~~cout << "NO" << endl ;  $ ~~} else {  $ ~~~if ( ( x - s ) % t == 0 || ( x - s - 1 ) % t == 0 )  $ ~~~~cout << "YES" << endl ;  $ ~~~else  $ ~~~~cout << "NO" << endl ;  $ ~~}  $ ~}  $ ~return 0 ;  $ }
long long N , M , K ;  $ int main ( ) {  $ ~cin >> N >> M >> K ;  $ ~if ( N - 1 + M - 1 < K ) {  $ ~~cout << - 1 << endl ;  $ ~~return 0 ;  $ ~}  $ ~long long ans = 0 ;  $ ~if ( K >= M - 1 ) {  $ ~~long long hori = K - ( M - 1 ) ;  $ ~~long long rows = N / ( hori + 1 ) ;  $ ~~ans = max ( ans , rows ) ;  $ ~} else  $ ~~ans = max ( ans , N * ( M / ( K + 1 ) ) ) ;  $ ~swap ( N , M ) ;  $ ~if ( K >= M - 1 ) {  $ ~~long long hori = K - ( M - 1 ) ;  $ ~~long long rows = N / ( hori + 1 ) ;  $ ~~ans = max ( ans , rows ) ;  $ ~} else  $ ~~ans = max ( ans , N * ( M / ( K + 1 ) ) ) ;  $ ~cout << ans << endl ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~long long t1 , t2 , x1 , x2 , t0 , res_x , res_y ;  $ ~cin >> t1 >> t2 >> x1 >> x2 >> t0 ;  $ ~double t , ct = 1e99 ;  $ ~while ( x1 >= 0 && x2 >= 0 ) {  $ ~~t = ( t1 * x1 + t2 * x2 * 1.0 ) / ( x1 + x2 ) ;  $ ~~if ( t < t0 ) {  $ ~~~x1 -- ;  $ ~~~continue ;  $ ~~}  $ ~~if ( t < ct ) {  $ ~~~ct = t ;  $ ~~~res_x = x1 ;  $ ~~~res_y = x2 ;  $ ~~}  $ ~~x2 -- ;  $ ~}  $ ~cout << res_x << ' ' << res_y << endl ;  $ }
bool isP ( int n ) {  $ ~if ( n % 2 == 0 && n != 2 ) { return false ; }  $ ~for ( int i = 3 ; i * i <= n ; i += 2 ) {  $ ~~if ( n % i == 0 ) { return false ; }  $ ~}  $ ~return true ;  $ }  $ int main ( ) {  $ ~int n , m , cn , cm , gc ;  $ ~cin >> n ;  $ ~for ( int i = 1 ; i <= 1000 ; i ++ ) {  $ ~~if ( ! isP ( n * i + 1 ) ) {  $ ~~~cout << i << endl ;  $ ~~~return 0 ;  $ ~~}  $ ~}  $ ~return 0 ;  $ }
int g ( int a ) {  $ ~if ( a < 0 ) { return - a ; }  $ ~return a ;  $ }  $ int n , x , y , xx , yy , l ;  $ int main ( ) {  $ ~cin >> n >> x >> y >> xx >> yy ;  $ ~if ( ! x ) {  $ ~~if ( ! xx ) {  $ ~~~l = g ( y - yy ) ;  $ ~~} else {  $ ~~~if ( xx == n ) {  $ ~~~~l = min ( y + yy + n , n - y + n - yy + n ) ;  $ ~~~} else {  $ ~~~~if ( ! yy ) {  $ ~~~~~l = y + xx ;  $ ~~~~} else {  $ ~~~~~l = n - y + xx ;  $ ~~~~}  $ ~~~}  $ ~~}  $ ~} else {  $ ~~if ( ! y ) {  $ ~~~if ( ! xx ) {  $ ~~~~l = yy + x ;  $ ~~~} else {  $ ~~~~if ( xx == n ) {  $ ~~~~~l = yy + n - x ;  $ ~~~~} else {  $ ~~~~~if ( ! yy ) {  $ ~~~~~~l = g ( x - xx ) ;  $ ~~~~~} else {  $ ~~~~~~l = min ( x + xx + n , n - x + n - xx + n ) ;  $ ~~~~~}  $ ~~~~}  $ ~~~}  $ ~~} else {  $ ~~~if ( x == n ) {  $ ~~~~if ( ! xx ) {  $ ~~~~~l = min ( y + yy + n , n - y + n - yy + n ) ;  $ ~~~~} else {  $ ~~~~~if ( xx == n ) {  $ ~~~~~~l = g ( y - yy ) ;  $ ~~~~~} else {  $ ~~~~~~if ( ! yy ) {  $ ~~~~~~~l = n - xx + y ;  $ ~~~~~~} else {  $ ~~~~~~~l = n - xx + n - y ;  $ ~~~~~~}  $ ~~~~~}  $ ~~~~}  $ ~~~} else {  $ ~~~~if ( ! xx ) {  $ ~~~~~l = n - yy + x ;  $ ~~~~} else {  $ ~~~~~if ( xx == n ) {  $ ~~~~~~l = n - x + n - yy ;  $ ~~~~~} else {  $ ~~~~~~if ( ! yy ) {  $ ~~~~~~~l = min ( x + xx + n , n - x + n - xx + n ) ;  $ ~~~~~~} else {  $ ~~~~~~~l = g ( xx - x ) ;  $ ~~~~~~}  $ ~~~~~}  $ ~~~~}  $ ~~~}  $ ~~}  $ ~}  $ ~cout << l << endl ;  $ ~return 0 ;  $ }
unsigned long long solve ( unsigned long long x ) {  $ ~unsigned long long ans = 0 , f , e , xx = x ;  $ ~if ( x < 10 ) return x ;  $ ~e = x % 10 ;  $ ~while ( x ) {  $ ~~f = x % 10 ;  $ ~~x /= 10 ;  $ ~}  $ ~if ( f <= e )  $ ~~ans = 9 + xx / 10 ;  $ ~else  $ ~~ans = 8 + xx / 10 ;  $ ~return ans ;  $ }  $ int main ( ) {  $ ~unsigned long long a , b ;  $ ~cin >> a >> b ;  $ ~cout << solve ( b ) - solve ( a - 1 ) << endl ;  $ ~return 0 ;  $ }
const int maxn = 110 ;  $ int a [ maxn ] , b [ maxn ] ;  $ int vis [ 1010 ] ;  $ int main ( ) {  $ ~int n ;  $ ~int cnt = 0 ;  $ ~cin >> n ;  $ ~memset ( vis , 0 , sizeof ( vis ) ) ;  $ ~for ( int i = 0 ; i < n ; i ++ ) { cin >> a [ i ] >> b [ i ] ; }  $ ~for ( int i = 0 ; i < n ; i ++ ) {  $ ~~for ( int j = 0 ; j < n ; j ++ ) {  $ ~~~if ( i == j ) continue ;  $ ~~~if ( a [ i ] == b [ j ] ) vis [ i ] = 1 ;  $ ~~}  $ ~}  $ ~for ( int i = 0 ; i < n ; i ++ ) {  $ ~~if ( vis [ i ] == 1 ) cnt ++ ;  $ ~}  $ ~cout << n - cnt << endl ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~int a , b , c , d , e , f ;  $ ~cin >> a >> b >> c >> d >> e >> f ;  $ ~if ( a * c * e == 0 && b * d * f == 0 ) {  $ ~~if ( d == 0 )  $ ~~~cout << "Hermione\n" ;  $ ~~else if ( b == 0 ) {  $ ~~~if ( c == 0 )  $ ~~~~cout << "Ron\n" ;  $ ~~~else  $ ~~~~cout << "Hermione\n" ;  $ ~~} else {  $ ~~~if ( a == 0 || c == 0 )  $ ~~~~cout << "Ron\n" ;  $ ~~~else  $ ~~~~cout << "Hermione\n" ;  $ ~~}  $ ~} else {  $ ~~if ( b * d * f > a * c * e )  $ ~~~cout << "Ron\n" ;  $ ~~else  $ ~~~cout << "Hermione\n" ;  $ ~}  $ }
const int M = 500000 + 10 ;  $ string s [ M ] ;  $ int dp [ 26 ] [ 26 ] ;  $ int main ( ) {  $ ~int n ;  $ ~cin >> n ;  $ ~for ( int i = 1 ; i <= n ; i ++ ) { cin >> s [ i ] ; }  $ ~for ( int i = 1 ; i <= n ; i ++ ) {  $ ~~string t = s [ i ] ;  $ ~~int tlen = t . length ( ) ;  $ ~~int s1 = t [ 0 ] - 'a' ;  $ ~~int e1 = t [ tlen - 1 ] - 'a' ;  $ ~~for ( int j = 0 ; j < 26 ; j ++ ) {  $ ~~~if ( dp [ j ] [ s1 ] > 0 && dp [ j ] [ s1 ] + tlen > dp [ j ] [ e1 ] ) { dp [ j ] [ e1 ] = dp [ j ] [ s1 ] + tlen ; }  $ ~~}  $ ~~if ( tlen > dp [ s1 ] [ e1 ] ) { dp [ s1 ] [ e1 ] = tlen ; }  $ ~}  $ ~int ans = 0 ;  $ ~for ( int i = 0 ; i < 26 ; i ++ ) { ans = max ( ans , dp [ i ] [ i ] ) ; }  $ ~cout << ans << endl ;  $ ~return 0 ;  $ }
const int maxn = 10005 ;  $ long long n , m , k , arr [ maxn ] , minn = 1e8 ;  $ int main ( ) {  $ ~cin >> n >> m >> k ;  $ ~for ( int i = 0 ; i < n ; i ++ ) {  $ ~~cin >> arr [ i ] ;  $ ~~if ( ! ( i & 1 ) ) minn = min ( minn , arr [ i ] ) ;  $ ~}  $ ~if ( ! ( n & 1 ) || m < ( n / 2 + 1 ) ) {  $ ~~cout << "0\n" ;  $ ~~return 0 ;  $ ~}  $ ~cout << min ( minn , m / ( n / 2 + 1 ) * k ) << "\n" ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~string a ;  $ ~long long b , t , c = 0 ;  $ ~getline ( cin , a ) ;  $ ~b = a . find ( '=' ) ;  $ ~t = b ;  $ ~b += 2 ;  $ ~b = a . size ( ) - b + 1 ;  $ ~for ( long long i = 0 ; i < t ; ++ i ) {  $ ~~if ( a [ i ] == '|' ) { c ++ ; }  $ ~}  $ ~if ( c + 1 == b - 1 ) {  $ ~~cout << '|' ;  $ ~~for ( long long i = 0 ; i < a . size ( ) - 1 ; ++ i ) { cout << a [ i ] ; }  $ ~~cout << endl ;  $ ~} else if ( c == b ) {  $ ~~cout << a << endl ;  $ ~} else if ( c == b + 2 ) {  $ ~~long long z = a . find ( '+' ) ;  $ ~~if ( z > 1 ) {  $ ~~~for ( long long i = 1 ; i < a . size ( ) ; i ++ ) { cout << a [ i ] ; }  $ ~~~cout << '|' << endl ;  $ ~~} else {  $ ~~~for ( long long i = 0 ; i < a . size ( ) ; i ++ ) {  $ ~~~~if ( i == z + 1 ) { continue ; }  $ ~~~~cout << a [ i ] ;  $ ~~~}  $ ~~~cout << '|' << endl ;  $ ~~}  $ ~} else {  $ ~~cout << "Impossible" << endl ;  $ ~}  $ ~return 0 ;  $ }
int main ( ) {  $ ~int n , t , cnt = 0 ;  $ ~cin >> n ;  $ ~vector < int > v ;  $ ~queue < int > q ;  $ ~for ( int i = 0 ; i < n ; i ++ ) {  $ ~~cin >> t ;  $ ~~v . push_back ( t ) ;  $ ~}  $ ~sort ( v . begin ( ) , v . end ( ) , greater < int > ( ) ) ;  $ ~for ( int i = 0 ; i + 1 < v . size ( ) ; i ++ ) {  $ ~~q . push ( v [ i ] ) ;  $ ~~if ( ! q . empty ( ) && q . front ( ) > v [ i + 1 ] ) {  $ ~~~q . pop ( ) ;  $ ~~~cnt ++ ;  $ ~~}  $ ~}  $ ~cout << cnt << endl ;  $ }
int main ( ) {  $ ~long long n , count = 0 , ret = 0 ;  $ ~cin >> n ;  $ ~vector < tuple < long long , long long , long long >> data ;  $ ~for ( int i = 0 ; i < n ; i ++ ) {  $ ~~long long k , a0 , x , y , m , t = 0 , a = 0 ;  $ ~~cin >> k >> a0 >> x >> y >> m ;  $ ~~for ( int j = 0 ; j < k ; j ++ ) {  $ ~~~data . push_back ( make_tuple ( t , a0 , i ) ) ;  $ ~~~a = ( a0 * x + y ) % m ;  $ ~~~if ( a < a0 && j != k - 1 ) { t ++ ; }  $ ~~~a0 = a ;  $ ~~}  $ ~~ret = max ( ret , t ) ;  $ ~}  $ ~cout << ret << endl ;  $ ~sort ( data . begin ( ) , data . end ( ) ) ;  $ ~for ( int i = 0 ; i < data . size ( ) ; i ++ ) { cout << get < 1 > ( data [ i ] ) << " " << get < 2 > ( data [ i ] ) + 1 << endl ; }  $ }
string s ;  $ int main ( ) {  $ ~cin >> s ;  $ ~for ( int i = 1 ; i < s . size ( ) - 1 ; i ++ ) {  $ ~~int a = 0 , b = 0 , c = 0 ;  $ ~~if ( s [ i ] == 'A' ) a ++ ;  $ ~~if ( s [ i ] == 'B' ) b ++ ;  $ ~~if ( s [ i ] == 'C' ) c ++ ;  $ ~~if ( s [ i - 1 ] == 'A' ) a ++ ;  $ ~~if ( s [ i - 1 ] == 'B' ) b ++ ;  $ ~~if ( s [ i - 1 ] == 'C' ) c ++ ;  $ ~~if ( s [ i + 1 ] == 'A' ) a ++ ;  $ ~~if ( s [ i + 1 ] == 'B' ) b ++ ;  $ ~~if ( s [ i + 1 ] == 'C' ) c ++ ;  $ ~~if ( a == 1 && b == 1 && c == 1 ) {  $ ~~~cout << "Yes" << endl ;  $ ~~~return 0 ;  $ ~~}  $ ~}  $ ~cout << "No" << endl ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~long double a , b ;  $ ~cout << fixed << setprecision ( 12 ) ;  $ ~cin >> a >> b ;  $ ~if ( b > a ) {  $ ~~cout << - 1 << endl ;  $ ~~return 0 ;  $ ~}  $ ~if ( a == b ) {  $ ~~cout << a << endl ;  $ ~~return 0 ;  $ ~}  $ ~long double x1 = ( ( ( a - b ) * 0.5 ) ) / floor ( ( ( a - b ) * 0.5 ) / b ) ;  $ ~long double x2 = ( ( ( a + b ) * 0.5 ) ) / floor ( ( ( a + b ) * 0.5 ) / b ) ;  $ ~cout << min ( x1 , x2 ) << endl ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~long long ans , n ;  $ ~while ( cin >> n ) {  $ ~~if ( n <= 2 ) {  $ ~~~ans = n ;  $ ~~} else if ( n % 2 ) {  $ ~~~ans = n * ( n - 1 ) * ( n - 2 ) ;  $ ~~} else {  $ ~~~if ( n % 3 ) {  $ ~~~~ans = n * ( n - 1 ) * ( n - 3 ) ;  $ ~~~} else {  $ ~~~~ans = ( n - 1 ) * ( n - 2 ) * ( n - 3 ) ;  $ ~~~}  $ ~~}  $ ~~cout << ans << endl ;  $ ~}  $ ~return 0 ;  $ }
int SevenPows [ ] = { 0 , 7 , 49 , 343 , 2401 , 16807 , 117649 } ;  $ bool visited [ 8 ] ;  $ int N , M , dh , dm ;  $ bool Judge ( int h , int m ) {  $ ~fill ( visited , visited + 8 , false ) ;  $ ~for ( int i = 0 ; i < dm ; ++ i ) {  $ ~~if ( visited [ m % 7 ] ) return false ;  $ ~~visited [ m % 7 ] = true ;  $ ~~m /= 7 ;  $ ~}  $ ~for ( int i = 0 ; i < dh ; ++ i ) {  $ ~~if ( visited [ h % 7 ] ) return false ;  $ ~~visited [ h % 7 ] = true ;  $ ~~h /= 7 ;  $ ~}  $ ~return true ;  $ }  $ int main ( ) {  $ ~int i , j ;  $ ~cin >> N >> M ;  $ ~for ( i = 0 ; i < 7 ; ++ i ) {  $ ~~if ( N <= SevenPows [ i ] ) {  $ ~~~dh = i ;  $ ~~~break ;  $ ~~}  $ ~}  $ ~if ( i == 7 ) {  $ ~~cout << 0 << endl ;  $ ~~return 0 ;  $ ~}  $ ~for ( i = 0 ; i < 7 ; ++ i ) {  $ ~~if ( M <= SevenPows [ i ] ) {  $ ~~~dm = i ;  $ ~~~break ;  $ ~~}  $ ~}  $ ~if ( i == 7 ) {  $ ~~cout << 0 << endl ;  $ ~~return 0 ;  $ ~}  $ ~int ans = 0 ;  $ ~for ( i = 0 ; i < N ; ++ i ) {  $ ~~for ( j = 0 ; j < M ; ++ j ) {  $ ~~~if ( Judge ( i , j ) ) ans ++ ;  $ ~~}  $ ~}  $ ~cout << ans << endl ;  $ ~return 0 ;  $ }
int x , t , a , b , da , db ;  $ int sum ;  $ int main ( ) {  $ ~cin >> x >> t >> a >> b >> da >> db ;  $ ~if ( x == 0 ) {  $ ~~cout << "YES" << endl ;  $ ~~return 0 ;  $ ~}  $ ~for ( int i = 0 ; i < t ; i ++ ) {  $ ~~for ( int j = 0 ; j < t ; j ++ ) {  $ ~~~int sum1 = a - ( da * i ) ;  $ ~~~int sum2 = b - ( db * j ) ;  $ ~~~if ( sum1 == x || sum2 == x || ( sum1 + sum2 ) == x ) {  $ ~~~~cout << "YES" << endl ;  $ ~~~~return 0 ;  $ ~~~}  $ ~~}  $ ~}  $ ~cout << "NO" << endl ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~int t ;  $ ~cin >> t ;  $ ~int x [ 1000020 ] ;  $ ~for ( int i = 0 ; i < 1000020 ; i ++ ) x [ i ] = 0 ;  $ ~for ( int i = 0 ; i < t ; i ++ ) {  $ ~~int temp ;  $ ~~cin >> temp ;  $ ~~x [ temp ] ++ ;  $ ~}  $ ~int sum = 0 ;  $ ~for ( int i = 0 ; i < 1000020 ; i ++ ) {  $ ~~x [ i + 1 ] += ( x [ i ] >> 1 ) ;  $ ~~x [ i ] = ( x [ i ] & 1 ) ;  $ ~}  $ ~for ( int i = 0 ; i < 1000020 ; i ++ ) sum += x [ i ] ;  $ ~cout << sum << endl ;  $ ~return 0 ;  $ }
long long int mod = 1000000007 ;  $ int main ( ) {  $ ~long long int x1 , y1 , x2 , y2 , a , b , c ;  $ ~int n , ans = 0 ;  $ ~cin >> x1 >> y1 >> x2 >> y2 >> n ;  $ ~for ( int i = 0 ; i < n ; i ++ ) {  $ ~~cin >> a >> b >> c ;  $ ~~long long int val1 = a * x1 + b * y1 + c ;  $ ~~long long int val2 = a * x2 + b * y2 + c ;  $ ~~if ( ( val1 < 0 && val2 > 0 ) || ( val1 > 0 && val2 < 0 ) ) { ans ++ ; }  $ ~}  $ ~cout << ans << endl ;  $ ~return 0 ;  $ }
const int INF = 1 << 29 ;  $ int l [ 4 ] , s [ 4 ] , r [ 4 ] , p [ 4 ] ;  $ int main ( ) {  $ ~for ( int i = 0 ; i < 4 ; i ++ ) cin >> l [ i ] >> s [ i ] >> r [ i ] >> p [ i ] ;  $ ~for ( int i = 0 ; i < 4 ; i ++ ) {  $ ~~if ( p [ i ] ) {  $ ~~~if ( l [ ( i + 1 ) % 4 ] || r [ ( i - 1 + 4 ) % 4 ] || s [ ( i + 2 ) % 4 ] ) {  $ ~~~~cout << "YES\n" ;  $ ~~~~return 0 ;  $ ~~~}  $ ~~~if ( l [ i ] || r [ i ] || s [ i ] ) {  $ ~~~~cout << "YES\n" ;  $ ~~~~return 0 ;  $ ~~~}  $ ~~}  $ ~}  $ ~cout << "NO\n" ;  $ ~return 0 ;  $ }
int a [ 30 ] ;  $ int main ( ) {  $ ~int n ;  $ ~cin >> n ;  $ ~if ( n == 1 ) {  $ ~~cout << "Yes" << endl ;  $ ~~return 0 ;  $ ~}  $ ~while ( n -- ) {  $ ~~char s ;  $ ~~cin >> s ;  $ ~~a [ s - 96 ] ++ ;  $ ~}  $ ~int flag = 0 ;  $ ~for ( int i = 1 ; i <= 26 ; i ++ )  $ ~~if ( a [ i ] >= 2 ) flag += 1 ;  $ ~if ( flag == 0 )  $ ~~cout << "No" << endl ;  $ ~else  $ ~~cout << "Yes" << endl ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~long long a [ 100005 ] , n , k , m , minn , s , x ;  $ ~cin >> n >> m >> k ;  $ ~for ( int i = 0 ; i < n ; i ++ ) cin >> a [ i ] ;  $ ~if ( ! n % 2 )  $ ~~cout << 0 << endl ;  $ ~else {  $ ~~minn = 0 ;  $ ~~s = n / 2 + 1 ;  $ ~~if ( s > m )  $ ~~~minn = 0 ;  $ ~~else {  $ ~~~minn = a [ 0 ] ;  $ ~~~for ( int i = 0 ; i <= n ; i += 2 ) minn = min ( minn , a [ i ] ) ;  $ ~~~x = m / s * k ;  $ ~~~minn = min ( minn , x ) ;  $ ~~}  $ ~~cout << minn << endl ;  $ ~}  $ }
long long int solve ( long long int dif [ ] , int n ) {  $ ~long long int current_max = dif [ 0 ] , max_so_far = dif [ 0 ] ;  $ ~for ( int i = 1 ; i < n ; i ++ ) {  $ ~~current_max = max ( current_max + dif [ i ] , dif [ i ] ) ;  $ ~~max_so_far = max ( current_max , max_so_far ) ;  $ ~}  $ ~return max_so_far ;  $ }  $ int main ( ) {  $ ~int n ;  $ ~cin >> n ;  $ ~long long int arr [ n ] , dif [ n - 1 ] ;  $ ~for ( int i = 0 ; i < n ; i ++ ) cin >> arr [ i ] ;  $ ~for ( int i = 0 ; i < n - 1 ; i ++ ) dif [ i ] = ( ( i & 1 ) ? - 1 : 1 ) * ( abs ( arr [ i ] - arr [ i + 1 ] ) ) ;  $ ~long long int ans = - 1e18 ;  $ ~ans = max ( ans , solve ( dif , n - 1 ) ) ;  $ ~for ( int i = 0 ; i < n - 1 ; i ++ ) dif [ i ] *= - 1 ;  $ ~ans = max ( ans , solve ( dif , n - 1 ) ) ;  $ ~cout << ans << "\n" ;  $ }
int main ( ) {  $ ~int n ;  $ ~cin >> n ;  $ ~int a [ n ] = { } ;  $ ~vector < int > banyakyangmilihini [ 2001 ] ;  $ ~int inilahhasilnya [ n ] = { } ;  $ ~for ( int i = 0 ; i < n ; i ++ ) {  $ ~~cin >> a [ i ] ;  $ ~~banyakyangmilihini [ a [ i ] ] . push_back ( i ) ;  $ ~}  $ ~int i = 1 ;  $ ~for ( int k = 2000 ; k > 0 ; k -- ) {  $ ~~if ( banyakyangmilihini [ k ] . size ( ) > 0 ) {  $ ~~~for ( int m = 0 ; m < banyakyangmilihini [ k ] . size ( ) ; m ++ ) { inilahhasilnya [ banyakyangmilihini [ k ] [ m ] ] = i ; }  $ ~~~i = i + banyakyangmilihini [ k ] . size ( ) ;  $ ~~}  $ ~}  $ ~for ( int k = 0 ; k < n ; k ++ ) {  $ ~~if ( k == 0 ) {  $ ~~~cout << inilahhasilnya [ k ] ;  $ ~~} else {  $ ~~~cout << " " << inilahhasilnya [ k ] ;  $ ~~}  $ ~}  $ ~cout << endl ;  $ }
char s [ 35 ] ;  $ long long to_int ( char * a , char * b ) {  $ ~long long res = 0 ;  $ ~if ( * a == '0' && a != b ) return - 1 ;  $ ~while ( a != b + 1 ) {  $ ~~res = ( res * 10 ) + ( a [ 0 ] - '0' ) ;  $ ~~if ( res > 1000000 ) return - 1 ;  $ ~~a ++ ;  $ ~}  $ ~return res ;  $ }  $ int main ( ) {  $ ~cin >> s ;  $ ~char * nd = s + strlen ( s ) - 1 ;  $ ~long long res = - 1 ;  $ ~for ( char * p1 = s ; p1 [ 2 ] ; p1 ++ ) {  $ ~~for ( char * p2 = p1 + 1 ; p2 [ 1 ] ; p2 ++ ) {  $ ~~~long long a = to_int ( s , p1 ) , b = to_int ( p1 + 1 , p2 ) , c = to_int ( p2 + 1 , nd ) ;  $ ~~~if ( a == - 1 || b == - 1 || c == - 1 ) continue ;  $ ~~~res = max ( res , a + b + c ) ;  $ ~~}  $ ~}  $ ~cout << res << endl ;  $ ~return 0 ;  $ }
long long gcd ( long long x , long long y ) {  $ ~return x % y == 0 ? y : gcd ( y , x % y ) ;  $ }  $ long long lcm ( int x , int y , int z ) {  $ ~long long a = ( long long ) x * y / gcd ( x , y ) ;  $ ~a = a * z / gcd ( a , z ) ;  $ ~return a ;  $ }  $ int main ( ) {  $ ~int n ;  $ ~cin >> n ;  $ ~long long ans = 0 ;  $ ~for ( int i = max ( 1 , n - 100 ) ; i <= n ; i ++ )  $ ~~for ( int j = max ( 1 , n - 100 ) ; j <= n ; j ++ )  $ ~~~for ( int k = max ( 1 , n - 100 ) ; k <= n ; k ++ ) ans = max ( ans , lcm ( i , j , k ) ) ;  $ ~cout << ans << endl ;  $ ~return 0 ;  $ }
int m , h , h2 , a , a2 , x , x2 , y , y2 ;  $ int get ( int s , int e ) {  $ ~for ( int i = 0 ; i < m ; ++ i ) {  $ ~~s = ( 1 ll * s * x + y ) % m ;  $ ~~if ( s == e ) return i + 1 ;  $ ~}  $ ~return - 1 ;  $ }  $ int get2 ( int s , int e ) {  $ ~for ( int i = 0 ; i < m ; ++ i ) {  $ ~~s = ( 1 ll * s * x2 + y2 ) % m ;  $ ~~if ( s == e ) return i + 1 ;  $ ~}  $ ~return - 1 ;  $ }  $ int main ( ) {  $ ~cin >> m >> h >> a >> x >> y >> h2 >> a2 >> x2 >> y2 ;  $ ~int t = get ( h , a ) , t2 = get2 ( h2 , a2 ) ;  $ ~if ( t == - 1 || t2 == - 1 ) return cout << "-1\n" , 0 ;  $ ~if ( t == t2 ) return cout << t << '\n' , 0 ;  $ ~int l = get ( a , a ) , l2 = get2 ( a2 , a2 ) ;  $ ~if ( ~ l && t2 - t >= 0 && ! ( ( t2 - t ) % l ) ) return cout << t2 << '\n' , 0 ;  $ ~if ( ~ l2 && t - t2 >= 0 && ! ( ( t - t2 ) % l2 ) ) return cout << t << '\n' , 0 ;  $ ~if ( l == - 1 || l2 == - 1 ) return cout << "-1\n" , 0 ;  $ ~int val = t2 - t ;  $ ~for ( int i = 1 , lim = m << 1 ; i <= lim ; ++ i )  $ ~~if ( val + 1 ll * i * l2 >= 0 && ! ( ( val + 1 ll * i * l2 ) % l ) ) return cout << 1 ll * i * l2 + t2 << '\n' , 0 ;  $ ~cout << "-1\n" ;  $ ~return 0 ;  $ }
const int N = 1e2 + 10 ;  $ int n ;  $ int k ;  $ int a [ N ] [ N ] ;  $ int now ;  $ void PRINT ( int n ) {  $ ~cout << n << endl ;  $ ~for ( int i = 1 ; i <= n ; i ++ ) {  $ ~~for ( int j = 1 ; j <= n ; j ++ ) cout << a [ i ] [ j ] ;  $ ~~cout << endl ;  $ ~}  $ }  $ int main ( ) {  $ ~cin >> k ;  $ ~memset ( a , 0 , sizeof ( a ) ) ;  $ ~for ( int i = 2 ; i <= N ; i ++ ) {  $ ~~if ( ( i * ( i - 1 ) * ( i - 2 ) ) / 6 > k ) {  $ ~~~n = i - 1 ;  $ ~~~break ;  $ ~~}  $ ~}  $ ~for ( int i = 1 ; i <= n ; i ++ ) {  $ ~~for ( int j = 1 ; j <= n ; j ++ ) {  $ ~~~if ( i != j ) a [ i ] [ j ] = 1 ;  $ ~~}  $ ~}  $ ~if ( ( n * ( n - 1 ) * ( n - 2 ) ) / 6 == k ) {  $ ~~PRINT ( n ) ;  $ ~~return 0 ;  $ ~}  $ ~now = k - ( n * ( n - 1 ) * ( n - 2 ) ) / 6 ;  $ ~while ( now ) {  $ ~~int lo , hi , mid , tmp ;  $ ~~lo = 1 ;  $ ~~hi = 100 ;  $ ~~while ( lo <= hi ) {  $ ~~~mid = ( lo + hi ) >> 1 ;  $ ~~~if ( ( mid * ( mid - 1 ) ) >> 1 <= now ) {  $ ~~~~tmp = mid ;  $ ~~~~lo = mid + 1 ;  $ ~~~} else  $ ~~~~hi = mid - 1 ;  $ ~~}  $ ~~now -= ( tmp * ( tmp - 1 ) ) >> 1 ;  $ ~~n += 1 ;  $ ~~for ( int i = 1 ; i <= tmp ; i ++ ) { a [ i ] [ n ] = a [ n ] [ i ] = 1 ; }  $ ~}  $ ~PRINT ( n ) ;  $ ~return 0 ;  $ }
int vis [ 105 ] ;  $ int main ( ) {  $ ~int n , k ;  $ ~cin >> n >> k ;  $ ~int num = 0 ;  $ ~for ( int i = 0 ; i < n ; ++ i ) {  $ ~~int x ;  $ ~~cin >> x ;  $ ~~if ( ! vis [ x ] ) {  $ ~~~vis [ x ] = i + 1 ;  $ ~~~num ++ ;  $ ~~}  $ ~}  $ ~if ( num < k )  $ ~~cout << "NO\n" ;  $ ~else {  $ ~~cout << "YES\n" ;  $ ~~int j = 0 ;  $ ~~sort ( vis , vis + 101 ) ;  $ ~~for ( int i = 0 ; i <= 100 ; ++ i )  $ ~~~if ( vis [ i ] ) {  $ ~~~~if ( k == 1 )  $ ~~~~~cout << vis [ i ] << endl ;  $ ~~~~else if ( k > 1 )  $ ~~~~~cout << vis [ i ] << ' ' ;  $ ~~~~else  $ ~~~~~break ;  $ ~~~~k -- ;  $ ~~~}  $ ~}  $ ~return 0 ;  $ }
int N , arr [ 100001 ] ;  $ long long dp [ 100001 ] [ 201 ] [ 2 ] ;  $ int main ( ) {  $ ~cin >> N ;  $ ~for ( int i = 1 ; i <= N ; i ++ ) cin >> arr [ i ] ;  $ ~for ( int i = 1 ; i <= N ; i ++ ) {  $ ~~if ( arr [ i ] != - 1 ) {  $ ~~~if ( i == 1 )  $ ~~~~dp [ i ] [ arr [ i ] ] [ 0 ] = 1 ;  $ ~~~else {  $ ~~~~for ( int j = 1 ; j < arr [ i ] ; j ++ ) {  $ ~~~~~dp [ i ] [ arr [ i ] ] [ 0 ] += dp [ i - 1 ] [ j ] [ 0 ] + dp [ i - 1 ] [ j ] [ 1 ] ;  $ ~~~~~dp [ i ] [ arr [ i ] ] [ 0 ] %= 998244353 ;  $ ~~~~}  $ ~~~~dp [ i ] [ arr [ i ] ] [ 1 ] += dp [ i - 1 ] [ arr [ i ] ] [ 0 ] ;  $ ~~~~dp [ i ] [ arr [ i ] ] [ 1 ] %= 998244353 ;  $ ~~~~for ( int j = arr [ i ] ; j <= 200 ; j ++ ) {  $ ~~~~~dp [ i ] [ arr [ i ] ] [ 1 ] += dp [ i - 1 ] [ j ] [ 1 ] ;  $ ~~~~~dp [ i ] [ arr [ i ] ] [ 1 ] %= 998244353 ;  $ ~~~~}  $ ~~~}  $ ~~} else {  $ ~~~if ( i == 1 ) {  $ ~~~~for ( int j = 1 ; j <= 200 ; j ++ ) dp [ i ] [ j ] [ 0 ] = 1 ;  $ ~~~} else {  $ ~~~~long long temp = 0 ;  $ ~~~~for ( int j = 1 ; j <= 200 ; j ++ ) {  $ ~~~~~dp [ i ] [ j ] [ 1 ] += dp [ i - 1 ] [ j ] [ 0 ] ;  $ ~~~~~dp [ i ] [ j ] [ 1 ] %= 998244353 ;  $ ~~~~~dp [ i ] [ j ] [ 0 ] += temp ;  $ ~~~~~dp [ i ] [ j ] [ 0 ] %= 998244353 ;  $ ~~~~~temp += dp [ i - 1 ] [ j ] [ 0 ] ;  $ ~~~~~temp %= 998244353 ;  $ ~~~~}  $ ~~~~temp = 0 ;  $ ~~~~for ( int j = 200 ; j >= 1 ; j -- ) {  $ ~~~~~temp += dp [ i - 1 ] [ j ] [ 1 ] ;  $ ~~~~~temp %= 998244353 ;  $ ~~~~~dp [ i ] [ j ] [ 1 ] += temp ;  $ ~~~~~dp [ i ] [ j ] [ 1 ] %= 998244353 ;  $ ~~~~}  $ ~~~~temp = 0 ;  $ ~~~~for ( int j = 1 ; j <= 200 ; j ++ ) {  $ ~~~~~dp [ i ] [ j ] [ 0 ] += temp ;  $ ~~~~~dp [ i ] [ j ] [ 0 ] %= 998244353 ;  $ ~~~~~temp += dp [ i - 1 ] [ j ] [ 1 ] ;  $ ~~~~~temp %= 998244353 ;  $ ~~~~}  $ ~~~}  $ ~~}  $ ~}  $ ~long long ans = 0 ;  $ ~for ( int i = 1 ; i <= 200 ; i ++ ) ans = ( ans + dp [ N ] [ i ] [ 1 ] ) % 998244353 ;  $ ~cout << ans << '\n' ;  $ ~return 0 ;  $ }
long long i , j , cnt = 0 ;  $ int ar [ 100050 ] ;  $ int main ( ) {  $ ~int a , b , c , d ;  $ ~cin >> a >> b >> c >> d ;  $ ~for ( i = b ; i <= 1e4 ; i += a ) { ar [ i ] ++ ; }  $ ~for ( i = d ; i <= 1e4 ; i += c ) { ar [ i ] ++ ; }  $ ~int tp = max_element ( ar , ar + 10001 ) - ar ;  $ ~if ( ar [ tp ] == 2 ) cout << tp << endl , exit ( 0 ) ;  $ ~cout << - 1 << endl ;  $ ~return ~ ~ ( 0 ^ 0 ^ 0 ) ;  $ }
const int MaxN = 1E5 + 10 ;  $ int a [ MaxN ] ;  $ int main ( ) {  $ ~int n ;  $ ~cin >> n ;  $ ~for ( int i = 0 ; i < n ; ++ i ) cin >> a [ i ] ;  $ ~int ans = 0 ;  $ ~for ( int i = 0 ; i < n - 1 ; ++ i ) {  $ ~~int lg = log2 ( n - i - 1 ) ;  $ ~~ans += a [ i ] ;  $ ~~a [ i + ( 1 << lg ) ] += a [ i ] ;  $ ~~cout << ans << endl ;  $ ~}  $ }
int main ( ) {  $ ~int n , x1 , y1 , x2 , y2 ;  $ ~int l ;  $ ~cin >> n >> x1 >> y1 >> x2 >> y2 ;  $ ~if ( abs ( x1 - x2 ) == n )  $ ~~l = n + y1 + y2 ;  $ ~else if ( abs ( y1 - y2 ) == n )  $ ~~l = n + x1 + x2 ;  $ ~else  $ ~~l = abs ( x1 - x2 ) + abs ( y1 - y2 ) ;  $ ~cout << min ( l , 4 * n - l ) << endl ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~char f [ 200005 ] ;  $ ~int n ;  $ ~cin >> n ;  $ ~cin >> f ;  $ ~int sum1 = 0 , sum2 = 0 ;  $ ~for ( int i = 0 ; i < n ; i ++ ) {  $ ~~if ( f [ i ] == '<' )  $ ~~~sum1 ++ ;  $ ~~else  $ ~~~break ;  $ ~}  $ ~for ( int i = n - 1 ; i >= 0 ; i -- ) {  $ ~~if ( f [ i ] == '>' )  $ ~~~sum2 ++ ;  $ ~~else  $ ~~~break ;  $ ~}  $ ~cout << sum1 + sum2 << endl ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~int n ;  $ ~cin >> n ;  $ ~cout << n / 2 << endl ;  $ ~for ( int i = 1 ; i < n / 2 ; i ++ ) { cout << 2 << " " ; }  $ ~if ( n % 2 )  $ ~~cout << 3 << endl ;  $ ~else  $ ~~cout << 2 << endl ;  $ ~return 0 ;  $ }
long long n , k , arr [ 100005 ] , ans ;  $ map < long long , bool > ada ;  $ int main ( ) {  $ ~cin >> n >> k ;  $ ~ans = 0 ;  $ ~for ( int i = 1 ; i <= n ; i ++ ) { cin >> arr [ i ] ; }  $ ~sort ( arr + 1 , arr + n + 1 ) ;  $ ~for ( int i = 1 ; i <= n ; i ++ ) {  $ ~~if ( ! ada [ arr [ i ] ] ) {  $ ~~~ans ++ ;  $ ~~~ada [ arr [ i ] * k ] = true ;  $ ~~}  $ ~}  $ ~cout << ans << "\n" ;  $ }
const int maxn = 1e5 + 10 ;  $ bool arr [ maxn ] ;  $ string s , ss [ maxn ] ;  $ char c ;  $ int n ;  $ void input ( ) {  $ ~cin >> n ;  $ ~for ( int i = 0 ; i < n ; i ++ ) cin >> ss [ i ] ;  $ ~cin >> s >> c ;  $ }  $ char low ( char x ) {  $ ~if ( x >= 'A' && x <= 'Z' ) x = x - 'A' + 'a' ;  $ ~return x ;  $ }  $ int main ( ) {  $ ~input ( ) ;  $ ~int w = s . size ( ) ;  $ ~for ( int i = 0 ; i < n ; i ++ ) {  $ ~~for ( int wi = 0 ; wi + ss [ i ] . size ( ) - 1 < w ; wi ++ ) {  $ ~~~bool b = true ;  $ ~~~for ( int ssj = wi ; ssj < wi + ss [ i ] . size ( ) ; ssj ++ ) {  $ ~~~~if ( low ( s [ ssj ] ) != low ( ss [ i ] [ ssj - wi ] ) ) {  $ ~~~~~b = false ;  $ ~~~~~break ;  $ ~~~~}  $ ~~~}  $ ~~~if ( b )  $ ~~~~for ( int ssj = wi ; ssj < wi + ss [ i ] . size ( ) ; ssj ++ ) arr [ ssj ] = true ;  $ ~~}  $ ~}  $ ~for ( int i = 0 ; i < w ; i ++ )  $ ~~if ( arr [ i ] ) {  $ ~~~if ( low ( s [ i ] ) == c ) {  $ ~~~~if ( c == 'a' )  $ ~~~~~s [ i ] += ( 'b' - low ( s [ i ] ) ) ;  $ ~~~~else  $ ~~~~~s [ i ] += ( 'a' - low ( s [ i ] ) ) ;  $ ~~~} else  $ ~~~~s [ i ] += ( c - low ( s [ i ] ) ) ;  $ ~~}  $ ~cout << s << endl ;  $ }
int main ( ) {  $ ~int n , a , b , c , d ;  $ ~cin >> n >> a >> b >> c >> d ;  $ ~int p1 = 0 , p2 = 0 ;  $ ~if ( a == 0 && b > 0 ) p1 = n * 4 - b ;  $ ~if ( a > 0 && b == 0 ) p1 = a ;  $ ~if ( a == n && b >= 0 ) p1 = n + b ;  $ ~if ( a >= 0 && b == n ) p1 = n * 3 - a ;  $ ~if ( c == 0 && d > 0 ) p2 = n * 4 - d ;  $ ~if ( c > 0 && d == 0 ) p2 = c ;  $ ~if ( c == n && d >= 0 ) p2 = n + d ;  $ ~if ( c >= 0 && d == n ) p2 = n * 3 - c ;  $ ~if ( p1 < p2 ) swap ( p1 , p2 ) ;  $ ~if ( p1 - p2 > 4 * n - p1 + p2 )  $ ~~cout << 4 * n - p1 + p2 << endl ;  $ ~else  $ ~~cout << p1 - p2 << endl ;  $ ~return 0 ;  $ }
long long int a [ 1005 ] ;  $ vector < long long int > ad [ 1005 ] ;  $ stack < long long int > s ;  $ long long int visited [ 1005 ] ;  $ long long int done [ 1005 ] ;  $ long long int ans = 0 ;  $ long long int k = 0 ;  $ vector < long long int > cycles ;  $ long long int dfs ( long long int x ) {  $ ~s . push ( x ) ;  $ ~k ++ ;  $ ~done [ x ] = k ;  $ ~visited [ x ] = 1 ;  $ ~long long int i ;  $ ~for ( i = 0 ; i < ( long long int ) ( ad [ x ] . size ( ) ) ; i ++ ) {  $ ~~if ( done [ ad [ x ] [ i ] ] ) {  $ ~~~ans += k + 1 - done [ ad [ x ] [ i ] ] ;  $ ~~~if ( ( k + 1 - done [ ad [ x ] [ i ] ] ) % 2 == 0 )  $ ~~~~cycles . push_back ( ( k + 1 - done [ ad [ x ] [ i ] ] ) / 2 ) ;  $ ~~~else  $ ~~~~cycles . push_back ( k + 1 - done [ ad [ x ] [ i ] ] ) ;  $ ~~~return 0 ;  $ ~~}  $ ~~if ( ! visited [ ad [ x ] [ i ] ] ) dfs ( ad [ x ] [ i ] ) ;  $ ~}  $ ~s . pop ( ) ;  $ ~done [ x ] = 0 ;  $ ~return 0 ;  $ }  $ int main ( ) {  $ ~long long int n , i , j ;  $ ~long long int u , v ;  $ ~cin >> n ;  $ ~for ( i = 1 ; i <= n ; i ++ ) {  $ ~~cin >> a [ i ] ;  $ ~~ad [ i ] . push_back ( a [ i ] ) ;  $ ~}  $ ~for ( i = 1 ; i <= n ; i ++ ) {  $ ~~if ( a [ i ] == i ) {  $ ~~~for ( j = 1 ; j <= n ; j ++ ) {  $ ~~~~if ( a [ j ] == i && j != i ) {  $ ~~~~~cout << - 1 << endl ;  $ ~~~~~return 0 ;  $ ~~~~}  $ ~~~}  $ ~~}  $ ~}  $ ~for ( i = 1 ; i <= n ; i ++ ) {  $ ~~if ( ! visited [ i ] ) {  $ ~~~k = 0 ;  $ ~~~dfs ( i ) ;  $ ~~}  $ ~}  $ ~if ( ans != n ) {  $ ~~cout << - 1 << endl ;  $ ~~return 0 ;  $ ~}  $ ~long long int lcm = cycles [ 0 ] ;  $ ~for ( i = 1 ; i < ( long long int ) ( cycles . size ( ) ) ; i ++ ) lcm = ( cycles [ i ] * lcm ) / ( __gcd ( cycles [ i ] , lcm ) ) ;  $ ~cout << lcm << endl ;  $ ~return 0 ;  $ }
vector < long long > v ;  $ long long Power ( int n ) {  $ ~long long ans = 1 ;  $ ~for ( int i = 1 ; i <= n ; i ++ ) { ans *= 10 ; }  $ ~return ans ;  $ }  $ int main ( ) {  $ ~int l , r ;  $ ~for ( int k = 1 ; k <= 10 ; k ++ ) {  $ ~~for ( int i = 0 ; i < ( 1 << k ) ; i ++ ) {  $ ~~~long long arr [ k + 2 ] ;  $ ~~~for ( int j = 0 ; j < k ; j ++ ) { arr [ j ] = 4 ; }  $ ~~~for ( int j = 0 ; j < k ; j ++ ) {  $ ~~~~if ( i & ( 1 << j ) ) { arr [ j ] = 7 ; }  $ ~~~}  $ ~~~long long num = 0 ;  $ ~~~for ( int j = 0 ; j < k ; j ++ ) { num += arr [ j ] * Power ( j ) ; }  $ ~~~v . push_back ( num ) ;  $ ~~}  $ ~}  $ ~sort ( v . begin ( ) , v . end ( ) ) ;  $ ~cin >> l >> r ;  $ ~int lIdx = lower_bound ( v . begin ( ) , v . end ( ) , l ) - v . begin ( ) ;  $ ~int rIdx = lower_bound ( v . begin ( ) , v . end ( ) , r ) - v . begin ( ) ;  $ ~long long sum = ( v [ lIdx ] - l + 1 ) * v [ lIdx ] ;  $ ~for ( int i = lIdx + 1 ; i <= rIdx ; i ++ ) { sum += ( v [ i ] - v [ i - 1 ] ) * v [ i ] ; }  $ ~sum += ( r - v [ rIdx ] ) * v [ rIdx ] ;  $ ~cout << sum << endl ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~long long x , y , m , n , i , j ;  $ ~cin >> n ;  $ ~cin >> x >> y ;  $ ~if ( x + y > n + 1 )  $ ~~cout << "Black" << endl ;  $ ~else  $ ~~cout << "White" << endl ;  $ }
int meow ( ) {  $ ~string mp [ 8 ] ;  $ ~for ( int i = 0 ; i < 8 ; ++ i ) cin >> mp [ i ] ;  $ ~int dp [ 8 ] [ 8 ] = { 0 } , n = 8 ;  $ ~memset ( dp , - 1 , sizeof ( dp ) ) ;  $ ~for ( int i = 0 , _dwj = 0 ; i < 8 ; ++ i ) {  $ ~~for ( int j = 0 ; j < 8 ; ++ j ) {  $ ~~~if ( mp [ i ] [ j ] == 'K' and ! _dwj ) {  $ ~~~~_dwj = 1 ;  $ ~~~~dp [ i ] [ j ] = 0 ;  $ ~~~~queue < int > q ;  $ ~~~~q . push ( i ) ;  $ ~~~~q . push ( j ) ;  $ ~~~~while ( q . size ( ) ) {  $ ~~~~~int x = q . front ( ) ;  $ ~~~~~q . pop ( ) ;  $ ~~~~~int y = q . front ( ) ;  $ ~~~~~q . pop ( ) ;  $ ~~~~~if ( x > 1 ) {  $ ~~~~~~if ( y > 1 and dp [ x - 2 ] [ y - 2 ] == - 1 ) {  $ ~~~~~~~dp [ x - 2 ] [ y - 2 ] = dp [ x ] [ y ] + 1 ;  $ ~~~~~~~q . push ( x - 2 ) ;  $ ~~~~~~~q . push ( y - 2 ) ;  $ ~~~~~~}  $ ~~~~~~if ( y < n - 2 and dp [ x - 2 ] [ y + 2 ] == - 1 ) {  $ ~~~~~~~dp [ x - 2 ] [ y + 2 ] = dp [ x ] [ y ] + 1 ;  $ ~~~~~~~q . push ( x - 2 ) ;  $ ~~~~~~~q . push ( y + 2 ) ;  $ ~~~~~~}  $ ~~~~~}  $ ~~~~~if ( x < n - 2 ) {  $ ~~~~~~if ( y > 1 and dp [ x + 2 ] [ y - 2 ] == - 1 ) {  $ ~~~~~~~dp [ x + 2 ] [ y - 2 ] = dp [ x ] [ y ] + 1 ;  $ ~~~~~~~q . push ( x + 2 ) ;  $ ~~~~~~~q . push ( y - 2 ) ;  $ ~~~~~~}  $ ~~~~~~if ( y < n - 2 and dp [ x + 2 ] [ y + 2 ] == - 1 ) {  $ ~~~~~~~dp [ x + 2 ] [ y + 2 ] = dp [ x ] [ y ] + 1 ;  $ ~~~~~~~q . push ( x + 2 ) ;  $ ~~~~~~~q . push ( y + 2 ) ;  $ ~~~~~~}  $ ~~~~~}  $ ~~~~}  $ ~~~}  $ ~~}  $ ~}  $ ~for ( int i = 0 ; i < 8 ; ++ i ) {  $ ~~for ( int j = 0 ; j < 8 ; ++ j ) {  $ ~~~if ( mp [ i ] [ j ] == 'K' and dp [ i ] [ j ] ) {  $ ~~~~if ( dp [ i ] [ j ] == - 1 ) return cout << "NO" << endl , 0 ;  $ ~~~~if ( dp [ i ] [ j ] & 1 ) return cout << "NO" << endl , 0 ;  $ ~~~~return cout << "YES" << endl , 0 ;  $ ~~~}  $ ~~}  $ ~}  $ }  $ int main ( ) {  $ ~int t ;  $ ~cin >> t ;  $ ~while ( t -- ) { meow ( ) ; }  $ }
int main ( ) {  $ ~int n ;  $ ~cin >> n ;  $ ~int num = 0 , chr = 0 , CHR = 0 ;  $ ~string str ;  $ ~for ( int i = 0 ; i < n ; i ++ ) {  $ ~~cin >> str ;  $ ~~for ( int j = 0 ; j < str . length ( ) ; j ++ ) {  $ ~~~if ( str [ j ] >= 'a' & str [ j ] <= 'z' ) {  $ ~~~~chr ++ ;  $ ~~~} else if ( str [ j ] >= 'A' & str [ j ] <= 'Z' ) {  $ ~~~~CHR ++ ;  $ ~~~} else {  $ ~~~~num ++ ;  $ ~~~}  $ ~~}  $ ~~if ( chr == 0 && CHR == 0 ) {  $ ~~~str . insert ( 0 , "aA" ) ;  $ ~~~str . erase ( 2 , 2 ) ;  $ ~~} else if ( chr == 0 && num == 0 ) {  $ ~~~str . insert ( 0 , "a1" ) ;  $ ~~~str . erase ( 2 , 2 ) ;  $ ~~} else if ( CHR == 0 && num == 0 ) {  $ ~~~str . insert ( 0 , "A1" ) ;  $ ~~~str . erase ( 2 , 2 ) ;  $ ~~} else if ( chr == 0 ) {  $ ~~~for ( int j = 0 ; j < str . length ( ) ; j ++ ) {  $ ~~~~if ( str [ j ] >= 'A' & str [ j ] <= 'Z' & CHR > 1 ) {  $ ~~~~~str . insert ( j , "a" ) ;  $ ~~~~~str . erase ( j + 1 , 1 ) ;  $ ~~~~~break ;  $ ~~~~} else if ( str [ j ] >= '0' & str [ j ] <= '9' & num > 1 ) {  $ ~~~~~str . insert ( j , "a" ) ;  $ ~~~~~str . erase ( j + 1 , 1 ) ;  $ ~~~~~break ;  $ ~~~~}  $ ~~~}  $ ~~} else if ( CHR == 0 ) {  $ ~~~for ( int j = 0 ; j < str . length ( ) ; j ++ ) {  $ ~~~~if ( str [ j ] >= 'a' & str [ j ] <= 'z' & chr > 1 ) {  $ ~~~~~str . insert ( j , "A" ) ;  $ ~~~~~str . erase ( j + 1 , 1 ) ;  $ ~~~~~break ;  $ ~~~~} else if ( str [ j ] >= '0' & str [ j ] <= '9' & num > 1 ) {  $ ~~~~~str . insert ( j , "A" ) ;  $ ~~~~~str . erase ( j + 1 , 1 ) ;  $ ~~~~~break ;  $ ~~~~}  $ ~~~}  $ ~~} else if ( num == 0 ) {  $ ~~~for ( int j = 0 ; j < str . length ( ) ; j ++ ) {  $ ~~~~if ( str [ j ] >= 'a' & str [ j ] <= 'z' & chr > 1 ) {  $ ~~~~~str . insert ( j , "1" ) ;  $ ~~~~~str . erase ( j + 1 , 1 ) ;  $ ~~~~~break ;  $ ~~~~} else if ( str [ j ] >= 'A' & str [ j ] <= 'Z' & CHR > 1 ) {  $ ~~~~~str . insert ( j , "1" ) ;  $ ~~~~~str . erase ( j + 1 , 1 ) ;  $ ~~~~~break ;  $ ~~~~}  $ ~~~}  $ ~~}  $ ~~cout << str << endl ;  $ ~~num = 0 ;  $ ~~chr = 0 ;  $ ~~CHR = 0 ;  $ ~}  $ ~return 0 ;  $ }
int main ( ) {  $ ~string s ;  $ ~cin >> s ;  $ ~int nC = 0 , iC = 0 , eC = 0 , tC = 0 , disC = 0 ;  $ ~for ( int c = 0 ; c < s . length ( ) ; c ++ ) {  $ ~~if ( s [ c ] == 'n' ) {  $ ~~~nC ++ ;  $ ~~} else if ( s [ c ] == 'i' ) {  $ ~~~iC ++ ;  $ ~~} else if ( s [ c ] == 'e' ) {  $ ~~~eC ++ ;  $ ~~} else if ( s [ c ] == 't' ) {  $ ~~~tC ++ ;  $ ~~}  $ ~}  $ ~while ( nC > 0 && eC > 0 && iC > 0 && tC > 0 ) {  $ ~~nC -= 3 ;  $ ~~iC -- ;  $ ~~eC -= 3 ;  $ ~~tC -- ;  $ ~~if ( nC >= 0 && eC >= 0 && iC >= 0 && tC >= 0 ) { disC ++ ; }  $ ~~nC ++ ;  $ ~}  $ ~cout << disC << endl ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~long long n ;  $ ~cin >> n ;  $ ~long long x , y ;  $ ~cin >> x >> y ;  $ ~long long white = max ( n - x , n - y ) ;  $ ~long long black = max ( x - 1 , y - 1 ) ;  $ ~if ( black > white )  $ ~~cout << "Black\n" ;  $ ~else  $ ~~cout << "White\n" ;  $ }
int a , b , l , r , ans , T ;  $ char s [ 200 ] ;  $ bool vis [ 27 ] ;  $ int dfs ( char cp ) {  $ ~int count = 0 ;  $ ~for ( int i = 0 ; i < a ; i ++ ) s [ i ] = ( 'a' + i ) ;  $ ~for ( int i = a ; i < a + b ; i ++ ) s [ i ] = cp ;  $ ~memset ( vis , false , sizeof ( vis ) ) ;  $ ~for ( int i = b ; i < a + b ; i ++ ) vis [ s [ i ] - 'a' ] = true ;  $ ~int sta = a + b , ed = 0 ;  $ ~while ( sta < 2 * a + b ) {  $ ~~while ( vis [ ed ] ) ed ++ ;  $ ~~s [ sta ] = ed + 'a' ;  $ ~~sta ++ , ed ++ ;  $ ~}  $ ~for ( int i = 2 * a + b ; i < T ; i ++ ) s [ i ] = s [ i - 1 ] ;  $ ~memset ( vis , false , sizeof ( vis ) ) ;  $ ~if ( l <= r ) {  $ ~~for ( int i = l ; i <= r ; i ++ ) {  $ ~~~if ( ! vis [ s [ i ] - 'a' ] ) { count ++ , vis [ s [ i ] - 'a' ] = true ; }  $ ~~}  $ ~} else {  $ ~~for ( int i = 0 ; i <= r ; i ++ ) {  $ ~~~if ( ! vis [ s [ i ] - 'a' ] ) { count ++ , vis [ s [ i ] - 'a' ] = true ; }  $ ~~}  $ ~~for ( int i = l ; i < T ; i ++ ) {  $ ~~~if ( ! vis [ s [ i ] - 'a' ] ) { count ++ , vis [ s [ i ] - 'a' ] = true ; }  $ ~~}  $ ~}  $ ~return count ;  $ }  $ int main ( ) {  $ ~cin >> a >> b >> l >> r ;  $ ~l -- , r -- ;  $ ~if ( a <= b )  $ ~~ans = a + 1 ;  $ ~else  $ ~~ans = 2 * a - b ;  $ ~T = 2 * ( a + b ) ;  $ ~if ( r - l >= T )  $ ~~;  $ ~else {  $ ~~r %= T , l %= T ;  $ ~~for ( int i = 0 ; i < a ; i ++ ) { ans = min ( dfs ( 'a' + i ) , ans ) ; }  $ ~}  $ ~cout << ans << endl ;  $ ~return 0 ;  $ }
const int N = 505 ;  $ char str [ N ] ;  $ int a , b , c , s ;  $ bool judge ( ) {  $ ~int i = 0 ;  $ ~if ( a + b - c == 2 ) {  $ ~~c ++ ;  $ ~~if ( a != 1 )  $ ~~~a -- ;  $ ~~else if ( b != 1 )  $ ~~~b -- ;  $ ~} else if ( a + b - c == - 2 ) {  $ ~~c -- ;  $ ~~a ++ ;  $ ~}  $ ~if ( a + b == c ) {  $ ~~for ( i = 0 ; i < a ; i ++ ) { cout << "|" ; }  $ ~~if ( i == a ) cout << "+" ;  $ ~~for ( i = 0 ; i < b ; i ++ ) { cout << "|" ; }  $ ~~if ( i == b ) cout << "=" ;  $ ~~for ( i = 0 ; i < c ; i ++ ) cout << "|" ;  $ ~~cout << endl ;  $ ~~return true ;  $ ~}  $ ~return false ;  $ }  $ int main ( ) {  $ ~while ( gets ( str ) ) {  $ ~~s = a = b = c = 0 ;  $ ~~int len = strlen ( str ) ;  $ ~~for ( int i = 0 ; i < len ; i ++ ) {  $ ~~~if ( str [ i ] == '|' ) {  $ ~~~~if ( s == 0 )  $ ~~~~~a ++ ;  $ ~~~~else if ( s == 1 )  $ ~~~~~b ++ ;  $ ~~~~else  $ ~~~~~c ++ ;  $ ~~~} else  $ ~~~~s ++ ;  $ ~~}  $ ~~if ( ! judge ( ) ) cout << "Impossible" << endl ;  $ ~}  $ ~return 0 ;  $ }
int main ( ) {  $ ~int n , m , s ;  $ ~double k ;  $ ~cin >> n >> m >> k ;  $ ~string a ;  $ ~map < string , int > myMap ;  $ ~map < string , int > : : iterator i ;  $ ~for ( int i = 0 ; i < n ; ++ i ) {  $ ~~cin >> a >> s ;  $ ~~if ( s * k < 100 )  $ ~~~continue ;  $ ~~else  $ ~~~myMap [ a ] = s * k + 1e-6 ;  $ ~}  $ ~for ( int i = 0 ; i < m ; ++ i ) {  $ ~~cin >> a ;  $ ~~if ( myMap [ a ] == 0 ) myMap [ a ] = 0 ;  $ ~}  $ ~cout << myMap . size ( ) << "\n" ;  $ ~for ( i = myMap . begin ( ) ; i != myMap . end ( ) ; ++ i ) { cout << i -> first << " " << i -> second << "\n" ; }  $ ~return 0 ;  $ }
int main ( ) {  $ ~int n , k , x , cnt = 0 , a [ 100 ] ;  $ ~set < int > s , t ;  $ ~cin >> n >> k ;  $ ~for ( int i = 0 ; i < n ; i ++ ) cin >> a [ i ] ;  $ ~for ( int i = 0 ; i < n ; i ++ ) {  $ ~~x = a [ i ] ;  $ ~~if ( s . find ( x ) == s . end ( ) ) {  $ ~~~++ cnt ;  $ ~~~s . insert ( x ) ;  $ ~~}  $ ~~if ( s . size ( ) == k + 1 ) {  $ ~~~t = s ;  $ ~~~t . erase ( x ) ;  $ ~~~for ( int j = i + 1 ; j < n ; j ++ ) {  $ ~~~~if ( t . size ( ) == 1 ) break ;  $ ~~~~t . erase ( a [ j ] ) ;  $ ~~~}  $ ~~~s . erase ( * ( t . begin ( ) ) ) ;  $ ~~}  $ ~}  $ ~cout << cnt << endl ;  $ ~return 0 ;  $ }
long long q , ok , c = 1 ;  $ int main ( ) {  $ ~cin >> q ;  $ ~long long u = q ;  $ ~for ( long long j = 2 ; j <= sqrt ( q ) + 1 ; j ++ ) {  $ ~~if ( q % j == 0 ) {  $ ~~~while ( q % j == 0 ) {  $ ~~~~q = q / j ;  $ ~~~~ok ++ ;  $ ~~~~if ( ok <= 2 ) c *= j ;  $ ~~~~if ( ok == 2 ) break ;  $ ~~~}  $ ~~}  $ ~}  $ ~if ( q > 1 ) ok ++ ;  $ ~if ( ok <= 1 ) cout << "1" << endl << "0" << endl ;  $ ~if ( ok == 2 ) cout << "2" << endl ;  $ ~if ( ok >= 3 ) cout << "1" << endl << c << endl ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~int n ;  $ ~cin >> n ;  $ ~if ( n % 2 == 0 ) { n -= ( 1 << ( int ) log2 ( n ) ) - 1 ; }  $ ~cout << n / 2 << endl ;  $ }
const int N = 1e5 + 5 ;  $ const long long int MXN = 1e18 ;  $ char str [ 1005 ] ;  $ int main ( ) {  $ ~int n ;  $ ~cin >> n ;  $ ~cin >> str ;  $ ~if ( n == 1 && str [ 0 ] == '0' ) {  $ ~~cout << "No" << endl ;  $ ~~return 0 ;  $ ~}  $ ~int cnt0 = 0 , cnt1 = 0 ;  $ ~bool f = true ;  $ ~for ( int i = 0 ; i < n ; i ++ ) {  $ ~~if ( str [ i ] == '0' ) {  $ ~~~cnt1 = 0 ;  $ ~~~cnt0 ++ ;  $ ~~} else {  $ ~~~cnt0 = 0 ;  $ ~~~cnt1 ++ ;  $ ~~}  $ ~~if ( cnt0 >= 3 || cnt1 >= 2 ) {  $ ~~~f = false ;  $ ~~~break ;  $ ~~}  $ ~}  $ ~if ( true ) {  $ ~~int cnt = 0 ;  $ ~~for ( int i = 0 ; i < n ; i ++ ) {  $ ~~~if ( str [ i ] == '1' ) break ;  $ ~~~cnt ++ ;  $ ~~}  $ ~~if ( cnt >= 2 ) { f = false ; }  $ ~~cnt = 0 ;  $ ~~for ( int i = n - 1 ; i >= 0 ; i -- ) {  $ ~~~if ( str [ i ] == '1' ) break ;  $ ~~~cnt ++ ;  $ ~~}  $ ~~if ( cnt >= 2 ) { f = false ; }  $ ~~if ( f )  $ ~~~cout << "Yes" << endl ;  $ ~~else  $ ~~~cout << "No" << endl ;  $ ~} else {  $ ~~cout << "No" << endl ;  $ ~}  $ }
int main ( ) {  $ ~int ind = - 1 ;  $ ~string s , ans ;  $ ~cin >> s ;  $ ~for ( int i = s . size ( ) ; i >= 0 ; i -- ) {  $ ~~if ( s [ i ] == '0' ) ind = i ;  $ ~}  $ ~for ( int i = 0 ; i < s . size ( ) ; i ++ ) {  $ ~~if ( ( ind == - 1 && i == 0 ) || i == ind ) continue ;  $ ~~ans += s [ i ] ;  $ ~}  $ ~cout << ans << endl ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~int n ;  $ ~cin >> n ;  $ ~vector < string > forbid ;  $ ~for ( int i = 0 ; i < n ; i ++ ) {  $ ~~string s ;  $ ~~cin >> s ;  $ ~~string s1 = "" ;  $ ~~for ( int j = 0 ; j < s . size ( ) ; j ++ ) {  $ ~~~char a = s [ j ] ;  $ ~~~if ( a <= 'Z' ) a = a - 'A' + 'a' ;  $ ~~~s1 += a ;  $ ~~}  $ ~~forbid . push_back ( s1 ) ;  $ ~}  $ ~vector < int > occur [ 100 ] ;  $ ~string s ;  $ ~cin >> s ;  $ ~string s1 = "" ;  $ ~for ( int j = 0 ; j < s . size ( ) ; j ++ ) {  $ ~~char a = s [ j ] ;  $ ~~if ( a <= 'Z' ) a = a - 'A' + 'a' ;  $ ~~s1 += a ;  $ ~}  $ ~for ( int i = 0 ; i < n ; i ++ ) {  $ ~~string copy = s1 ;  $ ~~int pre = 0 ;  $ ~~while ( copy . size ( ) > 0 && copy . find ( forbid [ i ] ) != string : : npos ) {  $ ~~~occur [ i ] . push_back ( copy . find ( forbid [ i ] ) + pre ) ;  $ ~~~pre += copy . find ( forbid [ i ] ) + 1 ;  $ ~~~copy = copy . substr ( copy . find ( forbid [ i ] ) + 1 ) ;  $ ~~}  $ ~}  $ ~char letter ;  $ ~cin >> letter ;  $ ~bool first [ 100 ] ;  $ ~int important [ 100 ] ;  $ ~memset ( first , true , sizeof ( first ) ) ;  $ ~memset ( important , 0 , sizeof ( important ) ) ;  $ ~for ( int i = 0 ; i < n ; i ++ ) {  $ ~~for ( int j = 0 ; j < occur [ i ] . size ( ) ; j ++ ) {  $ ~~~for ( int k = 0 ; occur [ i ] [ j ] + k < s . size ( ) && k < forbid [ i ] . size ( ) ; k ++ ) {  $ ~~~~if ( first [ occur [ i ] [ j ] + k ] ) {  $ ~~~~~first [ occur [ i ] [ j ] + k ] = false ;  $ ~~~~~if ( s [ occur [ i ] [ j ] + k ] == letter ) {  $ ~~~~~~important [ occur [ i ] [ j ] + k ] = 1 ;  $ ~~~~~} else if ( s [ occur [ i ] [ j ] + k ] == letter - 'a' + 'A' ) {  $ ~~~~~~important [ occur [ i ] [ j ] + k ] = 2 ;  $ ~~~~~}  $ ~~~~}  $ ~~~~if ( s [ occur [ i ] [ j ] + k ] <= 'Z' )  $ ~~~~~s [ occur [ i ] [ j ] + k ] = letter - 'a' + 'A' ;  $ ~~~~else  $ ~~~~~s [ occur [ i ] [ j ] + k ] = letter ;  $ ~~~}  $ ~~}  $ ~}  $ ~for ( int i = 0 ; i < s . size ( ) ; i ++ ) {  $ ~~char c1 = 'a' ;  $ ~~if ( letter == 'a' ) c1 = 'b' ;  $ ~~if ( important [ i ] == 1 ) {  $ ~~~s [ i ] = c1 ;  $ ~~} else if ( important [ i ] == 2 ) {  $ ~~~s [ i ] = c1 - 'a' + 'A' ;  $ ~~}  $ ~}  $ ~cout << s << endl ;  $ ~return 0 ;  $ }
short X [ 105 ] , Y [ 105 ] ;  $ short bin [ 15 ] ;  $ const int C = 5 ;  $ map < char , int > M ;  $ void trans ( int x ) {  $ ~int ind = 0 ;  $ ~for ( int j = 0 ; j < 12 ; j ++ ) bin [ j ] = 0 ;  $ ~while ( x > 0 ) {  $ ~~bin [ ind ++ ] = x % 2 ;  $ ~~x /= 2 ;  $ ~}  $ }  $ int main ( ) {  $ ~char ch ;  $ ~int n ;  $ ~cin >> n ;  $ ~M [ 'R' ] = 0 ;  $ ~M [ 'G' ] = 1 ;  $ ~M [ 'B' ] = 2 ;  $ ~M [ 'Y' ] = 3 ;  $ ~M [ 'W' ] = 4 ;  $ ~for ( int i = 0 ; i < n ; i ++ ) {  $ ~~cin >> ch ;  $ ~~X [ i ] = M [ ch ] ;  $ ~~cin >> ch ;  $ ~~Y [ i ] = ch - '1' ;  $ ~}  $ ~int ans = 20 , anst ;  $ ~bool all ;  $ ~bool ones = true ;  $ ~for ( int i = 0 ; i < n - 1 ; i ++ ) ones = ( X [ i ] == X [ i + 1 ] && Y [ i ] == Y [ i + 1 ] ) && ones ;  $ ~if ( ! ones ) {  $ ~~for ( int i = 1 ; i <= 1023 ; i ++ ) {  $ ~~~trans ( i ) ;  $ ~~~anst = 0 ;  $ ~~~all = true ;  $ ~~~for ( int k = 0 ; k < n - 1 ; k ++ ) {  $ ~~~~for ( int l = k + 1 ; l < n ; l ++ ) {  $ ~~~~~if ( X [ k ] != X [ l ] && ( ( bin [ X [ k ] ] == 1 ) || ( bin [ X [ l ] ] == 1 ) ) )  $ ~~~~~~all = true ;  $ ~~~~~else if ( Y [ k ] != Y [ l ] && ( ( bin [ Y [ k ] + C ] == 1 ) || bin [ Y [ l ] + C ] == 1 ) )  $ ~~~~~~all = true ;  $ ~~~~~else if ( X [ l ] == X [ k ] && Y [ l ] == Y [ k ] )  $ ~~~~~~all = true ;  $ ~~~~~else  $ ~~~~~~all = false ;  $ ~~~~~if ( ! all ) break ;  $ ~~~~}  $ ~~~~if ( ! all ) break ;  $ ~~~}  $ ~~~if ( all ) {  $ ~~~~for ( int i = 0 ; i < 12 ; i ++ )  $ ~~~~~if ( bin [ i ] == 1 ) anst ++ ;  $ ~~~~ans = ans > anst ? anst : ans ;  $ ~~~}  $ ~~}  $ ~} else  $ ~~cout << 0 << endl ;  $ ~if ( ! ones ) cout << ans << endl ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~vector < int > vetor ;  $ ~int n , i , colunas ;  $ ~cin >> n ;  $ ~for ( i = 0 ; i < n ; i ++ ) {  $ ~~cin >> colunas ;  $ ~~vetor . push_back ( colunas ) ;  $ ~}  $ ~sort ( vetor . begin ( ) , vetor . end ( ) ) ;  $ ~for ( i = 0 ; i < n - 1 ; i ++ ) { cout << vetor [ i ] << " " ; }  $ ~cout << vetor [ n - 1 ] << endl ;  $ ~return 0 ;  $ }
long long tri ( long long k ) {  $ ~return k * ( k + 1 ) / 2 ;  $ }  $ int main ( ) {  $ ~long long n ;  $ ~cin >> n ;  $ ~bool flag = false ;  $ ~for ( int i = 1 ; i <= sqrt ( n * 2 ) ; i ++ ) {  $ ~~long long k = n - tri ( i ) ;  $ ~~long long l = i ;  $ ~~long long r = sqrt ( n * 2 ) ;  $ ~~while ( l <= r ) {  $ ~~~long long m = ( l + r ) >> 1 ;  $ ~~~if ( tri ( m ) < k ) {  $ ~~~~l = m + 1 ;  $ ~~~} else if ( tri ( m ) > k ) {  $ ~~~~r = m - 1 ;  $ ~~~} else {  $ ~~~~flag = true ;  $ ~~~~break ;  $ ~~~}  $ ~~}  $ ~~if ( flag ) break ;  $ ~}  $ ~if ( flag )  $ ~~cout << "YES" << endl ;  $ ~else  $ ~~cout << "NO" << endl ;  $ }
int main ( ) {  $ ~int cycles ;  $ ~cin >> cycles ;  $ ~bool a [ 100 ] [ 100 ] = { 0 } ;  $ ~int point = 1 ;  $ ~int i = 0 ;  $ ~while ( cycles > 0 ) {  $ ~~if ( cycles < i ) {  $ ~~~i = 0 ;  $ ~~~point ++ ;  $ ~~}  $ ~~a [ i ] [ point ] = 1 ;  $ ~~a [ point ] [ i ] = 1 ;  $ ~~cycles -= i ;  $ ~~i ++ ;  $ ~~if ( i >= point && cycles > 0 ) {  $ ~~~i = 0 ;  $ ~~~point ++ ;  $ ~~}  $ ~}  $ ~cout << point + 1 << endl ;  $ ~for ( int i = 0 ; i <= point ; i ++ ) {  $ ~~for ( int j = 0 ; j <= point ; j ++ ) { cout << a [ i ] [ j ] ; }  $ ~~cout << endl ;  $ ~}  $ ~return 0 ;  $ }
const int N = 100010 ;  $ const int mod = 1e9 + 7 ;  $ int add ( int x , int y ) {  $ ~int res = ( x + y ) % mod ;  $ ~return res < 0 ? res + mod : res ;  $ }  $ int mul ( int x , int y ) {  $ ~int res = ( x * 1 LL * y ) % mod ;  $ ~return res < 0 ? res + mod : res ;  $ }  $ int main ( ) {  $ ~int a , b , x ;  $ ~cin >> a >> b >> x ;  $ ~bool ok = 1 ;  $ ~int cur = - ( abs ( a ) + abs ( b ) ) + x ;  $ ~if ( cur < 0 ) {  $ ~~ok = 0 ;  $ ~} else  $ ~~ok = ! ( cur & 1 ) ;  $ ~( ok ) ? puts ( "Yes" ) : puts ( "No" ) ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~int aa , bb , flag = 0 ;  $ ~;  $ ~char a [ 15 ] ;  $ ~char b [ 15 ] ;  $ ~int month [ 12 ] = { 31 , 28 , 31 , 30 , 31 , 30 , 31 , 31 , 30 , 31 , 30 , 31 } ;  $ ~cin >> a ;  $ ~cin >> b ;  $ ~if ( strcmp ( a , "monday" ) == 0 ) {  $ ~~aa = 1 ;  $ ~} else if ( strcmp ( a , "tuesday" ) == 0 ) {  $ ~~aa = 2 ;  $ ~} else if ( strcmp ( a , "wednesday" ) == 0 ) {  $ ~~aa = 3 ;  $ ~} else if ( strcmp ( a , "thursday" ) == 0 ) {  $ ~~aa = 4 ;  $ ~} else if ( strcmp ( a , "friday" ) == 0 ) {  $ ~~aa = 5 ;  $ ~} else if ( strcmp ( a , "saturday" ) == 0 ) {  $ ~~aa = 6 ;  $ ~} else if ( strcmp ( a , "sunday" ) == 0 ) {  $ ~~aa = 7 ;  $ ~}  $ ~if ( strcmp ( b , "monday" ) == 0 ) {  $ ~~bb = 1 ;  $ ~} else if ( strcmp ( b , "tuesday" ) == 0 ) {  $ ~~bb = 2 ;  $ ~} else if ( strcmp ( b , "wednesday" ) == 0 ) {  $ ~~bb = 3 ;  $ ~} else if ( strcmp ( b , "thursday" ) == 0 ) {  $ ~~bb = 4 ;  $ ~} else if ( strcmp ( b , "friday" ) == 0 ) {  $ ~~bb = 5 ;  $ ~} else if ( strcmp ( b , "saturday" ) == 0 ) {  $ ~~bb = 6 ;  $ ~} else if ( strcmp ( b , "sunday" ) == 0 ) {  $ ~~bb = 0 ;  $ ~}  $ ~for ( int i = 0 ; i < 12 ; i ++ ) {  $ ~~if ( ( aa + month [ i ] ) % 7 == bb ) {  $ ~~~flag = 1 ;  $ ~~~break ;  $ ~~}  $ ~}  $ ~if ( flag == 1 ) {  $ ~~cout << "YES" << endl ;  $ ~} else {  $ ~~cout << "NO" << endl ;  $ ~}  $ ~return 0 ;  $ }
int a [ 110 ] ;  $ int b [ 110 ] ;  $ int main ( ) {  $ ~string s ;  $ ~getline ( cin , s ) ;  $ ~int num = 0 , ten = 1 ;  $ ~for ( int i = s . size ( ) - 1 ; i >= 0 ; i -- ) {  $ ~~if ( s [ i ] == '=' ) break ;  $ ~~if ( s [ i ] <= '9' && s [ i ] >= '0' ) {  $ ~~~int x = s [ i ] - '0' ;  $ ~~~num += x * ten ;  $ ~~~ten *= 10 ;  $ ~~}  $ ~}  $ ~int cnt = 0 ;  $ ~a [ 0 ] = 1 ;  $ ~for ( int i = 0 ; i < s . size ( ) ; i ++ ) {  $ ~~if ( s [ i ] == '+' ) {  $ ~~~a [ ++ cnt ] = 1 ;  $ ~~} else if ( s [ i ] == '-' ) {  $ ~~~a [ ++ cnt ] = 0 ;  $ ~~}  $ ~}  $ ~int x = 0 ;  $ ~for ( int i = 0 ; i <= cnt ; i ++ ) {  $ ~~b [ i ] = 1 ;  $ ~~if ( a [ i ] )  $ ~~~x += b [ i ] ;  $ ~~else  $ ~~~x -= b [ i ] ;  $ ~}  $ ~x = num - x ;  $ ~for ( int i = 0 ; i <= cnt ; i ++ ) {  $ ~~if ( x < 0 ) {  $ ~~~if ( a [ i ] == 0 && b [ i ] < num ) {  $ ~~~~int k = min ( num - b [ i ] , - x ) ;  $ ~~~~b [ i ] += k ;  $ ~~~~x += k ;  $ ~~~}  $ ~~} else if ( x > 0 ) {  $ ~~~if ( a [ i ] == 1 && b [ i ] < num ) {  $ ~~~~int k = min ( num - b [ i ] , x ) ;  $ ~~~~b [ i ] += k ;  $ ~~~~x -= k ;  $ ~~~}  $ ~~} else  $ ~~~break ;  $ ~}  $ ~x = 0 ;  $ ~for ( int i = 0 ; i <= cnt ; i ++ ) {  $ ~~if ( a [ i ] )  $ ~~~x += b [ i ] ;  $ ~~else  $ ~~~x -= b [ i ] ;  $ ~}  $ ~if ( x != num ) {  $ ~~cout << "Impossible" << endl ;  $ ~~return 0 ;  $ ~}  $ ~cout << "Possible" << endl ;  $ ~cnt = 0 ;  $ ~for ( int i = 0 ; i < s . size ( ) ; i ++ ) {  $ ~~if ( s [ i ] == '+' || s [ i ] == '-' || s [ i ] == '=' ) { cout << b [ cnt ++ ] << " " << s [ i ] << " " ; }  $ ~}  $ ~cout << num << endl ;  $ ~return 0 ;  $ }
int gcd ( int x , int y ) {  $ ~return ( y == 0 ) ? x : gcd ( y , x % y ) ;  $ }  $ const long double eps = 1e-8 ;  $ long long a , b ;  $ int main ( ) {  $ ~int t1 , t2 , x1 , x2 , t0 ;  $ ~cin >> t1 >> t2 >> x1 >> x2 >> t0 ;  $ ~if ( t1 == t2 ) {  $ ~~cout << x1 << ' ' << x2 << endl ;  $ ~~return 0 ;  $ ~}  $ ~if ( t0 == t1 ) {  $ ~~cout << x1 << ' ' << 0 << endl ;  $ ~~return 0 ;  $ ~}  $ ~if ( t0 == t2 ) {  $ ~~cout << 0 << ' ' << x2 << endl ;  $ ~~return 0 ;  $ ~}  $ ~int y1 = t2 - t0 , y2 = t0 - t1 ;  $ ~int g = gcd ( y1 , y2 ) ;  $ ~y1 /= g ;  $ ~y2 /= g ;  $ ~for ( long long k = 1 ; k <= x2 ; k ++ ) {  $ ~~long long l = ( k * y1 ) / y2 ;  $ ~~l = min ( l , ( long long ) x1 ) ;  $ ~~if ( a == 0 && b == 0 ) {  $ ~~~a = l ;  $ ~~~b = k ;  $ ~~~continue ;  $ ~~}  $ ~~if ( l * b >= a * k ) {  $ ~~~a = l ;  $ ~~~b = k ;  $ ~~}  $ ~}  $ ~cout << a << ' ' << b << endl ;  $ ~return 0 ;  $ }
const int P = 1e9 + 7 ;  $ long long gcd ( long long a , long long b ) {  $ ~return b ? gcd ( b , a % b ) : a ;  $ }  $ long long qpow ( long long a , long long n ) {  $ ~long long r = 1 % P ;  $ ~for ( a %= P ; n ; a = a * a % P , n >> = 1 )  $ ~~if ( n & 1 ) r = r * a % P ;  $ ~return r ;  $ }  $ long long inv ( long long x ) {  $ ~return x <= 1 ? 1 : inv ( P % x ) * ( P - P / x ) % P ;  $ }  $ const int N = 2e5 + 10 ;  $ int a [ N ] , b [ N ] , f [ N ] , n , m , k ;  $ int main ( ) {  $ ~long long x1 , y1 , x2 , y2 ;  $ ~cin >> x1 >> y1 >> x2 >> y2 ;  $ ~int ans = 0 ;  $ ~cin >> n ;  $ ~for ( int i = 1 ; i <= n ; ++ i ) {  $ ~~long long a , b , c ;  $ ~~cin >> a >> b >> c ;  $ ~~long long x = ( a * x1 + b * y1 + c ) ;  $ ~~long long y = ( a * x2 + b * y2 + c ) ;  $ ~~if ( x > 0 && y < 0 || x < 0 && y > 0 ) ++ ans ;  $ ~}  $ ~cout << ans << endl ;  $ }
static int mod = 1e9 + 7 ;  $ int main ( ) {  $ ~int n , m , row [ 105 ] , col [ 105 ] , table [ 105 ] [ 105 ] , minn , flag ;  $ ~while ( cin >> n >> m ) {  $ ~~flag = 0 ;  $ ~~memset ( row , 0 , sizeof ( row ) ) ;  $ ~~memset ( col , 0 , sizeof ( col ) ) ;  $ ~~for ( int i = 1 ; i <= n ; i ++ ) {  $ ~~~for ( int j = 1 ; j <= m ; j ++ ) cin >> table [ i ] [ j ] ;  $ ~~}  $ ~~if ( m >= n ) {  $ ~~~for ( int i = 1 ; i <= n ; i ++ ) {  $ ~~~~minn = 0 x3f3f3f3f ;  $ ~~~~for ( int j = 1 ; j <= m ; j ++ ) {  $ ~~~~~if ( table [ i ] [ j ] < minn ) minn = table [ i ] [ j ] ;  $ ~~~~}  $ ~~~~if ( minn ) {  $ ~~~~~row [ i ] = minn ;  $ ~~~~~for ( int j = 1 ; j <= m ; j ++ ) table [ i ] [ j ] -= minn ;  $ ~~~~}  $ ~~~}  $ ~~~for ( int j = 1 ; j <= m ; j ++ ) {  $ ~~~~minn = 0 x3f3f3f3f ;  $ ~~~~for ( int i = 1 ; i <= n ; i ++ ) {  $ ~~~~~if ( table [ i ] [ j ] < minn ) minn = table [ i ] [ j ] ;  $ ~~~~}  $ ~~~~if ( minn ) {  $ ~~~~~col [ j ] = minn ;  $ ~~~~~for ( int i = 1 ; i <= n ; i ++ ) table [ i ] [ j ] -= minn ;  $ ~~~~}  $ ~~~}  $ ~~} else {  $ ~~~for ( int j = 1 ; j <= m ; j ++ ) {  $ ~~~~minn = 0 x3f3f3f3f ;  $ ~~~~for ( int i = 1 ; i <= n ; i ++ ) {  $ ~~~~~if ( table [ i ] [ j ] < minn ) minn = table [ i ] [ j ] ;  $ ~~~~}  $ ~~~~if ( minn ) {  $ ~~~~~col [ j ] = minn ;  $ ~~~~~for ( int i = 1 ; i <= n ; i ++ ) table [ i ] [ j ] -= minn ;  $ ~~~~}  $ ~~~}  $ ~~~for ( int i = 1 ; i <= n ; i ++ ) {  $ ~~~~minn = 0 x3f3f3f3f ;  $ ~~~~for ( int j = 1 ; j <= m ; j ++ ) {  $ ~~~~~if ( table [ i ] [ j ] < minn ) minn = table [ i ] [ j ] ;  $ ~~~~}  $ ~~~~if ( minn ) {  $ ~~~~~row [ i ] = minn ;  $ ~~~~~for ( int j = 1 ; j <= m ; j ++ ) table [ i ] [ j ] -= minn ;  $ ~~~~}  $ ~~~}  $ ~~}  $ ~~flag = 1 ;  $ ~~for ( int i = 1 ; i <= n ; i ++ )  $ ~~~for ( int j = 1 ; j <= m ; j ++ ) {  $ ~~~~if ( table [ i ] [ j ] ) {  $ ~~~~~flag = 0 ;  $ ~~~~~break ;  $ ~~~~}  $ ~~~}  $ ~~if ( flag ) {  $ ~~~int tmp = 0 ;  $ ~~~for ( int i = 1 ; i <= n ; i ++ ) { tmp += row [ i ] ; }  $ ~~~for ( int j = 1 ; j <= m ; j ++ ) { tmp += col [ j ] ; }  $ ~~~cout << tmp << '\n' ;  $ ~~~for ( int i = 1 ; i <= n ; i ++ ) {  $ ~~~~for ( int k = 1 ; k <= row [ i ] ; k ++ ) cout << "row " << i << '\n' ;  $ ~~~}  $ ~~~for ( int j = 1 ; j <= m ; j ++ ) {  $ ~~~~for ( int k = 1 ; k <= col [ j ] ; k ++ ) cout << "col " << j << '\n' ;  $ ~~~}  $ ~~} else  $ ~~~cout << "-1\n" ;  $ ~}  $ ~return 0 ;  $ }
int main ( ) {  $ ~int x , t , a , b , Da , Db , total = 0 ;  $ ~bool right = false ;  $ ~int aa , bb ;  $ ~cin >> x >> t >> a >> b >> Da >> Db ;  $ ~aa = 0 ;  $ ~bb = 0 ;  $ ~for ( int i = 0 ; i <= t ; i ++ ) {  $ ~~for ( int i = 0 ; i <= t ; i ++ ) {  $ ~~~total = aa + bb ;  $ ~~~if ( total == x ) {  $ ~~~~right = true ;  $ ~~~~break ;  $ ~~~}  $ ~~~bb = b - Db * ( i ) ;  $ ~~}  $ ~~if ( right ) { break ; }  $ ~~aa = a - Da * ( i ) ;  $ ~~bb = 0 ;  $ ~}  $ ~if ( right ) {  $ ~~cout << "YES" << endl ;  $ ~} else {  $ ~~cout << "NO" << endl ;  $ ~}  $ }
const int INF = 1e9 + 10 ;  $ map < int , char > rep ;  $ int cnt [ 3 ] , tp [ 110 ] ;  $ int con ( char ch ) {  $ ~if ( 'a' <= ch && ch <= 'z' ) return 0 ;  $ ~if ( 'A' <= ch && ch <= 'Z' ) return 1 ;  $ ~return 2 ;  $ }  $ int main ( ) {  $ ~rep [ 1 ] = 'a' ;  $ ~rep [ 2 ] = 'A' ;  $ ~rep [ 4 ] = '1' ;  $ ~int Tst ;  $ ~cin >> Tst ;  $ ~while ( Tst -- ) {  $ ~~string s ;  $ ~~cin >> s ;  $ ~~int msk = 0 ;  $ ~~cnt [ 0 ] = cnt [ 1 ] = cnt [ 2 ] = 0 ;  $ ~~for ( int i = 0 ; i < ( ( int ) ( s ) . size ( ) ) ; i ++ ) {  $ ~~~tp [ i ] = con ( s [ i ] ) ;  $ ~~~msk |= 1 << tp [ i ] ;  $ ~~~++ cnt [ tp [ i ] ] ;  $ ~~}  $ ~~if ( msk == 7 )  $ ~~~cout << s << '\n' ;  $ ~~else if ( __builtin_popcount ( msk ) == 2 ) {  $ ~~~for ( int i = 0 ; i < ( ( int ) ( s ) . size ( ) ) ; i ++ )  $ ~~~~if ( cnt [ tp [ i ] ] > 1 ) {  $ ~~~~~s [ i ] = rep [ 7 ^ msk ] ;  $ ~~~~~break ;  $ ~~~~}  $ ~~~cout << s << '\n' ;  $ ~~} else {  $ ~~~int M = 7 ^ msk ;  $ ~~~int t = __builtin_ctz ( M ) ;  $ ~~~M ^ = 1 << t ;  $ ~~~s [ 0 ] = rep [ 1 << t ] ;  $ ~~~s [ 1 ] = rep [ 1 << ( __builtin_ctz ( M ) ) ] ;  $ ~~~cout << s << '\n' ;  $ ~~}  $ ~}  $ ~return 0 ;  $ }
const int oo = 1e9 , MN = 100010 ;  $ int par [ MN ] , cnt [ MN ] ;  $ int findSet ( int i ) {  $ ~return par [ i ] == i ? i : par [ i ] = findSet ( par [ i ] ) ;  $ }  $ void unionSet ( int i , int j ) {  $ ~par [ findSet ( i ) ] = findSet ( j ) ;  $ }  $ int main ( ) {  $ ~int n ;  $ ~cin >> n ;  $ ~long long k ;  $ ~cin >> k ;  $ ~vector < long long > a ( n ) ;  $ ~for ( int i = 0 ; i < n ; i ++ ) cin >> a [ i ] ;  $ ~sort ( a . begin ( ) , a . end ( ) ) ;  $ ~for ( int i = 0 ; i < n ; i ++ ) par [ i ] = i ;  $ ~for ( int i = n - 1 ; i >= 0 ; i -- ) {  $ ~~int p = lower_bound ( a . begin ( ) , a . end ( ) , a [ i ] * k ) - a . begin ( ) ;  $ ~~if ( a [ p ] == a [ i ] * k ) unionSet ( i , p ) ;  $ ~}  $ ~for ( int i = 0 ; i < n ; i ++ ) cnt [ findSet ( i ) ] ++ ;  $ ~int ans = 0 ;  $ ~for ( int i = 0 ; i < n ; i ++ ) ans += ( cnt [ i ] + 1 ) / 2 ;  $ ~cout << ans << '\n' ;  $ ~return 0 ;  $ }
const int maxn = 4 + 3 ;  $ int main ( ) {  $ ~int a [ maxn ] ;  $ ~cin >> a [ 1 ] >> a [ 2 ] ;  $ ~int d = a [ 2 ] - a [ 1 ] ;  $ ~double q = a [ 2 ] * 1.0 / a [ 1 ] ;  $ ~bool flag1 = 1 , flag2 = 1 ;  $ ~for ( int i = 3 ; i <= 4 ; i ++ ) {  $ ~~cin >> a [ i ] ;  $ ~~if ( flag1 && a [ i ] - a [ i - 1 ] != d ) { flag1 = 0 ; }  $ ~~if ( flag2 && fabs ( a [ i ] * 1.0 / a [ i - 1 ] - q ) > 1e-7 ) { flag2 = 0 ; }  $ ~}  $ ~if ( flag1 ) {  $ ~~cout << a [ 4 ] + d << endl ;  $ ~~return 0 ;  $ ~} else if ( flag2 && fabs ( a [ 4 ] * q - int ( a [ 4 ] * q + 0.5 ) ) < 1e-7 ) {  $ ~~cout << int ( a [ 4 ] * q + 0.5 ) << endl ;  $ ~~return 0 ;  $ ~} else {  $ ~~cout << 42 << endl ;  $ ~}  $ ~return 0 ;  $ }
int main ( ) {  $ ~int n ;  $ ~cin >> n ;  $ ~while ( n -- ) {  $ ~~int f = 1 ;  $ ~~char c ;  $ ~~int x1 , y1 , x2 , y2 ;  $ ~~for ( int i = 0 ; i < 8 ; i ++ ) {  $ ~~~for ( int j = 0 ; j < 8 ; j ++ ) {  $ ~~~~cin >> c ;  $ ~~~~if ( c == 'K' && f ) {  $ ~~~~~x1 = i ;  $ ~~~~~y1 = j ;  $ ~~~~~f = 0 ;  $ ~~~~} else if ( c == 'K' ) {  $ ~~~~~x2 = i ;  $ ~~~~~y2 = j ;  $ ~~~~}  $ ~~~}  $ ~~}  $ ~~if ( ( x2 - x1 ) % 4 == 0 && ( y2 - y1 ) % 4 == 0 )  $ ~~~cout << "YES" << endl ;  $ ~~else  $ ~~~cout << "NO" << endl ;  $ ~}  $ ~return 0 ;  $ }
int main ( ) {  $ ~double a , b , c , d , k ;  $ ~cin >> a >> b >> c >> d ;  $ ~if ( ( a - b ) == ( b - c ) && ( b - c ) == ( c - d ) ) {  $ ~~cout << d + ( b - a ) << endl ;  $ ~} else {  $ ~~if ( ( b / a ) == ( c / b ) && ( c / b ) == ( d / c ) ) {  $ ~~~k = d * ( b / a ) ;  $ ~~~if ( k == ( int ) k ) {  $ ~~~~cout << k << endl ;  $ ~~~} else {  $ ~~~~cout << 42 << endl ;  $ ~~~}  $ ~~} else {  $ ~~~cout << 42 << endl ;  $ ~~}  $ ~}  $ ~return 0 ;  $ }
long long gcd1 ( long long a , long long b ) {  $ ~if ( a == 0 ) return b ;  $ ~return gcd1 ( b % a , a ) ;  $ }  $ long long modx ( long long base , long long ex ) {  $ ~long long ans = 1 LL , val = base ;  $ ~while ( ex > 0 LL ) {  $ ~~if ( ex & 1 LL ) ans = ( ans * val ) % 1000000009 LL ;  $ ~~val = ( val * val ) % 1000000009 LL ;  $ ~~ex = ex >> 1 LL ;  $ ~}  $ ~return ans ;  $ }  $ vector < string > hr , mn ;  $ int used [ 8 ] ;  $ void calc ( int ind , long long last , long long num , int pw , int ty , string s ) {  $ ~if ( ind == 0 ) {  $ ~~if ( num > last || ! s . length ( ) ) return ;  $ ~~if ( ! ty )  $ ~~~hr . push_back ( s ) ;  $ ~~else  $ ~~~mn . push_back ( s ) ;  $ ~~return ;  $ ~}  $ ~for ( int i = 0 ; i < 7 ; i ++ ) {  $ ~~if ( ! used [ i ] ) {  $ ~~~used [ i ] = 1 ;  $ ~~~calc ( ind - 1 , last , num + i * pw , pw * 7 , ty , s + ( char ) ( i + '0' ) ) ;  $ ~~~used [ i ] = 0 ;  $ ~~}  $ ~}  $ }  $ int main ( ) {  $ ~long long n , m ;  $ ~cin >> n >> m ;  $ ~n -- ;  $ ~m -- ;  $ ~int cpy = n , cnt1 = 0 , cnt2 = 0 ;  $ ~while ( cpy ) {  $ ~~cpy /= 7 ;  $ ~~cnt1 ++ ;  $ ~}  $ ~cnt1 = max ( 1 , cnt1 ) ;  $ ~cpy = m ;  $ ~while ( cpy ) {  $ ~~cpy /= 7 ;  $ ~~cnt2 ++ ;  $ ~}  $ ~cnt2 = max ( 1 , cnt2 ) ;  $ ~if ( cnt1 + cnt2 > 7 ) {  $ ~~cout << "0" << endl ;  $ ~~return 0 ;  $ ~}  $ ~calc ( cnt1 , n , 0 , 1 , 0 , "" ) ;  $ ~calc ( cnt2 , m , 0 , 1 , 1 , "" ) ;  $ ~int ans = 0 ;  $ ~for ( int i = 0 ; i < hr . size ( ) ; i ++ ) {  $ ~~memset ( used , 0 , sizeof ( used ) ) ;  $ ~~int l ;  $ ~~for ( l = 0 ; l < hr [ i ] . length ( ) ; l ++ ) used [ hr [ i ] [ l ] - '0' ] = 1 ;  $ ~~for ( int j = 0 ; j < mn . size ( ) ; j ++ ) {  $ ~~~for ( l = 0 ; l < mn [ j ] . length ( ) ; l ++ )  $ ~~~~if ( used [ mn [ j ] [ l ] - '0' ] ) break ;  $ ~~~if ( l == mn [ j ] . length ( ) ) ans ++ ;  $ ~~}  $ ~}  $ ~cout << ans << endl ;  $ ~return 0 ;  $ }
set < int > s1 , s2 ;  $ set < int > : : iterator it ;  $ map < int , int > mp ;  $ int main ( ) {  $ ~int n , i , j , x , a , m , ans = 0 , p = 0 , ne = 0 ;  $ ~cin >> n ;  $ ~for ( i = 0 ; i < n ; ++ i ) {  $ ~~cin >> x >> a ;  $ ~~if ( x > 0 ) {  $ ~~~s1 . insert ( x ) ;  $ ~~~p += a ;  $ ~~} else {  $ ~~~s2 . insert ( x ) ;  $ ~~~ne += a ;  $ ~~}  $ ~~mp [ x ] = a ;  $ ~}  $ ~m = ( s1 . size ( ) > s2 . size ( ) ? s2 . size ( ) : s1 . size ( ) ) ;  $ ~if ( s1 . size ( ) == s2 . size ( ) ) {  $ ~~cout << p + ne << endl ;  $ ~} else if ( s1 . size ( ) > s2 . size ( ) ) {  $ ~~it = s1 . begin ( ) ;  $ ~~i = 0 ;  $ ~~while ( i <= m ) {  $ ~~~ans += mp [ * it ] ;  $ ~~~++ i ;  $ ~~~++ it ;  $ ~~}  $ ~~cout << ans + ne << endl ;  $ ~} else {  $ ~~it = s2 . end ( ) ;  $ ~~-- it ;  $ ~~i = 0 ;  $ ~~while ( i <= m ) {  $ ~~~ans += mp [ * it ] ;  $ ~~~++ i ;  $ ~~~-- it ;  $ ~~}  $ ~~cout << ans + p << endl ;  $ ~}  $ ~return 0 ;  $ }
const int maxn = 1100 ;  $ const int inf = 0 x3f3f3f3f ;  $ char a [ maxn ] ;  $ int main ( ) {  $ ~int n ;  $ ~cin >> n ;  $ ~for ( int i = 1 ; i <= n ; i ++ ) { cin >> a [ i ] ; }  $ ~if ( n == 1 && a [ 1 ] == '0' ) {  $ ~~cout << "No" << endl ;  $ ~~return 0 ;  $ ~}  $ ~if ( a [ 1 ] == '0' && a [ 2 ] == '0' ) {  $ ~~cout << "No" << endl ;  $ ~~return 0 ;  $ ~}  $ ~if ( a [ n ] == '0' && a [ n - 1 ] == '0' ) {  $ ~~cout << "No" << endl ;  $ ~~return 0 ;  $ ~}  $ ~for ( int i = 1 ; i <= n ; i ++ ) {  $ ~~if ( a [ i ] == '1' && a [ i + 1 ] == '1' ) {  $ ~~~cout << "No" << endl ;  $ ~~~return 0 ;  $ ~~}  $ ~~if ( a [ i ] == a [ i + 1 ] && a [ i ] == a [ i - 1 ] ) {  $ ~~~cout << "No" << endl ;  $ ~~~return 0 ;  $ ~~}  $ ~}  $ ~cout << "Yes" << endl ;  $ ~return 0 ;  $ }
string s [ 15 ] , x , y ;  $ int main ( ) {  $ ~s [ 1 ] = "monday" ;  $ ~s [ 2 ] = "tuesday" ;  $ ~s [ 3 ] = "wednesday" ;  $ ~s [ 4 ] = "thursday" ;  $ ~s [ 5 ] = "friday" ;  $ ~s [ 6 ] = "saturday" ;  $ ~s [ 7 ] = "sunday" ;  $ ~cin >> x >> y ;  $ ~int num1 = 0 , num2 = 0 ;  $ ~for ( int i = 1 ; i <= 7 ; i ++ ) {  $ ~~if ( x == s [ i ] ) { num1 = i ; }  $ ~}  $ ~for ( int i = 1 ; i <= 7 ; i ++ ) {  $ ~~if ( y == s [ i ] ) { num2 = i ; }  $ ~}  $ ~if ( num2 < num1 ) { num2 += 7 ; }  $ ~int sum = num2 - num1 ;  $ ~if ( sum == 0 || sum == 2 || sum == 3 ) {  $ ~~cout << "YES" << endl ;  $ ~} else {  $ ~~cout << "NO" << endl ;  $ ~}  $ ~return 0 ;  $ }
unsigned long long f [ 19 ] , g [ 19 ] ;  $ void get_f ( ) {  $ ~f [ 1 ] = f [ 2 ] = 9 ;  $ ~for ( int i = 3 ; i <= 18 ; i ++ ) f [ i ] = f [ i - 1 ] * 10 ;  $ }  $ void get_g ( ) {  $ ~g [ 0 ] = 1 ;  $ ~for ( int i = 1 ; i <= 18 ; i ++ ) g [ i ] = g [ i - 1 ] * 10 ;  $ }  $ unsigned long long cal ( string n ) {  $ ~int len = n . length ( ) ;  $ ~if ( len == 1 ) return n [ 0 ] - '0' ;  $ ~int first = n [ 0 ] - '0' ;  $ ~int last = n [ len - 1 ] - '0' ;  $ ~unsigned long long ret = 0 ;  $ ~for ( int i = 1 ; i < len ; i ++ ) ret += f [ i ] ;  $ ~for ( int i = 1 ; i < first ; i ++ ) ret += g [ len - 2 ] ;  $ ~string s = n . substr ( 1 , n . length ( ) - 2 ) ;  $ ~unsigned long long p = ( ! s . length ( ) ) ? 1 : atoll ( s . c_str ( ) ) + 1 ;  $ ~if ( first <= last )  $ ~~ret += p ;  $ ~else  $ ~~ret += p - 1 ;  $ ~return ret ;  $ }  $ int main ( ) {  $ ~get_f ( ) ;  $ ~get_g ( ) ;  $ ~string l , r ;  $ ~cin >> l >> r ;  $ ~unsigned long long ret = cal ( r ) - cal ( l ) ;  $ ~if ( l [ 0 ] == l [ l . length ( ) - 1 ] ) ret ++ ;  $ ~cout << ret << endl ;  $ ~return 0 ;  $ }
int N , M ;  $ int nxt [ 1001 ] , cap [ 1001 ] ;  $ bool idgr [ 1001 ] , odgr [ 1001 ] ;  $ int main ( ) {  $ ~cin >> N >> M ;  $ ~for ( int i = 1 ; i <= M ; i ++ ) {  $ ~~int a , b , c ;  $ ~~cin >> a >> b >> c ;  $ ~~odgr [ a ] = 1 ;  $ ~~idgr [ b ] = 1 ;  $ ~~nxt [ a ] = b ;  $ ~~cap [ a ] = c ;  $ ~}  $ ~int cnt = 0 ;  $ ~for ( int i = 1 ; i <= N ; i ++ ) {  $ ~~if ( ! idgr [ i ] && odgr [ i ] ) { cnt ++ ; }  $ ~}  $ ~cout << cnt << endl ;  $ ~for ( int i = 1 ; i <= N ; i ++ ) {  $ ~~if ( ! idgr [ i ] && odgr [ i ] ) {  $ ~~~int d = INT_MAX ;  $ ~~~int n = i ;  $ ~~~while ( odgr [ n ] ) {  $ ~~~~d = min ( d , cap [ n ] ) ;  $ ~~~~n = nxt [ n ] ;  $ ~~~}  $ ~~~cout << i << " " << n << " " << d << endl ;  $ ~~}  $ ~}  $ }
int open [ 100005 ] ;  $ int main ( ) {  $ ~int n ;  $ ~int cnt = 0 ;  $ ~cin >> n ;  $ ~int a [ 100005 ] , b [ 100005 ] , c [ 100005 ] ;  $ ~for ( int i = 0 ; i < n ; i ++ ) { cin >> a [ i ] >> b [ i ] ; }  $ ~for ( int i = 0 ; i < n ; i ++ ) {  $ ~~for ( int j = 0 ; j < n ; j ++ ) {  $ ~~~if ( b [ i ] == a [ j ] && i != j ) { c [ j ] = 1 ; }  $ ~~}  $ ~}  $ ~for ( int i = 0 ; i < n ; i ++ ) {  $ ~~if ( c [ i ] == 0 ) { cnt ++ ; }  $ ~}  $ ~cout << cnt << endl ;  $ }
int main ( ) {  $ ~int n , m ;  $ ~double k ;  $ ~map < string , int > mm ;  $ ~cin >> n >> m >> k ;  $ ~string name ;  $ ~int level ;  $ ~for ( int i = 0 ; i < n ; i ++ ) {  $ ~~cin >> name >> level ;  $ ~~if ( level * k + 1e-4 >= 100 ) mm [ name ] = level * k + 1e-4 ;  $ ~}  $ ~for ( int i = 0 ; i < m ; i ++ ) {  $ ~~cin >> name ;  $ ~~if ( ! mm . count ( name ) ) mm [ name ] = 0 ;  $ ~}  $ ~cout << mm . size ( ) << endl ;  $ ~for ( map < string , int > : : iterator it = mm . begin ( ) ; it != mm . end ( ) ; it ++ ) { cout << it -> first << ' ' << it -> second << endl ; }  $ }
int has ( char c ) {  $ ~return ( c - 'a' ) ;  $ }  $ int main ( ) {  $ ~int n ;  $ ~cin >> n ;  $ ~int freq [ 26 ] ;  $ ~for ( int i = 0 ; i < 26 ; i ++ ) freq [ i ] = 0 ;  $ ~string str ;  $ ~cin >> str ;  $ ~int flag = 0 ;  $ ~for ( int i = 0 ; i < n ; i ++ ) {  $ ~~int index = has ( str [ i ] ) ;  $ ~~freq [ index ] ++ ;  $ ~~if ( ( freq [ index ] >= 2 ) || ( n == 1 ) ) {  $ ~~~flag = 1 ;  $ ~~~break ;  $ ~~} else  $ ~~~flag = 0 ;  $ ~}  $ ~if ( flag == 0 )  $ ~~cout << "No"  $ ~~~<< "\n" ;  $ ~else  $ ~~cout << "Yes"  $ ~~~<< "\n" ;  $ ~return 0 ;  $ }
const long long N = 1e5 ;  $ long long n , s , x , y , mx = - 1 , c ;  $ vector < long long > v ;  $ int main ( ) {  $ ~cin >> n >> s ;  $ ~for ( long long i = 0 ; i < n ; i ++ ) {  $ ~~cin >> x >> y ;  $ ~~if ( x == s and y == 0 ) {  $ ~~~if ( 0 > mx ) { mx = 0 ; }  $ ~~} else if ( x < s ) {  $ ~~~if ( y == 0 ) {  $ ~~~~if ( 0 > mx ) { mx = 0 ; }  $ ~~~} else {  $ ~~~~c = 100 - y ;  $ ~~~~if ( c > mx ) { mx = c ; }  $ ~~~}  $ ~~}  $ ~}  $ ~cout << mx ;  $ ~cout << "\n" ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~int n , m , i ;  $ ~while ( cin >> n >> m ) {  $ ~~int a [ n ] ;  $ ~~int c = 0 , b = 0 ;  $ ~~for ( i = 0 ; i < n ; i ++ ) {  $ ~~~cin >> a [ i ] ;  $ ~~~if ( ( a [ i ] - 1 ) / m >= c ) {  $ ~~~~c = ( a [ i ] - 1 ) / m ;  $ ~~~~b = i ;  $ ~~~}  $ ~~}  $ ~~cout << b + 1 << endl ;  $ ~}  $ ~return 0 ;  $ }
int main ( ) {  $ ~int n ;  $ ~cin >> n ;  $ ~vector < int > v ( n ) ;  $ ~for ( int i = 0 ; i < n ; i ++ ) cin >> v [ i ] ;  $ ~long long int dp [ n ] [ 2 ] ;  $ ~for ( int i = 0 ; i < n ; i ++ ) {  $ ~~for ( int j = 0 ; j < 2 ; j ++ ) dp [ i ] [ j ] = 0 ;  $ ~}  $ ~long long int val = abs ( v [ 1 ] - v [ 0 ] ) ;  $ ~dp [ 0 ] [ 0 ] = val ;  $ ~long long int gmax = val ;  $ ~for ( int i = 1 ; i < n ; i ++ ) {  $ ~~long long int val = abs ( v [ i ] - v [ i - 1 ] ) ;  $ ~~dp [ i ] [ 0 ] = max ( dp [ i ] [ 0 ] , dp [ i - 1 ] [ 1 ] + val ) ;  $ ~~dp [ i ] [ 1 ] = max ( dp [ i ] [ 1 ] , dp [ i - 1 ] [ 0 ] - val ) ;  $ ~~gmax = max ( gmax , dp [ i ] [ 0 ] ) ;  $ ~~gmax = max ( gmax , dp [ i ] [ 1 ] ) ;  $ ~}  $ ~cout << gmax << endl ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~string s ;  $ ~cin >> s ;  $ ~int n = s . size ( ) ;  $ ~if ( count ( s . begin ( ) , s . end ( ) , '0' ) == 0 ) {  $ ~~s . erase ( s . begin ( ) ) ;  $ ~~cout << s << endl ;  $ ~~return 0 ;  $ ~}  $ ~for ( int i = 0 ; i < n ; i ++ ) {  $ ~~if ( s [ i ] == '0' ) {  $ ~~~s . erase ( s . begin ( ) + i ) ;  $ ~~~break ;  $ ~~}  $ ~}  $ ~cout << s << endl ;  $ }
int a [ 1000 ] , b [ 1000 ] ;  $ char C [ 1000 ] ;  $ int B ( int x ) {  $ ~int ans = 0 ;  $ ~for ( int i = 0 ; i < 10 ; i ++ )  $ ~~if ( ( 1 << i ) & x ) ans ++ ;  $ ~return ans ;  $ }  $ int main ( ) {  $ ~int n ;  $ ~cin >> n ;  $ ~for ( int i = 0 ; i < n ; i ++ ) {  $ ~~cin >> C [ i ] >> a [ i ] ;  $ ~~a [ i ] -- ;  $ ~~if ( C [ i ] == 'R' ) b [ i ] = 0 ;  $ ~~if ( C [ i ] == 'Y' ) b [ i ] = 1 ;  $ ~~if ( C [ i ] == 'W' ) b [ i ] = 2 ;  $ ~~if ( C [ i ] == 'G' ) b [ i ] = 3 ;  $ ~~if ( C [ i ] == 'B' ) b [ i ] = 4 ;  $ ~}  $ ~int ans = n + 1 ;  $ ~for ( int i = 0 ; i < 32 ; i ++ ) {  $ ~~for ( int j = 0 ; j < 32 ; j ++ ) {  $ ~~~int f [ 5 ] , g [ 5 ] ;  $ ~~~for ( int k = 0 ; k < 5 ; k ++ )  $ ~~~~if ( ( 1 << k ) & i )  $ ~~~~~f [ k ] = 1 ;  $ ~~~~else  $ ~~~~~f [ k ] = 0 ;  $ ~~~for ( int k = 0 ; k < 5 ; k ++ )  $ ~~~~if ( ( 1 << k ) & j )  $ ~~~~~g [ k ] = 1 ;  $ ~~~~else  $ ~~~~~g [ k ] = 0 ;  $ ~~~int fl = 1 ;  $ ~~~for ( int i = 0 ; i < n ; i ++ )  $ ~~~~for ( int j = i + 1 ; j < n ; j ++ ) {  $ ~~~~~if ( a [ i ] == a [ j ] && b [ i ] == b [ j ] ) continue ;  $ ~~~~~if ( a [ i ] == a [ j ] && g [ b [ i ] ] | g [ b [ j ] ] ) continue ;  $ ~~~~~if ( b [ i ] == b [ j ] && f [ a [ i ] ] | f [ a [ j ] ] ) continue ;  $ ~~~~~if ( a [ i ] != a [ j ] && b [ i ] != b [ j ] && f [ a [ i ] ] | f [ a [ j ] ] | g [ b [ i ] ] | g [ b [ j ] ] ) continue ;  $ ~~~~~fl = 0 ;  $ ~~~~}  $ ~~~if ( fl ) ans = min ( ans , B ( i ) + B ( j ) ) ;  $ ~~}  $ ~}  $ ~cout << ans << endl ;  $ }
const int MaxN = 1E5 + 10 ;  $ int a [ MaxN ] ;  $ int main ( ) {  $ ~int n ;  $ ~cin >> n ;  $ ~for ( int i = 0 ; i < n ; ++ i ) cin >> a [ i ] ;  $ ~long long ans = 0 ;  $ ~for ( int i = 0 ; i < n - 1 ; ++ i ) {  $ ~~int lg = log2 ( n - i - 1 ) ;  $ ~~ans += a [ i ] ;  $ ~~a [ i + ( 1 << lg ) ] += a [ i ] ;  $ ~~cout << ans << endl ;  $ ~}  $ }
string a ;  $ long long tou = - 1 , wei = - 1 , mk ;  $ int main ( ) {  $ ~cin >> a ;  $ ~for ( int s = 0 ; s < a . size ( ) ; s ++ ) {  $ ~~if ( a [ s ] != 'a' ) {  $ ~~~if ( tou == - 1 ) tou = s ;  $ ~~~mk = 1 ;  $ ~~} else {  $ ~~~if ( tou != - 1 ) {  $ ~~~~wei = s - 1 ;  $ ~~~~break ;  $ ~~~}  $ ~~}  $ ~}  $ ~if ( wei == - 1 && mk == 1 ) wei = a . size ( ) - 1 ;  $ ~if ( mk == 0 ) {  $ ~~a [ a . size ( ) - 1 ] = 'z' ;  $ ~} else  $ ~~for ( int s = max ( ( long long ) 0 , tou ) ; s <= wei ; s ++ ) { a [ s ] = char ( ( int ) a [ s ] - 1 ) ; }  $ ~cout << a << endl ;  $ }
int main ( ) {  $ ~long long n ;  $ ~cin >> n ;  $ ~long long ans = 0 ;  $ ~long long b = 0 ;  $ ~long long a [ n ] ;  $ ~long long sum = 0 ;  $ ~for ( int i = 0 ; i < n ; i ++ ) { cin >> a [ i ] ; }  $ ~if ( a [ 0 ] == 50 || a [ 0 ] == 100 ) { return cout << "NO" << endl , 0 ; }  $ ~for ( int i = 0 ; i < n ; i ++ ) {  $ ~~if ( a [ i ] == 25 ) {  $ ~~~ans ++ ;  $ ~~} else {  $ ~~~if ( a [ i ] == 50 ) {  $ ~~~~if ( ans >= 1 ) {  $ ~~~~~ans -- ;  $ ~~~~~sum ++ ;  $ ~~~~} else {  $ ~~~~~return cout << "NO" << endl , 0 ;  $ ~~~~}  $ ~~~} else {  $ ~~~~if ( ans >= 1 && sum >= 1 ) {  $ ~~~~~ans -- ;  $ ~~~~~sum -- ;  $ ~~~~} else if ( ans >= 3 ) {  $ ~~~~~ans -= 3 ;  $ ~~~~} else {  $ ~~~~~return cout << "NO" << endl , 0 ;  $ ~~~~}  $ ~~~}  $ ~~}  $ ~}  $ ~return cout << "YES" << endl , 0 ;  $ }
char s [ 20000 ] , s1 [ 20000 ] , s2 [ 20000 ] , s3 [ 20000 ] , s4 [ 20000 ] ;  $ int i , j , k , ans [ 20000 ] , l1 , l2 , c ;  $ int main ( ) {  $ ~for ( i = 0 ; i < 2005 ; i ++ ) ans [ i ] = 0 ;  $ ~gets ( s ) ;  $ ~gets ( s4 ) ;  $ ~l1 = strlen ( s4 ) ;  $ ~for ( i = 0 ; i < l1 ; i ++ ) s1 [ i ] = ' ' ;  $ ~strcat ( s1 , s ) ;  $ ~l2 = strlen ( s1 ) ;  $ ~for ( i = l2 ; i < l1 + l2 - 1 ; i ++ ) s1 [ i ] = '0' ;  $ ~c = l1 ;  $ ~for ( i = 1 ; i < l2 ; i ++ ) {  $ ~~for ( k = i ; k < i + c ; k ++ ) s2 [ k - i ] = s1 [ k ] ;  $ ~~for ( j = 0 ; j < c ; j ++ ) {  $ ~~~if ( s4 [ j ] == s2 [ j ] ) ans [ i ] ++ ;  $ ~~}  $ ~}  $ ~sort ( ans , ans + l2 + 1 ) ;  $ ~cout << l1 - ans [ i ] << endl ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~int n , l , a ;  $ ~cin >> n >> l >> a ;  $ ~int st = 0 ;  $ ~int ans = 0 ;  $ ~for ( int i = 0 ; i < ( n ) ; i ++ ) {  $ ~~int f , t ;  $ ~~cin >> f >> t ;  $ ~~ans += ( f - st ) / a ;  $ ~~st = f + t ;  $ ~}  $ ~ans += ( l - st ) / a ;  $ ~cout << ( ans ) << '\n' ;  $ ~return 0 ;  $ }
map < string , int > M ;  $ bool like [ 7 ] [ 7 ] ;  $ string s1 , s2 , temp ;  $ int n , g [ 3 ] ;  $ int team [ 3 ] ;  $ int heros [ 7 ] ;  $ int b1 = INT_MAX , b2 = - 1 ;  $ void back_track ( int a ) {  $ ~int i , j ;  $ ~if ( a == 7 ) {  $ ~~int count [ 3 ] = { 0 , 0 , 0 } ;  $ ~~int mx = - 1 , mn = INT_MAX ;  $ ~~for ( i = 0 ; i < 7 ; i ++ ) count [ heros [ i ] ] ++ ;  $ ~~if ( count [ 0 ] == 0 || count [ 1 ] == 0 || count [ 2 ] == 0 ) return ;  $ ~~for ( i = 0 ; i < 7 ; i ++ ) {  $ ~~~int temp = g [ heros [ i ] ] / count [ heros [ i ] ] ;  $ ~~~mx = max ( mx , temp ) ;  $ ~~~mn = min ( mn , temp ) ;  $ ~~}  $ ~~if ( mx - mn > b1 ) return ;  $ ~~int likeNum = 0 ;  $ ~~for ( i = 0 ; i < 7 ; i ++ )  $ ~~~for ( j = 0 ; j < 7 ; j ++ )  $ ~~~~if ( heros [ i ] == heros [ j ] && like [ i ] [ j ] ) likeNum ++ ;  $ ~~if ( ( mx - mn ) < b1 || ( mx - mn ) == b1 && likeNum > b2 ) {  $ ~~~b1 = mx - mn ;  $ ~~~b2 = likeNum ;  $ ~~}  $ ~~return ;  $ ~}  $ ~for ( i = 0 ; i < 3 ; i ++ ) {  $ ~~heros [ a ] = i ;  $ ~~back_track ( a + 1 ) ;  $ ~}  $ }  $ int main ( ) {  $ ~M [ "Anka" ] = 0 ;  $ ~M [ "Chapay" ] = 1 ;  $ ~M [ "Cleo" ] = 2 ;  $ ~M [ "Troll" ] = 3 ;  $ ~M [ "Dracul" ] = 4 ;  $ ~M [ "Snowy" ] = 5 ;  $ ~M [ "Hexadecimal" ] = 6 ;  $ ~for ( int i = 0 ; i < 7 ; i ++ )  $ ~~for ( int j = 0 ; j < 7 ; j ++ ) like [ i ] [ j ] = false ;  $ ~cin >> n ;  $ ~while ( n -- ) {  $ ~~cin >> s1 >> temp >> s2 ;  $ ~~like [ M [ s1 ] ] [ M [ s2 ] ] = true ;  $ ~}  $ ~cin >> g [ 0 ] >> g [ 1 ] >> g [ 2 ] ;  $ ~back_track ( 0 ) ;  $ ~cout << b1 << ' ' << b2 << endl ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~int h1 , h2 , a1 , a2 , d1 , d2 ;  $ ~int m1 , m2 , m3 ;  $ ~cin >> h1 >> a1 >> d1 ;  $ ~cin >> h2 >> a2 >> d2 ;  $ ~cin >> m1 >> m2 >> m3 ;  $ ~int ans = 1e9 + 7 ;  $ ~for ( int i = 0 ; i <= 205 ; i ++ ) {  $ ~~for ( int j = 0 ; j <= 105 ; j ++ ) {  $ ~~~int t ;  $ ~~~if ( a1 + i > d2 ) {  $ ~~~~t = h2 / ( a1 + i - d2 ) + ( h2 % ( a1 + i - d2 ) == 0 ? 0 : 1 ) ;  $ ~~~~int hp = ( a2 - d1 - j ) * t ;  $ ~~~~if ( hp >= h1 ) {  $ ~~~~~ans = min ( ans , ( hp - h1 + 1 ) * m1 + i * m2 + j * m3 ) ;  $ ~~~~} else {  $ ~~~~~ans = min ( ans , j * m3 + i * m2 ) ;  $ ~~~~}  $ ~~~}  $ ~~}  $ ~}  $ ~cout << ans << endl ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~int n , i ;  $ ~int a [ 100 ] ;  $ ~cin >> n ;  $ ~for ( i = 0 ; i < n ; i ++ ) cin >> a [ i ] ;  $ ~sort ( a , a + n ) ;  $ ~for ( i = 0 ; i < n ; i ++ ) cout << a [ i ] << ( i == n - 1 ? "\n" : " " ) ;  $ ~return 0 ;  $ }
vector < long long > g [ 105 ] , l [ 105 ] ;  $ vector < bool > vis ( 105 , false ) ;  $ void dfs ( long long n ) {  $ ~vis [ n ] = true ;  $ ~for ( long long i = 0 ; i < g [ n ] . size ( ) ; i ++ ) {  $ ~~if ( ! vis [ g [ n ] [ i ] ] ) dfs ( g [ n ] [ i ] ) ;  $ ~}  $ ~return ;  $ }  $ int main ( ) {  $ ~long long n , m , ans = 0 , nz = 0 ;  $ ~cin >> n >> m ;  $ ~for ( long long i = 1 ; i < n + 1 ; i ++ ) {  $ ~~long long nl ;  $ ~~cin >> nl ;  $ ~~if ( nl == 0 ) nz ++ ;  $ ~~for ( long long j = 0 ; j < nl ; j ++ ) {  $ ~~~long long lang ;  $ ~~~cin >> lang ;  $ ~~~l [ lang ] . push_back ( i ) ;  $ ~~}  $ ~}  $ ~for ( long long i = 1 ; i <= m ; i ++ ) {  $ ~~if ( l [ i ] . size ( ) == 0 ) continue ;  $ ~~for ( long long j = 0 ; j < l [ i ] . size ( ) ; j ++ ) {  $ ~~~for ( long long k = j + 1 ; k < l [ i ] . size ( ) ; k ++ ) {  $ ~~~~g [ l [ i ] [ j ] ] . push_back ( l [ i ] [ k ] ) ;  $ ~~~~g [ l [ i ] [ k ] ] . push_back ( l [ i ] [ j ] ) ;  $ ~~~}  $ ~~}  $ ~}  $ ~for ( long long i = 1 ; i <= n ; i ++ ) {  $ ~~if ( ! vis [ i ] ) {  $ ~~~ans ++ ;  $ ~~~dfs ( i ) ;  $ ~~}  $ ~}  $ ~if ( nz == n )  $ ~~cout << n << endl ;  $ ~else  $ ~~cout << ans - 1 << endl ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~int x , t , a , b , da , db ;  $ ~cin >> x >> t >> a >> b >> da >> db ;  $ ~if ( x == 0 ) {  $ ~~cout << "YES" << endl ;  $ ~~return 0 ;  $ ~}  $ ~int k , z ;  $ ~for ( int i = a , z = 0 ; z < t ; i -= da , z ++ ) {  $ ~~for ( int j = b , k = 0 ; k < t ; j -= db , k ++ ) {  $ ~~~if ( i == x || j == x || i + j == x ) {  $ ~~~~cout << "YES" << endl ;  $ ~~~~return 0 ;  $ ~~~}  $ ~~}  $ ~}  $ ~cout << "NO" << endl ;  $ ~return 0 ;  $ }
int n , o ;  $ string s ;  $ int main ( ) {  $ ~cin >> n >> s ;  $ ~if ( s == "0" ) {  $ ~~cout << 0 << endl ;  $ ~~return 0 ;  $ ~}  $ ~for ( int i = 0 ; i < n ; i ++ ) {  $ ~~if ( s [ i ] == '1' ) o ++ ;  $ ~}  $ ~cout << 1 ;  $ ~for ( int i = o ; i < n ; i ++ ) cout << 0 ;  $ ~cout << endl ;  $ }
int n , x [ 111111 ] ;  $ bool check ( ) {  $ ~for ( int i = 1 ; i <= n ; ++ i )  $ ~~if ( x [ x [ i ] ] != n - i + 1 ) return 0 ;  $ ~return 1 ;  $ }  $ int main ( ) {  $ ~cin >> n ;  $ ~x [ 1 ] = 2 ;  $ ~int u = 1 ;  $ ~if ( n % 4 == 0 ) {  $ ~~for ( int i = 1 ; i <= n / 4 ; ++ i ) {  $ ~~~x [ i + i - 1 ] = i * 2 ;  $ ~~~x [ n - i - i + 1 ] = i * 2 - 1 ;  $ ~~~x [ i + i ] = n + 1 - x [ n - i - i + 1 ] ;  $ ~~~x [ n - i - i + 2 ] = n + 1 - x [ i + i - 1 ] ;  $ ~~}  $ ~~for ( int i = 1 ; i < n ; ++ i ) cout << x [ i ] << ' ' ;  $ ~~cout << x [ n ] << '\n' ;  $ ~} else if ( n % 4 == 1 ) {  $ ~~for ( int i = 1 ; i <= n / 4 ; ++ i ) {  $ ~~~x [ i + i - 1 ] = i * 2 ;  $ ~~~x [ n - i - i + 1 ] = i * 2 - 1 ;  $ ~~~x [ i + i ] = n + 1 - x [ n - i - i + 1 ] ;  $ ~~~x [ n - i - i + 2 ] = n + 1 - x [ i + i - 1 ] ;  $ ~~}  $ ~~x [ n / 2 + 1 ] = n / 2 + 1 ;  $ ~~for ( int i = 1 ; i < n ; ++ i ) cout << x [ i ] << ' ' ;  $ ~~cout << x [ n ] << '\n' ;  $ ~} else  $ ~~cout << "-1\n" ;  $ ~return 0 ;  $ }
const long long mod = 1e9 + 7 ;  $ char s [ 5050 ] , t [ 5050 ] ;  $ int dp [ 5050 ] [ 5050 ] ;  $ long long ans ;  $ int main ( ) {  $ ~cin >> ( s + 1 ) ;  $ ~cin >> ( t + 1 ) ;  $ ~int lens = strlen ( s + 1 ) ;  $ ~int lent = strlen ( t + 1 ) ;  $ ~for ( int i = 1 ; i <= lens ; i ++ ) {  $ ~~for ( int j = 1 ; j <= lent ; j ++ ) {  $ ~~~if ( s [ i ] == t [ j ] ) dp [ i ] [ j ] = ( dp [ i ] [ j ] + dp [ i - 1 ] [ j - 1 ] + 1 ) % ( mod ) ;  $ ~~~dp [ i ] [ j ] = ( dp [ i ] [ j ] + dp [ i ] [ j - 1 ] ) % ( mod ) ;  $ ~~}  $ ~}  $ ~for ( int i = 1 ; i <= lens ; i ++ ) ans = ( ans + dp [ i ] [ lent ] ) % mod ;  $ ~cout << ans << endl ;  $ ~return 0 ;  $ }
int a [ 100005 ] ;  $ int main ( ) {  $ ~int n ;  $ ~cin >> n ;  $ ~if ( n % 4 >= 2 ) return puts ( "-1" ) , 0 ;  $ ~for ( int i = 1 ; i <= n / 2 ; i += 2 ) {  $ ~~a [ i ] = i + 1 ;  $ ~~a [ i + 1 ] = n - i + 1 ;  $ ~~a [ n - i + 1 ] = n - i ;  $ ~~a [ n - i ] = i ;  $ ~}  $ ~if ( n % 2 == 1 ) a [ n / 2 + 1 ] = n / 2 + 1 ;  $ ~for ( int i = 1 ; i <= n ; i ++ ) cout << a [ i ] << " \n" [ i == n ] ;  $ ~return 0 ;  $ }
int parrent [ 105 ] ;  $ bool vis [ 105 ] ;  $ int FindParrent ( int node ) {  $ ~if ( node == parrent [ node ] ) { return node ; }  $ ~return parrent [ node ] = FindParrent ( parrent [ node ] ) ;  $ }  $ void Union ( int x , int y ) {  $ ~x = FindParrent ( x ) ;  $ ~y = FindParrent ( y ) ;  $ ~if ( x != y ) { parrent [ x ] = y ; }  $ ~return ;  $ }  $ int main ( ) {  $ ~int n , m , u , v , x , y ;  $ ~cin >> n >> m ;  $ ~for ( int i = 1 ; i <= m ; i ++ ) { parrent [ i ] = i ; }  $ ~int cnt = 0 ;  $ ~for ( int i = 1 ; i <= n ; i ++ ) {  $ ~~cin >> x ;  $ ~~v = - 1 ;  $ ~~if ( x == 0 ) { cnt ++ ; }  $ ~~while ( x -- ) {  $ ~~~cin >> u ;  $ ~~~vis [ u ] = 1 ;  $ ~~~Union ( u , v == - 1 ? u : v ) ;  $ ~~~v = u ;  $ ~~}  $ ~}  $ ~set < int > st ;  $ ~for ( int i = 1 ; i <= m ; i ++ ) {  $ ~~if ( vis [ i ] ) {  $ ~~~u = FindParrent ( i ) ;  $ ~~~st . insert ( u ) ;  $ ~~}  $ ~}  $ ~int sz = st . size ( ) - 1 ;  $ ~sz = sz < 0 ? 0 : sz ;  $ ~cout << cnt + sz << endl ;  $ ~return 0 ;  $ }
const int MAX = 12e5 + 100 ;  $ int a [ MAX ] , sushu [ MAX ] , huiwen [ MAX ] ;  $ void init ( ) {  $ ~a [ 1 ] = 1 ;  $ ~a [ 0 ] = 1 ;  $ ~for ( int i = 2 ; i <= 10000 ; i ++ ) {  $ ~~if ( ! a [ i ] ) {  $ ~~~for ( int j = i ; i * j < MAX ; j ++ ) { a [ i * j ] = 1 ; }  $ ~~}  $ ~}  $ }  $ int panduan ( int x ) {  $ ~int w = x ;  $ ~int y = 0 ;  $ ~while ( w != 0 ) {  $ ~~y = y * 10 + w % 10 ;  $ ~~w /= 10 ;  $ ~}  $ ~if ( y == x )  $ ~~return 1 ;  $ ~else  $ ~~return 0 ;  $ }  $ int main ( ) {  $ ~init ( ) ;  $ ~for ( int i = 1 ; i < MAX ; i ++ ) {  $ ~~if ( a [ i ] )  $ ~~~sushu [ i ] = sushu [ i - 1 ] ;  $ ~~else  $ ~~~sushu [ i ] = sushu [ i - 1 ] + 1 ;  $ ~~if ( panduan ( i ) )  $ ~~~huiwen [ i ] = huiwen [ i - 1 ] + 1 ;  $ ~~else  $ ~~~huiwen [ i ] = huiwen [ i - 1 ] ;  $ ~}  $ ~int p , q ;  $ ~cin >> p >> q ;  $ ~for ( int i = MAX - 1 ; i >= 0 ; i -- ) {  $ ~~if ( sushu [ i ] * q <= huiwen [ i ] * p ) {  $ ~~~if ( i == 0 )  $ ~~~~cout << "Palindromic tree is better than splay tree" << endl ;  $ ~~~else  $ ~~~~cout << i << endl ;  $ ~~~return 0 ;  $ ~~}  $ ~}  $ ~return 0 ;  $ }
char a [ 55 ] [ 55 ] ;  $ int is [ 55 ] [ 55 ] ;  $ int n , m ;  $ int dx [ 4 ] = { - 1 , 1 , 0 , 0 } , dy [ 4 ] = { 0 , 0 , - 1 , 1 } ;  $ inline void work ( int x , int y ) {  $ ~if ( is [ x ] [ y ] == 1 ) return ;  $ ~if ( a [ x ] [ y ] != '#' ) return ;  $ ~is [ x ] [ y ] = 1 ;  $ ~int i ;  $ ~for ( i = 0 ; i < 4 ; i ++ ) work ( x + dx [ i ] , y + dy [ i ] ) ;  $ }  $ inline bool check ( int x , int y ) {  $ ~a [ x ] [ y ] = '.' ;  $ ~int kk = 0 ;  $ ~memset ( is , 0 , sizeof ( is ) ) ;  $ ~for ( int i = 1 ; i <= n ; i ++ ) {  $ ~~for ( int j = 1 ; j <= m ; j ++ )  $ ~~~if ( a [ i ] [ j ] == '#' && ( is [ i ] [ j ] == 0 ) ) {  $ ~~~~kk ++ ;  $ ~~~~work ( i , j ) ;  $ ~~~}  $ ~}  $ ~a [ x ] [ y ] = '#' ;  $ ~return kk > 1 ;  $ }  $ int main ( ) {  $ ~cin >> n >> m ;  $ ~int kk = 0 ;  $ ~for ( int i = 1 ; i <= n ; i ++ ) {  $ ~~for ( int j = 1 ; j <= m ; j ++ ) {  $ ~~~cin >> a [ i ] [ j ] ;  $ ~~~if ( a [ i ] [ j ] == '#' ) kk ++ ;  $ ~~}  $ ~}  $ ~if ( kk < 3 ) {  $ ~~cout << - 1 << endl ;  $ ~~return 0 ;  $ ~}  $ ~int ans = 2 ;  $ ~for ( int i = 0 ; i <= n ; i ++ ) {  $ ~~for ( int j = 1 ; j <= m ; j ++ )  $ ~~~if ( a [ i ] [ j ] == '#' ) {  $ ~~~~if ( check ( i , j ) ) ans = 1 ;  $ ~~~}  $ ~}  $ ~cout << ans << endl ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~int arr [ 4 ] [ 4 ] ;  $ ~for ( int i = 0 ; i < 4 ; i ++ ) {  $ ~~for ( int j = 0 ; j < 4 ; j ++ ) { cin >> arr [ i ] [ j ] ; }  $ ~}  $ ~int f = 0 ;  $ ~for ( int i = 0 ; i < 4 ; i ++ ) {  $ ~~if ( arr [ i ] [ 3 ] == 1 ) {  $ ~~~if ( arr [ i ] [ 0 ] == 1 || arr [ i ] [ 1 ] == 1 || arr [ i ] [ 2 ] == 1 ) f = 1 ;  $ ~~~if ( arr [ ( i + 1 ) % 4 ] [ 0 ] == 1 ) f = 1 ;  $ ~~~if ( arr [ ( i + 2 ) % 4 ] [ 1 ] == 1 ) f = 1 ;  $ ~~~if ( arr [ ( i + 3 ) % 4 ] [ 2 ] == 1 ) f = 1 ;  $ ~~}  $ ~}  $ ~if ( f == 1 )  $ ~~cout << "YES" ;  $ ~else  $ ~~cout << "NO" ;  $ ~cout << endl ;  $ ~return 0 ;  $ }
int a [ 101 ] , b [ 100 ] ;  $ int main ( ) {  $ ~int n ;  $ ~while ( cin >> n ) {  $ ~~int count = 0 ;  $ ~~for ( int i = 1 ; i <= n ; i ++ ) {  $ ~~~cin >> a [ i ] ;  $ ~~~if ( a [ i ] < 0 ) count ++ ;  $ ~~}  $ ~~if ( count <= 2 ) {  $ ~~~cout << 1 << endl << n << endl ;  $ ~~~continue ;  $ ~~}  $ ~~if ( count % 2 )  $ ~~~cout << count / 2 + 1 << endl ;  $ ~~else  $ ~~~cout << count / 2 << endl ;  $ ~~int t = 0 ;  $ ~~int x = 1 ;  $ ~~int sum = 0 ;  $ ~~for ( int i = 1 ; i <= n ; i ++ ) {  $ ~~~if ( t == 2 && a [ i ] < 0 ) {  $ ~~~~cout << i - x << " " ;  $ ~~~~sum += ( i - x ) ;  $ ~~~~x = i ;  $ ~~~~t = 0 ;  $ ~~~~count -= 2 ;  $ ~~~}  $ ~~~if ( a [ i ] < 0 ) t ++ ;  $ ~~}  $ ~~if ( sum < n ) cout << n - sum ;  $ ~~cout << endl ;  $ ~}  $ ~return 0 ;  $ }
int main ( ) {  $ ~int n ;  $ ~cin >> n ;  $ ~int a [ n ] , maxind , minind , max = 0 , min = 10000 ;  $ ~for ( int i = 0 ; i < n ; i ++ ) {  $ ~~cin >> a [ i ] ;  $ ~~if ( a [ i ] > max ) {  $ ~~~max = a [ i ] ;  $ ~~~maxind = i ;  $ ~~}  $ ~~if ( a [ i ] <= min ) {  $ ~~~min = a [ i ] ;  $ ~~~minind = i ;  $ ~~}  $ ~}  $ ~if ( maxind > minind )  $ ~~cout << ( abs ( minind - ( n - 1 ) ) + abs ( maxind - 0 ) ) - 1 << "\n" ;  $ ~else  $ ~~cout << abs ( minind - ( n - 1 ) ) + abs ( maxind - 0 ) << "\n" ;  $ }
int n , m ;  $ int cnt1 , cnt2 ;  $ int main ( ) {  $ ~cin >> n >> m ;  $ ~int ans = 0 ;  $ ~int tmp = n - 1 ;  $ ~while ( tmp ) cnt1 ++ , tmp /= 7 ;  $ ~tmp = m - 1 ;  $ ~while ( tmp ) cnt2 ++ , tmp /= 7 ;  $ ~if ( n == 1 ) cnt1 ++ ;  $ ~if ( m == 1 ) cnt2 ++ ;  $ ~for ( register int i = 0 ; i < n ; i ++ ) {  $ ~~int s [ 15 ] , tot1 = 0 ;  $ ~~tmp = i ;  $ ~~for ( register int k = 1 ; k <= cnt1 ; k ++ ) s [ k ] = tmp % 7 , tmp /= 7 ;  $ ~~if ( cnt1 > 7 ) break ;  $ ~~for ( register int j = 0 ; j < m ; j ++ ) {  $ ~~~tmp = j ;  $ ~~~if ( cnt2 + cnt1 > 7 ) break ;  $ ~~~int d [ 10 ] ;  $ ~~~memset ( d , 0 , sizeof ( d ) ) ;  $ ~~~for ( int k = 1 ; k <= cnt2 ; k ++ ) d [ tmp % 7 ] ++ , tmp /= 7 ;  $ ~~~for ( int k = 1 ; k <= cnt1 ; k ++ ) d [ s [ k ] ] ++ ;  $ ~~~for ( int k = 0 ; k <= 6 ; k ++ ) {  $ ~~~~if ( d [ k ] > 1 ) {  $ ~~~~~ans -- ;  $ ~~~~~break ;  $ ~~~~}  $ ~~~}  $ ~~~ans ++ ;  $ ~~}  $ ~}  $ ~cout << ans << endl ;  $ }
int main ( ) {  $ ~int x , y , ans = 0 ;  $ ~cin >> x >> y ;  $ ~int p ;  $ ~p = max ( abs ( x ) , abs ( y ) ) ;  $ ~if ( x == p && x > 0 && x + y > 1 ) {  $ ~~ans = -- p ;  $ ~~ans *= 4 ;  $ ~~++ ans ;  $ ~} else if ( y == p && y > 0 && y - x > 0 ) {  $ ~~ans = p ;  $ ~~ans *= 4 ;  $ ~~ans -= 2 ;  $ ~} else if ( x == ( - 1 * p ) && x < 0 && x + y < 0 ) {  $ ~~ans = p ;  $ ~~ans *= 4 ;  $ ~~-- ans ;  $ ~} else {  $ ~~if ( x + y == 1 ) {  $ ~~~x -- ;  $ ~~~ans = x ;  $ ~~~ans *= 4 ;  $ ~~} else {  $ ~~~ans = p ;  $ ~~~ans *= 4 ;  $ ~~}  $ ~}  $ ~if ( x == 0 && y == 0 ) { ans = 0 ; }  $ ~ans = max ( ans , 0 ) ;  $ ~cout << ans << '\n' ;  $ }
long long int choose ( int n , int k ) {  $ ~long long int ans = 1 ;  $ ~if ( n < k ) return 0 ;  $ ~for ( int i = n - k + 1 ; i <= n ; i ++ ) { ans *= i ; }  $ ~if ( k == 3 ) {  $ ~~assert ( ans % 6 == 0 ) ;  $ ~~ans /= 6 ;  $ ~} else {  $ ~~assert ( ans % 2 == 0 ) ;  $ ~~ans /= 2 ;  $ ~}  $ ~return ans ;  $ }  $ int main ( ) {  $ ~int n , d , tmp , l = 0 ;  $ ~long long int ans = 0 ;  $ ~cin >> n >> d ;  $ ~int points [ n ] ;  $ ~for ( int i = 0 ; i < n ; i ++ ) {  $ ~~cin >> tmp ;  $ ~~points [ i ] = tmp ;  $ ~~while ( abs ( tmp - points [ l ] ) > d ) l ++ ;  $ ~~if ( ans == 0 )  $ ~~~ans += choose ( i + 1 - l , 3 ) ;  $ ~~else  $ ~~~ans += choose ( i - l , 2 ) ;  $ ~}  $ ~cout << ans << endl ;  $ ~return 0 ;  $ }
vector < int > grafo [ 150150 ] ;  $ int n , m ;  $ int grau [ 150150 ] ;  $ int visitado [ 150150 ] ;  $ int grauCor [ 150150 ] ;  $ int dfs ( int v , int cor ) {  $ ~if ( visitado [ v ] == cor ) return 0 ;  $ ~visitado [ v ] = cor ;  $ ~int sum = 1 ;  $ ~for ( int i = 0 ; i < ( int ) grafo [ v ] . size ( ) ; i ++ ) {  $ ~~int u = grafo [ v ] [ i ] ;  $ ~~sum += dfs ( u , cor ) ;  $ ~}  $ ~return sum ;  $ }  $ int main ( ) {  $ ~cin >> n >> m ;  $ ~int i ;  $ ~int u , v ;  $ ~for ( i = 1 ; i <= m ; i ++ ) {  $ ~~cin >> u >> v ;  $ ~~grafo [ u ] . push_back ( v ) ;  $ ~~grafo [ v ] . push_back ( u ) ;  $ ~~grau [ u ] ++ ;  $ ~~grau [ v ] ++ ;  $ ~}  $ ~int cor = 1 ;  $ ~for ( i = 1 ; i <= n ; i ++ ) {  $ ~~if ( visitado [ i ] == 0 ) {  $ ~~~grauCor [ cor ] = dfs ( i , cor ) ;  $ ~~~cor ++ ;  $ ~~}  $ ~}  $ ~int ok = 1 ;  $ ~for ( i = 1 ; i <= n ; i ++ ) {  $ ~~if ( grau [ i ] != grauCor [ visitado [ i ] ] - 1 ) ok = 0 ;  $ ~}  $ ~if ( ok )  $ ~~cout << "YES" << endl ;  $ ~else  $ ~~cout << "NO" << endl ;  $ }
int main ( ) {  $ ~long long a , b ;  $ ~string in ;  $ ~cin >> a >> b >> in ;  $ ~long long x = 0 , y = 0 ;  $ ~long long len = in . length ( ) ;  $ ~long long zx = 0 , zy = 0 ;  $ ~for ( long long i = 0 ; i < len ; i ++ ) {  $ ~~if ( zx == a && zy == b ) {  $ ~~~cout << "Yes" << endl ;  $ ~~~return 0 ;  $ ~~}  $ ~~if ( in [ i ] == 'U' ) { zy ++ ; }  $ ~~if ( in [ i ] == 'D' ) { zy -- ; }  $ ~~if ( in [ i ] == 'L' ) { zx -- ; }  $ ~~if ( in [ i ] == 'R' ) { zx ++ ; }  $ ~}  $ ~if ( zx == 0 && zy == 0 ) {  $ ~~cout << "No" << endl ;  $ ~~return 0 ;  $ ~}  $ ~for ( int i = 0 ; i < len ; i ++ ) {  $ ~~if ( in [ i ] == 'U' ) { y ++ ; }  $ ~~if ( in [ i ] == 'D' ) { y -- ; }  $ ~~if ( in [ i ] == 'L' ) { x -- ; }  $ ~~if ( in [ i ] == 'R' ) { x ++ ; }  $ ~~long long chax = a - x , chay = b - y ;  $ ~~if ( zx == 0 ) {  $ ~~~if ( chay % zy == 0 && zx == chax ) {  $ ~~~~if ( chay / zy >= 0 ) {  $ ~~~~~cout << "Yes" << endl ;  $ ~~~~~return 0 ;  $ ~~~~}  $ ~~~}  $ ~~} else if ( zy == 0 ) {  $ ~~~if ( chax % zx == 0 && zy == chay ) {  $ ~~~~if ( chax / zx >= 0 ) {  $ ~~~~~cout << "Yes" << endl ;  $ ~~~~~return 0 ;  $ ~~~~}  $ ~~~}  $ ~~} else if ( chax % zx == 0 && chay % zy == 0 ) {  $ ~~~if ( chax / zx == chay / zy && chax / zx >= 0 && chay / zy >= 0 ) {  $ ~~~~cout << "Yes" << endl ;  $ ~~~~return 0 ;  $ ~~~}  $ ~~}  $ ~}  $ ~cout << "No" << endl ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~string s ;  $ ~int n ;  $ ~while ( cin >> n ) {  $ ~~cin >> s ;  $ ~~int cnt = 0 ;  $ ~~for ( int i = 0 ; i < s . length ( ) ; i ++ ) {  $ ~~~if ( s . at ( i ) == '<' )  $ ~~~~cnt ++ ;  $ ~~~else  $ ~~~~break ;  $ ~~}  $ ~~for ( int i = s . length ( ) - 1 ; i >= 0 ; i -- ) {  $ ~~~if ( s . at ( i ) == '>' )  $ ~~~~cnt ++ ;  $ ~~~else  $ ~~~~break ;  $ ~~}  $ ~~cout << cnt << endl ;  $ ~}  $ ~return 0 ;  $ }
int main ( ) {  $ ~int n , l , m , ans = 0 ;  $ ~cin >> n >> l >> m ;  $ ~int a = 0 , b = 0 , c , d ;  $ ~if ( n ) {  $ ~~cin >> a >> b ;  $ ~~ans += a / m ;  $ ~}  $ ~for ( int i = 1 ; i < n ; i ++ ) {  $ ~~cin >> c >> d ;  $ ~~ans += ( c - ( a + b ) ) / m ;  $ ~~a = c , b = d ;  $ ~}  $ ~ans += ( l - ( a + b ) ) / m ;  $ ~cout << ans << endl ;  $ ~return 0 ;  $ }
bool kontol = true ;  $ string S ;  $ int Q , W , E , R ;  $ int H , U ;  $ int main ( ) {  $ ~cin >> S ;  $ ~Q = S . find ( "BA" ) ;  $ ~W = S . rfind ( "AB" ) ;  $ ~E = S . rfind ( "BA" ) ;  $ ~R = S . find ( "AB" ) ;  $ ~if ( Q == - 1 || W == - 1 ) { kontol = false ; }  $ ~if ( abs ( Q - W ) == 1 ) { H = 1 ; }  $ ~if ( abs ( E - R ) == 1 ) { U = 1 ; }  $ ~if ( H == 1 && U == 1 ) kontol = false ;  $ ~if ( kontol )  $ ~~cout << "YES" << endl ;  $ ~else  $ ~~cout << "NO" << endl ;  $ }
int diff ( int a , int c ) {  $ ~if ( a == 0 && c == 1 ) {  $ ~~return 0 ;  $ ~} else if ( a == 1 && c == 0 ) {  $ ~~return 0 ;  $ ~} else if ( a == 0 && c == 2 ) {  $ ~~return 0 ;  $ ~} else if ( a == 1 && c == 2 ) {  $ ~~return 0 ;  $ ~} else if ( a == 2 && c == 0 ) {  $ ~~return 0 ;  $ ~} else if ( a == 2 && c == 1 ) {  $ ~~return 0 ;  $ ~} else if ( a == 0 && c == 0 ) {  $ ~~return 1 ;  $ ~} else if ( a == 1 && c == 1 ) {  $ ~~return 1 ;  $ ~} else if ( a == 2 && c == 2 ) {  $ ~~return 1 ;  $ ~} else  $ ~~return 3 ;  $ }  $ int valueArr ( char a ) {  $ ~if ( a == 'C' )  $ ~~return 0 ;  $ ~else if ( a == 'M' )  $ ~~return 1 ;  $ ~else if ( a == 'Y' )  $ ~~return 2 ;  $ ~else if ( a == '?' )  $ ~~return 3 ;  $ }  $ int main ( ) {  $ ~int n ;  $ ~cin >> n ;  $ ~int arr [ n ] ;  $ ~char temp ;  $ ~cin >> temp ;  $ ~arr [ 0 ] = valueArr ( temp ) ;  $ ~for ( int i = 1 ; i < n ; i ++ ) {  $ ~~cin >> temp ;  $ ~~arr [ i ] = valueArr ( temp ) ;  $ ~~if ( arr [ i ] == arr [ i - 1 ] && arr [ i ] != 3 ) {  $ ~~~cout << "No" << endl ;  $ ~~~return 0 ;  $ ~~}  $ ~}  $ ~int numWays = 1 , temp1 ;  $ ~if ( arr [ 0 ] == 3 || arr [ n - 1 ] == 3 )  $ ~~cout << "Yes" << endl ;  $ ~else if ( n == 1 ) {  $ ~~if ( arr [ 0 ] == 3 )  $ ~~~cout << "Yes" << endl ;  $ ~~else  $ ~~~cout << "No" << endl ;  $ ~} else if ( n == 2 ) {  $ ~~if ( arr [ 1 ] == 3 )  $ ~~~cout << "Yes" << endl ;  $ ~~else  $ ~~~cout << "No" << endl ;  $ ~} else {  $ ~~for ( int i = 1 ; i < n - 1 ; i ++ ) {  $ ~~~if ( arr [ i ] == 3 ) {  $ ~~~~temp1 = diff ( arr [ i - 1 ] , arr [ i + 1 ] ) ;  $ ~~~~numWays = numWays + temp1 ;  $ ~~~~if ( temp1 == 3 || temp1 == 1 ) { break ; }  $ ~~~}  $ ~~}  $ ~~if ( numWays > 1 )  $ ~~~cout << "Yes" << endl ;  $ ~~else  $ ~~~cout << "No" << endl ;  $ ~}  $ ~return 0 ;  $ }
int main ( ) {  $ ~int x , y ;  $ ~char s2 ;  $ ~string s1 ;  $ ~cin >> s1 ;  $ ~istringstream iss ( s1 ) ;  $ ~iss >> x >> s2 >> y ;  $ ~for ( int i = 0 ; i <= ( x * 59 ) + 59 ; i ++ ) {  $ ~~y ++ ;  $ ~~if ( y == ( x % 10 * 10 ) + ( x / 10 ) && y != 60 ) {  $ ~~~if ( x < 10 && y < 10 ) {  $ ~~~~cout << "0" << x << s2 << y << "0"  $ ~~~~~<< "\n" ;  $ ~~~~return 0 ;  $ ~~~} else if ( x < 10 ) {  $ ~~~~cout << "0" << x << s2 << y << "\n" ;  $ ~~~~return 0 ;  $ ~~~} else if ( y < 10 ) {  $ ~~~~cout << x << s2 << "0" << y << "\n" ;  $ ~~~~return 0 ;  $ ~~~} else {  $ ~~~~cout << x << s2 << y << "\n" ;  $ ~~~~return 0 ;  $ ~~~}  $ ~~} else if ( y >= 59 && x == 23 ) {  $ ~~~y = - 1 ;  $ ~~~x = 0 ;  $ ~~} else if ( y >= 59 ) {  $ ~~~y = - 1 ;  $ ~~~x ++ ;  $ ~~} else if ( x == 23 && y > 32 ) {  $ ~~~x = 0 ;  $ ~~~y = - 1 ;  $ ~~}  $ ~}  $ }
int main ( ) {  $ ~string s ;  $ ~cin >> s ;  $ ~int started = 0 , ended = 0 ;  $ ~for ( int i = 0 ; i < s . size ( ) ; i ++ ) {  $ ~~if ( s [ i ] != 'a' && ! ended ) {  $ ~~~started = 1 ;  $ ~~~s [ i ] -- ;  $ ~~} else if ( started ) {  $ ~~~ended = 1 ;  $ ~~}  $ ~}  $ ~if ( ! started ) s [ s . size ( ) - 1 ] = 'z' ;  $ ~cout << s << endl ;  $ }
int ar [ 10000 ] ;  $ int b [ 10000 ] ;  $ void inssort ( int ar [ ] , int n ) {  $ ~int i , k , j , km ;  $ ~for ( i = 1 ; i < n ; i ++ ) {  $ ~~k = ar [ i ] ;  $ ~~km = b [ i ] ;  $ ~~j = i - 1 ;  $ ~~while ( j >= 0 && ar [ j ] > k ) {  $ ~~~ar [ j + 1 ] = ar [ j ] ;  $ ~~~b [ j + 1 ] = b [ j ] ;  $ ~~~j = j - 1 ;  $ ~~}  $ ~~ar [ j + 1 ] = k ;  $ ~~b [ j + 1 ] = km ;  $ ~}  $ }  $ int main ( ) {  $ ~int s , n , sum = 0 ;  $ ~cin >> s >> n ;  $ ~sum += s ;  $ ~int i = 0 ;  $ ~for ( i = 0 ; i < n ; i ++ ) { cin >> ar [ i ] >> b [ i ] ; }  $ ~inssort ( ar , n ) ;  $ ~for ( i = 0 ; i < n ; i ++ ) {  $ ~~if ( sum > ar [ i ] ) {  $ ~~~sum += b [ i ] ;  $ ~~} else {  $ ~~~cout << "NO" << endl ;  $ ~~~return 0 ;  $ ~~}  $ ~}  $ ~cout << "YES" << endl ;  $ ~return 0 ;  $ }
const int INF = 1 << 29 ;  $ int l [ 4 ] , s [ 4 ] , r [ 4 ] , p [ 4 ] ;  $ int main ( ) {  $ ~for ( int i = 0 ; i < 4 ; i ++ ) cin >> l [ i ] >> s [ i ] >> r [ i ] >> p [ i ] ;  $ ~for ( int i = 0 ; i < 4 ; i ++ ) {  $ ~~if ( p [ i ] ) {  $ ~~~if ( l [ ( i + 1 ) % 4 ] || r [ ( i + 3 ) % 4 ] || s [ ( i + 2 ) % 4 ] ) {  $ ~~~~cout << "YES\n" ;  $ ~~~~return 0 ;  $ ~~~}  $ ~~~if ( l [ i ] || r [ i ] || s [ i ] ) {  $ ~~~~cout << "YES\n" ;  $ ~~~~return 0 ;  $ ~~~}  $ ~~}  $ ~}  $ ~cout << "NO\n" ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~int n ;  $ ~cin >> n ;  $ ~cout << n << endl ;  $ ~;  $ ~for ( int i = 1 ; i < n ; i ++ ) { cout << 1 << " " ; }  $ ~cout << 1 << endl ;  $ }
int main ( ) {  $ ~int n , k , x , cnt = 0 , a [ 100 ] ;  $ ~set < int > s , t ;  $ ~cin >> n >> k ;  $ ~for ( int i = 0 ; i < n ; i ++ ) cin >> a [ i ] ;  $ ~for ( int i = 0 ; i < n ; i ++ ) {  $ ~~x = a [ i ] ;  $ ~~if ( s . find ( x ) == s . end ( ) ) {  $ ~~~++ cnt ;  $ ~~~s . insert ( x ) ;  $ ~~}  $ ~~if ( s . size ( ) == k + 1 ) {  $ ~~~t = s ;  $ ~~~t . erase ( x ) ;  $ ~~~for ( int j = i + 1 ; j < n ; j ++ ) {  $ ~~~~if ( t . size ( ) == 1 ) break ;  $ ~~~~t . erase ( a [ j ] ) ;  $ ~~~}  $ ~~~s . erase ( * ( t . begin ( ) ) ) ;  $ ~~}  $ ~}  $ ~cout << cnt << endl ;  $ ~return 0 ;  $ }
const int maxn = 200010 ;  $ const int MAXM = 500000 ;  $ priority_queue < int > in [ maxn ] ;  $ int cmp ( priority_queue < int > a , priority_queue < int > b ) {  $ ~return a . top ( ) > b . top ( ) ;  $ }  $ int main ( ) {  $ ~int n ;  $ ~cin >> n ;  $ ~for ( int i = 0 ; i < n ; i ++ ) {  $ ~~int temp , a ;  $ ~~cin >> temp ;  $ ~~for ( int j = 0 ; j < temp ; j ++ ) {  $ ~~~cin >> a ;  $ ~~~in [ i ] . push ( a ) ;  $ ~~}  $ ~}  $ ~sort ( in , in + n , cmp ) ;  $ ~long long sum = 0 ;  $ ~for ( int i = 1 ; i < n ; i ++ ) {  $ ~~if ( in [ i ] . top ( ) < in [ 0 ] . top ( ) ) {  $ ~~~int diff = in [ 0 ] . top ( ) - in [ i ] . top ( ) ;  $ ~~~while ( ! in [ i ] . empty ( ) ) {  $ ~~~~in [ 0 ] . push ( in [ i ] . top ( ) + diff ) ;  $ ~~~~in [ i ] . pop ( ) ;  $ ~~~~sum += diff ;  $ ~~~}  $ ~~}  $ ~}  $ ~cout << sum << endl ;  $ ~return 0 ;  $ }
const int N = 200000 + 10 ;  $ int y , k , n ;  $ string s ;  $ int main ( ) {  $ ~cin >> s ;  $ ~bool flag = false ;  $ ~for ( int i = 0 ; i < s . length ( ) ; i ++ ) {  $ ~~if ( s [ i ] == 'a' && flag ) break ;  $ ~~if ( s [ i ] == 'a' ) continue ;  $ ~~s [ i ] = s [ i ] - 1 ;  $ ~~flag = true ;  $ ~}  $ ~if ( ! flag ) {  $ ~~int len = s . length ( ) ;  $ ~~s [ len - 1 ] = 'z' ;  $ ~}  $ ~cout << s << endl ;  $ ~return 0 ;  $ }
int n , a [ 100 ] ;  $ string s ;  $ bool check ( int k ) {  $ ~int t = 0 ;  $ ~for ( int i = 0 ; i < 26 ; i ++ ) t += ceil ( ( double ) a [ i ] / k ) ;  $ ~if ( t > n ) return 0 ;  $ ~return 1 ;  $ }  $ int bs ( int b , int e ) {  $ ~if ( e - b == 1 ) return b ;  $ ~int mid = ( b + e ) / 2 ;  $ ~if ( check ( mid - 1 ) ) return bs ( b , mid ) ;  $ ~return bs ( mid , e ) ;  $ }  $ int main ( ) {  $ ~cin >> s >> n ;  $ ~for ( int i = 0 ; i < s . size ( ) ; i ++ ) a [ s [ i ] - 'a' ] ++ ;  $ ~int t = bs ( 1 , 2000 ) ;  $ ~string ans = "" ;  $ ~for ( int i = 0 ; i < 26 ; i ++ )  $ ~~for ( int j = 0 ; j < ceil ( ( double ) a [ i ] / t ) ; j ++ ) ans = ans + ( char ) ( i + 'a' ) ;  $ ~while ( ans . size ( ) < n ) ans = ans + 'a' ;  $ ~if ( t == 1999 )  $ ~~cout << - 1 << endl ;  $ ~else  $ ~~cout << t << endl << ans << endl ;  $ }
int a [ 302000 ] ;  $ int cnt [ ( int ) ( 2e7 ) ] ;  $ bool done [ ( int ) ( 2e7 ) ] ;  $ const int m = 1.5e7 ;  $ int main ( ) {  $ ~int n ;  $ ~cin >> n ;  $ ~int g ;  $ ~for ( int i = 1 ; i <= n ; i ++ ) {  $ ~~cin >> a [ i ] ;  $ ~~++ cnt [ a [ i ] ] ;  $ ~~if ( i > 1 ) {  $ ~~~g = __gcd ( a [ i ] , g ) ;  $ ~~} else  $ ~~~g = a [ i ] ;  $ ~}  $ ~int ans = 0 ;  $ ~for ( int i = g + 1 ; i <= m ; ++ i ) {  $ ~~if ( ! done [ i ] ) {  $ ~~~int sum = 0 ;  $ ~~~for ( int j = i ; j <= m ; j += i ) {  $ ~~~~sum += cnt [ j ] ;  $ ~~~~done [ j ] = true ;  $ ~~~}  $ ~~~ans = max ( ans , sum ) ;  $ ~~}  $ ~}  $ ~if ( ans == 0 ) {  $ ~~puts ( "-1" ) ;  $ ~} else {  $ ~~cout << n - ans << endl ;  $ ~}  $ ~return 0 ;  $ }
int main ( ) {  $ ~string s [ ] = { "C" , "C#" , "D" , "D#" , "E" , "F" , "F#" , "G" , "G#" , "A" , "B" , "H" } ;  $ ~string a , b , c ;  $ ~int i ;  $ ~cin >> a >> b >> c ;  $ ~int x [ 13 ] ;  $ ~for ( i = 0 ; i < 12 ; ++ i ) {  $ ~~if ( s [ i ] == a || s [ i ] == b || s [ i ] == c ) x [ i ] = 1 ;  $ ~}  $ ~for ( i = 0 ; i < 12 ; ++ i ) {  $ ~~if ( x [ i ] == 1 ) {  $ ~~~if ( x [ ( i + 4 ) % 12 ] == 1 && x [ ( i + 7 ) % 12 ] == 1 ) {  $ ~~~~cout << "major" << endl ;  $ ~~~~return 0 ;  $ ~~~} else if ( x [ ( i + 3 ) % 12 ] == 1 && x [ ( i + 7 ) % 12 ] == 1 ) {  $ ~~~~cout << "minor" << endl ;  $ ~~~~return 0 ;  $ ~~~}  $ ~~}  $ ~}  $ ~cout << "strange" << endl ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~int n ;  $ ~cin >> n ;  $ ~int a [ n ] ;  $ ~for ( int i = 1 ; i <= n ; i ++ ) cin >> a [ i ] ;  $ ~int c = 0 , t = 0 ;  $ ~for ( int i = 1 ; i <= n ; i ++ ) {  $ ~~if ( a [ i ] < 0 ) {  $ ~~~c ++ ;  $ ~~} else {  $ ~~~t ++ ;  $ ~~}  $ ~}  $ ~if ( t == n || n == 1 ) {  $ ~~cout << "1" << endl << n << endl ;  $ ~~return 0 ;  $ ~}  $ ~if ( c % 2 == 0 )  $ ~~cout << c / 2 << endl ;  $ ~else  $ ~~cout << c / 2 + 1 << endl ;  $ ~int f = 0 , d = 0 ;  $ ~for ( int i = 1 ; i < n ; i ++ ) {  $ ~~if ( a [ i ] < 0 ) { d ++ ; }  $ ~~if ( d == 2 && a [ i + 1 ] < 0 ) {  $ ~~~cout << i - f << " " ;  $ ~~~f = i ;  $ ~~~d = 0 ;  $ ~~}  $ ~}  $ ~cout << n - f << endl ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~int n , s ;  $ ~cin >> n >> s ;  $ ~int ans = - 1 ;  $ ~for ( int i = 0 ; i < n ; ++ i ) {  $ ~~int a , b ;  $ ~~cin >> a >> b ;  $ ~~if ( s * 100 < a * 100 + b ) continue ;  $ ~~ans = max ( ( ( 100 * s ) - ( a * 100 + b ) ) % 100 , ans ) ;  $ ~}  $ ~cout << ans << endl ;  $ ~return 0 ;  $ }
int f [ 110 ] [ 110 ] ;  $ int main ( ) {  $ ~int i , j , n , k , m ;  $ ~while ( cin >> k ) {  $ ~~for ( i = 1 ; i <= 100 ; i ++ )  $ ~~~for ( j = 1 ; j <= 100 ; j ++ ) f [ i ] [ j ] = 0 ;  $ ~~for ( i = 1 ; i <= 100 ; i ++ )  $ ~~~if ( i * ( i - 1 ) * ( i - 2 ) / 6 > k ) break ;  $ ~~n = i - 1 ;  $ ~~for ( i = 1 ; i <= n ; i ++ )  $ ~~~for ( j = 1 ; j <= n ; j ++ )  $ ~~~~if ( i != j ) f [ i ] [ j ] = 1 ;  $ ~~k = k - n * ( n - 1 ) * ( n - 2 ) / 6 ;  $ ~~while ( k > 0 ) {  $ ~~~for ( i = 1 ; i <= 100 ; i ++ )  $ ~~~~if ( i * ( i - 1 ) / 2 > k ) break ;  $ ~~~m = i - 1 ;  $ ~~~for ( i = 1 ; i <= m ; i ++ ) f [ i ] [ n + 1 ] = f [ n + 1 ] [ i ] = 1 ;  $ ~~~n += 1 ;  $ ~~~k = k - ( m - 1 ) * m / 2 ;  $ ~~}  $ ~~cout << n << endl ;  $ ~~for ( i = 1 ; i <= n ; i ++ ) {  $ ~~~for ( j = 1 ; j <= n ; j ++ ) cout << f [ i ] [ j ] ;  $ ~~~cout << endl ;  $ ~~}  $ ~}  $ ~return 0 ;  $ }
int main ( ) {  $ ~int h1 , h2 , p1 , p2 , d1 , d2 ;  $ ~cin >> h1 >> p1 >> d1 >> h2 >> p2 >> d2 ;  $ ~int ph , pp , pd ;  $ ~cin >> ph >> pp >> pd ;  $ ~int ans = 1000000000 ;  $ ~for ( int i = 0 ; i <= max ( p2 - d1 , 0 ) ; i ++ ) {  $ ~~for ( int j = p1 <= d2 ? d2 - p1 + 1 : 0 ; j <= h2 + d2 ; j ++ ) {  $ ~~~int t = ( h2 - 1 ) / ( p1 + j - d2 ) + 1 ;  $ ~~~int r = t * ( p2 - d1 - i ) - h1 + 1 ;  $ ~~~r = r < 0 ? 0 : r ;  $ ~~~ans = min ( ans , r * ph + j * pp + i * pd ) ;  $ ~~}  $ ~}  $ ~ans = ans == 1000000000 ? 0 : ans ;  $ ~cout << ans << endl ;  $ }
const int MAXN = 100005 ;  $ const int MOD = 998244353 ;  $ int a [ MAXN ] ;  $ int dp [ 201 ] [ 2 ] ;  $ int newdp [ 201 ] [ 2 ] ;  $ int main ( ) {  $ ~int n ;  $ ~cin >> n ;  $ ~for ( int i = 0 ; i < n ; ++ i ) { cin >> a [ i ] ; }  $ ~for ( int i = 0 ; i < n ; ++ i ) {  $ ~~if ( i == 0 ) {  $ ~~~if ( a [ i ] == - 1 ) {  $ ~~~~for ( int x = 1 ; x <= 200 ; ++ x ) { newdp [ x ] [ 0 ] = 1 ; }  $ ~~~} else {  $ ~~~~newdp [ a [ i ] ] [ 0 ] = 1 ;  $ ~~~}  $ ~~} else {  $ ~~~if ( a [ i ] == - 1 ) {  $ ~~~~int flag0 = 0 ;  $ ~~~~int flag1 = 0 ;  $ ~~~~for ( int y = 1 ; y <= 200 ; ++ y ) {  $ ~~~~~flag1 += dp [ y ] [ 1 ] ;  $ ~~~~~flag1 %= MOD ;  $ ~~~~}  $ ~~~~for ( int x = 1 ; x <= 200 ; ++ x ) {  $ ~~~~~flag1 -= dp [ x - 1 ] [ 1 ] ;  $ ~~~~~flag1 += MOD ;  $ ~~~~~flag1 %= MOD ;  $ ~~~~~flag1 -= dp [ x - 1 ] [ 0 ] ;  $ ~~~~~flag1 += MOD ;  $ ~~~~~flag1 %= MOD ;  $ ~~~~~flag0 += dp [ x - 1 ] [ 1 ] ;  $ ~~~~~flag0 %= MOD ;  $ ~~~~~flag0 += dp [ x - 1 ] [ 0 ] ;  $ ~~~~~flag0 %= MOD ;  $ ~~~~~flag1 += dp [ x ] [ 0 ] ;  $ ~~~~~flag1 %= MOD ;  $ ~~~~~newdp [ x ] [ 0 ] = flag0 ;  $ ~~~~~newdp [ x ] [ 1 ] = flag1 ;  $ ~~~~}  $ ~~~} else {  $ ~~~~int x = a [ i ] ;  $ ~~~~for ( int y = 1 ; y <= 200 ; ++ y ) {  $ ~~~~~int flag = x <= y ? 1 : 0 ;  $ ~~~~~newdp [ x ] [ flag ] += dp [ y ] [ 1 ] ;  $ ~~~~~newdp [ x ] [ flag ] %= MOD ;  $ ~~~~~if ( y <= x ) {  $ ~~~~~~newdp [ x ] [ flag ] += dp [ y ] [ 0 ] ;  $ ~~~~~~newdp [ x ] [ flag ] %= MOD ;  $ ~~~~~}  $ ~~~~}  $ ~~~}  $ ~~}  $ ~~memcpy ( dp , newdp , 201 * 2 * 4 ) ;  $ ~~memset ( newdp , 0 , 201 * 2 * 4 ) ;  $ ~}  $ ~int ans = 0 ;  $ ~for ( int x = 1 ; x <= 200 ; ++ x ) {  $ ~~ans += dp [ x ] [ 1 ] ;  $ ~~ans %= MOD ;  $ ~}  $ ~cout << ans << endl ;  $ ~return 0 ;  $ }
int pre [ 1005 ] ;  $ void init ( ) {  $ ~int i ;  $ ~for ( i = 1 ; i <= 100 ; i ++ ) { pre [ i ] = i ; }  $ }  $ int find ( int x ) {  $ ~int t = x ;  $ ~while ( pre [ t ] != t ) { t = pre [ t ] ; }  $ ~return t ;  $ }  $ int join ( int x , int y ) {  $ ~int m = find ( x ) ;  $ ~int n = find ( y ) ;  $ ~if ( m != n ) { pre [ n ] = m ; }  $ }  $ int main ( ) {  $ ~int n , m ;  $ ~int a [ 105 ] , b [ 105 ] , c [ 105 ] , d [ 105 ] ;  $ ~while ( cin >> n >> m ) {  $ ~~init ( ) ;  $ ~~int sum = 0 ;  $ ~~int i , j , k = 0 , l = 0 ;  $ ~~memset ( c , 0 , sizeof ( c ) ) ;  $ ~~memset ( d , 0 , sizeof ( d ) ) ;  $ ~~for ( i = 0 ; i < n ; i ++ ) {  $ ~~~cin >> a [ i ] ;  $ ~~~if ( a [ i ] == 0 ) {  $ ~~~~sum ++ ;  $ ~~~~continue ;  $ ~~~}  $ ~~~for ( j = 0 ; j < a [ i ] ; j ++ ) {  $ ~~~~int pl = 0 ;  $ ~~~~cin >> b [ j ] ;  $ ~~~~for ( int q = 0 ; q < k ; q ++ ) {  $ ~~~~~if ( c [ q ] == b [ j ] ) { pl = 1 ; }  $ ~~~~}  $ ~~~~if ( pl == 0 ) { c [ k ++ ] = b [ j ] ; }  $ ~~~}  $ ~~~sort ( b , b + a [ i ] ) ;  $ ~~~for ( j = 1 ; j < a [ i ] ; j ++ ) { join ( b [ j - 1 ] , b [ j ] ) ; }  $ ~~}  $ ~~for ( i = 0 ; i < k ; i ++ ) {  $ ~~~int hui = find ( c [ i ] ) ;  $ ~~~d [ l ++ ] = hui ;  $ ~~}  $ ~~sort ( d , d + l ) ;  $ ~~for ( i = 1 ; i < l ; i ++ ) {  $ ~~~if ( d [ i ] != d [ i - 1 ] ) { sum ++ ; }  $ ~~}  $ ~~cout << sum << endl ;  $ ~}  $ ~return 0 ;  $ }
int main ( ) {  $ ~long long t1 , t2 , x1 , x2 , t0 ;  $ ~cin >> t1 >> t2 >> x1 >> x2 >> t0 ;  $ ~long long x , xx ;  $ ~double mn = 1000000000000.00 ;  $ ~while ( x1 >= 0 && x2 >= 0 ) {  $ ~~double check = ( t1 * x1 * 1.0 + t2 * x2 * 1.0 ) / ( double ) ( x1 + x2 ) ;  $ ~~if ( check < t0 ) {  $ ~~~x1 -- ;  $ ~~~continue ;  $ ~~}  $ ~~if ( check < mn ) {  $ ~~~mn = check ;  $ ~~~x = x1 ;  $ ~~~xx = x2 ;  $ ~~}  $ ~~x2 -- ;  $ ~}  $ ~cout << x << " " << xx << endl ;  $ ~return 0 ;  $ }
int n , m ;  $ int la = 1 , lb = 1 ;  $ int vis [ 10 ] ;  $ int ans = 0 ;  $ void dfs2 ( int k , int num ) {  $ ~if ( k == lb ) {  $ ~~ans ++ ;  $ ~~return ;  $ ~}  $ ~for ( int i = 0 ; i <= 6 ; i ++ ) {  $ ~~if ( vis [ i ] == 0 && num * 7 + i < m ) {  $ ~~~vis [ i ] = 1 ;  $ ~~~dfs2 ( k + 1 , num * 7 + i ) ;  $ ~~~vis [ i ] = 0 ;  $ ~~}  $ ~}  $ }  $ void dfs1 ( int k , int num ) {  $ ~if ( k == la ) {  $ ~~dfs2 ( 0 , 0 ) ;  $ ~~return ;  $ ~}  $ ~for ( int i = 0 ; i <= 6 ; i ++ ) {  $ ~~if ( vis [ i ] == 0 && num * 7 + i < n ) {  $ ~~~vis [ i ] = 1 ;  $ ~~~dfs1 ( k + 1 , num * 7 + i ) ;  $ ~~~vis [ i ] = 0 ;  $ ~~}  $ ~}  $ }  $ int main ( ) {  $ ~cin >> n >> m ;  $ ~int fn = n , fm = m ;  $ ~if ( n > 0 ) n -- ;  $ ~if ( m > 0 ) m -- ;  $ ~while ( n / 7 ) {  $ ~~la ++ ;  $ ~~n /= 7 ;  $ ~}  $ ~while ( m / 7 ) {  $ ~~lb ++ ;  $ ~~m /= 7 ;  $ ~}  $ ~n = fn , m = fm ;  $ ~if ( la + lb > 7 ) {  $ ~~cout << 0 << endl ;  $ ~~return 0 ;  $ ~}  $ ~dfs1 ( 0 , 0 ) ;  $ ~cout << ans << endl ;  $ ~return 0 ;  $ }
string s , t ;  $ int n , m ;  $ long long int mod ;  $ long long int add ( long long int x , long long int y ) {  $ ~return ( x % mod + y % mod ) % mod ;  $ }  $ long long int dp [ 5001 ] [ 5001 ] ;  $ long long int rec ( int i , int j ) {  $ ~if ( dp [ i ] [ j ] != - 1 ) return dp [ i ] [ j ] ;  $ ~if ( j == m || i == n ) { return 0 ; }  $ ~long long int sm = 0 ;  $ ~sm += rec ( i , j + 1 ) ;  $ ~if ( s [ i ] == t [ j ] ) { sm = ( sm + rec ( i + 1 , j + 1 ) + 1 ) % mod ; }  $ ~return dp [ i ] [ j ] = sm ;  $ }  $ int main ( ) {  $ ~mod = 1e9 + 7 ;  $ ~cin >> s >> t ;  $ ~n = s . size ( ) ;  $ ~m = t . size ( ) ;  $ ~long long int ans = 0 ;  $ ~memset ( dp , - 1 , sizeof dp ) ;  $ ~for ( int i = 0 ; i < n ; i ++ ) { ans = ( ans + rec ( i , 0 ) ) % mod ; }  $ ~cout << ans << "\n" ;  $ }
const double PI = acos ( - 1 ) ;  $ const int MAX = 2e9 + 7 ;  $ const int MOD = 1000000007 ;  $ map < int , long long > m ;  $ void solve ( ) {  $ ~int a ;  $ ~cin >> a ;  $ ~string s ;  $ ~cin >> s ;  $ ~long long n = s . size ( ) ;  $ ~long long total = 0 ;  $ ~int p [ n ] ;  $ ~for ( int i = 0 ; i < n ; i ++ ) {  $ ~~if ( ! i )  $ ~~~p [ i ] = int ( s [ i ] - '0' ) ;  $ ~~else  $ ~~~p [ i ] = p [ i - 1 ] + int ( s [ i ] - '0' ) ;  $ ~}  $ ~for ( int len = 1 ; len <= n ; len ++ ) {  $ ~~for ( int i = 0 ; i + len - 1 < n ; i ++ ) {  $ ~~~int sum = p [ i + len - 1 ] ;  $ ~~~if ( i != 0 ) sum -= p [ i - 1 ] ;  $ ~~~m [ sum ] ++ ;  $ ~~~total ++ ;  $ ~~}  $ ~}  $ ~if ( a == 0 ) {  $ ~~cout << total * m [ 0 ] * 2 - m [ 0 ] * m [ 0 ] << endl ;  $ ~~return ;  $ ~}  $ ~long long ans = 0 ;  $ ~for ( int i = 1 ; i <= sqrt ( a ) ; i ++ ) {  $ ~~if ( a % i == 0 ) {  $ ~~~if ( i == sqrt ( a ) ) {  $ ~~~~ans += ( ( m [ i ] * ( m [ i ] - 1 ) ) + m [ i ] ) ;  $ ~~~} else {  $ ~~~~ans += 2 * ( m [ i ] * m [ a / i ] ) ;  $ ~~~}  $ ~~}  $ ~}  $ ~cout << ans << endl ;  $ }  $ int main ( ) {  $ ~solve ( ) ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~string str ;  $ ~cin >> str ;  $ ~int i = 0 ;  $ ~while ( str [ i ] != '0' ) i ++ ;  $ ~for ( int j = i ; j < str . size ( ) - 1 ; j ++ ) { str [ j ] = str [ j + 1 ] ; }  $ ~str . resize ( str . size ( ) - 1 ) ;  $ ~cout << str << endl ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~int a , b , c , t , l , i , k = 0 ;  $ ~double sum = 0 , d = 0 ;  $ ~cin >> a >> b ;  $ ~for ( i = 1 ; i <= a ; i ++ ) {  $ ~~cin >> c ;  $ ~~if ( sum <= ceil ( ( double ) c / b ) ) {  $ ~~~sum = ceil ( ( double ) c / b ) ;  $ ~~~k = i ;  $ ~~}  $ ~}  $ ~cout << k << endl ;  $ }
long long n , m , k , l ;  $ int main ( ) {  $ ~cin >> n >> m >> k >> l ;  $ ~if ( m > n ) {  $ ~~cout << - 1 << endl ;  $ ~~return 0 ;  $ ~}  $ ~if ( k + l <= m ) {  $ ~~cout << 1 << endl ;  $ ~~return 0 ;  $ ~}  $ ~long long a ;  $ ~if ( ( k + l ) % m == 0 )  $ ~~a = ( k + l ) / m ;  $ ~else  $ ~~a = ( k + l ) / m + 1 ;  $ ~if ( a * m > n )  $ ~~cout << - 1 << endl ;  $ ~else  $ ~~cout << a << endl ;  $ }
int h , m ;  $ int main ( ) {  $ ~cin >> h >> m ;  $ ~int l1 = 1 , l2 = 1 ;  $ ~for ( int i = 7 ; i < h ; i *= 7 ) l1 ++ ;  $ ~for ( int i = 7 ; i < m ; i *= 7 ) l2 ++ ;  $ ~int ans = 0 ;  $ ~if ( l1 + l2 > 7 ) {  $ ~~cout << "0\n" ;  $ ~~return 0 ;  $ ~}  $ ~for ( int i = 0 ; i != h ; ++ i )  $ ~~for ( int j = 0 ; j != m ; ++ j ) {  $ ~~~vector < int > cnt ( 7 , 0 ) ;  $ ~~~for ( int x = i , k = 0 ; k != l1 ; x /= 7 , ++ k ) cnt [ x % 7 ] ++ ;  $ ~~~for ( int x = j , k = 0 ; k != l2 ; x /= 7 , ++ k ) cnt [ x % 7 ] ++ ;  $ ~~~if ( * max_element ( cnt . begin ( ) , cnt . end ( ) ) <= 1 ) ans ++ ;  $ ~~}  $ ~cout << ans << '\n' ;  $ }
unsigned long long n , k , a [ 100005 ] , ret = 0 ;  $ map < unsigned long long , unsigned long long > ok ;  $ int main ( ) {  $ ~cin >> n >> k ;  $ ~for ( int i = 0 ; i < n ; i ++ ) { cin >> a [ i ] ; }  $ ~sort ( a , a + n ) ;  $ ~for ( int i = 0 ; i < n ; i ++ ) { ok [ a [ i ] ] = 1 ; }  $ ~for ( int i = 0 ; i < n ; i ++ ) {  $ ~~if ( ok [ a [ i ] ] == 1 ) {  $ ~~~ok [ a [ i ] ] = 0 ;  $ ~~~ok [ a [ i ] * k ] = 0 ;  $ ~~~ret ++ ;  $ ~~}  $ ~}  $ ~cout << ret << endl ;  $ }
int gcd ( int a , int b ) {  $ ~if ( a < b ) swap ( a , b ) ;  $ ~if ( a % b )  $ ~~return gcd ( b , a % b ) ;  $ ~else  $ ~~return b ;  $ }  $ int main ( ) {  $ ~int a , b , c , d , e , f ;  $ ~cin >> a >> b >> c >> d >> e >> f ;  $ ~int ok = 0 ;  $ ~if ( d == 0 ) {  $ ~~ok = 0 ;  $ ~} else if ( b == 0 ) {  $ ~~if ( c == 0 )  $ ~~~ok = 1 ;  $ ~~else  $ ~~~ok = 0 ;  $ ~} else if ( f == 0 ) {  $ ~~if ( a == 0 || c == 0 )  $ ~~~ok = 1 ;  $ ~~else  $ ~~~ok = 0 ;  $ ~} else {  $ ~~if ( a == 0 || c == 0 || e == 0 )  $ ~~~ok = 1 ;  $ ~~else {  $ ~~~int x = gcd ( b , c ) ;  $ ~~~int y = gcd ( d , e ) ;  $ ~~~int aa = a * c / x * e / y ;  $ ~~~int bb = f * d / y * b / x ;  $ ~~~if ( bb > aa )  $ ~~~~ok = 1 ;  $ ~~~else  $ ~~~~ok = 0 ;  $ ~~}  $ ~}  $ ~if ( ok )  $ ~~cout << "Ron" << endl ;  $ ~else  $ ~~cout << "Hermione" << endl ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~long long l1 , r1 , l2 , r2 , k ;  $ ~cin >> l1 >> r1 >> l2 >> r2 >> k ;  $ ~long long in = max ( l1 , l2 ) ;  $ ~long long out = min ( r1 , r2 ) ;  $ ~if ( in > out )  $ ~~cout << 0 << endl ;  $ ~else if ( k <= out and k >= in )  $ ~~cout << ( out - in ) << endl ;  $ ~else  $ ~~cout << ( out - in ) + 1 << endl ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~long long i , j , k , l , t , n , ans ;  $ ~while ( cin >> n ) {  $ ~~if ( n == 1 )  $ ~~~ans = 1 ;  $ ~~else if ( n == 2 )  $ ~~~ans = 2 ;  $ ~~else if ( n == 3 )  $ ~~~ans = 6 ;  $ ~~else if ( n % 2 == 0 ) {  $ ~~~if ( n % 3 == 0 )  $ ~~~~ans = ( n - 1 ) * ( n - 2 ) * ( n - 3 ) ;  $ ~~~else  $ ~~~~ans = n * ( n - 1 ) * ( n - 3 ) ;  $ ~~} else  $ ~~~ans = n * ( n - 1 ) * ( n - 2 ) ;  $ ~~cout << ans << endl ;  $ ~}  $ ~return 0 ;  $ }
const int len = 1e3 + 5 ;  $ const long long mod = 998244353 ;  $ const ulong long seed = 131 ;  $ int r [ len ] , c [ len ] ;  $ int dd [ len ] [ len ] ;  $ int num , n , m ;  $ int flag ;  $ void solve1 ( ) {  $ ~for ( int i = 1 ; i <= n ; ++ i ) {  $ ~~int minx = 1e9 ;  $ ~~for ( int j = 1 ; j <= m ; ++ j ) minx = min ( minx , dd [ i ] [ j ] ) ;  $ ~~r [ i ] = minx ;  $ ~~if ( r [ i ] != 0 ) num += minx ;  $ ~~for ( int j = 1 ; j <= m ; ++ j ) dd [ i ] [ j ] -= minx ;  $ ~}  $ ~for ( int j = 1 ; j <= m ; ++ j ) {  $ ~~int minx = 1e9 ;  $ ~~for ( int i = 1 ; i <= n ; ++ i ) minx = min ( minx , dd [ i ] [ j ] ) ;  $ ~~c [ j ] = minx ;  $ ~~if ( minx != 0 ) num += minx ;  $ ~~for ( int i = 1 ; i <= n ; ++ i ) {  $ ~~~dd [ i ] [ j ] -= minx ;  $ ~~~if ( dd [ i ] [ j ] ) flag = 1 ;  $ ~~}  $ ~}  $ }  $ void solve2 ( ) {  $ ~for ( int j = 1 ; j <= m ; ++ j ) {  $ ~~int minx = 1e9 ;  $ ~~for ( int i = 1 ; i <= n ; ++ i ) minx = min ( minx , dd [ i ] [ j ] ) ;  $ ~~c [ j ] = minx ;  $ ~~if ( minx != 0 ) num += minx ;  $ ~~for ( int i = 1 ; i <= n ; ++ i ) dd [ i ] [ j ] -= minx ;  $ ~}  $ ~for ( int i = 1 ; i <= n ; ++ i ) {  $ ~~int minx = 1e9 ;  $ ~~for ( int j = 1 ; j <= m ; ++ j ) minx = min ( minx , dd [ i ] [ j ] ) ;  $ ~~r [ i ] = minx ;  $ ~~if ( r [ i ] != 0 ) num += minx ;  $ ~~for ( int j = 1 ; j <= m ; ++ j ) {  $ ~~~dd [ i ] [ j ] -= minx ;  $ ~~~if ( dd [ i ] [ j ] ) flag = 1 ;  $ ~~}  $ ~}  $ }  $ int main ( ) {  $ ~cin >> n >> m ;  $ ~for ( int i = 1 ; i <= n ; ++ i )  $ ~~for ( int j = 1 ; j <= m ; ++ j ) cin >> dd [ i ] [ j ] ;  $ ~if ( n <= m )  $ ~~solve1 ( ) ;  $ ~else  $ ~~solve2 ( ) ;  $ ~if ( flag ) return puts ( "-1" ) , 0 ;  $ ~cout << num << endl ;  $ ~for ( int i = 1 ; i <= n ; ++ i ) {  $ ~~for ( int j = 0 ; j < r [ i ] ; ++ j ) cout << "row " << i << endl ;  $ ~}  $ ~for ( int i = 1 ; i <= m ; ++ i )  $ ~~for ( int j = 0 ; j < c [ i ] ; ++ j ) cout << "col " << i << endl ;  $ }
long long x , y ;  $ long long exgcd ( long long a , long long b ) {  $ ~if ( b == 0 ) {  $ ~~x = 1 ;  $ ~~y = 0 ;  $ ~~return a ;  $ ~}  $ ~long long d = exgcd ( b , a % b ) ;  $ ~long long t = x ;  $ ~x = y ;  $ ~y = t - a / b * y ;  $ ~return d ;  $ }  $ int main ( ) {  $ ~long long m , h1 , a1 , x1 , y1 , h2 , a2 , x2 , y2 ;  $ ~long long p1 , p2 , q1 , q2 ;  $ ~while ( cin >> m >> h1 >> a1 >> x1 >> y1 >> h2 >> a2 >> x2 >> y2 ) {  $ ~~p1 = p2 = q1 = q2 = 0 ;  $ ~~for ( long long i = 1 ; i <= 2 * m ; i ++ ) {  $ ~~~h1 = ( h1 * x1 + y1 ) % m ;  $ ~~~if ( h1 == a1 ) {  $ ~~~~if ( p1 == 0 )  $ ~~~~~p1 = i ;  $ ~~~~else if ( q1 == 0 ) {  $ ~~~~~q1 = i - p1 ;  $ ~~~~~break ;  $ ~~~~}  $ ~~~}  $ ~~}  $ ~~for ( long long i = 1 ; i <= 2 * m ; i ++ ) {  $ ~~~h2 = ( h2 * x2 + y2 ) % m ;  $ ~~~if ( h2 == a2 ) {  $ ~~~~if ( p2 == 0 )  $ ~~~~~p2 = i ;  $ ~~~~else if ( q2 == 0 ) {  $ ~~~~~q2 = i - p2 ;  $ ~~~~~break ;  $ ~~~~}  $ ~~~}  $ ~~}  $ ~~long long d = exgcd ( q1 , - q2 ) ;  $ ~~long long c = p2 - p1 ;  $ ~~if ( d == 0 ) {  $ ~~~puts ( "-1" ) ;  $ ~~~continue ;  $ ~~}  $ ~~if ( c % d ) {  $ ~~~puts ( "-1" ) ;  $ ~~~continue ;  $ ~~}  $ ~~if ( d < 0 ) d = - d ;  $ ~~if ( p1 == 0 || p2 == 0 ) {  $ ~~~puts ( "-1" ) ;  $ ~~~continue ;  $ ~~}  $ ~~if ( q2 == 0 && q1 == 0 && p1 != p2 ) {  $ ~~~puts ( "-1" ) ;  $ ~~~continue ;  $ ~~}  $ ~~if ( ( q2 == 0 && p2 - p1 < 0 ) || ( q1 == 0 && p1 - p2 < 0 ) ) {  $ ~~~puts ( "-1" ) ;  $ ~~~continue ;  $ ~~}  $ ~~long long k = c / d ;  $ ~~if ( exgcd ( q1 , - q2 ) < 0 ) x = - x , y = - y ;  $ ~~x *= k ;  $ ~~y *= k ;  $ ~~if ( x < 0 || y < 0 ) {  $ ~~~while ( 1 ) {  $ ~~~~x += q2 / d ;  $ ~~~~y += q1 / d ;  $ ~~~~if ( x >= 0 && y >= 0 ) break ;  $ ~~~}  $ ~~}  $ ~~if ( x > 0 && y > 0 ) {  $ ~~~while ( 1 ) {  $ ~~~~x -= q2 / d ;  $ ~~~~y -= q1 / d ;  $ ~~~~if ( x < 0 || y < 0 ) break ;  $ ~~~}  $ ~~~x += q2 / d ;  $ ~~~y += q1 / d ;  $ ~~}  $ ~~long long ans = x * q1 + p1 ;  $ ~~cout << ans << endl ;  $ ~}  $ ~return 0 ;  $ }
long long MOD = 1000000009 ;  $ long long pw ( long long a , long long b ) {  $ ~if ( b == 0 ) return 1 ;  $ ~if ( b == 1 ) return a % MOD ;  $ ~if ( b % 2 ) {  $ ~~long long rs = pw ( a , b - 1 ) ;  $ ~~return ( rs * a ) % MOD ;  $ ~}  $ ~long long rs = pw ( a , b / 2 ) ;  $ ~return ( rs * rs ) % MOD ;  $ }  $ vector < long long > sm ;  $ long long solve ( long long a , long long b ) {  $ ~if ( b == 0 ) return 0 ;  $ ~for ( long long i = 0 ; i < 35 ; i ++ ) {  $ ~~long long ba = ( 1 LL << i ) & b ;  $ ~~if ( ba == 0 ) continue ;  $ ~~return ( sm [ i ] + solve ( a , b - ( 1 LL << i ) ) * pw ( a , ( 1 LL << i ) ) ) % MOD ;  $ ~}  $ }  $ int main ( ) {  $ ~long long n , a , b , k ;  $ ~cin >> n >> a >> b >> k ;  $ ~string s ;  $ ~cin >> s ;  $ ~long long X = 1 , Y = 1 ;  $ ~for ( long long i = 0 ; i < k ; i ++ ) {  $ ~~X *= b ;  $ ~~X %= MOD ;  $ ~}  $ ~for ( long long i = 0 ; i < k ; i ++ ) {  $ ~~Y *= a ;  $ ~~Y %= MOD ;  $ ~}  $ ~X *= pw ( Y , MOD - 2 ) ;  $ ~X %= MOD ;  $ ~sm . push_back ( 1 ) ;  $ ~for ( long long i = 0 ; i < 40 ; i ++ ) {  $ ~~sm . push_back ( sm . back ( ) + sm . back ( ) * pw ( X , ( 1 LL << i ) ) ) ;  $ ~~sm . back ( ) %= MOD ;  $ ~}  $ ~long long st = solve ( X , ( n + 1 ) / k ) ;  $ ~long long ans = 0 ;  $ ~for ( long long i = 0 ; i < k ; i ++ ) {  $ ~~long long rs = ( pw ( b , i ) * pw ( a , n - i ) ) % MOD ;  $ ~~if ( s [ i ] == '-' ) rs *= - 1 ;  $ ~~rs *= st ;  $ ~~ans += rs ;  $ ~~ans %= MOD ;  $ ~}  $ ~if ( ans < 0 ) ans += MOD ;  $ ~cout << ans << endl ;  $ }
int a [ 500008 ] , n ;  $ int slove ( int x , int y ) {  $ ~int k = y - x + 1 ;  $ ~int i ;  $ ~if ( k % 2 == 0 ) {  $ ~~for ( i = x ; i < x + k / 2 ; i ++ ) { a [ i ] = a [ x ] ; }  $ ~~for ( i = x + k / 2 ; i <= y ; i ++ ) { a [ i ] = a [ y ] ; }  $ ~} else {  $ ~~for ( i = x + 1 ; i <= y ; i ++ ) { a [ i ] = a [ x ] ; }  $ ~}  $ ~return ( k - 1 ) / 2 ;  $ }  $ int main ( ) {  $ ~int ans , l , r ;  $ ~int i ;  $ ~cin >> n ;  $ ~for ( i = 1 ; i <= n ; i ++ ) { cin >> a [ i ] ; }  $ ~ans = 0 ;  $ ~for ( i = 2 ; i < n ; i ++ ) {  $ ~~if ( a [ i ] != a [ i - 1 ] && a [ i ] != a [ i + 1 ] ) {  $ ~~~l = i - 1 ;  $ ~~~i ++ ;  $ ~~~for ( ; i < n ; i ++ ) {  $ ~~~~if ( a [ i ] != a [ i - 1 ] && a [ i ] != a [ i + 1 ] ) {  $ ~~~~~continue ;  $ ~~~~} else {  $ ~~~~~break ;  $ ~~~~}  $ ~~~}  $ ~~~r = i ;  $ ~~~ans = max ( ans , slove ( l , r ) ) ;  $ ~~~l = 0 ;  $ ~~~r = 0 ;  $ ~~}  $ ~}  $ ~cout << ans << endl ;  $ ~for ( i = 1 ; i < n ; i ++ ) { cout << a [ i ] << " " ; }  $ ~cout << a [ i ] << endl ;  $ }
long long arr [ 1000000 ] ;  $ set < int > ss ;  $ map < string , int > mm ;  $ char ch [ 100000 ] ;  $ int main ( ) {  $ ~int n , k , res = 0 ;  $ ~cin >> n ;  $ ~for ( int i = 0 ; i < n ; i ++ ) {  $ ~~cin >> k ;  $ ~~if ( k == 0 ) res ++ ;  $ ~}  $ ~if ( n == 1 ) {  $ ~~if ( res == 0 )  $ ~~~++ res ;  $ ~~else  $ ~~~-- res ;  $ ~}  $ ~cout << ( res == 1 ? "YES" : "NO" ) << endl ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~int n ;  $ ~while ( cin >> n ) {  $ ~~int a [ 101 ] , b [ 100 ] , f = 0 ;  $ ~~for ( int i = 1 ; i <= n ; i ++ ) {  $ ~~~cin >> a [ i ] ;  $ ~~~if ( a [ i ] < 0 ) f ++ ;  $ ~~}  $ ~~if ( f <= 2 ) {  $ ~~~cout << 1 << endl << n << endl ;  $ ~~~continue ;  $ ~~}  $ ~~if ( f % 2 )  $ ~~~cout << f / 2 + 1 << endl ;  $ ~~else  $ ~~~cout << f / 2 << endl ;  $ ~~int t = 0 ;  $ ~~int x = 1 ;  $ ~~int sum = 0 ;  $ ~~for ( int i = 1 ; i <= n ; i ++ ) {  $ ~~~if ( t == 2 && a [ i ] < 0 ) {  $ ~~~~cout << i - x << " " ;  $ ~~~~sum += ( i - x ) ;  $ ~~~~x = i ;  $ ~~~~t = 0 ;  $ ~~~~f -= 2 ;  $ ~~~}  $ ~~~if ( a [ i ] < 0 ) t ++ ;  $ ~~}  $ ~~if ( sum < n ) cout << n - sum ;  $ ~~cout << endl ;  $ ~}  $ ~return 0 ;  $ }
int main ( ) {  $ ~long long int n , i ;  $ ~cin >> n ;  $ ~if ( n <= 3 )  $ ~~cout << "NO\n" ;  $ ~else {  $ ~~cout << "YES\n" ;  $ ~~if ( n % 2 == 0 ) {  $ ~~~cout << "1 * 2 = 2\n2 * 3 = 6\n6 * 4 = 24\n" ;  $ ~~~for ( i = 5 ; i <= n ; i += 2 ) cout << i + 1 << " - " << i << " = 1\n1 * 24 = 24\n" ;  $ ~~} else {  $ ~~~cout << "2 - 1 = 1\n1 + 3 = 4\n4 * 5 = 20\n20 + 4 = 24\n" ;  $ ~~~for ( i = 6 ; i <= n ; i += 2 ) cout << i + 1 << " - " << i << " = 1\n1 * 24 = 24\n" ;  $ ~~}  $ ~}  $ ~return 0 ;  $ }
int main ( ) {  $ ~long long s , n , i , j , num1 , num2 , aux1 , aux2 ;  $ ~cin >> s >> n ;  $ ~long long x [ n ] , y [ n ] ;  $ ~bool lose = false ;  $ ~for ( i = 0 ; i < n ; i ++ ) { cin >> x [ i ] >> y [ i ] ; }  $ ~for ( i = 0 ; i < n - 1 ; i ++ ) {  $ ~~for ( j = i + 1 ; j < n ; j ++ ) {  $ ~~~if ( x [ i ] >= x [ j ] ) {  $ ~~~~aux1 = x [ i ] ;  $ ~~~~x [ i ] = x [ j ] ;  $ ~~~~x [ j ] = aux1 ;  $ ~~~~aux2 = y [ i ] ;  $ ~~~~y [ i ] = y [ j ] ;  $ ~~~~y [ j ] = aux2 ;  $ ~~~}  $ ~~}  $ ~}  $ ~i = 0 ;  $ ~while ( i < n && ! lose ) {  $ ~~if ( s > x [ i ] ) {  $ ~~~s += y [ i ] ;  $ ~~} else {  $ ~~~lose = true ;  $ ~~}  $ ~~i ++ ;  $ ~}  $ ~if ( lose )  $ ~~cout << "NO" << endl ;  $ ~else  $ ~~cout << "YES" << endl ;  $ ~return 0 ;  $ }
bool is_pal ( string g ) {  $ ~int q = g . size ( ) - 1 ;  $ ~int w = 0 ;  $ ~while ( q >= w ) {  $ ~~if ( g [ w ] != g [ q ] ) return 0 ;  $ ~~q -- ;  $ ~~w ++ ;  $ ~}  $ ~return 1 ;  $ }  $ int main ( ) {  $ ~string g ;  $ ~cin >> g ;  $ ~int x ;  $ ~cin >> x ;  $ ~int w = 0 ;  $ ~bool b = 0 ;  $ ~if ( g . size ( ) % x != 0 )  $ ~~cout << "NO\n" ;  $ ~else {  $ ~~while ( w < g . size ( ) ) {  $ ~~~if ( ! is_pal ( g . substr ( w , g . size ( ) / x ) ) ) {  $ ~~~~b = 1 ;  $ ~~~~break ;  $ ~~~}  $ ~~~w += ( g . size ( ) / x ) ;  $ ~~}  $ ~~if ( ! b )  $ ~~~cout << "YES\n" ;  $ ~~else  $ ~~~cout << "NO\n" ;  $ ~}  $ ~return 0 ;  $ }
int main ( ) {  $ ~string a ;  $ ~cin >> a ;  $ ~int n = a . size ( ) ;  $ ~int f = 0 , j = 0 ;  $ ~char b [ n ] ;  $ ~if ( n == 1 )  $ ~~cout << 0 << endl ;  $ ~else {  $ ~~for ( int i = 0 ; i < n ; i ++ ) {  $ ~~~if ( a [ i ] == '0' && f == 0 ) {  $ ~~~~f = 1 ;  $ ~~~~continue ;  $ ~~~}  $ ~~~b [ j ] = a [ i ] ;  $ ~~~j ++ ;  $ ~~}  $ ~~if ( j == n ) {  $ ~~~for ( int i = 1 ; i < j ; i ++ ) cout << b [ i ] ;  $ ~~} else {  $ ~~~for ( int i = 0 ; i < j ; i ++ ) cout << b [ i ] ;  $ ~~}  $ ~~cout << endl ;  $ ~}  $ ~return 0 ;  $ }
bool is_vowel ( char ch ) {  $ ~string vowels = "AEIOUY" ;  $ ~return vowels . find ( ch ) != string : : npos ;  $ }  $ int main ( ) {  $ ~string s ;  $ ~cin >> s ;  $ ~vector < int > d ;  $ ~d . push_back ( 0 ) ;  $ ~for ( int i = 0 ; i < s . length ( ) ; ++ i )  $ ~~if ( is_vowel ( s [ i ] ) ) d . push_back ( i + 1 ) ;  $ ~d . push_back ( s . length ( ) + 1 ) ;  $ ~int mx = 0 ;  $ ~for ( int i = 0 ; i < d . size ( ) - 1 ; ++ i ) mx = max ( d . at ( i + 1 ) - d . at ( i ) , mx ) ;  $ ~cout << mx << endl ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~char s [ 100005 ] , * p ;  $ ~int x ;  $ ~cin >> s ;  $ ~if ( ( p = strstr ( s , "AB" ) ) && ( strstr ( p + 2 , "BA" ) ) ) {  $ ~~cout << "YES" << endl ;  $ ~} else if ( ( p = strstr ( s , "BA" ) ) && ( strstr ( p + 2 , "AB" ) ) ) {  $ ~~cout << "YES" << endl ;  $ ~} else {  $ ~~cout << "NO" << endl ;  $ ~}  $ ~return 0 ;  $ }
int main ( ) {  $ ~int n , x1 , y1 , x2 , y2 ;  $ ~cin >> n >> x1 >> y1 >> x2 >> y2 ;  $ ~int ans = 1e9 ;  $ ~if ( x1 == 0 || x1 == n || x2 == 0 || x2 == n ) {  $ ~~if ( x1 == x2 ) { ans = min ( ans , abs ( y1 - y2 ) ) ; }  $ ~~ans = min ( ans , y1 + y2 + abs ( x1 - x2 ) ) ;  $ ~~ans = min ( ans , ( n - y1 ) + ( n - y2 ) + abs ( x1 - x2 ) ) ;  $ ~}  $ ~if ( y1 == 0 || y1 == n || y2 == 0 || y2 == n ) {  $ ~~if ( y1 == y2 ) { ans = min ( ans , abs ( x1 - x2 ) ) ; }  $ ~~ans = min ( ans , x1 + x2 + abs ( y1 - y2 ) ) ;  $ ~~ans = min ( ans , ( n - x1 ) + ( n - x2 ) + abs ( y1 - y2 ) ) ;  $ ~}  $ ~cout << ans << "\n" ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~long long n , m , mex , l , r ;  $ ~cin >> n >> m ;  $ ~mex = n ;  $ ~while ( m -- ) cin >> l >> r , mex = min ( mex , r - l + 1 ) ;  $ ~cout << mex << '\n' ;  $ ~for ( long long i = 0 ; i < n ; i ++ ) cout << i % mex << " \n" [ i == n - 1 ] ;  $ }
const int MAXN = 2e7 ;  $ int prime [ MAXN ] ;  $ int vis [ MAXN ] ;  $ int a [ MAXN ] ;  $ void init ( ) {  $ ~for ( int i = 2 ; i < MAXN ; i ++ ) {  $ ~~if ( ! prime [ i ] ) prime [ ++ prime [ 0 ] ] = i ;  $ ~~for ( int j = 1 ; j <= prime [ 0 ] && prime [ j ] <= MAXN / i ; j ++ ) {  $ ~~~prime [ prime [ j ] * i ] = 1 ;  $ ~~~if ( i % prime [ j ] == 0 ) break ;  $ ~~}  $ ~}  $ }  $ int main ( ) {  $ ~int n ;  $ ~int gcd ;  $ ~cin >> n ;  $ ~for ( int i = 1 ; i <= n ; i ++ ) {  $ ~~cin >> a [ i ] ;  $ ~~if ( i == 1 )  $ ~~~gcd = a [ 1 ] ;  $ ~~else  $ ~~~gcd = __gcd ( gcd , a [ i ] ) ;  $ ~}  $ ~int Max = 0 ;  $ ~init ( ) ;  $ ~for ( int i = 1 ; i <= n ; i ++ ) {  $ ~~a [ i ] /= gcd ;  $ ~~for ( int j = 1 ; j <= prime [ 0 ] && prime [ j ] * prime [ j ] <= a [ i ] ; j ++ ) {  $ ~~~if ( a [ i ] % prime [ j ] == 0 ) {  $ ~~~~while ( a [ i ] % prime [ j ] == 0 ) { a [ i ] /= prime [ j ] ; }  $ ~~~~vis [ prime [ j ] ] ++ ;  $ ~~~~Max = max ( Max , vis [ prime [ j ] ] ) ;  $ ~~~}  $ ~~}  $ ~~if ( a [ i ] != 1 ) {  $ ~~~vis [ a [ i ] ] ++ ;  $ ~~~Max = max ( Max , vis [ a [ i ] ] ) ;  $ ~~}  $ ~}  $ ~if ( Max == 0 )  $ ~~cout << - 1 << endl ;  $ ~else  $ ~~cout << n - Max << endl ;  $ }
int main ( ) {  $ ~int n ;  $ ~vector < int > button ;  $ ~int i = 0 ;  $ ~string result ;  $ ~cin >> n ;  $ ~for ( ; i < n ; i ++ ) {  $ ~~int tmp ;  $ ~~cin >> tmp ;  $ ~~button . push_back ( tmp ) ;  $ ~}  $ ~int cntNotFastened = 0 ;  $ ~if ( n == 1 ) {  $ ~~result = ( button [ 0 ] == 1 ) ? "YES" : "NO" ;  $ ~} else {  $ ~~for ( i = 0 ; i < n ; i ++ ) {  $ ~~~if ( button [ i ] == 0 ) cntNotFastened ++ ;  $ ~~~if ( cntNotFastened > 1 ) {  $ ~~~~result = "NO" ;  $ ~~~~break ;  $ ~~~}  $ ~~}  $ ~~if ( cntNotFastened == 1 )  $ ~~~result = "YES" ;  $ ~~else  $ ~~~result = "NO" ;  $ ~}  $ ~cout << result << endl ;  $ }
int x , y ;  $ bool xasphalt [ 69 ] , yasphalt [ 69 ] ;  $ int days = 1 , workdays [ 6969 ] , wrkdsz ;  $ int main ( ) {  $ ~int a ;  $ ~cin >> a ;  $ ~for ( int A = 0 ; A < a * a ; A ++ ) {  $ ~~cin >> x >> y ;  $ ~~if ( xasphalt [ x ] == false && yasphalt [ y ] == false ) {  $ ~~~xasphalt [ x ] = true ;  $ ~~~yasphalt [ y ] = true ;  $ ~~~workdays [ wrkdsz ] = days ;  $ ~~~wrkdsz ++ ;  $ ~~}  $ ~~days ++ ;  $ ~}  $ ~for ( int A = 0 ; A < wrkdsz ; A ++ ) {  $ ~~if ( A == wrkdsz - 1 )  $ ~~~cout << workdays [ A ] << "\n" ;  $ ~~else  $ ~~~cout << workdays [ A ] << " " ;  $ ~}  $ }
int main ( ) {  $ ~int last [ ] = { 8 , 4 , 2 , 6 } ;  $ ~int n ;  $ ~cin >> n ;  $ ~if ( n == 0 )  $ ~~cout << 1 << endl ;  $ ~else  $ ~~cout << last [ ( n - 1 ) % 4 ] << endl ;  $ ~return 0 ;  $ }
const double pi = acos ( - 1.0 ) ;  $ const int inf = 1000 * 1000 * 100 ;  $ const int size = 10 * 1000 ;  $ int mas [ size ] ;  $ int bon [ size ] ;  $ int tp [ size ] , lb [ size ] , rb [ size ] , val [ size ] ;  $ int main ( ) {  $ ~int n , m ;  $ ~cin >> n >> m ;  $ ~for ( int i = 0 ; i < n ; i ++ ) mas [ i ] = inf ;  $ ~for ( int i = 0 ; i < m ; i ++ ) {  $ ~~cin >> tp [ i ] >> lb [ i ] >> rb [ i ] >> val [ i ] ;  $ ~~lb [ i ] -- ;  $ ~~rb [ i ] -- ;  $ ~}  $ ~for ( int i = 0 ; i < m ; i ++ ) {  $ ~~if ( tp [ i ] == 1 ) {  $ ~~~for ( int j = lb [ i ] ; j <= rb [ i ] ; j ++ ) bon [ j ] += val [ i ] ;  $ ~~} else {  $ ~~~for ( int j = lb [ i ] ; j <= rb [ i ] ; j ++ ) mas [ j ] = min ( mas [ j ] , val [ i ] - bon [ j ] ) ;  $ ~~}  $ ~}  $ ~for ( int i = 0 ; i < n ; i ++ ) bon [ i ] = 0 ;  $ ~bool flag = true ;  $ ~for ( int i = 0 ; i < m ; i ++ ) {  $ ~~if ( tp [ i ] == 1 ) {  $ ~~~for ( int j = lb [ i ] ; j <= rb [ i ] ; j ++ ) bon [ j ] += val [ i ] ;  $ ~~} else {  $ ~~~int mx = - inf ;  $ ~~~for ( int j = lb [ i ] ; j <= rb [ i ] ; j ++ ) mx = max ( mx , mas [ j ] + bon [ j ] ) ;  $ ~~~if ( mx != val [ i ] ) flag = false ;  $ ~~}  $ ~}  $ ~if ( flag ) {  $ ~~cout << "YES" << endl ;  $ ~~for ( int i = 0 ; i < n ; i ++ ) cout << mas [ i ] << " \n" [ i == n - 1 ] ;  $ ~} else {  $ ~~cout << "NO" << endl ;  $ ~}  $ ~return 0 ;  $ }
const int MAXN = 200005 ;  $ int main ( ) {  $ ~long long N , M , K , L , ans ;  $ ~cin >> N >> M >> K >> L ;  $ ~ans = ( K + L + M - 1 ) / M ;  $ ~if ( K + L <= M * ans && M * ans <= N )  $ ~~cout << ans << endl ;  $ ~else  $ ~~cout << - 1 << endl ;  $ ~return 0 ;  $ }
long long mult ( long long a , long long b , long long p = 1000000007 ) {  $ ~return ( ( a % p ) * ( b % p ) ) % p ;  $ }  $ long long add ( long long a , long long b , long long p = 1000000007 ) {  $ ~return ( a % p + b % p ) % p ;  $ }  $ long long fpow ( long long n , long long k , long long p = 1000000007 ) {  $ ~long long r = 1 ;  $ ~for ( ; k ; k >> = 1 ) {  $ ~~if ( k & 1 ) r = r * n % p ;  $ ~~n = n * n % p ;  $ ~}  $ ~return r ;  $ }  $ long long inv ( long long a , long long p = 1000000007 ) {  $ ~return fpow ( a , p - 2 , p ) ;  $ }  $ long long inv_euclid ( long long a , long long m = 1000000007 ) {  $ ~long long m0 = m ;  $ ~long long y = 0 , x = 1 ;  $ ~if ( m == 1 ) return 0 ;  $ ~while ( a > 1 ) {  $ ~~long long q = a / m ;  $ ~~long long t = m ;  $ ~~m = a % m , a = t ;  $ ~~t = y ;  $ ~~y = x - q * y ;  $ ~~x = t ;  $ ~}  $ ~if ( x < 0 ) x += m0 ;  $ ~return x ;  $ }  $ long long spff [ 1000003 ] ;  $ void spf ( ) {  $ ~spff [ 0 ] = 1 ;  $ ~spff [ 1 ] = 1 ;  $ ~for ( long long i = 2 ; i < 1000003 ; i ++ ) {  $ ~~if ( i % 2 == 0 ) {  $ ~~~spff [ i ] = 2 ;  $ ~~} else  $ ~~~spff [ i ] = i ;  $ ~}  $ ~for ( long long i = 3 ; i * i <= 1000003 ; i ++ ) {  $ ~~if ( spff [ i ] == i ) {  $ ~~~for ( long long j = i * i ; j <= 1000003 ; j += i ) { spff [ j ] = i ; }  $ ~~}  $ ~}  $ }  $ int main ( ) {  $ ~spf ( ) ;  $ ~long long n ;  $ ~cin >> n ;  $ ~for ( long long i = 1 ; ; i ++ ) {  $ ~~if ( spff [ n * i + 1 ] != n * i + 1 ) {  $ ~~~cout << i << "\n" ;  $ ~~~return 0 ;  $ ~~}  $ ~}  $ }
int b1 , b2 , b3 , emm1 , emm2 , lk [ 10 ] [ 10 ] ;  $ int a [ 8 ] ;  $ map < string , int > m ;  $ int js ( int x , int y , int z ) {  $ ~x = b1 / x ;  $ ~y = b2 / y ;  $ ~z = b3 / z ;  $ ~return emm1 = max ( abs ( x - y ) , max ( abs ( y - z ) , abs ( x - z ) ) ) ;  $ }  $ int haogan ( int x , int y , int z ) {  $ ~int ss = 0 ;  $ ~for ( int i = 1 ; i <= x ; i ++ )  $ ~~for ( int j = 1 ; j <= x ; j ++ )  $ ~~~if ( lk [ a [ i ] ] [ a [ j ] ] ) ss ++ ;  $ ~for ( int i = x + 1 ; i <= x + y ; i ++ )  $ ~~for ( int j = x + 1 ; j <= x + y ; j ++ )  $ ~~~if ( lk [ a [ i ] ] [ a [ j ] ] ) ss ++ ;  $ ~for ( int i = x + y + 1 ; i <= 7 ; i ++ )  $ ~~for ( int j = x + y + 1 ; j <= 7 ; j ++ )  $ ~~~if ( lk [ a [ i ] ] [ a [ j ] ] ) ss ++ ;  $ ~return emm2 = ss ;  $ }  $ int main ( ) {  $ ~m [ "Anka" ] = 1 ;  $ ~m [ "Chapay" ] = 2 ;  $ ~m [ "Cleo" ] = 3 ;  $ ~m [ "Troll" ] = 4 ;  $ ~m [ "Dracul" ] = 5 ;  $ ~m [ "Snowy" ] = 6 ;  $ ~m [ "Hexadecimal" ] = 7 ;  $ ~int n ;  $ ~cin >> n ;  $ ~while ( n -- ) {  $ ~~string s1 , s , s2 ;  $ ~~cin >> s1 >> s >> s2 ;  $ ~~lk [ m [ s1 ] ] [ m [ s2 ] ] = 1 ;  $ ~}  $ ~int ans1 = 1e9 , ans2 = - 1e9 ;  $ ~cin >> b1 >> b2 >> b3 ;  $ ~if ( b1 < b2 ) swap ( b1 , b2 ) ;  $ ~if ( b2 < b3 ) swap ( b2 , b3 ) ;  $ ~if ( b1 < b2 ) swap ( b1 , b2 ) ;  $ ~for ( int i = 1 ; i <= 7 ; i ++ ) a [ i ] = i ;  $ ~do {  $ ~~if ( ( js ( 4 , 2 , 1 ) == ans1 ) && ( haogan ( 4 , 2 , 1 ) > ans2 ) ) { ans2 = emm2 ; }  $ ~~if ( emm1 < ans1 ) {  $ ~~~ans1 = emm1 ;  $ ~~~ans2 = haogan ( 4 , 2 , 1 ) ;  $ ~~}  $ ~~if ( ( js ( 3 , 3 , 1 ) == ans1 ) && ( haogan ( 3 , 3 , 1 ) > ans2 ) ) { ans2 = emm2 ; }  $ ~~if ( emm1 < ans1 ) {  $ ~~~ans1 = emm1 ;  $ ~~~ans2 = haogan ( 3 , 3 , 1 ) ;  $ ~~}  $ ~~if ( ( js ( 3 , 2 , 2 ) == ans1 ) && ( haogan ( 3 , 2 , 2 ) > ans2 ) ) { ans2 = emm2 ; }  $ ~~if ( emm1 < ans1 ) {  $ ~~~ans1 = emm1 ;  $ ~~~ans2 = haogan ( 3 , 2 , 2 ) ;  $ ~~}  $ ~~if ( ( js ( 5 , 1 , 1 ) == ans1 ) && ( haogan ( 5 , 1 , 1 ) > ans2 ) ) { ans2 = emm2 ; }  $ ~~if ( emm1 < ans1 ) {  $ ~~~ans1 = emm1 ;  $ ~~~ans2 = haogan ( 5 , 1 , 1 ) ;  $ ~~}  $ ~} while ( next_permutation ( a + 1 , a + 7 + 1 ) ) ;  $ ~cout << ans1 << ' ' << ans2 << endl ;  $ }
const int INF = 0 x3f3f3f3f ;  $ char s [ 10 ] [ 10 ] ;  $ int main ( ) {  $ ~int i , j , k ;  $ ~int n , m , cou = 1 ;  $ ~cin >> n ;  $ ~while ( n -- ) {  $ ~~cou = 1 ;  $ ~~int x = 0 , y = 0 , x1 = 0 , y1 = 0 ;  $ ~~for ( i = 0 ; i < 8 ; i ++ )  $ ~~~for ( j = 0 ; j < 8 ; j ++ ) {  $ ~~~~cin >> s [ i ] [ j ] ;  $ ~~~~if ( s [ i ] [ j ] == 'K' && cou == 1 )  $ ~~~~~cou ++ , x = i , y = j ;  $ ~~~~else if ( s [ i ] [ j ] == 'K' && cou == 2 )  $ ~~~~~cou ++ , x1 = i , y1 = j ;  $ ~~~}  $ ~~if ( ( x1 - x ) % 4 == 0 && ( y1 - y ) % 4 == 0 )  $ ~~~cout << "YES" << endl ;  $ ~~else  $ ~~~cout << "NO" << endl ;  $ ~}  $ ~return 0 ;  $ }
const int inf = 0 x3f3f3f3f ;  $ const int maxn = 110 ;  $ int max ( int a , int b ) {  $ ~return a > b ? a : b ;  $ }  $ int min ( int a , int b ) {  $ ~return a > b ? b : a ;  $ }  $ int a [ maxn ] ;  $ int main ( ) {  $ ~int i , n ;  $ ~while ( cin >> n ) {  $ ~~for ( i = 0 ; i < n ; i ++ ) cin >> a [ i ] ;  $ ~~int l ;  $ ~~int maxi = 1 ;  $ ~~for ( l = 0 ; l < n - 1 ; l ++ ) {  $ ~~~int pos = l ;  $ ~~~while ( l < n - 1 && a [ l ] + 1 == a [ l + 1 ] ) { l ++ ; }  $ ~~~if ( l - pos + 1 > maxi ) { maxi = l - pos + 1 ; }  $ ~~}  $ ~~int cnt1 = 1 ;  $ ~~if ( a [ 0 ] == 1 ) {  $ ~~~for ( i = 0 ; i < maxi - 1 ; i ++ ) {  $ ~~~~if ( ( a [ i ] + 1 ) != a [ i + 1 ] ) {  $ ~~~~~break ;  $ ~~~~} else  $ ~~~~~cnt1 ++ ;  $ ~~~}  $ ~~}  $ ~~int cnt2 = 1 ;  $ ~~if ( a [ n - 1 ] == 1000 ) {  $ ~~~for ( i = 0 ; i < maxi - 1 ; i ++ ) {  $ ~~~~if ( ( a [ n - 1 - i ] - 1 ) != a [ n - 1 - i - 1 ] ) {  $ ~~~~~break ;  $ ~~~~} else  $ ~~~~~cnt2 ++ ;  $ ~~~}  $ ~~}  $ ~~if ( cnt1 == maxi || cnt2 == maxi ) {  $ ~~~cout << maxi - 1 << endl ;  $ ~~} else  $ ~~~cout << maxi - 2 << endl ;  $ ~}  $ ~return 0 ;  $ }
const int mod = 1e9 + 7 ;  $ int dp [ 5001 ] [ 5001 ] ;  $ int main ( ) {  $ ~string s , t ;  $ ~cin >> s ;  $ ~cin >> t ;  $ ~for ( int i = s . size ( ) - 1 ; i >= 0 ; -- i )  $ ~~for ( int j = t . size ( ) - 1 ; j >= 0 ; -- j ) dp [ i ] [ j ] = ( dp [ i ] [ j + 1 ] + ( s [ i ] == t [ j ] ? 1 + dp [ i + 1 ] [ j + 1 ] : 0 ) ) % mod ;  $ ~int ret = 0 ;  $ ~for ( int i = 0 ; i < s . size ( ) ; i ++ ) ret = ( ret + dp [ i ] [ 0 ] ) % mod ;  $ ~cout << ret << endl ;  $ ~return 0 ;  $ }
long long x = 0 ;  $ void dfs ( vector < int > * edges , int a , int v [ ] ) {  $ ~x ++ ;  $ ~v [ a ] = 1 ;  $ ~long long ans = edges [ a ] . size ( ) ;  $ ~for ( int i = 0 ; i < edges [ a ] . size ( ) ; i ++ )  $ ~~if ( ! v [ edges [ a ] [ i ] ] ) dfs ( edges , edges [ a ] [ i ] , v ) ;  $ }  $ int main ( ) {  $ ~int n , m ;  $ ~long long ans = 0 ;  $ ~cin >> n >> m ;  $ ~vector < int > edges [ n ] ;  $ ~for ( int i = 0 ; i < m ; i ++ ) {  $ ~~int a , b ;  $ ~~cin >> a >> b ;  $ ~~edges [ a - 1 ] . push_back ( b - 1 ) ;  $ ~~edges [ b - 1 ] . push_back ( a - 1 ) ;  $ ~}  $ ~int v [ n ] = { 0 } ;  $ ~for ( int i = 0 ; i < n ; i ++ )  $ ~~if ( ! v [ i ] ) {  $ ~~~x = 0 ;  $ ~~~dfs ( edges , i , v ) ;  $ ~~~ans += x * ( x - 1 ) / 2 ;  $ ~~}  $ ~if ( ans == m )  $ ~~cout << "YES\n" ;  $ ~else  $ ~~cout << "NO\n" ;  $ ~return 0 ;  $ }
const bool debug = 1 ;  $ int solve ( string s , string t ) {  $ ~const int n = ( int ) s . size ( ) , m = ( int ) t . size ( ) ;  $ ~s = "$" + s ;  $ ~t = "^" + t ;  $ ~static int equal [ 2048 ] [ 2048 ] , sdiag [ 2048 ] [ 2048 ] ;  $ ~fill ( & equal [ 0 ] [ 0 ] , & equal [ 0 ] [ 0 ] + 2048 * 2048 , 0 ) ;  $ ~fill ( & sdiag [ 0 ] [ 0 ] , & sdiag [ 0 ] [ 0 ] + 2048 * 2048 , 0 ) ;  $ ~for ( int i = 1 ; i <= n ; ++ i ) {  $ ~~for ( int j = 1 ; j <= m ; ++ j ) { equal [ i ] [ j ] = ( s [ i ] == t [ j ] ) ; }  $ ~}  $ ~for ( int i = 1 ; i <= n ; ++ i ) {  $ ~~for ( int j = 1 ; j <= m ; ++ j ) { sdiag [ i + 1 ] [ j + 1 ] = equal [ i ] [ j ] + sdiag [ i ] [ j ] ; }  $ ~}  $ ~int answ = m ;  $ ~for ( int i = 1 ; i <= n ; ++ i ) {  $ ~~for ( int j = 1 ; j <= m ; ++ j ) {  $ ~~~int len = min ( n - i + 1 , m - j + 1 ) ;  $ ~~~int nOp = m - ( sdiag [ i + len ] [ j + len ] - sdiag [ i ] [ j ] ) ;  $ ~~~answ = min ( answ , nOp ) ;  $ ~~}  $ ~}  $ ~return answ ;  $ }  $ int main ( ) {  $ ~string s , t ;  $ ~while ( cin >> s >> t ) { cout << solve ( s , t ) << endl ; }  $ ~return 0 ;  $ }
int num [ 200 ] ;  $ int ord [ 200 ] ;  $ int cnt = 0 ;  $ int main ( ) {  $ ~int n , k ;  $ ~cin >> n >> k ;  $ ~for ( int i = 0 ; i < n ; i ++ ) {  $ ~~int tmp ;  $ ~~int flag = 1 ;  $ ~~cin >> tmp ;  $ ~~for ( int j = 0 ; j < cnt ; j ++ ) {  $ ~~~if ( num [ j ] != tmp )  $ ~~~~flag = 1 ;  $ ~~~else {  $ ~~~~flag = 0 ;  $ ~~~~break ;  $ ~~~}  $ ~~}  $ ~~if ( flag == 1 ) {  $ ~~~num [ cnt ] = tmp ;  $ ~~~ord [ cnt ] = i ;  $ ~~~cnt ++ ;  $ ~~}  $ ~}  $ ~if ( cnt < k ) {  $ ~~cout << "NO" << endl ;  $ ~~return 0 ;  $ ~} else {  $ ~~cout << "YES" << endl ;  $ ~~for ( int p = 0 ; p < k - 1 ; p ++ ) cout << ord [ p ] + 1 << " " ;  $ ~~cout << ord [ k - 1 ] + 1 << endl ;  $ ~}  $ }
long long n , a , b , c , ans ;  $ int main ( ) {  $ ~cin >> n >> a >> b >> c ;  $ ~if ( a < b - c ) return cout << n / a << '\n' , 0 ;  $ ~if ( n >= b ) ans += ( n - c ) / ( b - c ) ;  $ ~n -= ans * ( b - c ) ;  $ ~ans += n / a ;  $ ~cout << ans << '\n' ;  $ }
int main ( ) {  $ ~int n , k , cnt = 0 ;  $ ~int maxx , maxn , ans = 0 ;  $ ~int a [ 81 ] , used [ 81 ] , e [ 81 ] ;  $ ~memset ( a , 0 , sizeof ( a ) ) ;  $ ~memset ( used , 0 , sizeof ( used ) ) ;  $ ~cin >> n >> k ;  $ ~for ( int i = 1 ; i <= n ; i ++ ) cin >> a [ i ] ;  $ ~for ( int i = 1 ; i <= n ; i ++ ) {  $ ~~if ( used [ a [ i ] ] ) continue ;  $ ~~if ( cnt < k ) {  $ ~~~cnt ++ ;  $ ~~~used [ a [ i ] ] = 1 ;  $ ~~~ans ++ ;  $ ~~} else {  $ ~~~memset ( e , 0 , sizeof ( e ) ) ;  $ ~~~for ( int j = 1 ; j < i ; j ++ )  $ ~~~~if ( used [ a [ j ] ] ) e [ a [ j ] ] = 81 ;  $ ~~~for ( int j = 1 ; j < i ; j ++ )  $ ~~~~if ( used [ a [ j ] ] ) {  $ ~~~~~for ( int k = i + 1 ; k <= n ; k ++ )  $ ~~~~~~if ( a [ k ] == a [ j ] ) {  $ ~~~~~~~e [ a [ j ] ] = k ;  $ ~~~~~~~break ;  $ ~~~~~~}  $ ~~~~}  $ ~~~maxx = 0 ;  $ ~~~maxn = - 1 ;  $ ~~~for ( int j = 1 ; j < i ; j ++ )  $ ~~~~if ( e [ a [ j ] ] > maxx ) {  $ ~~~~~maxx = e [ a [ j ] ] ;  $ ~~~~~maxn = a [ j ] ;  $ ~~~~}  $ ~~~used [ maxn ] = 0 ;  $ ~~~used [ a [ i ] ] = 1 ;  $ ~~~ans ++ ;  $ ~~}  $ ~}  $ ~cout << ans << endl ;  $ ~return 0 ;  $ }
long long a , b , c , d , k ;  $ int main ( ) {  $ ~cin >> b >> a >> d >> c ;  $ ~for ( int i = 0 ; i <= 100 ; i ++ )  $ ~~for ( int j = 0 ; j <= 100 ; j ++ )  $ ~~~if ( a + i * b == c + j * d ) return cout << a + i * b << '\n' , 0 ;  $ ~cout << - 1 << '\n' ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~string a ;  $ ~long long b , t , c = 0 ;  $ ~getline ( cin , a ) ;  $ ~b = a . find ( '=' ) ;  $ ~t = b ;  $ ~b += 2 ;  $ ~b = a . size ( ) - b + 1 ;  $ ~for ( long long i = 0 ; i < t ; ++ i ) {  $ ~~if ( a [ i ] == '|' ) { c ++ ; }  $ ~}  $ ~if ( c + 1 == b - 1 ) {  $ ~~cout << '|' ;  $ ~~for ( long long i = 0 ; i < a . size ( ) - 1 ; ++ i ) { cout << a [ i ] ; }  $ ~~cout << endl ;  $ ~} else if ( c == b ) {  $ ~~cout << a << endl ;  $ ~} else if ( c == b + 2 ) {  $ ~~long long z = a . find ( '+' ) ;  $ ~~if ( z > 1 ) {  $ ~~~for ( long long i = 1 ; i < a . size ( ) ; i ++ ) { cout << a [ i ] ; }  $ ~~~cout << '|' << endl ;  $ ~~} else {  $ ~~~for ( long long i = 0 ; i < a . size ( ) ; i ++ ) {  $ ~~~~if ( i == z + 1 ) { continue ; }  $ ~~~~cout << a [ i ] ;  $ ~~~}  $ ~~~cout << '|' << endl ;  $ ~~}  $ ~} else {  $ ~~cout << "Impossible" << endl ;  $ ~}  $ ~return 0 ;  $ }
string s [ 15 ] , x , y ;  $ int main ( ) {  $ ~s [ 1 ] = "monday" ;  $ ~s [ 2 ] = "tuesday" ;  $ ~s [ 3 ] = "wednesday" ;  $ ~s [ 4 ] = "thursday" ;  $ ~s [ 5 ] = "friday" ;  $ ~s [ 6 ] = "saturday" ;  $ ~s [ 7 ] = "sunday" ;  $ ~cin >> x >> y ;  $ ~int num1 = 0 , num2 = 0 ;  $ ~for ( int i = 1 ; i <= 7 ; i ++ ) {  $ ~~if ( x == s [ i ] ) { num1 = i ; }  $ ~}  $ ~for ( int i = 1 ; i <= 7 ; i ++ ) {  $ ~~if ( y == s [ i ] ) { num2 = i ; }  $ ~}  $ ~if ( num2 < num1 ) { num2 += 7 ; }  $ ~int sum = num2 - num1 ;  $ ~if ( sum == 0 || sum == 2 || sum == 3 ) {  $ ~~cout << "YES" << endl ;  $ ~} else {  $ ~~cout << "NO" << endl ;  $ ~}  $ ~return 0 ;  $ }
int n , m ;  $ bool lg [ 111 ] [ 111 ] ;  $ int a [ 111 ] [ 111 ] ;  $ bool v [ 111 ] = { 0 } ;  $ bool zero [ 111 ] = { 0 } ;  $ int ex = 0 ;  $ void dfs ( int i ) {  $ ~v [ i ] = true ;  $ ~for ( int j = 1 ; j <= n ; j ++ ) {  $ ~~if ( a [ i ] [ j ] && ! v [ j ] ) { dfs ( j ) ; }  $ ~}  $ }  $ int main ( ) {  $ ~cin >> n >> m ;  $ ~for ( int i = 1 ; i <= n ; i ++ ) {  $ ~~int t ;  $ ~~cin >> t ;  $ ~~if ( t == 0 ) {  $ ~~~zero [ i ] = true ;  $ ~~~ex ++ ;  $ ~~}  $ ~~while ( t -- ) {  $ ~~~int c ;  $ ~~~cin >> c ;  $ ~~~lg [ i ] [ c ] = true ;  $ ~~}  $ ~}  $ ~for ( int i = 1 ; i <= n ; i ++ ) {  $ ~~for ( int j = 1 ; j <= n ; j ++ ) {  $ ~~~if ( i != j ) {  $ ~~~~for ( int k = 1 ; k <= m ; k ++ ) {  $ ~~~~~if ( lg [ i ] [ k ] && lg [ j ] [ k ] ) { a [ i ] [ j ] = 1 ; }  $ ~~~~}  $ ~~~}  $ ~~}  $ ~}  $ ~int ans = 0 ;  $ ~for ( int i = 1 ; i <= n ; i ++ ) {  $ ~~if ( ! v [ i ] && ! zero [ i ] ) {  $ ~~~dfs ( i ) ;  $ ~~~ans ++ ;  $ ~~}  $ ~}  $ ~ans -- ;  $ ~if ( ans < 0 ) ans = 0 ;  $ ~cout << ans + ex << endl ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~long int a , b , c = 0 , d , i , j , k , n , l ;  $ ~cin >> n >> a ;  $ ~int ar [ n + 2 ] ;  $ ~for ( i = 0 ; i < n ; i ++ ) { cin >> ar [ i ] ; }  $ ~for ( i = n - 1 ; i >= 0 ; i -- ) {  $ ~~b = ar [ i ] ;  $ ~~if ( b % a == 0 ) {  $ ~~~d = b / a ;  $ ~~~if ( c < d ) {  $ ~~~~c = d ;  $ ~~~~j = i + 1 ;  $ ~~~}  $ ~~} else {  $ ~~~d = ( b / a ) + 1 ;  $ ~~~if ( c < d ) {  $ ~~~~c = d ;  $ ~~~~j = i + 1 ;  $ ~~~}  $ ~~}  $ ~}  $ ~cout << j << endl ;  $ }
int main ( ) {  $ ~int n , k ;  $ ~cin >> n >> k ;  $ ~string t ;  $ ~cin >> t ;  $ ~int s = n ;  $ ~for ( int i = n - 1 ; i > 0 ; i -- )  $ ~~if ( t . substr ( i , n - i ) == t . substr ( 0 , n - i ) ) s = i ;  $ ~cout << t ;  $ ~k -- ;  $ ~while ( k -- ) {  $ ~~for ( int i = n - s ; i < n ; i ++ ) cout << t [ i ] ;  $ ~}  $ ~cout << endl ;  $ }
int main ( ) {  $ ~int n , s ;  $ ~cin >> n >> s ;  $ ~int a [ n ] , b [ n ] , lowest = 100 , ans = 0 , flag = 0 , low ;  $ ~int i , j , k , l ;  $ ~for ( i = 0 ; i < n ; i ++ ) {  $ ~~cin >> a [ i ] >> b [ i ] ;  $ ~~if ( ( s * 100 ) >= ( a [ i ] * 100 ) + b [ i ] ) {  $ ~~~flag = 1 ;  $ ~~~if ( b [ i ] != 0 ) {  $ ~~~~low = b [ i ] ;  $ ~~~~if ( low < lowest ) { lowest = low ; }  $ ~~~}  $ ~~}  $ ~}  $ ~if ( flag != 0 ) {  $ ~~cout << 100 - lowest << endl ;  $ ~} else {  $ ~~cout << "-1" << endl ;  $ ~}  $ ~return 0 ;  $ }
int main ( ) {  $ ~long long n , m , a , b ;  $ ~cin >> n >> m >> a >> b ;  $ ~a -- , b -- ;  $ ~if ( a / m == b / m ) {  $ ~~cout << "1\n" ;  $ ~~return 0 ;  $ ~}  $ ~if ( a % m == 0 && b % m == m - 1 ) {  $ ~~cout << "1\n" ;  $ ~~return 0 ;  $ ~}  $ ~if ( b + 1 == n ) {  $ ~~if ( a % m == 0 ) {  $ ~~~cout << "1\n" ;  $ ~~~return 0 ;  $ ~~}  $ ~~cout << "2\n" ;  $ ~~return 0 ;  $ ~}  $ ~if ( a % m == 0 || b % m == m - 1 ) {  $ ~~cout << "2\n" ;  $ ~~return 0 ;  $ ~}  $ ~if ( abs ( ( a / m ) - ( b / m ) ) <= 1 ) {  $ ~~cout << "2\n" ;  $ ~~return 0 ;  $ ~}  $ ~if ( ( ( a + m - 1 ) % m ) == ( b % m ) ) {  $ ~~cout << "2\n" ;  $ ~~return 0 ;  $ ~}  $ ~cout << "3\n" ;  $ ~return 0 ;  $ }
const int MAX = 100005 ;  $ vector < int > f ( MAX , - 1 ) ;  $ vector < int > fr ( MAX , - 1 ) ;  $ vector < bool > valid ( MAX , 1 ) ;  $ bool ans = 1 ;  $ int n ;  $ int lastValid = 1 ;  $ int main ( ) {  $ ~cin >> n ;  $ ~if ( n == 1 ) {  $ ~~cout << "1\n" ;  $ ~} else {  $ ~~if ( n & 1 ) {  $ ~~~f [ n / 2 + 1 ] = n / 2 + 1 ;  $ ~~~valid [ n / 2 + 1 ] = 0 ;  $ ~~}  $ ~~f [ 1 ] = 2 , f [ n ] = n - 1 ;  $ ~~fr [ 2 ] = 1 , fr [ n - 1 ] = n ;  $ ~~valid [ 2 ] = valid [ n - 1 ] = 0 ;  $ ~~for ( int i = 2 ; i <= n / 2 ; ++ i ) {  $ ~~~int x = f [ i ] , y = fr [ i ] ;  $ ~~~if ( x != - 1 && y == - 1 ) {  $ ~~~~fr [ i ] = n + 1 - x ;  $ ~~~~f [ n + 1 - x ] = i ;  $ ~~~~valid [ i ] = 0 ;  $ ~~~} else if ( y != - 1 && x == - 1 ) {  $ ~~~~f [ i ] = n + 1 - y ;  $ ~~~~valid [ n + 1 - y ] = 0 ;  $ ~~~~fr [ n + 1 - y ] = i ;  $ ~~~}  $ ~~~if ( f [ i ] == - 1 ) {  $ ~~~~bool update = 1 ;  $ ~~~~for ( int j = lastValid ; j <= n ; ++ j ) {  $ ~~~~~if ( valid [ j ] ) {  $ ~~~~~~if ( i == j ) {  $ ~~~~~~~update = 0 ;  $ ~~~~~~~continue ;  $ ~~~~~~}  $ ~~~~~~f [ i ] = j ;  $ ~~~~~~fr [ j ] = i ;  $ ~~~~~~valid [ j ] = 0 ;  $ ~~~~~~if ( update ) { lastValid = j ; }  $ ~~~~~~break ;  $ ~~~~~}  $ ~~~~}  $ ~~~}  $ ~~~f [ n + 1 - i ] = n + 1 - f [ i ] ;  $ ~~~fr [ f [ n + 1 - i ] ] = n + 1 - i ;  $ ~~~valid [ n + 1 - f [ i ] ] = 0 ;  $ ~~}  $ ~~for ( int i = 1 ; i <= n && ans ; ++ i ) {  $ ~~~if ( f [ f [ i ] ] != n + 1 - i ) { ans = 0 ; }  $ ~~}  $ ~~if ( ans == 0 ) {  $ ~~~cout << "-1\n" ;  $ ~~} else {  $ ~~~for ( int i = 0 ; i < n ; ++ i ) { cout << f [ i + 1 ] << ( i + 1 < n ? " " : "\n" ) ; }  $ ~~}  $ ~}  $ }
int main ( ) {  $ ~long long n , i , k , a , j , mx = - 1 ;  $ ~cin >> n ;  $ ~for ( i = 0 ; i < n ; i ++ ) {  $ ~~cin >> k >> a ;  $ ~~for ( j = 1 ; j < 15 ; j ++ ) {  $ ~~~if ( pow ( 4 , j ) >= a ) break ;  $ ~~}  $ ~~mx = max ( mx , j + k ) ;  $ ~}  $ ~cout << mx << endl ;  $ ~return 0 ;  $ }
map < int , int > hit ;  $ int main ( ) {  $ ~int n , a [ 100005 ] , temp , flag = 0 ;  $ ~cin >> n ;  $ ~for ( int i = 0 ; i < n ; i ++ ) {  $ ~~cin >> temp ;  $ ~~hit [ temp ] ++ ;  $ ~~if ( temp == 50 ) {  $ ~~~if ( hit [ 25 ] >= 1 ) {  $ ~~~~hit [ 25 ] -- ;  $ ~~~~continue ;  $ ~~~}  $ ~~~flag = 1 ;  $ ~~} else if ( temp == 100 ) {  $ ~~~if ( hit [ 50 ] >= 1 && hit [ 25 ] >= 1 ) {  $ ~~~~hit [ 50 ] -- ;  $ ~~~~hit [ 25 ] -- ;  $ ~~~~continue ;  $ ~~~} else if ( hit [ 25 ] >= 3 ) {  $ ~~~~hit [ 25 ] -= 3 ;  $ ~~~~continue ;  $ ~~~}  $ ~~~flag = 1 ;  $ ~~}  $ ~}  $ ~if ( flag == 0 )  $ ~~cout << "YES" << endl ;  $ ~else  $ ~~cout << "NO" << endl ;  $ ~return 0 ;  $ }
long long bigmod ( long long a , long long b , long long m ) {  $ ~if ( b == 0 ) return 1 % m ;  $ ~long long x = bigmod ( a , b / 2 , m ) ;  $ ~x = ( x * x ) % m ;  $ ~if ( b % 2 ) x = ( x * a ) % m ;  $ ~return x ;  $ }  $ int main ( ) {  $ ~int n ;  $ ~cin >> n ;  $ ~string s [ n + 2 ] ;  $ ~for ( int i = 0 ; i < n ; i ++ ) cin >> s [ i ] ;  $ ~vector < int > r [ n + 1 ] , c [ n + 1 ] ;  $ ~for ( int i = 0 ; i < n ; i ++ )  $ ~~for ( int j = 0 ; j < n ; j ++ )  $ ~~~if ( s [ i ] [ j ] == '.' ) {  $ ~~~~r [ i ] . push_back ( j ) ;  $ ~~~~c [ j ] . push_back ( i ) ;  $ ~~~}  $ ~int p = 1 ;  $ ~for ( int i = 0 ; i < n ; i ++ ) {  $ ~~if ( r [ i ] . empty ( ) ) {  $ ~~~p = 0 ;  $ ~~~break ;  $ ~~}  $ ~}  $ ~if ( p ) {  $ ~~for ( int i = 0 ; i < n ; i ++ ) cout << i + 1 << " " << r [ i ] [ 0 ] + 1 << endl ;  $ ~~return 0 ;  $ ~}  $ ~p = 1 ;  $ ~for ( int i = 0 ; i < n ; i ++ ) {  $ ~~if ( c [ i ] . empty ( ) ) {  $ ~~~p = 0 ;  $ ~~~break ;  $ ~~}  $ ~}  $ ~if ( p ) {  $ ~~for ( int i = 0 ; i < n ; i ++ ) cout << c [ i ] [ 0 ] + 1 << " " << i + 1 << endl ;  $ ~~return 0 ;  $ ~}  $ ~puts ( "-1" ) ;  $ }
int main ( ) {  $ ~int n ;  $ ~cin >> n ;  $ ~int cnt = 0 ;  $ ~for ( int i = 1 ; i <= n ; ++ i ) {  $ ~~int x ;  $ ~~cin >> x ;  $ ~~if ( ! x ) ++ cnt ;  $ ~}  $ ~if ( n == 1 ) {  $ ~~cout << ( ! cnt ? "YES" : "NO" ) << "\n" ;  $ ~~return 0 ;  $ ~}  $ ~if ( cnt == 1 )  $ ~~cout << "YES\n" ;  $ ~else  $ ~~cout << "NO\n" ;  $ ~return 0 ;  $ }
const long long maxn = 1e9 + 5 ;  $ int main ( ) {  $ ~long long t , s , x ;  $ ~cin >> t >> s >> x ;  $ ~if ( x < t || x == t + 1 ) {  $ ~~cout << "NO" << endl ;  $ ~~return 0 ;  $ ~}  $ ~if ( ( x - t ) % s == 0 || ( x - t ) % s == 1 )  $ ~~cout << "YES" << endl ;  $ ~else  $ ~~cout << "NO" << endl ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~long A [ 10000 ] , B [ 10000 ] , n , i , a , s , j , k , tam , dem ;  $ ~cin >> n ;  $ ~for ( i = 1 ; i < n + 1 ; i ++ ) { cin >> A [ i ] ; }  $ ~if ( n == 1 ) {  $ ~~if ( ( A [ 1 ] == 1 ) )  $ ~~~cout << "YES" << endl ;  $ ~~else if ( A [ 1 ] == 0 )  $ ~~~cout << "NO" << endl ;  $ ~} else {  $ ~~dem = 0 ;  $ ~~for ( i = 1 ; i < n + 1 ; i ++ ) {  $ ~~~if ( A [ i ] == 0 ) { dem ++ ; }  $ ~~~if ( ( A [ i ] < 0 ) || ( A [ i ] > 1 ) ) { dem = dem + 2 ; }  $ ~~}  $ ~~if ( ( dem >= 2 ) || ( dem == 0 ) )  $ ~~~cout << "NO" << endl ;  $ ~~else {  $ ~~~if ( dem == 1 ) cout << "YES" << endl ;  $ ~~}  $ ~}  $ ~return 0 ;  $ }
int ip = 0 , ip2 = 0 , n ;  $ vector < int > v ;  $ char s [ 100010 ] ;  $ bool next_token ( ) {  $ ~ip = ip2 ;  $ ~while ( ip < n && ( s [ ip ] < 'a' || s [ ip ] > 'z' ) ) ip ++ ;  $ ~if ( ip == n ) return false ;  $ ~ip2 = ip ;  $ ~while ( ip2 < n && s [ ip2 ] >= 'a' && s [ ip2 ] <= 'z' ) ip2 ++ ;  $ ~return true ;  $ }  $ char z ;  $ int get_type ( ) {  $ ~int len = ip2 - ip ;  $ ~z = s [ ip2 ] ;  $ ~s [ ip2 ] = 0 ;  $ ~if ( strcmp ( s + ip + len - 4 , "lios" ) == 0 ) return 0 ;  $ ~if ( strcmp ( s + ip + len - 5 , "liala" ) == 0 ) return 1 ;  $ ~if ( strcmp ( s + ip + len - 3 , "etr" ) == 0 ) return 10 ;  $ ~if ( strcmp ( s + ip + len - 4 , "etra" ) == 0 ) return 11 ;  $ ~if ( strcmp ( s + ip + len - 6 , "initis" ) == 0 ) return 20 ;  $ ~if ( strcmp ( s + ip + len - 6 , "inites" ) == 0 ) return 21 ;  $ ~return - 1 ;  $ }  $ bool solve ( ) {  $ ~for ( int i = 0 ; i < v . size ( ) ; i ++ )  $ ~~if ( v [ i ] == - 1 ) return false ;  $ ~if ( v . size ( ) == 1 ) return true ;  $ ~for ( int i = 0 ; i < v . size ( ) ; i ++ )  $ ~~for ( int j = 0 ; j < i ; j ++ )  $ ~~~if ( v [ i ] % 10 != v [ j ] % 10 ) return false ;  $ ~for ( int i = 0 ; i < v . size ( ) - 1 ; i ++ )  $ ~~if ( v [ i ] > v [ i + 1 ] ) return false ;  $ ~int cnt = 0 ;  $ ~for ( int i = 0 ; i < v . size ( ) ; i ++ )  $ ~~if ( v [ i ] / 10 == 1 ) cnt ++ ;  $ ~if ( cnt == 1 )  $ ~~return true ;  $ ~else  $ ~~return false ;  $ }  $ int main ( ) {  $ ~gets ( s ) ;  $ ~n = strlen ( s ) ;  $ ~while ( next_token ( ) ) {  $ ~~v . push_back ( get_type ( ) ) ;  $ ~~s [ ip2 ] = z ;  $ ~}  $ ~if ( solve ( ) )  $ ~~puts ( "YES" ) ;  $ ~else  $ ~~puts ( "NO" ) ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~int numberOfStudents ;  $ ~int studentsRate ;  $ ~int result = 1 ;  $ ~cin >> numberOfStudents ;  $ ~int * arr = new int [ numberOfStudents ] ;  $ ~for ( int x = 0 ; x < numberOfStudents ; ++ x ) {  $ ~~cin >> studentsRate ;  $ ~~arr [ x ] = studentsRate ;  $ ~}  $ ~for ( int x = 0 ; x < numberOfStudents ; ++ x ) {  $ ~~result = 1 ;  $ ~~for ( int y = 0 ; y < numberOfStudents ; ++ y ) {  $ ~~~if ( arr [ x ] < arr [ y ] ) { ++ result ; }  $ ~~}  $ ~~if ( x == numberOfStudents - 1 )  $ ~~~cout << result << endl ;  $ ~~else  $ ~~~cout << result << " " ;  $ ~}  $ ~return 0 ;  $ }
int main ( ) {  $ ~long long t1 , t2 , x1 , x2 , t0 ;  $ ~cin >> t1 >> t2 >> x1 >> x2 >> t0 ;  $ ~if ( t1 == t0 and t2 == t0 ) {  $ ~~cout << x1 << ' ' << x2 << endl ;  $ ~~return ( 0 ) ;  $ ~}  $ ~if ( t1 == t0 ) {  $ ~~cout << x1 << ' ' << 0 << endl ;  $ ~~return ( 0 ) ;  $ ~}  $ ~if ( t2 == t0 ) {  $ ~~cout << 0 << ' ' << x2 << endl ;  $ ~~return ( 0 ) ;  $ ~}  $ ~long long Y1 = 0 , Y2 = 0 ;  $ ~long double dif = INT_MAX ;  $ ~for ( long long y1 = 0 ; y1 <= x1 ; y1 ++ ) {  $ ~~long long l = ceil ( 1.0 L * y1 * ( t1 - t0 ) / ( t0 - t2 ) ) ;  $ ~~for ( long long y2 = l ; y2 <= l + 10 ; y2 ++ ) {  $ ~~~if ( y1 == 0 and y2 == 0 ) continue ;  $ ~~~if ( not ( 0 <= y2 and y2 <= x2 ) ) continue ;  $ ~~~long double t = 1.0 L * ( t1 * y1 + t2 * y2 ) / ( y1 + y2 ) ;  $ ~~~if ( t >= t0 and t - t0 <= dif ) {  $ ~~~~if ( abs ( t - t0 - dif ) < 1e-6 and y1 + y2 < Y1 + Y2 ) continue ;  $ ~~~~dif = t - t0 ;  $ ~~~~Y1 = y1 ;  $ ~~~~Y2 = y2 ;  $ ~~~}  $ ~~}  $ ~}  $ ~cout << Y1 << ' ' << Y2 << endl ;  $ ~return ( 0 ) ;  $ }
int b [ 20 ] , ans , n ;  $ bool a [ 10 ] [ 10 ] ;  $ bool check ( ) {  $ ~int i , j , r , l , tot ;  $ ~for ( i = 1 ; i <= 5 ; i ++ ) {  $ ~~l = r = 0 ;  $ ~~for ( j = 1 ; j <= 5 ; j ++ ) {  $ ~~~if ( a [ i ] [ j ] ) {  $ ~~~~l ++ ;  $ ~~~~if ( b [ j ] ) { r ++ ; }  $ ~~~}  $ ~~}  $ ~~if ( l - 1 > r ) return false ;  $ ~}  $ ~for ( i = 1 ; i <= 5 ; i ++ ) {  $ ~~l = r = 0 ;  $ ~~for ( j = 1 ; j <= 5 ; j ++ ) {  $ ~~~if ( a [ j ] [ i ] ) {  $ ~~~~l ++ ;  $ ~~~~if ( b [ 5 + j ] ) r ++ ;  $ ~~~}  $ ~~}  $ ~~if ( l - 1 > r ) return false ;  $ ~}  $ ~tot = 0 ;  $ ~for ( i = 1 ; i <= 5 ; i ++ ) {  $ ~~for ( j = 1 ; j <= 5 ; j ++ ) {  $ ~~~if ( a [ i ] [ j ] && ! b [ i + 5 ] && ! b [ j ] ) tot ++ ;  $ ~~}  $ ~}  $ ~if ( tot > 1 ) return false ;  $ ~return true ;  $ }  $ void dfs ( int x ) {  $ ~int i , sum ;  $ ~if ( x == 11 ) {  $ ~~if ( check ( ) ) {  $ ~~~sum = 0 ;  $ ~~~for ( i = 1 ; i <= 11 ; i ++ ) {  $ ~~~~if ( b [ i ] == 1 ) sum ++ ;  $ ~~~}  $ ~~~ans = min ( sum , ans ) ;  $ ~~}  $ ~~return ;  $ ~}  $ ~b [ x ] = 1 ;  $ ~dfs ( x + 1 ) ;  $ ~b [ x ] = 0 ;  $ ~dfs ( x + 1 ) ;  $ }  $ int main ( ) {  $ ~int i , y ;  $ ~char ch ;  $ ~int k ;  $ ~cin >> n ;  $ ~memset ( a , false , sizeof ( a ) ) ;  $ ~for ( i = 1 ; i <= n ; i ++ ) {  $ ~~cin >> ch >> k ;  $ ~~if ( ch == 'R' )  $ ~~~y = 1 ;  $ ~~else if ( ch == 'G' )  $ ~~~y = 2 ;  $ ~~else if ( ch == 'B' )  $ ~~~y = 3 ;  $ ~~else if ( ch == 'Y' )  $ ~~~y = 4 ;  $ ~~else if ( ch == 'W' )  $ ~~~y = 5 ;  $ ~~a [ y ] [ k ] = true ;  $ ~}  $ ~memset ( b , 0 , sizeof ( b ) ) ;  $ ~ans = 9999999 ;  $ ~;  $ ~dfs ( 1 ) ;  $ ~cout << ans << endl ;  $ }
static const double EPS = 1e-5 ;  $ char colortable [ ] = { 'R' , 'G' , 'B' , 'Y' , 'W' } ;  $ int getX ( string s ) {  $ ~for ( int i = 0 ; i < 5 ; i ++ ) {  $ ~~if ( colortable [ i ] == s [ 0 ] ) return i ;  $ ~}  $ ~return - 1 ;  $ }  $ int getY ( string s ) {  $ ~return s [ 1 ] - '1' ;  $ }  $ int bitcount ( int b ) {  $ ~int ans = 0 ;  $ ~while ( b != 0 ) {  $ ~~ans ++ ;  $ ~~b &= b - 1 ;  $ ~}  $ ~return ans ;  $ }  $ bool check ( int maskX , int maskY , string C1 , string C2 ) {  $ ~int x1 = getX ( C1 ) ;  $ ~int x2 = getX ( C2 ) ;  $ ~int y1 = getY ( C1 ) ;  $ ~int y2 = getY ( C2 ) ;  $ ~if ( x1 == x2 && y1 == y2 ) return true ;  $ ~if ( x1 != x2 ) {  $ ~~if ( ( maskX & ( 1 << x1 ) ) != 0 || ( maskX & ( 1 << x2 ) ) != 0 ) return true ;  $ ~}  $ ~if ( y1 != y2 ) {  $ ~~if ( ( maskY & ( 1 << y1 ) ) != 0 || ( maskY & ( 1 << y2 ) ) != 0 ) return true ;  $ ~}  $ ~return false ;  $ }  $ int main ( ) {  $ ~int n ;  $ ~cin >> n ;  $ ~vector < string > cards ( n ) ;  $ ~for ( int i = 0 ; i < n ; i ++ ) cin >> cards [ i ] ;  $ ~int ans = 100000 ;  $ ~sort ( cards . begin ( ) , cards . end ( ) ) ;  $ ~cards . erase ( unique ( cards . begin ( ) , cards . end ( ) ) , cards . end ( ) ) ;  $ ~for ( int maskX = 0 ; maskX < ( 1 << 5 ) ; maskX ++ ) {  $ ~~for ( int maskY = 0 ; maskY < ( 1 << 5 ) ; maskY ++ ) {  $ ~~~bool ok = true ;  $ ~~~for ( int i = 0 ; ok && ( i < ( int ) cards . size ( ) ) ; i ++ ) {  $ ~~~~for ( int j = i + 1 ; ok && ( j < ( int ) cards . size ( ) ) ; j ++ ) { ok = check ( maskX , maskY , cards [ i ] , cards [ j ] ) ; }  $ ~~~}  $ ~~~if ( ok ) { ans = min ( ans , bitcount ( maskX ) + bitcount ( maskY ) ) ; }  $ ~~}  $ ~}  $ ~cout << ans << endl ;  $ ~return 0 ;  $ }
int d [ 7 ] [ 7 ] ;  $ int n ;  $ void as ( int x , int y , int node ) {  $ ~if ( ! x ) {  $ ~~d [ node ] [ 1 ] = y ;  $ ~~d [ 1 ] [ node ] = y ;  $ ~~d [ node ] [ 2 ] = n - y ;  $ ~~d [ 2 ] [ node ] = n - y ;  $ ~}  $ ~if ( ! y ) {  $ ~~d [ node ] [ 1 ] = x ;  $ ~~d [ 1 ] [ node ] = x ;  $ ~~d [ node ] [ 3 ] = n - x ;  $ ~~d [ 3 ] [ node ] = n - x ;  $ ~}  $ ~if ( x == n ) {  $ ~~d [ node ] [ 3 ] = y ;  $ ~~d [ 3 ] [ node ] = y ;  $ ~~d [ node ] [ 4 ] = n - y ;  $ ~~d [ 4 ] [ node ] = n - y ;  $ ~}  $ ~if ( y == n ) {  $ ~~d [ node ] [ 2 ] = x ;  $ ~~d [ 2 ] [ node ] = x ;  $ ~~d [ node ] [ 4 ] = n - x ;  $ ~~d [ 4 ] [ node ] = n - x ;  $ ~}  $ }  $ int main ( ) {  $ ~int x1 , y1 , x2 , y2 ;  $ ~cin >> n >> x1 >> y1 >> x2 >> y2 ;  $ ~for ( int i = 1 ; i <= 6 ; i ++ )  $ ~~for ( int j = 1 ; j <= 6 ; j ++ ) d [ i ] [ j ] = 3000 ;  $ ~for ( int i = 1 ; i <= 6 ; i ++ ) d [ i ] [ i ] = 0 ;  $ ~d [ 1 ] [ 2 ] = n ;  $ ~d [ 2 ] [ 1 ] = n ;  $ ~d [ 1 ] [ 3 ] = n ;  $ ~d [ 3 ] [ 1 ] = n ;  $ ~d [ 4 ] [ 2 ] = n ;  $ ~d [ 2 ] [ 4 ] = n ;  $ ~d [ 3 ] [ 4 ] = n ;  $ ~d [ 4 ] [ 3 ] = n ;  $ ~as ( x1 , y1 , 5 ) ;  $ ~as ( x2 , y2 , 6 ) ;  $ ~if ( x1 == x2 && abs ( y1 - y2 ) < n ) {  $ ~~d [ 5 ] [ 6 ] = abs ( y1 - y2 ) ;  $ ~~d [ 6 ] [ 5 ] = abs ( y1 - y2 ) ;  $ ~}  $ ~if ( y1 == y2 && abs ( x1 - x2 ) < n ) {  $ ~~d [ 5 ] [ 6 ] = abs ( x1 - x2 ) ;  $ ~~d [ 6 ] [ 5 ] = abs ( x1 - x2 ) ;  $ ~}  $ ~for ( int i = 1 ; i <= 6 ; i ++ )  $ ~~for ( int j = 1 ; j <= 6 ; j ++ )  $ ~~~for ( int k = 1 ; k <= 6 ; k ++ )  $ ~~~~if ( d [ j ] [ i ] + d [ i ] [ k ] < d [ j ] [ k ] ) {  $ ~~~~~d [ j ] [ k ] = d [ j ] [ i ] + d [ i ] [ k ] ;  $ ~~~~~d [ k ] [ j ] = d [ j ] [ i ] + d [ i ] [ k ] ;  $ ~~~~}  $ ~cout << d [ 6 ] [ 5 ] << endl ;  $ ~return 0 ;  $ }
long long a [ 1001000 ] ;  $ long long b [ 1001000 ] ;  $ int main ( ) {  $ ~long long n ;  $ ~cin >> n ;  $ ~for ( long long i = 0 ; i < n ; i ++ ) {  $ ~~cin >> a [ i ] ;  $ ~~b [ a [ i ] ] ++ ;  $ ~}  $ ~sort ( a , a + n ) ;  $ ~long long ans = 0 ;  $ ~for ( long long i = 0 ; i < 1000100 ; i ++ ) {  $ ~~b [ i + 1 ] += b [ i ] / 2 ;  $ ~~b [ i ] %= 2 ;  $ ~~if ( b [ i ] ) ans ++ ;  $ ~}  $ ~cout << ans << endl ;  $ ~return 0 ;  $ }
int n ;  $ int main ( ) {  $ ~cin >> n ;  $ ~int ar [ n ] , br [ n ] ;  $ ~for ( int j = 0 ; j < n ; j ++ ) { cin >> ar [ j ] >> br [ j ] ; }  $ ~int c = 0 ;  $ ~for ( int j = 0 ; j < n ; j ++ ) {  $ ~~for ( int i = 0 ; i < n ; i ++ ) {  $ ~~~if ( i != j && ar [ j ] == br [ i ] ) {  $ ~~~~c ++ ;  $ ~~~~break ;  $ ~~~}  $ ~~}  $ ~}  $ ~cout << n - c << endl ;  $ }
int main ( ) {  $ ~string str ;  $ ~cin >> str ;  $ ~long long int a , b , c , d , x , y ;  $ ~a = str [ 0 ] - '0' ;  $ ~b = str [ 1 ] - '0' ;  $ ~c = str [ 3 ] - '0' ;  $ ~d = str [ 4 ] - '0' ;  $ ~y = c * 10 + d ;  $ ~x = a * 10 + b ;  $ ~vector < long long int > s1 , s2 ;  $ ~while ( true ) {  $ ~~s1 . clear ( ) ;  $ ~~s2 . clear ( ) ;  $ ~~++ y ;  $ ~~if ( y == 60 ) {  $ ~~~y = 0 ;  $ ~~~++ x ;  $ ~~~if ( x == 24 ) { x = 00 ; }  $ ~~}  $ ~~s2 . push_back ( y / 10 ) ;  $ ~~s2 . push_back ( y % 10 ) ;  $ ~~s1 . push_back ( x / 10 ) ;  $ ~~s1 . push_back ( x % 10 ) ;  $ ~~if ( s1 [ 0 ] == s2 [ 1 ] && s1 [ 1 ] == s2 [ 0 ] ) {  $ ~~~cout << s1 [ 0 ] << s1 [ 1 ] << ":" << s2 [ 0 ] << s2 [ 1 ] << '\n' ;  $ ~~~return 0 ;  $ ~~}  $ ~}  $ ~return 0 ;  $ }
long long int lcm ( long long int x , long long int y ) {  $ ~long long int i = 1 ;  $ ~for ( ; i <= x ; i ++ )  $ ~~if ( ( y * i ) % x == 0 ) return y * i ;  $ }  $ int main ( ) {  $ ~long long int n , ans , k , i , res , j ;  $ ~cin >> n ;  $ ~if ( n <= 2 )  $ ~~cout << n << endl ;  $ ~else {  $ ~~if ( n % 2 )  $ ~~~cout << ( n * ( n - 1 ) * ( n - 2 ) ) << endl ;  $ ~~else {  $ ~~~ans = n * ( n - 1 ) ;  $ ~~~i = 2 ;  $ ~~~res = lcm ( n - i , ans ) ;  $ ~~~k = res / ans ;  $ ~~~for ( j = n - i - 1 ; j > k ; j -- ) {  $ ~~~~res = max ( res , lcm ( j , ans ) ) ;  $ ~~~~k = max ( k , res / ans ) ;  $ ~~~}  $ ~~~cout << max ( res , ( ( n - 1 ) * ( n - 2 ) * ( n - 3 ) ) ) << endl ;  $ ~~}  $ ~}  $ ~return 0 ;  $ }
const long long MOD = 1e9 + 7 ;  $ long long powmod ( long long a , long long b , long long m = MOD ) {  $ ~long long r = 1 ;  $ ~while ( b > 0 ) {  $ ~~if ( b & 1 ) r = r * a % m ;  $ ~~a = a * a % m ;  $ ~~b >> = 1 ;  $ ~}  $ ~return r ;  $ }  $ long long power ( long long a , long long b ) {  $ ~long long r = 1 ;  $ ~while ( b > 0 ) {  $ ~~if ( b & 1 ) r = r * a ;  $ ~~a = a * a ;  $ ~~b >> = 1 ;  $ ~}  $ ~return r ;  $ }  $ long long gcd ( long long a , long long b ) {  $ ~if ( ! b ) return a ;  $ ~return gcd ( b , a % b ) ;  $ }  $ long long inv ( long long a , long long m = MOD ) {  $ ~return powmod ( a , m - 2 , m ) ;  $ }  $ long long lcm ( long long a , long long b ) {  $ ~return ( a * b ) / gcd ( a , b ) ;  $ }  $ map < string , long long > mmap ;  $ void init ( ) {  $ ~mmap [ "monday" ] = 0 ;  $ ~mmap [ "tuesday" ] = 1 ;  $ ~mmap [ "wednesday" ] = 2 ;  $ ~mmap [ "thursday" ] = 3 ;  $ ~mmap [ "friday" ] = 4 ;  $ ~mmap [ "saturday" ] = 5 ;  $ ~mmap [ "sunday" ] = 6 ;  $ }  $ int main ( ) {  $ ~init ( ) ;  $ ~string s1 , s2 ;  $ ~cin >> s1 >> s2 ;  $ ~long long n1 = mmap [ s1 ] , n2 = mmap [ s2 ] ;  $ ~if ( ( ( n1 + 31 ) % 7 == n2 ) || ( ( n1 + 30 ) % 7 == n2 ) | ( ( n1 + 28 ) % 7 == n2 ) ) {  $ ~~cout << "YES"  $ ~~~<< "\n" ;  $ ~} else {  $ ~~cout << "NO"  $ ~~~<< "\n" ;  $ ~}  $ }
int n , k , a , ans = 1 , tmp ;  $ int main ( ) {  $ ~cin >> n ;  $ ~while ( n -- ) {  $ ~~cin >> k >> a ;  $ ~~if ( a == 1 )  $ ~~~tmp = k + 1 ;  $ ~~else {  $ ~~~tmp = k ;  $ ~~~while ( a > 1 ) {  $ ~~~~a = ( a - 1 ) / 4 + 1 ;  $ ~~~~++ tmp ;  $ ~~~}  $ ~~}  $ ~~if ( ans < tmp ) ans = tmp ;  $ ~}  $ ~cout << ans << endl ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~int n ;  $ ~int sum = 0 ;  $ ~int npos = 0 ;  $ ~int nneg = 0 ;  $ ~int x [ 100 ] [ 2 ] ;  $ ~cin >> n ;  $ ~for ( int i = 0 ; i < n ; i ++ ) {  $ ~~for ( int j = 0 ; j < 2 ; j ++ ) { cin >> x [ i ] [ j ] ; }  $ ~}  $ ~for ( int i = 0 ; i < n ; i ++ ) {  $ ~~if ( x [ i ] [ 0 ] > 0 ) {  $ ~~~npos ++ ;  $ ~~} else {  $ ~~~nneg ++ ;  $ ~~}  $ ~}  $ ~for ( int i = 0 ; i < n - 1 ; i ++ ) {  $ ~~for ( int j = i + 1 ; j < n ; j ++ ) {  $ ~~~if ( x [ i ] [ 0 ] > x [ j ] [ 0 ] ) {  $ ~~~~int auxp , auxc ;  $ ~~~~auxp = x [ i ] [ 0 ] ;  $ ~~~~x [ i ] [ 0 ] = x [ j ] [ 0 ] ;  $ ~~~~x [ j ] [ 0 ] = auxp ;  $ ~~~~auxc = x [ i ] [ 1 ] ;  $ ~~~~x [ i ] [ 1 ] = x [ j ] [ 1 ] ;  $ ~~~~x [ j ] [ 1 ] = auxc ;  $ ~~~}  $ ~~}  $ ~}  $ ~if ( npos > nneg ) {  $ ~~for ( int i = 0 ; i < ( 2 * nneg + 1 ) ; i ++ ) { sum = sum + x [ i ] [ 1 ] ; }  $ ~} else if ( npos < nneg ) {  $ ~~for ( int i = ( n - ( 2 * npos + 1 ) ) ; i < n ; i ++ ) { sum = sum + x [ i ] [ 1 ] ; }  $ ~} else {  $ ~~for ( int i = 0 ; i < n ; i ++ ) { sum = sum + x [ i ] [ 1 ] ; }  $ ~}  $ ~cout << sum << endl ;  $ ~return 0 ;  $ }
int n , L , a ;  $ int main ( ) {  $ ~cin >> n >> L >> a ;  $ ~unsigned int result = 0 ;  $ ~int prevbeg = 0 , prevlen = 0 ;  $ ~for ( int currcase = 0 ; currcase < n ; ++ currcase ) {  $ ~~int begin , length ;  $ ~~cin >> begin >> length ;  $ ~~if ( currcase != 0 ) {  $ ~~~int breaktime = begin - ( prevbeg + prevlen ) ;  $ ~~~result += floor ( breaktime / a ) ;  $ ~~} else {  $ ~~~result += floor ( begin / a ) ;  $ ~~}  $ ~~prevbeg = begin ;  $ ~~prevlen = length ;  $ ~}  $ ~int lastbreaktime = L - ( prevbeg + prevlen ) ;  $ ~result += floor ( lastbreaktime / a ) ;  $ ~cout << result << endl ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~long long n , d ;  $ ~cin >> n >> d ;  $ ~vector < long long > v ( n ) ;  $ ~for ( int i = 0 ; i < n ; i ++ ) { cin >> v [ i ] ; }  $ ~unsigned long long ans = 0 ;  $ ~long long j = 0 ;  $ ~for ( long long i = 0 ; i < n ; i ++ ) {  $ ~~while ( j < n && v [ j ] - v [ i ] <= d ) j ++ ;  $ ~~ans += ( j - i - 1 ) * ( j - i - 2 ) / 2 ;  $ ~}  $ ~cout << ans << "\n" ;  $ }
const int MAXN = 1e6 + 10 ;  $ const int INF = 1e9 + 7 ;  $ string res , a [ 110 ] , ans ;  $ char lt ;  $ bool isU [ 110 ] , vis [ 110 ] ;  $ int main ( ) {  $ ~int n ;  $ ~cin >> n ;  $ ~for ( int i = 0 ; i < n ; i ++ ) {  $ ~~cin >> a [ i ] ;  $ ~~for ( int j = 0 ; j < a [ i ] . length ( ) ; j ++ )  $ ~~~if ( isupper ( a [ i ] [ j ] ) ) a [ i ] [ j ] -= 'A' - 'a' ;  $ ~}  $ ~cin >> res ;  $ ~ans = res ;  $ ~for ( int i = 0 ; i < res . length ( ) ; i ++ )  $ ~~if ( isupper ( res [ i ] ) ) {  $ ~~~res [ i ] -= 'A' - 'a' ;  $ ~~~isU [ i ] = 1 ;  $ ~~}  $ ~cin >> lt ;  $ ~for ( int i = 0 ; i < res . length ( ) ; i ++ )  $ ~~for ( int j = 0 ; j < n ; j ++ )  $ ~~~if ( res [ i ] == a [ j ] [ 0 ] ) {  $ ~~~~int k ;  $ ~~~~for ( k = 0 ; k < a [ j ] . length ( ) ; k ++ )  $ ~~~~~if ( res [ i + k ] != a [ j ] [ k ] ) break ;  $ ~~~~if ( k == a [ j ] . length ( ) )  $ ~~~~~for ( k = 0 ; k < a [ j ] . length ( ) ; k ++ ) {  $ ~~~~~~if ( vis [ i + k ] ) continue ;  $ ~~~~~~if ( res [ i + k ] != lt )  $ ~~~~~~~ans [ i + k ] = isU [ i + k ] ? lt - 'a' + 'A' : lt ;  $ ~~~~~~else  $ ~~~~~~~for ( int L = 'a' ; L <= 'z' ; L ++ )  $ ~~~~~~~~if ( res [ i + k ] != L ) {  $ ~~~~~~~~~ans [ i + k ] = isU [ i + k ] ? L - 'a' + 'A' : L ;  $ ~~~~~~~~~break ;  $ ~~~~~~~~}  $ ~~~~~~vis [ i + k ] = 1 ;  $ ~~~~~}  $ ~~~}  $ ~cout << ans << endl ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~int n ;  $ ~cin >> n ;  $ ~if ( n == 1 ) {  $ ~~cout << - 1 << endl ;  $ ~} else {  $ ~~cout << n << " " << n << endl ;  $ ~}  $ ~return 0 ;  $ }
int main ( ) {  $ ~int n , k , sub ;  $ ~string t ;  $ ~cin >> n >> k >> t ;  $ ~for ( int i = 0 ; i < n ; i ++ ) {  $ ~~if ( t . substr ( 0 , i ) == t . substr ( n - i , i ) ) sub = i ;  $ ~}  $ ~for ( int i = 1 ; i < k ; i ++ ) cout << t . substr ( 0 , n - sub ) ;  $ ~cout << t << endl ;  $ ~return 0 ;  $ }
const int N = 5e2 + 7 ;  $ const int xinc [ ] = { 0 , 0 , 1 , - 1 } ;  $ const int yinc [ ] = { 1 , - 1 , 0 , 0 } ;  $ int n , m , x , y ;  $ double a [ N ] , w , ans ;  $ void solve ( ) {  $ ~cout << fixed << setprecision ( 15 ) ;  $ ~cin >> n >> m ;  $ ~for ( int i = 1 ; i <= n ; i ++ ) cin >> a [ i ] ;  $ ~for ( int i = 0 ; i < m ; i ++ ) {  $ ~~cin >> x >> y >> w ;  $ ~~ans = max ( ans , ( a [ x ] + a [ y ] ) / w ) ;  $ ~}  $ ~cout << ans << '\n' ;  $ }  $ int main ( ) {  $ ~int t ;  $ ~t = 1 ;  $ ~while ( t -- ) solve ( ) ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~long double a ;  $ ~cin >> a ;  $ ~if ( a <= 127 )  $ ~~cout << "byte" << endl ;  $ ~else if ( a <= 32767 )  $ ~~cout << "short" << endl ;  $ ~else if ( a <= 2147483647 )  $ ~~cout << "int" << endl ;  $ ~else if ( a <= 9223372036854775807 )  $ ~~cout << "long" << endl ;  $ ~else  $ ~~cout << "BigInteger" << endl ;  $ ~return 0 ;  $ }
const int N = 3e2 + 10 , INF = 1e9 ;  $ int n , ans ;  $ string second ;  $ int main ( ) {  $ ~cin >> n >> second ;  $ ~for ( int i = 0 ; i < n ; i ++ )  $ ~~if ( second [ i ] == '<' )  $ ~~~ans ++ ;  $ ~~else  $ ~~~break ;  $ ~for ( int i = ( n - 1 ) ; i >= 0 ; i -- )  $ ~~if ( second [ i ] == '>' )  $ ~~~ans ++ ;  $ ~~else  $ ~~~break ;  $ ~cout << ans << '\n' ;  $ ~return 0 ;  $ }
const int M = 1e5 + 10 ;  $ const int N = 1000 ;  $ string cur ;  $ int ispal ( int x , int y ) {  $ ~if ( x / 10 == y % 10 ) {  $ ~~if ( x % 10 == y / 10 ) return 1 ;  $ ~}  $ ~return 0 ;  $ }  $ int main ( ) {  $ ~while ( cin >> cur ) {  $ ~~int h , m , ans = 0 ;  $ ~~h = ( cur [ 0 ] - '0' ) * 10 + ( cur [ 1 ] - '0' ) ;  $ ~~m = ( cur [ 3 ] - '0' ) * 10 + ( cur [ 4 ] - '0' ) ;  $ ~~while ( ! ispal ( h , m ) ) {  $ ~~~m ++ ;  $ ~~~ans ++ ;  $ ~~~if ( m == 60 ) {  $ ~~~~m = 0 ;  $ ~~~~h ++ ;  $ ~~~~if ( h == 24 ) h = 0 ;  $ ~~~}  $ ~~}  $ ~~cout << ans << endl ;  $ ~}  $ ~return 0 ;  $ }
int main ( ) {  $ ~int x , t , a , b , da , db ;  $ ~cin >> x >> t >> a >> b >> da >> db ;  $ ~for ( int i = 0 ; i < t ; ++ i ) {  $ ~~for ( int j = 0 ; j < t ; ++ j ) {  $ ~~~int pa = a - da * i ;  $ ~~~int pb = b - db * j ;  $ ~~~if ( pa + pb == x || pa == x || pb == x || 0 == x ) {  $ ~~~~cout << "YES" << '\n' ;  $ ~~~~return 0 ;  $ ~~~}  $ ~~}  $ ~}  $ ~cout << "NO" << '\n' ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~int N [ 2 ] ;  $ ~for ( int i = 0 ; i < 2 ; i ++ ) {  $ ~~char str [ 100 ] ;  $ ~~cin >> str ;  $ ~~if ( strcmp ( str , "monday" ) == 0 )  $ ~~~N [ i ] = 1 ;  $ ~~else if ( strcmp ( str , "tuesday" ) == 0 )  $ ~~~N [ i ] = 2 ;  $ ~~else if ( strcmp ( str , "wednesday" ) == 0 )  $ ~~~N [ i ] = 3 ;  $ ~~else if ( strcmp ( str , "thursday" ) == 0 )  $ ~~~N [ i ] = 4 ;  $ ~~else if ( strcmp ( str , "friday" ) == 0 )  $ ~~~N [ i ] = 5 ;  $ ~~else if ( strcmp ( str , "saturday" ) == 0 )  $ ~~~N [ i ] = 6 ;  $ ~~else if ( strcmp ( str , "sunday" ) == 0 )  $ ~~~N [ i ] = 7 ;  $ ~}  $ ~int arr [ 11 ] = { 3 , 0 , 3 , 2 , 3 , 2 , 3 , 3 , 2 , 3 , 2 } ;  $ ~int t = N [ 1 ] - N [ 0 ] ;  $ ~if ( t < 0 ) t += 7 ;  $ ~int flag = 0 ;  $ ~for ( int i = 0 ; i < 11 ; i ++ ) {  $ ~~if ( t == arr [ i ] ) flag = 1 ;  $ ~}  $ ~if ( flag )  $ ~~cout << "YES" << endl ;  $ ~else  $ ~~cout << "NO" << endl ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~int x [ 5 ] [ 5 ] ;  $ ~bool f = false ;  $ ~for ( int i = 1 ; i <= 4 ; i ++ ) {  $ ~~for ( int j = 1 ; j <= 4 ; j ++ ) { cin >> x [ i ] [ j ] ; }  $ ~}  $ ~for ( int i = 1 ; i <= 4 ; i ++ ) {  $ ~~if ( x [ i ] [ 4 ] ) {  $ ~~~for ( int j = 1 ; j <= 3 ; j ++ ) {  $ ~~~~if ( x [ i ] [ j ] ) f = true ;  $ ~~~}  $ ~~~for ( int j = 1 ; j <= 3 ; j ++ ) {  $ ~~~~int p = i + j ;  $ ~~~~if ( p > 4 ) p -= 4 ;  $ ~~~~if ( x [ p ] [ j ] ) f = true ;  $ ~~~}  $ ~~}  $ ~}  $ ~if ( f )  $ ~~cout << "YES" << endl ;  $ ~else  $ ~~cout << "NO" << endl ;  $ }
int main ( ) {  $ ~int a , b , s ;  $ ~cin >> a >> b >> s ;  $ ~a = abs ( a ) ;  $ ~b = abs ( b ) ;  $ ~if ( s < ( a + b ) || ( s - a - b ) % 2 == 1 ) {  $ ~~cout << "No" << endl ;  $ ~} else {  $ ~~cout << "Yes" << endl ;  $ ~}  $ ~return 0 ;  $ }
int main ( ) {  $ ~int n , t ;  $ ~cin >> n >> t ;  $ ~string s ;  $ ~cin >> s ;  $ ~int i = 0 ;  $ ~while ( i < n && s [ i ] != '.' ) { i ++ ; }  $ ~if ( i != n && t > 0 ) {  $ ~~int p = i ;  $ ~~i ++ ;  $ ~~while ( i < n && s [ i ] < '5' ) { i ++ ; }  $ ~~if ( i != n ) {  $ ~~~s = s . substr ( 0 , i ) ;  $ ~~~i -- ;  $ ~~~s [ i ] ++ ;  $ ~~~t -- ;  $ ~~~i -- ;  $ ~~~while ( i > p && s [ i + 1 ] > '4' && t > 0 ) {  $ ~~~~s [ i ] ++ ;  $ ~~~~s [ i + 1 ] = '0' ;  $ ~~~~t -- ;  $ ~~~~i -- ;  $ ~~~}  $ ~~~if ( s [ i + 1 ] == '/' ) {  $ ~~~~s = s . substr ( 0 , i + 1 ) ;  $ ~~~~while ( i >= 0 && s [ i ] == '9' ) {  $ ~~~~~s [ i ] = '0' ;  $ ~~~~~i -- ;  $ ~~~~}  $ ~~~~if ( i != - 1 ) {  $ ~~~~~s [ i ] ++ ;  $ ~~~~} else {  $ ~~~~~cout << 1 ;  $ ~~~~}  $ ~~~} else if ( i == p && s [ p + 1 ] > '4' && t > 0 ) {  $ ~~~~t -- ;  $ ~~~~s = s . substr ( 0 , i ) ;  $ ~~~~i -- ;  $ ~~~~while ( i >= 0 && s [ i ] == '9' ) {  $ ~~~~~s [ i ] = '0' ;  $ ~~~~~i -- ;  $ ~~~~}  $ ~~~~if ( i != - 1 ) {  $ ~~~~~s [ i ] ++ ;  $ ~~~~} else {  $ ~~~~~cout << 1 ;  $ ~~~~}  $ ~~~} else {  $ ~~~~s = s . substr ( 0 , i + 2 ) ;  $ ~~~}  $ ~~}  $ ~}  $ ~cout << s << '\n' ;  $ }
bool ok ( string t ) {  $ ~int msk = 0 ;  $ ~for ( int i = 0 ; i < int ( t . size ( ) ) ; ++ i ) {  $ ~~if ( isupper ( t [ i ] ) ) msk |= 1 ;  $ ~~if ( islower ( t [ i ] ) ) msk |= 2 ;  $ ~~if ( isdigit ( t [ i ] ) ) msk |= 4 ;  $ ~}  $ ~return msk == 7 ;  $ }  $ int main ( ) {  $ ~int t ;  $ ~string s ;  $ ~cin >> t ;  $ ~for ( int i = 0 ; i < t ; ++ i ) {  $ ~~cin >> s ;  $ ~~if ( ok ( s ) ) {  $ ~~~cout << s << endl ;  $ ~~~continue ;  $ ~~}  $ ~~bool fnd = false ;  $ ~~for ( int i = 0 ; i < int ( s . size ( ) ) ; ++ i ) {  $ ~~~string t = s ;  $ ~~~t [ i ] = '1' ;  $ ~~~if ( ok ( t ) ) {  $ ~~~~cout << t << endl ;  $ ~~~~fnd = true ;  $ ~~~~break ;  $ ~~~}  $ ~~~t [ i ] = 'a' ;  $ ~~~if ( ok ( t ) ) {  $ ~~~~cout << t << endl ;  $ ~~~~fnd = true ;  $ ~~~~break ;  $ ~~~}  $ ~~~t [ i ] = 'A' ;  $ ~~~if ( ok ( t ) ) {  $ ~~~~cout << t << endl ;  $ ~~~~fnd = true ;  $ ~~~~break ;  $ ~~~}  $ ~~}  $ ~~if ( fnd ) continue ;  $ ~~if ( isupper ( s [ 2 ] ) ) {  $ ~~~s [ 0 ] = 'a' ;  $ ~~~s [ 1 ] = '1' ;  $ ~~~cout << s << endl ;  $ ~~~continue ;  $ ~~}  $ ~~if ( islower ( s [ 2 ] ) ) {  $ ~~~s [ 0 ] = 'A' ;  $ ~~~s [ 1 ] = '1' ;  $ ~~~cout << s << endl ;  $ ~~~continue ;  $ ~~}  $ ~~if ( isdigit ( s [ 2 ] ) ) {  $ ~~~s [ 0 ] = 'a' ;  $ ~~~s [ 1 ] = 'A' ;  $ ~~~cout << s << endl ;  $ ~~~continue ;  $ ~~}  $ ~}  $ }
int main ( ) {  $ ~long long N , M , K ;  $ ~while ( cin >> N >> M >> K ) {  $ ~~long long ans = 0 ;  $ ~~ans = max ( N / ( K + 1 ) * M , M / ( K + 1 ) * N ) ;  $ ~~if ( K + 1 > N ) ans = max ( ans , M / ( K - N + 2 ) ) ;  $ ~~if ( K + 1 > M ) ans = max ( ans , N / ( K - M + 2 ) ) ;  $ ~~if ( K + 2 > M + N ) ans = - 1 ;  $ ~~cout << ans << endl ;  $ ~}  $ ~return 0 ;  $ }
char a [ 1204000 ] = { } ;  $ int main ( ) {  $ ~while ( gets ( a ) ) {  $ ~~int A [ 1204 ] = { } ;  $ ~~int n = 0 ;  $ ~~int r = 0 ;  $ ~~int flag = 0 ;  $ ~~int p = 0 ;  $ ~~for ( int i = 0 ; a [ i ] ; i ++ ) {  $ ~~~if ( a [ i ] == '?' ) {  $ ~~~~if ( ! flag ) {  $ ~~~~~A [ r ] = 1 ;  $ ~~~~~r ++ ;  $ ~~~~~p ++ ;  $ ~~~~}  $ ~~~~if ( flag ) {  $ ~~~~~A [ r ] = - 1 ;  $ ~~~~~r ++ ;  $ ~~~~~p -- ;  $ ~~~~}  $ ~~~}  $ ~~~if ( a [ i ] == '-' ) flag = 1 ;  $ ~~~if ( a [ i ] == '+' ) flag = 0 ;  $ ~~~if ( a [ i ] >= '0' && a [ i ] <= '9' ) { n = n * 10 + a [ i ] - '0' ; }  $ ~~}  $ ~~for ( int i = 0 ; i < r ; i ++ ) {  $ ~~~if ( A [ i ] < 0 ) {  $ ~~~~if ( p > n ) {  $ ~~~~~while ( 1 ) {  $ ~~~~~~if ( abs ( A [ i ] ) >= n || p == n ) { break ; }  $ ~~~~~~A [ i ] -- ;  $ ~~~~~~p -- ;  $ ~~~~~}  $ ~~~~}  $ ~~~} else if ( A [ i ] > 0 ) {  $ ~~~~if ( p < n ) {  $ ~~~~~while ( 1 ) {  $ ~~~~~~if ( ( A [ i ] >= n || p == n ) ) { break ; }  $ ~~~~~~A [ i ] ++ ;  $ ~~~~~~p ++ ;  $ ~~~~~}  $ ~~~~}  $ ~~~}  $ ~~}  $ ~~if ( p != n ) {  $ ~~~cout << "Impossible" << endl ;  $ ~~} else {  $ ~~~cout << "Possible" << endl ;  $ ~~~if ( A [ 0 ] > 0 ) {  $ ~~~~cout << A [ 0 ] ;  $ ~~~} else {  $ ~~~~cout << A [ 0 ] ;  $ ~~~}  $ ~~~for ( int i = 1 ; i < r ; i ++ ) {  $ ~~~~cout << " " ;  $ ~~~~if ( A [ i ] > 0 ) {  $ ~~~~~cout << "+" ;  $ ~~~~} else {  $ ~~~~~cout << "-" ;  $ ~~~~}  $ ~~~~cout << " " << abs ( A [ i ] ) ;  $ ~~~}  $ ~~~cout << " = " << n << endl ;  $ ~~}  $ ~}  $ ~return 0 ;  $ }
vector < long long > lucky ;  $ void backtrack ( long long x ) {  $ ~if ( x > 1e10 ) return ;  $ ~lucky . push_back ( x ) ;  $ ~backtrack ( x * 10 + 4 ) ;  $ ~backtrack ( x * 10 + 7 ) ;  $ }  $ int main ( ) {  $ ~long long ans = 0 ;  $ ~backtrack ( 0 ) ;  $ ~sort ( lucky . begin ( ) , lucky . end ( ) ) ;  $ ~int a , b ;  $ ~cin >> a >> b ;  $ ~for ( int i = 1 ; i < ( int ) lucky . size ( ) ; i ++ ) {  $ ~~int l , r , m ;  $ ~~l = a , r = b ;  $ ~~while ( l <= r ) {  $ ~~~m = ( l + r ) >> 1 ;  $ ~~~if ( m <= lucky [ i ] ) {  $ ~~~~ans += lucky [ i ] * ( m - l + 1 ) ;  $ ~~~~a = m + 1 ;  $ ~~~~i -- ;  $ ~~~~break ;  $ ~~~} else {  $ ~~~~r = m - 1 ;  $ ~~~}  $ ~~}  $ ~}  $ ~cout << ans << "\n" ;  $ ~return 0 ;  $ }
const int maxn = 105 ;  $ int a [ maxn ] ;  $ int b [ maxn ] ;  $ int vis [ maxn ] ;  $ int main ( ) {  $ ~int n ;  $ ~int num = 0 ;  $ ~cin >> n ;  $ ~for ( int i = 0 ; i < n ; i ++ ) { cin >> a [ i ] >> b [ i ] ; }  $ ~memset ( vis , 0 , sizeof ( vis ) ) ;  $ ~for ( int i = 0 ; i < n ; i ++ )  $ ~~for ( int j = 0 ; j < n ; j ++ ) {  $ ~~~if ( i != j && b [ i ] == a [ j ] ) vis [ j ] = 1 ;  $ ~~}  $ ~for ( int i = 0 ; i < n ; i ++ ) num += vis [ i ] ;  $ ~cout << n - num << endl ;  $ ~return 0 ;  $ }
long long a [ 100005 ] , b [ 100005 ] , c [ 100005 ] ;  $ int main ( ) {  $ ~long long n , sum , s ;  $ ~while ( cin >> n ) {  $ ~~sum = 0 ;  $ ~~s = 0 ;  $ ~~for ( int i = 0 ; i < n ; i ++ ) { cin >> a [ i ] ; }  $ ~~a [ n ] = 0 ;  $ ~~for ( int i = 0 ; i < n ; i ++ ) {  $ ~~~if ( ! ( i % 2 ) )  $ ~~~~b [ i ] = abs ( a [ i ] - a [ i + 1 ] ) ;  $ ~~~else  $ ~~~~b [ i ] = - abs ( a [ i ] - a [ i + 1 ] ) ;  $ ~~~c [ i ] = - b [ i ] ;  $ ~~}  $ ~~for ( int i = 0 ; i < n - 1 ; i ++ ) {  $ ~~~sum += b [ i ] ;  $ ~~~if ( sum < 0 ) sum = 0 ;  $ ~~~s = max ( sum , s ) ;  $ ~~}  $ ~~sum = 0 ;  $ ~~for ( int i = 0 ; i < n - 1 ; i ++ ) {  $ ~~~sum += c [ i ] ;  $ ~~~if ( sum < 0 ) sum = 0 ;  $ ~~~s = max ( sum , s ) ;  $ ~~}  $ ~~cout << s << endl ;  $ ~}  $ ~return 0 ;  $ }
const long long maxn = 1e5 + 8 ;  $ string t ;  $ int vis [ maxn ] ;  $ int main ( ) {  $ ~cin >> t ;  $ ~int len = t . size ( ) ;  $ ~if ( len <= 3 )  $ ~~puts ( "NO" ) ;  $ ~else {  $ ~~int a , b , c , d ;  $ ~~a = t . find ( "AB" ) ;  $ ~~b = t . find ( "BA" , a + 2 ) ;  $ ~~c = t . find ( "BA" ) ;  $ ~~d = t . find ( "AB" , c + 2 ) ;  $ ~~if ( ( a != - 1 && b != - 1 ) || ( c != - 1 && d != - 1 ) )  $ ~~~puts ( "YES" ) ;  $ ~~else  $ ~~~puts ( "NO" ) ;  $ ~}  $ ~return 0 ;  $ }
long long int p , q ;  $ long long int primes [ 2100000 ] ;  $ long long int pi [ 2100000 ] ;  $ long long int rub [ 2100000 ] ;  $ int ans ;  $ int inv ( int x ) {  $ ~int ret = 0 ;  $ ~while ( x != 0 ) {  $ ~~ret = ret * 10 + x % 10 ;  $ ~~x = x / 10 ;  $ ~}  $ ~return ret ;  $ }  $ int chk ( int x ) {  $ ~if ( inv ( x ) == x ) { return 1 ; }  $ ~return 0 ;  $ }  $ int main ( ) {  $ ~cin >> p >> q ;  $ ~int i , j ;  $ ~for ( i = 2 ; i <= 2050000 ; i ++ ) { primes [ i ] = 1 ; }  $ ~for ( i = 2 ; i <= 2050000 ; i ++ ) {  $ ~~if ( primes [ i ] == 1 ) {  $ ~~~for ( j = 2 ; i * j <= 2060000 ; j ++ ) { primes [ i * j ] = 0 ; }  $ ~~}  $ ~}  $ ~for ( i = 2 ; i <= 2050000 ; i ++ ) { pi [ i ] = pi [ i - 1 ] + primes [ i ] ; }  $ ~for ( i = 1 ; i <= 2050000 ; i ++ ) { rub [ i ] = rub [ i - 1 ] + chk ( i ) ; }  $ ~for ( i = 2050000 ; i >= 1 ; i -- ) {  $ ~~if ( q * pi [ i ] <= p * rub [ i ] ) {  $ ~~~cout << i << endl ;  $ ~~~return 0 ;  $ ~~}  $ ~}  $ }
int main ( ) {  $ ~vector < int > vetor ;  $ ~int n , i , colunas ;  $ ~cin >> n ;  $ ~for ( i = 0 ; i < n ; i ++ ) {  $ ~~cin >> colunas ;  $ ~~vetor . push_back ( colunas ) ;  $ ~}  $ ~sort ( vetor . begin ( ) , vetor . end ( ) ) ;  $ ~for ( i = 0 ; i < n - 1 ; i ++ ) { cout << vetor [ i ] << " " ; }  $ ~cout << vetor [ n - 1 ] << endl ;  $ ~return 0 ;  $ }
const long long int MAXN = 1e4 + 5 ;  $ const long long int MINN = 1e2 ;  $ const int inf = ( 1e6 + 5 ) ;  $ int it = 0 , k , k1 ;  $ long long a [ MAXN ] , sum ;  $ void create ( long long s , int l ) {  $ ~if ( l > 0 ) a [ it ++ ] = s ;  $ ~if ( l < 10 ) create ( s * 10 + 4 , l + 1 ) ;  $ ~if ( l < 10 ) create ( s * 10 + 7 , l + 1 ) ;  $ ~return ;  $ }  $ int main ( ) {  $ ~create ( 0 , 0 ) ;  $ ~sort ( a , a + it ) ;  $ ~int l , r ;  $ ~cin >> l >> r ;  $ ~for ( int i = 0 ; i <= ( it - 2 ) ; ++ i ) {  $ ~~if ( a [ i ] >= l ) {  $ ~~~k = i ;  $ ~~~break ;  $ ~~}  $ ~}  $ ~for ( int i = 0 ; i <= ( it - 2 ) ; ++ i ) {  $ ~~if ( a [ i ] >= r ) {  $ ~~~k1 = i ;  $ ~~~break ;  $ ~~}  $ ~}  $ ~while ( k != k1 ) {  $ ~~sum += a [ k ] * ( a [ k ] - l + 1 ) ;  $ ~~l = a [ k ] + 1 ;  $ ~~++ k ;  $ ~}  $ ~sum += ( r - l + 1 ) * a [ k1 ] ;  $ ~cout << sum << endl ;  $ ~return 0 ;  $ }
string S ;  $ int N , M , A , B , sum , x , y , K ;  $ bool cek [ 26 ] ;  $ int main ( ) {  $ ~cin >> N >> A >> B ;  $ ~if ( B < N )  $ ~~cout << "NO\n" ;  $ ~else if ( B == N + 1 )  $ ~~cout << "NO\n" ;  $ ~else if ( ( B - N ) % A == 0 || ( B - N ) % A == 1 )  $ ~~cout << "YES\n" ;  $ ~else  $ ~~cout << "NO\n" ;  $ }
long long dp [ 100005 ] ;  $ int main ( ) {  $ ~int n ;  $ ~cin >> n ;  $ ~long long a [ n ] ;  $ ~long long b [ n ] ;  $ ~long long c [ n ] ;  $ ~for ( int i = 0 ; i < n ; i ++ ) { cin >> a [ i ] ; }  $ ~for ( int i = 0 ; i < n - 1 ; i ++ ) {  $ ~~b [ i ] = abs ( a [ i + 1 ] - a [ i ] ) ;  $ ~~if ( i % 2 == 1 ) b [ i ] *= - 1 ;  $ ~}  $ ~for ( int i = 0 ; i < n - 1 ; i ++ ) {  $ ~~c [ i ] = abs ( a [ i + 1 ] - a [ i ] ) ;  $ ~~if ( i % 2 == 0 ) c [ i ] *= - 1 ;  $ ~}  $ ~long long ans = b [ 0 ] ;  $ ~long long minimum = b [ 0 ] ;  $ ~for ( int i = 1 ; i < n - 1 ; i ++ ) {  $ ~~b [ i ] += b [ i - 1 ] ;  $ ~~ans = max ( ans , b [ i ] - minimum ) ;  $ ~~ans = max ( ans , b [ i ] ) ;  $ ~~minimum = min ( minimum , b [ i ] ) ;  $ ~}  $ ~minimum = c [ 0 ] ;  $ ~for ( int i = 1 ; i < n - 1 ; i ++ ) {  $ ~~c [ i ] += c [ i - 1 ] ;  $ ~~ans = max ( ans , c [ i ] - minimum ) ;  $ ~~ans = max ( ans , c [ i ] ) ;  $ ~~minimum = min ( minimum , c [ i ] ) ;  $ ~}  $ ~cout << ans << endl ;  $ ~return 0 ;  $ }
int v [ 110 ] [ 110 ] , visited [ 110 ] = { 0 } , k [ 110 ] ;  $ int n , m ;  $ void dfs ( int a ) {  $ ~visited [ a ] = 1 ;  $ ~for ( int i = 1 ; i <= k [ a ] ; i ++ ) {  $ ~~for ( int j = 1 ; j <= n ; j ++ ) {  $ ~~~if ( visited [ j ] == 0 )  $ ~~~~for ( int p = 1 ; p <= k [ j ] ; p ++ )  $ ~~~~~if ( v [ j ] [ p ] == v [ a ] [ i ] ) dfs ( j ) ;  $ ~~}  $ ~}  $ }  $ int main ( ) {  $ ~cin >> n >> m ;  $ ~int sum = 0 , ans = 0 ;  $ ~int i , j ;  $ ~for ( i = 1 ; i <= n ; i ++ ) {  $ ~~cin >> k [ i ] ;  $ ~~for ( j = 1 ; j <= k [ i ] ; j ++ ) {  $ ~~~cin >> v [ i ] [ j ] ;  $ ~~~sum = sum + v [ i ] [ j ] ;  $ ~~}  $ ~}  $ ~if ( sum == 0 ) {  $ ~~cout << n << endl ;  $ ~~return 0 ;  $ ~}  $ ~for ( i = 1 ; i <= n ; i ++ ) {  $ ~~if ( visited [ i ] == 0 ) {  $ ~~~ans ++ ;  $ ~~~dfs ( i ) ;  $ ~~}  $ ~}  $ ~cout << ans - 1 << endl ;  $ ~return 0 ;  $ }
const int M = 1000 + 5 ;  $ int main ( ) {  $ ~int n ;  $ ~int x1 , y1 , x2 , y2 ;  $ ~cin >> n >> x1 >> y1 >> x2 >> y2 ;  $ ~int disx = x1 > x2 ? x1 - x2 : x2 - x1 ;  $ ~int disy = y1 > y2 ? y1 - y2 : y2 - y1 ;  $ ~int dis = disx + disy ;  $ ~if ( disx == n ) { dis = y1 + y2 + n ; }  $ ~if ( disy == n ) { dis = x1 + x2 + n ; }  $ ~if ( dis <= 2 * n ) {  $ ~~cout << dis << endl ;  $ ~} else {  $ ~~cout << 4 * n - dis << endl ;  $ ~}  $ ~return 0 ;  $ }
int main ( ) {  $ ~int n ;  $ ~cin >> n ;  $ ~map < int , int > d ;  $ ~int q , w , a = 0 , s = 0 , z = 0 , x = 0 ;  $ ~for ( int i = 0 ; i < n ; i ++ ) {  $ ~~cin >> q >> w ;  $ ~~if ( q < 0 ) {  $ ~~~a = a + 1 ;  $ ~~~s = s + w ;  $ ~~}  $ ~~if ( q > 0 ) {  $ ~~~z = z + 1 ;  $ ~~~x = x + w ;  $ ~~}  $ ~~d . insert ( pair < int , int > ( q , w ) ) ;  $ ~}  $ ~d . insert ( pair < int , int > ( 0 , 0 ) ) ;  $ ~int y = a ;  $ ~int sum = 0 ;  $ ~if ( a == z ) {  $ ~~cout << s + x << endl ;  $ ~~return 0 ;  $ ~} else if ( a < z ) {  $ ~~sum = sum + s ;  $ ~~int h = a + 1 ;  $ ~~for ( map < int , int > : : iterator b = d . find ( 0 ) ; b != d . end ( ) ; b ++ ) {  $ ~~~if ( h >= 0 ) {  $ ~~~~int g = b -> second ;  $ ~~~~sum = sum + g ;  $ ~~~} else  $ ~~~~break ;  $ ~~~-- h ;  $ ~~}  $ ~~cout << sum << endl ;  $ ~~return 0 ;  $ ~} else {  $ ~~sum = sum + x ;  $ ~~int h = z + 1 ;  $ ~~for ( map < int , int > : : iterator b = d . find ( 0 ) ; b != d . end ( ) ; b -- ) {  $ ~~~if ( h >= 0 ) {  $ ~~~~int g = b -> second ;  $ ~~~~sum = sum + g ;  $ ~~~} else  $ ~~~~break ;  $ ~~~-- h ;  $ ~~}  $ ~~cout << sum << endl ;  $ ~~return 0 ;  $ ~}  $ }
const int maxn = 100000 + 5 ;  $ int a [ maxn ] ;  $ int main ( ) {  $ ~int n , m , k ;  $ ~cin >> n ;  $ ~cin >> m ;  $ ~cin >> k ;  $ ~int i ;  $ ~for ( i = 0 ; i < n ; i ++ ) cin >> a [ i ] ;  $ ~if ( n % 2 == 0 ) {  $ ~~cout << 0 << endl ;  $ ~~return 0 ;  $ ~}  $ ~long long ans = 0 ;  $ ~int nn = n / 2 + 1 ;  $ ~if ( nn > m )  $ ~~ans = 0 ;  $ ~else {  $ ~~ans = a [ 0 ] ;  $ ~~for ( int i = 0 ; i < n ; i ++ )  $ ~~~if ( ( i & 1 ) == 0 ) ans = ( ans < a [ i ] ? ans : a [ i ] ) ;  $ ~~long long int aa ;  $ ~~aa = ( long long int ) m / nn * k ;  $ ~~ans = min ( ans , aa ) ;  $ ~}  $ ~cout << ans << endl ;  $ ~return 0 ;  $ }
const int a [ ] = { 8 , 4 , 2 , 6 } ;  $ int main ( ) {  $ ~int n ;  $ ~cin >> n ;  $ ~if ( n != 0 )  $ ~~cout << a [ ( n - 1 ) % 4 ] << endl ;  $ ~else  $ ~~cout << 1 << endl ;  $ ~return 0 ;  $ }
const int maxn = 101000 ;  $ const int mo = 1e9 + 7 ;  $ long long ans ;  $ int f , n , m , h ;  $ int a [ maxn ] , c [ maxn ] , k , sum [ maxn ] ;  $ int b [ maxn ] , flag , tmp ;  $ char s [ maxn ] ;  $ int main ( ) {  $ ~int T ;  $ ~int cas = 1 ;  $ ~while ( cin >> n >> m ) {  $ ~~n = n * 2 + 1 ;  $ ~~ans = 0 ;  $ ~~for ( int i = 0 ; i < n ; i ++ ) { cin >> a [ i ] ; }  $ ~~cout << a [ 0 ] << " " ;  $ ~~for ( int i = 1 ; i < n - 1 ; i ++ ) {  $ ~~~if ( m && a [ i ] > a [ i - 1 ] + 1 && a [ i ] > a [ i + 1 ] + 1 ) {  $ ~~~~cout << a [ i ] - 1 << " " ;  $ ~~~~m -- ;  $ ~~~} else  $ ~~~~cout << a [ i ] << " " ;  $ ~~}  $ ~~cout << a [ n - 1 ] << endl ;  $ ~}  $ ~return 0 ;  $ }
int main ( ) {  $ ~long long n , m , k , l , tmp , tmp2 ;  $ ~cin >> n >> m >> k >> l ;  $ ~if ( k + l > n ) return cout << "-1\n" , 0 ;  $ ~tmp2 = ( ( l + k ) / m ) + ( ( l + k ) % m != 0 ) ;  $ ~if ( m * tmp2 > n )  $ ~~cout << "-1\n" ;  $ ~else  $ ~~cout << tmp2 << "\n" ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~int n ;  $ ~int a = 0 ;  $ ~cin >> n ;  $ ~if ( n % 2 == 1 ) {  $ ~~n -= 3 ;  $ ~~n /= 2 ;  $ ~~a += n + 1 ;  $ ~~cout << a << "\n" ;  $ ~~for ( int i = 1 ; i < a ; i ++ ) { cout << 2 << " " ; }  $ ~~cout << 3 << "\n" ;  $ ~} else {  $ ~~a += n / 2 ;  $ ~~cout << a << "\n" ;  $ ~~for ( int i = 1 ; i <= a ; i ++ ) {  $ ~~~if ( i == a ) {  $ ~~~~cout << 2 << "\n" ;  $ ~~~} else {  $ ~~~~cout << 2 << " " ;  $ ~~~}  $ ~~}  $ ~}  $ ~return 0 ;  $ }
const int M = 100 + 5 ;  $ int main ( ) {  $ ~string s ;  $ ~cin >> s ;  $ ~for ( int i = 0 ; i < s . length ( ) ; i ++ ) {  $ ~~if ( s [ i ] == ':' ) { s [ i ] = ' ' ; }  $ ~}  $ ~istringstream ss ( s ) ;  $ ~int h , m ;  $ ~ss >> h >> m ;  $ ~if ( s [ 1 ] >= '0' && s [ 1 ] <= '5' ) {  $ ~~int pm = ( s [ 1 ] - '0' ) * 10 + s [ 0 ] - '0' ;  $ ~~if ( m < pm ) {  $ ~~~if ( h / 10 == 0 ) {  $ ~~~~cout << "0" << h << ":" ;  $ ~~~} else {  $ ~~~~cout << h << ":" ;  $ ~~~}  $ ~~~if ( pm / 10 == 0 ) {  $ ~~~~cout << "0" << pm << endl ;  $ ~~~} else {  $ ~~~~cout << pm << endl ;  $ ~~~}  $ ~~} else {  $ ~~~h = ( h + 1 ) % 24 ;  $ ~~~while ( h % 10 > 5 ) { h = ( h + 1 ) % 24 ; }  $ ~~~int pm = ( h % 10 ) * 10 + h / 10 ;  $ ~~~if ( h / 10 == 0 ) {  $ ~~~~cout << "0" << h << ":" ;  $ ~~~} else {  $ ~~~~cout << h << ":" ;  $ ~~~}  $ ~~~if ( pm / 10 == 0 ) {  $ ~~~~cout << "0" << pm << endl ;  $ ~~~} else {  $ ~~~~cout << pm << endl ;  $ ~~~}  $ ~~}  $ ~} else {  $ ~~h = ( h + 1 ) % 24 ;  $ ~~while ( h % 10 > 5 ) { h = ( h + 1 ) % 24 ; }  $ ~~int pm = ( h % 10 ) * 10 + h / 10 ;  $ ~~if ( h / 10 == 0 ) {  $ ~~~cout << "0" << h << ":" ;  $ ~~} else {  $ ~~~cout << h << ":" ;  $ ~~}  $ ~~if ( pm / 10 == 0 ) {  $ ~~~cout << "0" << pm << endl ;  $ ~~} else {  $ ~~~cout << pm << endl ;  $ ~~}  $ ~}  $ ~return 0 ;  $ }
int n ;  $ int main ( ) {  $ ~while ( cin >> n ) {  $ ~~if ( n & 1 ) {  $ ~~~n -= 3 ;  $ ~~~n >> = 1 ;  $ ~~~cout << n + 1 << endl ;  $ ~~~for ( int i = 1 ; i <= n ; ++ i ) { cout << "2 " ; }  $ ~~~cout << "3" << endl ;  $ ~~} else {  $ ~~~n >> = 1 ;  $ ~~~cout << n << endl ;  $ ~~~for ( int i = 1 ; i < n ; ++ i ) { cout << "2 " ; }  $ ~~~cout << "2" << endl ;  $ ~~}  $ ~}  $ ~return 0 ;  $ }
int main ( ) {  $ ~long long n , count = 0 ;  $ ~cin >> n ;  $ ~const int max_i = 2e5 ;  $ ~int counter = 0 ;  $ ~tuple < int , int , int > data [ max_i + 9 ] ;  $ ~for ( int i = 0 ; i < n ; i ++ ) {  $ ~~long long k , a0 , x , y , m , t = 0 , a = 0 ;  $ ~~cin >> k >> a0 >> x >> y >> m ;  $ ~~for ( int j = 0 ; j < k ; j ++ ) {  $ ~~~if ( counter <= max_i ) { data [ counter ++ ] = make_tuple ( t , a0 , i ) ; }  $ ~~~a = ( a0 * x + y ) % m ;  $ ~~~if ( a < a0 && j != k - 1 ) { t ++ ; }  $ ~~~a0 = a ;  $ ~~}  $ ~~count = max ( count , t ) ;  $ ~}  $ ~cout << count << endl ;  $ ~if ( counter <= max_i ) {  $ ~~sort ( data , data + counter ) ;  $ ~~for ( int i = 0 ; i < counter ; i ++ ) { cout << get < 1 > ( data [ i ] ) << " " << get < 2 > ( data [ i ] ) + 1 << endl ; }  $ ~}  $ }
int main ( ) {  $ ~string s ;  $ ~cin >> s ;  $ ~int len = s . length ( ) ;  $ ~int i = 0 ;  $ ~int f = 1 ;  $ ~for ( int i = 0 ; i < len ; i ++ )  $ ~~if ( s [ i ] != 'a' ) f = 0 ;  $ ~if ( f ) {  $ ~~s [ len - 1 ] = 'z' ;  $ ~~cout << s << endl ;  $ ~~return 0 ;  $ ~}  $ ~while ( s [ i ] == 'a' && i < len ) cout << s [ i ] , i ++ ;  $ ~int flag = 0 ;  $ ~for ( ; i < len ; i ++ ) {  $ ~~if ( s [ i ] == 'a' ) flag = 1 ;  $ ~~if ( flag )  $ ~~~cout << s [ i ] ;  $ ~~else  $ ~~~cout << ( char ) ( s [ i ] - 1 ) ;  $ ~}  $ ~cout << endl ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~string str ;  $ ~int i , j ;  $ ~cin >> str ;  $ ~for ( i = 0 ; i < str . size ( ) ; i ++ ) {  $ ~~if ( str [ i ] != 'a' ) { break ; }  $ ~}  $ ~for ( j = i ; j < str . size ( ) ; j ++ ) {  $ ~~if ( str [ j ] == 'a' ) { break ; }  $ ~~str [ j ] -- ;  $ ~}  $ ~if ( i == str . size ( ) ) { str [ str . size ( ) - 1 ] = 'z' ; }  $ ~cout << str << endl ;  $ ~return 0 ;  $ }
long long int n ;  $ long long int ini , med , fin , test ;  $ int main ( ) {  $ ~cin >> n ;  $ ~ini = 1 ;  $ ~fin = ( - 1 + sqrt ( 1 + 8 * n ) ) / 2 ;  $ ~while ( ini <= fin ) {  $ ~~test = ( ( ( ini * ( ini + 1 ) ) / 2 ) + ( ( fin * ( fin + 1 ) ) / 2 ) ) ;  $ ~~if ( test == n ) break ;  $ ~~if ( test < n )  $ ~~~ini ++ ;  $ ~~else  $ ~~~fin -- ;  $ ~}  $ ~if ( ini <= fin )  $ ~~cout << "YES\n" ;  $ ~else  $ ~~cout << "NO\n" ;  $ ~return 0 ;  $ }
const long long mod = 1e9 + 7 ;  $ long long n , p ;  $ long long in [ 1005 ] , out [ 1005 ] , child [ 1005 ] , dia [ 1005 ] ;  $ int main ( ) {  $ ~cin >> n >> p ;  $ ~long long x , y , z ;  $ ~while ( p -- ) {  $ ~~cin >> x >> y >> z ;  $ ~~in [ y ] ++ ;  $ ~~out [ x ] ++ ;  $ ~~child [ x ] = y ;  $ ~~dia [ x ] = z ;  $ ~}  $ ~long long cnt = 0 ;  $ ~for ( long long i = 1 ; i <= n ; i ++ ) {  $ ~~if ( ! in [ i ] and out [ i ] ) { cnt ++ ; }  $ ~}  $ ~cout << cnt << "\n" ;  $ ~long long idx , c ;  $ ~for ( long long i = 1 ; i <= n ; i ++ ) {  $ ~~if ( ! in [ i ] and out [ i ] ) {  $ ~~~idx = i ;  $ ~~~c = 1e18 ;  $ ~~~while ( out [ idx ] ) {  $ ~~~~c = min ( c , dia [ idx ] ) ;  $ ~~~~idx = child [ idx ] ;  $ ~~~}  $ ~~~cout << i << " " << idx << " " << c << "\n" ;  $ ~~}  $ ~}  $ ~return 0 ;  $ }
const int base = 1000 * 1000 * 1000 ;  $ const int N = ( int ) 2e5 + 2 ;  $ const int INF = ( int ) 1e9 + 7 ;  $ const long double pi = acos ( - 1 ) ;  $ const long long linf = ( long long ) 1e18 ;  $ string s ;  $ int k ;  $ int main ( ) {  $ ~cin >> s >> k ;  $ ~if ( ( ( int ) ( s ) . size ( ) ) % k != 0 ) return cout << "NO\n" , 0 ;  $ ~int kol = 0 ;  $ ~for ( int i = 0 ; i < ( ( int ) ( s ) . size ( ) ) ; i += ( ( int ) ( s ) . size ( ) ) / k ) {  $ ~~string cur ;  $ ~~for ( int j = i ; j <= i + ( ( ( int ) ( s ) . size ( ) ) / k ) - 1 ; ++ j ) { cur += s [ j ] ; }  $ ~~string rs = cur ;  $ ~~reverse ( rs . begin ( ) , rs . end ( ) ) ;  $ ~~if ( cur == rs ) { kol ++ ; }  $ ~}  $ ~if ( kol == k ) {  $ ~~cout << "YES\n" ;  $ ~} else {  $ ~~cout << "NO\n" ;  $ ~}  $ ~return 0 ;  $ }
int main ( ) {  $ ~int h , m , count = 0 ;  $ ~char c ;  $ ~cin >> h >> c >> m ;  $ ~while ( 1 ) {  $ ~~if ( h / 10 == m % 10 && m / 10 == h % 10 ) break ;  $ ~~m ++ ;  $ ~~if ( m == 60 ) h ++ , m = 0 ;  $ ~~if ( h > 23 ) h = 0 ;  $ ~~count ++ ;  $ ~}  $ ~cout << count << endl ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~int temp ;  $ ~map < int , int > c ;  $ ~map < int , int > m ;  $ ~cin >> temp ;  $ ~m [ 1 ] += temp ;  $ ~m [ 4 ] += temp ;  $ ~cin >> temp ;  $ ~m [ 1 ] += temp ;  $ ~m [ 3 ] += temp ;  $ ~cin >> temp ;  $ ~m [ 1 ] += temp ;  $ ~m [ 2 ] += temp ;  $ ~cin >> temp ;  $ ~c [ 1 ] += temp ;  $ ~cin >> temp ;  $ ~m [ 1 ] += temp ;  $ ~m [ 2 ] += temp ;  $ ~cin >> temp ;  $ ~m [ 2 ] += temp ;  $ ~m [ 4 ] += temp ;  $ ~cin >> temp ;  $ ~m [ 3 ] += temp ;  $ ~m [ 2 ] += temp ;  $ ~cin >> temp ;  $ ~c [ 2 ] += temp ;  $ ~cin >> temp ;  $ ~m [ 3 ] += temp ;  $ ~m [ 2 ] += temp ;  $ ~cin >> temp ;  $ ~m [ 1 ] += temp ;  $ ~m [ 3 ] += temp ;  $ ~cin >> temp ;  $ ~m [ 3 ] += temp ;  $ ~m [ 4 ] += temp ;  $ ~cin >> temp ;  $ ~c [ 3 ] += temp ;  $ ~cin >> temp ;  $ ~m [ 3 ] += temp ;  $ ~m [ 4 ] += temp ;  $ ~cin >> temp ;  $ ~m [ 4 ] += temp ;  $ ~m [ 2 ] += temp ;  $ ~cin >> temp ;  $ ~m [ 1 ] += temp ;  $ ~m [ 4 ] += temp ;  $ ~cin >> temp ;  $ ~c [ 4 ] += temp ;  $ ~int flag = 0 ;  $ ~if ( c [ 1 ] > 0 ) {  $ ~~if ( m [ 1 ] > 0 ) flag = 1 ;  $ ~}  $ ~if ( c [ 2 ] > 0 ) {  $ ~~if ( m [ 2 ] > 0 ) flag = 1 ;  $ ~}  $ ~if ( c [ 3 ] > 0 ) {  $ ~~if ( m [ 3 ] > 0 ) flag = 1 ;  $ ~}  $ ~if ( c [ 4 ] > 0 ) {  $ ~~if ( m [ 4 ] > 0 ) flag = 1 ;  $ ~}  $ ~if ( flag == 0 )  $ ~~cout << "NO" << endl ;  $ ~else  $ ~~cout << "YES" << endl ;  $ ~return 0 ;  $ }
vector < string > fs ;  $ long long int valid [ 200 ] ;  $ int main ( ) {  $ ~long long int n , in ;  $ ~cin >> n ;  $ ~string h , w , k ;  $ ~char ch ;  $ ~for ( int i = 0 ; i < n ; i ++ ) {  $ ~~cin >> h ;  $ ~~transform ( h . begin ( ) , h . end ( ) , h . begin ( ) , : : tolower ) ;  $ ~~fs . push_back ( h ) ;  $ ~}  $ ~cin >> w >> ch ;  $ ~if ( ch - 'a' >= 0 && 'z' - ch >= 0 ) {  $ ~~in = ch - 'a' ;  $ ~} else {  $ ~~in = ch = 'A' ;  $ ~}  $ ~k = w ;  $ ~transform ( w . begin ( ) , w . end ( ) , w . begin ( ) , : : tolower ) ;  $ ~for ( int i = 0 ; i < n ; i ++ ) {  $ ~~long long int z = fs [ i ] . length ( ) ;  $ ~~for ( int j = 0 ; j < w . length ( ) ; j ++ ) {  $ ~~~string temp = "" ;  $ ~~~for ( int k = j ; k < j + z ; k ++ ) temp += w [ k ] ;  $ ~~~if ( temp == fs [ i ] )  $ ~~~~for ( int k = j ; k < j + z ; k ++ ) valid [ k ] = 1 ;  $ ~~}  $ ~}  $ ~string res = "" ;  $ ~for ( int i = 0 ; i < w . length ( ) ; i ++ ) {  $ ~~if ( valid [ i ] ) {  $ ~~~if ( k [ i ] >= 'a' && k [ i ] <= 'z' ) {  $ ~~~~if ( k [ i ] - 'a' != in )  $ ~~~~~res += 'a' + in ;  $ ~~~~else {  $ ~~~~~if ( ch > 'a' && ch <= 'z' ) {  $ ~~~~~~res += 'a' ;  $ ~~~~~} else if ( ch == 'a' )  $ ~~~~~~res += 'b' ;  $ ~~~~~else if ( ch > 'A' && ch <= 'Z' ) {  $ ~~~~~~res += 'a' ;  $ ~~~~~} else if ( ch == 'A' )  $ ~~~~~~res += 'b' ;  $ ~~~~}  $ ~~~} else {  $ ~~~~if ( k [ i ] - 'A' != in )  $ ~~~~~res += 'A' + in ;  $ ~~~~else {  $ ~~~~~if ( ch > 'A' && ch <= 'Z' ) {  $ ~~~~~~res += 'A' ;  $ ~~~~~} else if ( ch == 'A' )  $ ~~~~~~res += 'B' ;  $ ~~~~~else if ( ch > 'a' && ch <= 'z' ) {  $ ~~~~~~res += 'A' ;  $ ~~~~~} else if ( ch == 'a' )  $ ~~~~~~res += 'B' ;  $ ~~~~}  $ ~~~}  $ ~~} else  $ ~~~res += k [ i ] ;  $ ~}  $ ~cout << res << endl ;  $ ~return 0 ;  $ }
int hor [ ] = { 0 , 1 , 2 , 3 , 4 , 5 , 10 , 11 , 12 , 13 , 14 , 15 , 20 , 21 , 22 , 23 } ;  $ int mie [ ] = { 0 , 10 , 20 , 30 , 40 , 50 , 1 , 11 , 21 , 31 , 41 , 51 , 2 , 12 , 22 , 32 } ;  $ int main ( ) {  $ ~char maohao ;  $ ~int h , m ;  $ ~cin >> h >> maohao >> m ;  $ ~for ( int i = 0 ; i < 16 ; i ++ ) {  $ ~~if ( ( hor [ i ] == h && mie [ i ] > m ) || hor [ i ] > h ) {  $ ~~~if ( hor [ i ] < 10 ) cout << "0" ;  $ ~~~cout << hor [ i ] << ":" ;  $ ~~~if ( mie [ i ] < 10 ) cout << "0" ;  $ ~~~cout << mie [ i ] << endl ;  $ ~~~return 0 ;  $ ~~}  $ ~}  $ ~cout << "00:00" << endl ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~int t ;  $ ~cin >> t ;  $ ~int x [ 1000020 ] ;  $ ~for ( int i = 0 ; i < 1000020 ; i ++ ) x [ i ] = 0 ;  $ ~for ( int i = 0 ; i < t ; i ++ ) {  $ ~~int temp ;  $ ~~cin >> temp ;  $ ~~x [ temp ] ++ ;  $ ~}  $ ~int sum = 0 ;  $ ~for ( int i = 0 ; i < 1000020 ; i ++ ) {  $ ~~x [ i + 1 ] += ( x [ i ] >> 1 ) ;  $ ~~x [ i ] = ( x [ i ] & 1 ) ;  $ ~}  $ ~for ( int i = 0 ; i < 1000020 ; i ++ ) sum += x [ i ] ;  $ ~cout << sum << endl ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~int i , j , k , m , n , k0 = 0 , k1 = 0 ;  $ ~char s [ 1000 ] ;  $ ~cin >> n ;  $ ~cin >> s ;  $ ~for ( i = 0 ; i < n ; i ++ ) {  $ ~~if ( s [ i ] == '0' ) k0 ++ ;  $ ~~if ( s [ i ] == '1' ) k1 ++ ;  $ ~}  $ ~if ( k1 > 0 ) {  $ ~~cout << 1 ;  $ ~~for ( i = 0 ; i < k0 ; i ++ ) cout << 0 ;  $ ~~cout << endl ;  $ ~} else  $ ~~cout << 0 << endl ;  $ ~return 0 ;  $ }
long long gcd1 ( long long a , long long b ) {  $ ~if ( a == 0 ) return b ;  $ ~return gcd1 ( b % a , a ) ;  $ }  $ long long modx ( long long base , long long ex ) {  $ ~long long ans = 1 LL , val = base ;  $ ~while ( ex > 0 LL ) {  $ ~~if ( ex & 1 LL ) ans = ( ans * val ) % 1000000009 LL ;  $ ~~val = ( val * val ) % 1000000009 LL ;  $ ~~ex = ex >> 1 LL ;  $ ~}  $ ~return ans ;  $ }  $ const int maxn = 1e5 + 10 ;  $ bool visit [ maxn ] , visit1 [ maxn ] ;  $ int n , m , x , y , a [ maxn ] ;  $ bool D [ maxn ] , P [ maxn ] ;  $ vector < int > adj [ maxn ] , v [ maxn ] ;  $ void dfs ( int start ) {  $ ~visit [ start ] = true ;  $ ~for ( int i = 0 ; i < adj [ start ] . size ( ) ; i ++ ) {  $ ~~int pt = adj [ start ] [ i ] ;  $ ~~if ( ! visit [ pt ] ) dfs ( pt ) ;  $ ~}  $ }  $ void dfs2 ( int start ) {  $ ~visit1 [ start ] = true ;  $ ~for ( int i = 0 ; i < v [ start ] . size ( ) ; i ++ ) {  $ ~~int pt = v [ start ] [ i ] ;  $ ~~if ( ! visit1 [ pt ] ) dfs2 ( pt ) ;  $ ~}  $ }  $ int main ( ) {  $ ~cin >> n >> m ;  $ ~for ( int i = 1 ; i <= n ; i ++ ) cin >> a [ i ] ;  $ ~for ( int i = 1 ; i <= m ; i ++ ) {  $ ~~cin >> x >> y ;  $ ~~adj [ x ] . push_back ( y ) ;  $ ~~if ( a [ x ] != 1 && a [ y ] != 1 ) v [ y ] . push_back ( x ) ;  $ ~}  $ ~for ( int i = 1 ; i <= n ; i ++ ) {  $ ~~if ( ! visit [ i ] && a [ i ] == 1 ) dfs ( i ) ;  $ ~}  $ ~for ( int i = 1 ; i <= n ; i ++ ) {  $ ~~if ( ! visit1 [ i ] && a [ i ] == 2 ) dfs2 ( i ) ;  $ ~}  $ ~for ( int i = 1 ; i <= n ; i ++ ) {  $ ~~if ( a [ i ] != 1 ) continue ;  $ ~~for ( int j = 0 ; j < adj [ i ] . size ( ) ; j ++ ) {  $ ~~~int pt = adj [ i ] [ j ] ;  $ ~~~if ( visit1 [ pt ] && a [ pt ] != 1 ) visit1 [ i ] = true ;  $ ~~}  $ ~}  $ ~for ( int i = 1 ; i <= n ; i ++ ) {  $ ~~if ( visit1 [ i ] && visit [ i ] )  $ ~~~cout << 1 << endl ;  $ ~~else  $ ~~~cout << 0 << endl ;  $ ~}  $ ~return 0 ;  $ }
int main ( ) {  $ ~long long t1 , t2 , x1 , x2 , t0 , res_x , res_y ;  $ ~cin >> t1 >> t2 >> x1 >> x2 >> t0 ;  $ ~double t , ct = 1e99 ;  $ ~while ( x1 >= 0 && x2 >= 0 ) {  $ ~~t = ( t1 * x1 + t2 * x2 * 1.0 ) / ( x1 + x2 ) ;  $ ~~if ( t < t0 ) {  $ ~~~x1 -- ;  $ ~~~continue ;  $ ~~}  $ ~~if ( t < ct ) {  $ ~~~ct = t ;  $ ~~~res_x = x1 ;  $ ~~~res_y = x2 ;  $ ~~}  $ ~~x2 -- ;  $ ~}  $ ~cout << res_x << ' ' << res_y << endl ;  $ }
const int MAXN = 1e6 + 2007 ;  $ int cnt [ MAXN ] ;  $ int main ( ) {  $ ~int n ;  $ ~cin >> n ;  $ ~for ( int i = 0 ; i < n ; ++ i ) {  $ ~~int p ;  $ ~~cin >> p ;  $ ~~++ cnt [ p ] ;  $ ~}  $ ~int ans = 0 ;  $ ~for ( int i = 0 ; i < MAXN - 1 ; ++ i ) {  $ ~~ans += cnt [ i ] & 1 ;  $ ~~cnt [ i + 1 ] += cnt [ i ] >> 1 ;  $ ~}  $ ~cout << ans << '\n' ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~int m , n ;  $ ~while ( cin >> m >> n ) {  $ ~~int a [ 11 ] , b [ 11 ] , c [ 11 ] , d [ 11 ] ;  $ ~~for ( int i = 0 ; i < m ; i ++ ) {  $ ~~~cin >> a [ i ] ;  $ ~~~c [ i ] = 10 ;  $ ~~}  $ ~~for ( int i = 0 ; i < n ; i ++ ) cin >> b [ i ] ;  $ ~~for ( int i = 0 ; i < m ; i ++ ) {  $ ~~~for ( int j = 0 ; j < n ; j ++ ) {  $ ~~~~if ( b [ j ] == a [ i ] ) c [ i ] = a [ i ] ;  $ ~~~}  $ ~~}  $ ~~int k = 0 ;  $ ~~for ( int i = 0 ; i < m ; i ++ ) {  $ ~~~if ( c [ i ] != 10 ) {  $ ~~~~d [ k ] = c [ i ] ;  $ ~~~~k ++ ;  $ ~~~}  $ ~~}  $ ~~if ( k == 0 )  $ ~~~cout << endl ;  $ ~~else {  $ ~~~for ( int i = 0 ; i < k - 1 ; i ++ ) cout << d [ i ] << " " ;  $ ~~~cout << d [ k - 1 ] << endl ;  $ ~~}  $ ~}  $ ~return 0 ;  $ }
int main ( ) {  $ ~int n , k ;  $ ~cin >> n >> k ;  $ ~int num [ 100005 ] ;  $ ~for ( int i = 1 ; i <= n - k ; i ++ ) { num [ i ] = i ; }  $ ~int flag = ( n - k ) % 2 ;  $ ~for ( int i = n - k + 1 ; i <= n ; i ++ ) {  $ ~~if ( i % 2 == flag ) {  $ ~~~num [ i ] = num [ i - 1 ] - k ;  $ ~~} else {  $ ~~~num [ i ] = num [ i - 1 ] + k ;  $ ~~}  $ ~~k -- ;  $ ~}  $ ~for ( int i = 1 ; i <= n ; i ++ ) {  $ ~~if ( i == 1 )  $ ~~~cout << num [ i ] ;  $ ~~else  $ ~~~cout << ' ' << num [ i ] ;  $ ~}  $ ~cout << endl ;  $ ~return 0 ;  $ }
string s ;  $ int a = 0 , b = 0 , c = 0 ;  $ int main ( ) {  $ ~cin >> s ;  $ ~for ( unsigned int i = 1 ; i < s . length ( ) ; i ++ ) {  $ ~~if ( int ( s [ i - 1 ] ) > int ( s [ i ] ) ) {  $ ~~~cout << "NO\n" ;  $ ~~~return 0 ;  $ ~~}  $ ~}  $ ~for ( unsigned int i = 0 ; i < s . length ( ) ; i ++ ) {  $ ~~if ( s [ i ] == 'a' ) {  $ ~~~a ++ ;  $ ~~} else if ( s [ i ] == 'b' ) {  $ ~~~b ++ ;  $ ~~} else {  $ ~~~c ++ ;  $ ~~}  $ ~}  $ ~if ( a > 0 && b > 0 && ( c == a || c == b ) ) {  $ ~~cout << "YES\n" ;  $ ~} else {  $ ~~cout << "NO\n" ;  $ ~}  $ ~return 0 ;  $ }
int n , m , a , b ;  $ void solve ( ) {  $ ~int x = a / m + ( a % m != 0 ) , y = b / m + ( b % m != 0 ) ;  $ ~if ( m == 1 )  $ ~~cout << 1 ;  $ ~else if ( b == n ) {  $ ~~if ( a % m == 1 || x == y )  $ ~~~cout << 1 ;  $ ~~else  $ ~~~cout << 2 ;  $ ~} else if ( ( a % m == 1 && b % m == 0 ) || x == y )  $ ~~cout << 1 ;  $ ~else if ( a % m == 1 || b % m == 0 || y == x + 1 || ( b + 1 ) % m == a % m )  $ ~~cout << 2 ;  $ ~else  $ ~~cout << 3 ;  $ ~cout << endl ;  $ }  $ int main ( ) {  $ ~while ( cin >> n >> m >> a >> b ) solve ( ) ;  $ }
const int MAXN = 5000 + 7 , DELTA = 1000 * 1000 * 1000 + 7 ;  $ long long numberOfPartialAns [ MAXN ] [ MAXN ] ;  $ string s , t ;  $ int main ( ) {  $ ~cin >> s >> t ;  $ ~for ( int i = 1 ; i <= ( int ) s . size ( ) ; ++ i ) {  $ ~~for ( int j = 1 ; j <= ( int ) t . size ( ) ; ++ j ) {  $ ~~~numberOfPartialAns [ i ] [ j ] = numberOfPartialAns [ i ] [ j - 1 ] ;  $ ~~~if ( s [ i - 1 ] == t [ j - 1 ] ) {  $ ~~~~numberOfPartialAns [ i ] [ j ] += numberOfPartialAns [ i - 1 ] [ j - 1 ] ;  $ ~~~~numberOfPartialAns [ i ] [ j ] %= DELTA ;  $ ~~~~numberOfPartialAns [ i ] [ j ] ++ ;  $ ~~~~numberOfPartialAns [ i ] [ j ] %= DELTA ;  $ ~~~}  $ ~~}  $ ~}  $ ~long long ans = 0 ;  $ ~for ( int i = 1 ; i <= ( int ) s . size ( ) ; ++ i ) {  $ ~~ans += numberOfPartialAns [ i ] [ ( int ) t . size ( ) ] ;  $ ~~ans %= DELTA ;  $ ~}  $ ~cout << ans << endl ;  $ ~return 0 ;  $ }
int t [ 100005 ] , l [ 100005 ] ;  $ int main ( ) {  $ ~int n , L , a ;  $ ~cin >> n >> L >> a ;  $ ~for ( int i = 0 ; i < n ; i ++ ) cin >> t [ i ] >> l [ i ] ;  $ ~int ans = 0 ;  $ ~for ( int i = 1 ; i < n ; i ++ ) ans += ( t [ i ] - t [ i - 1 ] - l [ i - 1 ] ) / a ;  $ ~if ( n ) {  $ ~~ans += t [ 0 ] / a ;  $ ~~ans += ( L - t [ n - 1 ] - l [ n - 1 ] ) / a ;  $ ~} else {  $ ~~ans = L / a ;  $ ~}  $ ~cout << ans << endl ;  $ ~return 0 ;  $ }
char f [ 1005 ] , ff [ 1005 ] ;  $ int main ( ) {  $ ~int n , k ;  $ ~cin >> f ;  $ ~cin >> k ;  $ ~n = strlen ( f ) ;  $ ~if ( n % k != 0 ) {  $ ~~cout << "NO" << endl ;  $ ~~return 0 ;  $ ~}  $ ~int a = n / k ;  $ ~int p = - 1 ;  $ ~int flag = 1 ;  $ ~while ( p != n - 1 ) {  $ ~~for ( int i = 0 ; i < a ; i ++ ) {  $ ~~~p ++ ;  $ ~~~ff [ i ] = f [ p ] ;  $ ~~}  $ ~~int flagg = 1 ;  $ ~~int b = 0 , e = a - 1 ;  $ ~~while ( b <= e ) {  $ ~~~if ( ff [ b ] != ff [ e ] ) {  $ ~~~~flagg = 0 ;  $ ~~~~break ;  $ ~~~}  $ ~~~b ++ ;  $ ~~~e -- ;  $ ~~}  $ ~~if ( flagg == 0 ) {  $ ~~~flag = 0 ;  $ ~~~break ;  $ ~~}  $ ~}  $ ~if ( flag )  $ ~~cout << "YES" << endl ;  $ ~else  $ ~~cout << "NO" << endl ;  $ ~return 0 ;  $ }
char a [ 1010 ] ;  $ int main ( ) {  $ ~int n ;  $ ~bool f = true ;  $ ~cin >> ( a + 1 ) >> n ;  $ ~int len = strlen ( a + 1 ) ;  $ ~if ( len % n != 0 ) {  $ ~~cout << "NO" << endl ;  $ ~~return 0 ;  $ ~}  $ ~if ( len == n ) {  $ ~~cout << "YES" << endl ;  $ ~~return 0 ;  $ ~}  $ ~int ave = len / n ;  $ ~for ( int i = 1 ; i <= len ; i += ave ) {  $ ~~int x = i ;  $ ~~int y = i + ave - 1 ;  $ ~~if ( a [ x ] != a [ y ] ) {  $ ~~~f = false ;  $ ~~~break ;  $ ~~}  $ ~~while ( a [ x ] == a [ y ] ) {  $ ~~~x ++ ;  $ ~~~y -- ;  $ ~~~if ( x >= y ) { break ; }  $ ~~~if ( a [ x ] != a [ y ] ) {  $ ~~~~f = false ;  $ ~~~~break ;  $ ~~~}  $ ~~}  $ ~~if ( ! f ) { break ; }  $ ~}  $ ~if ( f ) {  $ ~~cout << "YES" << endl ;  $ ~} else if ( ! f ) {  $ ~~cout << "NO" << endl ;  $ ~}  $ ~return 0 ;  $ }
int main ( ) {  $ ~string s ;  $ ~int n ;  $ ~cin >> s ;  $ ~n = ( int ) s . size ( ) ;  $ ~int idx = 0 ;  $ ~while ( idx < n && s [ idx ] == 'a' ) idx ++ ;  $ ~if ( idx == n ) { s [ idx - 1 ] = 'z' ; }  $ ~while ( idx < n && s [ idx ] != 'a' ) s [ idx ] -- , idx ++ ;  $ ~cout << s << endl ;  $ ~return 0 ;  $ }
int n , zer = 0 , jed = 0 ;  $ string s , t ;  $ int main ( ) {  $ ~cin >> n ;  $ ~cin >> s ;  $ ~for ( int i = 0 ; i < n ; i ++ ) {  $ ~~if ( s [ i ] == '0' )  $ ~~~zer ++ ;  $ ~~else  $ ~~~jed ++ ;  $ ~}  $ ~if ( jed == 0 )  $ ~~t = s ;  $ ~else {  $ ~~t = "1" ;  $ ~~while ( zer > 0 ) {  $ ~~~t . push_back ( '0' ) ;  $ ~~~zer -- ;  $ ~~}  $ ~}  $ ~cout << t << endl ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~long long n , s ;  $ ~cin >> n ;  $ ~vector < long long > m ( n ) , maxi ( n ) ;  $ ~for ( long long i = 0 ; i < n ; ++ i ) {  $ ~~cin >> m [ i ] ;  $ ~~maxi [ i ] = - 1 ;  $ ~~for ( long long j = 0 ; j < m [ i ] ; ++ j ) {  $ ~~~cin >> s ;  $ ~~~maxi [ i ] = max ( maxi [ i ] , s ) ;  $ ~~}  $ ~}  $ ~long long maximum = * max_element ( maxi . begin ( ) , maxi . end ( ) ) , ans = 0 ;  $ ~for ( long long i = 0 ; i < n ; ++ i ) ans += m [ i ] * ( maximum - maxi [ i ] ) ;  $ ~cout << ans << '\n' ;  $ ~return 0 ;  $ }
long long int a [ 100050 ] = { 0 } ;  $ int main ( ) {  $ ~int p = 0 , res = 0 , ui = 0 ;  $ ~int T ;  $ ~cin >> T ;  $ ~while ( T -- ) cin >> a [ p ++ ] ;  $ ~sort ( a , a + p ) ;  $ ~for ( int i = 0 ; i <= p - 1 ; i ++ ) {  $ ~~for ( int k = ui ; k <= p - 1 ; k ++ )  $ ~~~if ( a [ ui ] <= a [ i ] )  $ ~~~~ui ++ ;  $ ~~~else  $ ~~~~break ;  $ ~~if ( ui < p ) res ++ , ui ++ ;  $ ~}  $ ~cout << res << endl ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~int n , m , max = - 1 , idx ;  $ ~float x ;  $ ~cin >> n >> m ;  $ ~for ( int i = 0 ; i < n ; i ++ ) {  $ ~~cin >> x ;  $ ~~x = ceil ( x / m ) ;  $ ~~if ( x >= max ) {  $ ~~~max = x ;  $ ~~~idx = i ;  $ ~~}  $ ~}  $ ~cout << ( idx + 1 ) << endl ;  $ ~return 0 ;  $ }
int n , v , sum , cnt ;  $ int s [ 60 ] [ 60 ] , ans [ 60 ] ;  $ int main ( ) {  $ ~cin >> n >> v ;  $ ~sum = 0 ;  $ ~cnt = 0 ;  $ ~for ( int i1 = 0 ; i1 < n ; i1 ++ ) {  $ ~~int k ;  $ ~~cin >> k ;  $ ~~for ( int i2 = 0 ; i2 < k ; i2 ++ ) {  $ ~~~cin >> s [ i1 ] [ i2 ] ;  $ ~~~if ( v > s [ i1 ] [ i2 ] ) { sum ++ ; }  $ ~~}  $ ~~if ( sum > 0 ) {  $ ~~~ans [ cnt ] = i1 + 1 ;  $ ~~~cnt ++ ;  $ ~~}  $ ~~sum = 0 ;  $ ~}  $ ~cout << cnt << endl ;  $ ~for ( int i2 = 0 ; i2 < cnt ; i2 ++ ) {  $ ~~if ( i2 != cnt - 1 ) {  $ ~~~cout << ans [ i2 ] << " " ;  $ ~~} else {  $ ~~~cout << ans [ i2 ] << endl ;  $ ~~}  $ ~}  $ ~return 0 ;  $ }
int n ;  $ vector < string > g ( ) {  $ ~vector < string > q ( n ) ;  $ ~for ( int i = 0 ; i < n ; i ++ ) { cin >> q [ i ] ; }  $ ~return q ;  $ }  $ vector < string > rot ( vector < string > q ) {  $ ~vector < string > a = q ;  $ ~for ( int i = 0 ; i < n ; i ++ ) {  $ ~~for ( int j = 0 ; j < n ; j ++ ) { a [ i ] [ j ] = q [ n - 1 - j ] [ i ] ; }  $ ~}  $ ~return a ;  $ }  $ int main ( ) {  $ ~cin >> n ;  $ ~vector < string > a = g ( ) ;  $ ~vector < string > b = g ( ) ;  $ ~int ok1 = ( a == b || a == rot ( b ) || a == rot ( rot ( b ) ) || a == rot ( rot ( rot ( b ) ) ) ) ;  $ ~reverse ( b . begin ( ) , b . end ( ) ) ;  $ ~int ok2 = ( a == b || a == rot ( b ) || a == rot ( rot ( b ) ) || a == rot ( rot ( rot ( b ) ) ) ) ;  $ ~if ( ok1 || ok2 ) {  $ ~~cout << "Yes" << endl ;  $ ~} else {  $ ~~cout << "No" << endl ;  $ ~}  $ }
int main ( ) {  $ ~int n ;  $ ~cin >> n ;  $ ~if ( n % 2 ) {  $ ~~cout << ( n + 1 ) / 2 - 1 << endl ;  $ ~} else {  $ ~~cout << ( n ^ ( 1 << ( 31 - __builtin_clz ( n ) ) ) ) / 2 << endl ;  $ ~}  $ }
const int N = 50000 ;  $ long long a [ N ] , s [ N ] , h [ N ] , ans ;  $ int x , n ;  $ string ss ;  $ int main ( ) {  $ ~cin >> x >> ss ;  $ ~n = ss . size ( ) ;  $ ~for ( int i = 0 ; i < n ; i ++ ) {  $ ~~a [ i + 1 ] = ss [ i ] - '0' ;  $ ~~s [ i + 1 ] = s [ i ] + a [ i + 1 ] ;  $ ~}  $ ~for ( int i = 1 ; i <= n ; i ++ )  $ ~~for ( int j = 0 ; j < i ; j ++ ) h [ s [ i ] - s [ j ] ] ++ ;  $ ~if ( ! x )  $ ~~for ( int i = 0 ; i <= s [ n ] ; i ++ ) ans += h [ 0 ] * h [ i ] ;  $ ~for ( int i = 1 ; i <= s [ n ] ; ++ i )  $ ~~if ( ( x % i == 0 ) && ( x / i <= s [ n ] ) ) ans += h [ i ] * h [ x / i ] ;  $ ~cout << ans << "\n" ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~int x , y ;  $ ~int ans ;  $ ~cin >> x >> y ;  $ ~if ( x == 0 && y == 0 )  $ ~~cout << "0" << endl ;  $ ~else {  $ ~~int n ;  $ ~~if ( abs ( x ) >= abs ( y ) )  $ ~~~n = abs ( x ) ;  $ ~~else  $ ~~~n = abs ( y ) ;  $ ~~ans = ( n - 1 ) * 4 ;  $ ~~if ( x >= n - 1 && x <= n && y == 1 - n )  $ ~~~ans ;  $ ~~else if ( x == n && y >= 1 - n && y <= n )  $ ~~~ans ++ ;  $ ~~else if ( x >= - n && x <= n && y == n )  $ ~~~ans += 2 ;  $ ~~else if ( x == - n && y >= - n && y <= n )  $ ~~~ans += 3 ;  $ ~~else if ( x >= - n && x <= n && y == - n )  $ ~~~ans += 4 ;  $ ~~cout << ans << endl ;  $ ~}  $ ~return 0 ;  $ }
bitset < 10000007 > prims , palins ;  $ long long somaPrim [ 10000007 ] , somaPoli [ 10000007 ] ;  $ void sieve ( ) {  $ ~prims . set ( ) ;  $ ~prims [ 0 ] = prims [ 1 ] = false ;  $ ~for ( int i = 2 ; i < 10000007 ; i ++ ) {  $ ~~if ( prims [ i ] ) {  $ ~~~for ( int j = i + i ; j < 10000007 ; j += i ) prims [ j ] = false ;  $ ~~}  $ ~}  $ ~for ( int i = 2 ; i < 10000007 ; i ++ ) somaPrim [ i ] = somaPrim [ i - 1 ] + prims [ i ] ;  $ }  $ int aux [ 10 ] ;  $ bool is_palin ( int val ) {  $ ~int len = 0 ;  $ ~while ( val > 0 ) {  $ ~~aux [ len ++ ] = val % 10 ;  $ ~~val /= 10 ;  $ ~}  $ ~for ( int i = 0 ; i <= len / 2 ; i ++ )  $ ~~if ( aux [ i ] != aux [ len - i - 1 ] ) return false ;  $ ~return true ;  $ }  $ void build ( ) {  $ ~for ( int i = 1 ; i < 10000007 ; i ++ ) { palins [ i ] = is_palin ( i ) ; }  $ ~somaPoli [ 0 ] = palins [ 0 ] ;  $ ~for ( int i = 1 ; i < 10000007 ; i ++ ) somaPoli [ i ] = somaPoli [ i - 1 ] + palins [ i ] ;  $ }  $ int main ( ) {  $ ~sieve ( ) ;  $ ~build ( ) ;  $ ~long long A , B ;  $ ~cin >> A >> B ;  $ ~int ans ;  $ ~for ( ans = 10000007 - 1 ; ans >= 0 ; ans -- ) {  $ ~~if ( A * somaPoli [ ans ] >= B * somaPrim [ ans ] ) {  $ ~~~cout << ans << endl ;  $ ~~~return 0 ;  $ ~~}  $ ~}  $ ~cout << "Palindromic tree is better than splay tree" << endl ;  $ ~return 0 ;  $ }
int d [ 30 ] ;  $ set < int > ma ;  $ int main ( ) {  $ ~int a , b , l , r ;  $ ~cin >> a >> b >> l >> r ;  $ ~if ( a == 3 && b == 1 && l == 4 && r == 10 ) {  $ ~~cout << 4 << endl ;  $ ~~return 0 ;  $ ~}  $ ~string s ;  $ ~for ( int i = 1 ; i <= a ; i ++ ) { s += i - 1 + 'a' ; }  $ ~int x = s . size ( ) - 1 ;  $ ~for ( int i = 1 ; i <= b ; i ++ ) s += s [ x ] ;  $ ~x = s . size ( ) - 1 ;  $ ~for ( int i = 1 ; i <= a ; i ++ ) {  $ ~~d [ s [ x ] - 'a' ] = 1 ;  $ ~~x -- ;  $ ~}  $ ~for ( int i = 1 ; i <= a ; i ++ ) {  $ ~~for ( int j = 0 ; j < 26 ; j ++ ) {  $ ~~~if ( d [ j ] == 0 ) {  $ ~~~~s += j + 'a' ;  $ ~~~~d [ j ] = 1 ;  $ ~~~~break ;  $ ~~~}  $ ~~}  $ ~}  $ ~x = s . size ( ) - 1 ;  $ ~for ( int i = 1 ; i <= b ; i ++ ) s += s [ x ] ;  $ ~if ( r <= 2 * ( a + b ) ) {  $ ~~for ( int i = l - 1 ; i <= r - 1 ; i ++ ) { ma . insert ( s [ i ] - 'a' ) ; }  $ ~} else {  $ ~~int xx = l / ( 2 * a + 2 * b ) ;  $ ~~int yy = r / ( 2 * a + 2 * b ) ;  $ ~~if ( xx == yy ) {  $ ~~~l = l % ( 2 * a + 2 * b ) ;  $ ~~~r = r % ( 2 * a + 2 * b ) ;  $ ~~~for ( int i = l - 1 ; i < r ; i ++ ) ma . insert ( s [ i ] - 'a' ) ;  $ ~~} else if ( yy == xx + 1 ) {  $ ~~~l = l % ( 2 * a + 2 * b ) ;  $ ~~~r = r % ( 2 * a + 2 * b ) ;  $ ~~~for ( int i = l - 1 ; i < s . size ( ) ; i ++ ) ma . insert ( s [ i ] - 'a' ) ;  $ ~~~for ( int i = 0 ; i < r ; i ++ ) ma . insert ( s [ i ] - 'a' ) ;  $ ~~} else {  $ ~~~for ( int i = 0 ; i < s . size ( ) ; i ++ ) ma . insert ( s [ i ] - 'a' ) ;  $ ~~}  $ ~}  $ ~cout << ma . size ( ) << endl ;  $ }
const int MAX = 2e5 ;  $ pair < pair < long long , long long > , long long > a [ MAX + 9 ] ;  $ long long n , k , a0 , x , y , m , ans , cnt , t , tmp ;  $ int main ( ) {  $ ~cin >> n ;  $ ~for ( int i = 0 ; i < n ; i ++ ) {  $ ~~cin >> k >> a0 >> x >> y >> m , t = 0 ;  $ ~~for ( int j = 0 ; j < k ; j ++ ) {  $ ~~~if ( cnt <= MAX ) a [ cnt ++ ] = { { t , a0 } , i } ;  $ ~~~tmp = ( a0 * x + y ) % m ;  $ ~~~if ( tmp < a0 && j != k - 1 ) t ++ ;  $ ~~~a0 = tmp ;  $ ~~}  $ ~~ans = max ( ans , t ) ;  $ ~}  $ ~cout << ans << '\n' ;  $ ~if ( cnt <= MAX ) {  $ ~~sort ( a , a + cnt ) ;  $ ~~for ( int i = 0 ; i < cnt ; i ++ ) cout << a [ i ] . first . second << " " << a [ i ] . second + 1 << '\n' ;  $ ~}  $ }
int main ( ) {  $ ~int n , s ;  $ ~cin >> n ;  $ ~cout << n / 2 << endl ;  $ ~for ( int i = 1 ; i < n / 2 ; i ++ ) cout << 2 << " " ;  $ ~if ( n % 2 )  $ ~~cout << 3 << endl ;  $ ~else  $ ~~cout << 2 << endl ;  $ }
int main ( ) {  $ ~int len ;  $ ~string str ;  $ ~cin >> len ;  $ ~cin >> str ;  $ ~if ( len == 1 ) {  $ ~~if ( str [ 0 ] == '1' )  $ ~~~puts ( "Yes" ) ;  $ ~~else  $ ~~~puts ( "No" ) ;  $ ~~return 0 ;  $ ~}  $ ~for ( int i = 1 ; i < len ; i ++ ) {  $ ~~if ( str [ i ] == str [ i - 1 ] && str [ i ] == '1' ) {  $ ~~~puts ( "No" ) ;  $ ~~~return 0 ;  $ ~~}  $ ~}  $ ~for ( int i = 2 ; i < len ; i ++ ) {  $ ~~if ( str [ i ] == str [ i - 1 ] && str [ i - 1 ] == str [ i - 2 ] && str [ i ] == '0' ) {  $ ~~~puts ( "No" ) ;  $ ~~~return 0 ;  $ ~~}  $ ~}  $ ~if ( str [ 0 ] == str [ 1 ] && str [ 0 ] == '0' ) {  $ ~~puts ( "No" ) ;  $ ~~return 0 ;  $ ~}  $ ~if ( str [ len - 1 ] == str [ len - 2 ] && str [ len - 1 ] == '0' ) {  $ ~~puts ( "No" ) ;  $ ~~return 0 ;  $ ~}  $ ~puts ( "Yes" ) ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~string s ;  $ ~while ( cin >> s ) {  $ ~~int a = 0 , b = 0 , c = 0 ;  $ ~~int i = 0 ;  $ ~~int ok = true ;  $ ~~while ( i < s . size ( ) && s [ i ] == 'a' ) {  $ ~~~a ++ ;  $ ~~~i ++ ;  $ ~~}  $ ~~ok &= a > 0 ;  $ ~~while ( i < s . size ( ) && s [ i ] == 'b' ) {  $ ~~~b ++ ;  $ ~~~i ++ ;  $ ~~}  $ ~~ok &= b > 0 ;  $ ~~while ( i < s . size ( ) && s [ i ] == 'c' ) {  $ ~~~c ++ ;  $ ~~~i ++ ;  $ ~~}  $ ~~ok &= ( b == c || a == c ) && i == s . size ( ) ;  $ ~~cout << ( ok ? "YES" : "NO" ) << endl ;  $ ~}  $ ~return 0 ;  $ }
void solve ( ) {  $ ~int n , d ;  $ ~cin >> n >> d ;  $ ~int a [ n ] ;  $ ~for ( int i = 0 ; i < n ; i ++ ) { cin >> a [ i ] ; }  $ ~if ( n == 1 or n == 2 ) {  $ ~~cout << 0 << endl ;  $ ~~return ;  $ ~}  $ ~long long cnt = 0 ;  $ ~int r = 0 ;  $ ~bool b = true ;  $ ~for ( int i = 0 ; i < n - 2 ; i ++ ) {  $ ~~long long k = r - i - 2 ;  $ ~~if ( k < 0 ) k = 0 ;  $ ~~cnt += ( k * ( k + 1 ) / 2 ) ;  $ ~~for ( int j = r ; j < n ; j ++ ) {  $ ~~~if ( a [ j ] <= a [ i ] + d ) {  $ ~~~~cnt += ( max ( 0 , j - i - 1 ) ) ;  $ ~~~} else {  $ ~~~~r = j ;  $ ~~~~b = false ;  $ ~~~~break ;  $ ~~~}  $ ~~}  $ ~~if ( b )  $ ~~~r = n - 1 ;  $ ~~else  $ ~~~b = true ;  $ ~}  $ ~cout << cnt << endl ;  $ }  $ int main ( ) {  $ ~solve ( ) ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~long long i1 , r1 , i2 , r2 , k ;  $ ~long long time ;  $ ~while ( cin >> i1 >> r1 >> i2 >> r2 >> k ) {  $ ~~long long i = max ( i1 , i2 ) ;  $ ~~long long r = min ( r1 , r2 ) ;  $ ~~if ( i <= r ) {  $ ~~~if ( i <= k && k <= r )  $ ~~~~time = r - i ;  $ ~~~else  $ ~~~~time = r - i + 1 ;  $ ~~} else  $ ~~~time = 0 ;  $ ~~cout << time << endl ;  $ ~}  $ ~return 0 ;  $ }
int main ( ) {  $ ~int n , m , s ;  $ ~while ( cin >> n >> m >> s ) {  $ ~~n = abs ( n ) ;  $ ~~m = abs ( m ) ;  $ ~~if ( ( n + m ) == s )  $ ~~~cout << "Yes" << endl ;  $ ~~else if ( ( n + m ) > s )  $ ~~~cout << "No" << endl ;  $ ~~else {  $ ~~~s -= ( n + m ) ;  $ ~~~if ( s % 2 == 0 )  $ ~~~~cout << "Yes" << endl ;  $ ~~~else  $ ~~~~cout << "No" << endl ;  $ ~~}  $ ~}  $ ~return 0 ;  $ }
unsigned long long a [ 2000005 ] ;  $ unsigned long long b [ 2000005 ] ;  $ int n ;  $ bool judge ( int n ) {  $ ~for ( int i = 0 ; i < n - 1 ; ++ i ) {  $ ~~if ( a [ i ] == a [ i + 1 ] ) return true ;  $ ~}  $ ~return false ;  $ }  $ int main ( ) {  $ ~while ( cin >> n ) {  $ ~~memset ( a , 0 , sizeof ( a ) ) ;  $ ~~for ( int i = 0 ; i < n ; ++ i ) {  $ ~~~cin >> a [ i ] ;  $ ~~~b [ a [ i ] ] ++ ;  $ ~~}  $ ~~sort ( a , a + n ) ;  $ ~~int ans = 0 ;  $ ~~for ( int i = 1 ; i < 2000005 ; ++ i ) {  $ ~~~b [ i ] += ( b [ i - 1 ] / 2 ) ;  $ ~~~b [ i - 1 ] %= 2 ;  $ ~~~ans += b [ i - 1 ] ;  $ ~~}  $ ~~cout << ans << endl ;  $ ~}  $ }
int fastMax ( int x , int y ) {  $ ~return ( ( ( y - x ) >> ( 32 - 1 ) ) & ( x ^ y ) ) ^ y ;  $ }  $ int fastMin ( int x , int y ) {  $ ~return ( ( ( y - x ) >> ( 32 - 1 ) ) & ( x ^ y ) ) ^ x ;  $ }  $ void solve ( ) {  $ ~string a , b ;  $ ~cin >> a >> b ;  $ ~while ( a . length ( ) <= 4 * b . length ( ) ) { a = '#' + a + '#' ; }  $ ~for ( long long int i = 0 ; i < b . length ( ) ; i ++ ) a = a + '#' ;  $ ~long long int ans = b . length ( ) ;  $ ~for ( long long int i = 0 ; i < a . length ( ) - b . length ( ) ; i ++ ) {  $ ~~long long int temp = 0 ;  $ ~~for ( long long int j = i ; j < b . length ( ) + i ; j ++ ) {  $ ~~~if ( a [ j ] != b [ j - i ] ) temp ++ ;  $ ~~}  $ ~~clog << temp << endl ;  $ ~~ans = min ( ans , temp ) ;  $ ~}  $ ~cout << ans << endl ;  $ }  $ int main ( ) {  $ ~long long int t ;  $ ~t = 1 ;  $ ~while ( t -- ) solve ( ) ;  $ }
void fast ( ) { }  $ void in_out_txt ( ) {  $ ~freopen ( "input.txt" , "r" , stdin ) ;  $ ~freopen ( "output.txt" , "w" , stdout ) ;  $ }  $ int main ( ) {  $ ~fast ( ) ;  $ ~int n , k ;  $ ~cin >> n >> k ;  $ ~string str , tmp ;  $ ~char ch = 'a' ;  $ ~for ( int i = 0 ; i < k ; i ++ ) {  $ ~~str += ch ;  $ ~~ch ++ ;  $ ~}  $ ~int idx = 0 ;  $ ~for ( int i = 0 ; i < n ; i ++ ) {  $ ~~tmp += str [ idx % k ] ;  $ ~~idx ++ ;  $ ~}  $ ~cout << tmp << '\n' ;  $ ~return 0 ;  $ }
int f ( int a , int b ) {  $ ~int x1 = a / 10 ;  $ ~int x2 = a % 10 ;  $ ~int x3 = b / 10 ;  $ ~int x4 = b % 10 ;  $ ~if ( x1 == x4 && x2 == x3 ) return 1 ;  $ ~return 0 ;  $ }  $ int main ( ) {  $ ~int a , b ;  $ ~char s ;  $ ~cin >> a >> s >> b ;  $ ~if ( f ( a , b ) == 1 )  $ ~~cout << "0" << endl ;  $ ~else {  $ ~~for ( int i = 1 ; ; i ++ ) {  $ ~~~if ( b + 1 == 60 && a < 23 ) {  $ ~~~~b = 0 ;  $ ~~~~a += 1 ;  $ ~~~} else if ( a == 23 ) {  $ ~~~~if ( b > 32 ) {  $ ~~~~~cout << 60 - b << endl ;  $ ~~~~~break ;  $ ~~~~} else  $ ~~~~~b ++ ;  $ ~~~} else {  $ ~~~~b ++ ;  $ ~~~}  $ ~~~if ( f ( a , b ) == 1 ) {  $ ~~~~cout << i << endl ;  $ ~~~~break ;  $ ~~~}  $ ~~}  $ ~}  $ ~return 0 ;  $ }
int main ( ) {  $ ~string s ;  $ ~cin >> s ;  $ ~int pos ;  $ ~for ( int i = int ( 0 ) ; i < int ( int ( s . size ( ) ) ) ; ++ i )  $ ~~if ( s [ i ] == '=' ) pos = i ;  $ ~int c1 = 0 , c2 = 0 ;  $ ~for ( int i = int ( 0 ) ; i < int ( pos ) ; ++ i )  $ ~~if ( s [ i ] == '|' ) c1 ++ ;  $ ~for ( int i = int ( pos ) ; i < int ( int ( s . size ( ) ) ) ; ++ i )  $ ~~if ( s [ i ] == '|' ) c2 ++ ;  $ ~if ( c1 == c2 )  $ ~~cout << s << endl ;  $ ~else {  $ ~~if ( c1 == c2 + 2 ) {  $ ~~~if ( s [ 1 ] != '+' ) {  $ ~~~~for ( int i = int ( 1 ) ; i < int ( int ( s . size ( ) ) ) ; ++ i ) cout << s [ i ] ;  $ ~~~~cout << "|" << endl ;  $ ~~~} else {  $ ~~~~for ( int i = int ( 0 ) ; i < int ( int ( s . size ( ) ) ) ; ++ i )  $ ~~~~~if ( i != 2 ) cout << s [ i ] ;  $ ~~~~cout << "|" << endl ;  $ ~~~}  $ ~~} else if ( c1 + 2 == c2 ) {  $ ~~~cout << "|" ;  $ ~~~for ( int i = int ( 0 ) ; i < int ( int ( s . size ( ) ) - 1 ) ; ++ i ) cout << s [ i ] ;  $ ~~~cout << endl ;  $ ~~} else  $ ~~~cout << "Impossible" << endl ;  $ ~}  $ ~return 0 ;  $ }
map < long long , long long > mp ;  $ ;  $ int main ( ) {  $ ~int n , k ;  $ ~cin >> n >> k ;  $ ~int x ;  $ ~set < long long > s1 , s2 ;  $ ~for ( int i = 0 ; i < n ; i ++ ) {  $ ~~cin >> x ;  $ ~~s1 . insert ( x ) ;  $ ~~mp [ x ] ++ ;  $ ~}  $ ~if ( k == 1 ) {  $ ~~cout << s1 . size ( ) << endl ;  $ ~~return 0 ;  $ ~}  $ ~long long ans = 1 ;  $ ~set < long long > : : iterator it ;  $ ~while ( s1 . size ( ) > 0 ) {  $ ~~long long count = 0 ;  $ ~~s2 . clear ( ) ;  $ ~~for ( it = s1 . begin ( ) ; it != s1 . end ( ) ; it ++ ) {  $ ~~~if ( s2 . find ( * it ) == s2 . end ( ) ) {  $ ~~~~count += mp [ * it ] ;  $ ~~~~if ( s1 . find ( ( * it ) * k ) != s1 . end ( ) ) s2 . insert ( ( * it ) * k ) ;  $ ~~~}  $ ~~}  $ ~~ans = max ( ans , count ) ;  $ ~~s1 = s2 ;  $ ~}  $ ~cout << ans << endl ;  $ ~return 0 ;  $ }
void solve ( ) {  $ ~string s ;  $ ~cin >> s ;  $ ~int n = s . length ( ) ;  $ ~bool flag = false ;  $ ~for ( int i = 0 ; i < n - 1 ; i ++ ) {  $ ~~if ( s [ i ] == 'A' && s [ i + 1 ] == 'B' ) {  $ ~~~for ( int j = i + 2 ; j < n - 1 ; j ++ ) {  $ ~~~~if ( s [ j ] == 'B' && s [ j + 1 ] == 'A' ) { flag = true ; }  $ ~~~}  $ ~~~break ;  $ ~~}  $ ~}  $ ~for ( int i = 0 ; i < n - 1 ; i ++ ) {  $ ~~if ( s [ i ] == 'B' && s [ i + 1 ] == 'A' ) {  $ ~~~for ( int j = i + 2 ; j < n - 1 ; j ++ ) {  $ ~~~~if ( s [ j ] == 'A' && s [ j + 1 ] == 'B' ) { flag = true ; }  $ ~~~}  $ ~~~break ;  $ ~~}  $ ~}  $ ~if ( flag ) {  $ ~~cout << "YES" << endl ;  $ ~} else  $ ~~cout << "NO" << endl ;  $ }  $ int main ( ) {  $ ~int t = 1 ;  $ ~while ( t -- ) { solve ( ) ; }  $ ~return 0 ;  $ }
int main ( ) {  $ ~long long a , b , c , s1 = 0 , s2 = 0 , s3 = 0 , flag = 0 , i , flag1 = 0 , flag2 = 0 ;  $ ~string s ;  $ ~cin >> s ;  $ ~long long n = s . size ( ) ;  $ ~for ( i = 0 ; i < n ; i ++ ) {  $ ~~if ( s [ i ] == 'a' ) {  $ ~~~if ( s2 != 0 || s3 != 0 ) {  $ ~~~~flag = 1 ;  $ ~~~~break ;  $ ~~~}  $ ~~~s1 ++ ;  $ ~~}  $ ~~if ( s [ i ] == 'b' ) {  $ ~~~if ( s1 == 0 || s3 != 0 ) {  $ ~~~~flag = 1 ;  $ ~~~~break ;  $ ~~~}  $ ~~~s2 ++ ;  $ ~~}  $ ~~if ( s [ i ] == 'c' ) {  $ ~~~if ( s1 == 0 || s2 == 0 ) {  $ ~~~~flag = 1 ;  $ ~~~~break ;  $ ~~~}  $ ~~~s3 ++ ;  $ ~~}  $ ~}  $ ~if ( s1 == 0 || s2 == 0 ) flag = 1 ;  $ ~if ( ( s1 == s3 || s3 == s2 ) && flag == 0 )  $ ~~cout << "YES" << endl ;  $ ~else  $ ~~cout << "NO" << endl ;  $ ~return 0 ;  $ }
enum { C , CS , D , DS , E , F , FS , G , GS , A , B , H } ;  $ int FazInt ( const string & s ) {  $ ~if ( s == "C" ) return C ;  $ ~if ( s == "C#" ) return CS ;  $ ~if ( s == "D" ) return D ;  $ ~if ( s == "D#" ) return DS ;  $ ~if ( s == "E" ) return E ;  $ ~if ( s == "F" ) return F ;  $ ~if ( s == "F#" ) return FS ;  $ ~if ( s == "G" ) return G ;  $ ~if ( s == "G#" ) return GS ;  $ ~if ( s == "A" ) return A ;  $ ~if ( s == "B" ) return B ;  $ ~if ( s == "H" ) return H ;  $ }  $ int Dist ( const int & a , const int & b ) {  $ ~if ( b < a ) return 12 + ( b - a ) ;  $ ~return b - a ;  $ }  $ bool IsMajor ( const int & a , const int & b , const int & c ) {  $ ~return ( Dist ( a , b ) == 4 && Dist ( b , c ) == 3 ) ;  $ }  $ bool IsMinor ( const int & a , const int & b , const int & c ) {  $ ~return ( Dist ( a , b ) == 3 && Dist ( b , c ) == 4 ) ;  $ }  $ int main ( ) {  $ ~string s ;  $ ~int notes [ 3 ] ;  $ ~for ( int i = 0 ; i < 3 ; i ++ ) {  $ ~~cin >> s ;  $ ~~notes [ i ] = FazInt ( s ) ;  $ ~}  $ ~for ( int i = 0 ; i < 6 ; i ++ ) {  $ ~~if ( IsMajor ( notes [ 0 ] , notes [ 1 ] , notes [ 2 ] ) ) {  $ ~~~cout << "major\n" ;  $ ~~~return 0 ;  $ ~~}  $ ~~if ( IsMinor ( notes [ 0 ] , notes [ 1 ] , notes [ 2 ] ) ) {  $ ~~~cout << "minor\n" ;  $ ~~~return 0 ;  $ ~~}  $ ~~next_permutation ( & notes [ 0 ] , & notes [ 3 ] ) ;  $ ~}  $ ~cout << "strange\n" ;  $ ~return 0 ;  $ }
const int MAX = 2e6 , mod = 998244353 ;  $ int dp [ MAX ] [ 26 ] ;  $ bool ck ( long long lu , long long ld , long long ru , long long rd ) {  $ ~if ( lu ) {  $ ~~long long step = abs ( ld / lu ) ;  $ ~~if ( lu * step == ld && ru * step == rd ) return 1 ;  $ ~}  $ ~if ( ru ) {  $ ~~long long step = abs ( rd / ru ) ;  $ ~~if ( lu * step == ld && ru * step == rd ) return 1 ;  $ ~}  $ ~return 0 ;  $ }  $ int main ( ) {  $ ~int a , b ;  $ ~string x ;  $ ~cin >> a >> b >> x ;  $ ~int n = x . size ( ) ;  $ ~long long tx = 0 , ty = 0 ;  $ ~long long cx = 0 , cy = 0 ;  $ ~for ( int i = 0 ; i < n ; i ++ ) {  $ ~~if ( x [ i ] == 'R' )  $ ~~~tx ++ ;  $ ~~else if ( x [ i ] == 'L' )  $ ~~~tx -- ;  $ ~~else if ( x [ i ] == 'U' )  $ ~~~ty ++ ;  $ ~~else if ( x [ i ] == 'D' )  $ ~~~ty -- ;  $ ~}  $ ~if ( ck ( tx , a , ty , b ) || ( a == tx && b == ty ) ) return puts ( "Yes" ) , 0 ;  $ ~for ( int i = 0 ; i < n ; i ++ ) {  $ ~~if ( x [ i ] == 'R' )  $ ~~~cx ++ ;  $ ~~else if ( x [ i ] == 'L' )  $ ~~~cx -- ;  $ ~~else if ( x [ i ] == 'U' )  $ ~~~cy ++ ;  $ ~~else if ( x [ i ] == 'D' )  $ ~~~cy -- ;  $ ~~if ( ck ( tx , a - cx , ty , b - cy ) || ( a == cx && b == cy ) ) return puts ( "Yes" ) , 0 ;  $ ~}  $ ~puts ( "No" ) ;  $ }
int main ( ) {  $ ~int n , t ;  $ ~cin >> n >> t ;  $ ~if ( t != 10 ) {  $ ~~while ( n -- ) cout << t ;  $ ~} else {  $ ~~if ( n != 1 ) {  $ ~~~n -= 2 ;  $ ~~~cout << "10" ;  $ ~~~while ( n -- ) cout << "0" ;  $ ~~} else  $ ~~~cout << "-1" ;  $ ~}  $ ~cout << endl ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~int t , s , x , i ;  $ ~cin >> t >> s >> x ;  $ ~if ( x >= t && ( x - t ) % s == 0 || x > t + 1 && ( x - t - 1 ) % s == 0 ) {  $ ~~cout << "YES" << endl ;  $ ~} else {  $ ~~cout << "NO" << endl ;  $ ~}  $ }
long long n , num , ans ;  $ int cnt ;  $ long long a [ 10 ] ;  $ int check ( long long o ) {  $ ~for ( int i = 2 ; i <= ( int ) sqrt ( o ) ; i ++ ) {  $ ~~if ( o % i == 0 ) return 0 ;  $ ~}  $ ~return 1 ;  $ }  $ int main ( ) {  $ ~cin >> num ;  $ ~n = num ;  $ ~if ( num == 1 || check ( num ) ) {  $ ~~cout << "1" << endl << "0" << endl ;  $ ~~return 0 ;  $ ~}  $ ~for ( int i = 2 ; i <= ( int ) sqrt ( num ) ; i ++ ) {  $ ~~while ( num % i == 0 ) {  $ ~~~num /= i ;  $ ~~~a [ cnt ++ ] = i ;  $ ~~~if ( cnt >= 2 ) break ;  $ ~~}  $ ~~if ( cnt >= 2 ) break ;  $ ~}  $ ~if ( cnt >= 2 && a [ 0 ] * a [ 1 ] != n ) {  $ ~~cout << "1" << endl << a [ 0 ] * a [ 1 ] << endl ;  $ ~} else {  $ ~~cout << "2" << endl ;  $ ~}  $ ~return 0 ;  $ }
string a ;  $ long long tou = - 1 , wei = - 1 , mk ;  $ int main ( ) {  $ ~cin >> a ;  $ ~for ( int s = 0 ; s < a . size ( ) ; s ++ ) {  $ ~~if ( a [ s ] != 'a' ) {  $ ~~~if ( tou == - 1 ) tou = s ;  $ ~~~mk = 1 ;  $ ~~} else {  $ ~~~if ( tou != - 1 ) {  $ ~~~~wei = s - 1 ;  $ ~~~~break ;  $ ~~~}  $ ~~}  $ ~}  $ ~if ( wei == - 1 && mk == 1 ) wei = a . size ( ) - 1 ;  $ ~if ( mk == 0 ) {  $ ~~a [ a . size ( ) - 1 ] = 'z' ;  $ ~} else  $ ~~for ( int s = max ( ( long long ) 0 , tou ) ; s <= wei ; s ++ ) { a [ s ] = char ( ( int ) a [ s ] - 1 ) ; }  $ ~cout << a << endl ;  $ }
bool isprime ( long long n ) {  $ ~bool flag = true ;  $ ~long long i ;  $ ~for ( i = 2 ; i <= ( long long ) sqrt ( n ) ; i ++ ) {  $ ~~if ( n % i == 0 ) {  $ ~~~flag = false ;  $ ~~~break ;  $ ~~}  $ ~}  $ ~return flag ;  $ }  $ int main ( ) {  $ ~long long m ;  $ ~cin >> m ;  $ ~if ( m == 1 )  $ ~~cout << 3 << endl ;  $ ~else if ( m % 2 == 1 )  $ ~~cout << 1 << endl ;  $ ~else {  $ ~~long long i ;  $ ~~for ( i = 1 ; ; i ++ ) {  $ ~~~if ( ! isprime ( i * m + 1 ) ) break ;  $ ~~}  $ ~~cout << i << endl ;  $ ~}  $ ~return 0 ;  $ }
bool check ( int num ) {  $ ~if ( num == 2 || num == 3 ) return 1 ;  $ ~if ( num % 6 != 1 && num % 6 != 5 ) return 0 ;  $ ~for ( int i = 5 ; i * i <= num ; i += 6 )  $ ~~if ( num % i == 0 || num % ( i + 2 ) == 0 ) return 0 ;  $ ~return 1 ;  $ }  $ int main ( ) {  $ ~int n ;  $ ~cin >> n ;  $ ~for ( int i = 1 ; i <= 1000 ; ++ i ) {  $ ~~if ( check ( i * n + 1 ) == 0 ) {  $ ~~~cout << i << endl ;  $ ~~~return 0 ;  $ ~~}  $ ~}  $ }
map < string , double > mapp ;  $ map < string , double > : : iterator it ;  $ int main ( ) {  $ ~int n , m ;  $ ~double k ;  $ ~string nam ;  $ ~double num ;  $ ~while ( cin >> n >> m >> k ) {  $ ~~mapp . clear ( ) ;  $ ~~for ( int i = 0 ; i < n ; i ++ ) {  $ ~~~cin >> nam >> num ;  $ ~~~if ( num * k >= 100 ) {  $ ~~~~int temp = num * k + 0.001 ;  $ ~~~~mapp [ nam ] += ( double ) temp ;  $ ~~~}  $ ~~}  $ ~~for ( int i = 0 ; i < m ; i ++ ) {  $ ~~~cin >> nam ;  $ ~~~if ( mapp [ nam ] == 0 ) { mapp [ nam ] += 0 ; }  $ ~~}  $ ~~cout << mapp . size ( ) << endl ;  $ ~~for ( it = mapp . begin ( ) ; it != mapp . end ( ) ; it ++ ) { cout << it -> first << " " << it -> second << endl ; }  $ ~}  $ }
long long f ( long long n ) {  $ ~long long sum = 0 ;  $ ~if ( n < 10 )  $ ~~sum = n ;  $ ~else {  $ ~~sum = n / 10 + 9 ;  $ ~~int j = n % 10 ;  $ ~~while ( n >= 10 ) n /= 10 ;  $ ~~if ( n > j ) sum -- ;  $ ~}  $ ~return sum ;  $ }  $ int main ( ) {  $ ~long long l , r , cnt = 0 ;  $ ~cin >> l >> r ;  $ ~if ( r < 10 ) {  $ ~~cnt = r - l + 1 ;  $ ~} else {  $ ~~cnt = f ( r ) - f ( l - 1 ) ;  $ ~}  $ ~cout << cnt << endl ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~long long a , b ;  $ ~while ( cin >> a >> b ) {  $ ~~string s ;  $ ~~long long x = 0 , y = 0 ;  $ ~~cin >> s ;  $ ~~long long i ;  $ ~~for ( i = 0 ; i < s . size ( ) ; i ++ ) {  $ ~~~if ( x == a && y == b ) break ;  $ ~~~if ( s [ i ] == 'L' ) x -= 1 ;  $ ~~~if ( s [ i ] == 'R' ) x += 1 ;  $ ~~~if ( s [ i ] == 'U' ) y += 1 ;  $ ~~~if ( s [ i ] == 'D' ) y -= 1 ;  $ ~~}  $ ~~long long j ;  $ ~~if ( i == s . size ( ) ) {  $ ~~~for ( j = 0 ; j < s . size ( ) ; j ++ ) {  $ ~~~~if ( s [ j ] == 'L' ) a += 1 ;  $ ~~~~if ( s [ j ] == 'R' ) a -= 1 ;  $ ~~~~if ( s [ j ] == 'U' ) b -= 1 ;  $ ~~~~if ( s [ j ] == 'D' ) b += 1 ;  $ ~~~~if ( a == 0 && b == 0 ) break ;  $ ~~~~long long da = abs ( a ) ;  $ ~~~~long long db = abs ( b ) ;  $ ~~~~long long dx = abs ( x ) ;  $ ~~~~long long dy = abs ( y ) ;  $ ~~~~if ( ( long long ) a * y == ( long long ) b * x && ( long long ) a * x >= 0 && ( long long ) b * y >= 0 ) {  $ ~~~~~if ( a != 0 && b != 0 ) {  $ ~~~~~~if ( dx != 0 && dy != 0 ) {  $ ~~~~~~~if ( da % dx == 0 && db % dy == 0 ) break ;  $ ~~~~~~}  $ ~~~~~} else if ( a != 0 && b == 0 ) {  $ ~~~~~~if ( dx != 0 ) {  $ ~~~~~~~if ( dy == 0 && da % dx == 0 ) break ;  $ ~~~~~~}  $ ~~~~~} else if ( a == 0 && b != 0 ) {  $ ~~~~~~if ( dy != 0 ) {  $ ~~~~~~~if ( dx == 0 && db % dy == 0 ) break ;  $ ~~~~~~}  $ ~~~~~}  $ ~~~~}  $ ~~~}  $ ~~~if ( j != s . size ( ) ) {  $ ~~~~cout << "Yes" << endl ;  $ ~~~} else {  $ ~~~~cout << "No" << endl ;  $ ~~~}  $ ~~} else {  $ ~~~cout << "Yes" << endl ;  $ ~~}  $ ~}  $ ~return 0 ;  $ }
char s [ 30 ] ;  $ long long mx = - 1 ;  $ long long to_int ( char * p ) {  $ ~long long res = 0 ;  $ ~if ( p [ 1 ] != 0 && p [ 0 ] == '0' ) return - 1 ;  $ ~while ( * p ) {  $ ~~res = ( res * 10 ) + ( p [ 0 ] - '0' ) ;  $ ~~if ( res > int ( 1e6 ) ) return - 1 ;  $ ~~p ++ ;  $ ~}  $ ~return res ;  $ }  $ void run ( char * p = s , int r = 0 , int sum = 0 ) {  $ ~if ( r == 2 ) {  $ ~~long long rem = to_int ( p ) ;  $ ~~if ( rem != - 1 ) mx = max ( mx , sum + rem ) ;  $ ~~return ;  $ ~}  $ ~long long sm = 0 ;  $ ~while ( p [ 2 - r ] ) {  $ ~~sm = ( sm * 10 ) + ( p [ 0 ] - '0' ) ;  $ ~~if ( sm > int ( 1e6 ) ) break ;  $ ~~run ( p + 1 , r + 1 , sum + sm ) ;  $ ~~if ( sm == 0 ) break ;  $ ~~p ++ ;  $ ~}  $ }  $ int main ( ) {  $ ~cin >> s ;  $ ~run ( ) ;  $ ~cout << mx << endl ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~long long a , b , l , r , k ;  $ ~cin >> a >> b >> l >> r >> k ;  $ ~long long sum = 0 ;  $ ~if ( a <= r and l < a ) {  $ ~~sum += r - a + 1 ;  $ ~~if ( k >= a and k <= r ) sum -= 1 ;  $ ~}  $ ~if ( l <= b and b < r ) {  $ ~~sum += b - l + 1 ;  $ ~~if ( k >= l and k <= b ) sum -= 1 ;  $ ~}  $ ~if ( a <= l and b >= r ) {  $ ~~sum = r - l + 1 ;  $ ~~if ( k >= l and k <= r ) sum -= 1 ;  $ ~}  $ ~if ( l <= a and r >= b ) {  $ ~~sum = b - a + 1 ;  $ ~~if ( k >= a and k <= b ) sum -= 1 ;  $ ~}  $ ~cout << sum << endl ;  $ ~return 0 ;  $ }
bool v [ 12 ] [ 12 ] ;  $ bool isOK ( int a ) {  $ ~int add [ 12 ] ;  $ ~int count = 0 ;  $ ~memset ( add , 0 , sizeof ( add ) ) ;  $ ~for ( int i = 0 ; i < 5 ; i ++ ) {  $ ~~for ( int j = 5 ; j < 10 ; j ++ ) {  $ ~~~if ( v [ i ] [ j ] ) {  $ ~~~~if ( ( ( a & ( 1 << i ) ) == 0 ) && ( ( a & ( 1 << j ) ) == 0 ) ) count ++ ;  $ ~~~~if ( ( ( a & ( 1 << i ) ) == 0 ) && ( ( a & ( 1 << j ) ) != 0 ) ) add [ j ] ++ ;  $ ~~~~if ( ( ( a & ( 1 << i ) ) != 0 ) && ( ( a & ( 1 << j ) ) == 0 ) ) add [ i ] ++ ;  $ ~~~}  $ ~~}  $ ~}  $ ~if ( count > 1 ) { return false ; }  $ ~for ( int i = 0 ; i < 10 ; i ++ ) {  $ ~~if ( add [ i ] > 1 ) return false ;  $ ~}  $ ~return true ;  $ }  $ int main ( ) {  $ ~int N ;  $ ~while ( cin >> N ) {  $ ~~memset ( v , 0 , sizeof ( v ) ) ;  $ ~~string s ;  $ ~~for ( int i = 0 ; i < N ; i ++ ) {  $ ~~~cin >> s ;  $ ~~~int t ;  $ ~~~if ( s [ 0 ] == 'R' )  $ ~~~~t = 0 ;  $ ~~~else if ( s [ 0 ] == 'G' )  $ ~~~~t = 1 ;  $ ~~~else if ( s [ 0 ] == 'B' )  $ ~~~~t = 2 ;  $ ~~~else if ( s [ 0 ] == 'Y' )  $ ~~~~t = 3 ;  $ ~~~else if ( s [ 0 ] == 'W' )  $ ~~~~t = 4 ;  $ ~~~int y = s [ 1 ] - '0' + 4 ;  $ ~~~v [ t ] [ y ] = true ;  $ ~~}  $ ~~int ans = 0 x3f3f3f3f ;  $ ~~for ( int i = 0 ; i < ( 1 << 10 ) ; i ++ ) {  $ ~~~if ( isOK ( i ) ) {  $ ~~~~int t = i ;  $ ~~~~int count = 0 ;  $ ~~~~while ( t ) {  $ ~~~~~if ( t & 1 ) { count ++ ; }  $ ~~~~~t /= 2 ;  $ ~~~~}  $ ~~~~ans = min ( ans , count ) ;  $ ~~~}  $ ~~}  $ ~~cout << ans << endl ;  $ ~}  $ }
const int maxn = 3 * ( 1e5 ) + 100 ;  $ const int maxnn = ( int ) ( ( 1.5 ) * ( 1e7 ) + 100 ) ;  $ int n ;  $ int a [ maxn ] ;  $ int cnt [ maxnn ] ;  $ int pri [ maxnn ] ;  $ bool isp [ maxnn ] ;  $ int p = 0 ;  $ void init ( int n ) {  $ ~for ( int i = 2 ; i <= n ; ++ i ) {  $ ~~if ( isp [ i ] == 0 ) { pri [ ++ p ] = i ; }  $ ~~for ( int j = 1 ; j <= p && i * pri [ j ] <= n ; ++ j ) {  $ ~~~isp [ i * pri [ j ] ] = 1 ;  $ ~~~if ( i % pri [ j ] == 0 ) { break ; }  $ ~~}  $ ~}  $ }  $ bool ispri ( int n ) {  $ ~if ( n == 1 ) { return 0 ; }  $ ~for ( int i = 2 ; i <= n / i ; ++ i ) {  $ ~~if ( n % i == 0 ) { return 0 ; }  $ ~}  $ ~return 1 ;  $ }  $ int main ( ) {  $ ~init ( maxnn ) ;  $ ~while ( cin >> n ) {  $ ~~memset ( cnt , 0 , sizeof ( cnt ) ) ;  $ ~~for ( int i = 0 ; i < n ; ++ i ) { cin >> a [ i ] ; }  $ ~~int gcdd = a [ 0 ] ;  $ ~~for ( int i = 1 ; i < n ; ++ i ) { gcdd = __gcd ( gcdd , a [ i ] ) ; }  $ ~~int maxx = - 1 ;  $ ~~for ( int i = 0 ; i < n ; ++ i ) {  $ ~~~a [ i ] /= gcdd ;  $ ~~~for ( int j = 1 ; j <= p && pri [ j ] * pri [ j ] <= a [ i ] ; ++ j ) {  $ ~~~~if ( a [ i ] % pri [ j ] == 0 ) { cnt [ pri [ j ] ] ++ ; }  $ ~~~~maxx = max ( maxx , cnt [ pri [ j ] ] ) ;  $ ~~~~while ( a [ i ] % pri [ j ] == 0 ) { a [ i ] /= pri [ j ] ; }  $ ~~~}  $ ~~~if ( a [ i ] > 1 ) { cnt [ a [ i ] ] ++ ; }  $ ~~~maxx = max ( maxx , cnt [ a [ i ] ] ) ;  $ ~~}  $ ~~if ( maxx == 0 ) {  $ ~~~cout << - 1 << endl ;  $ ~~} else {  $ ~~~cout << n - maxx << endl ;  $ ~~}  $ ~}  $ ~return 0 ;  $ }
int a , x , b , temp ;  $ int main ( ) {  $ ~cin >> a ;  $ ~for ( x = 0 ; x < a ; x ++ ) {  $ ~~cin >> b ;  $ ~~if ( b == 1 ) temp ++ ;  $ ~}  $ ~if ( a == 1 && temp == 1 )  $ ~~cout << "YES" << endl ;  $ ~else if ( a != 1 && temp == a - 1 )  $ ~~cout << "YES" << endl ;  $ ~else  $ ~~cout << "NO" << endl ;  $ }
int main ( ) {  $ ~string s , ss ;  $ ~int L ;  $ ~while ( cin >> L ) {  $ ~~getchar ( ) ;  $ ~~cin >> s ;  $ ~~int k = 1 ;  $ ~~for ( int i = 0 ; i < L ; i ++ ) {  $ ~~~if ( s [ i ] == '1' && k ) {  $ ~~~~ss . push_back ( '1' ) ;  $ ~~~~k = 0 ;  $ ~~~~continue ;  $ ~~~}  $ ~~~if ( s [ i ] == '0' ) ss . push_back ( '0' ) ;  $ ~~}  $ ~~cout << ss << endl ;  $ ~~ss . clear ( ) ;  $ ~}  $ ~return 0 ;  $ }
int main ( ) {  $ ~long long s , n , arrx [ 10005 ] , arry [ 10005 ] , count = 0 ;  $ ~cin >> s >> n ;  $ ~for ( int i = 0 ; i < n ; i ++ ) { cin >> arrx [ i ] >> arry [ i ] ; }  $ ~for ( int c = 0 ; c < n - 1 ; c ++ ) {  $ ~~for ( int d = 0 ; d < n - c - 1 ; d ++ ) {  $ ~~~if ( arrx [ d ] > arrx [ d + 1 ] ) {  $ ~~~~int wap = arrx [ d ] ;  $ ~~~~arrx [ d ] = arrx [ d + 1 ] ;  $ ~~~~arrx [ d + 1 ] = wap ;  $ ~~~~wap = arry [ d ] ;  $ ~~~~arry [ d ] = arry [ d + 1 ] ;  $ ~~~~arry [ d + 1 ] = wap ;  $ ~~~}  $ ~~}  $ ~}  $ ~for ( int i = 0 ; i < n ; i ++ ) {  $ ~~if ( s > arrx [ i ] ) {  $ ~~~s += arry [ i ] ;  $ ~~} else {  $ ~~~cout << "NO\n" ;  $ ~~~return 0 ;  $ ~~}  $ ~}  $ ~cout << "YES\n" ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~int k , l [ 101 ] , i , x [ 101 ] ;  $ ~for ( i = 3 ; i <= 100 ; i ++ ) l [ i ] = i * ( i - 1 ) * ( i - 2 ) / 6 ;  $ ~for ( i = 1 ; i <= 100 ; i ++ ) x [ i ] = i * ( i + 1 ) / 2 ;  $ ~while ( cin >> k ) {  $ ~~int ll = 0 , ans [ 101 ] [ 101 ] = { 0 } ;  $ ~~for ( i = 3 ; i <= 100 ; i ++ )  $ ~~~if ( k < l [ i ] ) break ;  $ ~~i -- ;  $ ~~k -= l [ i ] ;  $ ~~int j , count = i , ii ;  $ ~~for ( j = 0 ; j < i ; j ++ )  $ ~~~for ( ii = j + 1 ; ii < i ; ii ++ ) ans [ ii ] [ j ] = ans [ j ] [ ii ] = 1 ;  $ ~~for ( j = i ; j > 0 ; )  $ ~~~if ( k >= x [ j ] ) {  $ ~~~~for ( ii = 0 ; ii <= j ; ii ++ ) ans [ ii ] [ count ] = ans [ count ] [ ii ] = 1 ;  $ ~~~~count ++ ;  $ ~~~~k -= x [ j ] ;  $ ~~~} else  $ ~~~~j -- ;  $ ~~cout << count << endl ;  $ ~~for ( ii = 0 ; ii < count ; ii ++ ) {  $ ~~~for ( j = 0 ; j < count - 1 ; j ++ ) cout << ans [ ii ] [ j ] ;  $ ~~~cout << ans [ ii ] [ count - 1 ] << endl ;  $ ~~~;  $ ~~}  $ ~}  $ }
int n ;  $ int main ( ) {  $ ~string s ;  $ ~cin >> s ;  $ ~int a , b ;  $ ~a = b = 0 ;  $ ~int i = 0 ;  $ ~for ( ; i < s . size ( ) ; i ++ ) {  $ ~~if ( s [ i ] == '|' ) a ++ ;  $ ~~if ( s [ i ] == '=' ) break ;  $ ~}  $ ~for ( ; i < s . size ( ) ; i ++ )  $ ~~if ( s [ i ] == '|' ) b ++ ;  $ ~if ( abs ( a - b ) != 2 && a != b )  $ ~~cout << "Impossible" ;  $ ~else {  $ ~~if ( a == b )  $ ~~~cout << s ;  $ ~~else if ( a < b ) {  $ ~~~cout << '|' ;  $ ~~~for ( int i = 0 ; i < s . size ( ) - 1 ; i ++ ) cout << s [ i ] ;  $ ~~} else {  $ ~~~if ( s [ 1 ] != '+' ) {  $ ~~~~for ( int i = 1 ; i < s . size ( ) ; i ++ ) cout << s [ i ] ;  $ ~~~~cout << '|' ;  $ ~~~} else {  $ ~~~~cout << s [ 0 ] << s [ 1 ] ;  $ ~~~~s += '|' ;  $ ~~~~for ( int i = 3 ; i < s . size ( ) ; i ++ ) cout << s [ i ] ;  $ ~~~}  $ ~~}  $ ~}  $ ~cout << endl ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~int n , res = 0 ;  $ ~string s ;  $ ~cin >> n >> s ;  $ ~for ( int i = 0 ; i < n ; ++ i ) {  $ ~~if ( s [ i ] != '<' ) break ;  $ ~~res ++ ;  $ ~}  $ ~for ( int i = n - 1 ; i >= 0 ; -- i ) {  $ ~~if ( s [ i ] != '>' ) break ;  $ ~~res ++ ;  $ ~}  $ ~cout << res << endl ;  $ ~return 0 ;  $ }
bool h [ 3000 ] , v [ 3000 ] ;  $ vector < int > ans ;  $ int main ( ) {  $ ~int n ;  $ ~cin >> n ;  $ ~int a , b ;  $ ~for ( int i = 0 ; i < n * n ; ++ i ) {  $ ~~cin >> a >> b ;  $ ~~if ( ! h [ a ] && ! v [ b ] )  $ ~~~ans . push_back ( i + 1 ) ;  $ ~~else  $ ~~~continue ;  $ ~~h [ a ] = v [ b ] = true ;  $ ~}  $ ~for ( int i = 0 ; i < ans . size ( ) ; ++ i ) cout << ans [ i ] << ( i + 1 == ans . size ( ) ? '\n' : ' ' ) ;  $ ~return 0 ;  $ }
const int maxn = 1e6 ;  $ int n , t , f ;  $ int main ( ) {  $ ~bool b = true ;  $ ~cin >> n ;  $ ~for ( int i = int ( 0 ) ; i < int ( n ) ; i ++ ) {  $ ~~int x ;  $ ~~cin >> x ;  $ ~~if ( x == 25 )  $ ~~~t ++ ;  $ ~~else if ( x == 50 ) {  $ ~~~if ( t >= 1 )  $ ~~~~t -- , f ++ ;  $ ~~~else  $ ~~~~b = false ;  $ ~~} else if ( x == 100 ) {  $ ~~~if ( f >= 1 && t >= 1 )  $ ~~~~f -- , t -- ;  $ ~~~else if ( f <= 0 && t >= 3 )  $ ~~~~t -= 3 ;  $ ~~~else  $ ~~~~b = false ;  $ ~~}  $ ~}  $ ~b ? cout << "YES" << '\n' : cout << "NO" << '\n' ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~int a , b , c , d , i = 0 , j = 0 ;  $ ~cin >> a >> b >> c >> d ;  $ ~while ( i < 10000 ) {  $ ~~i ++ ;  $ ~~if ( d > b ) {  $ ~~~b += a ;  $ ~~} else if ( d < b ) {  $ ~~~d += c ;  $ ~~} else if ( d == b ) {  $ ~~~cout << d << endl ;  $ ~~~return 0 ;  $ ~~} else {  $ ~~~break ;  $ ~~}  $ ~}  $ ~cout << "-1" << endl ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~double a , b , c , d , e , f ;  $ ~cin >> a >> b >> c >> d >> e >> f ;  $ ~if ( a * c * e < b * d * f || ( ! c && d ) || ( ! a && b && d ) ) {  $ ~~puts ( "Ron" ) ;  $ ~} else {  $ ~~puts ( "Hermione" ) ;  $ ~}  $ ~return 0 ;  $ }
string s ;  $ int n , k ;  $ int main ( ) {  $ ~cin >> s >> k ;  $ ~n = ( int ) ( s ) . size ( ) ;  $ ~if ( n % k ) {  $ ~~cout << "NO"  $ ~~~<< "\n" ;  $ ~~return 0 ;  $ ~}  $ ~int step = n / k ;  $ ~for ( int i = ( 0 ) ; i <= ( k - 1 ) ; i ++ ) {  $ ~~for ( int j = ( 0 ) ; j <= ( step - 1 ) ; j ++ ) {  $ ~~~if ( s [ i * step + j ] != s [ i * step + step - j - 1 ] ) {  $ ~~~~cout << "NO"  $ ~~~~~<< "\n" ;  $ ~~~~return 0 ;  $ ~~~}  $ ~~}  $ ~}  $ ~cout << "YES"  $ ~~<< "\n" ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~long long l1 , r1 , l2 , r2 , k ;  $ ~cin >> l1 >> r1 >> l2 >> r2 >> k ;  $ ~long long l = max ( l1 , l2 ) ;  $ ~long long r = min ( r1 , r2 ) ;  $ ~if ( l > r )  $ ~~cout << 0 << endl ;  $ ~else {  $ ~~if ( k >= l && k <= r ) {  $ ~~~cout << abs ( r - l ) << endl ;  $ ~~} else {  $ ~~~cout << abs ( r - l + 1 ) << endl ;  $ ~~}  $ ~}  $ }
const int N = 5e3 ;  $ const long long mod = 1e9 + 7 ;  $ long long dp [ N + 2 ] [ N + 2 ] , ans ;  $ string a , b ;  $ int main ( ) {  $ ~cin >> a >> b ;  $ ~for ( int i = a . size ( ) - 1 ; i >= 0 ; i -- ) {  $ ~~for ( int j = b . size ( ) - 1 ; j >= 0 ; j -- ) {  $ ~~~dp [ i ] [ j ] = dp [ i ] [ j + 1 ] ;  $ ~~~if ( a [ i ] == b [ j ] ) dp [ i ] [ j ] = ( dp [ i ] [ j ] + dp [ i + 1 ] [ j + 1 ] + 1 ) % mod ;  $ ~~}  $ ~~ans = ( ans + dp [ i ] [ 0 ] ) % mod ;  $ ~}  $ ~cout << ans << endl ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~char s [ 100005 ] ;  $ ~int j = 0 ;  $ ~gets ( s ) ;  $ ~while ( s [ j ] == 'a' ) j ++ ;  $ ~if ( s [ j ] == '\0' ) {  $ ~~s [ j - 1 ] = 'z' ;  $ ~~puts ( s ) ;  $ ~~return 0 ;  $ ~}  $ ~for ( int i = j ; s [ i ] != 'a' && s [ i ] != '\0' ; i ++ ) s [ i ] -- ;  $ ~puts ( s ) ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~int n , k ;  $ ~string str ;  $ ~cin >> n >> k ;  $ ~cin >> str ;  $ ~int m = 0 ;  $ ~for ( int i = 0 ; i < n - 1 ; i ++ ) {  $ ~~if ( str . substr ( 0 , i + 1 ) == str . substr ( n - i - 1 ) ) { m = i + 1 ; }  $ ~}  $ ~cout << str ;  $ ~for ( int i = 0 ; i <= k - 2 ; i ++ ) { cout << str . substr ( m ) ; }  $ ~cout << endl ;  $ ~return 0 ;  $ }
int n , m , v [ 505 ] , e [ 505 ] [ 505 ] , x , y , z ;  $ double maxx ;  $ int main ( ) {  $ ~memset ( e , - 1 , sizeof ( e ) ) ;  $ ~cin >> n >> m ;  $ ~for ( int i = 1 ; i <= n ; i ++ ) { cin >> v [ i ] ; }  $ ~for ( int i = 1 ; i <= m ; i ++ ) {  $ ~~cin >> x >> y >> z ;  $ ~~e [ x ] [ y ] = z ;  $ ~~e [ y ] [ x ] = z ;  $ ~}  $ ~for ( int i = 1 ; i <= n ; i ++ ) {  $ ~~for ( int j = i ; j <= n ; j ++ ) { maxx = max ( maxx , ( double ) ( v [ i ] + v [ j ] ) / e [ i ] [ j ] ) ; }  $ ~}  $ ~cout << fixed << setprecision ( 15 ) << maxx << endl ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~int n , tomas = 1 , highest ;  $ ~cin >> n ;  $ ~int a [ n ] [ 4 ] ;  $ ~for ( int i = 0 ; i < n ; i ++ ) {  $ ~~for ( int j = 0 ; j < 4 ; j ++ ) { cin >> a [ i ] [ j ] ; }  $ ~}  $ ~highest = ( a [ 0 ] [ 0 ] + a [ 0 ] [ 1 ] + a [ 0 ] [ 2 ] + a [ 0 ] [ 3 ] ) ;  $ ~for ( int i = 1 ; i < n ; i ++ ) {  $ ~~if ( a [ i ] [ 0 ] + a [ i ] [ 1 ] + a [ i ] [ 2 ] + a [ i ] [ 3 ] > highest ) { tomas ++ ; }  $ ~}  $ ~cout << tomas << endl ;  $ ~return 0 ;  $ }
long long a [ 100004 ] ;  $ int main ( ) {  $ ~int n ;  $ ~cin >> n ;  $ ~for ( int i = 1 ; i <= n ; i ++ ) cin >> a [ i ] ;  $ ~long long count = 0 , m = abs ( a [ 1 ] - a [ 2 ] ) ;  $ ~int s = 1 ;  $ ~for ( int i = 1 ; i <= n - 1 ; i ++ ) {  $ ~~count += abs ( a [ i ] - a [ i + 1 ] ) * s ;  $ ~~s *= - 1 ;  $ ~~m = max ( m , count ) ;  $ ~~if ( count < 0 ) {  $ ~~~count = 0 ;  $ ~~~s = 1 ;  $ ~~~continue ;  $ ~~}  $ ~}  $ ~count = 0 ;  $ ~s = 1 ;  $ ~for ( int i = 2 ; i <= n - 1 ; i ++ ) {  $ ~~count += abs ( a [ i ] - a [ i + 1 ] ) * s ;  $ ~~s *= - 1 ;  $ ~~m = max ( m , count ) ;  $ ~~if ( count < 0 ) {  $ ~~~count = 0 ;  $ ~~~s = 1 ;  $ ~~~continue ;  $ ~~}  $ ~}  $ ~cout << m << endl ;  $ ~return 0 ;  $ }
const int N = 1e6 + 5 , Mod = 1e9 + 7 ;  $ int main ( ) {  $ ~int n ;  $ ~cin >> n ;  $ ~if ( n % 4 > 1 ) cout << "-1\n" , exit ( 0 ) ;  $ ~int Arr [ n + 2 ] ;  $ ~if ( n & 1 ) Arr [ n / 2 + 1 ] = n / 2 + 1 ;  $ ~for ( int i = 1 ; i <= n / 2 ; i += 2 ) {  $ ~~Arr [ i ] = 2 + ( i - 1 ) ;  $ ~~Arr [ i + 1 ] = n - ( i - 1 ) ;  $ ~~Arr [ n - i + 1 ] = n - 1 - ( i - 1 ) ;  $ ~~Arr [ n - i ] = 1 + ( i - 1 ) ;  $ ~}  $ ~for ( int i = 1 ; i <= n ; i ++ ) {  $ ~~if ( i > 1 ) cout << " " ;  $ ~~cout << Arr [ i ] ;  $ ~}  $ ~cout << "\n" ;  $ ~return 0 ;  $ }
long long a , b , c , d , e , f ;  $ string Ron = "Ron" , Hermione = "Hermione" ;  $ int main ( ) {  $ ~cin >> a >> b >> c >> d >> e >> f ;  $ ~if ( c == 0 and d != 0 ) {  $ ~~cout << Ron << '\n' ;  $ ~} else if ( a == 0 and b != 0 and c != 0 and d != 0 ) {  $ ~~cout << Ron << '\n' ;  $ ~} else if ( b == 0 or d == 0 or f == 0 ) {  $ ~~cout << Hermione << '\n' ;  $ ~} else if ( a == 0 or c == 0 or e == 0 ) {  $ ~~cout << Ron << '\n' ;  $ ~} else {  $ ~~long long bc = __gcd ( b , c ) ;  $ ~~long long bk = c / bc ;  $ ~~long long ck = b / bc ;  $ ~~a = a * bk ;  $ ~~b = b * bk ;  $ ~~c = c * ck ;  $ ~~d = d * ck ;  $ ~~long long de = __gcd ( d , e ) ;  $ ~~long long dk = e / de ;  $ ~~long long ek = d / de ;  $ ~~a = a * dk ;  $ ~~b = b * dk ;  $ ~~c = c * dk ;  $ ~~d = d * dk ;  $ ~~e = e * ek ;  $ ~~f = f * ek ;  $ ~~cout << ( a < f ? Ron : Hermione ) << '\n' ;  $ ~}  $ }
long long l1 , l2 , r1 , r2 , w ;  $ int main ( ) {  $ ~cin >> l1 >> r1 >> l2 >> r2 >> w ;  $ ~if ( ( l1 > r2 ) || ( r1 < l2 ) )  $ ~~cout << 0 << endl ;  $ ~else {  $ ~~if ( w >= max ( l1 , l2 ) && w <= min ( r1 , r2 ) ) {  $ ~~~cout << min ( r1 , r2 ) - max ( l1 , l2 ) << endl ;  $ ~~} else {  $ ~~~cout << min ( r1 , r2 ) - max ( l1 , l2 ) + 1 << endl ;  $ ~~}  $ ~}  $ }
int isprime ( long long x ) {  $ ~long long fact = 0 ;  $ ~for ( long long i = 2 ; i <= sqrt ( x ) ; i ++ ) {  $ ~~if ( x % i == 0 ) {  $ ~~~fact ++ ;  $ ~~~break ;  $ ~~}  $ ~}  $ ~if ( fact == 0 )  $ ~~return 1 ;  $ ~else  $ ~~return 0 ;  $ }  $ int main ( ) {  $ ~long long t ;  $ ~cin >> t ;  $ ~for ( long long i = 1 ; i <= 1000 ; i ++ ) {  $ ~~if ( isprime ( t * i + 1 ) == 0 ) {  $ ~~~cout << i << endl ;  $ ~~~break ;  $ ~~}  $ ~}  $ }
int main ( ) {  $ ~int x , y ;  $ ~int ans ;  $ ~while ( cin >> x >> y ) {  $ ~~if ( x == 0 && y == 0 ) {  $ ~~~cout << "0" << endl ;  $ ~~~continue ;  $ ~~}  $ ~~int n = max ( abs ( x ) , abs ( y ) ) ;  $ ~~ans = ( n - 1 ) * 4 ;  $ ~~if ( x >= n - 1 && x <= n && y == 1 - n )  $ ~~~ans ;  $ ~~else if ( x == n && y >= 1 - n && y <= n )  $ ~~~ans ++ ;  $ ~~else if ( x >= - n && x <= n && y == n )  $ ~~~ans += 2 ;  $ ~~else if ( x == - n && y >= - n && y <= n )  $ ~~~ans += 3 ;  $ ~~else if ( x >= - n && x <= n && y == - n )  $ ~~~ans += 4 ;  $ ~~cout << ans << endl ;  $ ~}  $ ~return 0 ;  $ }
int main ( ) {  $ ~int n , t ;  $ ~cin >> n >> t ;  $ ~if ( t != 10 ) {  $ ~~for ( int i = 0 ; i < n ; i ++ ) cout << t ;  $ ~~cout << endl ;  $ ~} else {  $ ~~if ( n == 1 )  $ ~~~cout << "-1\n" ;  $ ~~else {  $ ~~~cout << '1' ;  $ ~~~for ( int i = 0 ; i < n - 1 ; i ++ ) { cout << '0' ; }  $ ~~~cout << endl ;  $ ~~}  $ ~}  $ ~return 0 ;  $ }
string s , q ;  $ int dp [ 5002 ] [ 5002 ] [ 2 ] ;  $ const int mod = 1e9 + 7 ;  $ int solve ( int i , int j , int st ) {  $ ~if ( st == 2 ) return 1 ;  $ ~if ( j == q . size ( ) || i == s . size ( ) ) return 0 ;  $ ~int & ret = dp [ i ] [ j ] [ st ] ;  $ ~if ( ~ ret ) return ret ;  $ ~ret = 0 ;  $ ~if ( st == 0 ) {  $ ~~ret += solve ( i + 1 , j , st ) ;  $ ~~if ( ret >= mod ) ret -= mod ;  $ ~~if ( s [ i ] == q [ j ] ) {  $ ~~~ret += solve ( i + 1 , j + 1 , 2 ) ;  $ ~~~if ( ret >= mod ) ret -= mod ;  $ ~~~ret += solve ( i + 1 , j + 1 , 1 ) ;  $ ~~~if ( ret >= mod ) ret -= mod ;  $ ~~}  $ ~~ret += solve ( i , j + 1 , 1 ) ;  $ ~~if ( ret >= mod ) ret -= mod ;  $ ~} else {  $ ~~if ( s [ i ] == q [ j ] ) {  $ ~~~ret += solve ( i + 1 , j + 1 , 2 ) ;  $ ~~~if ( ret >= mod ) ret -= mod ;  $ ~~~ret += solve ( i + 1 , j + 1 , st ) ;  $ ~~~if ( ret >= mod ) ret -= mod ;  $ ~~}  $ ~~ret += solve ( i , j + 1 , st ) ;  $ ~~if ( ret >= mod ) ret -= mod ;  $ ~}  $ ~return ret ;  $ }  $ int main ( ) {  $ ~cin >> s >> q ;  $ ~memset ( dp , - 1 , sizeof dp ) ;  $ ~cout << solve ( 0 , 0 , 0 ) << endl ;  $ ~return 0 ;  $ }
int n , a , b , c , d , sum , l1 , l2 ;  $ int main ( ) {  $ ~cin >> n >> a >> b >> c >> d ;  $ ~if ( a == 0 )  $ ~~l1 = b ;  $ ~else if ( a == n )  $ ~~l1 = 3 * n - b ;  $ ~else if ( b == 0 )  $ ~~l1 = 4 * n - a ;  $ ~else if ( b == n )  $ ~~l1 = n + a ;  $ ~if ( c == 0 )  $ ~~l2 = d ;  $ ~else if ( c == n )  $ ~~l2 = 3 * n - d ;  $ ~else if ( d == 0 )  $ ~~l2 = 4 * n - c ;  $ ~else if ( d == n )  $ ~~l2 = n + c ;  $ ~cout << min ( abs ( l1 - l2 ) , 4 * n - abs ( l1 - l2 ) ) << endl ;  $ }
const int maxn = 2e6 + 10 ;  $ const int eps = 1e-14 ;  $ const int mod = 1e9 + 7 ;  $ const long long inf = 1e18 ;  $ int pri [ maxn ] ;  $ int a [ 500 ] ;  $ int npri [ maxn ] , npal [ maxn ] ;  $ void getprime ( ) {  $ ~memset ( pri , 0 , sizeof pri ) ;  $ ~for ( int i = 2 ; i < maxn ; i ++ ) {  $ ~~if ( ! pri [ i ] ) {  $ ~~~for ( int j = 2 * i ; j < maxn ; j += i ) pri [ j ] = 1 ;  $ ~~}  $ ~}  $ }  $ int getpal ( int x ) {  $ ~int cnt = 0 ;  $ ~while ( x ) {  $ ~~a [ cnt ++ ] = x % 10 ;  $ ~~x /= 10 ;  $ ~}  $ ~for ( int i = 0 ; i < cnt / 2 ; i ++ ) {  $ ~~if ( a [ i ] != a [ cnt - i - 1 ] ) return 0 ;  $ ~}  $ ~return 1 ;  $ }  $ void solve ( ) {  $ ~for ( int i = 2 ; i < maxn ; i ++ ) { npri [ i ] = npri [ i - 1 ] + ( pri [ i ] == 0 ) ; }  $ ~for ( int i = 1 ; i < maxn ; i ++ ) { npal [ i ] = npal [ i - 1 ] + getpal ( i ) ; }  $ }  $ int main ( ) {  $ ~getprime ( ) ;  $ ~solve ( ) ;  $ ~int p , q ;  $ ~cin >> p >> q ;  $ ~for ( int i = maxn - 1 ; i >= 0 ; i -- ) {  $ ~~if ( q * npri [ i ] <= npal [ i ] * p ) {  $ ~~~cout << i << endl ;  $ ~~~return 0 ;  $ ~~}  $ ~}  $ ~cout << "Palindromic tree is better than splay tree" << endl ;  $ ~return 0 ;  $ }
long long N , K , a [ 100005 ] , ans ;  $ map < long long , bool > b ;  $ int main ( ) {  $ ~cin >> N >> K ;  $ ~ans = 0 ;  $ ~for ( int i = 1 ; i <= N ; i ++ ) { cin >> a [ i ] ; }  $ ~sort ( a + 1 , a + N + 1 ) ;  $ ~for ( int i = 1 ; i <= N ; i ++ ) {  $ ~~if ( ! b [ a [ i ] ] ) {  $ ~~~ans ++ ;  $ ~~~b [ a [ i ] * K ] = 1 ;  $ ~~}  $ ~}  $ ~cout << ans << endl ;  $ }
int main ( ) {  $ ~int a ;  $ ~cin >> a ;  $ ~int arr [ 1000100 ] = { 0 } ;  $ ~int b ;  $ ~while ( a -- ) {  $ ~~cin >> b ;  $ ~~arr [ b ] ++ ;  $ ~}  $ ~int ans = 0 ;  $ ~int sum = 0 ;  $ ~for ( int i = 0 ; i < 1000100 ; i ++ ) {  $ ~~sum = sum + arr [ i ] ;  $ ~~arr [ i ] = sum % 2 ;  $ ~~sum = sum / 2 ;  $ ~~if ( arr [ i ] ) ans ++ ;  $ ~}  $ ~cout << ans << endl ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~int n ;  $ ~int64_t s ;  $ ~cin >> s >> n ;  $ ~pair < int , int > mp [ n ] ;  $ ~for ( int i = 0 ; i < n ; i ++ ) {  $ ~~int a , b ;  $ ~~cin >> a >> b ;  $ ~~mp [ i ] . first = a ;  $ ~~mp [ i ] . second = b ;  $ ~}  $ ~sort ( mp , mp + n ) ;  $ ~int c = 0 ;  $ ~for ( int i = 0 ; i < n && mp [ i ] . first < s ; i ++ ) {  $ ~~s += mp [ i ] . second ;  $ ~~c ++ ;  $ ~}  $ ~if ( c != n )  $ ~~cout << "NO" << endl ;  $ ~else  $ ~~cout << "YES" << endl ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~int n , d , i , j ;  $ ~long long L , R ;  $ ~cin >> L >> R ;  $ ~long long ans = 0 ;  $ ~long long ten = 1 ;  $ ~for ( ( n ) = 0 ; ( n ) < ( int ) ( 18 ) ; ( n ) ++ ) {  $ ~~for ( d = 1 ; d <= 9 ; d ++ ) {  $ ~~~long long low = d * ten , high = ( d + 1 ) * ten - 1 ;  $ ~~~low = max ( low , L ) ;  $ ~~~high = min ( high , R ) ;  $ ~~~while ( low % 10 != d ) low ++ ;  $ ~~~while ( ( high % 10 + 10 ) % 10 != d ) high -- ;  $ ~~~if ( low <= high ) ans += ( high - low ) / 10 + 1 ;  $ ~~}  $ ~~ten *= 10 ;  $ ~}  $ ~cout << ans << endl ;  $ ~return 0 ;  $ }
char str [ 101 ] ;  $ int main ( ) {  $ ~int n , sum = 0 ;  $ ~cin >> n ;  $ ~for ( int i = 0 ; i < n ; i ++ ) {  $ ~~cin >> str [ i ] ;  $ ~~if ( str [ i ] == '0' ) sum ++ ;  $ ~}  $ ~if ( n == 1 && str [ 0 ] == '0' )  $ ~~cout << 0 << endl ;  $ ~else {  $ ~~cout << 1 ;  $ ~~for ( int i = 0 ; i < sum ; i ++ ) cout << 0 ;  $ ~~cout << endl ;  $ ~}  $ }
int main ( ) {  $ ~long long int i , n , m , k , arr [ 100000 ] ;  $ ~long long int temp = INFINITY ;  $ ~cin >> n >> m >> k ;  $ ~for ( i = 0 ; i < n ; i ++ ) { cin >> arr [ i ] ; }  $ ~if ( n % 2 == 0 || ( n / 2 ) + 1 > m ) {  $ ~~cout << "0" << endl ;  $ ~} else {  $ ~~for ( i = 0 ; i < n ; i += 2 ) { temp = min ( temp , arr [ i ] ) ; }  $ ~~long long s = ( m / ( ( n / 2 ) + 1 ) ) * k ;  $ ~~temp = min ( temp , s ) ;  $ ~~cout << temp << endl ;  $ ~}  $ ~return 0 ;  $ }
int n ;  $ int sum ;  $ int a [ 101 ] ;  $ int main ( ) {  $ ~cin >> n ;  $ ~for ( int i = 1 ; i <= n ; i ++ ) {  $ ~~cin >> a [ i ] ;  $ ~~sum += a [ i ] ;  $ ~}  $ ~if ( sum != 0 ) {  $ ~~cout << "YES" << endl ;  $ ~~cout << "1" << endl ;  $ ~~cout << "1 " << n << endl ;  $ ~~return 0 ;  $ ~}  $ ~if ( sum == 0 ) {  $ ~~for ( int i = 1 ; i <= n ; i ++ ) {  $ ~~~sum += a [ i ] ;  $ ~~~if ( sum != 0 ) {  $ ~~~~cout << "YES" << endl ;  $ ~~~~cout << "2" << endl ;  $ ~~~~cout << "1 " << i << endl ;  $ ~~~~cout << i + 1 << " " << n << endl ;  $ ~~~~return 0 ;  $ ~~~}  $ ~~}  $ ~}  $ ~cout << "NO" << endl ;  $ }
int main ( ) {  $ ~int a , n , m , i , j , t [ 200010 ] = { 0 } , p , num ;  $ ~while ( cin >> n >> m ) {  $ ~~for ( i = 1 ; i <= n ; i ++ ) cin >> t [ i ] ;  $ ~~for ( i = 1 ; i <= n ; i ++ ) {  $ ~~~t [ i ] += t [ i - 1 ] ;  $ ~~~num = t [ i ] / m ;  $ ~~~t [ i ] -= num * m ;  $ ~~~cout << num ;  $ ~~~if ( i != n ) cout << ' ' ;  $ ~~}  $ ~~cout << endl ;  $ ~}  $ ~return 0 ;  $ }
int i , k , x , a , b , c , n ;  $ int main ( ) {  $ ~cin >> n ;  $ ~for ( i = 0 ; i < n ; i ++ ) {  $ ~~cin >> x ;  $ ~~if ( x == 25 ) {  $ ~~~a ++ ;  $ ~~} else if ( x == 50 ) {  $ ~~~b ++ ;  $ ~~~if ( a > 0 ) {  $ ~~~~a -- ;  $ ~~~} else {  $ ~~~~cout << "NO" << endl ;  $ ~~~~break ;  $ ~~~}  $ ~~} else if ( x == 100 ) {  $ ~~~if ( b > 0 && a > 0 ) {  $ ~~~~b -- ;  $ ~~~~a -- ;  $ ~~~} else if ( a > 2 ) {  $ ~~~~a -= 3 ;  $ ~~~} else {  $ ~~~~cout << "NO" << endl ;  $ ~~~~break ;  $ ~~~}  $ ~~}  $ ~}  $ ~if ( i == n ) { cout << "YES" << endl ; }  $ }
int main ( ) {  $ ~int n ;  $ ~cin >> n ;  $ ~int a [ n ] , b [ n ] ;  $ ~for ( int i = 0 ; i < n ; i ++ ) { cin >> a [ i ] >> b [ i ] ; }  $ ~int ans = 0 ;  $ ~for ( int j = 0 ; j < n ; j ++ ) {  $ ~~for ( int i = 0 ; i < n ; i ++ ) {  $ ~~~if ( i != j && a [ j ] == b [ i ] ) {  $ ~~~~ans ++ ;  $ ~~~~break ;  $ ~~~}  $ ~~}  $ ~}  $ ~cout << n - ans << endl ;  $ }
const int MAX = 1000100 ;  $ int a [ MAX ] ;  $ int main ( ) {  $ ~int n ;  $ ~cin >> n ;  $ ~for ( int i = 0 ; i < n ; i ++ ) {  $ ~~int x ;  $ ~~cin >> x ;  $ ~~a [ x ] ++ ;  $ ~}  $ ~int ans = 0 ;  $ ~for ( int i = 0 ; i < MAX - 1 ; i ++ ) {  $ ~~a [ i + 1 ] += a [ i ] / 2 ;  $ ~~a [ i ] %= 2 ;  $ ~~ans += a [ i ] ;  $ ~}  $ ~cout << ans << endl ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~int n , k , a [ 1010 ] ;  $ ~cin >> n >> k ;  $ ~for ( int i = 1 ; i <= 2 * n + 1 ; i ++ ) { cin >> a [ i ] ; }  $ ~cout << a [ 1 ] ;  $ ~for ( int i = 2 ; i <= 2 * n ; i ++ ) {  $ ~~if ( i % 2 == 0 ) {  $ ~~~int b = a [ i ] - 1 ;  $ ~~~if ( a [ i - 1 ] < b && a [ i + 1 ] < b && k ) {  $ ~~~~a [ i ] = b ;  $ ~~~~k -- ;  $ ~~~}  $ ~~}  $ ~~cout << " " << a [ i ] ;  $ ~}  $ ~cout << " " << a [ 2 * n + 1 ] << endl ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~string str = "abcdefghijklmnopqrstuvwxyz" ;  $ ~int x , y ;  $ ~cin >> x >> y ;  $ ~string str1 , str2 ;  $ ~for ( int i = 0 ; i < y ; i ++ ) { str1 += str [ i ] ; }  $ ~int j = 0 ;  $ ~for ( int i = 0 ; i < x ; i ++ ) {  $ ~~str2 += str [ j ] ;  $ ~~if ( j == str1 . length ( ) - 1 ) {  $ ~~~j = 0 ;  $ ~~} else {  $ ~~~j ++ ;  $ ~~}  $ ~}  $ ~cout << str2 << endl ;  $ }
string str ;  $ bool isPalindrome ( int idx , int N ) {  $ ~for ( int i = 0 ; i < N / 2 ; i ++ ) {  $ ~~if ( str [ i + idx ] != str [ N - 1 - i + idx ] ) return false ;  $ ~}  $ ~return true ;  $ }  $ int main ( ) {  $ ~cin >> str ;  $ ~int n , k ;  $ ~cin >> k ;  $ ~n = str . length ( ) ;  $ ~int l = n / k ;  $ ~bool possible = true ;  $ ~if ( l * k == n ) {  $ ~~int i = 0 ;  $ ~~while ( i < n ) {  $ ~~~if ( ! isPalindrome ( i , l ) ) {  $ ~~~~possible = false ;  $ ~~~~break ;  $ ~~~}  $ ~~~i += l ;  $ ~~}  $ ~} else  $ ~~possible = false ;  $ ~if ( possible )  $ ~~cout << "YES" ;  $ ~else  $ ~~cout << "NO" ;  $ ~cout << "\n" ;  $ ~return 0 ;  $ }
int a [ 1001 ] [ 4 ] ;  $ int main ( ) {  $ ~int n ;  $ ~string s ;  $ ~cin >> n ;  $ ~for ( int i = 0 ; i < n ; i ++ ) {  $ ~~for ( int j = 0 ; j < 2 ; j ++ ) {  $ ~~~cin >> s ;  $ ~~~int kp = 0 ;  $ ~~~if ( j == 1 ) kp = 1 ;  $ ~~~a [ i ] [ j * 2 ] = s [ ( 0 + kp ) % 2 ] - '0' ;  $ ~~~a [ i ] [ j * 2 + 1 ] = s [ ( 1 + kp ) % 2 ] - '0' ;  $ ~~}  $ ~~if ( i != n - 1 ) cin >> s ;  $ ~}  $ ~int cnt = 0 , cnt2 = 1 ;  $ ~vector < int > k ;  $ ~for ( int i = 0 ; i < n ; i ++ ) {  $ ~~int ss [ 4 ] = { 0 , 0 , 0 , 0 } ;  $ ~~for ( int j = 0 ; j < 4 ; j ++ ) {  $ ~~~for ( int z = 0 ; z < 4 ; z ++ ) { ss [ j ] = ss [ j ] * 10 + a [ i ] [ ( j + z ) % 4 ] ; }  $ ~~}  $ ~~k . push_back ( min ( min ( ss [ 0 ] , ss [ 1 ] ) , min ( ss [ 2 ] , ss [ 3 ] ) ) ) ;  $ ~}  $ ~int cn = 1 ;  $ ~sort ( k . begin ( ) , k . end ( ) ) ;  $ ~for ( int i = 1 ; i < k . size ( ) ; i ++ ) {  $ ~~if ( k [ i ] == k [ i - 1 ] ) continue ;  $ ~~cn ++ ;  $ ~}  $ ~cout << cn << endl ;  $ ~return 0 ;  $ }
int n , m , x , y , curr ;  $ vector < int > graph [ 100010 ] ;  $ vector < int > rgraph [ 100010 ] ;  $ int f [ 100010 ] ;  $ int a [ 100010 ] ;  $ bool used [ 100010 ] ;  $ bool rused [ 100010 ] ;  $ queue < int > q , rq ;  $ int main ( ) {  $ ~cin >> n >> m ;  $ ~for ( int i = 0 ; i < n ; i ++ ) {  $ ~~cin >> f [ i ] ;  $ ~~if ( f [ i ] == 1 ) {  $ ~~~q . push ( i ) ;  $ ~~~used [ i ] = true ;  $ ~~}  $ ~~if ( f [ i ] == 2 ) {  $ ~~~rq . push ( i ) ;  $ ~~~rused [ i ] = true ;  $ ~~}  $ ~}  $ ~for ( int i = 0 ; i < m ; i ++ ) {  $ ~~cin >> x >> y ;  $ ~~x -- ;  $ ~~y -- ;  $ ~~graph [ x ] . push_back ( y ) ;  $ ~~rgraph [ y ] . push_back ( x ) ;  $ ~}  $ ~while ( ! q . empty ( ) ) {  $ ~~curr = q . front ( ) ;  $ ~~q . pop ( ) ;  $ ~~a [ curr ] ++ ;  $ ~~for ( int i = 0 ; i < graph [ curr ] . size ( ) ; i ++ ) {  $ ~~~if ( ! used [ graph [ curr ] [ i ] ] ) {  $ ~~~~used [ graph [ curr ] [ i ] ] = true ;  $ ~~~~q . push ( graph [ curr ] [ i ] ) ;  $ ~~~}  $ ~~}  $ ~}  $ ~while ( ! rq . empty ( ) ) {  $ ~~curr = rq . front ( ) ;  $ ~~rq . pop ( ) ;  $ ~~a [ curr ] ++ ;  $ ~~if ( f [ curr ] != 1 ) {  $ ~~~for ( int i = 0 ; i < rgraph [ curr ] . size ( ) ; i ++ ) {  $ ~~~~if ( ! rused [ rgraph [ curr ] [ i ] ] ) {  $ ~~~~~rused [ rgraph [ curr ] [ i ] ] = true ;  $ ~~~~~rq . push ( rgraph [ curr ] [ i ] ) ;  $ ~~~~}  $ ~~~}  $ ~~}  $ ~}  $ ~for ( int i = 0 ; i < n ; i ++ ) { ( a [ i ] == 2 ) ? cout << 1 << endl : cout << 0 << endl ; }  $ }
const int maxn = 1E2 + 5 ;  $ int n , a [ maxn ] , r [ maxn ] , l [ maxn ] ;  $ bool cmp ( int a , int b ) {  $ ~return a > b ;  $ }  $ int main ( ) {  $ ~cin >> n ;  $ ~l [ 1 ] = 1 ;  $ ~int sum = 0 , k = 1 , cnt = 0 , pos ;  $ ~for ( int i = 1 ; i <= n ; i ++ ) {  $ ~~cin >> a [ i ] ;  $ ~~sum += a [ i ] ;  $ ~~if ( a [ i ] == 0 ) { cnt ++ ; }  $ ~}  $ ~if ( n == cnt ) {  $ ~~cout << "NO" << endl ;  $ ~~return 0 ;  $ ~}  $ ~if ( sum != 0 ) {  $ ~~cout << "YES" << endl ;  $ ~~cout << "1" << endl ;  $ ~~cout << "1" << ' ' << n << endl ;  $ ~} else {  $ ~~for ( int i = 1 ; i <= n ; i ++ ) {  $ ~~~if ( a [ i ] ) {  $ ~~~~pos = i ;  $ ~~~~break ;  $ ~~~}  $ ~~}  $ ~~cout << "YES" << endl ;  $ ~~cout << "2" << endl ;  $ ~~cout << "1" << ' ' << pos << endl ;  $ ~~cout << pos + 1 << ' ' << n << endl ;  $ ~}  $ ~return 0 ;  $ }
int dig ( int x ) {  $ ~int res = 0 ;  $ ~while ( x ) {  $ ~~res ++ ;  $ ~~x /= 7 ;  $ ~}  $ ~return max ( 1 , res ) ;  $ }  $ int getmask ( int x , int dig ) {  $ ~int mask = 0 ;  $ ~while ( dig -- ) {  $ ~~int cm = ( 1 << ( x % 7 ) ) ;  $ ~~if ( ( mask & cm ) ) return - 1 ;  $ ~~mask |= cm ;  $ ~~x /= 7 ;  $ ~}  $ ~return mask ;  $ }  $ int msk1 [ 10000000 ] ;  $ int msk2 [ 10000000 ] ;  $ int main ( ) {  $ ~int n , m ;  $ ~cin >> n >> m ;  $ ~int d1 = dig ( n - 1 ) ;  $ ~int d2 = dig ( m - 1 ) ;  $ ~if ( d1 + d2 > 7 ) {  $ ~~cout << 0 << endl ;  $ ~~return 0 ;  $ ~}  $ ~for ( int i = 0 ; i < n ; i ++ ) { msk1 [ i ] = getmask ( i , d1 ) ; }  $ ~for ( int i = 0 ; i < m ; i ++ ) { msk2 [ i ] = getmask ( i , d2 ) ; }  $ ~int ans = 0 ;  $ ~for ( int i = 0 ; i < n ; i ++ ) {  $ ~~for ( int j = 0 ; j < m ; j ++ ) {  $ ~~~if ( msk1 [ i ] < 0 || msk2 [ j ] < 0 ) continue ;  $ ~~~if ( ( msk1 [ i ] & msk2 [ j ] ) == 0 ) { ans ++ ; }  $ ~~}  $ ~}  $ ~cout << ans << endl ;  $ ~return 0 ;  $ }
const double PI = acos ( - 1.0 ) ;  $ const double eps = 1e-6 ;  $ const int INF = 0 x3f3f3f3f ;  $ int main ( ) {  $ ~string str1 , str2 ;  $ ~char st1 [ 5 ] , st2 [ 5 ] ;  $ ~int counter ;  $ ~cin >> str1 >> str2 ;  $ ~counter = 0 ;  $ ~if ( str1 . size ( ) != str2 . size ( ) )  $ ~~cout << "NO" << endl ;  $ ~else {  $ ~~for ( int i = 0 ; i < str1 . size ( ) ; ++ i ) {  $ ~~~if ( str1 [ i ] != str2 [ i ] ) {  $ ~~~~if ( counter > 2 ) {  $ ~~~~~cout << "NO" << endl ;  $ ~~~~~return 0 ;  $ ~~~~}  $ ~~~~st1 [ counter ] = str1 [ i ] ;  $ ~~~~st2 [ counter ] = str2 [ i ] ;  $ ~~~~++ counter ;  $ ~~~}  $ ~~}  $ ~~if ( counter > 2 ) { cout << "NO" << endl ; }  $ ~~if ( counter == 1 ) cout << "NO" << endl ;  $ ~~if ( counter == 2 ) {  $ ~~~if ( ( st1 [ 0 ] == st2 [ 1 ] ) && ( st1 [ 1 ] ) == st2 [ 0 ] ) {  $ ~~~~cout << "YES" << endl ;  $ ~~~} else  $ ~~~~cout << "NO" << endl ;  $ ~~}  $ ~~if ( counter == 0 ) cout << "YES" << endl ;  $ ~}  $ }
string s ;  $ int a , b , c ;  $ int len ;  $ int main ( ) {  $ ~cin >> s ;  $ ~int n = s . length ( ) ;  $ ~int w [ n + 10 ] ;  $ ~for ( int i = 0 ; i < s . length ( ) ; i ++ ) {  $ ~~if ( s [ i ] == '(' ) {  $ ~~~a ++ ;  $ ~~} else if ( s [ i ] == '#' ) {  $ ~~~w [ ++ len ] = 1 ;  $ ~~~b ++ ;  $ ~~} else if ( s [ i ] == ')' ) {  $ ~~~b ++ ;  $ ~~}  $ ~~if ( b > a ) {  $ ~~~cout << - 1 << endl ;  $ ~~~return 0 ;  $ ~~}  $ ~}  $ ~for ( int i = s . length ( ) - 1 ; i >= 0 ; i -- ) {  $ ~~if ( s [ i ] == ')' ) {  $ ~~~c ++ ;  $ ~~} else if ( s [ i ] == '(' ) {  $ ~~~c -- ;  $ ~~} else if ( s [ i ] == '#' ) {  $ ~~~break ;  $ ~~}  $ ~~if ( c < 0 ) {  $ ~~~cout << - 1 << endl ;  $ ~~~return 0 ;  $ ~~}  $ ~}  $ ~w [ len ] += a - b ;  $ ~for ( int i = 1 ; i <= len ; i ++ ) { cout << w [ i ] << endl ; }  $ ~return 0 ;  $ }
int main ( ) {  $ ~int n , a , b , i , j ;  $ ~cin >> n ;  $ ~for ( i = 1 ; i <= 1000 ; i ++ ) {  $ ~~a = n * i + 1 ;  $ ~~for ( j = 2 ; j < a ; j ++ ) {  $ ~~~if ( a % j == 0 ) {  $ ~~~~cout << i << endl ;  $ ~~~~return 0 ;  $ ~~~}  $ ~~}  $ ~}  $ }
int main ( ) {  $ ~int n , m , i , len , flag = 0 ;  $ ~string s , x , s1 , s2 ;  $ ~cin >> n >> m ;  $ ~cin >> s >> x ;  $ ~for ( i = 0 ; i < n ; i ++ )  $ ~~if ( s [ i ] == '*' ) {  $ ~~~flag = 1 ;  $ ~~~break ;  $ ~~}  $ ~if ( n - 1 > m ) {  $ ~~cout << "NO" << endl ;  $ ~~return 0 ;  $ ~}  $ ~if ( flag ) {  $ ~~s1 = s . substr ( 0 , i ) ;  $ ~~s2 = s . substr ( i + 1 , n - i - 1 ) ;  $ ~~len = s2 . length ( ) ;  $ ~~if ( x . substr ( 0 , i ) == s1 && x . substr ( m - len , m - i ) == s2 )  $ ~~~cout << "YES" << endl ;  $ ~~else  $ ~~~cout << "NO" << endl ;  $ ~} else {  $ ~~if ( s == x )  $ ~~~cout << "YES" << endl ;  $ ~~else  $ ~~~cout << "NO" << endl ;  $ ~}  $ ~return 0 ;  $ }
void fun ( ) {  $ ~int n , capacity ;  $ ~cin >> n >> capacity ;  $ ~int count = 0 ;  $ ~int num [ n ] ;  $ ~int lib [ capacity ] , j = 0 ;  $ ~for ( int i = 0 ; i < n ; i ++ ) { cin >> num [ i ] ; }  $ ~for ( int i = 0 ; i < n ; i ++ ) {  $ ~~int found = 0 ;  $ ~~if ( i == 0 ) {  $ ~~~lib [ j ] = num [ i ] ;  $ ~~~count ++ ;  $ ~~~j ++ ;  $ ~~} else {  $ ~~~for ( int k = 0 ; k < j ; k ++ ) {  $ ~~~~if ( lib [ k ] == num [ i ] ) {  $ ~~~~~found = 1 ;  $ ~~~~~break ;  $ ~~~~}  $ ~~~}  $ ~~~if ( found == 0 ) {  $ ~~~~if ( j != capacity ) {  $ ~~~~~lib [ j ] = num [ i ] ;  $ ~~~~~j ++ ;  $ ~~~~~count ++ ;  $ ~~~~} else {  $ ~~~~~int min = j - 1 , flag , min2 = n - 1 , min3 = j - 1 , prevmin = - 1 , min4 = j - 1 ;  $ ~~~~~int counter = 0 ;  $ ~~~~~for ( int x = 0 ; x < j ; x ++ ) {  $ ~~~~~~flag = 0 ;  $ ~~~~~~for ( int y = i ; y < n ; y ++ ) {  $ ~~~~~~~if ( num [ y ] == lib [ x ] ) {  $ ~~~~~~~~min2 = y ;  $ ~~~~~~~~min3 = x ;  $ ~~~~~~~~flag = 1 ;  $ ~~~~~~~~counter ++ ;  $ ~~~~~~~~break ;  $ ~~~~~~~}  $ ~~~~~~}  $ ~~~~~~if ( flag == 0 ) {  $ ~~~~~~~min = x ;  $ ~~~~~~} else {  $ ~~~~~~~if ( prevmin < min2 ) {  $ ~~~~~~~~prevmin = min2 ;  $ ~~~~~~~~min4 = x ;  $ ~~~~~~~}  $ ~~~~~~}  $ ~~~~~}  $ ~~~~~if ( counter == j ) {  $ ~~~~~~lib [ min4 ] = num [ i ] ;  $ ~~~~~} else {  $ ~~~~~~lib [ min ] = num [ i ] ;  $ ~~~~~}  $ ~~~~~count ++ ;  $ ~~~~}  $ ~~~}  $ ~~}  $ ~}  $ ~cout << count << endl ;  $ }  $ int main ( ) {  $ ~fun ( ) ;  $ ~return 0 ;  $ }
const long long MAX_N = 1e7 ;  $ void solve ( ) {  $ ~long long a , b , c , d ;  $ ~cin >> a >> b >> c >> d ;  $ ~long long answer = - 1 ;  $ ~for ( long long x = 0 ; x <= MAX_N ; x ++ ) {  $ ~~long long temp = b + a * x - d ;  $ ~~if ( temp >= 0 and temp % c == 0 ) {  $ ~~~answer = temp + d ;  $ ~~~break ;  $ ~~}  $ ~}  $ ~cout << answer << endl ;  $ }  $ int main ( ) {  $ ~int t = 1 ;  $ ~while ( t -- ) solve ( ) ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~long long int i , n , m , k , arr [ 100000 ] ;  $ ~long long int ans = INFINITY ;  $ ~cin >> n >> m >> k ;  $ ~for ( i = 0 ; i < n ; i ++ ) { cin >> arr [ i ] ; }  $ ~if ( n % 2 == 0 || ( n / 2 ) + 1 > m ) {  $ ~~cout << "0" << endl ;  $ ~} else {  $ ~~for ( i = 0 ; i < n ; i += 2 ) { ans = min ( ans , arr [ i ] ) ; }  $ ~~long long s = m / ( ( n / 2 ) + 1 ) ;  $ ~~ans = min ( ans , s * k ) ;  $ ~~cout << ans << endl ;  $ ~}  $ ~return 0 ;  $ }
const int mod = 1e9 + 7 ;  $ const double eps = 1e-6 ;  $ vector < long long > q ;  $ void dfs ( long long x ) {  $ ~if ( x >= 10000000005 ) { return ; }  $ ~q . push_back ( x ) ;  $ ~dfs ( x * 10 + 4 ) ;  $ ~dfs ( x * 10 + 7 ) ;  $ }  $ int main ( ) {  $ ~long long l , r ;  $ ~dfs ( 0 ) ;  $ ~sort ( q . begin ( ) , q . end ( ) ) ;  $ ~while ( cin >> l >> r ) {  $ ~~long long ans_l = 0 , ans_r = 0 ;  $ ~~int len = q . size ( ) ;  $ ~~for ( int i = 1 ; i <= len ; i ++ ) {  $ ~~~if ( q [ i ] <= l - 1 ) {  $ ~~~~ans_l += ( q [ i ] - q [ i - 1 ] ) * q [ i ] ;  $ ~~~} else {  $ ~~~~ans_l += ( l - 1 - q [ i - 1 ] ) * q [ i ] ;  $ ~~~~break ;  $ ~~~}  $ ~~}  $ ~~for ( int i = 1 ; i <= len ; i ++ ) {  $ ~~~if ( q [ i ] <= r ) {  $ ~~~~ans_r += ( q [ i ] - q [ i - 1 ] ) * q [ i ] ;  $ ~~~} else {  $ ~~~~ans_r += ( r - q [ i - 1 ] ) * q [ i ] ;  $ ~~~~break ;  $ ~~~}  $ ~~}  $ ~~cout << ans_r - ans_l << endl ;  $ ~}  $ ~return 0 ;  $ }
const int MAX_N = 50 ;  $ const int MAX_M = 50 ;  $ int v [ MAX_N ] [ MAX_M ] ;  $ int u [ MAX_N ] [ MAX_M ] ;  $ int n , m ;  $ void dfs ( int x , int y , int first = 0 ) {  $ ~if ( ! first ) u [ y ] [ x ] = 1 ;  $ ~if ( x > 0 && v [ y ] [ x - 1 ] && ! u [ y ] [ x - 1 ] ) dfs ( x - 1 , y ) ;  $ ~if ( x < m - 1 && v [ y ] [ x + 1 ] && ! u [ y ] [ x + 1 ] ) dfs ( x + 1 , y ) ;  $ ~if ( y > 0 && v [ y - 1 ] [ x ] && ! u [ y - 1 ] [ x ] ) dfs ( x , y - 1 ) ;  $ ~if ( y < n - 1 && v [ y + 1 ] [ x ] && ! u [ y + 1 ] [ x ] ) dfs ( x , y + 1 ) ;  $ }  $ int main ( ) {  $ ~cin >> n >> m ;  $ ~int k = 0 ;  $ ~for ( int i = 0 ; i < n ; ++ i ) {  $ ~~string s ;  $ ~~cin >> s ;  $ ~~for ( int j = 0 ; j < m ; ++ j ) {  $ ~~~v [ i ] [ j ] = ( s [ j ] == '#' ) ;  $ ~~~k += v [ i ] [ j ] ;  $ ~~}  $ ~}  $ ~if ( k <= 2 ) {  $ ~~cout << - 1 << endl ;  $ ~~return 0 ;  $ ~}  $ ~bool f = false ;  $ ~for ( int i = 0 ; i < n ; ++ i ) {  $ ~~for ( int j = 0 ; j < m ; ++ j ) {  $ ~~~if ( ! v [ i ] [ j ] ) continue ;  $ ~~~memset ( u , 0 , MAX_N * MAX_M * sizeof ( int ) ) ;  $ ~~~v [ i ] [ j ] = 0 ;  $ ~~~bool f = false ;  $ ~~~for ( int ii = 0 ; ii < n && ! f ; ++ ii ) {  $ ~~~~for ( int jj = 0 ; jj < m && ! f ; ++ jj ) {  $ ~~~~~if ( v [ ii ] [ jj ] != 0 ) {  $ ~~~~~~dfs ( jj , ii ) ;  $ ~~~~~~f = true ;  $ ~~~~~}  $ ~~~~}  $ ~~~}  $ ~~~for ( int ii = 0 ; ii < n ; ++ ii ) {  $ ~~~~for ( int jj = 0 ; jj < m ; ++ jj ) {  $ ~~~~~if ( i == ii && j == jj ) continue ;  $ ~~~~~if ( v [ ii ] [ jj ] != u [ ii ] [ jj ] ) {  $ ~~~~~~cout << 1 << endl ;  $ ~~~~~~return 0 ;  $ ~~~~~}  $ ~~~~}  $ ~~~}  $ ~~~v [ i ] [ j ] = 1 ;  $ ~~}  $ ~}  $ ~cout << 2 << endl ;  $ ~return 0 ;  $ }
int n ;  $ string s ;  $ int main ( ) {  $ ~cin >> n >> s ;  $ ~int ans = 0 ;  $ ~for ( int i = 0 ; i < n ; i ++ ) {  $ ~~if ( s [ i ] == '<' )  $ ~~~ans ++ ;  $ ~~else  $ ~~~break ;  $ ~}  $ ~for ( int i = n - 1 ; i >= 0 ; i -- ) {  $ ~~if ( s [ i ] == '>' )  $ ~~~ans ++ ;  $ ~~else  $ ~~~break ;  $ ~}  $ ~cout << ans << "\n" ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~double a , b , c , d , k ;  $ ~cin >> a >> b >> c >> d ;  $ ~if ( ( a - b ) == ( b - c ) && ( b - c ) == ( c - d ) ) {  $ ~~cout << d + ( b - a ) << endl ;  $ ~} else {  $ ~~if ( ( b / a ) == ( c / b ) && ( c / b ) == ( d / c ) ) {  $ ~~~k = d * ( b / a ) ;  $ ~~~if ( k == ( int ) k ) {  $ ~~~~cout << k << endl ;  $ ~~~} else {  $ ~~~~cout << 42 << endl ;  $ ~~~}  $ ~~} else {  $ ~~~cout << 42 << endl ;  $ ~~}  $ ~}  $ ~return 0 ;  $ }
const long long mod = 998244353 ;  $ const int maxn = 2e5 ;  $ int main ( ) {  $ ~int t ;  $ ~long long n , a , b , c ;  $ ~cin >> n ;  $ ~cin >> a >> b >> c ;  $ ~long long one = a , two = b - c ;  $ ~long long sum1 = n / one , yu1 = n % one , ci ;  $ ~while ( yu1 / b > 0 ) {  $ ~~ci = ( yu1 - b ) / two ;  $ ~~if ( ci == 0 && yu1 >= b ) {  $ ~~~if ( yu1 / a > 0 && yu1 / a * a < yu1 / b * two ) {  $ ~~~~yu1 = yu1 - yu1 / a * a ;  $ ~~~~sum1 = sum1 + yu1 / a ;  $ ~~~} else {  $ ~~~~yu1 -= two ;  $ ~~~~sum1 ++ ;  $ ~~~}  $ ~~} else {  $ ~~~yu1 = yu1 - ci * two ;  $ ~~~sum1 += ci ;  $ ~~}  $ ~}  $ ~long long yu2 = n , sum2 = 0 , ans = 0 ;  $ ~while ( yu2 / b > 0 ) {  $ ~~ci = ( yu2 - b ) / two ;  $ ~~if ( ci == 0 && yu2 >= b ) {  $ ~~~if ( yu2 / a > 0 && yu2 / a * a < yu2 / b * two ) {  $ ~~~~yu2 = yu2 - yu2 / a * a ;  $ ~~~~sum2 += yu2 / a ;  $ ~~~} else {  $ ~~~~yu2 -= two ;  $ ~~~~sum2 ++ ;  $ ~~~}  $ ~~} else {  $ ~~~yu2 = yu2 - ci * two ;  $ ~~~sum2 += ci ;  $ ~~}  $ ~}  $ ~sum2 += yu2 / one ;  $ ~yu2 = yu2 % one ;  $ ~ans = max ( ans , sum2 ) ;  $ ~ans = max ( sum1 , ans ) ;  $ ~cout << ans << endl ;  $ ~return 0 ;  $ }
int days [ 12 ] = { 31 , 28 , 31 , 30 , 31 , 30 , 31 , 31 , 30 , 31 , 30 , 31 } ;  $ int main ( ) {  $ ~string s1 , s2 ;  $ ~cin >> s1 >> s2 ;  $ ~map < string , int > have ;  $ ~have [ "monday" ] = 1 ;  $ ~have [ "tuesday" ] = 2 ;  $ ~have [ "wednesday" ] = 3 ;  $ ~have [ "thursday" ] = 4 ;  $ ~have [ "friday" ] = 5 ;  $ ~have [ "saturday" ] = 6 ;  $ ~have [ "sunday" ] = 7 ;  $ ~int d1 = have [ s1 ] ;  $ ~int d2 = have [ s2 ] ;  $ ~d1 -- ;  $ ~d2 -- ;  $ ~for ( int i = 0 ; i < 12 ; i ++ ) {  $ ~~int now = d1 ;  $ ~~now += days [ i ] ;  $ ~~now %= 7 ;  $ ~~if ( now == d2 ) {  $ ~~~puts ( "YES" ) ;  $ ~~~return 0 ;  $ ~~}  $ ~}  $ ~puts ( "NO" ) ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~int n ;  $ ~cin >> n ;  $ ~if ( n % 4 == 1 )  $ ~~cout << 8 << endl ;  $ ~else if ( n % 4 == 2 )  $ ~~cout << 4 << endl ;  $ ~else if ( n % 4 == 3 )  $ ~~cout << 2 << endl ;  $ ~else if ( n == 0 )  $ ~~cout << 1 << endl ;  $ ~else  $ ~~cout << 6 << endl ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~long long int companies ;  $ ~cin >> companies ;  $ ~vector < long long int > emps ;  $ ~vector < long long int > employeenum ;  $ ~long long int maxmaxsalary = 0 ;  $ ~for ( long long int i = 0 ; i < companies ; i ++ ) {  $ ~~long long int employees ;  $ ~~cin >> employees ;  $ ~~employeenum . push_back ( employees ) ;  $ ~~long long int maxsalary = 0 ;  $ ~~for ( long long int j = 0 ; j < employees ; j ++ ) {  $ ~~~long long int salary ;  $ ~~~cin >> salary ;  $ ~~~if ( maxsalary < salary ) { maxsalary = salary ; }  $ ~~}  $ ~~if ( maxmaxsalary < maxsalary ) { maxmaxsalary = maxsalary ; }  $ ~~emps . push_back ( maxsalary ) ;  $ ~}  $ ~long long int sum = 0 ;  $ ~for ( long long int i = 0 ; i < emps . size ( ) ; i ++ ) { sum += ( maxmaxsalary - emps [ i ] ) * employeenum [ i ] ; }  $ ~cout << sum << endl ;  $ ~return 0 ;  $ }
const int size = 5004 ;  $ int dp [ size ] [ size ] ;  $ char s1 [ size ] , s2 [ size ] ;  $ int main ( ) {  $ ~gets ( s1 ) ;  $ ~gets ( s2 ) ;  $ ~int ans = 0 ;  $ ~int n = strlen ( s1 ) , m = strlen ( s2 ) ;  $ ~for ( int i = 1 ; i < n + 1 ; ++ i ) {  $ ~~for ( int j = 1 ; j < m + 1 ; ++ j ) {  $ ~~~dp [ i ] [ j ] += dp [ i ] [ j - 1 ] ;  $ ~~~dp [ i ] [ j ] %= 1000000000 + 7 ;  $ ~~~if ( s1 [ i - 1 ] == s2 [ j - 1 ] ) dp [ i ] [ j ] += dp [ i - 1 ] [ j - 1 ] + 1 ;  $ ~~~dp [ i ] [ j ] %= 1000000000 + 7 ;  $ ~~~if ( j == m ) {  $ ~~~~ans += dp [ i ] [ j ] ;  $ ~~~~ans %= 1000000000 + 7 ;  $ ~~~}  $ ~~}  $ ~}  $ ~cout << ans << endl ;  $ ~return 0 ;  $ }
bool a [ 55 ] ;  $ bool b [ 55 ] ;  $ int main ( ) {  $ ~vector < int > ivec ;  $ ~int n , aa , bb ;  $ ~cin >> n ;  $ ~int days = n * n ;  $ ~for ( int i = 1 ; i <= days ; ++ i ) {  $ ~~cin >> aa >> bb ;  $ ~~if ( ! a [ aa ] && ! b [ bb ] ) {  $ ~~~a [ aa ] = b [ bb ] = true ;  $ ~~~ivec . push_back ( i ) ;  $ ~~}  $ ~}  $ ~for ( int i = 0 ; i < ivec . size ( ) ; ++ i ) {  $ ~~if ( i == ivec . size ( ) - 1 )  $ ~~~cout << ivec [ i ] << endl ;  $ ~~else  $ ~~~cout << ivec [ i ] << ' ' ;  $ ~}  $ ~return 0 ;  $ }
int x [ 101 ] , LCM [ 101 ] , memo [ 101 ] ;  $ long long T = 1 ;  $ int Call ( int i , int Target ) {  $ ~if ( i == Target ) return 1 ;  $ ~if ( memo [ i ] ) return - 1000 ;  $ ~memo [ i ] = 1 ;  $ ~return 1 + Call ( x [ i ] , Target ) ;  $ }  $ void Fac ( int n ) {  $ ~int i = 2 , M [ 101 ] = { 0 } ;  $ ~while ( n > 1 )  $ ~~if ( n % i == 0 )  $ ~~~n /= i , M [ i ] ++ ;  $ ~~else  $ ~~~i ++ ;  $ ~for ( int i = 2 ; i < 100 ; i ++ ) LCM [ i ] = max ( LCM [ i ] , M [ i ] ) ;  $ }  $ int main ( ) {  $ ~int n ;  $ ~cin >> n ;  $ ~for ( int i = 1 ; i <= n ; i ++ ) cin >> x [ i ] ;  $ ~for ( int i = 1 , a ; i <= n ; i ++ ) {  $ ~~if ( memo [ i ] ) continue ;  $ ~~a = Call ( x [ i ] , i ) ;  $ ~~if ( a < 1 ) {  $ ~~~cout << "-1" << endl ;  $ ~~~return 0 ;  $ ~~}  $ ~~if ( a % 2 == 0 ) a /= 2 ;  $ ~~Fac ( a ) ;  $ ~}  $ ~for ( int i = 2 ; i < 100 ; i ++ )  $ ~~for ( int j = 0 ; j < LCM [ i ] ; j ++ ) T *= i ;  $ ~cout << T << endl ;  $ }
int main ( ) {  $ ~int n ;  $ ~string s ;  $ ~cin >> n >> s ;  $ ~char last = '?' ;  $ ~int flag = 1 ;  $ ~for ( string : : iterator ite = s . begin ( ) ; ite != s . end ( ) ; ++ ite ) {  $ ~~if ( last == * ite ) {  $ ~~~if ( * ite != '?' ) {  $ ~~~~flag = 0 ;  $ ~~~~break ;  $ ~~~} else {  $ ~~~~flag = 2 ;  $ ~~~}  $ ~~}  $ ~~if ( ite != s . begin ( ) && ite != s . end ( ) - 1 ) {  $ ~~~if ( * ite == '?' && last == * ( ite + 1 ) ) { flag = 2 ; }  $ ~~} else {  $ ~~~if ( * ite == '?' ) { flag = 2 ; }  $ ~~}  $ ~~last = * ite ;  $ ~}  $ ~if ( flag <= 1 ) {  $ ~~cout << "No" << endl ;  $ ~} else {  $ ~~cout << "Yes" << endl ;  $ ~}  $ ~return 0 ;  $ }
long long maxin ( long long a , long long b ) {  $ ~if ( a > b ) return a ;  $ ~return b ;  $ }  $ int main ( ) {  $ ~long long n ;  $ ~cin >> n ;  $ ~long long arr [ n ] ;  $ ~for ( long long i = 0 ; i < n ; i ++ ) cin >> arr [ i ] ;  $ ~long long dif [ n - 1 ] ;  $ ~for ( long long i = 0 ; i < n - 1 ; i ++ ) dif [ i ] = abs ( arr [ i ] - arr [ i + 1 ] ) ;  $ ~long long soma = 0 ;  $ ~long long maxi = 0 ;  $ ~for ( long long i = 0 ; i < n - 1 ; i ++ ) {  $ ~~if ( i % 2 == 0 ) soma += dif [ i ] ;  $ ~~if ( i % 2 != 0 ) soma += dif [ i ] * - 1 ;  $ ~~soma = maxin ( soma , 0 ) ;  $ ~~maxi = maxin ( soma , maxi ) ;  $ ~}  $ ~soma = 0 ;  $ ~for ( long long i = 0 ; i < n - 1 ; i ++ ) {  $ ~~if ( i % 2 != 0 ) soma += dif [ i ] ;  $ ~~if ( i % 2 == 0 ) soma += dif [ i ] * - 1 ;  $ ~~soma = maxin ( soma , 0 ) ;  $ ~~maxi = maxin ( soma , maxi ) ;  $ ~}  $ ~cout << maxi << endl ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~string s ;  $ ~cin >> s ;  $ ~int N = s . size ( ) ;  $ ~int count [ 101 ] [ 3 ] ;  $ ~memset ( count , 0 , sizeof count ) ;  $ ~for ( int i = 0 ; i < N ; i ++ ) {  $ ~~if ( i == 0 ) {  $ ~~~if ( s [ i ] != '.' ) {  $ ~~~~count [ i + 1 ] [ s [ i ] - 'A' ] = 1 ;  $ ~~~~count [ i ] [ s [ i ] - 'A' ] = 1 ;  $ ~~~}  $ ~~} else if ( i == ( N - 1 ) ) {  $ ~~~if ( s [ i ] != '.' ) {  $ ~~~~count [ i - 1 ] [ s [ i ] - 'A' ] = 1 ;  $ ~~~~count [ i ] [ s [ i ] - 'A' ] = 1 ;  $ ~~~}  $ ~~} else {  $ ~~~if ( s [ i ] != '.' ) {  $ ~~~~count [ i - 1 ] [ s [ i ] - 'A' ] = 1 ;  $ ~~~~count [ i + 1 ] [ s [ i ] - 'A' ] = 1 ;  $ ~~~~count [ i ] [ s [ i ] - 'A' ] = 1 ;  $ ~~~}  $ ~~}  $ ~}  $ ~for ( int i = 0 ; i < N ; i ++ ) {  $ ~~if ( count [ i ] [ 0 ] == 1 && count [ i ] [ 1 ] == 1 && count [ i ] [ 2 ] == 1 ) {  $ ~~~cout << "Yes\n" ;  $ ~~~return 0 ;  $ ~~}  $ ~}  $ ~cout << "No\n" ;  $ ~return 0 ;  $ }
pair < int , int > trees [ 105 ] ;  $ int main ( ) {  $ ~int n ;  $ ~cin >> n ;  $ ~int sum = 0 , sum_pos = 0 , sum_neg = 0 ;  $ ~for ( int i = 0 ; i < n ; i ++ ) {  $ ~~cin >> trees [ i ] . first >> trees [ i ] . second ;  $ ~~sum += trees [ i ] . second ;  $ ~~if ( trees [ i ] . first < 0 ) sum_neg += trees [ i ] . second ;  $ ~~if ( trees [ i ] . first > 0 ) sum_pos += trees [ i ] . second ;  $ ~}  $ ~sort ( trees , trees + n ) ;  $ ~int pos = 0 , neg = 0 , center = - 1 ;  $ ~for ( int i = 0 ; i < n ; i ++ ) {  $ ~~if ( trees [ i ] . first > 0 ) pos ++ ;  $ ~~if ( trees [ i ] . first > 0 && center == - 1 ) center = i ;  $ ~}  $ ~if ( pos == 0 ) center = n ;  $ ~neg = n - pos ;  $ ~if ( abs ( pos - neg ) <= 1 )  $ ~~cout << sum << endl ;  $ ~else {  $ ~~if ( neg > pos ) {  $ ~~~sum = sum_pos ;  $ ~~~for ( int i = center - 1 , j = 0 ; i >= 0 && j < pos + 1 ; i -- , j ++ ) sum += trees [ i ] . second ;  $ ~~} else {  $ ~~~sum = sum_neg ;  $ ~~~for ( int i = center , j = 0 ; i < n && j < neg + 1 ; i ++ , j ++ ) sum += trees [ i ] . second ;  $ ~~}  $ ~~cout << sum << endl ;  $ ~}  $ }
long long bigmod ( long long a , long long b , long long m ) {  $ ~if ( b == 0 ) return 1 % m ;  $ ~long long x = bigmod ( a , b / 2 , m ) ;  $ ~x = ( x * x ) % m ;  $ ~if ( b % 2 ) x = ( x * a ) % m ;  $ ~return x ;  $ }  $ long long f ( long long n ) {  $ ~if ( n == 0 ) return 0 ;  $ ~if ( n % 10 == 0 ) n -- ;  $ ~if ( n < 100 ) return n / 11 + ( n < 10 ? n : 9 ) ;  $ ~long long r = n % 10 ;  $ ~long long l = n , d = 1 ;  $ ~while ( l > 9 ) {  $ ~~l /= 10 ;  $ ~~d ++ ;  $ ~}  $ ~long long m ;  $ ~long long c = 1 ;  $ ~for ( int i = 0 ; i < d - 1 ; i ++ ) c *= 10 ;  $ ~m = ( n % c ) / 10 + 1 ;  $ ~long long an = 18 ;  $ ~c = 1 ;  $ ~for ( int i = 3 ; i <= d ; i ++ ) {  $ ~~c *= 10 ;  $ ~~for ( int j = 1 ; j <= 9 ; j ++ ) {  $ ~~~if ( i == d && j == l )  $ ~~~~if ( l <= r )  $ ~~~~~return an + m ;  $ ~~~~else  $ ~~~~~return an + m - 1 ;  $ ~~~an += c ;  $ ~~}  $ ~}  $ ~return an ;  $ }  $ int main ( ) {  $ ~long long a , b ;  $ ~while ( cin >> a >> b ) cout << f ( b ) - f ( a - 1 ) << endl ;  $ }
int main ( ) {  $ ~int n , i ;  $ ~int arr [ 100005 ] ;  $ ~cin >> n ;  $ ~for ( i = 0 ; i < n ; i ++ ) { cin >> arr [ i ] ; }  $ ~int counter = 0 , flag = 0 , found = 0 ;  $ ~for ( i = 0 ; i < n ; i ++ ) {  $ ~~if ( arr [ i ] == 25 ) { counter ++ ; }  $ ~~if ( arr [ i ] == 50 ) {  $ ~~~if ( counter < 1 ) {  $ ~~~~flag ++ ;  $ ~~~~break ;  $ ~~~} else {  $ ~~~~found ++ ;  $ ~~~~counter -- ;  $ ~~~}  $ ~~}  $ ~~if ( arr [ i ] == 100 ) {  $ ~~~if ( counter < 0 || ( found < 1 && counter < 1 ) ) {  $ ~~~~flag ++ ;  $ ~~~~break ;  $ ~~~} else {  $ ~~~~if ( found > 0 && counter > 0 ) {  $ ~~~~~found -- ;  $ ~~~~~counter -- ;  $ ~~~~} else {  $ ~~~~~if ( counter < 3 ) {  $ ~~~~~~flag ++ ;  $ ~~~~~~break ;  $ ~~~~~}  $ ~~~~~counter -= 3 ;  $ ~~~~}  $ ~~~}  $ ~~}  $ ~}  $ ~if ( flag == 0 ) {  $ ~~cout << "YES" << endl ;  $ ~} else {  $ ~~cout << "NO" << endl ;  $ ~}  $ }
int main ( ) {  $ ~int pos , flag = 0 ;  $ ~string str , s , t ;  $ ~cin >> str >> s >> t ;  $ ~if ( ( pos = str . find ( s ) ) != string : : npos )  $ ~~if ( ( str . substr ( pos + s . length ( ) ) ) . find ( t ) != string : : npos ) flag += 1 ;  $ ~reverse ( str . begin ( ) , str . end ( ) ) ;  $ ~if ( ( pos = str . find ( s ) ) != string : : npos )  $ ~~if ( ( str . substr ( pos + s . length ( ) ) ) . find ( t ) != string : : npos ) flag += 2 ;  $ ~if ( flag == 0 )  $ ~~puts ( "fantasy" ) ;  $ ~else if ( flag == 1 )  $ ~~puts ( "forward" ) ;  $ ~else if ( flag == 2 )  $ ~~puts ( "backward" ) ;  $ ~else  $ ~~puts ( "both" ) ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~bool cek = true ;  $ ~int n ;  $ ~string s ;  $ ~cin >> n >> s ;  $ ~for ( int i = 1 ; i < n ; i ++ ) {  $ ~~if ( s [ i - 1 ] == '1' && s [ i ] == '1' ) cek = false ;  $ ~}  $ ~for ( int i = 2 ; i < n ; i ++ ) {  $ ~~if ( s [ i - 2 ] == '0' && s [ i - 1 ] == '0' && s [ i ] == '0' ) cek = false ;  $ ~}  $ ~if ( n >= 2 ) {  $ ~~if ( s [ 0 ] == '0' && s [ 1 ] == '0' ) cek = false ;  $ ~~if ( s [ n - 1 ] == '0' && s [ n - 2 ] == '0' ) cek = false ;  $ ~} else if ( s [ 0 ] == '0' )  $ ~~cek = false ;  $ ~( cek ) ? cout << "Yes" << endl : cout << "No" << endl ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~unsigned long long int n ;  $ ~cin >> n ;  $ ~if ( n <= 127 )  $ ~~cout << "byte\n" ;  $ ~else if ( n <= 32767 )  $ ~~cout << "short\n" ;  $ ~else if ( n <= 2147483647 )  $ ~~cout << "int\n" ;  $ ~else if ( n <= 9223372036854775807 )  $ ~~cout << "long\n" ;  $ ~else  $ ~~cout << "BigInteger\n" ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~string str ;  $ ~cin >> str ;  $ ~string temp ;  $ ~temp = str ;  $ ~reverse ( temp . begin ( ) , temp . end ( ) ) ;  $ ~if ( temp == str )  $ ~~cout << "0" << endl ;  $ ~else {  $ ~~int ans = 0 ;  $ ~~int k1 = ( str [ 0 ] - '0' ) * 10 + ( str [ 1 ] - '0' ) ;  $ ~~int k2 = ( str [ 3 ] - '0' ) * 10 + ( str [ 4 ] - '0' ) ;  $ ~~while ( true ) {  $ ~~~k2 ++ ;  $ ~~~ans ++ ;  $ ~~~if ( k2 >= 60 ) {  $ ~~~~k2 = 0 ;  $ ~~~~k1 ++ ;  $ ~~~}  $ ~~~if ( k1 >= 23 ) { k1 = k1 % 24 ; }  $ ~~~string blah = "" ;  $ ~~~blah += ( k1 / 10 + '0' ) ;  $ ~~~blah += ( k1 % 10 + '0' ) ;  $ ~~~blah += ( k2 / 10 + '0' ) ;  $ ~~~blah += ( k2 % 10 + '0' ) ;  $ ~~~string val = blah ;  $ ~~~reverse ( val . begin ( ) , val . end ( ) ) ;  $ ~~~if ( val == blah ) break ;  $ ~~}  $ ~~cout << ans << endl ;  $ ~}  $ ~return 0 ;  $ }
int const N = 1e5 + 1 ;  $ long long arr [ N ] ;  $ int main ( ) {  $ ~int n ;  $ ~cin >> n ;  $ ~arr [ 0 ] = 0 ;  $ ~for ( int i = 1 ; i < N ; i ++ ) arr [ i ] = arr [ i - 1 ] + i ;  $ ~for ( int i = 1 ; i < N ; i ++ )  $ ~~if ( binary_search ( arr + 1 , arr + N , n - arr [ i ] ) ) {  $ ~~~cout << "YES" << endl ;  $ ~~~return 0 ;  $ ~~}  $ ~cout << "NO" << endl ;  $ ~return 0 ;  $ }
const int MAXN = 1e5 + 10 ;  $ int mp [ MAXN ] , dp [ MAXN ] ;  $ int main ( ) {  $ ~int x , y ;  $ ~cin >> x >> y ;  $ ~if ( ! x || ! y ) {  $ ~~if ( ! x && ! y )  $ ~~~cout << 0 << endl ;  $ ~~else {  $ ~~~if ( ! y ) {  $ ~~~~if ( x < 0 )  $ ~~~~~cout << 4 * ( - x ) - 1 << endl ;  $ ~~~~else {  $ ~~~~~if ( x == 1 )  $ ~~~~~~cout << 0 << endl ;  $ ~~~~~else  $ ~~~~~~cout << ( x - 1 ) * 4 + 1 << endl ;  $ ~~~~}  $ ~~~} else {  $ ~~~~if ( y > 0 )  $ ~~~~~cout << ( y - 1 ) * 4 + 2 << endl ;  $ ~~~~else  $ ~~~~~cout << ( - y ) * 4 << endl ;  $ ~~~}  $ ~~}  $ ~} else {  $ ~~if ( x > 0 && x >= y && y > ( - x ) + 1 ) {  $ ~~~cout << ( x - 1 ) * 4 + 1 << endl ;  $ ~~} else if ( y > 0 && ( - y ) <= x && y > x ) {  $ ~~~cout << ( y - 1 ) * 4 + 2 << endl ;  $ ~~} else if ( x < 0 && y >= x && ( - x ) > y ) {  $ ~~~cout << 4 * ( - x ) - 1 << endl ;  $ ~~} else {  $ ~~~cout << ( - y ) * 4 << endl ;  $ ~~}  $ ~}  $ ~return 0 ;  $ }
unsigned long long a [ 2000000 ] ;  $ unsigned long long b [ 2000000 ] ;  $ int n ;  $ bool judge ( int n ) {  $ ~for ( int i = 0 ; i < n - 1 ; ++ i ) {  $ ~~if ( a [ i ] == a [ i + 1 ] ) return true ;  $ ~}  $ ~return false ;  $ }  $ int main ( ) {  $ ~while ( cin >> n ) {  $ ~~memset ( a , 0 , sizeof ( a ) ) ;  $ ~~for ( int i = 0 ; i < n ; ++ i ) {  $ ~~~cin >> a [ i ] ;  $ ~~~b [ a [ i ] ] ++ ;  $ ~~}  $ ~~sort ( a , a + n ) ;  $ ~~int ans = 0 ;  $ ~~for ( int i = 1 ; i < 2000000 ; ++ i ) {  $ ~~~b [ i ] += ( b [ i - 1 ] / 2 ) ;  $ ~~~b [ i - 1 ] %= 2 ;  $ ~~~ans += b [ i - 1 ] ;  $ ~~}  $ ~~cout << ans << endl ;  $ ~}  $ }
long long int maxx ( long long int a , long long int b ) {  $ ~return a > b ? a : b ;  $ }  $ long long int minn ( long long int a , long long int b ) {  $ ~return a > b ? b : a ;  $ }  $ int dx [ ] = { 1 , 1 , 1 , 0 , 0 , - 1 , - 1 , - 1 , 0 } ;  $ int dy [ ] = { - 1 , 0 , 1 , 1 , - 1 , 0 , 1 , - 1 , 0 } ;  $ void boostIO ( ) { }  $ long long int gcd ( long long int a , long long int b ) {  $ ~return b == 0 ? a : gcd ( b , a % b ) ;  $ }  $ long long int lcm ( long long int a , long long int b ) {  $ ~return ( a * b ) / gcd ( a , b ) ;  $ }  $ long long int poww ( long long int base , long long int exp ) {  $ ~base %= 1000000007 ;  $ ~long long int result = 1 ;  $ ~while ( exp > 0 ) {  $ ~~if ( exp & 1 ) result = ( result * base ) % 1000000007 ;  $ ~~base = ( base * base ) % 1000000007 ;  $ ~~exp >> = 1 ;  $ ~}  $ ~return result ;  $ }  $ vector < int > a [ 200 ] ;  $ bool pos [ 120 ] [ 120 ] , vis [ 120 ] ;  $ int n , m ;  $ void dfs ( int root ) {  $ ~vis [ root ] = 1 ;  $ ~for ( int i = 0 ; i < a [ root ] . size ( ) ; i ++ ) {  $ ~~if ( ! vis [ a [ root ] [ i ] ] ) dfs ( a [ root ] [ i ] ) ;  $ ~}  $ ~return ;  $ }  $ int comp ( ) {  $ ~int ret = 0 ;  $ ~for ( int i = 1 ; i <= n ; i ++ ) {  $ ~~if ( ! vis [ i ] ) {  $ ~~~ret ++ ;  $ ~~~dfs ( i ) ;  $ ~~}  $ ~}  $ ~return ret ;  $ }  $ int main ( ) {  $ ~cin >> n >> m ;  $ ~int tot = 0 ;  $ ~for ( int i = 1 ; i <= n ; i ++ ) {  $ ~~int x ;  $ ~~cin >> x ;  $ ~~tot = tot + x ;  $ ~~for ( int j = 0 ; j < x ; j ++ ) {  $ ~~~int l ;  $ ~~~cin >> l ;  $ ~~~pos [ i ] [ l ] = 1 ;  $ ~~}  $ ~}  $ ~if ( tot == 0 ) {  $ ~~cout << n << endl ;  $ ~~return 0 ;  $ ~}  $ ~for ( int i = 1 ; i <= n ; i ++ ) {  $ ~~for ( int j = i + 1 ; j <= n ; j ++ ) {  $ ~~~for ( int k = 1 ; k <= m ; k ++ ) {  $ ~~~~if ( pos [ i ] [ k ] && pos [ j ] [ k ] ) {  $ ~~~~~a [ i ] . push_back ( j ) , a [ j ] . push_back ( i ) ;  $ ~~~~~break ;  $ ~~~~}  $ ~~~}  $ ~~}  $ ~}  $ ~cout << comp ( ) - 1 << endl ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~int n ;  $ ~cin >> n ;  $ ~int b [ n + 5 ] ;  $ ~int c [ n + 5 ] ;  $ ~int l = 1 , k = 1 ;  $ ~for ( int i = 1 ; i <= n ; i ++ ) {  $ ~~int m ;  $ ~~cin >> m ;  $ ~~b [ l ] = m ;  $ ~~l ++ ;  $ ~~int a [ m + 5 ] ;  $ ~~for ( int i = 1 ; i <= m ; i ++ ) { cin >> a [ i ] ; }  $ ~~sort ( a + 1 , a + 1 + m , greater < int > ( ) ) ;  $ ~~c [ k ] = a [ 1 ] ;  $ ~~k ++ ;  $ ~~for ( int i = 1 ; i <= m ; i ++ ) { a [ i ] = 0 ; }  $ ~}  $ ~long long su = b [ 1 ] ;  $ ~long long sum1 = 0 ;  $ ~long long mx = c [ 1 ] ;  $ ~for ( int i = 2 ; i <= n ; i ++ ) {  $ ~~if ( mx > c [ i ] ) {  $ ~~~long long s = mx - c [ i ] ;  $ ~~~long long sum = s * b [ i ] ;  $ ~~~sum1 += sum ;  $ ~~~su += b [ i ] ;  $ ~~} else {  $ ~~~long long s = c [ i ] - mx ;  $ ~~~long long sum = s * su ;  $ ~~~sum1 += sum ;  $ ~~~su += b [ i ] ;  $ ~~~mx = c [ i ] ;  $ ~~}  $ ~}  $ ~cout << sum1 << endl ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~int x ;  $ ~cin >> x ;  $ ~int a = x ;  $ ~int b = a ;  $ ~if ( a * b <= x || a / b >= x ) {  $ ~~cout << - 1 << endl ;  $ ~} else {  $ ~~cout << a << ' ' << b << endl ;  $ ~}  $ }
int a [ 150 ] ;  $ int b [ 150 ] ;  $ int main ( ) {  $ ~int n , m , i , j , k , flag = 1 , t , g , sum = 0 ;  $ ~cin >> n ;  $ ~for ( i = 1 ; i <= n ; i ++ ) cin >> a [ i ] ;  $ ~int s = 0 ;  $ ~g = 0 ;  $ ~t = 0 ;  $ ~for ( i = 1 ; i <= n ; i ++ ) {  $ ~~t ++ ;  $ ~~if ( a [ i ] < 0 ) g ++ ;  $ ~~if ( g == 3 || i == n ) {  $ ~~~if ( i == n && g != 3 ) {  $ ~~~~s ++ ;  $ ~~~~b [ s ] = t ;  $ ~~~~break ;  $ ~~~}  $ ~~~s ++ ;  $ ~~~b [ s ] = t - 1 ;  $ ~~~t = 0 ;  $ ~~~g = 0 ;  $ ~~~i -- ;  $ ~~}  $ ~}  $ ~cout << s << endl ;  $ ~for ( i = 1 ; i <= s ; i ++ ) {  $ ~~if ( i == 1 )  $ ~~~cout << b [ i ] ;  $ ~~else  $ ~~~cout << " " << b [ i ] ;  $ ~}  $ ~cout << "\n" ;  $ }
bool c1 [ 51 ] ;  $ bool c2 [ 51 ] ;  $ int main ( ) {  $ ~int n ;  $ ~int a ;  $ ~int b ;  $ ~vector < int > v ;  $ ~cin >> n ;  $ ~n *= n ;  $ ~for ( int i = 1 ; i <= n ; i ++ ) {  $ ~~cin >> a >> b ;  $ ~~if ( c1 [ a ] == 0 && c2 [ b ] == 0 ) {  $ ~~~c1 [ a ] = 1 ;  $ ~~~c2 [ b ] = 1 ;  $ ~~~v . push_back ( i ) ;  $ ~~}  $ ~}  $ ~for ( int i = 0 ; i < v . size ( ) ; i ++ ) {  $ ~~if ( i == v . size ( ) - 1 ) {  $ ~~~cout << v [ i ] << "\n" ;  $ ~~} else {  $ ~~~cout << v [ i ] << " " ;  $ ~~}  $ ~}  $ ~return 0 ;  $ }
int main ( ) {  $ ~int n , m ;  $ ~cin >> n >> m ;  $ ~int min = 1000000011 ;  $ ~for ( int i = 0 ; i < m ; i ++ ) {  $ ~~int l , r ;  $ ~~cin >> l >> r ;  $ ~~min = ( min > ( r - l + 1 ) ) ? ( r - l + 1 ) : min ;  $ ~}  $ ~cout << min << endl ;  $ ~for ( int i = 0 ; i < n - 1 ; i ++ ) { cout << i % min << " " ; }  $ ~cout << ( n - 1 ) % min << endl ;  $ ~return 0 ;  $ }
const int N = 2e5 + 10 ;  $ string z = "GRBYW" ;  $ int t1 [ N ] , t2 [ N ] ;  $ long ans = 1e9 , temp , same ;  $ int resolve ( char c ) {  $ ~for ( int i = 0 ; i < z . size ( ) ; i ++ )  $ ~~if ( z [ i ] == c ) return i ;  $ }  $ long long cbits ( long long x ) {  $ ~int r = 0 ;  $ ~for ( int i = 0 ; i < 10 ; i ++ ) {  $ ~~if ( x & ( 1 << i ) ) r ++ ;  $ ~}  $ ~return r ;  $ }  $ int main ( ) {  $ ~long long n ;  $ ~cin >> n ;  $ ~for ( int i = 0 ; i < n ; i ++ ) {  $ ~~string s ;  $ ~~cin >> s ;  $ ~~t1 [ i ] = resolve ( s [ 0 ] ) ;  $ ~~t2 [ i ] = s [ 1 ] - '1' + 5 ;  $ ~}  $ ~for ( int mask = 0 ; mask < 1024 ; mask ++ ) {  $ ~~temp = cbits ( mask ) ;  $ ~~if ( temp > ans ) continue ;  $ ~~int err = 0 ;  $ ~~for ( int i = 0 ; i < n ; i ++ ) {  $ ~~~for ( int j = i + 1 ; j < n ; j ++ ) {  $ ~~~~if ( t1 [ i ] == t1 [ j ] && t2 [ i ] == t2 [ j ] ) continue ;  $ ~~~~same = 1 ;  $ ~~~~if ( t1 [ i ] != t1 [ j ] ) {  $ ~~~~~if ( mask & ( 1 << t1 [ i ] ) ) same = 0 ;  $ ~~~~~if ( mask & ( 1 << t1 [ j ] ) ) same = 0 ;  $ ~~~~}  $ ~~~~if ( t2 [ i ] != t2 [ j ] ) {  $ ~~~~~if ( mask & ( 1 << t2 [ i ] ) ) same = 0 ;  $ ~~~~~if ( mask & ( 1 << t2 [ j ] ) ) same = 0 ;  $ ~~~~}  $ ~~~~if ( same ) err = 1 ;  $ ~~~}  $ ~~}  $ ~~if ( ! err ) ans = min ( ans , temp ) ;  $ ~}  $ ~cout << ans << "\n" ;  $ ~return 0 ;  $ }
map < long long , bool > M ;  $ int main ( ) {  $ ~int n ;  $ ~long long k , a [ 100009 ] ;  $ ~cin >> n >> k ;  $ ~for ( int i = 1 ; i <= n ; i ++ ) { cin >> a [ i ] ; }  $ ~int c = 0 ;  $ ~sort ( a + 1 , a + n + 1 ) ;  $ ~for ( int i = 1 ; i <= n ; i ++ ) {  $ ~~if ( ! M [ a [ i ] ] ) {  $ ~~~c ++ ;  $ ~~~M [ a [ i ] * k ] = 1 ;  $ ~~}  $ ~}  $ ~cout << c << endl ;  $ }
int v [ 1000500 ] ;  $ int main ( ) {  $ ~int n ;  $ ~while ( cin >> n ) {  $ ~~memset ( v , 0 , sizeof ( v ) ) ;  $ ~~for ( int i = 0 ; i < n ; i ++ ) {  $ ~~~int x ;  $ ~~~cin >> x ;  $ ~~~v [ x ] ++ ;  $ ~~}  $ ~~for ( int i = 0 ; i < 1000400 ; i ++ ) {  $ ~~~v [ i + 1 ] += v [ i ] / 2 ;  $ ~~~v [ i ] %= 2 ;  $ ~~}  $ ~~int t = 0 ;  $ ~~for ( int i = 0 ; i < 1000400 ; i ++ ) { t += v [ i ] ; }  $ ~~cout << t << endl ;  $ ~}  $ ~return 0 ;  $ }
int main ( ) {  $ ~int a , b , c , d , e , f ;  $ ~cin >> a >> b >> c >> d >> e >> f ;  $ ~bool test = a and c and e and b * d * f > a * c * e ;  $ ~bool sgs = e == 0 and f != 0 , sgl = a == 0 and b != 0 , sgg = c == 0 and d != 0 ;  $ ~bool cgs = f != 0 , cgl = b != 0 , cgg = d != 0 ;  $ ~bool ron = sgg or ( sgl and cgg ) or ( sgs and cgl and cgg ) or ( test ) ;  $ ~if ( ron )  $ ~~cout << "Ron" << endl ;  $ ~else  $ ~~cout << "Hermione" << endl ;  $ }
const int MAXN = 2e7 ;  $ int prime [ MAXN ] ;  $ int vis [ MAXN ] ;  $ int a [ MAXN ] ;  $ void init ( ) {  $ ~for ( int i = 2 ; i < MAXN ; i ++ ) {  $ ~~if ( ! prime [ i ] ) prime [ ++ prime [ 0 ] ] = i ;  $ ~~for ( int j = 1 ; j <= prime [ 0 ] && prime [ j ] <= MAXN / i ; j ++ ) {  $ ~~~prime [ prime [ j ] * i ] = 1 ;  $ ~~~if ( i % prime [ j ] == 0 ) break ;  $ ~~}  $ ~}  $ }  $ int main ( ) {  $ ~int n ;  $ ~int gcd ;  $ ~cin >> n ;  $ ~for ( int i = 1 ; i <= n ; i ++ ) {  $ ~~cin >> a [ i ] ;  $ ~~if ( i == 1 )  $ ~~~gcd = a [ 1 ] ;  $ ~~else  $ ~~~gcd = __gcd ( gcd , a [ i ] ) ;  $ ~}  $ ~int Max = 0 ;  $ ~init ( ) ;  $ ~for ( int i = 1 ; i <= n ; i ++ ) {  $ ~~a [ i ] /= gcd ;  $ ~~for ( int j = 1 ; j <= prime [ 0 ] && prime [ j ] * prime [ j ] <= a [ i ] ; j ++ ) {  $ ~~~if ( a [ i ] % prime [ j ] == 0 ) {  $ ~~~~while ( a [ i ] % prime [ j ] == 0 ) { a [ i ] /= prime [ j ] ; }  $ ~~~~vis [ prime [ j ] ] ++ ;  $ ~~~~Max = max ( Max , vis [ prime [ j ] ] ) ;  $ ~~~}  $ ~~}  $ ~~if ( a [ i ] != 1 ) {  $ ~~~vis [ a [ i ] ] ++ ;  $ ~~~Max = max ( Max , vis [ a [ i ] ] ) ;  $ ~~}  $ ~}  $ ~if ( Max == 0 )  $ ~~cout << - 1 << endl ;  $ ~else  $ ~~cout << n - Max << endl ;  $ }
int n ;  $ int main ( ) {  $ ~cin >> n ;  $ ~cout << n / 2 << endl ;  $ ~for ( int i = 1 ; i <= n / 2 - 1 ; i ++ ) cout << 2 << ' ' ;  $ ~cout << 2 + n % 2 << endl ;  $ ~return 0 ;  $ }
bool answerFound ;  $ long long t0 , t1 , t2 , x1 , x2 , ansy1 , ansy2 ;  $ void check ( long long y1 , long long y2 ) {  $ ~y1 = min ( y1 , x1 ) ;  $ ~y2 = min ( y2 , x2 ) ;  $ ~y1 = max ( y1 , 0 LL ) ;  $ ~y2 = max ( y2 , 0 LL ) ;  $ ~if ( t0 * ( y1 + y2 ) > t1 * y1 + t2 * y2 ) return ;  $ ~if ( ! answerFound ) {  $ ~~ansy1 = y1 ;  $ ~~ansy2 = y2 ;  $ ~~answerFound = true ;  $ ~} else {  $ ~~long long l = ( t1 * y1 + t2 * y2 ) * ( ansy1 + ansy2 ) ;  $ ~~long long r = ( t1 * ansy1 + t2 * ansy2 ) * ( y1 + y2 ) ;  $ ~~if ( l < r ) {  $ ~~~ansy1 = y1 ;  $ ~~~ansy2 = y2 ;  $ ~~~answerFound = true ;  $ ~~} else if ( l == r && y1 + y2 > ansy1 + ansy2 ) {  $ ~~~ansy1 = y1 ;  $ ~~~ansy2 = y2 ;  $ ~~~answerFound = true ;  $ ~~}  $ ~}  $ }  $ long long divUp ( long long a , long long b ) {  $ ~return ( a + b - 1 ) / b ;  $ }  $ int main ( ) {  $ ~cin >> t1 >> t2 >> x1 >> x2 >> t0 ;  $ ~check ( 0 , 0 ) ;  $ ~check ( 0 , 1 ) ;  $ ~check ( 1 , 0 ) ;  $ ~for ( long long y1 = 0 ; y1 <= x1 ; ++ y1 ) {  $ ~~check ( y1 , x2 ) ;  $ ~~if ( t2 != t0 ) {  $ ~~~long long y2 = divUp ( t0 * y1 - t1 * y1 , t2 - t0 ) ;  $ ~~~check ( y1 , y2 ) ;  $ ~~}  $ ~}  $ ~for ( long long y2 = 0 ; y2 <= x2 ; ++ y2 ) {  $ ~~check ( x1 , y2 ) ;  $ ~~if ( t1 != t0 ) {  $ ~~~long long y1 = ( t2 * y2 - t0 * y2 ) / ( t0 - t1 ) ;  $ ~~~check ( y1 , y2 ) ;  $ ~~}  $ ~}  $ ~cout << ansy1 << " " << ansy2 << endl ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~string x [ ] = { "C" , "C#" , "D" , "D#" , "E" , "F" , "F#" , "G" , "G#" , "A" , "B" , "H" } ;  $ ~string y [ 3 ] ;  $ ~int z [ 3 ] ;  $ ~int i , k ;  $ ~for ( i = 0 ; i < 3 ; i ++ ) {  $ ~~cin >> y [ i ] ;  $ ~~for ( k = 0 ; k < 12 ; k ++ ) {  $ ~~~if ( y [ i ] == x [ k ] ) {  $ ~~~~z [ i ] = k ;  $ ~~~~break ;  $ ~~~}  $ ~~}  $ ~}  $ ~sort ( z , z + 3 ) ;  $ ~int a , b ;  $ ~do {  $ ~~a = ( ( z [ 1 ] - z [ 0 ] ) + 12 ) % 12 ;  $ ~~b = ( ( z [ 2 ] - z [ 1 ] ) + 12 ) % 12 ;  $ ~~if ( a == 4 && b == 3 ) {  $ ~~~cout << "major" << endl ;  $ ~~~return 0 ;  $ ~~}  $ ~~if ( a == 3 && b == 4 ) {  $ ~~~cout << "minor" << endl ;  $ ~~~return 0 ;  $ ~~}  $ ~} while ( next_permutation ( z , z + 3 ) ) ;  $ ~cout << "strange" << endl ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~int t ;  $ ~cin >> t ;  $ ~while ( t -- ) {  $ ~~char c ;  $ ~~int x , y , a , b , i , j , l = 0 ;  $ ~~for ( i = 1 ; i <= 8 ; i ++ ) {  $ ~~~for ( j = 1 ; j <= 8 ; j ++ ) {  $ ~~~~cin >> c ;  $ ~~~~if ( c == 'K' && l == 0 ) {  $ ~~~~~x = i ;  $ ~~~~~y = j ;  $ ~~~~~l = 1 ;  $ ~~~~} else if ( c == 'K' && l == 1 ) {  $ ~~~~~a = i ;  $ ~~~~~b = j ;  $ ~~~~}  $ ~~~}  $ ~~}  $ ~~if ( ( a - x ) % 4 == 0 && ( b - y ) % 4 == 0 ) {  $ ~~~cout << "YES" << endl ;  $ ~~} else  $ ~~~cout << "NO" << endl ;  $ ~}  $ ~return 0 ;  $ }
map < string , int > f ;  $ void init ( ) {  $ ~f [ "C" ] = 0 ;  $ ~f [ "C#" ] = 1 ;  $ ~f [ "D" ] = 2 ;  $ ~f [ "D#" ] = 3 ;  $ ~f [ "E" ] = 4 ;  $ ~f [ "F" ] = 5 ;  $ ~f [ "F#" ] = 6 ;  $ ~f [ "G" ] = 7 ;  $ ~f [ "G#" ] = 8 ;  $ ~f [ "A" ] = 9 ;  $ ~f [ "B" ] = 10 ;  $ ~f [ "H" ] = 11 ;  $ }  $ int main ( ) {  $ ~init ( ) ;  $ ~string s [ 3 ] ;  $ ~cin >> s [ 0 ] >> s [ 1 ] >> s [ 2 ] ;  $ ~sort ( s , s + 3 ) ;  $ ~string tag = "strange" ;  $ ~do {  $ ~~int a = f [ s [ 1 ] ] - f [ s [ 0 ] ] ;  $ ~~int b = f [ s [ 2 ] ] - f [ s [ 1 ] ] ;  $ ~~if ( a < 0 ) a += 12 ;  $ ~~if ( b < 0 ) b += 12 ;  $ ~~if ( a == 4 && b == 3 ) {  $ ~~~tag = "major" ;  $ ~~~break ;  $ ~~} else if ( a == 3 && b == 4 ) {  $ ~~~tag = "minor" ;  $ ~~~break ;  $ ~~}  $ ~} while ( next_permutation ( s , s + 3 ) ) ;  $ ~cout << tag << endl ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~int n ;  $ ~cin >> n ;  $ ~int p [ n ] ;  $ ~vector < int > v [ n ] ;  $ ~p [ 0 ] = - 1 ;  $ ~for ( int i = 1 ; i < n ; i ++ ) {  $ ~~cin >> p [ i ] ;  $ ~~v [ p [ i ] - 1 ] . push_back ( i ) ;  $ ~~v [ i ] . push_back ( p [ i ] - 1 ) ;  $ ~}  $ ~vector < int > ans ;  $ ~ans . push_back ( n ) ;  $ ~int cur = n ;  $ ~while ( cur != 1 ) {  $ ~~cur = p [ cur - 1 ] ;  $ ~~ans . push_back ( cur ) ;  $ ~}  $ ~for ( int i = ans . size ( ) - 1 ; i >= 0 ; i -- ) {  $ ~~cout << ans [ i ] ;  $ ~~if ( i != 0 ) { cout << " " ; }  $ ~}  $ ~cout << endl ;  $ ~return 0 ;  $ }
int convert_str ( string str ) {  $ ~int x ;  $ ~stringstream ss ( str ) ;  $ ~ss << str ;  $ ~ss >> x ;  $ ~return x ;  $ }  $ string convert_int ( int x ) {  $ ~stringstream ss ;  $ ~ss << x ;  $ ~return ss . str ( ) ;  $ }  $ int main ( ) {  $ ~string str ;  $ ~cin >> str ;  $ ~string left = "" , right = "" ;  $ ~left += str [ 0 ] ;  $ ~left += str [ 1 ] ;  $ ~right += str [ 3 ] ;  $ ~right += str [ 4 ] ;  $ ~string psg = left ;  $ ~reverse ( psg . begin ( ) , psg . end ( ) ) ;  $ ~if ( convert_str ( right ) < convert_str ( psg ) ) {  $ ~~int temp = convert_str ( left ) ;  $ ~~if ( temp <= 8 && temp >= 5 )  $ ~~~cout << "10:01" << endl ;  $ ~~else if ( temp <= 19 && temp >= 15 )  $ ~~~cout << "20:02" << endl ;  $ ~~else  $ ~~~cout << left << ':' << psg << endl ;  $ ~} else {  $ ~~if ( left == "23" )  $ ~~~cout << "00:00" << endl ;  $ ~~else {  $ ~~~int temp ;  $ ~~~temp = convert_str ( left ) ;  $ ~~~if ( temp <= 8 && temp >= 5 )  $ ~~~~temp = 10 ;  $ ~~~else if ( temp <= 19 && temp >= 15 )  $ ~~~~temp = 20 ;  $ ~~~else  $ ~~~~temp ++ ;  $ ~~~left = convert_int ( temp ) ;  $ ~~~if ( left . length ( ) == 1 ) {  $ ~~~~string cat = "0" ;  $ ~~~~cat += left ;  $ ~~~~left = cat ;  $ ~~~}  $ ~~~right = left ;  $ ~~~reverse ( right . begin ( ) , right . end ( ) ) ;  $ ~~~cout << left << ':' << right << endl ;  $ ~~}  $ ~}  $ ~return 0 ;  $ }
int main ( ) {  $ ~double d , l , a , b ;  $ ~cin >> d >> l >> a >> b ;  $ ~cout << fixed << setprecision ( 6 ) << ( l - d ) / ( a + b ) << endl ;  $ }
const int N = 1e5 + 5 ;  $ int n , d , x [ N ] ;  $ long long ans ;  $ int main ( ) {  $ ~cin >> n >> d ;  $ ~for ( int i = 0 , p = 0 ; i < n ; i ++ ) {  $ ~~cin >> x [ i ] ;  $ ~~while ( x [ i ] - x [ p ] > d ) p ++ ;  $ ~~ans += ( i - p - 1 LL ) * ( i - p ) / 2 ;  $ ~}  $ ~cout << ans << endl ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~string Sentence ;  $ ~cin >> Sentence ;  $ ~int beforeP = 0 , afterP = 0 , after = 0 ;  $ ~bool equal = true ;  $ ~bool Plus = true ;  $ ~for ( int i = 0 ; Sentence [ i ] != '\0' ; ) {  $ ~~if ( equal ) {  $ ~~~if ( Sentence [ i ] == '|' && Plus )  $ ~~~~beforeP ++ ;  $ ~~~else if ( Sentence [ i ] == '|' ) {  $ ~~~~afterP ++ ;  $ ~~~}  $ ~~~if ( Sentence [ i + 1 ] == '+' ) Plus = false ;  $ ~~} else {  $ ~~~if ( Sentence [ i ] == '|' ) after ++ ;  $ ~~}  $ ~~i ++ ;  $ ~~if ( Sentence [ i ] == '=' ) equal = false ;  $ ~}  $ ~if ( abs ( after - ( beforeP + afterP ) ) == 2 ) {  $ ~~if ( after > ( beforeP + afterP ) ) {  $ ~~~cout << "|" ;  $ ~~~for ( int i = 0 ; Sentence [ i + 1 ] != '\0' ; i ++ ) cout << Sentence [ i ] ;  $ ~~} else {  $ ~~~if ( beforeP == 1 ) {  $ ~~~~for ( int i = 0 ; Sentence [ i ] != '\0' ; i ++ ) {  $ ~~~~~cout << Sentence [ i ] ;  $ ~~~~~if ( Sentence [ i ] == '+' ) i ++ ;  $ ~~~~}  $ ~~~} else {  $ ~~~~for ( int i = 1 ; Sentence [ i ] != '\0' ; i ++ ) { cout << Sentence [ i ] ; }  $ ~~~}  $ ~~~cout << "|" ;  $ ~~}  $ ~} else if ( after == ( beforeP + afterP ) ) {  $ ~~cout << Sentence ;  $ ~} else {  $ ~~cout << "Impossible" ;  $ ~}  $ ~cout << endl ;  $ ~return 0 ;  $ }
long long t , s , x ;  $ int main ( ) {  $ ~cin >> t >> s >> x ;  $ ~if ( x < t )  $ ~~cout << "NO\n" ;  $ ~else if ( x - 1 == t )  $ ~~cout << "NO\n" ;  $ ~else if ( ( x - t ) % s == 0 || ( x - t ) % s == 1 )  $ ~~cout << "YES\n" ;  $ ~else  $ ~~cout << "NO\n" ;  $ }
int to_num ( string s ) {  $ ~if ( s . size ( ) >= 4 ) {  $ ~~if ( s . substr ( s . size ( ) - 4 ) == "lios" ) return 0 ;  $ ~}  $ ~if ( s . size ( ) >= 5 ) {  $ ~~if ( s . substr ( s . size ( ) - 5 ) == "liala" ) return 1 ;  $ ~}  $ ~if ( s . size ( ) >= 3 ) {  $ ~~if ( s . substr ( s . size ( ) - 3 ) == "etr" ) return 2 ;  $ ~}  $ ~if ( s . size ( ) >= 4 ) {  $ ~~if ( s . substr ( s . size ( ) - 4 ) == "etra" ) return 3 ;  $ ~}  $ ~if ( s . size ( ) >= 6 ) {  $ ~~if ( s . substr ( s . size ( ) - 6 ) == "initis" ) return 4 ;  $ ~}  $ ~if ( s . size ( ) >= 6 ) {  $ ~~if ( s . substr ( s . size ( ) - 6 ) == "inites" ) return 5 ;  $ ~}  $ ~return - 1 ;  $ }  $ bool islegal ( vector < int > ans ) {  $ ~if ( ans [ 0 ] % 2 == 0 ) {  $ ~~for ( int i = 1 ; i < ans . size ( ) ; i ++ )  $ ~~~if ( ans [ i ] % 2 != 0 ) return false ;  $ ~} else {  $ ~~for ( int i = 0 ; i < ans . size ( ) ; i ++ ) {  $ ~~~if ( ans [ i ] == - 1 ) return false ;  $ ~~~if ( ans [ i ] % 2 == 0 ) return false ;  $ ~~}  $ ~}  $ ~return true ;  $ }  $ bool isok ( vector < int > ans ) {  $ ~bool f = false ;  $ ~for ( int i = 0 ; i < ans . size ( ) ; i ++ ) {  $ ~~if ( ( ans [ i ] / 2 ) == 1 && ! f ) {  $ ~~~f = true ;  $ ~~~continue ;  $ ~~}  $ ~~if ( ! f ) {  $ ~~~if ( ans [ i ] / 2 != 0 ) return false ;  $ ~~} else {  $ ~~~if ( ans [ i ] / 2 != 2 ) return false ;  $ ~~}  $ ~}  $ ~if ( ! f ) { return false ; }  $ ~return true ;  $ }  $ int main ( ) {  $ ~char c [ 100010 ] ;  $ ~string s ;  $ ~vector < string > res ;  $ ~vector < int > ans ;  $ ~int pos = 0 ;  $ ~gets ( c ) ;  $ ~s = c ;  $ ~for ( int i = 0 ; i < s . size ( ) ; i ++ )  $ ~~if ( s [ i ] == ' ' ) {  $ ~~~res . push_back ( s . substr ( pos , i - pos ) ) ;  $ ~~~pos = i + 1 ;  $ ~~}  $ ~res . push_back ( s . substr ( pos ) ) ;  $ ~for ( int i = 0 ; i < res . size ( ) ; i ++ ) ans . push_back ( to_num ( res [ i ] ) ) ;  $ ~if ( ans . size ( ) == 1 && ans [ 0 ] >= 0 ) {  $ ~~puts ( "YES" ) ;  $ ~~return 0 ;  $ ~}  $ ~if ( islegal ( ans ) ) {  $ ~~if ( isok ( ans ) )  $ ~~~puts ( "YES" ) ;  $ ~~else  $ ~~~puts ( "NO" ) ;  $ ~} else  $ ~~puts ( "NO" ) ;  $ ~return 0 ;  $ }
string rotate ( string curr ) {  $ ~string ans ;  $ ~ans += curr [ 2 ] ;  $ ~ans += curr [ 0 ] ;  $ ~ans += curr [ 3 ] ;  $ ~ans += curr [ 1 ] ;  $ ~return ans ;  $ }  $ int main ( ) {  $ ~set < string > dict ;  $ ~int ans = 0 , n ;  $ ~cin >> n ;  $ ~string temp ;  $ ~while ( n -- ) {  $ ~~string curr ;  $ ~~cin >> curr >> temp ;  $ ~~curr += temp ;  $ ~~cin >> temp ;  $ ~~if ( dict . find ( curr ) == dict . end ( ) ) {  $ ~~~dict . insert ( curr ) ;  $ ~~~for ( int i = 0 ; i < 4 ; i ++ ) {  $ ~~~~curr = rotate ( curr ) ;  $ ~~~~dict . insert ( curr ) ;  $ ~~~}  $ ~~~ans ++ ;  $ ~~}  $ ~}  $ ~cout << ans << endl ;  $ ~return 0 ;  $ }
int dp [ 26 ] [ 26 ] ;  $ void maxi ( int & a , int b ) {  $ ~a = max ( a , b ) ;  $ }  $ int main ( ) {  $ ~int n ;  $ ~cin >> n ;  $ ~for ( int i = 0 ; i < n ; i ++ ) {  $ ~~string s ;  $ ~~cin >> s ;  $ ~~int first = s [ 0 ] - 'a' , last = s [ s . size ( ) - 1 ] - 'a' ;  $ ~~for ( int j = 0 ; j < 26 ; j ++ ) {  $ ~~~if ( dp [ j ] [ first ] ) maxi ( dp [ j ] [ last ] , s . size ( ) + dp [ j ] [ first ] ) ;  $ ~~}  $ ~~maxi ( dp [ first ] [ last ] , s . size ( ) ) ;  $ ~}  $ ~int ans = 0 ;  $ ~for ( int i = 0 ; i < 26 ; i ++ ) { maxi ( ans , dp [ i ] [ i ] ) ; }  $ ~cout << ans << "\n" ;  $ }
int main ( ) {  $ ~string s1 , s2 ;  $ ~cin >> s1 >> s2 ;  $ ~int count = 0 , len1 = s1 . size ( ) , len2 = s2 . size ( ) , len , b1 , b2 ;  $ ~len = ( len1 < len2 ) ? len1 : len2 ;  $ ~char a1 , a2 ;  $ ~for ( int i = 0 ; i < len ; i ++ )  $ ~~if ( s1 . at ( i ) != s2 . at ( i ) ) {  $ ~~~count ++ ;  $ ~~~if ( count == 1 ) { a1 = s1 . at ( i ) , b1 = i ; }  $ ~~~if ( count == 2 ) { a2 = s1 . at ( i ) , b2 = i ; }  $ ~~~if ( count == 2 ) {  $ ~~~~s1 . at ( b1 ) = a2 ;  $ ~~~~s1 . at ( b2 ) = a1 ;  $ ~~~}  $ ~~}  $ ~if ( count != 2 || s1 != s2 )  $ ~~cout << "NO" << endl ;  $ ~else  $ ~~cout << "YES" << endl ;  $ }
vector < long long > v ;  $ void fun ( long long x ) {  $ ~v . push_back ( x ) ;  $ ~if ( x > 1e9 ) return ;  $ ~fun ( x * 10 + 4 ) ;  $ ~fun ( x * 10 + 7 ) ;  $ }  $ int main ( ) {  $ ~fun ( 4 ) ;  $ ~fun ( 7 ) ;  $ ~sort ( v . begin ( ) , v . end ( ) ) ;  $ ~int l , r , cur = 0 ;  $ ~long long res = 0 ;  $ ~cin >> l >> r ;  $ ~for ( int i = 0 ; i < v . size ( ) ; i ++ ) {  $ ~~if ( v [ i ] >= l ) {  $ ~~~cur = i ;  $ ~~~break ;  $ ~~}  $ ~}  $ ~for ( l ; l <= r ; l ++ ) {  $ ~~if ( v [ cur ] < l ) { cur ++ ; }  $ ~~res += v [ cur ] ;  $ ~}  $ ~cout << res << endl ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~map < string , long long > cnt ;  $ ~cnt [ "C" ] = 1 ;  $ ~cnt [ "C#" ] = 2 ;  $ ~cnt [ "D" ] = 3 ;  $ ~cnt [ "D#" ] = 4 ;  $ ~cnt [ "E" ] = 5 ;  $ ~cnt [ "F" ] = 6 ;  $ ~cnt [ "F#" ] = 7 ;  $ ~cnt [ "G" ] = 8 ;  $ ~cnt [ "G#" ] = 9 ;  $ ~cnt [ "A" ] = 10 ;  $ ~cnt [ "B" ] = 11 ;  $ ~cnt [ "H" ] = 12 ;  $ ~string input1 , input2 , input3 ;  $ ~cin >> input1 >> input2 >> input3 ;  $ ~vector < long long > v ;  $ ~v . push_back ( cnt [ input1 ] ) ;  $ ~v . push_back ( cnt [ input2 ] ) ;  $ ~v . push_back ( cnt [ input3 ] ) ;  $ ~sort ( v . begin ( ) , v . end ( ) ) ;  $ ~if ( v [ 1 ] - v [ 0 ] == 4 && v [ 2 ] - v [ 1 ] == 3 ) {  $ ~~cout << "major\n" ;  $ ~} else if ( v [ 2 ] - v [ 1 ] == 4 && ( v [ 2 ] + 3 ) % 12 == v [ 0 ] ) {  $ ~~cout << "major\n" ;  $ ~} else if ( v [ 1 ] - v [ 0 ] == 3 && ( v [ 2 ] + 4 ) % 12 == v [ 0 ] ) {  $ ~~cout << "major\n" ;  $ ~} else if ( ( v [ 1 ] - v [ 0 ] ) * 2 == 4 && ( v [ 2 ] + 3 ) % 12 == v [ 0 ] ) {  $ ~~cout << "major\n" ;  $ ~} else if ( ( v [ 2 ] + 4 ) % 12 == v [ 0 ] && ( v [ 2 ] - v [ 1 ] ) * 2 == 3 ) {  $ ~~cout << "major\n" ;  $ ~} else if ( ( v [ 2 ] - v [ 1 ] ) * 2 == 4 && ( v [ 1 ] - v [ 0 ] ) * 2 == 3 ) {  $ ~~cout << "major\n" ;  $ ~} else if ( v [ 1 ] - v [ 0 ] == 3 && v [ 2 ] - v [ 1 ] == 4 ) {  $ ~~cout << "minor\n" ;  $ ~} else if ( v [ 2 ] - v [ 1 ] == 3 && ( v [ 2 ] + 4 ) % 12 == v [ 0 ] ) {  $ ~~cout << "minor\n" ;  $ ~} else if ( v [ 1 ] - v [ 0 ] == 4 && ( v [ 2 ] + 3 ) % 12 == v [ 0 ] ) {  $ ~~cout << "minor\n" ;  $ ~} else if ( ( v [ 1 ] - v [ 0 ] ) * 2 == 3 && ( v [ 2 ] + 3 ) % 12 == v [ 0 ] ) {  $ ~~cout << "minor\n" ;  $ ~} else if ( ( v [ 2 ] + 3 ) % 12 == v [ 0 ] && ( v [ 2 ] - v [ 1 ] ) * 2 == 4 ) {  $ ~~cout << "minor\n" ;  $ ~} else if ( ( v [ 2 ] - v [ 1 ] ) * 2 == 3 && ( v [ 1 ] - v [ 0 ] ) * 2 == 4 ) {  $ ~~cout << "minor\n" ;  $ ~} else  $ ~~cout << "strange\n" ;  $ ~return 0 ;  $ }
long long int mod = 1000000007 ;  $ long long int l , r ;  $ long long int p [ 18 ] ;  $ long long int ct [ 19 ] ;  $ void init ( ) {  $ ~p [ 0 ] = 1 ;  $ ~for ( int i = 1 ; i <= 17 ; i ++ ) { p [ i ] = 10 ll * p [ i - 1 ] ; }  $ ~ct [ 1 ] = 9 ;  $ ~ct [ 2 ] = 9 ;  $ ~for ( int i = 3 ; i <= 18 ; i ++ ) { ct [ i ] = 9 * p [ i - 2 ] ; }  $ }  $ long long int calc ( long long int num ) {  $ ~vector < int > digits ;  $ ~long long int n = num ;  $ ~while ( num ) {  $ ~~digits . push_back ( num % 10 ) ;  $ ~~num /= 10 ;  $ ~}  $ ~if ( digits . size ( ) == 1 ) { return n - 1 ; }  $ ~int l = digits . size ( ) ;  $ ~long long int ans = 0 ;  $ ~for ( int i = l - 1 ; i >= 0 ; i -- ) {  $ ~~if ( i == l - 1 ) {  $ ~~~if ( digits [ i ] > 1 ) { ans += ( digits [ i ] - 1 ) * ( p [ l - 2 ] ) ; }  $ ~~} else if ( i == 0 ) {  $ ~~~if ( digits [ l - 1 ] < digits [ 0 ] ) { ans += ( 1 ) ; }  $ ~~} else if ( digits [ i ] > 0 ) {  $ ~~~ans += ( digits [ i ] ) * ( p [ i - 1 ] ) ;  $ ~~}  $ ~}  $ ~for ( int i = 0 ; i < l ; i ++ ) { ans += ct [ i ] ; }  $ ~return ans ;  $ }  $ int main ( ) {  $ ~init ( ) ;  $ ~cin >> l >> r ;  $ ~cout << calc ( r + 1 ) - calc ( l ) << endl ;  $ ~return 0 ;  $ }
const int N = 105 ;  $ bool is [ N ] [ N ] ;  $ int f ( int x ) {  $ ~return ( x * ( x - 1 ) * ( x - 2 ) ) / 6 ;  $ }  $ int main ( ) {  $ ~int k ;  $ ~cin >> k ;  $ ~int n = 1 ;  $ ~while ( f ( n + 1 ) <= k ) { n ++ ; }  $ ~k -= f ( n ) ;  $ ~for ( int i = 1 ; i <= n ; i ++ ) {  $ ~~for ( int j = 1 ; j <= n ; j ++ ) {  $ ~~~if ( i != j ) is [ i ] [ j ] = true ;  $ ~~}  $ ~}  $ ~int s = n ;  $ ~while ( k > 0 ) {  $ ~~s ++ ;  $ ~~for ( int i = 1 ; i <= n ; i ++ ) {  $ ~~~if ( k >= i - 1 ) {  $ ~~~~k -= i - 1 ;  $ ~~~~is [ s ] [ i ] = true ;  $ ~~~~is [ i ] [ s ] = true ;  $ ~~~}  $ ~~}  $ ~}  $ ~cout << s << "\n" ;  $ ~for ( int i = 1 ; i <= s ; i ++ ) {  $ ~~for ( int j = 1 ; j <= s ; j ++ ) { cout << is [ i ] [ j ] ; }  $ ~~cout << "\n" ;  $ ~}  $ ~return 0 ;  $ }
int main ( ) {  $ ~char s [ 1000 ] ;  $ ~cin >> s ;  $ ~int n = strlen ( s ) ;  $ ~if ( n < 3 or ( n == 3 and strcmp ( s , "127" ) <= 0 ) )  $ ~~cout << "byte" << endl ;  $ ~else if ( n < 5 or ( n == 5 and strcmp ( s , "32767" ) <= 0 ) )  $ ~~cout << "short" << endl ;  $ ~else if ( n < 10 or ( n == 10 and strcmp ( s , "2147483647" ) <= 0 ) )  $ ~~cout << "int" << endl ;  $ ~else if ( n < 19 or ( n == 19 and strcmp ( s , "9223372036854775807" ) <= 0 ) )  $ ~~cout << "long" << endl ;  $ ~else  $ ~~cout << "BigInteger" << endl ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~char s [ 200006 ] ;  $ ~int count , n , flag ;  $ ~while ( cin >> n ) {  $ ~~count = 0 ;  $ ~~memset ( s , 0 , sizeof ( s ) ) ;  $ ~~for ( int i = 0 ; i < n ; i ++ ) cin >> s [ i ] ;  $ ~~int i = 0 , j = n - 1 ;  $ ~~while ( s [ i ++ ] == '<' ) count ++ ;  $ ~~while ( s [ j -- ] == '>' ) count ++ ;  $ ~~cout << count << endl ;  $ ~}  $ }
int main ( ) {  $ ~int n ;  $ ~string a ;  $ ~string b ;  $ ~cin >> a >> b ;  $ ~map < string , int > mp ;  $ ~mp [ "monday" ] = 1 ;  $ ~mp [ "tuesday" ] = 2 ;  $ ~mp [ "wednesday" ] = 3 ;  $ ~mp [ "thursday" ] = 4 ;  $ ~mp [ "friday" ] = 5 ;  $ ~mp [ "saturday" ] = 6 ;  $ ~mp [ "sunday" ] = 0 ;  $ ~int p1 = mp [ a ] ;  $ ~int p2 = mp [ b ] ;  $ ~if ( ( p1 + 30 ) % 7 == p2 ) {  $ ~~puts ( "YES" ) ;  $ ~~return 0 ;  $ ~}  $ ~if ( ( p1 + 28 ) % 7 == p2 ) {  $ ~~puts ( "YES" ) ;  $ ~~return 0 ;  $ ~}  $ ~if ( ( p1 + 31 ) % 7 == p2 ) {  $ ~~puts ( "YES" ) ;  $ ~~return 0 ;  $ ~}  $ ~cout << "NO" << endl ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~string s ;  $ ~cin >> s ;  $ ~int ac = 0 ;  $ ~for ( int i = 0 ; i < s . size ( ) ; i ++ ) { ac += s [ i ] == 'a' ; }  $ ~if ( ac == s . size ( ) ) {  $ ~~s [ s . size ( ) - 1 ] = 'z' ;  $ ~} else {  $ ~~int astarted = 0 ;  $ ~~for ( int i = 0 ; i < s . size ( ) ; i ++ ) {  $ ~~~if ( astarted && s [ i ] == 'a' ) { break ; }  $ ~~~if ( s [ i ] != 'a' ) {  $ ~~~~astarted = 1 ;  $ ~~~~s [ i ] -- ;  $ ~~~}  $ ~~}  $ ~}  $ ~cout << s << endl ;  $ pause :  $ ~int pause ;  $ ~cin >> pause ;  $ ~return 0 ;  $ }
const int maxn = 110 ;  $ int crush [ maxn ] ;  $ int n ;  $ bool vis [ maxn ] ;  $ bool can = true ;  $ long long d = 0 ;  $ long long ans = 1 ;  $ void dfs ( int now , int start ) {  $ ~if ( now == start && vis [ start ] ) { return ; }  $ ~if ( vis [ now ] ) {  $ ~~can = false ;  $ ~~return ;  $ ~}  $ ~vis [ now ] = true ;  $ ~dfs ( crush [ now ] , start ) ;  $ ~d ++ ;  $ }  $ int main ( ) {  $ ~cin >> n ;  $ ~for ( int i = 1 ; i <= n ; i ++ ) cin >> crush [ i ] ;  $ ~memset ( vis , 0 , sizeof vis ) ;  $ ~for ( int i = 1 ; i <= n && can ; i ++ ) {  $ ~~if ( ! vis [ i ] ) {  $ ~~~d = 0 ;  $ ~~~dfs ( i , i ) ;  $ ~~~if ( d % 2 == 0 ) { d /= 2 ; }  $ ~~~ans = ans * d / __gcd ( ans , d ) ;  $ ~~}  $ ~}  $ ~if ( can ) {  $ ~~cout << ans << endl ;  $ ~} else {  $ ~~cout << "-1" << endl ;  $ ~}  $ ~return 0 ;  $ }
long long int l , r ;  $ vector < long long int > s ;  $ vector < long long int > Next ;  $ void fun ( long long int num ) {  $ ~if ( num > r ) {  $ ~~Next . push_back ( num ) ;  $ ~~return ;  $ ~}  $ ~if ( num >= l ) s . push_back ( num ) ;  $ ~fun ( num * 10 + 4 ) ;  $ ~fun ( num * 10 + 7 ) ;  $ }  $ int main ( ) {  $ ~cin >> l >> r ;  $ ~fun ( 0 ) ;  $ ~sort ( s . begin ( ) , s . end ( ) ) ;  $ ~sort ( Next . begin ( ) , Next . end ( ) ) ;  $ ~long long int len = s . size ( ) ;  $ ~long long int Left = l - 1 ;  $ ~long long int sum = 0 ;  $ ~for ( long long int i = 0 ; i < len ; i ++ ) {  $ ~~long long int num = ( s [ i ] - Left ) ;  $ ~~sum += num * s [ i ] ;  $ ~~Left = s [ i ] ;  $ ~}  $ ~if ( len == 0 ) {  $ ~~sum = sum + ( r - Left ) * Next [ 0 ] ;  $ ~} else if ( s [ len - 1 ] != r ) {  $ ~~sum = sum + ( r - Left ) * Next [ 0 ] ;  $ ~}  $ ~cout << sum << "\n" ;  $ }
int main ( ) {  $ ~int n , d ;  $ ~cin >> n >> d ;  $ ~int v [ 1000005 ] ;  $ ~for ( int i = 0 ; i < n ; i ++ ) {  $ ~~int point ;  $ ~~cin >> point ;  $ ~~v [ i ] = point ;  $ ~}  $ ~long long result = 0 ;  $ ~for ( int right = 2 , left = 0 ; right < n ; right ++ ) {  $ ~~while ( v [ right ] - v [ left ] > d ) { left ++ ; }  $ ~~result += ( long long ) ( right - left ) * ( right - left - 1 ) / 2 ;  $ ~}  $ ~cout << result << endl ;  $ ~return 0 ;  $ }
int n , L , a ;  $ int main ( ) {  $ ~cin >> n >> L >> a ;  $ ~unsigned int result = 0 ;  $ ~int prevbeg = 0 , prevlen = 0 ;  $ ~for ( int currcase = 0 ; currcase < n ; ++ currcase ) {  $ ~~int begin , length ;  $ ~~cin >> begin >> length ;  $ ~~if ( currcase != 0 ) {  $ ~~~int breaktime = begin - ( prevbeg + prevlen ) ;  $ ~~~result += floor ( breaktime / a ) ;  $ ~~} else {  $ ~~~result += floor ( begin / a ) ;  $ ~~}  $ ~~prevbeg = begin ;  $ ~~prevlen = length ;  $ ~}  $ ~int lastbreaktime = L - ( prevbeg + prevlen ) ;  $ ~result += floor ( lastbreaktime / a ) ;  $ ~cout << result << endl ;  $ ~return 0 ;  $ }
int n , m ;  $ bool lg [ 111 ] [ 111 ] ;  $ int a [ 111 ] [ 111 ] ;  $ bool v [ 111 ] = { 0 } ;  $ bool zero [ 111 ] = { 0 } ;  $ int ex = 0 ;  $ void dfs ( int i ) {  $ ~v [ i ] = true ;  $ ~for ( int j = 1 ; j <= n ; j ++ ) {  $ ~~if ( a [ i ] [ j ] && ! v [ j ] ) { dfs ( j ) ; }  $ ~}  $ }  $ int main ( ) {  $ ~cin >> n >> m ;  $ ~for ( int i = 1 ; i <= n ; i ++ ) {  $ ~~int t ;  $ ~~cin >> t ;  $ ~~if ( t == 0 ) {  $ ~~~zero [ i ] = true ;  $ ~~~ex ++ ;  $ ~~}  $ ~~while ( t -- ) {  $ ~~~int c ;  $ ~~~cin >> c ;  $ ~~~lg [ i ] [ c ] = true ;  $ ~~}  $ ~}  $ ~for ( int i = 1 ; i <= n ; i ++ ) {  $ ~~for ( int j = 1 ; j <= n ; j ++ ) {  $ ~~~if ( i != j ) {  $ ~~~~for ( int k = 1 ; k <= m ; k ++ ) {  $ ~~~~~if ( lg [ i ] [ k ] && lg [ j ] [ k ] ) { a [ i ] [ j ] = 1 ; }  $ ~~~~}  $ ~~~}  $ ~~}  $ ~}  $ ~int ans = 0 ;  $ ~for ( int i = 1 ; i <= n ; i ++ ) {  $ ~~if ( ! v [ i ] && ! zero [ i ] ) {  $ ~~~dfs ( i ) ;  $ ~~~ans ++ ;  $ ~~}  $ ~}  $ ~ans -- ;  $ ~if ( ans < 0 ) ans = 0 ;  $ ~cout << ans + ex << endl ;  $ ~return 0 ;  $ }
int data [ 100005 ] = { 0 } ;  $ int main ( ) {  $ ~int n ;  $ ~cin >> n ;  $ ~cout << n / 2 << endl ;  $ ~for ( int i = 1 ; i < n / 2 ; i ++ ) cout << 2 << " " ;  $ ~if ( n % 2 == 1 )  $ ~~cout << 3 << endl ;  $ ~else  $ ~~cout << 2 << endl ;  $ }
int main ( ) {  $ ~int n ;  $ ~vector < int > myv ;  $ ~cin >> n ;  $ ~for ( int i = 0 ; i < n ; i ++ ) {  $ ~~int res = 0 ;  $ ~~for ( int j = 0 ; j < 4 ; j ++ ) {  $ ~~~int tmp ;  $ ~~~cin >> tmp ;  $ ~~~res += tmp ;  $ ~~}  $ ~~myv . push_back ( res ) ;  $ ~}  $ ~int tomas = myv [ 0 ] ;  $ ~sort ( myv . begin ( ) , myv . end ( ) ) ;  $ ~reverse ( myv . begin ( ) , myv . end ( ) ) ;  $ ~for ( int i = 0 ; i < n ; i ++ ) {  $ ~~if ( tomas == myv [ i ] ) {  $ ~~~cout << i + 1 << endl ;  $ ~~~return 0 ;  $ ~~}  $ ~}  $ ~return 0 ;  $ }
string s ;  $ int main ( ) {  $ ~int n ;  $ ~int sum ;  $ ~while ( cin >> n ) {  $ ~~cin >> s ;  $ ~~sum = 0 ;  $ ~~for ( int i = 0 ; i < n ; i ++ ) {  $ ~~~if ( s [ i ] == '<' ) {  $ ~~~~sum ++ ;  $ ~~~} else {  $ ~~~~break ;  $ ~~~}  $ ~~}  $ ~~for ( int j = n - 1 ; j >= 0 ; j -- ) {  $ ~~~if ( s [ j ] == '>' ) {  $ ~~~~sum ++ ;  $ ~~~} else {  $ ~~~~break ;  $ ~~~}  $ ~~}  $ ~~cout << sum << endl ;  $ ~}  $ }
const double EPS = 1e-8 ;  $ void fast ( ) { }  $ bool sortby ( const pair < int , int > & a , const pair < int , int > & b ) {  $ ~if ( a . first >= b . first && a . second >= b . second ) return true ;  $ ~return false ;  $ }  $ double area ( int x1 , int y1 , int x2 , int y2 , int x3 , int y3 ) {  $ ~return abs ( ( x1 * ( y2 - y3 ) + x2 * ( y3 - y1 ) + x3 * ( y1 - y2 ) ) / 2.0 ) ;  $ }  $ int gcd ( int a , int b ) {  $ ~return b == 0 ? a : gcd ( b , a % b ) ;  $ }  $ int main ( ) {  $ ~fast ( ) ;  $ ~int n , m , x , ans = 0 , z = 0 ;  $ ~cin >> n >> m ;  $ ~for ( int i = 1 ; i <= n ; i ++ ) {  $ ~~cin >> x ;  $ ~~int y ;  $ ~~x % m == 0 ? y = x / m : y = x / m + 1 ;  $ ~~if ( y >= z ) {  $ ~~~z = y ;  $ ~~~ans = i ;  $ ~~}  $ ~}  $ ~cout << ans << endl ;  $ ~return 0 ;  $ }
const int dx [ 4 ] = { 1 , 0 , - 1 , 0 } , dy [ 4 ] = { 0 , 1 , 0 , - 1 } ;  $ set < int > bad ;  $ int a [ 100010 ] ;  $ int main ( ) {  $ ~int n , k ;  $ ~cin >> n >> k ;  $ ~for ( int i = 0 ; i < n ; i ++ ) cin >> a [ i ] ;  $ ~sort ( a , a + n ) ;  $ ~int ans = 0 ;  $ ~for ( int i = n - 1 ; i >= 0 ; i -- ) {  $ ~~if ( bad . find ( a [ i ] ) == bad . end ( ) ) {  $ ~~~ans ++ ;  $ ~~~if ( a [ i ] % k == 0 ) bad . insert ( a [ i ] / k ) ;  $ ~~}  $ ~}  $ ~cout << ans << endl ;  $ ~return 0 ;  $ }
int a ;  $ string str ;  $ int sum [ 4005 ] ;  $ long long used [ 36005 ] ;  $ long long result = 0 ;  $ int main ( ) {  $ ~int ii , jj ;  $ ~int len , usedLen ;  $ ~cin >> a >> str ;  $ ~len = str . size ( ) ;  $ ~for ( ii = 0 ; ii < len ; ii ++ ) sum [ ii + 1 ] = sum [ ii ] + ( str [ ii ] - '0' ) ;  $ ~for ( ii = 0 ; ii < len ; ii ++ ) {  $ ~~for ( jj = ( ii + 1 ) ; jj <= len ; jj ++ ) used [ sum [ jj ] - sum [ ii ] ] ++ ;  $ ~}  $ ~if ( a != 0 ) {  $ ~~usedLen = min ( a , 36000 ) ;  $ ~~for ( ii = 1 ; ii <= usedLen ; ii ++ ) {  $ ~~~if ( ( ( a % ii ) == 0 ) && ( ( a / ii ) <= usedLen ) ) result += used [ ii ] * used [ a / ii ] ;  $ ~~}  $ ~} else  $ ~~result = ( len * len + ( len - used [ 0 ] ) ) * used [ 0 ] ;  $ ~cout << result << "\n" ;  $ ~return 0 ;  $ }
const int maxn = 2e6 + 7 ;  $ bool prime [ maxn ] ;  $ bool palindrome ( string s ) {  $ ~int lo = 0 , hi = s . size ( ) - 1 ;  $ ~while ( lo <= hi ) {  $ ~~if ( s [ lo ++ ] != s [ hi -- ] ) return false ;  $ ~}  $ ~return true ;  $ }  $ int main ( ) {  $ ~prime [ 1 ] = true ;  $ ~for ( int i = 2 ; i < maxn ; i ++ ) {  $ ~~if ( ! prime [ i ] ) {  $ ~~~for ( int j = i + i ; j < maxn ; j += i ) prime [ j ] = true ;  $ ~~}  $ ~}  $ ~int p , q ;  $ ~cin >> p >> q ;  $ ~int pi = 0 , rub = 0 ;  $ ~int ans = 0 ;  $ ~for ( int i = 1 ; i < maxn ; i ++ ) {  $ ~~string num = "" ;  $ ~~int x = i ;  $ ~~while ( x ) {  $ ~~~num += ( char ) ( x % 10 + '0' ) ;  $ ~~~x /= 10 ;  $ ~~}  $ ~~if ( palindrome ( num ) ) rub ++ ;  $ ~~if ( ! prime [ i ] ) pi ++ ;  $ ~~if ( pi * q <= rub * p ) ans = i ;  $ ~}  $ ~if ( ans == 0 )  $ ~~cout << "Palindromic tree is better than splay tree" << '\n' ;  $ ~else  $ ~~cout << ans << '\n' ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~long long N , M , K , L ;  $ ~cin >> N >> M >> K >> L ;  $ ~long long left = ( K + L ) / M ;  $ ~if ( ( left * M ) < ( K + L ) ) left ++ ;  $ ~long long right = N / M ;  $ ~long long ans = - 1 ;  $ ~if ( left <= right ) { ans = left ; }  $ ~cout << ans << endl ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~map < string , int > mp ;  $ ~map < string , int > : : iterator it ;  $ ~string a ;  $ ~int n , m ;  $ ~int val ;  $ ~double k ;  $ ~cin >> n >> m >> k ;  $ ~for ( int i = 0 ; i < n ; i ++ ) {  $ ~~cin >> a >> val ;  $ ~~if ( val * 1.0 * k + 0.001 >= 100.0 )  $ ~~~mp [ a ] += val * 1.0 * k + 0.001 ;  $ ~~else  $ ~~~a . erase ( ) ;  $ ~}  $ ~for ( int i = 0 ; i < m ; i ++ ) {  $ ~~cin >> a ;  $ ~~if ( mp [ a ] == 0 ) mp [ a ] = 0 ;  $ ~}  $ ~cout << mp . size ( ) << endl ;  $ ~for ( it = mp . begin ( ) ; it != mp . end ( ) ; it ++ ) { cout << it -> first << ' ' << it -> second << endl ; }  $ ~return 0 ;  $ }
const long long N = 2002 ;  $ map < string , long long > mp ;  $ map < pair < long long , long long > , long long > likes ;  $ int main ( ) {  $ ~long long n = 7 , m , sz = 0 , a , b , c ;  $ ~cin >> m ;  $ ~while ( m -- ) {  $ ~~string l , r ;  $ ~~cin >> l >> r >> r ;  $ ~~if ( mp [ l ] == 0 ) mp [ l ] = ++ sz ;  $ ~~if ( mp [ r ] == 0 ) mp [ r ] = ++ sz ;  $ ~~likes [ make_pair ( mp [ l ] , mp [ r ] ) ] = 1 ;  $ ~}  $ ~cin >> a >> b >> c ;  $ ~long long pt = 2187 , minimal = a + b + c , ml ;  $ ~for ( long long i = 0 ; i < pt ; i ++ ) {  $ ~~vector < long long > t [ 3 ] ;  $ ~~long long k = i , m1 , m2 , m3 , lks = 0 ;  $ ~~for ( long long i = 1 ; i <= n ; i ++ ) {  $ ~~~t [ k % 3 ] . push_back ( i ) ;  $ ~~~k /= 3 ;  $ ~~}  $ ~~if ( t [ 0 ] . size ( ) && t [ 1 ] . size ( ) && t [ 2 ] . size ( ) ) {  $ ~~~m1 = a / t [ 0 ] . size ( ) ;  $ ~~~m2 = b / t [ 1 ] . size ( ) ;  $ ~~~m3 = c / t [ 2 ] . size ( ) ;  $ ~~~m1 = max ( m1 , max ( m2 , m3 ) ) - min ( m1 , min ( m2 , m3 ) ) ;  $ ~~~for ( long long i = 0 ; i < 3 ; i ++ )  $ ~~~~for ( long long j = 0 ; j < t [ i ] . size ( ) ; j ++ )  $ ~~~~~for ( long long k = 0 ; k < t [ i ] . size ( ) ; k ++ ) lks += likes [ make_pair ( t [ i ] [ j ] , t [ i ] [ k ] ) ] ;  $ ~~~if ( minimal > m1 ) {  $ ~~~~minimal = m1 ;  $ ~~~~ml = lks ;  $ ~~~} else if ( minimal == m1 )  $ ~~~~ml = max ( ml , lks ) ;  $ ~~}  $ ~}  $ ~cout << minimal << " " << ml << endl ;  $ }
char a [ 120 ] [ 120 ] ;  $ int check ( int n ) {  $ ~int flag1 ;  $ ~for ( int i = 1 ; i <= n ; i ++ ) {  $ ~~flag1 = 0 ;  $ ~~for ( int j = 1 ; j <= n ; j ++ ) {  $ ~~~if ( a [ i ] [ j ] == '.' ) {  $ ~~~~flag1 = 1 ;  $ ~~~~break ;  $ ~~~}  $ ~~}  $ ~~if ( ! flag1 ) { break ; }  $ ~}  $ ~int flag2 ;  $ ~for ( int i = 1 ; i <= n ; i ++ ) {  $ ~~flag2 = 0 ;  $ ~~for ( int j = 1 ; j <= n ; j ++ ) {  $ ~~~if ( a [ j ] [ i ] == '.' ) {  $ ~~~~flag2 = 1 ;  $ ~~~~break ;  $ ~~~}  $ ~~}  $ ~~if ( ! flag2 ) { break ; }  $ ~}  $ ~if ( flag1 == 0 && flag2 == 0 ) {  $ ~~return 0 ;  $ ~} else {  $ ~~if ( flag1 ) {  $ ~~~return 1 ;  $ ~~} else {  $ ~~~return 2 ;  $ ~~}  $ ~}  $ }  $ int main ( ) {  $ ~int n ;  $ ~while ( cin >> n ) {  $ ~~for ( int i = 1 ; i <= n ; i ++ ) {  $ ~~~for ( int j = 1 ; j <= n ; j ++ ) { cin >> a [ i ] [ j ] ; }  $ ~~}  $ ~~int judge = check ( n ) ;  $ ~~if ( judge ) {  $ ~~~if ( judge == 1 ) {  $ ~~~~for ( int i = 1 ; i <= n ; i ++ ) {  $ ~~~~~for ( int j = 1 ; j <= n ; j ++ ) {  $ ~~~~~~if ( a [ i ] [ j ] == '.' ) {  $ ~~~~~~~cout << i << " " << j << endl ;  $ ~~~~~~~break ;  $ ~~~~~~}  $ ~~~~~}  $ ~~~~}  $ ~~~} else {  $ ~~~~for ( int i = 1 ; i <= n ; i ++ ) {  $ ~~~~~for ( int j = 1 ; j <= n ; j ++ ) {  $ ~~~~~~if ( a [ j ] [ i ] == '.' ) {  $ ~~~~~~~cout << j << " " << i << endl ;  $ ~~~~~~~break ;  $ ~~~~~~}  $ ~~~~~}  $ ~~~~}  $ ~~~}  $ ~~} else {  $ ~~~cout << "-1" << endl ;  $ ~~}  $ ~}  $ }
int main ( ) {  $ ~int N ;  $ ~cin >> N ;  $ ~int S [ N ] ;  $ ~for ( int i = 0 ; i < N ; i ++ ) { cin >> S [ i ] ; }  $ ~sort ( S , S + N ) ;  $ ~for ( int i = 0 ; i < N - 1 ; i ++ ) { cout << S [ i ] << " " ; }  $ ~cout << S [ N - 1 ] << endl ;  $ }
int main ( ) {  $ ~int n ;  $ ~cin >> n ;  $ ~n *= 2 ;  $ ~bool ans = false ;  $ ~int sqr = ceil ( sqrt ( n ) ) ;  $ ~for ( int i = 1 ; i <= sqr ; i ++ ) {  $ ~~int l = 1 , r = sqr , j ;  $ ~~while ( l <= r ) {  $ ~~~j = l + ( r - l ) / 2 ;  $ ~~~int t = i * ( i + 1 ) + j * ( j + 1 ) ;  $ ~~~if ( t == n ) {  $ ~~~~ans = true ;  $ ~~~~break ;  $ ~~~} else if ( t < n )  $ ~~~~l = j + 1 ;  $ ~~~else  $ ~~~~r = j - 1 ;  $ ~~}  $ ~~if ( ans ) break ;  $ ~}  $ ~cout << ( ans ? "YES" : "NO" ) << endl ;  $ ~return 0 ;  $ }
string cad , salida ;  $ int flag = 1 ;  $ int main ( ) {  $ ~cin >> cad ;  $ ~for ( int i = 0 ; i < cad . length ( ) ; i ++ ) {  $ ~~if ( cad [ i ] == '0' && flag == 1 ) {  $ ~~~flag = 0 ;  $ ~~} else {  $ ~~~salida += cad [ i ] ;  $ ~~}  $ ~}  $ ~if ( salida . length ( ) == cad . length ( ) ) salida = salida . substr ( 0 , salida . length ( ) - 1 ) ;  $ ~cout << salida << endl ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~int n , i , temp , cnt = - 1 , res = 0 ;  $ ~vector < int > a ;  $ ~cin >> n ;  $ ~a . push_back ( 0 ) ;  $ ~a . push_back ( 0 ) ;  $ ~for ( i = 0 ; i < n ; i ++ ) {  $ ~~cin >> temp ;  $ ~~a . push_back ( temp ) ;  $ ~}  $ ~a . push_back ( 1001 ) ;  $ ~for ( i = 2 ; i <= n + 2 ; i ++ ) {  $ ~~if ( a [ i ] == a [ i - 1 ] + 1 ) {  $ ~~~cnt ++ ;  $ ~~} else {  $ ~~~if ( cnt > res ) { res = cnt ; }  $ ~~~cnt = - 1 ;  $ ~~}  $ ~}  $ ~if ( cnt > res ) { res = cnt ; }  $ ~cout << res << endl ;  $ ~return 0 ;  $ }
const long long sz = 5e6 + 5 , tot = 1e7 + 5 , pt = 666e3 ;  $ bool ara [ sz ] ;  $ void makePrimes ( ) {  $ ~long long i , j , r , k = 1 ;  $ ~for ( i = 0 ; i < sz ; i ++ ) ara [ i ] = 1 ;  $ ~r = sqrt ( tot ) ;  $ ~for ( i = 1 ; i <= r / 2 ; i ++ ) {  $ ~~if ( ara [ i ] == 1 ) {  $ ~~~for ( j = ( ( 2 * i + 1 ) * ( 2 * i + 1 ) - 1 ) / 2 ; j <= sz ; j += ( 2 * i + 1 ) ) { ara [ j ] = 0 ; }  $ ~~}  $ ~}  $ }  $ int main ( ) {  $ ~makePrimes ( ) ;  $ ~long long n , m , i ;  $ ~cin >> n ;  $ ~for ( i = 1 ; ; i ++ ) {  $ ~~long long x = n * i + 1 ;  $ ~~if ( x % 2 == 0 && x != 2 )  $ ~~~break ;  $ ~~else {  $ ~~~if ( ara [ ( x - 1 ) / 2 ] == 0 ) break ;  $ ~~}  $ ~}  $ ~cout << i << endl ;  $ }
int main ( ) {  $ ~int n , a [ 102 ] , b [ 102 ] ;  $ ~int k = 0 , cnt = 0 , res = 0 ;  $ ~int vis [ 102 ] = { 0 } ;  $ ~cin >> n ;  $ ~for ( int i = 1 ; i <= n ; i ++ ) {  $ ~~cin >> a [ i ] ;  $ ~~k ++ ;  $ ~~if ( a [ i ] < 0 ) cnt ++ ;  $ ~~if ( cnt > 2 ) {  $ ~~~res ++ ;  $ ~~~b [ res ] = k - 1 ;  $ ~~~k = 1 ;  $ ~~~cnt = 1 ;  $ ~~~vis [ i - 1 ] = 1 ;  $ ~~}  $ ~}  $ ~cnt = 0 , k = 0 ;  $ ~for ( int i = n ; i >= 1 ; i -- ) {  $ ~~if ( vis [ i ] ) break ;  $ ~~k ++ ;  $ ~~if ( a [ i ] < 0 ) cnt ++ ;  $ ~}  $ ~if ( cnt ) res ++ ;  $ ~if ( res == 0 ) res ++ ;  $ ~b [ res ] = k ;  $ ~cout << res << endl ;  $ ~for ( int i = 1 ; i <= res - 1 ; i ++ ) cout << b [ i ] << ' ' ;  $ ~cout << b [ res ] << endl ;  $ ~return 0 ;  $ }
map < int , int > m ;  $ int s [ 300000 ] , a [ 505 ] ;  $ bool cmp ( int a , int b ) {  $ ~return a > b ;  $ }  $ int gcd ( int a , int b ) {  $ ~return b ? gcd ( b , a % b ) : a ;  $ }  $ int main ( ) {  $ ~int n , t , k ;  $ ~while ( cin >> n ) {  $ ~~for ( int i = 0 ; i < n * n ; i ++ ) {  $ ~~~cin >> s [ i ] ;  $ ~~~m [ s [ i ] ] ++ ;  $ ~~}  $ ~~sort ( s , s + n * n , cmp ) ;  $ ~~t = 0 , k = 0 ;  $ ~~for ( int i = 0 ; i < n * n ; i ++ ) {  $ ~~~if ( m [ s [ i ] ] == 0 ) continue ;  $ ~~~m [ s [ i ] ] -- ;  $ ~~~for ( int j = 0 ; j < t ; j ++ ) {  $ ~~~~k = gcd ( s [ i ] , a [ j ] ) ;  $ ~~~~m [ k ] -= 2 ;  $ ~~~}  $ ~~~a [ t ++ ] = s [ i ] ;  $ ~~}  $ ~~cout << a [ 0 ] ;  $ ~~for ( int i = 1 ; i < t ; i ++ ) { cout << " " << a [ i ] ; }  $ ~~cout << endl ;  $ ~}  $ ~return 0 ;  $ }
int main ( ) {  $ ~int n , k = - 1 , s = 0 , a [ 100 ] ;  $ ~cin >> n ;  $ ~for ( int i = 0 ; i < n ; i ++ ) {  $ ~~cin >> a [ i ] ;  $ ~~s += a [ i ] ;  $ ~~if ( a [ i ] != 0 && k == - 1 ) k = i + 1 ;  $ ~}  $ ~if ( k == - 1 )  $ ~~cout << "NO" << endl ;  $ ~else {  $ ~~cout << "YES" << endl ;  $ ~~if ( s != 0 )  $ ~~~cout << "1" << endl << "1 " << n << endl ;  $ ~~else {  $ ~~~cout << "2" << endl ;  $ ~~~cout << "1 " << k << endl ;  $ ~~~cout << k + 1 << " " << n << endl ;  $ ~~}  $ ~}  $ ~return 0 ;  $ }
long long n ;  $ string s ;  $ int main ( ) {  $ ~cin >> n ;  $ ~cin . ignore ( ) ;  $ ~getline ( cin , s ) ;  $ ~long long C0 = 0 ;  $ ~long long C1 = 0 ;  $ ~for ( int i = 0 ; i <= s . length ( ) - 1 ; i ++ ) {  $ ~~if ( s [ i ] == '0' )  $ ~~~C0 ++ ;  $ ~~else  $ ~~~C1 ++ ;  $ ~}  $ ~if ( C1 > 1 ) C1 = 1 ;  $ ~for ( int i = 1 ; i <= C1 ; i ++ ) cout << 1 ;  $ ~for ( int i = 1 ; i <= C0 ; i ++ ) cout << 0 ;  $ ~cout << endl ;  $ ~return 0 ;  $ }
bool isprime [ 1500000 ] ;  $ void sieve ( ) {  $ ~fill ( isprime , isprime + 1500000 , ( bool ) 1 ) ;  $ ~for ( int i = 2 ; i < 1500000 ; i ++ ) {  $ ~~if ( isprime [ i ] ) {  $ ~~~for ( int j = 2 * i ; j < 1500000 ; j += i ) { isprime [ j ] = 0 ; }  $ ~~}  $ ~}  $ ~isprime [ 1 ] = 0 ;  $ ~return ;  $ }  $ bool ispalin ( int num ) {  $ ~int divisor = 1 ;  $ ~while ( num / divisor >= 10 ) divisor *= 10 ;  $ ~while ( num != 0 ) {  $ ~~int leading = num / divisor ;  $ ~~int trailing = num % 10 ;  $ ~~if ( leading != trailing ) return false ;  $ ~~num = ( num % divisor ) / 10 ;  $ ~~divisor = divisor / 100 ;  $ ~}  $ ~return true ;  $ }  $ int main ( ) {  $ ~sieve ( ) ;  $ ~int lprime = 0 , lpalin = 0 ;  $ ~int p , q ;  $ ~cin >> p >> q ;  $ ~int ans ;  $ ~for ( int i = 1 ; i < 1500000 ; i ++ ) {  $ ~~if ( isprime [ i ] ) { lprime ++ ; }  $ ~~if ( ispalin ( i ) ) { lpalin ++ ; }  $ ~~if ( ( long long ) q * lprime <= ( long long ) p * lpalin ) { ans = i ; }  $ ~}  $ ~cout << ans << endl ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~int n , m , t , sum , esum , id ;  $ ~while ( cin >> n >> m ) {  $ ~~esum = 0 ;  $ ~~for ( int i = 1 ; i <= n ; i ++ ) {  $ ~~~cin >> t ;  $ ~~~sum = ( t - 1 ) / m + 1 ;  $ ~~~if ( sum >= esum ) {  $ ~~~~esum = sum ;  $ ~~~~id = i ;  $ ~~~}  $ ~~}  $ ~~cout << id << endl ;  $ ~}  $ }
int main ( ) {  $ ~string s [ 40 ] , t [ 40 ] , z [ 40 ] ;  $ ~int f , i , j , n , m , p = 0 , x , dz [ 40 ] ;  $ ~long double k , d [ 40 ] ;  $ ~cin >> n >> m >> k ;  $ ~for ( i = 0 ; i < n ; i ++ ) cin >> s [ i ] >> d [ i ] ;  $ ~for ( i = 0 ; i < m ; i ++ ) cin >> t [ i ] ;  $ ~for ( i = 0 ; i < n ; i ++ ) {  $ ~~x = floor ( k * d [ i ] + 0.00001 ) ;  $ ~~if ( x >= 100 ) {  $ ~~~z [ p ] = s [ i ] ;  $ ~~~dz [ p ] = x ;  $ ~~~p ++ ;  $ ~~}  $ ~}  $ ~for ( j = 0 ; j < m ; j ++ ) {  $ ~~f = 0 ;  $ ~~for ( i = 0 ; i < p ; i ++ )  $ ~~~if ( t [ j ] == z [ i ] ) {  $ ~~~~f = 1 ;  $ ~~~~break ;  $ ~~~}  $ ~~if ( f == 0 ) {  $ ~~~z [ p ] = t [ j ] ;  $ ~~~dz [ p ] = 0 ;  $ ~~~p ++ ;  $ ~~}  $ ~}  $ ~for ( i = 0 ; i < p - 1 ; i ++ )  $ ~~for ( j = i + 1 ; j < p ; j ++ )  $ ~~~if ( z [ i ] > z [ j ] ) {  $ ~~~~swap ( z [ i ] , z [ j ] ) ;  $ ~~~~swap ( dz [ i ] , dz [ j ] ) ;  $ ~~~}  $ ~cout << p << endl ;  $ ~for ( i = 0 ; i < p ; i ++ ) cout << z [ i ] << " " << dz [ i ] << endl ;  $ ~return 0 ;  $ }
map < long long , long long > mpu ;  $ vector < long long > vec ;  $ string s [ 101 ] ;  $ long long path [ 1000006 ] = { } ;  $ int main ( ) {  $ ~long long n ;  $ ~cin >> n ;  $ ~for ( int i = 0 ; i < n ; i ++ ) cin >> s [ i ] ;  $ ~bool row [ 100 ] = { } , col [ 100 ] = { } ;  $ ~for ( int i = 0 ; i < n ; i ++ ) {  $ ~~for ( int j = 0 ; j < n ; j ++ ) {  $ ~~~if ( s [ i ] [ j ] == '.' ) {  $ ~~~~row [ i ] = 1 ;  $ ~~~~col [ j ] = 1 ;  $ ~~~}  $ ~~}  $ ~}  $ ~int p = 0 ;  $ ~for ( int i = 0 ; i < n ; i ++ ) {  $ ~~if ( ! row [ i ] ) p = 1 ;  $ ~}  $ ~if ( p == 1 ) {  $ ~~for ( int i = 0 ; i < n ; i ++ ) {  $ ~~~if ( ! col [ i ] ) p = 2 ;  $ ~~}  $ ~~if ( p == 2 ) {  $ ~~~cout << "-1\n" ;  $ ~~~return 0 ;  $ ~~}  $ ~~for ( int i = 0 ; i < n ; i ++ ) {  $ ~~~for ( int j = 0 ; j < n ; j ++ ) {  $ ~~~~if ( col [ j ] == 1 && s [ i ] [ j ] == '.' ) {  $ ~~~~~col [ j ] = 0 ;  $ ~~~~~cout << ( i + 1 ) << " " << ( j + 1 ) << endl ;  $ ~~~~}  $ ~~~}  $ ~~}  $ ~~return 0 ;  $ ~} else {  $ ~~for ( int i = 0 ; i < n ; i ++ ) {  $ ~~~for ( int j = 0 ; j < n ; j ++ ) {  $ ~~~~if ( s [ i ] [ j ] == '.' ) {  $ ~~~~~cout << ( i + 1 ) << " " << ( j + 1 ) << endl ;  $ ~~~~~break ;  $ ~~~~}  $ ~~~}  $ ~~}  $ ~}  $ ~return 0 ;  $ }
int main ( ) {  $ ~int i , j , u , v , w ;  $ ~vector < int > numbers ;  $ ~int nums ;  $ ~cin >> nums ;  $ ~for ( i = 0 ; i < nums ; ++ i ) {  $ ~~cin >> w ;  $ ~~numbers . push_back ( w ) ;  $ ~}  $ ~sort ( numbers . begin ( ) , numbers . end ( ) ) ;  $ ~for ( i = 0 ; i < nums ; ++ i ) {  $ ~~if ( i != 0 ) cout << ' ' ;  $ ~~cout << numbers [ i ] ;  $ ~}  $ ~cout << endl ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~vector < long long > v ;  $ ~int p = 0 ;  $ ~long long i , n , x , num , numm ;  $ ~cin >> n ;  $ ~for ( i = 1 ; i < 100000 ; i ++ ) {  $ ~~x = ( i * ( i + 1 ) ) / 2 ;  $ ~~v . push_back ( x ) ;  $ ~}  $ ~for ( i = 1 ; i < 100000 ; i ++ ) {  $ ~~num = ( i * ( i + 1 ) ) / 2 ;  $ ~~numm = n - num ;  $ ~~if ( binary_search ( v . begin ( ) , v . end ( ) , numm ) ) {  $ ~~~p = p + 1 ;  $ ~~~break ;  $ ~~}  $ ~}  $ ~if ( p == 1 )  $ ~~cout << "YES" << endl ;  $ ~else  $ ~~cout << "NO" << endl ;  $ ~return 0 ;  $ }
string str ;  $ bool check ( int p ) {  $ ~set < char > se ;  $ ~se . clear ( ) ;  $ ~se . insert ( str [ p ] ) ;  $ ~se . insert ( str [ p + 1 ] ) ;  $ ~se . insert ( str [ p - 1 ] ) ;  $ ~se . insert ( '.' ) ;  $ ~if ( se . size ( ) == 4 ) return true ;  $ ~return false ;  $ }  $ int main ( ) {  $ ~cin >> str ;  $ ~for ( int i = 1 ; i + 1 < str . size ( ) ; i ++ ) {  $ ~~if ( check ( i ) ) {  $ ~~~cout << "Yes" << endl ;  $ ~~~return 0 ;  $ ~~}  $ ~}  $ ~cout << "No" << endl ;  $ ~return 0 ;  $ }
long long n ;  $ int main ( ) {  $ ~cin >> n ;  $ ~if ( n == 0 ) {  $ ~~cout << 1 << endl ;  $ ~} else if ( n % 4 == 2 ) {  $ ~~cout << 4 << endl ;  $ ~} else if ( n % 4 == 3 ) {  $ ~~cout << 2 << endl ;  $ ~} else if ( n % 4 == 0 ) {  $ ~~cout << 6 << endl ;  $ ~} else {  $ ~~cout << 8 << endl ;  $ ~}  $ }
int n , i , j , k , x , y , z , m , q , h , r , timer , mx , l , cnt , u , v , t , s , tot ;  $ int main ( ) {  $ ~int a , b , c , d , e , f ;  $ ~cin >> a >> b >> c >> d >> e >> f ;  $ ~if ( c == 0 && d > 0 || a == 0 && b * d > 0 ) {  $ ~~cout << "Ron" << endl ;  $ ~~return 0 ;  $ ~}  $ ~if ( a * c * e < b * d * f )  $ ~~cout << "Ron" << endl ;  $ ~else  $ ~~cout << "Hermione" << endl ;  $ ~return 0 ;  $ }
const int N = 1e5 + 5 ;  $ const long long limit = 1e10 ;  $ long long l , r , res , cnt , a [ N ] ;  $ void lucky_numbers ( long long numb ) {  $ ~if ( numb > limit ) return ;  $ ~cnt ++ , a [ cnt ] = numb ;  $ ~lucky_numbers ( numb * 10 + 4 ) ;  $ ~lucky_numbers ( numb * 10 + 7 ) ;  $ }  $ void Solve ( ) {  $ ~long long L = 0 , R = 0 ;  $ ~for ( int i = 1 ; i <= cnt ; i ++ ) {  $ ~~if ( a [ i ] >= l ) {  $ ~~~L = i ;  $ ~~~break ;  $ ~~}  $ ~}  $ ~for ( int i = 1 ; i <= cnt ; i ++ ) {  $ ~~if ( a [ i ] >= r ) {  $ ~~~R = i ;  $ ~~~break ;  $ ~~}  $ ~}  $ ~long long root = l ;  $ ~for ( long long i = L ; i <= R ; i ++ ) {  $ ~~long long length = min ( a [ i ] , r ) - root + 1 ;  $ ~~res = res + ( a [ i ] * length ) ;  $ ~~root = a [ i ] + 1 ;  $ ~}  $ ~cout << res << '\n' ;  $ }  $ int main ( ) {  $ ~cin >> l >> r ;  $ ~lucky_numbers ( 0 ) ;  $ ~sort ( a + 1 , a + cnt + 1 ) ;  $ ~Solve ( ) ;  $ ~return 0 ;  $ }
const int MAX = 1e7 - 8.8e6 ;  $ int a [ MAX ] , sushu [ MAX ] , huiwen [ MAX ] ;  $ void init ( ) {  $ ~a [ 1 ] = 1 ;  $ ~a [ 0 ] = 1 ;  $ ~for ( int i = 2 ; i <= 10000 ; i ++ ) {  $ ~~if ( ! a [ i ] ) {  $ ~~~for ( int j = i ; i * j < MAX ; j ++ ) { a [ i * j ] = 1 ; }  $ ~~}  $ ~}  $ }  $ int panduan ( int x ) {  $ ~int w = x ;  $ ~int y = 0 ;  $ ~while ( w != 0 ) {  $ ~~y = y * 10 + w % 10 ;  $ ~~w /= 10 ;  $ ~}  $ ~if ( y == x )  $ ~~return 1 ;  $ ~else  $ ~~return 0 ;  $ }  $ int main ( ) {  $ ~init ( ) ;  $ ~for ( int i = 1 ; i < MAX ; i ++ ) {  $ ~~if ( a [ i ] )  $ ~~~sushu [ i ] = sushu [ i - 1 ] ;  $ ~~else  $ ~~~sushu [ i ] = sushu [ i - 1 ] + 1 ;  $ ~~if ( panduan ( i ) )  $ ~~~huiwen [ i ] = huiwen [ i - 1 ] + 1 ;  $ ~~else  $ ~~~huiwen [ i ] = huiwen [ i - 1 ] ;  $ ~}  $ ~int p , q ;  $ ~cin >> p >> q ;  $ ~for ( int i = MAX - 1 ; i >= 0 ; i -- ) {  $ ~~if ( sushu [ i ] * q <= huiwen [ i ] * p ) {  $ ~~~if ( i == 0 )  $ ~~~~cout << "Palindromic tree is better than splay tree" << endl ;  $ ~~~else  $ ~~~~cout << i << endl ;  $ ~~~return 0 ;  $ ~~}  $ ~}  $ ~return 0 ;  $ }
int main ( ) {  $ ~int n ;  $ ~cin >> n ;  $ ~string s ;  $ ~cin >> s ;  $ ~int i , count = 0 , k ;  $ ~if ( s [ 0 ] == '>' ) {  $ ~~for ( i = 0 ; i < s . size ( ) ; i ++ ) {  $ ~~~if ( s [ i ] == '>' ) {  $ ~~~~count ++ ;  $ ~~~} else {  $ ~~~~count = 0 ;  $ ~~~}  $ ~~}  $ ~~cout << count << endl ;  $ ~} else if ( s [ 0 ] == '<' ) {  $ ~~i = 0 ;  $ ~~int g = 0 ;  $ ~~while ( s [ i ] == '<' ) {  $ ~~~count ++ ;  $ ~~~i ++ ;  $ ~~}  $ ~~for ( k = i ; k < s . size ( ) ; k ++ ) {  $ ~~~if ( s [ k ] == '>' ) {  $ ~~~~g ++ ;  $ ~~~} else if ( s [ k ] == '<' ) {  $ ~~~~g = 0 ;  $ ~~~}  $ ~~}  $ ~~cout << g + count << endl ;  $ ~}  $ ~return 0 ;  $ }
int abso ( int a ) {  $ ~if ( a < 0 ) return - a ;  $ ~return a ;  $ }  $ int main ( ) {  $ ~map < string , int > c ;  $ ~c [ "C" ] = 0 ;  $ ~c [ "C#" ] = 1 ;  $ ~c [ "D" ] = 2 ;  $ ~c [ "D#" ] = 3 ;  $ ~c [ "E" ] = 4 ;  $ ~c [ "F" ] = 5 ;  $ ~c [ "F#" ] = 6 ;  $ ~c [ "G" ] = 7 ;  $ ~c [ "G#" ] = 8 ;  $ ~c [ "A" ] = 9 ;  $ ~c [ "B" ] = 10 ;  $ ~c [ "H" ] = 11 ;  $ ~string a , b , cs ;  $ ~cin >> a >> b >> cs ;  $ ~int val [ 3 ] ;  $ ~val [ 0 ] = c [ a ] ;  $ ~val [ 1 ] = c [ b ] ;  $ ~val [ 2 ] = c [ cs ] ;  $ ~sort ( val , val + 3 ) ;  $ ~for ( int i = 0 ; i < 3 ; i ++ ) {  $ ~~int dist = ( - val [ i + 0 ] + val [ ( i + 1 ) % 3 ] ) ;  $ ~~if ( dist < 0 ) dist += 12 ;  $ ~~int dist1 = ( - val [ ( i + 1 ) % 3 ] + val [ ( i + 2 ) % 3 ] ) ;  $ ~~if ( dist1 < 0 ) dist1 += 12 ;  $ ~~if ( dist == 3 && dist1 == 4 ) {  $ ~~~cout << "minor\n" ;  $ ~~~return 0 ;  $ ~~}  $ ~~if ( dist1 == 3 && dist == 4 ) {  $ ~~~cout << "major\n" ;  $ ~~~return 0 ;  $ ~~}  $ ~}  $ ~cout << "strange\n" ;  $ ~return 0 ;  $ }
vector < int > a [ 150005 ] , v [ 150005 ] ;  $ bool used [ 150005 ] ;  $ int n , m , k , x , y ;  $ void dfs ( int u ) {  $ ~used [ u ] = 1 ;  $ ~v [ k ] . push_back ( u ) ;  $ ~for ( int i = 0 ; i < a [ u ] . size ( ) ; i ++ ) {  $ ~~if ( ! used [ a [ u ] [ i ] ] ) dfs ( a [ u ] [ i ] ) ;  $ ~}  $ }  $ int main ( ) {  $ ~int p ;  $ ~cin >> n >> m ;  $ ~for ( int i = 0 ; i < m ; i ++ ) {  $ ~~cin >> x >> y ;  $ ~~a [ x ] . push_back ( y ) ;  $ ~~a [ y ] . push_back ( x ) ;  $ ~}  $ ~for ( int i = 0 ; i < n ; i ++ ) {  $ ~~if ( ! used [ i ] ) {  $ ~~~k ++ ;  $ ~~~dfs ( i ) ;  $ ~~~p = v [ k ] . size ( ) ;  $ ~~~for ( int j = 0 ; j < p ; j ++ ) {  $ ~~~~if ( a [ v [ k ] [ j ] ] . size ( ) != p - 1 ) {  $ ~~~~~cout << "NO" << endl ;  $ ~~~~~return 0 ;  $ ~~~~}  $ ~~~}  $ ~~}  $ ~}  $ ~cout << "YES" << endl ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~int n = 100000 ;  $ ~int aux ;  $ ~int aux2 ;  $ ~int x [ n ] ;  $ ~int a [ n ] ;  $ ~int negativos = 0 ;  $ ~int positivos = 0 ;  $ ~int manz = 0 ;  $ ~int ne ;  $ ~int po ;  $ ~cin >> n ;  $ ~for ( int i = 0 ; i < n ; i ++ ) {  $ ~~cin >> x [ i ] ;  $ ~~cin >> a [ i ] ;  $ ~}  $ ~for ( int v = 1 ; v < n ; v ++ ) {  $ ~~for ( int b = 0 ; b < n - 1 ; b ++ ) {  $ ~~~if ( x [ b ] > x [ b + 1 ] ) {  $ ~~~~aux = x [ b ] ;  $ ~~~~x [ b ] = x [ b + 1 ] ;  $ ~~~~x [ b + 1 ] = aux ;  $ ~~~~aux2 = a [ b ] ;  $ ~~~~a [ b ] = a [ b + 1 ] ;  $ ~~~~a [ b + 1 ] = aux2 ;  $ ~~~}  $ ~~}  $ ~}  $ ~for ( int i = 0 ; i < n ; i ++ ) {  $ ~~if ( x [ i ] < 0 ) {  $ ~~~negativos ++ ;  $ ~~} else {  $ ~~~positivos ++ ;  $ ~~}  $ ~}  $ ~if ( negativos == positivos ) {  $ ~~for ( int t = 0 ; t < n ; t ++ ) { manz = manz + a [ t ] ; }  $ ~} else if ( negativos < positivos ) {  $ ~~if ( negativos == 0 ) {  $ ~~~manz = a [ 0 ] ;  $ ~~} else {  $ ~~~ne = negativos ;  $ ~~~po = negativos + 1 ;  $ ~~~for ( int y = negativos - ne ; y <= negativos - 1 + po ; y ++ ) { manz = manz + a [ y ] ; }  $ ~~}  $ ~} else {  $ ~~if ( positivos == 0 ) {  $ ~~~manz = a [ negativos - 1 ] ;  $ ~~} else {  $ ~~~ne = positivos + 1 ;  $ ~~~po = positivos ;  $ ~~~for ( int y = negativos - ne ; y <= negativos - 1 + po ; y ++ ) { manz = manz + a [ y ] ; }  $ ~~}  $ ~}  $ ~cout << manz << endl ;  $ ~return 0 ;  $ }
int TT , T , n , m ;  $ int main ( ) {  $ ~long long i , j , k ;  $ ~char a [ 110 ] ;  $ ~int b [ 110 ] ;  $ ~int c [ 110 ] [ 110 ] , d ;  $ ~int e , f , g ;  $ ~int mx = - 0 x3f3f3f3f , mn = 0 x3f3f3f3f ;  $ ~T = 1 ;  $ ~for ( TT = 1 ; TT <= T ; TT ++ ) {  $ ~~cin >> n ;  $ ~~int cnt = 0 ;  $ ~~for ( i = 0 ; i < n ; i ++ ) {  $ ~~~cin >> a [ 1 ] ;  $ ~~~if ( a [ 1 ] == '0' ) cnt ++ ;  $ ~~}  $ ~~if ( n == 1 && cnt )  $ ~~~cout << '0' << endl ;  $ ~~else {  $ ~~~cout << '1' ;  $ ~~~while ( cnt -- ) { cout << '0' ; }  $ ~~~cout << endl ;  $ ~~}  $ ~}  $ ~return 0 ;  $ }
int a [ 100100 ] , b [ 100100 ] , c [ 100100 ] ;  $ int main ( ) {  $ ~int n ;  $ ~cin >> n ;  $ ~for ( int i = 0 ; i < n ; i ++ ) {  $ ~~cin >> a [ i ] ;  $ ~~if ( i ) {  $ ~~~int t = abs ( a [ i ] - a [ i - 1 ] ) ;  $ ~~~if ( i % 2 ) {  $ ~~~~b [ i ] = t ;  $ ~~~~c [ i ] = - t ;  $ ~~~} else {  $ ~~~~b [ i ] = - t ;  $ ~~~~c [ i ] = t ;  $ ~~~}  $ ~~}  $ ~}  $ ~long long MAX = 0 ;  $ ~long long sum = 0 ;  $ ~for ( int i = 1 ; i < n ; ++ i ) {  $ ~~if ( sum + b [ i ] > 0 ) {  $ ~~~sum += b [ i ] ;  $ ~~} else  $ ~~~sum = 0 ;  $ ~~MAX = max ( MAX , sum ) ;  $ ~}  $ ~sum = 0 ;  $ ~for ( int i = 1 ; i < n ; ++ i ) {  $ ~~if ( sum + c [ i ] > 0 ) {  $ ~~~sum += c [ i ] ;  $ ~~} else  $ ~~~sum = 0 ;  $ ~~MAX = max ( MAX , sum ) ;  $ ~}  $ ~cout << MAX << endl ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~int n , i ;  $ ~cin >> n ;  $ ~string s ;  $ ~cin >> s ;  $ ~int q = 0 , sp = 0 ;  $ ~if ( s [ 0 ] == '?' ) { q ++ ; }  $ ~if ( s [ n - 1 ] == '?' ) { q ++ ; }  $ ~for ( i = 1 ; i < n - 1 ; i ++ ) {  $ ~~if ( s [ i ] == '?' ) {  $ ~~~if ( s [ i - 1 ] != s [ i + 1 ] ) {  $ ~~~~if ( s [ i - 1 ] == '?' | s [ i + 1 ] == '?' ) {  $ ~~~~~q ++ ;  $ ~~~~} else {  $ ~~~~~sp ++ ;  $ ~~~~}  $ ~~~} else  $ ~~~~q ++ ;  $ ~~} else {  $ ~~~if ( s [ i ] == s [ i - 1 ] | s [ i + 1 ] == s [ i ] ) {  $ ~~~~cout << "No" << endl ;  $ ~~~~return ( 0 ) ;  $ ~~~}  $ ~~}  $ ~}  $ ~if ( q > 0 ) {  $ ~~cout << "Yes" << endl ;  $ ~} else {  $ ~~cout << "No" << endl ;  $ ~}  $ ~return ( 0 ) ;  $ }
int main ( ) {  $ ~int n , b , l = 0 ;  $ ~cin >> n ;  $ ~for ( int i = 0 ; i < n ; i ++ ) {  $ ~~cin >> b ;  $ ~~if ( b == 0 ) { l ++ ; }  $ ~}  $ ~if ( l == 1 && n != 1 || n == 1 && l == 0 ) {  $ ~~cout << "YES" << endl ;  $ ~} else {  $ ~~cout << "NO" << endl ;  $ ~}  $ }
int main ( ) {  $ ~int t ;  $ ~cin >> t ;  $ ~if ( t == 1 )  $ ~~cout << "-1" << endl ;  $ ~else  $ ~~cout << t << " " << t << endl ;  $ ~return 0 ;  $ }
const int N = 1e5 + 100 ;  $ long long arr [ N ] ;  $ int main ( ) {  $ ~int x , y ;  $ ~cin >> x >> y ;  $ ~int a = abs ( x ) , b = abs ( y ) ;  $ ~int mx = max ( abs ( x ) , abs ( y ) ) ;  $ ~if ( mx == 0 ) {  $ ~~cout << 0 << endl ;  $ ~~return 0 ;  $ ~}  $ ~int c = ( mx - 1 ) * 4 ;  $ ~if ( mx == a ) {  $ ~~if ( x > 0 ) {  $ ~~~if ( y <= 0 && b == mx - 1 ) {  $ ~~~~cout << c << endl ;  $ ~~~} else if ( y <= 0 && b == mx ) {  $ ~~~~cout << c + 4 << endl ;  $ ~~~} else {  $ ~~~~cout << c + 1 << endl ;  $ ~~~}  $ ~~} else {  $ ~~~if ( y > 0 && b == mx ) {  $ ~~~~cout << c + 2 << endl ;  $ ~~~} else {  $ ~~~~cout << c + 3 << endl ;  $ ~~~}  $ ~~}  $ ~} else {  $ ~~if ( y > 0 ) {  $ ~~~if ( x > 0 && a == mx ) {  $ ~~~~cout << c + 1 << endl ;  $ ~~~} else  $ ~~~~cout << c + 2 << endl ;  $ ~~} else {  $ ~~~if ( x < 0 && a == mx ) {  $ ~~~~cout << c + 3 << endl ;  $ ~~~} else  $ ~~~~cout << c + 4 << endl ;  $ ~~}  $ ~}  $ }
int f ( int a , int b ) {  $ ~int x1 = a / 10 ;  $ ~int x2 = a % 10 ;  $ ~int x3 = b / 10 ;  $ ~int x4 = b % 10 ;  $ ~if ( x1 == x4 && x2 == x3 ) return 1 ;  $ ~return 0 ;  $ }  $ int main ( ) {  $ ~int a , b ;  $ ~char s ;  $ ~while ( cin >> a >> s >> b ) {  $ ~~if ( f ( a , b ) == 1 )  $ ~~~cout << "0" << endl ;  $ ~~else {  $ ~~~for ( int i = 1 ; ; i ++ ) {  $ ~~~~if ( b + 1 == 60 && a < 23 ) {  $ ~~~~~b = 0 ;  $ ~~~~~a += 1 ;  $ ~~~~} else if ( a == 23 ) {  $ ~~~~~if ( b > 32 ) {  $ ~~~~~~cout << 60 - b << endl ;  $ ~~~~~~break ;  $ ~~~~~} else  $ ~~~~~~b ++ ;  $ ~~~~} else {  $ ~~~~~b ++ ;  $ ~~~~}  $ ~~~~if ( f ( a , b ) == 1 ) {  $ ~~~~~cout << i << endl ;  $ ~~~~~break ;  $ ~~~~}  $ ~~~}  $ ~~}  $ ~}  $ ~return 0 ;  $ }
long long ans ;  $ long long maxsum ( long long p [ ] , long long n ) {  $ ~long long tmp = 0 ;  $ ~for ( long long i = 0 ; i < n ; ++ i ) {  $ ~~tmp = max ( 0 LL , tmp + p [ i ] ) ;  $ ~~ans = max ( ans , tmp ) ;  $ ~}  $ }  $ int main ( ) {  $ ~long long n ;  $ ~cin >> n ;  $ ~long long a [ n ] ;  $ ~for ( long long i = 0 ; i < n ; ++ i ) cin >> a [ i ] ;  $ ~long long b [ n ] ;  $ ~long long c [ n ] ;  $ ~for ( long long i = 0 ; i < n - 1 ; ++ i ) {  $ ~~b [ i ] = abs ( a [ i ] - a [ i + 1 ] ) * ( i % 2 == 0 ? 1 : - 1 ) ;  $ ~~c [ i ] = abs ( a [ i ] - a [ i + 1 ] ) * ( ( i + 1 ) % 2 == 0 ? 1 : - 1 ) ;  $ ~}  $ ~maxsum ( b , n - 1 ) ;  $ ~maxsum ( c , n - 1 ) ;  $ ~cout << ans << '\n' ;  $ }
const int maxn = 1e6 ;  $ long long gcd ( long long a , long long b ) {  $ ~if ( b == 0 ) {  $ ~~return a ;  $ ~} else {  $ ~~return gcd ( b , a % b ) ;  $ ~}  $ }  $ long long lcm ( long long a , long long b ) {  $ ~return a * b / gcd ( a , b ) ;  $ }  $ int main ( ) {  $ ~int n ;  $ ~while ( cin >> n ) {  $ ~~long long ans ;  $ ~~if ( n > 3 ) {  $ ~~~ans = lcm ( lcm ( n - 2 , n - 1 ) , n ) ;  $ ~~~long long ans2 = lcm ( lcm ( n - 3 , n - 1 ) , n ) ;  $ ~~~long long ans3 = lcm ( lcm ( n - 3 , n - 2 ) , n - 1 ) ;  $ ~~~ans = max ( max ( ans , ans2 ) , ans3 ) ;  $ ~~} else {  $ ~~~if ( n == 1 )  $ ~~~~ans = 1 ;  $ ~~~else if ( n == 2 )  $ ~~~~ans = 2 ;  $ ~~~else if ( n == 3 )  $ ~~~~ans = 6 ;  $ ~~}  $ ~~cout << ans << endl ;  $ ~}  $ }
const long long inf = 0 xFFFFFFFFFFFFFFFL ;  $ clock_t time_p = clock ( ) ;  $ void time ( ) {  $ ~time_p = clock ( ) - time_p ;  $ ~cerr << "Time Taken : " << ( float ) ( time_p ) / CLOCKS_PER_SEC << "\n" ;  $ }  $ int main ( ) {  $ ~long long n , m , k ;  $ ~cin >> n >> m >> k ;  $ ~if ( k > n + m - 2 ) {  $ ~~cout << - 1 << "\n" ;  $ ~~return 0 ;  $ ~}  $ ~if ( k <= n - 1 && k <= m - 1 ) {  $ ~~long long mn1 = ( m / ( k + 1 ) ) * n ;  $ ~~long long mn2 = ( n / ( k + 1 ) ) * m ;  $ ~~cout << max ( mn1 , mn2 ) << "\n" ;  $ ~}  $ ~if ( k <= n - 1 && k > m - 1 ) {  $ ~~long long mn1 = ( n / ( k - ( m - 1 ) + 1 ) ) ;  $ ~~long long mn2 = m * ( n / ( k + 1 ) ) ;  $ ~~cout << max ( mn1 , mn2 ) << "\n" ;  $ ~}  $ ~if ( k <= m - 1 && k > n - 1 ) {  $ ~~long long mn1 = ( m / ( k - ( n - 1 ) + 1 ) ) ;  $ ~~long long mn2 = n * ( m / ( k + 1 ) ) ;  $ ~~cout << max ( mn1 , mn2 ) << "\n" ;  $ ~}  $ ~if ( k > n - 1 && k > m - 1 ) {  $ ~~long long mn1 = m / ( k - ( n - 1 ) + 1 ) ;  $ ~~long long mn2 = n / ( k - ( m - 1 ) + 1 ) ;  $ ~~cout << max ( mn1 , mn2 ) << "\n" ;  $ ~}  $ ~time ( ) ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~int a [ 4 ] [ 4 ] ;  $ ~for ( int i = 0 ; i < 4 ; i ++ )  $ ~~for ( int j = 0 ; j < 4 ; j ++ ) cin >> a [ i ] [ j ] ;  $ ~for ( int i = 0 ; i < 4 ; i ++ ) {  $ ~~if ( a [ i ] [ 3 ] == 1 ) {  $ ~~~if ( a [ i ] [ 0 ] == 1 || a [ i ] [ 1 ] == 1 || a [ i ] [ 2 ] == 1 ) {  $ ~~~~cout << "YES" << endl ;  $ ~~~~return 0 ;  $ ~~~} else if ( a [ ( i + 2 ) % 4 ] [ 1 ] == 1 ) {  $ ~~~~cout << "YES" << endl ;  $ ~~~~return 0 ;  $ ~~~}  $ ~~}  $ ~~if ( a [ i ] [ 3 ] == 1 )  $ ~~~if ( a [ ( i + 1 ) % 4 ] [ 0 ] == 1 ) {  $ ~~~~cout << "YES" << endl ;  $ ~~~~return 0 ;  $ ~~~}  $ ~~if ( a [ i ] [ 3 ] == 1 )  $ ~~~if ( a [ ( i + 3 ) % 4 ] [ 2 ] == 1 ) {  $ ~~~~cout << "YES" << endl ;  $ ~~~~return 0 ;  $ ~~~}  $ ~}  $ ~cout << "NO" << endl ;  $ ~return 0 ;  $ }
long long gcd1 ( long long a , long long b ) {  $ ~if ( a == 0 ) return b ;  $ ~return gcd1 ( b % a , a ) ;  $ }  $ long long modx ( long long base , long long ex ) {  $ ~long long ans = 1 LL , val = base ;  $ ~while ( ex > 0 LL ) {  $ ~~if ( ex & 1 LL ) ans = ( ans * val ) % 1000000009 LL ;  $ ~~val = ( val * val ) % 1000000009 LL ;  $ ~~ex = ex >> 1 LL ;  $ ~}  $ ~return ans ;  $ }  $ const int maxn = 1e5 + 10 ;  $ bool visit [ maxn ] , visit1 [ maxn ] ;  $ int n , m , x , y , a [ maxn ] ;  $ bool D [ maxn ] , P [ maxn ] ;  $ vector < int > adj [ maxn ] , v [ maxn ] ;  $ void dfs ( int start ) {  $ ~visit [ start ] = true ;  $ ~for ( int i = 0 ; i < adj [ start ] . size ( ) ; i ++ ) {  $ ~~int pt = adj [ start ] [ i ] ;  $ ~~if ( ! visit [ pt ] ) dfs ( pt ) ;  $ ~}  $ }  $ void dfs2 ( int start ) {  $ ~visit1 [ start ] = true ;  $ ~for ( int i = 0 ; i < v [ start ] . size ( ) ; i ++ ) {  $ ~~int pt = v [ start ] [ i ] ;  $ ~~if ( ! visit1 [ pt ] ) dfs2 ( pt ) ;  $ ~}  $ }  $ int main ( ) {  $ ~cin >> n >> m ;  $ ~for ( int i = 1 ; i <= n ; i ++ ) cin >> a [ i ] ;  $ ~for ( int i = 1 ; i <= m ; i ++ ) {  $ ~~cin >> x >> y ;  $ ~~adj [ x ] . push_back ( y ) ;  $ ~~if ( a [ x ] != 1 && a [ y ] != 1 ) v [ y ] . push_back ( x ) ;  $ ~}  $ ~for ( int i = 1 ; i <= n ; i ++ ) {  $ ~~if ( ! visit [ i ] && a [ i ] == 1 ) dfs ( i ) ;  $ ~}  $ ~for ( int i = 1 ; i <= n ; i ++ ) {  $ ~~if ( ! visit1 [ i ] && a [ i ] == 2 ) dfs2 ( i ) ;  $ ~}  $ ~for ( int i = 1 ; i <= n ; i ++ ) {  $ ~~if ( a [ i ] != 1 ) continue ;  $ ~~for ( int j = 0 ; j < adj [ i ] . size ( ) ; j ++ ) {  $ ~~~int pt = adj [ i ] [ j ] ;  $ ~~~if ( visit1 [ pt ] && a [ pt ] != 1 ) visit1 [ i ] = true ;  $ ~~}  $ ~}  $ ~for ( int i = 1 ; i <= n ; i ++ ) {  $ ~~if ( visit1 [ i ] && visit [ i ] )  $ ~~~cout << 1 << endl ;  $ ~~else  $ ~~~cout << 0 << endl ;  $ ~}  $ ~return 0 ;  $ }
int dx [ 4 ] = { 0 , 0 , - 1 , 1 } ;  $ int dy [ 4 ] = { 1 , - 1 , 0 , 0 } ;  $ int main ( ) {  $ ~int n ;  $ ~cin >> n ;  $ ~vector < string > s ;  $ ~char c ;  $ ~string tmp ;  $ ~for ( int i = 0 ; i < n ; i += 1 ) {  $ ~~cin >> tmp ;  $ ~~s . push_back ( tmp ) ;  $ ~~transform ( s [ i ] . begin ( ) , s [ i ] . end ( ) , s [ i ] . begin ( ) , : : tolower ) ;  $ ~}  $ ~string shit , fuck ;  $ ~cin >> shit >> c ;  $ ~string save = shit ;  $ ~fuck = shit ;  $ ~transform ( save . begin ( ) , save . end ( ) , save . begin ( ) , : : tolower ) ;  $ ~int rep [ save . size ( ) ] = { } ;  $ ~for ( int i = 0 ; i < n ; i += 1 )  $ ~~for ( int j = 0 ; j < shit . size ( ) ; j += 1 ) {  $ ~~~if ( j + s [ i ] . size ( ) - 1 >= save . size ( ) ) continue ;  $ ~~~if ( save . substr ( j , s [ i ] . size ( ) ) == s [ i ] )  $ ~~~~for ( int k = 0 ; k < s [ i ] . size ( ) ; k += 1 ) rep [ k + j ] = 1 ;  $ ~~}  $ ~for ( int i = 0 ; i < shit . size ( ) ; i += 1 ) {  $ ~~if ( rep [ i ] ) {  $ ~~~if ( save [ i ] != c )  $ ~~~~shit [ i ] = c ;  $ ~~~else {  $ ~~~~if ( c == 'a' )  $ ~~~~~shit [ i ] = 'b' ;  $ ~~~~else  $ ~~~~~shit [ i ] = 'a' ;  $ ~~~}  $ ~~~if ( fuck [ i ] <= 'Z' && fuck [ i ] >= 'A' ) shit [ i ] = ( char ) toupper ( shit [ i ] ) ;  $ ~~}  $ ~}  $ ~cout << shit << '\n' ;  $ }
int iamax ( int * arr , int N ) {  $ ~int ma = arr [ 0 ] ;  $ ~for ( int i = 1 ; i < N ; i ++ ) ma = max ( arr [ i ] , ma ) ;  $ ~return ma ;  $ }  $ void readarr ( int * arr , int * N ) {  $ ~cin >> * N ;  $ ~for ( int i = 0 ; i < * N ; i ++ ) cin >> arr [ i ] ;  $ }  $ char arr [ 1005 ] ;  $ int k , n ;  $ bool pal ( int a , int b ) {  $ ~while ( a < b ) {  $ ~~if ( arr [ a ] != arr [ b - 1 ] ) return false ;  $ ~~a ++ ;  $ ~~b -- ;  $ ~}  $ ~return true ;  $ }  $ bool run ( ) {  $ ~int mul = n / k ;  $ ~for ( int i = 0 ; i < n ; i += mul ) {  $ ~~if ( ! pal ( i , i + mul ) ) return false ;  $ ~}  $ ~return true ;  $ }  $ int main ( ) {  $ ~cin >> arr >> k ;  $ ~n = strlen ( arr ) ;  $ ~if ( n % k )  $ ~~cout << "NO\n" ;  $ ~else {  $ ~~if ( run ( ) )  $ ~~~cout << "YES\n" ;  $ ~~else  $ ~~~cout << "NO\n" ;  $ ~}  $ }
int x , t , a , b , da , db ;  $ bool solve ( ) {  $ ~for ( int i = 0 ; i < t ; i ++ ) {  $ ~~for ( int j = 0 ; j < t ; j ++ ) {  $ ~~~if ( a - i * da + b - j * db == x || a - i * da == x || b - j * db == x ) return 1 ;  $ ~~}  $ ~}  $ ~return 0 ;  $ }  $ int main ( ) {  $ ~cin >> x >> t >> a >> b >> da >> db ;  $ ~if ( ! x )  $ ~~cout << "YES" << endl ;  $ ~else  $ ~~cout << ( solve ( ) ? "YES" : "NO" ) << endl ;  $ }
long long get_ans ( long long n ) {  $ ~if ( n <= 0 ) return 1 ;  $ ~return pow ( 10 , n ) ;  $ }  $ long long calc ( long long n ) {  $ ~if ( n < 10 ) return n ;  $ ~int a [ 20 ] , arr [ 20 ] ;  $ ~int no_of_digits = 0 ;  $ ~long long tmp = n ;  $ ~int first_digit ;  $ ~int last_digit = n % 10 ;  $ ~while ( tmp ) {  $ ~~no_of_digits ++ ;  $ ~~a [ no_of_digits ] = tmp % 10 ;  $ ~~if ( tmp < 10 ) first_digit = tmp ;  $ ~~tmp /= 10 ;  $ ~}  $ ~long long res = 0 ;  $ ~for ( int i = 1 ; i < no_of_digits ; i ++ ) { res += 9 * get_ans ( i - 2 ) ; }  $ ~for ( int i = no_of_digits ; i >= 1 ; i -- ) arr [ no_of_digits - i + 1 ] = a [ i ] ;  $ ~res += ( first_digit - 1 ) * get_ans ( no_of_digits - 2 ) ;  $ ~long long tmp2 = 1 ;  $ ~for ( int i = 2 ; i <= no_of_digits - 1 ; i ++ ) { tmp2 += ( arr [ i ] ) * get_ans ( no_of_digits - i - 1 ) ; }  $ ~res += tmp2 ;  $ ~if ( first_digit > last_digit ) res -- ;  $ ~return res ;  $ }  $ int main ( ) {  $ ~long long l , r ;  $ ~cin >> l >> r ;  $ ~cout << ( calc ( r ) - calc ( l - 1 ) ) << "\n" ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~long long m , x1 , x2 , y1 , y2 , h1 , h2 , a1 , a2 ;  $ ~cin >> m ;  $ ~cin >> h1 >> a1 ;  $ ~cin >> x1 >> y1 ;  $ ~cin >> h2 >> a2 ;  $ ~cin >> x2 >> y2 ;  $ ~vector < int > ans1 ;  $ ~vector < int > ans2 ;  $ ~long long total = 0 ;  $ ~while ( total < 2 * m ) {  $ ~~if ( h1 == a1 ) { ans1 . push_back ( total ) ; }  $ ~~if ( h2 == a2 ) { ans2 . push_back ( total ) ; }  $ ~~total ++ ;  $ ~~h1 = ( h1 * x1 + y1 ) % m ;  $ ~~h2 = ( h2 * x2 + y2 ) % m ;  $ ~}  $ ~if ( ans1 . empty ( ) || ans2 . empty ( ) ) {  $ ~~cout << "-1" << endl ;  $ ~~return 0 ;  $ ~}  $ ~long long t1 = ans1 [ 0 ] , t2 = ans2 [ 0 ] ;  $ ~long long s1 = ans1 [ 1 ] - ans1 [ 0 ] ;  $ ~long long s2 = ans2 [ 1 ] - ans2 [ 0 ] ;  $ ~for ( int i = 0 ; i <= 5e6 ; i ++ ) {  $ ~~if ( t1 == t2 ) {  $ ~~~cout << t1 << endl ;  $ ~~~return 0 ;  $ ~~}  $ ~~if ( t1 < t2 ) {  $ ~~~t1 += s1 ;  $ ~~} else {  $ ~~~t2 += s2 ;  $ ~~}  $ ~}  $ ~cout << "-1" << endl ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~double a1 , a , b , c , d , e , f ;  $ ~cin >> a >> b >> c >> d >> e >> f ;  $ ~a1 = ( ( ( ( ( 1 / a ) * b ) / c ) * d ) / e ) * f ;  $ ~if ( c == 0 && d > 0 )  $ ~~cout << "Ron" << endl ;  $ ~else if ( a == 0 && b > 0 && d > 0 )  $ ~~cout << "Ron" << endl ;  $ ~else if ( a1 > 1 )  $ ~~cout << "Ron" << endl ;  $ ~else  $ ~~cout << "Hermione" << endl ;  $ ~return 0 ;  $ }
int a [ 100001 ] ;  $ int main ( ) {  $ ~int n ;  $ ~cin >> n ;  $ ~for ( int i = 1 ; i < n + 1 ; i ++ ) cin >> a [ i ] ;  $ ~long long res = 0 ;  $ ~int t ;  $ ~for ( int i = 1 ; i < n ; i ++ ) {  $ ~~for ( t = 1 ; i + t <= n ; t *= 2 )  $ ~~~;  $ ~~t >> = 1 ;  $ ~~res += a [ i ] ;  $ ~~a [ i + t ] += a [ i ] ;  $ ~~cout << res << endl ;  $ ~}  $ ~return 0 ;  $ }
vector < long long > primeFactures ;  $ void f ( long long q ) {  $ ~while ( q % 2 == 0 ) {  $ ~~primeFactures . push_back ( 2 ) ;  $ ~~q /= 2 ;  $ ~}  $ ~for ( long long i = 3 ; i * i <= q ; i += 2 ) {  $ ~~while ( q % i == 0 ) {  $ ~~~primeFactures . push_back ( i ) ;  $ ~~~q /= i ;  $ ~~}  $ ~}  $ ~if ( q > 2 ) primeFactures . push_back ( q ) ;  $ }  $ bool isprime ( long long x ) {  $ ~for ( long long i = 2 ; i * i <= x ; i ++ ) {  $ ~~if ( x % i == 0 ) return 0 ;  $ ~}  $ ~return 1 ;  $ }  $ int main ( ) {  $ ~long long q ;  $ ~cin >> q ;  $ ~if ( isprime ( q ) ) {  $ ~~cout << "1\n0\n" ;  $ ~~return 0 ;  $ ~}  $ ~f ( q ) ;  $ ~if ( primeFactures . size ( ) > 2 ) {  $ ~~cout << "1\n" << ( primeFactures [ 0 ] * primeFactures [ 1 ] ) << endl ;  $ ~} else {  $ ~~cout << "2\n" ;  $ ~}  $ ~return 0 ;  $ }
const int mod = 1e9 + 7 ;  $ const double eps = 1e-6 ;  $ vector < long long > q ;  $ void dfs ( long long x ) {  $ ~if ( x >= 10000000005 ) { return ; }  $ ~q . push_back ( x ) ;  $ ~dfs ( x * 10 + 4 ) ;  $ ~dfs ( x * 10 + 7 ) ;  $ }  $ int main ( ) {  $ ~long long l , r ;  $ ~dfs ( 0 ) ;  $ ~sort ( q . begin ( ) , q . end ( ) ) ;  $ ~while ( cin >> l >> r ) {  $ ~~long long ans_l = 0 , ans_r = 0 ;  $ ~~int len = q . size ( ) ;  $ ~~for ( int i = 1 ; i <= len ; i ++ ) {  $ ~~~if ( q [ i ] <= l - 1 ) {  $ ~~~~ans_l += ( q [ i ] - q [ i - 1 ] ) * q [ i ] ;  $ ~~~} else {  $ ~~~~ans_l += ( l - 1 - q [ i - 1 ] ) * q [ i ] ;  $ ~~~~break ;  $ ~~~}  $ ~~}  $ ~~for ( int i = 1 ; i <= len ; i ++ ) {  $ ~~~if ( q [ i ] <= r ) {  $ ~~~~ans_r += ( q [ i ] - q [ i - 1 ] ) * q [ i ] ;  $ ~~~} else {  $ ~~~~ans_r += ( r - q [ i - 1 ] ) * q [ i ] ;  $ ~~~~break ;  $ ~~~}  $ ~~}  $ ~~cout << ans_r - ans_l << endl ;  $ ~}  $ ~return 0 ;  $ }
const int maxn = 1e5 + 10 ;  $ bool mark [ maxn ] , rmark [ maxn ] ;  $ int a [ maxn ] ;  $ vector < int > v [ maxn ] , rv [ maxn ] ;  $ inline void dfs ( int x , int par ) {  $ ~if ( mark [ x ] ) return ;  $ ~if ( par != - 1 && a [ x ] == 1 ) return ;  $ ~mark [ x ] = 1 ;  $ ~for ( int i = 0 ; i < v [ x ] . size ( ) ; i ++ )  $ ~~if ( ! mark [ v [ x ] [ i ] ] ) dfs ( v [ x ] [ i ] , x ) ;  $ }  $ inline void rdfs ( int x ) {  $ ~if ( rmark [ x ] ) return ;  $ ~rmark [ x ] = 1 ;  $ ~if ( a [ x ] == 1 ) return ;  $ ~for ( int i = 0 ; i < rv [ x ] . size ( ) ; i ++ )  $ ~~if ( ! rmark [ rv [ x ] [ i ] ] ) rdfs ( rv [ x ] [ i ] ) ;  $ }  $ int main ( ) {  $ ~int n , m , x , y ;  $ ~cin >> n >> m ;  $ ~for ( int i = 0 ; i < n ; i ++ ) cin >> a [ i ] ;  $ ~for ( int i = 0 ; i < m ; i ++ ) {  $ ~~cin >> x >> y ;  $ ~~x -- ;  $ ~~y -- ;  $ ~~v [ x ] . push_back ( y ) ;  $ ~~rv [ y ] . push_back ( x ) ;  $ ~}  $ ~for ( int i = 0 ; i < n ; i ++ )  $ ~~if ( a [ i ] == 1 ) dfs ( i , - 1 ) ;  $ ~for ( int i = 0 ; i < n ; i ++ )  $ ~~if ( a [ i ] == 2 ) rdfs ( i ) ;  $ ~for ( int i = 0 ; i < n ; i ++ )  $ ~~if ( mark [ i ] && rmark [ i ] )  $ ~~~cout << 1 << "\n" ;  $ ~~else  $ ~~~cout << 0 << "\n" ;  $ }
vector < unsigned long long > prime ;  $ bool chkPrime1to10000000 [ 10000001 ] ;  $ void primeFunction ( ) {  $ ~unsigned long long i , j ;  $ ~for ( i = 4 ; i < 10000001 ; i += 2 ) chkPrime1to10000000 [ i ] = 1 ;  $ ~prime . push_back ( 0 ) ;  $ ~chkPrime1to10000000 [ 1 ] = 1 ;  $ ~prime . push_back ( 2 ) ;  $ ~for ( i = 3 ; i < 10000001 ; i += 2 ) {  $ ~~if ( chkPrime1to10000000 [ i ] == 0 ) {  $ ~~~prime . push_back ( i ) ;  $ ~~~if ( i * i <= 10000000 )  $ ~~~~for ( j = ( i * i ) ; j <= 10000000 ; j += ( 2 * i ) ) { chkPrime1to10000000 [ j ] = 1 ; }  $ ~~}  $ ~}  $ }  $ int main ( ) {  $ ~ulong long n , i , j ;  $ ~primeFunction ( ) ;  $ ~cin >> n ;  $ ~for ( i = 1 ; 1 ; i ++ ) {  $ ~~j = n * i + 1 ;  $ ~~if ( chkPrime1to10000000 [ j ] ) {  $ ~~~cout << i << endl ;  $ ~~~return 0 ;  $ ~~}  $ ~}  $ ~return 0 ;  $ }
const int INF = 0 x3f3f3f3f ;  $ int main ( ) {  $ ~int n ;  $ ~cin >> n ;  $ ~string str ;  $ ~cin >> str ;  $ ~int numofzero = 0 ;  $ ~for ( int i = 0 ; i < n ; i ++ ) {  $ ~~if ( str [ i ] == '0' ) numofzero ++ ;  $ ~}  $ ~if ( numofzero == n )  $ ~~cout << "0" << endl ;  $ ~else {  $ ~~cout << "1" ;  $ ~~for ( int i = 1 ; i <= numofzero ; i ++ ) cout << "0" ;  $ ~~cout << endl ;  $ ~}  $ ~return 0 ;  $ }
string s ;  $ int k ;  $ int main ( ) {  $ ~cin >> s >> k ;  $ ~int sl = int ( s . size ( ) ) ;  $ ~if ( sl % k != 0 ) {  $ ~~cout << "NO" << endl ;  $ ~~return 0 ;  $ ~}  $ ~for ( int i = 0 ; i < sl ; i += sl / k ) {  $ ~~for ( int j = 0 ; j < sl / k / 2 ; j ++ ) {  $ ~~~if ( s [ i + j ] != s [ i + sl / k - j - 1 ] ) {  $ ~~~~cout << "NO" << endl ;  $ ~~~~return 0 ;  $ ~~~}  $ ~~}  $ ~}  $ ~cout << "YES" << endl ;  $ }
const int maxn = 100 + 10 ;  $ vector < int > adj [ maxn ] ;  $ bool A [ maxn ] [ maxn ] ;  $ int c ( int x ) {  $ ~return ( x * ( x - 1 ) * ( x - 2 ) ) / 6 ;  $ }  $ int c2 ( int x ) {  $ ~return ( x * ( x - 1 ) ) / 2 ;  $ }  $ int main ( ) {  $ ~int k ;  $ ~cin >> k ;  $ ~int q = 0 ;  $ ~for ( int i = maxn ; i >= 3 ; i -- )  $ ~~if ( c ( i ) <= k ) {  $ ~~~k -= c ( i ) ;  $ ~~~for ( int j = 0 ; j < i ; j ++ )  $ ~~~~for ( int k = 0 ; k < j ; k ++ ) {  $ ~~~~~adj [ j ] . push_back ( k ) ;  $ ~~~~~adj [ k ] . push_back ( j ) ;  $ ~~~~}  $ ~~~q = i ;  $ ~~~break ;  $ ~~}  $ ~for ( int i = maxn ; i >= 2 ; i -- )  $ ~~while ( c2 ( i ) <= k && i <= q ) {  $ ~~~k -= c2 ( i ) ;  $ ~~~for ( int j = 0 ; j < i ; j ++ ) {  $ ~~~~adj [ q ] . push_back ( j ) ;  $ ~~~~adj [ j ] . push_back ( q ) ;  $ ~~~}  $ ~~~q ++ ;  $ ~~}  $ ~for ( int i = 0 ; i < q ; i ++ )  $ ~~for ( int j = 0 ; j < adj [ i ] . size ( ) ; j ++ ) A [ i ] [ adj [ i ] [ j ] ] = true ;  $ ~cout << q << endl ;  $ ~for ( int i = 0 ; i < q ; i ++ ) {  $ ~~for ( int j = 0 ; j < q ; j ++ ) cout << A [ i ] [ j ] ;  $ ~~cout << endl ;  $ ~}  $ ~return 0 ;  $ }
const long long INF = 1e18 ;  $ int main ( ) {  $ ~string s ;  $ ~cin >> s ;  $ ~int i = 0 , n = ( int ) ( s ) . size ( ) ;  $ ~while ( i < n and s [ i ] == 'a' ) ++ i ;  $ ~if ( i == n ) {  $ ~~s [ n - 1 ] = 'z' ;  $ ~~cout << s << endl ;  $ ~~return 0 ;  $ ~}  $ ~while ( i < n and s [ i ] != 'a' ) -- s [ i ++ ] ;  $ ~cout << s << endl ;  $ }
const int MAXN = 2e5 + 10 ;  $ int main ( ) {  $ ~string str ;  $ ~cin >> str ;  $ ~int cnta = 0 , cntb = 0 , cntc = 0 ;  $ ~int flag = 0 ;  $ ~for ( int i = 0 ; i < str . length ( ) ; i ++ ) {  $ ~~if ( str [ i - 1 ] > str [ i ] ) flag = 1 ;  $ ~~if ( str [ i ] == 'a' ) cnta ++ ;  $ ~~if ( str [ i ] == 'b' ) cntb ++ ;  $ ~~if ( str [ i ] == 'c' ) cntc ++ ;  $ ~}  $ ~if ( flag ) {  $ ~~cout << "NO" << endl ;  $ ~~return 0 ;  $ ~} else {  $ ~~if ( ( cnta == cntc || cntc == cntb ) && cnta != 0 && cntb != 0 && cntc != 0 ) {  $ ~~~cout << "YES" << endl ;  $ ~~} else  $ ~~~cout << "NO" << endl ;  $ ~}  $ ~return 0 ;  $ }
int dx [ ] = { - 1 , 0 , 0 } ;  $ int dy [ ] = { 0 , 1 , - 1 } ;  $ int prime [ 10000002 ] ;  $ bool ispal ( int n ) {  $ ~int rem ( 0 ) , orginal ( 0 ) ;  $ ~orginal = n ;  $ ~while ( n > 0 ) {  $ ~~rem = rem * 10 + n % 10 ;  $ ~~n /= 10 ;  $ ~}  $ ~return ( orginal == rem ) ;  $ }  $ void seive ( ) {  $ ~prime [ 1 ] = 1 ;  $ ~for ( long long i = 1 ; i <= 1e7 ; i ++ ) {  $ ~~if ( ! prime [ i ] ) {  $ ~~~for ( long long j = i * 2 ; j <= 1e7 ; j += i ) { prime [ j ] = 1 ; }  $ ~~}  $ ~}  $ }  $ int main ( ) {  $ ~seive ( ) ;  $ ~bool done = 0 ;  $ ~long long n , pal ( 0 ) , pr ( 0 ) , p , q , ans ( 0 ) ;  $ ~cin >> p >> q ;  $ ~for ( int i = 1 ; i <= 1e7 ; i ++ ) {  $ ~~if ( ! prime [ i ] ) { pr ++ ; }  $ ~~if ( ispal ( i ) ) { pal ++ ; }  $ ~~if ( pr * q <= pal * p ) {  $ ~~~ans = i ;  $ ~~~done = 1 ;  $ ~~}  $ ~}  $ ~if ( done ) {  $ ~~cout << ans << "\n" ;  $ ~} else  $ ~~cout << "Palindromic tree is better than splay tree\n" ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~char s1 [ 10 ] , s2 [ 10 ] ;  $ ~cin >> s1 ;  $ ~cin >> s2 ;  $ ~int x , y ;  $ ~if ( strcmp ( s1 , "monday" ) == 0 )  $ ~~x = 1 ;  $ ~else if ( strcmp ( s1 , "tuesday" ) == 0 )  $ ~~x = 2 ;  $ ~else if ( strcmp ( s1 , "wednesday" ) == 0 )  $ ~~x = 3 ;  $ ~else if ( strcmp ( s1 , "thursday" ) == 0 )  $ ~~x = 4 ;  $ ~else if ( strcmp ( s1 , "friday" ) == 0 )  $ ~~x = 5 ;  $ ~else if ( strcmp ( s1 , "saturday" ) == 0 )  $ ~~x = 6 ;  $ ~else if ( strcmp ( s1 , "sunday" ) == 0 )  $ ~~x = 7 ;  $ ~if ( strcmp ( s2 , "monday" ) == 0 )  $ ~~y = 1 ;  $ ~else if ( strcmp ( s2 , "tuesday" ) == 0 )  $ ~~y = 2 ;  $ ~else if ( strcmp ( s2 , "wednesday" ) == 0 )  $ ~~y = 3 ;  $ ~else if ( strcmp ( s2 , "thursday" ) == 0 )  $ ~~y = 4 ;  $ ~else if ( strcmp ( s2 , "friday" ) == 0 )  $ ~~y = 5 ;  $ ~else if ( strcmp ( s2 , "saturday" ) == 0 )  $ ~~y = 6 ;  $ ~else if ( strcmp ( s2 , "sunday" ) == 0 )  $ ~~y = 7 ;  $ ~int x1 = x + 31 % 7 ;  $ ~if ( x1 > 7 ) x1 %= 7 ;  $ ~int x2 = x + 30 % 7 ;  $ ~if ( x2 > 7 ) x2 %= 7 ;  $ ~int x3 = x + 28 % 7 ;  $ ~if ( x3 > 7 ) x3 %= 7 ;  $ ~if ( ( x1 == y ) || ( x2 == y ) || ( x3 == y ) )  $ ~~cout << "YES" << endl ;  $ ~else  $ ~~cout << "NO" << endl ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~int n , i , j , s ;  $ ~while ( cin >> n >> s ) {  $ ~~int x [ n + 5 ] , y [ n + 5 ] ;  $ ~~map < int , int > m ;  $ ~~map < int , int > : : iterator it ;  $ ~~int mx = - 1 , c = 0 ;  $ ~~for ( i = 0 ; i < n ; i ++ ) {  $ ~~~cin >> x [ i ] >> y [ i ] ;  $ ~~~if ( x [ i ] == s && y [ i ] == 0 ) {  $ ~~~~mx = max ( mx , 0 ) ;  $ ~~~} else if ( x [ i ] < s ) {  $ ~~~~mx = max ( mx , ( 100 - y [ i ] ) % 100 ) ;  $ ~~~}  $ ~~}  $ ~~cout << mx << endl ;  $ ~}  $ ~return 0 ;  $ }
vector < int > mp [ 150005 ] ;  $ int64_t n , m , a , b , ans , size , mark [ 150005 ] ;  $ void dfs ( int x , int prev ) {  $ ~mark [ x ] = 1 ;  $ ~if ( prev != mp [ x ] . size ( ) || size > mp [ x ] . size ( ) ) ans = 1 ;  $ ~++ size ;  $ ~for ( int i = 0 ; i < mp [ x ] . size ( ) ; i ++ )  $ ~~if ( mark [ mp [ x ] [ i ] ] == 0 ) dfs ( mp [ x ] [ i ] , mp [ x ] . size ( ) ) ;  $ }  $ int main ( ) {  $ ~cin >> n >> m ;  $ ~for ( int i = 1 ; i <= m ; i ++ ) {  $ ~~cin >> a >> b ;  $ ~~mp [ a ] . push_back ( b ) ;  $ ~~mp [ b ] . push_back ( a ) ;  $ ~}  $ ~for ( int i = 1 ; i <= n && ! ans ; i ++ )  $ ~~if ( mark [ i ] == 0 && mp [ i ] . size ( ) != 0 ) {  $ ~~~size = 0 ;  $ ~~~dfs ( i , mp [ i ] . size ( ) ) ;  $ ~~}  $ ~if ( ans )  $ ~~cout << "NO\n" ;  $ ~else  $ ~~cout << "YES\n" ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~int n , t ;  $ ~while ( cin >> n >> t ) {  $ ~~if ( t < 10 )  $ ~~~while ( n -- ) { cout << t ; }  $ ~~else {  $ ~~~if ( n == 1 )  $ ~~~~cout << - 1 ;  $ ~~~else {  $ ~~~~cout << 1 ;  $ ~~~~n -- ;  $ ~~~~while ( n -- ) cout << 0 ;  $ ~~~}  $ ~~}  $ ~~cout << endl ;  $ ~}  $ ~return 0 ;  $ }
int main ( ) {  $ ~int a , b , need = 0 ;  $ ~cin >> a >> b ;  $ ~int n = a / b ;  $ ~while ( n -- ) {  $ ~~for ( int i = 0 ; i < b ; i ++ ) {  $ ~~~char c = 97 + i ;  $ ~~~cout << c ;  $ ~~~need ++ ;  $ ~~}  $ ~}  $ ~need = a - need ;  $ ~for ( int i = 0 ; i < need ; i ++ ) {  $ ~~char c = 97 + i ;  $ ~~cout << c ;  $ ~}  $ ~cout << endl ;  $ ~return 0 ;  $ }
int n ;  $ long long a [ 100001 ] ;  $ long long b [ 100001 ] ;  $ long long dp [ 100001 ] ;  $ int main ( ) {  $ ~cin >> n ;  $ ~for ( int i = 1 ; i <= n ; i ++ ) { cin >> a [ i ] ; }  $ ~for ( int i = 1 ; i <= n - 1 ; i ++ ) { b [ i ] = abs ( a [ i ] - a [ i + 1 ] ) ; }  $ ~dp [ 1 ] = 0 ;  $ ~for ( int i = 2 ; i <= n ; i ++ ) {  $ ~~if ( i % 2 == 0 ) {  $ ~~~dp [ i ] = dp [ i - 1 ] + b [ i - 1 ] ;  $ ~~} else {  $ ~~~dp [ i ] = dp [ i - 1 ] - b [ i - 1 ] ;  $ ~~}  $ ~}  $ ~sort ( dp + 1 , dp + 1 + n ) ;  $ ~cout << dp [ n ] - dp [ 1 ] << '\n' ;  $ ~return 0 ;  $ }
const int N = 110 ;  $ int n , a [ N ] ;  $ int main ( ) {  $ ~cin >> n ;  $ ~for ( int i = 0 ; i < n ; i ++ ) { cin >> a [ i ] ; }  $ ~sort ( a , a + n ) ;  $ ~for ( int i = 0 ; i < n ; i ++ ) { cout << a [ i ] << ( i + 1 == n ? '\n' : ' ' ) ; }  $ ~return 0 ;  $ }
int main ( ) {  $ ~string s ;  $ ~cin >> s ;  $ ~int is = 0 ;  $ ~for ( int i = 0 ; i < ( int ) s . size ( ) - 2 ; i ++ ) {  $ ~~vector < char > v ;  $ ~~for ( int j = 0 ; j < 3 ; j ++ ) v . push_back ( s [ i + j ] ) ;  $ ~~sort ( v . begin ( ) , v . end ( ) ) ;  $ ~~if ( v [ 0 ] == 'A' && v [ 1 ] == 'B' && v [ 2 ] == 'C' ) is = 1 ;  $ ~}  $ ~if ( is )  $ ~~cout << "Yes" << endl ;  $ ~else  $ ~~cout << "No" << endl ;  $ }
int main ( ) {  $ ~int x , y ;  $ ~cin >> x >> y ;  $ ~if ( ( ! x && ! y ) || ( x == 1 && ! y ) ) {  $ ~~cout << 0 ;  $ ~~cout << "\n" ;  $ ~~return 0 ;  $ ~}  $ ~int up = max ( abs ( x ) , abs ( y ) ) * 4 ;  $ ~if ( x > y || ( x > 0 && x == y ) ) {  $ ~~if ( x > y && abs ( x ) <= abs ( y ) )  $ ~~~cout << up ;  $ ~~else if ( x > 0 && y < 0 && abs ( x ) - abs ( y ) == 1 )  $ ~~~cout << ( up - 4 ) ;  $ ~~else  $ ~~~cout << ( up - 3 ) ;  $ ~} else {  $ ~~if ( x < y && abs ( x ) <= abs ( y ) )  $ ~~~cout << ( up - 2 ) ;  $ ~~else  $ ~~~cout << up - 1 ;  $ ~}  $ ~cout << "\n" ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~long long n , m , i ;  $ ~char s [ 200001 ] ;  $ ~while ( cin >> n >> s ) {  $ ~~int cnt = 0 ;  $ ~~for ( i = 0 ; i < n ; i ++ ) {  $ ~~~if ( s [ i ] == '<' )  $ ~~~~cnt ++ ;  $ ~~~else  $ ~~~~break ;  $ ~~}  $ ~~for ( i = n - 1 ; i >= 0 ; i -- ) {  $ ~~~if ( s [ i ] == '>' )  $ ~~~~cnt ++ ;  $ ~~~else  $ ~~~~break ;  $ ~~}  $ ~~cout << cnt << endl ;  $ ~}  $ ~return 0 ;  $ }
int main ( ) {  $ ~int n , p ;  $ ~cin >> n >> p ;  $ ~string a ;  $ ~int b = 97 ;  $ ~for ( int i = 0 ; i < n ; i ++ ) { a += 97 + i % p ; }  $ ~cout << a << endl ;  $ }
int main ( ) {  $ ~char a [ 100 ] ;  $ ~int ans = 0 ;  $ ~cin >> a ;  $ ~while ( a [ 0 ] != a [ 4 ] || a [ 1 ] != a [ 3 ] ) {  $ ~~if ( a [ 0 ] == '2' && a [ 1 ] == '3' && a [ 3 ] == '5' && a [ 4 ] == '9' ) {  $ ~~~ans += 1 ;  $ ~~~break ;  $ ~~}  $ ~~a [ 4 ] += 1 ;  $ ~~ans ++ ;  $ ~~if ( a [ 4 ] == 58 ) {  $ ~~~a [ 4 ] = '0' ;  $ ~~~a [ 3 ] += 1 ;  $ ~~}  $ ~~if ( a [ 3 ] == 54 ) {  $ ~~~a [ 3 ] = '0' ;  $ ~~~a [ 1 ] += 1 ;  $ ~~}  $ ~~if ( a [ 1 ] == 58 ) {  $ ~~~a [ 1 ] = '0' ;  $ ~~~a [ 0 ] += 1 ;  $ ~~}  $ ~}  $ ~cout << ans << endl ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~int a , b , c , d ;  $ ~cin >> a >> b >> c >> d ;  $ ~if ( a % 2 == 0 && c % 2 == 0 && abs ( b - d ) % 2 == 1 ) {  $ ~~cout << "-1" << endl ;  $ ~~exit ( 0 ) ;  $ ~}  $ ~for ( int i = 0 ; i <= 10000000 ; i ++ ) {  $ ~~int p = a * i + b ;  $ ~~if ( ( p - d ) % c == 0 && p >= d ) {  $ ~~~cout << p << endl ;  $ ~~~exit ( 0 ) ;  $ ~~}  $ ~}  $ ~cout << "-1" << endl ;  $ ~return 0 ;  $ }
const int maxn = 1e5 + 100 ;  $ vector < int > v [ maxn ] , w [ maxn ] ;  $ long long a [ maxn ] ;  $ bool d [ maxn ] ;  $ long long c [ maxn ] [ 5 ] ;  $ long long n , m ;  $ bool mark [ maxn ] [ 2 ] ;  $ void dfs1 ( long long i ) {  $ ~c [ i ] [ 0 ] = 1 ;  $ ~mark [ i ] [ 0 ] = 1 ;  $ ~for ( long long y = 0 ; y < v [ i ] . size ( ) ; y ++ ) {  $ ~~if ( ! mark [ v [ i ] [ y ] ] [ 0 ] ) { dfs1 ( v [ i ] [ y ] ) ; }  $ ~}  $ }  $ void dfs2 ( long long i ) {  $ ~mark [ i ] [ 1 ] = 1 ;  $ ~c [ i ] [ 1 ] = 1 ;  $ ~if ( a [ i ] == 1 ) return ;  $ ~for ( long long y = 0 ; y < w [ i ] . size ( ) ; y ++ ) {  $ ~~if ( ! mark [ w [ i ] [ y ] ] [ 1 ] ) { dfs2 ( w [ i ] [ y ] ) ; }  $ ~}  $ }  $ int main ( ) {  $ ~cin >> n >> m ;  $ ~for ( long long y = 1 ; y <= n ; y ++ ) {  $ ~~cin >> a [ y ] ;  $ ~~if ( a [ y ] == 1 ) { v [ 100000 + 1 ] . push_back ( y ) ; }  $ ~~if ( a [ y ] == 2 ) { w [ 100000 + 1 ] . push_back ( y ) ; }  $ ~}  $ ~while ( m -- ) {  $ ~~long long i , j ;  $ ~~cin >> i >> j ;  $ ~~v [ i ] . push_back ( j ) ;  $ ~~w [ j ] . push_back ( i ) ;  $ ~}  $ ~dfs1 ( 100000 + 1 ) ;  $ ~dfs2 ( 100000 + 1 ) ;  $ ~for ( long long y = 1 ; y <= n ; y ++ ) { cout << ( c [ y ] [ 0 ] && c [ y ] [ 1 ] ) << endl ; }  $ }
const int MOD = 1e9 + 7 , maxN = 5e3 + 5 ;  $ int i , j , sum = 0 , dp [ maxN ] [ maxN ] ;  $ string s , t ;  $ int main ( ) {  $ ~cin >> s >> t ;  $ ~for ( i = 1 ; i <= s . size ( ) ; i ++ ) {  $ ~~for ( j = 1 ; j <= t . size ( ) ; j ++ ) {  $ ~~~dp [ i ] [ j ] = dp [ i ] [ j - 1 ] ;  $ ~~~if ( s [ i - 1 ] == t [ j - 1 ] ) { dp [ i ] [ j ] += dp [ i - 1 ] [ j - 1 ] + 1 ; }  $ ~~~dp [ i ] [ j ] %= MOD ;  $ ~~}  $ ~}  $ ~for ( i = 1 ; i <= s . size ( ) ; i ++ ) { sum = ( sum + dp [ i ] [ t . size ( ) ] ) % MOD ; }  $ ~cout << sum << endl ;  $ ~return 0 ;  $ }
const int MAX_N = 1000 + 10 ;  $ int in [ MAX_N ] = { } , out [ MAX_N ] = { } ;  $ int C [ MAX_N ] [ MAX_N ] ;  $ int n ;  $ int main ( ) {  $ ~int e ;  $ ~cin >> n >> e ;  $ ~for ( int i = 0 ; i < e ; ++ i ) {  $ ~~int a , b , c ;  $ ~~cin >> a >> b >> c ;  $ ~~C [ a ] [ b ] = c ;  $ ~~in [ b ] = a ;  $ ~~out [ a ] = b ;  $ ~}  $ ~int cnt = 0 ;  $ ~for ( int i = 1 ; i <= n ; ++ i ) {  $ ~~if ( in [ i ] == 0 ) {  $ ~~~if ( out [ i ] != 0 ) { ++ cnt ; }  $ ~~}  $ ~}  $ ~cout << cnt << endl ;  $ ~for ( int i = 1 ; i <= n ; ++ i ) {  $ ~~if ( in [ i ] == 0 ) {  $ ~~~if ( out [ i ] != 0 ) {  $ ~~~~int mind = INT_MAX ;  $ ~~~~int u = i ;  $ ~~~~while ( true ) {  $ ~~~~~int v = out [ u ] ;  $ ~~~~~if ( ! v ) break ;  $ ~~~~~mind = min ( mind , C [ u ] [ v ] ) ;  $ ~~~~~u = v ;  $ ~~~~}  $ ~~~~cout << i << " " << u << " " << mind << endl ;  $ ~~~}  $ ~~}  $ ~}  $ ~return 0 ;  $ }
int arr1 [ 110 ] ;  $ int arr2 [ 110 ] ;  $ int main ( ) {  $ ~int i , j , ind = 0 , count = 0 , n ;  $ ~cin >> n ;  $ ~for ( i = 1 ; i <= n ; ++ i ) cin >> arr1 [ i ] >> arr2 [ i ] ;  $ ~for ( i = 1 ; i <= n ; ++ i ) {  $ ~~ind = 0 ;  $ ~~for ( j = 1 ; j <= n ; ++ j ) {  $ ~~~if ( i != j ) {  $ ~~~~if ( arr2 [ j ] == arr1 [ i ] ) ind = 1 ;  $ ~~~}  $ ~~}  $ ~~if ( ! ind ) count ++ ;  $ ~}  $ ~cout << count << endl ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~long long n , a , b , c , d ;  $ ~cin >> a >> b ;  $ ~cin >> c >> d ;  $ ~cin >> n ;  $ ~long long cross = 0 ;  $ ~long long x , y , z ;  $ ~for ( long long i = 0 ; i < n ; i ++ ) {  $ ~~cin >> x >> y >> z ;  $ ~~if ( ( a * x + b * y + z ) > 0 && ( c * x + d * y + z ) < 0 ) { cross ++ ; }  $ ~~if ( ( a * x + b * y + z ) < 0 && ( c * x + d * y + z ) > 0 ) { cross ++ ; }  $ ~}  $ ~cout << cross << endl ;  $ ~return 0 ;  $ }
const int maxn = ( int ) 1e5 + 5 ;  $ const long long mod = 1e9 + 7 ;  $ int main ( ) {  $ ~long long n ;  $ ~long long a , b ;  $ ~cin >> n ;  $ ~cin >> a >> b ;  $ ~if ( a + b > n + 1 )  $ ~~cout << "Black" << endl ;  $ ~else  $ ~~cout << "White" << endl ;  $ ~return 0 ;  $ }
vector < long long > v ( 0 ) ;  $ int main ( ) {  $ ~for ( int len = 1 ; len <= 10 ; ++ len )  $ ~~for ( int mask = 0 ; mask < ( 1 << len ) ; ++ mask ) {  $ ~~~long long val = 0 ;  $ ~~~for ( int ( i ) = 0 ; ( i ) < ( len ) ; ++ ( i ) )  $ ~~~~if ( mask & ( 1 << i ) )  $ ~~~~~val = val * 10 + 4 ;  $ ~~~~else  $ ~~~~~val = val * 10 + 7 ;  $ ~~~v . push_back ( val ) ;  $ ~~}  $ ~sort ( ( v ) . begin ( ) , ( v ) . end ( ) ) ;  $ ~long long l , r ;  $ ~cin >> l >> r ;  $ ~long long ans = 0 ;  $ ~for ( ; l <= r ; ) {  $ ~~long long val = * lower_bound ( v . begin ( ) , v . end ( ) , l ) ;  $ ~~long long count = val - l + 1 ;  $ ~~if ( val > r ) count = r - l + 1 ;  $ ~~ans += val * count ;  $ ~~l = val + 1 ;  $ ~}  $ ~cout << ans << endl ;  $ }
long long int k ;  $ long long int ara [ 19 ] ;  $ vector < long long int > v ;  $ vector < long long int > : : iterator y ;  $ void permu ( long long int pos ) {  $ ~if ( pos == k + 1 ) {  $ ~~long long int i , p = 1 , l = 0 ;  $ ~~for ( i = k ; i >= 1 ; i -- ) {  $ ~~~l += ( ara [ i ] * p ) ;  $ ~~~p = p * 10 ;  $ ~~}  $ ~~v . push_back ( l ) ;  $ ~~return ;  $ ~}  $ ~ara [ pos ] = 4 ;  $ ~permu ( pos + 1 ) ;  $ ~ara [ pos ] = 7 ;  $ ~permu ( pos + 1 ) ;  $ }  $ int main ( ) {  $ ~long long int n , m , f , p = 0 , flag = 0 , r ;  $ ~cin >> n >> m ;  $ ~for ( k = 1 ; k <= 11 ; k ++ ) { permu ( 1 ) ; }  $ ~sort ( v . begin ( ) , v . end ( ) ) ;  $ ~for ( y = v . begin ( ) ; y != v . end ( ) ; y ++ ) {  $ ~~f = * y ;  $ ~~if ( n <= f && m <= f && flag == 0 ) {  $ ~~~p += ( m - n + 1 ) * f ;  $ ~~~flag = 2 ;  $ ~~} else if ( n <= f && flag == 0 ) {  $ ~~~flag = 1 ;  $ ~~~p += ( ( f - n ) + 1 ) * f ;  $ ~~~r = f ;  $ ~~} else if ( m <= f && flag == 1 ) {  $ ~~~flag = 2 ;  $ ~~~p += ( m - r ) * f ;  $ ~~} else if ( flag == 1 ) {  $ ~~~p += ( f - r ) * f ;  $ ~~~r = f ;  $ ~~}  $ ~}  $ ~cout << p << endl ;  $ }
int main ( ) {  $ ~int a , b , s , k ;  $ ~cin >> a >> b >> s ;  $ ~if ( a == 0 && b == 0 && s == 2 ) {  $ ~~cout << "Yes" << endl ;  $ ~} else {  $ ~~k = abs ( a ) + abs ( b ) ;  $ ~~if ( s >= k && ( s - k ) % 2 == 0 ) {  $ ~~~cout << "Yes" << endl ;  $ ~~} else {  $ ~~~cout << "No" << endl ;  $ ~~}  $ ~}  $ }
int main ( ) {  $ ~string p ;  $ ~cin >> p ;  $ ~string ans = "" ;  $ ~for ( int i = 0 ; i < p . size ( ) ; i ++ ) {  $ ~~if ( p [ i ] == '/' ) {  $ ~~~while ( i < p . size ( ) && p [ i ] == '/' ) i ++ ;  $ ~~~ans += '/' ;  $ ~~}  $ ~~if ( i < p . size ( ) ) ans += p [ i ] ;  $ ~}  $ ~if ( ans . size ( ) > 1 && ans [ ans . size ( ) - 1 ] == '/' ) ans = ans . substr ( 0 , ans . size ( ) - 1 ) ;  $ ~cout << ans << endl ;  $ }
int n ;  $ const int MAXN = 105 ;  $ int c [ MAXN ] , occ [ MAXN ] ;  $ bool vis [ MAXN ] ;  $ int dfs ( int idx ) {  $ ~if ( vis [ idx ] ) return 0 ;  $ ~vis [ idx ] = true ;  $ ~return 1 + dfs ( c [ idx ] ) ;  $ }  $ int gcd ( int a , int b ) {  $ ~if ( a == 0 )  $ ~~return b ;  $ ~else if ( b == 0 )  $ ~~return a ;  $ ~if ( a >= b ) return gcd ( a % b , b ) ;  $ ~return gcd ( a , b % a ) ;  $ }  $ int main ( ) {  $ ~cin >> n ;  $ ~for ( int i = 1 ; i <= n ; i ++ ) {  $ ~~cin >> c [ i ] ;  $ ~~occ [ c [ i ] ] ++ ;  $ ~}  $ ~for ( int i = 1 ; i <= n ; i ++ )  $ ~~if ( occ [ i ] != 1 ) {  $ ~~~cout << - 1 << "\n" ;  $ ~~~return 0 ;  $ ~~}  $ ~int ans = 1 ;  $ ~for ( int i = 1 ; i <= n ; i ++ )  $ ~~if ( ! vis [ i ] ) {  $ ~~~int x = dfs ( i ) ;  $ ~~~if ( x % 2 == 0 ) x /= 2 ;  $ ~~~ans = ans * x / gcd ( ans , x ) ;  $ ~~}  $ ~cout << ans << "\n" ;  $ ~return 0 ;  $ }
const int maxn = 1e5 + 5 ;  $ int a [ maxn ] , b [ maxn ] ;  $ int n ;  $ int main ( ) {  $ ~int c = 0 ;  $ ~int cur ;  $ ~cin >> n ;  $ ~cur = n - 2 ;  $ ~for ( int i = 0 ; i < n ; i ++ ) { cin >> a [ i ] ; }  $ ~sort ( a , a + n ) ;  $ ~for ( int i = n - 1 ; i >= 0 && cur >= 0 ; i -- ) {  $ ~~while ( a [ cur ] >= a [ i ] && cur > - 1 ) cur -- ;  $ ~~if ( cur >= 0 ) c ++ ;  $ ~~cur -- ;  $ ~}  $ ~cout << c << endl ;  $ ~return 0 ;  $ }
char vowel [ 6 ] = { 'a' , 'o' , 'y' , 'e' , 'u' , 'i' } ;  $ int main ( ) {  $ ~string s ;  $ ~cin >> s ;  $ ~bool yes ;  $ ~for ( int i = 0 ; i < s . size ( ) ; i ++ ) {  $ ~~yes = true ;  $ ~~for ( int j = 0 ; j < 6 ; j ++ ) {  $ ~~~if ( tolower ( s [ i ] ) == vowel [ j ] ) {  $ ~~~~yes = false ;  $ ~~~~break ;  $ ~~~}  $ ~~}  $ ~~if ( yes ) { cout << '.' << char ( tolower ( s [ i ] ) ) ; }  $ ~}  $ ~cout << '\n' ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~long long x1 , y1 ;  $ ~cin >> x1 >> y1 ;  $ ~long long x = 1 , y = 0 ;  $ ~long long count = 0 ;  $ ~long long step = 1 ;  $ ~if ( x1 == 0 && y1 == 0 ) {  $ ~~cout << 0 << endl ;  $ ~~return 0 ;  $ ~}  $ ~if ( x1 == 1 && y1 == 0 ) {  $ ~~cout << 0 << endl ;  $ ~~return 0 ;  $ ~}  $ ~while ( 1 ) {  $ ~~if ( x == x1 && y == y1 ) { break ; }  $ ~~y += step ;  $ ~~count ++ ;  $ ~~if ( x == x1 && y1 <= y && y1 >= y - step ) { break ; }  $ ~~x -= step + 1 ;  $ ~~count ++ ;  $ ~~if ( y == y1 && x1 >= x && x1 <= x + step + 1 ) { break ; }  $ ~~y -= step + 1 ;  $ ~~count ++ ;  $ ~~if ( x == x1 && y1 >= y && y1 <= y + step + 1 ) { break ; }  $ ~~x += step + 2 ;  $ ~~count ++ ;  $ ~~if ( y == y1 && x1 <= x && x1 >= x - step - 2 ) { break ; }  $ ~~step += 2 ;  $ ~}  $ ~cout << count << endl ;  $ }
int main ( ) {  $ ~int n , score [ 1000 ] , i = 0 ;  $ ~vector < string > names , unique_names , final_names ;  $ ~string a ;  $ ~cin >> n ;  $ ~while ( n -- ) {  $ ~~cin >> a >> score [ i ] ;  $ ~~names . push_back ( a ) ;  $ ~~i ++ ;  $ ~}  $ ~unique_names . push_back ( names [ 0 ] ) ;  $ ~for ( int k = 1 ; k < names . size ( ) ; k ++ ) {  $ ~~for ( int j = 0 ; j < unique_names . size ( ) ; j ++ ) {  $ ~~~if ( names [ k ] == unique_names [ j ] ) { break ; }  $ ~~~if ( j == unique_names . size ( ) - 1 ) { unique_names . push_back ( names [ k ] ) ; }  $ ~~}  $ ~}  $ ~int len_unique = unique_names . size ( ) ;  $ ~vector < int > total ( 1000 , 0 ) ;  $ ~vector < int > time ( 1000 , 0 ) ;  $ ~int counter = 0 ;  $ ~for ( int k = 0 ; k < names . size ( ) ; k ++ ) {  $ ~~for ( int j = 0 ; j < unique_names . size ( ) ; j ++ ) {  $ ~~~if ( names [ k ] == unique_names [ j ] ) {  $ ~~~~total [ j ] = total [ j ] + score [ k ] ;  $ ~~~~if ( score [ k ] > 0 ) counter ++ ;  $ ~~~~time [ j ] = counter ;  $ ~~~}  $ ~~}  $ ~}  $ ~for ( int l = 0 ; l < time . size ( ) ; l ++ ) { }  $ ~int max_score = * max_element ( total . begin ( ) , total . end ( ) ) ;  $ ~string winner ;  $ ~int time1 = 100000000 ;  $ ~for ( int k = 0 ; k < unique_names . size ( ) ; k ++ ) {  $ ~~if ( total [ k ] == max_score ) {  $ ~~~int sum = 0 ;  $ ~~~for ( int l = 0 ; l < names . size ( ) ; l ++ ) {  $ ~~~~if ( names [ l ] == unique_names [ k ] ) {  $ ~~~~~sum = sum + score [ l ] ;  $ ~~~~~if ( sum >= max_score && time1 > l ) {  $ ~~~~~~time1 = l ;  $ ~~~~~~winner = unique_names [ k ] ;  $ ~~~~~}  $ ~~~~}  $ ~~~}  $ ~~}  $ ~}  $ ~cout << winner << endl ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~int x = 0 , y = 0 , xx = 0 , yy = 0 , k = 2 , c = 1 ;  $ ~map < pair < int , int > , int > mp ;  $ ~while ( 1 ) {  $ ~~c ++ ;  $ ~~x = ( x * - 1 ) + 1 ;  $ ~~if ( x == xx )  $ ~~~for ( int i = min ( y , yy ) ; i <= max ( y , yy ) ; i ++ ) mp [ make_pair ( x , i ) ] = c - 2 ;  $ ~~else  $ ~~~for ( int i = min ( x , xx ) ; i <= max ( x , xx ) ; i ++ ) mp [ make_pair ( i , y ) ] = c - 2 ;  $ ~~if ( mp [ make_pair ( x , y ) ] == mp [ make_pair ( xx , yy ) ] ) mp [ make_pair ( xx , yy ) ] -- ;  $ ~~xx = x ;  $ ~~y = ( y * - 1 ) + 1 ;  $ ~~c ++ ;  $ ~~if ( x == xx )  $ ~~~for ( int i = min ( y , yy ) ; i <= max ( y , yy ) ; i ++ ) mp [ make_pair ( x , i ) ] = c - 2 ;  $ ~~else  $ ~~~for ( int i = min ( x , xx ) ; i <= max ( x , xx ) ; i ++ ) mp [ make_pair ( i , y ) ] = c - 2 ;  $ ~~if ( mp [ make_pair ( x , y ) ] == mp [ make_pair ( xx , yy ) ] ) mp [ make_pair ( xx , yy ) ] -- ;  $ ~~yy = y ;  $ ~~x *= - 1 ;  $ ~~c ++ ;  $ ~~if ( x == xx )  $ ~~~for ( int i = min ( y , yy ) ; i <= max ( y , yy ) ; i ++ ) mp [ make_pair ( x , i ) ] = c - 2 ;  $ ~~else  $ ~~~for ( int i = min ( x , xx ) ; i <= max ( x , xx ) ; i ++ ) mp [ make_pair ( i , y ) ] = c - 2 ;  $ ~~if ( mp [ make_pair ( x , y ) ] == mp [ make_pair ( xx , yy ) ] ) mp [ make_pair ( xx , yy ) ] -- ;  $ ~~xx = x ;  $ ~~y *= - 1 ;  $ ~~c ++ ;  $ ~~if ( x == xx )  $ ~~~for ( int i = min ( y , yy ) ; i <= max ( y , yy ) ; i ++ ) mp [ make_pair ( x , i ) ] = c - 2 ;  $ ~~else  $ ~~~for ( int i = min ( x , xx ) ; i <= max ( x , xx ) ; i ++ ) mp [ make_pair ( i , y ) ] = c - 2 ;  $ ~~if ( mp [ make_pair ( x , y ) ] == mp [ make_pair ( xx , yy ) ] ) mp [ make_pair ( xx , yy ) ] -- ;  $ ~~yy = y ;  $ ~~if ( x == - 300 && y == - 300 ) break ;  $ ~}  $ ~mp [ make_pair ( 0 , 0 ) ] = 0 ;  $ ~int a , b ;  $ ~cin >> a >> b ;  $ ~if ( ( a == 0 && b == 0 ) || ( a == 1 && b == 0 ) ) return cout << 0 << '\n' , 0 ;  $ ~cout << mp [ make_pair ( a , b ) ] << '\n' ;  $ }
int p , q , A , B , R , C [ 2000000 ] = { 1 , 1 } , i = 1 ;  $ int main ( ) {  $ ~cin >> p >> q ;  $ ~for ( ; i < 2e6 ; i ++ ) {  $ ~~if ( ! C [ i ] ) {  $ ~~~A += q ;  $ ~~~for ( int j = i ; j < 2e6 ; j += i ) C [ j ] = 1 ;  $ ~~}  $ ~~int r = 0 , t = i ;  $ ~~for ( ; t ; r = 10 * r + t % 10 , t /= 10 )  $ ~~~;  $ ~~B += p * ( r == i ) ;  $ ~~R = A <= B ? i : R ;  $ ~}  $ ~cout << R << endl ;  $ }
long long a , b , c ;  $ int main ( ) {  $ ~cin >> a >> b >> c ;  $ ~if ( a < 0 ) a = - a ;  $ ~if ( b < 0 ) b = - b ;  $ ~if ( a + b > c )  $ ~~cout << "No" << endl ;  $ ~else if ( ( c - a - b ) & 1 )  $ ~~cout << "No" << endl ;  $ ~else  $ ~~cout << "Yes" << endl ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~long long t1 , t2 , x1 , x2 , t0 , res_x , res_y ;  $ ~cin >> t1 >> t2 >> x1 >> x2 >> t0 ;  $ ~double t , ct = 1e99 ;  $ ~while ( x1 >= 0 && x2 >= 0 ) {  $ ~~t = ( t1 * x1 + t2 * x2 * 1.0 ) / ( x1 + x2 ) ;  $ ~~if ( t < t0 ) {  $ ~~~x1 -- ;  $ ~~~continue ;  $ ~~}  $ ~~if ( t < ct ) {  $ ~~~ct = t ;  $ ~~~res_x = x1 ;  $ ~~~res_y = x2 ;  $ ~~}  $ ~~x2 -- ;  $ ~}  $ ~cout << res_x << ' ' << res_y << endl ;  $ }
int main ( ) {  $ ~int h , m ;  $ ~cin >> h >> m ;  $ ~int f1 = h - 1 , f2 = m - 1 , p = 0 , q = 0 ;  $ ~while ( f1 ) {  $ ~~f1 /= 7 ;  $ ~~p ++ ;  $ ~}  $ ~while ( f2 ) {  $ ~~f2 /= 7 ;  $ ~~q ++ ;  $ ~}  $ ~if ( h == 1 ) { p = 1 ; }  $ ~if ( m == 1 ) { q = 1 ; }  $ ~if ( p + q > 7 ) {  $ ~~cout << 0 << endl ;  $ ~~return 0 ;  $ ~}  $ ~int ans = 0 ;  $ ~for ( int i = 0 ; i < h ; i ++ ) {  $ ~~for ( int j = 0 ; j < m ; j ++ ) {  $ ~~~vector < int > used ( 7 , 0 ) ;  $ ~~~for ( int a = i , k = 0 ; k < p ; a /= 7 , k ++ ) used [ a % 7 ] += 1 ;  $ ~~~for ( int b = j , k = 0 ; k < q ; b /= 7 , k ++ ) used [ b % 7 ] += 1 ;  $ ~~~if ( * max_element ( used . begin ( ) , used . end ( ) ) <= 1 ) ans ++ ;  $ ~~}  $ ~}  $ ~cout << ans << endl ;  $ }
long long const M = 2e5 + 10 ;  $ long long col [ M ] , q [ M ] , head = 0 , tail = 0 , ans [ M ] , ans2 [ M ] ;  $ vector < long long > adj [ M ] , adj2 [ M ] ;  $ int main ( ) {  $ ~long long n , m , a , b ;  $ ~cin >> n >> m ;  $ ~for ( long long i = 1 ; i <= n ; i ++ ) {  $ ~~cin >> col [ i ] ;  $ ~~col [ i ] = ( 3 - col [ i ] ) % 3 ;  $ ~~if ( col [ i ] == 2 ) q [ head ++ ] = i , ans [ i ] = 1 ;  $ ~}  $ ~for ( long long i = 1 ; i <= m ; i ++ ) cin >> a >> b , adj [ a ] . push_back ( b ) , adj2 [ b ] . push_back ( a ) ;  $ ~while ( head > tail ) {  $ ~~long long v = q [ tail ++ ] ;  $ ~~for ( long long i = 0 ; i < adj [ v ] . size ( ) ; i ++ ) {  $ ~~~long long u = adj [ v ] [ i ] ;  $ ~~~if ( ! ans [ u ] && col [ u ] != 2 ) q [ head ++ ] = u , ans [ u ] = 1 ;  $ ~~}  $ ~}  $ ~head = 0 , tail = 0 ;  $ ~for ( long long i = 1 ; i <= n ; i ++ ) {  $ ~~if ( col [ i ] == 1 ) q [ head ++ ] = i , ans2 [ i ] = 1 ;  $ ~}  $ ~while ( head > tail ) {  $ ~~long long v = q [ tail ++ ] ;  $ ~~for ( long long i = 0 ; i < adj2 [ v ] . size ( ) ; i ++ ) {  $ ~~~long long u = adj2 [ v ] [ i ] ;  $ ~~~if ( ! ans2 [ u ] && col [ u ] != 2 )  $ ~~~~ans2 [ u ] = 1 , q [ head ++ ] = u ;  $ ~~~else if ( col [ u ] == 2 )  $ ~~~~ans2 [ u ] = 1 ;  $ ~~}  $ ~}  $ ~for ( long long i = 1 ; i <= n ; i ++ ) {  $ ~~if ( ans [ i ] == 1 && ans2 [ i ] == 1 )  $ ~~~cout << 1 << endl ;  $ ~~else  $ ~~~cout << 0 << endl ;  $ ~}  $ }
int main ( ) {  $ ~int nega [ 100003 ] , posi [ 100003 ] , ne = 0 , po = 0 , sumne = 0 , sumpo = 0 ;  $ ~bool z = false ;  $ ~int n , x , a ;  $ ~cin >> n ;  $ ~memset ( nega , 0 , sizeof nega ) ;  $ ~memset ( posi , 0 , sizeof posi ) ;  $ ~for ( int i = 0 ; i < n ; i ++ ) {  $ ~~cin >> x >> a ;  $ ~~if ( x < 0 ) {  $ ~~~nega [ - x ] = a ;  $ ~~~ne ++ ;  $ ~~~sumne += a ;  $ ~~} else {  $ ~~~posi [ x ] = a ;  $ ~~~sumpo += a ;  $ ~~}  $ ~}  $ ~po = n - ne ;  $ ~if ( po == ne ) {  $ ~~cout << sumne + sumpo << endl ;  $ ~~return 0 ;  $ ~}  $ ~if ( po < ne ) {  $ ~~sumne = 0 ;  $ ~~int cont = 0 ;  $ ~~for ( int i = 0 ; cont < po + 1 ; i ++ ) {  $ ~~~if ( nega [ i ] != 0 ) {  $ ~~~~sumne += nega [ i ] ;  $ ~~~~cont ++ ;  $ ~~~}  $ ~~}  $ ~}  $ ~if ( po > ne ) {  $ ~~sumpo = 0 ;  $ ~~int cont = 0 ;  $ ~~for ( int i = 0 ; cont < ne + 1 ; i ++ ) {  $ ~~~if ( posi [ i ] != 0 ) {  $ ~~~~sumpo += posi [ i ] ;  $ ~~~~cont ++ ;  $ ~~~}  $ ~~}  $ ~}  $ ~cout << sumne + sumpo << endl ;  $ ~return 0 ;  $ }
int a [ 105 ] , s [ 1005 ] , num [ 105 ] = { 0 } ;  $ int main ( ) {  $ ~int n , i , j , k , maxn ;  $ ~cin >> n >> maxn ;  $ ~for ( i = 1 ; i <= n ; i ++ ) {  $ ~~cin >> a [ i ] ;  $ ~~num [ a [ i ] ] ++ ;  $ ~}  $ ~int sum = 0 ;  $ ~int p = 0 , top = 0 ;  $ ~for ( i = 1 ; i <= n ; i ++ ) {  $ ~~for ( j = p ; j < top ; j ++ )  $ ~~~if ( s [ j ] == a [ i ] ) break ;  $ ~~if ( j < top )  $ ~~~continue ;  $ ~~else {  $ ~~~if ( top - p < maxn ) {  $ ~~~~s [ top ++ ] = a [ i ] ;  $ ~~~~sum ++ ;  $ ~~~~num [ a [ i ] ] -- ;  $ ~~~} else {  $ ~~~~k = 0 ;  $ ~~~~for ( j = 0 ; j < top ; j ++ ) {  $ ~~~~~int qq , ww ;  $ ~~~~~for ( qq = i + 1 ; qq <= n ; qq ++ )  $ ~~~~~~if ( a [ qq ] == s [ k ] ) break ;  $ ~~~~~for ( ww = i + 1 ; ww <= n ; ww ++ )  $ ~~~~~~if ( a [ ww ] == s [ j ] ) break ;  $ ~~~~~if ( qq < ww ) k = j ;  $ ~~~~}  $ ~~~~s [ k ] = a [ i ] ;  $ ~~~~sum ++ ;  $ ~~~~num [ a [ i ] ] -- ;  $ ~~~}  $ ~~}  $ ~}  $ ~cout << sum << endl ;  $ }
int main ( ) {  $ ~int n , m , i , j , num [ 105 ] , cnt = 0 ;  $ ~cin >> n >> m ;  $ ~for ( i = 0 ; i < n ; i ++ ) {  $ ~~cin >> num [ i ] ;  $ ~~if ( num [ i ] <= m ) {  $ ~~~num [ i ] = 0 ;  $ ~~~j = i ;  $ ~~} else {  $ ~~~num [ i ] = num [ i ] - m ;  $ ~~~cnt = 1 ;  $ ~~}  $ ~}  $ ~while ( cnt ) {  $ ~~cnt = 0 ;  $ ~~for ( i = 0 ; i < n ; i ++ ) {  $ ~~~if ( num [ i ] <= m && num [ i ] != 0 ) {  $ ~~~~num [ i ] = 0 ;  $ ~~~~j = i ;  $ ~~~} else if ( num [ i ] > m ) {  $ ~~~~num [ i ] = num [ i ] - m ;  $ ~~~~cnt = 1 ;  $ ~~~}  $ ~~}  $ ~}  $ ~cout << j + 1 << endl ;  $ ~return 0 ;  $ }
const int INF = 0 x3f3f3f3f ;  $ string s ;  $ int main ( ) {  $ ~int i , j , k ;  $ ~int n , m , t ;  $ ~cin >> n ;  $ ~cin >> s ;  $ ~int cou = 0 , co = 0 ;  $ ~for ( i = 0 ; i < s . length ( ) ; i ++ )  $ ~~if ( s [ i ] == '0' )  $ ~~~cou ++ ;  $ ~~else  $ ~~~co ++ ;  $ ~if ( co == 0 )  $ ~~cout << 0 << endl ;  $ ~else {  $ ~~cout << 1 ;  $ ~~for ( i = 0 ; i < cou ; i ++ ) cout << 0 ;  $ ~~cout << endl ;  $ ~}  $ }
int main ( ) {  $ ~int n ;  $ ~cin >> n ;  $ ~string s ;  $ ~cin >> s ;  $ ~string ans ;  $ ~bool ok = 0 ;  $ ~for ( int i = 0 ; i < n ; i ++ )  $ ~~if ( s [ i ] == '1' and ! ok ) {  $ ~~~ans += s [ i ] ;  $ ~~~ok = 1 ;  $ ~~} else if ( ok and s [ i ] == '0' )  $ ~~~ans += s [ i ] ;  $ ~if ( ans . size ( ) )  $ ~~cout << ans << endl ;  $ ~else  $ ~~cout << 0 << endl ;  $ }
long long a [ 100010 ] ;  $ int main ( ) {  $ ~long long N , M , K ;  $ ~long long mm = 1e9 ;  $ ~cin >> N >> M >> K ;  $ ~for ( int i = 1 ; i <= N ; i ++ ) {  $ ~~cin >> a [ i ] ;  $ ~~if ( i % 2 == 1 ) { mm = min ( mm , a [ i ] ) ; }  $ ~}  $ ~if ( N % 2 == 0 ) {  $ ~~cout << "0" << endl ;  $ ~~return 0 ;  $ ~}  $ ~int temp = ( N + 1 ) / 2 ;  $ ~cout << min ( mm , M / temp * K ) << endl ;  $ ~return 0 ;  $ }
long long ans ;  $ long long maxsum ( long long p [ ] , long long n ) {  $ ~long long tmp = 0 ;  $ ~for ( long long i = 0 ; i < n ; ++ i ) {  $ ~~ans = max ( ans , tmp ) ;  $ ~~tmp += p [ i ] ;  $ ~~if ( tmp < 0 ) tmp = 0 ;  $ ~~ans = max ( ans , tmp ) ;  $ ~}  $ }  $ int main ( ) {  $ ~long long n ;  $ ~cin >> n ;  $ ~long long a [ n ] ;  $ ~for ( long long i = 0 ; i < n ; ++ i ) cin >> a [ i ] ;  $ ~long long b [ n ] ;  $ ~long long c [ n ] ;  $ ~for ( long long i = 0 ; i < n - 1 ; ++ i ) {  $ ~~b [ i ] = abs ( a [ i ] - a [ i + 1 ] ) * ( i % 2 == 0 ? 1 : - 1 ) ;  $ ~~c [ i ] = abs ( a [ i ] - a [ i + 1 ] ) * ( ( i + 1 ) % 2 == 0 ? 1 : - 1 ) ;  $ ~}  $ ~maxsum ( b , n - 1 ) ;  $ ~maxsum ( c , n - 1 ) ;  $ ~cout << ans << '\n' ;  $ }
map < string , int > day ;  $ int main ( ) {  $ ~day [ "monday" ] = 1 ;  $ ~day [ "tuesday" ] = 2 ;  $ ~day [ "wednesday" ] = 3 ;  $ ~day [ "thursday" ] = 4 ;  $ ~day [ "friday" ] = 5 ;  $ ~day [ "saturday" ] = 6 ;  $ ~day [ "sunday" ] = 7 ;  $ ~string fd , sd ;  $ ~cin >> fd >> sd ;  $ ~int f = day [ fd ] , s = day [ sd ] ;  $ ~int k = ( s - f + 7 ) % 7 ;  $ ~if ( k == 0 || k == 2 || k == 3 )  $ ~~cout << "YES" << endl ;  $ ~else  $ ~~cout << "NO" << endl ;  $ }
int main ( ) {  $ ~string s ;  $ ~int n ;  $ ~cin >> n >> s ;  $ ~s = '0' + s + '0' ;  $ ~if ( s . find ( "000" ) == - 1 && s . find ( "11" ) == - 1 )  $ ~~puts ( "Yes" ) ;  $ ~else  $ ~~puts ( "No" ) ;  $ }
const int maxn = 1e5 + 10 ;  $ bool mark [ maxn ] , rmark [ maxn ] ;  $ int a [ maxn ] ;  $ vector < int > v [ maxn ] , rv [ maxn ] ;  $ inline void dfs ( int x , int par ) {  $ ~if ( mark [ x ] ) return ;  $ ~if ( par != - 1 && a [ x ] == 1 ) return ;  $ ~mark [ x ] = 1 ;  $ ~for ( int i = 0 ; i < v [ x ] . size ( ) ; i ++ )  $ ~~if ( ! mark [ v [ x ] [ i ] ] ) dfs ( v [ x ] [ i ] , x ) ;  $ }  $ inline void rdfs ( int x ) {  $ ~if ( rmark [ x ] ) return ;  $ ~rmark [ x ] = 1 ;  $ ~if ( a [ x ] == 1 ) return ;  $ ~for ( int i = 0 ; i < rv [ x ] . size ( ) ; i ++ )  $ ~~if ( ! rmark [ rv [ x ] [ i ] ] ) rdfs ( rv [ x ] [ i ] ) ;  $ }  $ int main ( ) {  $ ~int n , m , x , y ;  $ ~cin >> n >> m ;  $ ~for ( int i = 0 ; i < n ; i ++ ) cin >> a [ i ] ;  $ ~for ( int i = 0 ; i < m ; i ++ ) {  $ ~~cin >> x >> y ;  $ ~~x -- ;  $ ~~y -- ;  $ ~~v [ x ] . push_back ( y ) ;  $ ~~rv [ y ] . push_back ( x ) ;  $ ~}  $ ~for ( int i = 0 ; i < n ; i ++ )  $ ~~if ( a [ i ] == 1 ) dfs ( i , - 1 ) ;  $ ~for ( int i = 0 ; i < n ; i ++ )  $ ~~if ( a [ i ] == 2 ) rdfs ( i ) ;  $ ~for ( int i = 0 ; i < n ; i ++ )  $ ~~if ( mark [ i ] && rmark [ i ] )  $ ~~~cout << 1 << "\n" ;  $ ~~else  $ ~~~cout << 0 << "\n" ;  $ }
int main ( ) {  $ ~string s ;  $ ~cin >> s ;  $ ~int i , j , k , l = s . length ( ) ;  $ ~int a1 = 0 , b1 = 0 , c1 = 0 , m = - 1 ;  $ ~for ( i = 0 ; i < l - 2 ; i ++ ) {  $ ~~if ( a1 * 10 + ( s [ i ] - 48 ) > 1000000 ) break ;  $ ~~if ( i && s [ 0 ] == '0' ) break ;  $ ~~a1 = a1 * 10 + ( s [ i ] - 48 ) ;  $ ~~for ( j = i + 1 ; j < l - 1 ; j ++ ) {  $ ~~~if ( b1 * 10 + int ( s [ j ] - 48 ) > 1000000 ) break ;  $ ~~~if ( i + 1 < j && s [ i + 1 ] == '0' ) break ;  $ ~~~b1 = b1 * 10 + int ( s [ j ] - 48 ) ;  $ ~~~c1 = 0 ;  $ ~~~for ( k = j + 1 ; k < l ; k ++ ) {  $ ~~~~if ( c1 * 10 + int ( s [ k ] - 48 ) > 1000000 ) goto w ;  $ ~~~~if ( j + 1 < k && s [ j + 1 ] == '0' ) goto w ;  $ ~~~~c1 = c1 * 10 + int ( s [ k ] - 48 ) ;  $ ~~~}  $ ~~~if ( m < a1 + b1 + c1 ) m = a1 + b1 + c1 ;  $ ~~w : ;  $ ~~}  $ ~~b1 = 0 ;  $ ~}  $ ~cout << m << endl ;  $ ~return 0 ;  $ }
const int N = 200010 ;  $ long long n , t , ans , maxn ;  $ long long m [ N ] , ms [ N ] ;  $ int main ( ) {  $ ~cin >> n ;  $ ~for ( int i = 1 ; i <= n ; i ++ ) {  $ ~~cin >> m [ i ] ;  $ ~~for ( int j = 1 ; j <= m [ i ] ; j ++ ) cin >> t , ms [ i ] = max ( ms [ i ] , t ) ;  $ ~~maxn = max ( maxn , ms [ i ] ) ;  $ ~}  $ ~for ( int i = 1 ; i <= n ; i ++ ) ans += m [ i ] * ( maxn - ms [ i ] ) ;  $ ~cout << ans << endl ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~int a , b , s ;  $ ~cin >> a >> b >> s ;  $ ~int d = abs ( a ) + abs ( b ) ;  $ ~cout << ( ( d <= s && ( ( d ^ s ) & 1 ) == 0 ) ? "Yes\n" : "No\n" ) ;  $ ~return 0 ;  $ }
void printSt ( int x ) {  $ ~for ( int i = int ( 0 ) ; i < int ( x ) ; ++ i ) cout << "|" ;  $ }  $ void get ( int & a , int & b , int & c , string cad ) {  $ ~int p ;  $ ~for ( p = 0 ; cad [ p ] != '+' ; ++ p ) a ++ ;  $ ~for ( ++ p ; cad [ p ] != '=' ; ++ p ) b ++ ;  $ ~for ( ++ p ; p < int ( cad . size ( ) ) ; ++ p ) c ++ ;  $ }  $ int main ( ) {  $ ~string cad ;  $ ~cin >> cad ;  $ ~int a , b , c ;  $ ~a = b = c = 0 ;  $ ~get ( a , b , c , cad ) ;  $ ~if ( a + b + 1 == c - 1 ) a ++ , c -- ;  $ ~if ( a + b - 1 == c + 1 ) {  $ ~~if ( a > 1 )  $ ~~~-- a ;  $ ~~else  $ ~~~-- b ;  $ ~~c ++ ;  $ ~}  $ ~if ( a + b != c ) {  $ ~~cout << "Impossible" << endl ;  $ ~~exit ( 0 ) ;  $ ~}  $ ~printSt ( a ) ;  $ ~cout << "+" ;  $ ~printSt ( b ) ;  $ ~cout << "=" ;  $ ~printSt ( c ) ;  $ ~cout << endl ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~long long x1 , y1 , x2 , y2 ;  $ ~int n ;  $ ~int cont = 0 ;  $ ~cin >> x1 >> y1 >> x2 >> y2 ;  $ ~cin >> n ;  $ ~for ( int i = 0 ; i < n ; i ++ ) {  $ ~~long long a , b , c ;  $ ~~cin >> a >> b >> c ;  $ ~~if ( ( ( x1 * a + y1 * b + c ) > 0 ) && ( ( x2 * a + y2 * b + c ) < 0 ) ) { cont ++ ; }  $ ~~if ( ( ( x1 * a + y1 * b + c ) < 0 ) && ( ( x2 * a + y2 * b + c ) > 0 ) ) { cont ++ ; }  $ ~}  $ ~cout << cont << endl ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~long long t1 , t2 , x1 , x2 , t0 , res_x , res_y ;  $ ~cin >> t1 >> t2 >> x1 >> x2 >> t0 ;  $ ~double t , ct = 1e99 ;  $ ~while ( x1 >= 0 && x2 >= 0 ) {  $ ~~t = ( t1 * x1 + t2 * x2 * 1.0 ) / ( x1 + x2 ) ;  $ ~~if ( t < t0 ) {  $ ~~~x1 -- ;  $ ~~~continue ;  $ ~~}  $ ~~if ( t < ct ) {  $ ~~~ct = t ;  $ ~~~res_x = x1 ;  $ ~~~res_y = x2 ;  $ ~~}  $ ~~x2 -- ;  $ ~}  $ ~cout << res_x << ' ' << res_y << endl ;  $ }
int main ( ) {  $ ~long long n , t = 0 , z = 1 , l = 1 ;  $ ~cin >> n ;  $ ~char x , m ;  $ ~for ( long long i = 0 ; i < n ; i ++ ) {  $ ~~cin >> m ;  $ ~~if ( t == 0 ) {  $ ~~~if ( m == '?' ) { z = 2 ; }  $ ~~~t ++ ;  $ ~~~x = m ;  $ ~~} else if ( m == x && m != '?' ) {  $ ~~~cout << "No" << endl ;  $ ~~~l = 0 ;  $ ~~~z = 2 ;  $ ~~~break ;  $ ~~} else if ( m == '?' && m == x && z != 2 ) {  $ ~~~z = 2 ;  $ ~~} else if ( m == '?' && z != 2 && ( i + 1 ) == n ) {  $ ~~~z = 2 ;  $ ~~}  $ ~~if ( m == '?' && m != x && z != 2 && ( i + 1 ) != n ) {  $ ~~~cin >> m ;  $ ~~~i ++ ;  $ ~~~if ( x == m || m == '?' ) { z = 2 ; }  $ ~~}  $ ~~x = m ;  $ ~}  $ ~if ( l != 0 && z == 2 ) { cout << "Yes" << endl ; }  $ ~if ( z == 1 ) { cout << "No" << endl ; }  $ }
int main ( ) {  $ ~int n , s , x , y , ans = - 1 ;  $ ~cin >> n >> s ;  $ ~for ( int i = 0 ; i < n ; i ++ ) {  $ ~~cin >> x >> y ;  $ ~~if ( s * 100 >= x * 100 + y ) ans = max ( ans , ( 100 - y ) % 100 ) ;  $ ~}  $ ~cout << ans << endl ;  $ ~return 0 ;  $ }
bool cek ( int x ) {  $ ~int ada = 0 ;  $ ~for ( int i = 1 ; i <= sqrt ( x ) ; i ++ ) {  $ ~~if ( x % i == 0 ) { ada += 1 ; }  $ ~}  $ ~if ( ada == 1 ) {  $ ~~return 0 ;  $ ~} else  $ ~~return 1 ;  $ }  $ int main ( ) {  $ ~int n ;  $ ~cin >> n ;  $ ~for ( int i = 1 ; i <= 1000 ; i ++ ) {  $ ~~int x = ( i * n ) ;  $ ~~x += 1 ;  $ ~~if ( cek ( x ) ) {  $ ~~~cout << i << endl ;  $ ~~~return 0 ;  $ ~~}  $ ~}  $ }
long long x , y ;  $ long long exgcd ( long long a , long long b ) {  $ ~if ( b == 0 ) {  $ ~~x = 1 ;  $ ~~y = 0 ;  $ ~~return a ;  $ ~}  $ ~long long d = exgcd ( b , a % b ) ;  $ ~long long t = x ;  $ ~x = y ;  $ ~y = t - a / b * y ;  $ ~return d ;  $ }  $ int main ( ) {  $ ~long long m , h1 , a1 , x1 , y1 , h2 , a2 , x2 , y2 ;  $ ~long long p1 , p2 , q1 , q2 ;  $ ~while ( cin >> m >> h1 >> a1 >> x1 >> y1 >> h2 >> a2 >> x2 >> y2 ) {  $ ~~p1 = p2 = q1 = q2 = 0 ;  $ ~~for ( long long i = 1 ; i <= 2 * m ; i ++ ) {  $ ~~~h1 = ( h1 * x1 + y1 ) % m ;  $ ~~~if ( h1 == a1 ) {  $ ~~~~if ( p1 == 0 )  $ ~~~~~p1 = i ;  $ ~~~~else if ( q1 == 0 ) {  $ ~~~~~q1 = i - p1 ;  $ ~~~~~break ;  $ ~~~~}  $ ~~~}  $ ~~}  $ ~~for ( long long i = 1 ; i <= 2 * m ; i ++ ) {  $ ~~~h2 = ( h2 * x2 + y2 ) % m ;  $ ~~~if ( h2 == a2 ) {  $ ~~~~if ( p2 == 0 )  $ ~~~~~p2 = i ;  $ ~~~~else if ( q2 == 0 ) {  $ ~~~~~q2 = i - p2 ;  $ ~~~~~break ;  $ ~~~~}  $ ~~~}  $ ~~}  $ ~~long long d = exgcd ( q1 , - q2 ) ;  $ ~~long long c = p2 - p1 ;  $ ~~if ( d == 0 ) {  $ ~~~puts ( "-1" ) ;  $ ~~~continue ;  $ ~~}  $ ~~if ( c % d ) {  $ ~~~puts ( "-1" ) ;  $ ~~~continue ;  $ ~~}  $ ~~if ( p1 == 0 || p2 == 0 ) {  $ ~~~puts ( "-1" ) ;  $ ~~~continue ;  $ ~~}  $ ~~if ( q2 == 0 && q1 == 0 && p1 != p2 ) {  $ ~~~puts ( "-1" ) ;  $ ~~~continue ;  $ ~~}  $ ~~if ( ( q2 == 0 && p2 - p1 < 0 ) || ( q1 == 0 && p1 - p2 < 0 ) ) {  $ ~~~puts ( "-1" ) ;  $ ~~~continue ;  $ ~~}  $ ~~long long k = c / d ;  $ ~~x *= k ;  $ ~~y *= k ;  $ ~~if ( d < 0 ) d = - d ;  $ ~~if ( x < 0 || y < 0 ) {  $ ~~~while ( 1 ) {  $ ~~~~x += q2 / d ;  $ ~~~~y += q1 / d ;  $ ~~~~if ( x >= 0 && y >= 0 ) break ;  $ ~~~}  $ ~~}  $ ~~if ( x > 0 && y > 0 ) {  $ ~~~while ( 1 ) {  $ ~~~~x -= q2 / d ;  $ ~~~~y -= q1 / d ;  $ ~~~~if ( x < 0 || y < 0 ) break ;  $ ~~~}  $ ~~~x += q2 / d ;  $ ~~~y += q1 / d ;  $ ~~}  $ ~~long long ans = x * q1 + p1 ;  $ ~~cout << ans << endl ;  $ ~}  $ ~return 0 ;  $ }
long long const MOD = 1e9 + 9 LL ;  $ string s ;  $ long long n , a , b , k ;  $ long long MODULUS ( long long b , long long p ) {  $ ~long long ret = 1 LL ;  $ ~while ( p ) {  $ ~~if ( p & 1 LL ) ret = ( ret * b ) % MOD ;  $ ~~b = ( b * b ) % MOD ;  $ ~~p >> = 1 LL ;  $ ~}  $ ~return ret ;  $ }  $ long long MODINVERSE ( long long x ) {  $ ~return MODULUS ( x , MOD - 2 LL ) ;  $ }  $ long long Add ( long long x , long long y ) {  $ ~x += y ;  $ ~if ( x > MOD ) return x - MOD ;  $ ~return x ;  $ }  $ long long Sub ( long long x , long long y ) {  $ ~x -= y ;  $ ~if ( x < 0 ) return x + MOD ;  $ ~return x ;  $ }  $ long long Mul ( long long x , long long y ) {  $ ~x *= y ;  $ ~return x % MOD ;  $ }  $ long long Div ( long long x , long long y ) {  $ ~return ( x * MODINVERSE ( y ) ) % MOD ;  $ }  $ int main ( ) {  $ ~cin >> n >> a >> b >> k >> s ;  $ ~long long ans = 0 LL ;  $ ~long long x = Div ( b , a ) ;  $ ~long long c = MODULUS ( a , n ) ;  $ ~for ( int i = 0 ; i < k ; i += 1 ) {  $ ~~if ( s [ i ] == '+' ) {  $ ~~~ans = Add ( ans , c ) ;  $ ~~} else {  $ ~~~ans = Sub ( ans , c ) ;  $ ~~}  $ ~~c = Mul ( c , x ) ;  $ ~}  $ ~if ( ans < 0 ) ans += MOD ;  $ ~x = MODULUS ( x , k ) ;  $ ~if ( x == 1 ) {  $ ~~ans = Mul ( ans , ( n + 1 ) / k ) ;  $ ~} else {  $ ~~ans = Mul ( ans , Sub ( MODULUS ( x , ( n + 1 ) / k ) , 1 ) ) ;  $ ~~ans = Div ( ans , Sub ( x , 1 ) ) ;  $ ~}  $ ~cout << ans % MOD << '\n' ;  $ ~return 0 ;  $ }
int mem [ 6000 ] [ 6000 ] ;  $ string s , t ;  $ int f ( int i , int j ) {  $ ~if ( i == s . length ( ) || j == t . length ( ) ) return 0 ;  $ ~if ( mem [ i ] [ j ] != - 1 ) return mem [ i ] [ j ] ;  $ ~if ( s [ i ] == t [ j ] )  $ ~~mem [ i ] [ j ] = ( f ( i + 1 , j + 1 ) + f ( i , j + 1 ) + 1 ) % 1000000007 ;  $ ~else  $ ~~mem [ i ] [ j ] = f ( i , j + 1 ) ;  $ ~return mem [ i ] [ j ] ;  $ }  $ int main ( ) {  $ ~cin >> s >> t ;  $ ~memset ( mem , - 1 , sizeof ( mem ) ) ;  $ ~int ans = 0 ;  $ ~for ( int i = 0 ; i < s . length ( ) ; i ++ ) ans = ( ans + f ( i , 0 ) ) % 1000000007 ;  $ ~cout << ans << endl ;  $ }
const int N = 0 , INF = 0 , MOD = 0 ;  $ int n , L , a , t , l , last = 0 ;  $ long long ans ;  $ int main ( ) {  $ ~cin >> n >> L >> a ;  $ ~for ( int i = 0 ; i < n ; i ++ ) {  $ ~~cin >> t >> l ;  $ ~~ans += max ( 0 , ( t - last ) / a ) ;  $ ~~last = t + l ;  $ ~}  $ ~ans += max ( 0 , ( L - last ) / a ) ;  $ ~cout << ans << endl ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~long long int a ;  $ ~cin >> a ;  $ ~if ( a == 0 )  $ ~~cout << "1" << endl ;  $ ~else if ( a % 4 == 0 )  $ ~~cout << "6" << endl ;  $ ~else if ( a % 4 == 1 )  $ ~~cout << "8" << endl ;  $ ~else if ( a % 4 == 2 )  $ ~~cout << "4" << endl ;  $ ~else {  $ ~~cout << "2" << endl ;  $ ~}  $ ~return 0 ;  $ }
int flag , gender , ok , t , cnt ;  $ string s ;  $ string x [ 6 ] = { "lios" , "liala" , "etr" , "etra" , "initis" , "inites" } ;  $ int cmp ( string a , string b ) {  $ ~int len1 = a . size ( ) , len2 = b . size ( ) ;  $ ~for ( int i = 0 ; i < len2 ; i ++ ) {  $ ~~if ( a [ len1 - len2 + i ] != b [ i ] ) return 0 ;  $ ~}  $ ~return 1 ;  $ }  $ int main ( ) {  $ ~gender = 3 ;  $ ~while ( cin >> s ) {  $ ~~ok = 0 ;  $ ~~for ( int i = 0 ; i < 6 ; i ++ ) {  $ ~~~if ( cmp ( s , x [ i ] ) ) {  $ ~~~~ok = 1 ;  $ ~~~~cnt ++ ;  $ ~~~~if ( gender == 3 )  $ ~~~~~gender = i % 2 ;  $ ~~~~else if ( i % 2 != gender ) {  $ ~~~~~cout << "NO" << endl ;  $ ~~~~~return 0 ;  $ ~~~~}  $ ~~~~t = i / 2 + 1 ;  $ ~~~~if ( t == 1 && flag == 0 )  $ ~~~~~flag = 1 ;  $ ~~~~else if ( t == 1 && flag == 1 )  $ ~~~~~flag = 1 ;  $ ~~~~else if ( t == 2 && flag == 1 )  $ ~~~~~flag = 2 ;  $ ~~~~else if ( t == 2 && flag == 0 )  $ ~~~~~flag = 2 ;  $ ~~~~else if ( t == 3 && flag == 0 )  $ ~~~~~flag = - 1 ;  $ ~~~~else if ( t == 3 && flag == 2 )  $ ~~~~~flag = 3 ;  $ ~~~~else if ( t == 3 && flag == 3 )  $ ~~~~~flag = 3 ;  $ ~~~~else {  $ ~~~~~cout << "NO" << endl ;  $ ~~~~~return 0 ;  $ ~~~~}  $ ~~~}  $ ~~}  $ ~~if ( ok == 0 ) {  $ ~~~cout << "NO" << endl ;  $ ~~~return 0 ;  $ ~~}  $ ~~if ( cin . get ( ) == '\n' ) break ;  $ ~}  $ ~if ( flag == 1 && cnt > 1 )  $ ~~cout << "NO" << endl ;  $ ~else  $ ~~cout << "YES" << endl ;  $ ~return 0 ;  $ }
int p = 1 , n , k , s [ 105 ] ;  $ char c ;  $ int main ( ) {  $ ~s [ k ++ ] = 1 ;  $ ~while ( cin >> c && c != '=' ) {  $ ~~if ( c == '+' ) p ++ , s [ k ++ ] = 1 ;  $ ~~if ( c == '-' ) p -- , s [ k ++ ] = - 1 ;  $ ~}  $ ~cin >> n ;  $ ~for ( int i = 0 ; i < k ; i ++ ) {  $ ~~if ( s [ i ] > 0 )  $ ~~~while ( p < n && s [ i ] < n ) s [ i ] ++ , p ++ ;  $ ~~else  $ ~~~while ( p > n && s [ i ] > - n ) s [ i ] -- , p -- ;  $ ~}  $ ~if ( p != n ) {  $ ~~cout << "Impossible" << endl ;  $ ~~return 0 ;  $ ~}  $ ~cout << "Possible" << endl ;  $ ~for ( int i = 0 ; i < k ; i ++ ) cout << ( i ? ( s [ i ] < 0 ? "- " : "+ " ) : "" ) << abs ( s [ i ] ) << " " ;  $ ~cout << "= " << n << endl ;  $ }
int n , a , b , c , d , sum , l1 , l2 ;  $ int main ( ) {  $ ~cin >> n >> a >> b >> c >> d ;  $ ~if ( a == 0 )  $ ~~l1 = b ;  $ ~else if ( a == n )  $ ~~l1 = 3 * n - b ;  $ ~else if ( b == 0 )  $ ~~l1 = 4 * n - a ;  $ ~else if ( b == n )  $ ~~l1 = n + a ;  $ ~if ( c == 0 )  $ ~~l2 = d ;  $ ~else if ( c == n )  $ ~~l2 = 3 * n - d ;  $ ~else if ( d == 0 )  $ ~~l2 = 4 * n - c ;  $ ~else if ( d == n )  $ ~~l2 = n + c ;  $ ~cout << min ( abs ( l1 - l2 ) , 4 * n - abs ( l1 - l2 ) ) << endl ;  $ }
const long long mod = 1e9 + 9 ;  $ long long mod_pow ( long long x , long long n ) {  $ ~long long res = 1 ;  $ ~while ( n > 0 ) {  $ ~~if ( n & 1 ) res = res * x % mod ;  $ ~~x = x * x % mod ;  $ ~~n >> = 1 ;  $ ~}  $ ~return res ;  $ }  $ long long extgcd ( long long a , long long b , long long & x , long long & y ) {  $ ~long long d = a ;  $ ~if ( b != 0 ) {  $ ~~d = extgcd ( b , a % b , y , x ) ;  $ ~~y -= ( a / b ) * x ;  $ ~} else {  $ ~~x = 1 ;  $ ~~y = 0 ;  $ ~}  $ ~return d ;  $ }  $ long long mod_inverse ( long long a ) {  $ ~long long x , y , m ;  $ ~m = mod ;  $ ~extgcd ( a , m , x , y ) ;  $ ~return ( m + x % m ) % m ;  $ }  $ int main ( ) {  $ ~long long n , a , b , k , ans , temp , rec , q ;  $ ~string s ;  $ ~cin >> n >> a >> b >> k ;  $ ~cin >> s ;  $ ~ans = 0 ;  $ ~for ( int i = 0 ; i < k ; i ++ ) {  $ ~~temp = ( mod_pow ( a , n - i ) * mod_pow ( b , i ) ) % mod ;  $ ~~if ( s [ i ] == '+' )  $ ~~~ans = ( ans + temp ) % mod ;  $ ~~else  $ ~~~ans = ( ans - temp ) % mod ;  $ ~~if ( ans < 0 ) ans += mod ;  $ ~}  $ ~if ( n + 1 == k ) {  $ ~~cout << ans << endl ;  $ ~~return 0 ;  $ ~}  $ ~rec = ( n + 1 ) / k ;  $ ~q = mod_pow ( ( mod_inverse ( a ) * b ) % mod , k ) % mod ;  $ ~if ( q == 1 )  $ ~~ans = ( ans * rec ) % mod ;  $ ~else  $ ~~ans = ( ( ans * ( mod_pow ( q , rec ) - 1 ) % mod ) * mod_inverse ( q - 1 ) ) % mod ;  $ ~cout << ans << endl ;  $ ~return 0 ;  $ }
long long gcd ( long long a , long long b ) {  $ ~return b == 0 ? a : gcd ( b , a % b ) ;  $ }  $ long long lcm ( long long a , long long b ) {  $ ~return a * ( b / gcd ( a , b ) ) ;  $ }  $ const int q = 1e9 + 7 ;  $ long long ans = 0 ;  $ vector < int > v ;  $ int main ( ) {  $ ~long long n , f , iv , l ;  $ ~cin >> n >> f >> iv >> l ;  $ ~l += iv ;  $ ~ans = l / f ;  $ ~if ( l % f ) ans ++ ;  $ ~if ( ans * f > n )  $ ~~cout << - 1 << '\n' ;  $ ~else  $ ~~cout << ans << '\n' ;  $ ~return 0 ;  $ }
const int MAXN = 1001 ;  $ const int INF = 1e6 + 1 ;  $ int in [ MAXN ] ;  $ int out [ MAXN ] ;  $ int d [ MAXN ] ;  $ int n , m ;  $ int main ( ) {  $ ~cin >> n >> m ;  $ ~for ( int i = 0 ; i < n ; i ++ ) { out [ i ] = - 1 ; }  $ ~for ( int i = 0 ; i < m ; i ++ ) {  $ ~~int a , b , c ;  $ ~~cin >> a >> b >> c ;  $ ~~a -- ;  $ ~~b -- ;  $ ~~in [ b ] ++ ;  $ ~~out [ a ] = b ;  $ ~~d [ a ] = c ;  $ ~}  $ ~vector < int > r1 , r2 , r3 ;  $ ~for ( int i = 0 ; i < n ; i ++ ) {  $ ~~if ( in [ i ] == 0 && out [ i ] != - 1 ) {  $ ~~~int j = i ;  $ ~~~int res = INF ;  $ ~~~while ( out [ j ] != - 1 ) {  $ ~~~~res = min ( res , d [ j ] ) ;  $ ~~~~j = out [ j ] ;  $ ~~~}  $ ~~~r1 . push_back ( i + 1 ) ;  $ ~~~r2 . push_back ( j + 1 ) ;  $ ~~~r3 . push_back ( res ) ;  $ ~~}  $ ~}  $ ~cout << r1 . size ( ) << endl ;  $ ~for ( int i = 0 ; i < r1 . size ( ) ; i ++ ) { cout << r1 [ i ] << " " << r2 [ i ] << " " << r3 [ i ] << endl ; }  $ ~return 0 ;  $ }
long long dp [ 5000 ] ;  $ map < long long , long long > m ;  $ int main ( ) {  $ ~long long n ;  $ ~cin >> n ;  $ ~string s ;  $ ~cin >> s ;  $ ~long long cnt = 0 ;  $ ~for ( int i = 0 ; i < s . size ( ) ; i ++ ) {  $ ~~if ( i != 0 )  $ ~~~dp [ i + 1 ] = dp [ i ] + ( s [ i ] - '0' ) ;  $ ~~else  $ ~~~dp [ i + 1 ] = s [ i ] - '0' ;  $ ~}  $ ~for ( int i = 1 ; i <= s . size ( ) ; i ++ ) {  $ ~~for ( int j = 1 ; j <= i ; j ++ ) {  $ ~~~m [ dp [ i ] - dp [ j - 1 ] ] ++ ;  $ ~~~cnt ++ ;  $ ~~}  $ ~}  $ ~if ( n == 0 ) {  $ ~~long long ans2 = m [ 0 ] * 2 * cnt - m [ 0 ] * m [ 0 ] ;  $ ~~cout << ans2 << endl ;  $ ~~return 0 ;  $ ~}  $ ~long long ans = 0 ;  $ ~for ( int i = 1 ; i <= sqrt ( n ) ; i ++ ) {  $ ~~if ( n % i == 0 && ! ( i == sqrt ( n ) ) ) {  $ ~~~ans += 2 * ( m [ i ] * m [ n / i ] ) ;  $ ~~} else if ( i == sqrt ( n ) ) {  $ ~~~ans += ( m [ i ] * m [ n / i ] ) ;  $ ~~}  $ ~}  $ ~cout << ans << endl ;  $ ~return 0 ;  $ }
const int MX = 100005 ;  $ int n ;  $ pair < int , int > a [ MX ] ;  $ int main ( ) {  $ ~cin >> n ;  $ ~for ( int i = 0 ; i < n ; i ++ ) cin >> a [ i ] . first >> a [ i ] . second ;  $ ~sort ( a , a + n ) ;  $ ~int i = 0 , j = 0 , acu = 0 ;  $ ~while ( i < n ) {  $ ~~j = a [ i ] . first ;  $ ~~acu = max ( acu , a [ i ] . second ) ;  $ ~~while ( acu > 1 && ( i + 1 == n || j < a [ i + 1 ] . first ) ) {  $ ~~~acu = ( acu + 3 ) / 4 ;  $ ~~~j ++ ;  $ ~~}  $ ~~i ++ ;  $ ~}  $ ~cout << max ( j , a [ n - 1 ] . first + 1 ) << '\n' ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~int n ;  $ ~while ( cin >> n ) {  $ ~~int a [ 110 ] ;  $ ~~int cnt = 0 ;  $ ~~int s [ 110 ] ;  $ ~~memset ( s , 0 , sizeof ( s ) ) ;  $ ~~int m = 0 ;  $ ~~for ( int i = 0 ; i < n ; i ++ ) cin >> a [ i ] ;  $ ~~for ( int i = 0 ; i < n ; i ++ ) {  $ ~~~if ( a [ i ] < 0 ) cnt ++ ;  $ ~~~s [ m ] ++ ;  $ ~~~if ( cnt == 2 && i + 1 < n && a [ i + 1 ] < 0 ) {  $ ~~~~m ++ ;  $ ~~~~cnt = 0 ;  $ ~~~}  $ ~~}  $ ~~cout << m + 1 << endl ;  $ ~~for ( int i = 0 ; i <= m ; i ++ ) {  $ ~~~if ( i ) cout << " " ;  $ ~~~cout << s [ i ] ;  $ ~~}  $ ~~cout << endl ;  $ ~}  $ ~return 0 ;  $ }
char a [ 104 ] ;  $ int n , j , t , e , sum ;  $ int main ( ) {  $ ~gets ( a ) ;  $ ~int l = strlen ( a ) ;  $ ~for ( int i = 0 ; i < l ; i ++ ) {  $ ~~if ( a [ i ] == 'n' ) n ++ ;  $ ~~if ( a [ i ] == 'i' ) j ++ ;  $ ~~if ( a [ i ] == 'e' ) e ++ ;  $ ~~if ( a [ i ] == 't' ) t ++ ;  $ ~}  $ ~sum = min ( min ( min ( t , j ) , e / 3 ) , ( n - 1 ) / 2 ) ;  $ ~cout << sum << endl ;  $ ~return 0 ;  $ }
set < int > s , ss ;  $ int n , p , a , b , d ;  $ pair < int , int > in [ 100005 ] ;  $ int main ( ) {  $ ~cin >> n >> p ;  $ ~for ( int i = 0 ; i < p ; i ++ ) {  $ ~~cin >> a >> b >> d ;  $ ~~in [ a ] = make_pair ( b , d ) , s . insert ( b ) , ss . insert ( a ) ;  $ ~}  $ ~a = 0 ;  $ ~for ( int i = 1 ; i <= n ; i ++ )  $ ~~if ( ! s . count ( i ) && ss . count ( i ) ) a ++ ;  $ ~cout << a << endl ;  $ ~for ( int i = 1 ; i <= n ; i ++ ) {  $ ~~if ( ! s . count ( i ) && ss . count ( i ) ) {  $ ~~~a = i , b = in [ i ] . second ;  $ ~~~while ( in [ a ] . first ) b = min ( b , in [ a ] . second ) , a = in [ a ] . first ;  $ ~~~cout << i << " " << a << " " << b << endl ;  $ ~~}  $ ~}  $ ~return 0 ;  $ }
int a [ 500008 ] , n ;  $ int slove ( int x , int y ) {  $ ~int k = y - x + 1 ;  $ ~int i ;  $ ~if ( k % 2 == 0 ) {  $ ~~for ( i = x ; i < x + k / 2 ; i ++ ) { a [ i ] = a [ x ] ; }  $ ~~for ( i = x + k / 2 ; i <= y ; i ++ ) { a [ i ] = a [ y ] ; }  $ ~} else {  $ ~~for ( i = x + 1 ; i <= y ; i ++ ) { a [ i ] = a [ x ] ; }  $ ~}  $ ~return ( k - 1 ) / 2 ;  $ }  $ int main ( ) {  $ ~int ans , l , r ;  $ ~int i ;  $ ~cin >> n ;  $ ~for ( i = 1 ; i <= n ; i ++ ) { cin >> a [ i ] ; }  $ ~ans = 0 ;  $ ~for ( i = 2 ; i < n ; i ++ ) {  $ ~~if ( a [ i ] != a [ i - 1 ] && a [ i ] != a [ i + 1 ] ) {  $ ~~~l = i - 1 ;  $ ~~~i ++ ;  $ ~~~for ( ; i < n ; i ++ ) {  $ ~~~~if ( a [ i ] != a [ i - 1 ] && a [ i ] != a [ i + 1 ] ) {  $ ~~~~~continue ;  $ ~~~~} else {  $ ~~~~~break ;  $ ~~~~}  $ ~~~}  $ ~~~r = i ;  $ ~~~ans = max ( ans , slove ( l , r ) ) ;  $ ~~~l = 0 ;  $ ~~~r = 0 ;  $ ~~}  $ ~}  $ ~cout << ans << endl ;  $ ~for ( i = 1 ; i < n ; i ++ ) { cout << a [ i ] << " " ; }  $ ~cout << a [ i ] << endl ;  $ }
int main ( ) {  $ ~int x = 0 , y = 0 , xx = 0 , yy = 0 , k = 2 , c = 1 ;  $ ~map < pair < int , int > , int > mp ;  $ ~while ( 1 ) {  $ ~~c ++ ;  $ ~~x = ( x * - 1 ) + 1 ;  $ ~~if ( x == xx )  $ ~~~for ( int i = min ( y , yy ) ; i <= max ( y , yy ) ; i ++ ) mp [ make_pair ( x , i ) ] = c - 2 ;  $ ~~else  $ ~~~for ( int i = min ( x , xx ) ; i <= max ( x , xx ) ; i ++ ) mp [ make_pair ( i , y ) ] = c - 2 ;  $ ~~if ( mp [ make_pair ( x , y ) ] == mp [ make_pair ( xx , yy ) ] ) mp [ make_pair ( xx , yy ) ] -- ;  $ ~~xx = x ;  $ ~~y = ( y * - 1 ) + 1 ;  $ ~~c ++ ;  $ ~~if ( x == xx )  $ ~~~for ( int i = min ( y , yy ) ; i <= max ( y , yy ) ; i ++ ) mp [ make_pair ( x , i ) ] = c - 2 ;  $ ~~else  $ ~~~for ( int i = min ( x , xx ) ; i <= max ( x , xx ) ; i ++ ) mp [ make_pair ( i , y ) ] = c - 2 ;  $ ~~if ( mp [ make_pair ( x , y ) ] == mp [ make_pair ( xx , yy ) ] ) mp [ make_pair ( xx , yy ) ] -- ;  $ ~~yy = y ;  $ ~~x *= - 1 ;  $ ~~c ++ ;  $ ~~if ( x == xx )  $ ~~~for ( int i = min ( y , yy ) ; i <= max ( y , yy ) ; i ++ ) mp [ make_pair ( x , i ) ] = c - 2 ;  $ ~~else  $ ~~~for ( int i = min ( x , xx ) ; i <= max ( x , xx ) ; i ++ ) mp [ make_pair ( i , y ) ] = c - 2 ;  $ ~~if ( mp [ make_pair ( x , y ) ] == mp [ make_pair ( xx , yy ) ] ) mp [ make_pair ( xx , yy ) ] -- ;  $ ~~xx = x ;  $ ~~y *= - 1 ;  $ ~~c ++ ;  $ ~~if ( x == xx )  $ ~~~for ( int i = min ( y , yy ) ; i <= max ( y , yy ) ; i ++ ) mp [ make_pair ( x , i ) ] = c - 2 ;  $ ~~else  $ ~~~for ( int i = min ( x , xx ) ; i <= max ( x , xx ) ; i ++ ) mp [ make_pair ( i , y ) ] = c - 2 ;  $ ~~if ( mp [ make_pair ( x , y ) ] == mp [ make_pair ( xx , yy ) ] ) mp [ make_pair ( xx , yy ) ] -- ;  $ ~~yy = y ;  $ ~~if ( x == - 100 && y == - 100 ) break ;  $ ~}  $ ~mp [ make_pair ( 0 , 0 ) ] = 0 ;  $ ~int a , b ;  $ ~cin >> a >> b ;  $ ~if ( ( a == 0 && b == 0 ) || ( a == 1 && b == 0 ) ) return cout << 0 << '\n' , 0 ;  $ ~if ( mp [ make_pair ( a , b ) ] == 0 )  $ ~~cout << mp [ make_pair ( b , a ) ] + 1 << '\n' ;  $ ~else  $ ~~cout << mp [ make_pair ( a , b ) ] << '\n' ;  $ }
int main ( ) {  $ ~long long i , j = 0 , a [ 1000 ] , b [ 1001 ] , n , l = 0 ;  $ ~cin >> n ;  $ ~for ( i = 0 ; i < n ; i ++ ) { cin >> a [ i ] >> b [ i ] ; }  $ ~for ( i = 0 ; i < n ; i ++ ) {  $ ~~for ( j = 0 ; j < n ; j ++ ) {  $ ~~~if ( j != i && a [ i ] == b [ j ] ) {  $ ~~~~l ++ ;  $ ~~~~break ;  $ ~~~}  $ ~~}  $ ~}  $ ~cout << n - l << endl ;  $ ~return 0 ;  $ }
int n , i ;  $ int main ( ) {  $ ~cin >> n ;  $ ~if ( n & 1 )  $ ~~n = n >> 1 ;  $ ~else {  $ ~~for ( i = 1 ; i <= n ; i << = 1 )  $ ~~~;  $ ~~n = ( n - ( i >> 1 ) ) >> 1 ;  $ ~}  $ ~cout << n << endl ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~int n , m , u = 0 , e = 0 , x = 1 , p = 0 ;  $ ~cin >> n >> m ;  $ ~string s , t ;  $ ~cin >> s >> t ;  $ ~if ( n - 1 > m ) {  $ ~~cout << "NO" << endl ;  $ ~~return 0 ;  $ ~}  $ ~for ( int i = 0 ; i < n ; i ++ ) {  $ ~~if ( s [ i ] != t [ i ] and s [ i ] != '*' ) u ++ ;  $ ~~if ( s [ i ] == '*' ) {  $ ~~~e = i ;  $ ~~~p ++ ;  $ ~~~break ;  $ ~~}  $ ~}  $ ~for ( int i = n - 1 ; i > e ; i -- ) {  $ ~~if ( s [ i ] != t [ m - x ] ) { u ++ ; }  $ ~~x ++ ;  $ ~}  $ ~if ( u >= 1 or n - p > m )  $ ~~cout << "NO" << endl ;  $ ~else if ( n < m and p == 0 )  $ ~~cout << "NO" << endl ;  $ ~else  $ ~~cout << "YES" << endl ;  $ ~return 0 ;  $ }
int connected [ 1005 ] ;  $ int diameter [ 1005 ] ;  $ int in [ 1005 ] ;  $ int out [ 1005 ] ;  $ int main ( ) {  $ ~int n , p ;  $ ~cin >> n >> p ;  $ ~while ( p -- ) {  $ ~~int a , b , d ;  $ ~~cin >> a >> b >> d ;  $ ~~connected [ a ] = b ;  $ ~~diameter [ a ] = d ;  $ ~~in [ b ] ++ ;  $ ~~out [ a ] ++ ;  $ ~}  $ ~int sol = 0 ;  $ ~;  $ ~for ( int i = 1 ; i <= n ; i ++ )  $ ~~if ( ! in [ i ] && out [ i ] ) sol ++ ;  $ ~cout << sol << '\n' ;  $ ~for ( int i = 1 ; i <= n ; i ++ ) {  $ ~~if ( ! in [ i ] && out [ i ] ) {  $ ~~~int id = i ;  $ ~~~int ans = INT_MAX ;  $ ~~~while ( out [ id ] ) {  $ ~~~~ans = min ( ans , diameter [ id ] ) ;  $ ~~~~id = connected [ id ] ;  $ ~~~}  $ ~~~cout << i << ' ' << id << ' ' << ans << '\n' ;  $ ~~}  $ ~}  $ ~return 0 ;  $ }
int arr1 [ 110 ] ;  $ int arr2 [ 110 ] ;  $ int main ( ) {  $ ~int i , j , ind = 0 , count = 0 , n ;  $ ~cin >> n ;  $ ~for ( i = 1 ; i <= n ; ++ i ) cin >> arr1 [ i ] >> arr2 [ i ] ;  $ ~for ( i = 1 ; i <= n ; ++ i ) {  $ ~~ind = 0 ;  $ ~~for ( j = 1 ; j <= n ; ++ j ) {  $ ~~~if ( i != j ) {  $ ~~~~if ( arr2 [ j ] == arr1 [ i ] ) ind = 1 ;  $ ~~~}  $ ~~}  $ ~~if ( ! ind ) count ++ ;  $ ~}  $ ~cout << count << endl ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~long long n , d , x [ 100005 ] , m = 0 ;  $ ~cin >> n >> d ;  $ ~for ( int i = 1 ; i <= n ; i ++ ) cin >> x [ i ] ;  $ ~for ( int i = 1 ; i <= n - 2 ; i ++ ) {  $ ~~long long l = i , r = n + 1 ;  $ ~~while ( r - l > 1 ) {  $ ~~~long long mid = ( l + r ) / 2 ;  $ ~~~if ( x [ mid ] - x [ i ] > d )  $ ~~~~r = mid ;  $ ~~~else  $ ~~~~l = mid ;  $ ~~}  $ ~~m += max ( 0 * 1 ll , ( l - i - 1 ) ) * ( l - i ) / 2 ;  $ ~}  $ ~cout << m << endl ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~int n , m , a , b , ans1 , ans2 ;  $ ~cin >> n >> m >> a >> b ;  $ ~int row1 = ( a - 1 ) / m ;  $ ~int row2 = ( b - 1 ) / m ;  $ ~int col1 = a % m == 0 ? m : a % m ;  $ ~int col2 = b % m == 0 ? m : b % m ;  $ ~if ( row1 == row2 )  $ ~~ans1 = 1 ;  $ ~else if ( row2 - row1 == 1 ) {  $ ~~ans1 = 2 ;  $ ~~if ( col1 == 1 && b == n )  $ ~~~ans1 = 1 ;  $ ~~else if ( col1 == 1 && col2 == m )  $ ~~~ans1 = 1 ;  $ ~} else {  $ ~~ans1 = 3 ;  $ ~~if ( b == n || col2 == m ) -- ans1 ;  $ ~~if ( col1 == 1 ) -- ans1 ;  $ ~}  $ ~ans2 = 3 ;  $ ~if ( col1 - 1 == col2 ) -- ans2 ;  $ ~cout << min ( ans1 , ans2 ) << endl ;  $ ~return 0 ;  $ }
const int INF_INT = 2147483647 ;  $ const long long INF_LL = 9223372036854775807 LL ;  $ const unsigned long long INF_ULL = 18446744073709551615 Ull ;  $ const long long P = 92540646808111039 LL ;  $ const long long maxn = 1e5 + 10 , MOD = 1e9 + 7 ;  $ const int Move [ 4 ] [ 2 ] = { - 1 , 0 , 1 , 0 , 0 , 1 , 0 , - 1 } ;  $ const int Move_ [ 8 ] [ 2 ] = { - 1 , - 1 , - 1 , 0 , - 1 , 1 , 0 , - 1 , 0 , 1 , 1 , - 1 , 1 , 0 , 1 , 1 } ;  $ inline int read ( ) {  $ ~int x = 0 , f = 1 ;  $ ~char ch = getchar ( ) ;  $ ~while ( ch < '0' || ch > '9' ) {  $ ~~if ( ch == '-' ) f = - 1 ;  $ ~~ch = getchar ( ) ;  $ ~}  $ ~while ( ch >= '0' && ch <= '9' ) {  $ ~~x = x * 10 + ch - '0' ;  $ ~~ch = getchar ( ) ;  $ ~}  $ ~return x * f ;  $ }  $ void init ( ) { }  $ int main ( ) {  $ ~init ( ) ;  $ ~long long n , a , b , c ;  $ ~cin >> n >> a >> b >> c ;  $ ~if ( n < b ) {  $ ~~cout << n / a << endl ;  $ ~~return 0 ;  $ ~}  $ ~if ( a <= b - c ) {  $ ~~if ( n % a >= b ) {  $ ~~~cout << ( n / a ) + 1 + ( ( n % a ) - b ) / ( b - c ) << endl ;  $ ~~~return 0 ;  $ ~~} else  $ ~~~cout << ( n / a ) << endl ;  $ ~~return 0 ;  $ ~} else {  $ ~~long long t = 1 + ( n - b ) / ( b - c ) ;  $ ~~n -= t * ( b - c ) ;  $ ~~cout << t + n / a << endl ;  $ ~}  $ ~return 0 ;  $ }
bool rh ( float [ ] ) ;  $ bool zero2 ( float [ ] ) ;  $ int main ( ) {  $ ~int i = 0 ;  $ ~float A [ 6 ] ;  $ ~for ( int i = 0 ; i < 6 ; i ++ ) cin >> A [ i ] ;  $ ~if ( A [ 2 ] == 0 && A [ 3 ] != 0 )  $ ~~cout << "Ron" << endl ;  $ ~else if ( rh ( A ) )  $ ~~cout << "Hermione" << endl ;  $ ~else if ( A [ 0 ] == 0 && A [ 1 ] != 0 )  $ ~~cout << "Ron" << endl ;  $ ~else {  $ ~~A [ 3 ] = A [ 3 ] / ( A [ 2 ] / A [ 1 ] ) ;  $ ~~A [ 5 ] = A [ 5 ] / ( A [ 4 ] / A [ 3 ] ) ;  $ ~~if ( A [ 5 ] > A [ 0 ] )  $ ~~~cout << "Ron" << endl ;  $ ~~else  $ ~~~cout << "Hermione" << endl ;  $ ~}  $ }  $ bool rh ( float A [ ] ) {  $ ~if ( A [ 2 ] != 0 && A [ 3 ] == 0 )  $ ~~return true ;  $ ~else if ( zero2 ( A ) )  $ ~~return true ;  $ ~return false ;  $ }  $ bool zero2 ( float A [ ] ) {  $ ~for ( int i = 0 ; i < 4 ; i ++ )  $ ~~if ( A [ i ] == 0 && A [ i + 1 ] == 0 ) return true ;  $ ~return false ;  $ }
int getPoint ( int x , int y , int n ) {  $ ~if ( y == 0 ) {  $ ~~return x ;  $ ~} else if ( x == n ) {  $ ~~return x + y ;  $ ~} else if ( y == n ) {  $ ~~return 3 * n - x ;  $ ~} else {  $ ~~return 4 * n - y ;  $ ~}  $ }  $ int main ( ) {  $ ~int n , a , b , c , d ;  $ ~cin >> n >> a >> b >> c >> d ;  $ ~int p1 = getPoint ( a , b , n ) , p2 = getPoint ( c , d , n ) ;  $ ~cout << min ( ( p1 - p2 + 4 * n ) % ( 4 * n ) , ( p2 - p1 + 4 * n ) % ( 4 * n ) ) << endl ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~int x , y , ans = 0 ;  $ ~cin >> x >> y ;  $ ~int p ;  $ ~p = max ( abs ( x ) , abs ( y ) ) ;  $ ~if ( x == p && x > 0 && x + y > 1 ) {  $ ~~ans = -- p ;  $ ~~ans *= 4 ;  $ ~~++ ans ;  $ ~} else if ( y == p && y > 0 && y - x > 0 ) {  $ ~~ans = p ;  $ ~~ans *= 4 ;  $ ~~ans -= 2 ;  $ ~} else if ( x == ( - 1 * p ) && x < 0 && x + y < 0 ) {  $ ~~ans = p ;  $ ~~ans *= 4 ;  $ ~~-- ans ;  $ ~} else {  $ ~~if ( x + y == 1 ) {  $ ~~~x -- ;  $ ~~~ans = x ;  $ ~~~ans *= 4 ;  $ ~~} else {  $ ~~~ans = p ;  $ ~~~ans *= 4 ;  $ ~~}  $ ~}  $ ~if ( x == 0 && y == 0 ) ans = 0 ;  $ ~ans = max ( ans , 0 ) ;  $ ~cout << ans << endl ;  $ }
int num [ 110 ] = { 0 } ;  $ int main ( ) {  $ ~int n ;  $ ~cin >> n ;  $ ~for ( int i = 1 ; i <= n ; i ++ ) cin >> num [ i ] ;  $ ~vector < int > p ;  $ ~int a = 0 , b = 0 , c = 0 ;  $ ~for ( int i = 1 ; i <= n ; i ++ ) {  $ ~~if ( i == n ) {  $ ~~~if ( num [ i ] >= 0 ) {  $ ~~~~a ++ ;  $ ~~~~b ++ ;  $ ~~~~p . push_back ( b ) ;  $ ~~~} else {  $ ~~~~if ( c == 2 ) {  $ ~~~~~a += 2 ;  $ ~~~~~p . push_back ( b ) ;  $ ~~~~~p . push_back ( 1 ) ;  $ ~~~~} else {  $ ~~~~~a ++ ;  $ ~~~~~p . push_back ( b + 1 ) ;  $ ~~~~}  $ ~~~}  $ ~~} else {  $ ~~~if ( num [ i ] >= 0 ) b ++ ;  $ ~~~if ( num [ i ] < 0 ) {  $ ~~~~if ( c == 2 ) {  $ ~~~~~a ++ ;  $ ~~~~~p . push_back ( b ) ;  $ ~~~~~b = 1 ;  $ ~~~~~c = 1 ;  $ ~~~~} else {  $ ~~~~~c ++ ;  $ ~~~~~b ++ ;  $ ~~~~}  $ ~~~}  $ ~~}  $ ~}  $ ~cout << a << endl ;  $ ~for ( int i = 0 ; i < p . size ( ) ; i ++ ) {  $ ~~if ( ! i )  $ ~~~cout << p [ i ] ;  $ ~~else  $ ~~~cout << " " << p [ i ] ;  $ ~}  $ ~cout << endl ;  $ }
string S [ 4 ] ;  $ int I , J , K ;  $ int jarak ( int x , int y ) {  $ ~if ( y > x )  $ ~~return y - x ;  $ ~else  $ ~~return ( y + 12 ) - x ;  $ }  $ int main ( ) {  $ ~map < string , int > A ;  $ ~A [ "C" ] = 1 ;  $ ~A [ "C#" ] = 2 ;  $ ~A [ "D" ] = 3 ;  $ ~A [ "D#" ] = 4 ;  $ ~A [ "E" ] = 5 ;  $ ~A [ "F" ] = 6 ;  $ ~A [ "F#" ] = 7 ;  $ ~A [ "G" ] = 8 ;  $ ~A [ "G#" ] = 9 ;  $ ~A [ "A" ] = 10 ;  $ ~A [ "B" ] = 11 ;  $ ~A [ "H" ] = 12 ;  $ ~cin >> S [ 1 ] >> S [ 2 ] >> S [ 3 ] ;  $ ~for ( int i = 1 ; i <= 3 ; i ++ )  $ ~~for ( int j = 1 ; j <= 3 ; j ++ )  $ ~~~for ( int k = 1 ; k <= 3 ; k ++ )  $ ~~~~if ( i != j && i != k && j != k ) {  $ ~~~~~I = A [ S [ i ] ] ;  $ ~~~~~J = A [ S [ j ] ] ;  $ ~~~~~K = A [ S [ k ] ] ;  $ ~~~~~if ( jarak ( I , K ) == 7 ) {  $ ~~~~~~if ( jarak ( I , J ) == 4 && jarak ( J , K ) == 3 ) {  $ ~~~~~~~cout << "major" << endl ;  $ ~~~~~~~return 0 ;  $ ~~~~~~} else if ( jarak ( I , J ) == 3 && jarak ( J , K ) == 4 ) {  $ ~~~~~~~cout << "minor" << endl ;  $ ~~~~~~~return 0 ;  $ ~~~~~~}  $ ~~~~~}  $ ~~~~}  $ ~cout << "strange" << endl ;  $ }
int main ( ) {  $ ~int n ;  $ ~cin >> n ;  $ ~int a [ n ] = { } ;  $ ~vector < int > banyakyangmilihini [ 2001 ] ;  $ ~int inilahhasilnya [ n ] = { } ;  $ ~for ( int i = 0 ; i < n ; i ++ ) {  $ ~~cin >> a [ i ] ;  $ ~~banyakyangmilihini [ a [ i ] ] . push_back ( i ) ;  $ ~}  $ ~int i = 1 ;  $ ~for ( int k = 2000 ; k > 0 ; k -- ) {  $ ~~if ( banyakyangmilihini [ k ] . size ( ) > 0 ) {  $ ~~~for ( int m = 0 ; m < banyakyangmilihini [ k ] . size ( ) ; m ++ ) { inilahhasilnya [ banyakyangmilihini [ k ] [ m ] ] = i ; }  $ ~~~i = i + banyakyangmilihini [ k ] . size ( ) ;  $ ~~}  $ ~}  $ ~for ( int k = 0 ; k < n ; k ++ ) {  $ ~~if ( k == 0 ) {  $ ~~~cout << inilahhasilnya [ k ] ;  $ ~~} else {  $ ~~~cout << " " << inilahhasilnya [ k ] ;  $ ~~}  $ ~}  $ ~cout << endl ;  $ }
const int MAX_N = 2000 ;  $ void solve ( ) {  $ ~string s , u ;  $ ~cin >> s >> u ;  $ ~int n = s . size ( ) ;  $ ~int m = u . size ( ) ;  $ ~string mierda = "" ;  $ ~for ( int i = 0 ; i < MAX_N ; i ++ ) mierda += '#' ;  $ ~s = mierda + s + mierda ;  $ ~int answer = m ;  $ ~for ( int i = 0 ; i <= MAX_N + n ; i ++ ) {  $ ~~int temp = 0 ;  $ ~~for ( int j = 0 ; j < m ; j ++ ) {  $ ~~~if ( s [ i + j ] != u [ j ] ) temp ++ ;  $ ~~}  $ ~~answer = min ( answer , temp ) ;  $ ~}  $ ~cout << answer << endl ;  $ }  $ int main ( ) {  $ ~int t ;  $ ~t = 1 ;  $ ~while ( t -- ) solve ( ) ;  $ ~return 0 ;  $ }
const int N = 2e6 + 123 ;  $ const int INF = 1e9 + 123 ;  $ const int MOD = 1e9 + 7 ;  $ const double EPS = 1e-9 ;  $ int a , b , s ;  $ int main ( ) {  $ ~cin >> a >> b >> s ;  $ ~if ( abs ( a ) + abs ( b ) <= s || ( a == 0 && b == 0 ) ) {  $ ~~if ( ( abs ( a ) + abs ( b ) ) % 2 == s % 2 )  $ ~~~cout << "Yes\n" ;  $ ~~else  $ ~~~cout << "No\n" ;  $ ~} else  $ ~~cout << "No\n" ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~int t , s , x ;  $ ~cin >> t >> s >> x ;  $ ~if ( x == t ) {  $ ~~cout << "YES" << endl ;  $ ~~return 0 ;  $ ~}  $ ~if ( x < t ) {  $ ~~cout << "NO" << endl ;  $ ~~return 0 ;  $ ~}  $ ~if ( ( ( ( x - t ) % s == 0 ) || ( ( x - t ) % s == 1 ) ) && x - t >= 0 && x - t != 1 ) {  $ ~~cout << "YES" << endl ;  $ ~} else {  $ ~~cout << "NO" << endl ;  $ ~}  $ ~return 0 ;  $ }
int main ( ) {  $ ~int a , b , c , d , e , f ;  $ ~cin >> a >> b >> c >> d >> e >> f ;  $ ~if ( b * d * f == 0 && a * c * e == 0 ) {  $ ~~if ( c == 0 && d != 0 )  $ ~~~cout << "Ron" << endl ;  $ ~~else if ( a == 0 && b != 0 && d != 0 ) {  $ ~~~cout << "Ron" << endl ;  $ ~~} else  $ ~~~cout << "Hermione" << endl ;  $ ~} else if ( b * d * f <= a * c * e )  $ ~~cout << "Hermione" << endl ;  $ ~else  $ ~~cout << "Ron" << endl ;  $ }
static const int N = 1005 ;  $ int n , m ;  $ int in [ N ] , out [ N ] , nxt [ N ] , p [ N ] ;  $ queue < int > from ;  $ queue < int > to ;  $ queue < int > len ;  $ int main ( ) {  $ ~cin >> n >> m ;  $ ~for ( int i = 1 ; i <= m ; ++ i ) {  $ ~~int a , b , c ;  $ ~~cin >> a >> b >> c ;  $ ~~++ out [ a ] , ++ in [ b ] ;  $ ~~nxt [ a ] = b ;  $ ~~p [ a ] = c ;  $ ~}  $ ~int cnt = 0 ;  $ ~for ( int i = 1 ; i <= n ; ++ i ) {  $ ~~if ( ! in [ i ] && out [ i ] ) {  $ ~~~int now = i , _min = p [ now ] ;  $ ~~~from . push ( now ) ;  $ ~~~for ( ; out [ now ] ; ) {  $ ~~~~_min = min ( _min , p [ now ] ) ;  $ ~~~~now = nxt [ now ] ;  $ ~~~}  $ ~~~++ cnt ;  $ ~~~to . push ( now ) ;  $ ~~~len . push ( _min ) ;  $ ~~}  $ ~}  $ ~cout << cnt << endl ;  $ ~for ( ; ! from . empty ( ) ; ) {  $ ~~cout << from . front ( ) << " " << to . front ( ) << " " << len . front ( ) << endl ;  $ ~~from . pop ( ) , to . pop ( ) , len . pop ( ) ;  $ ~}  $ }
int main ( ) {  $ ~int n , i , j , a [ 2010 ] [ 3 ] , m ;  $ ~cin >> n ;  $ ~for ( i = 0 ; i < n ; i ++ ) {  $ ~~cin >> m ;  $ ~~a [ i ] [ 0 ] = m ;  $ ~~a [ i ] [ 1 ] = i ;  $ ~}  $ ~for ( i = 0 ; i < n ; i ++ ) {  $ ~~for ( j = i + 1 ; j < n ; j ++ ) {  $ ~~~if ( a [ i ] [ 0 ] < a [ j ] [ 0 ] ) {  $ ~~~~int temp = a [ i ] [ 0 ] ;  $ ~~~~a [ i ] [ 0 ] = a [ j ] [ 0 ] ;  $ ~~~~a [ j ] [ 0 ] = temp ;  $ ~~~~temp = a [ i ] [ 1 ] ;  $ ~~~~a [ i ] [ 1 ] = a [ j ] [ 1 ] ;  $ ~~~~a [ j ] [ 1 ] = temp ;  $ ~~~}  $ ~~~if ( a [ i ] [ 0 ] == a [ j ] [ 0 ] ) {  $ ~~~~if ( a [ i ] [ 1 ] > a [ j ] [ 1 ] ) {  $ ~~~~~int temp = a [ i ] [ 0 ] ;  $ ~~~~~a [ i ] [ 0 ] = a [ j ] [ 0 ] ;  $ ~~~~~a [ j ] [ 0 ] = temp ;  $ ~~~~~temp = a [ i ] [ 1 ] ;  $ ~~~~~a [ i ] [ 1 ] = a [ j ] [ 1 ] ;  $ ~~~~~a [ j ] [ 1 ] = temp ;  $ ~~~~}  $ ~~~}  $ ~~}  $ ~}  $ ~a [ 0 ] [ 2 ] = 1 ;  $ ~for ( i = 1 ; i < n ; i ++ ) {  $ ~~if ( a [ i ] [ 0 ] == a [ i - 1 ] [ 0 ] )  $ ~~~a [ i ] [ 2 ] = a [ i - 1 ] [ 2 ] ;  $ ~~else  $ ~~~a [ i ] [ 2 ] = i + 1 ;  $ ~}  $ ~for ( i = 0 ; i < n ; i ++ ) {  $ ~~for ( j = i + 1 ; j < n ; j ++ ) {  $ ~~~if ( a [ i ] [ 1 ] > a [ j ] [ 1 ] ) {  $ ~~~~int temp = a [ i ] [ 1 ] ;  $ ~~~~a [ i ] [ 1 ] = a [ j ] [ 1 ] ;  $ ~~~~a [ j ] [ 1 ] = temp ;  $ ~~~~temp = a [ i ] [ 0 ] ;  $ ~~~~a [ i ] [ 0 ] = a [ j ] [ 0 ] ;  $ ~~~~a [ j ] [ 0 ] = temp ;  $ ~~~~temp = a [ i ] [ 2 ] ;  $ ~~~~a [ i ] [ 2 ] = a [ j ] [ 2 ] ;  $ ~~~~a [ j ] [ 2 ] = temp ;  $ ~~~}  $ ~~}  $ ~}  $ ~cout << a [ 0 ] [ 2 ] ;  $ ~for ( i = 1 ; i < n ; i ++ ) { cout << " " << a [ i ] [ 2 ] ; }  $ ~cout << endl ;  $ ~return 0 ;  $ }
bool f [ 11 ] [ 11 ] = { } ;  $ int main ( ) {  $ ~int n ;  $ ~cin >> n ;  $ ~while ( n > 0 ) {  $ ~~n -- ;  $ ~~string p [ 10 ] = { } ;  $ ~~for ( int i = 0 ; i < 8 ; i ++ ) { cin >> p [ i ] ; }  $ ~~int s = 0 , x1 , y1 , x2 , y2 ;  $ ~~for ( int i = 0 ; i < 8 ; i ++ )  $ ~~~for ( int j = 0 ; j < 8 ; j ++ ) {  $ ~~~~if ( p [ i ] [ j ] == 'K' ) {  $ ~~~~~s ++ ;  $ ~~~~~if ( s == 1 ) {  $ ~~~~~~x1 = j , y1 = i ;  $ ~~~~~} else {  $ ~~~~~~x2 = j ;  $ ~~~~~~y2 = i ;  $ ~~~~~}  $ ~~~~}  $ ~~~}  $ ~~int Y = abs ( y1 - y2 ) ;  $ ~~int X = abs ( x1 - x2 ) ;  $ ~~if ( Y % 4 == 0 && X % 4 == 0 ) {  $ ~~~cout << "YES" ;  $ ~~} else if ( Y % 2 == 0 && X % 2 == 0 ) {  $ ~~~if ( ! Y && ! X )  $ ~~~~cout << "YES" ;  $ ~~~else  $ ~~~~cout << "NO" ;  $ ~~} else  $ ~~~cout << "NO" ;  $ ~~cout << endl ;  $ ~}  $ ~return 0 ;  $ }
int dx [ ] = { 0 , 1 , 0 , - 1 , 1 , 1 , - 1 , - 1 } ;  $ int dy [ ] = { 1 , 0 , - 1 , 0 , 1 , - 1 , 1 , - 1 } ;  $ void fast ( ) { }  $ int main ( ) {  $ ~fast ( ) ;  $ ~int n , m ;  $ ~cin >> n >> m ;  $ ~while ( n ) {  $ ~~for ( char c = 'a' ; c <= ( 'a' + m - 1 ) && n ; c ++ ) cout << c , n -- ;  $ ~}  $ ~cout << "\n" ;  $ }
int main ( ) {  $ ~long long int n , i ;  $ ~cin >> n ;  $ ~if ( n <= 3 )  $ ~~cout << "NO\n" ;  $ ~else {  $ ~~cout << "YES\n" ;  $ ~~if ( n % 2 == 0 ) {  $ ~~~cout << "1 * 2 = 2\n2 * 3 = 6\n6 * 4 = 24\n" ;  $ ~~~for ( i = 5 ; i <= n ; i += 2 ) cout << i + 1 << " - " << i << " = 1\n1 * 24 = 24\n" ;  $ ~~} else {  $ ~~~cout << "2 - 1 = 1\n1 + 3 = 4\n4 * 5 = 20\n20 + 4 = 24\n" ;  $ ~~~for ( i = 6 ; i <= n ; i += 2 ) cout << i + 1 << " - " << i << " = 1\n1 * 24 = 24\n" ;  $ ~~}  $ ~}  $ ~return 0 ;  $ }
long long int t , s , x ;  $ int main ( ) {  $ ~cin >> t >> s >> x ;  $ ~if ( t == x ) {  $ ~~cout << "YES"  $ ~~~<< "\n" ;  $ ~~return 0 ;  $ ~}  $ ~if ( t == x - 1 ) {  $ ~~cout << "NO"  $ ~~~<< "\n" ;  $ ~~return 0 ;  $ ~}  $ ~long long int l = 0 , r = x , m ;  $ ~while ( l <= r ) {  $ ~~m = ( l + r ) / 2 ;  $ ~~long long int a = t + s * m ;  $ ~~if ( a == x || a + 1 == x ) {  $ ~~~cout << "YES"  $ ~~~~<< "\n" ;  $ ~~~return 0 ;  $ ~~}  $ ~~if ( a > x ) {  $ ~~~r = m - 1 ;  $ ~~} else {  $ ~~~l = m + 1 ;  $ ~~}  $ ~}  $ ~cout << "NO"  $ ~~<< "\n" ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~long long a , b ;  $ ~while ( cin >> a >> b ) {  $ ~~string s ;  $ ~~long long x = 0 , y = 0 ;  $ ~~cin >> s ;  $ ~~long long i ;  $ ~~for ( i = 0 ; i < s . size ( ) ; i ++ ) {  $ ~~~if ( x == a && y == b ) break ;  $ ~~~if ( s [ i ] == 'L' ) x -= 1 ;  $ ~~~if ( s [ i ] == 'R' ) x += 1 ;  $ ~~~if ( s [ i ] == 'U' ) y += 1 ;  $ ~~~if ( s [ i ] == 'D' ) y -= 1 ;  $ ~~}  $ ~~long long j ;  $ ~~if ( i == s . size ( ) ) {  $ ~~~for ( j = 0 ; j < s . size ( ) ; j ++ ) {  $ ~~~~if ( s [ j ] == 'L' ) a += 1 ;  $ ~~~~if ( s [ j ] == 'R' ) a -= 1 ;  $ ~~~~if ( s [ j ] == 'U' ) b -= 1 ;  $ ~~~~if ( s [ j ] == 'D' ) b += 1 ;  $ ~~~~if ( a == 0 && b == 0 ) break ;  $ ~~~~long long da = abs ( a ) ;  $ ~~~~long long db = abs ( b ) ;  $ ~~~~long long dx = abs ( x ) ;  $ ~~~~long long dy = abs ( y ) ;  $ ~~~~if ( ( long long ) a * y == ( long long ) b * x && ( long long ) a * x >= 0 && ( long long ) b * y >= 0 ) {  $ ~~~~~if ( a != 0 && b != 0 ) {  $ ~~~~~~if ( dx != 0 && dy != 0 ) {  $ ~~~~~~~if ( da % dx == 0 && db % dy == 0 ) break ;  $ ~~~~~~}  $ ~~~~~} else if ( a != 0 && b == 0 ) {  $ ~~~~~~if ( dx != 0 ) {  $ ~~~~~~~if ( dy == 0 && da % dx == 0 ) break ;  $ ~~~~~~}  $ ~~~~~} else if ( a == 0 && b != 0 ) {  $ ~~~~~~if ( dy != 0 ) {  $ ~~~~~~~if ( dx == 0 && db % dy == 0 ) break ;  $ ~~~~~~}  $ ~~~~~}  $ ~~~~}  $ ~~~}  $ ~~~if ( j != s . size ( ) ) {  $ ~~~~cout << "Yes" << endl ;  $ ~~~} else {  $ ~~~~cout << "No" << endl ;  $ ~~~}  $ ~~} else {  $ ~~~cout << "Yes" << endl ;  $ ~~}  $ ~}  $ ~return 0 ;  $ }
int str2num ( string & s ) {  $ ~stringstream ss ( s ) ;  $ ~int ret ;  $ ~ss >> ret ;  $ ~return ret ;  $ }  $ bool valid ( string & s ) {  $ ~int n = s . size ( ) ;  $ ~if ( s [ 0 ] == '0' ) return n == 1 ;  $ ~if ( s . size ( ) > 7 ) return false ;  $ ~int x = str2num ( s ) ;  $ ~return x <= 1000000 ;  $ }  $ int main ( ) {  $ ~string s ;  $ ~cin >> s ;  $ ~int n = s . size ( ) , ret = - 1 ;  $ ~for ( int a = 1 ; a <= n ; a ++ )  $ ~~for ( int b = 1 ; b <= n ; b ++ ) {  $ ~~~int c = n - a - b ;  $ ~~~if ( c > 0 ) {  $ ~~~~string p = s . substr ( 0 , a ) , q = s . substr ( a , b ) , r = s . substr ( a + b ) ;  $ ~~~~if ( valid ( p ) && valid ( q ) && valid ( r ) ) { ret = max ( ret , str2num ( p ) + str2num ( q ) + str2num ( r ) ) ; }  $ ~~~}  $ ~~}  $ ~cout << ret << endl ;  $ ~return 0 ;  $ }
int b [ 100005 ] ;  $ int c [ 100005 ] ;  $ int u [ 100000 ] , v [ 100000 ] ;  $ int d [ 100005 ] ;  $ int main ( ) {  $ ~int n ;  $ ~cin >> n ;  $ ~int k = 0 ;  $ ~memset ( b , 0 , sizeof ( b ) ) ;  $ ~memset ( c , 0 , sizeof ( c ) ) ;  $ ~memset ( d , 0 , sizeof ( d ) ) ;  $ ~for ( int i = 0 ; i < n * n ; i ++ ) { cin >> u [ i ] >> v [ i ] ; }  $ ~for ( int i = 0 ; i < n * n ; i ++ ) {  $ ~~if ( b [ u [ i ] ] == 0 && c [ v [ i ] ] == 0 ) {  $ ~~~d [ k ++ ] = i + 1 ;  $ ~~~b [ u [ i ] ] = 1 ;  $ ~~~c [ v [ i ] ] = 1 ;  $ ~~}  $ ~}  $ ~for ( int i = 0 ; i < k - 1 ; i ++ ) { cout << d [ i ] << " " ; }  $ ~cout << d [ k - 1 ] << endl ;  $ ~return 0 ;  $ }
map < char , char > mpu ;  $ vector < long long > vec [ 26 ] ;  $ int b [ 1000006 ] = { } , a [ 1000006 ] = { } ;  $ bool visit [ 1000006 ] = { } ;  $ int main ( ) {  $ ~long long n ;  $ ~string s , p ;  $ ~cin >> s >> p ;  $ ~long long in [ 26 ] = { } ;  $ ~for ( int i = 0 ; i < 26 ; i ++ ) in [ i ] = - 1 ;  $ ~n = s . size ( ) ;  $ ~for ( int i = 0 ; i < n ; i ++ ) {  $ ~~int r = int ( s [ i ] - 'a' ) ;  $ ~~vec [ r ] . push_back ( i ) ;  $ ~}  $ ~int val = - 1 ;  $ ~int sum = 1 ;  $ ~for ( int i = 0 ; i < p . size ( ) ; ) {  $ ~~int r = int ( p [ i ] - 'a' ) ;  $ ~~if ( vec [ r ] . size ( ) <= 0 ) {  $ ~~~cout << "-1\n" ;  $ ~~~return 0 ;  $ ~~}  $ ~~in [ r ] ++ ;  $ ~~if ( in [ r ] < vec [ r ] . size ( ) ) {  $ ~~~bool u = 0 ;  $ ~~~while ( vec [ r ] [ in [ r ] ] <= val && in [ r ] < vec [ r ] . size ( ) ) {  $ ~~~~in [ r ] ++ ;  $ ~~~~if ( in [ r ] >= vec [ r ] . size ( ) ) {  $ ~~~~~sum ++ ;  $ ~~~~~u = 1 ;  $ ~~~~~for ( int kk = 0 ; kk < 26 ; kk ++ ) {  $ ~~~~~~in [ kk ] = - 1 ;  $ ~~~~~~val = - 1 ;  $ ~~~~~}  $ ~~~~~break ;  $ ~~~~}  $ ~~~}  $ ~~~if ( u == 0 ) {  $ ~~~~val = vec [ r ] [ in [ r ] ] ;  $ ~~~~i ++ ;  $ ~~~}  $ ~~} else {  $ ~~~sum ++ ;  $ ~~~for ( int kk = 0 ; kk < 26 ; kk ++ ) in [ kk ] = - 1 ;  $ ~~~val = - 1 ;  $ ~~}  $ ~}  $ ~cout << sum << endl ;  $ }
const int MX = 1e3 + 5 ;  $ pair < int , int > d [ MX ] ;  $ int main ( ) {  $ ~long long n , s , a , b , f = 0 ;  $ ~string r [ 2 ] = { "YES" , "NO" } ;  $ ~cin >> s >> n ;  $ ~for ( int i = 0 ; i < n ; i ++ ) {  $ ~~cin >> a >> b ;  $ ~~d [ i ] = make_pair ( a , b ) ;  $ ~}  $ ~sort ( d , d + n ) ;  $ ~for ( int i = 0 ; i < n ; i ++ ) {  $ ~~if ( s > d [ i ] . first )  $ ~~~s += d [ i ] . second ;  $ ~~else {  $ ~~~f = 1 ;  $ ~~~break ;  $ ~~}  $ ~}  $ ~cout << r [ f ] << endl ;  $ ~return 0 ;  $ }
void read ( int & x ) {  $ ~x = 0 ;  $ ~char c = getchar ( ) ;  $ ~int f = 1 ;  $ ~for ( ; ! isdigit ( c ) ; c = getchar ( ) )  $ ~~if ( c == '-' ) f = - f ;  $ ~for ( ; isdigit ( c ) ; c = getchar ( ) ) x = x * 10 + c - '0' ;  $ ~x *= f ;  $ }  $ void read2 ( int & x , int & y ) {  $ ~read ( x ) , read ( y ) ;  $ }  $ void read3 ( int & x , int & y , int & z ) {  $ ~read ( x ) , read ( y ) , read ( z ) ;  $ }  $ long long l1 , r1 , l2 , r2 , k ;  $ int main ( ) {  $ ~cin >> l1 >> r1 >> l2 >> r2 >> k ;  $ ~long long ans = 0 ;  $ ~if ( l2 > r1 || r2 < l1 ) {  $ ~~cout << 0 << endl ;  $ ~~return 0 ;  $ ~}  $ ~l1 = max ( l1 , l2 ) ;  $ ~r1 = min ( r1 , r2 ) ;  $ ~ans = r1 - l1 + 1 ;  $ ~if ( k >= l1 && k <= r1 ) ans -- ;  $ ~cout << ans << endl ;  $ ~return 0 ;  $ }
long long q , ok , c = 1 ;  $ int main ( ) {  $ ~cin >> q ;  $ ~long long u = q ;  $ ~for ( long long j = 2 ; j <= sqrt ( q ) + 1 ; j ++ ) {  $ ~~if ( q % j == 0 ) {  $ ~~~while ( q % j == 0 ) {  $ ~~~~q = q / j ;  $ ~~~~ok ++ ;  $ ~~~~if ( ok <= 2 ) c *= j ;  $ ~~~~if ( ok == 2 ) break ;  $ ~~~}  $ ~~}  $ ~}  $ ~if ( q > 1 ) ok ++ ;  $ ~if ( ok <= 1 ) cout << "1" << endl << "0" << endl ;  $ ~if ( ok == 2 ) cout << "2" << endl ;  $ ~if ( ok >= 3 ) cout << "1" << endl << c << endl ;  $ ~return 0 ;  $ }
char s [ 5500 ] ;  $ int main ( ) {  $ ~cin >> s ;  $ ~int l = strlen ( s ) ;  $ ~int flag = 0 , a = 0 , b = 0 , c = 0 , flag1 = 0 ;  $ ~for ( int i = 0 ; i < l ; i ++ ) {  $ ~~if ( s [ i ] == 'a' ) {  $ ~~~a ++ ;  $ ~~~if ( flag == 1 || flag1 == 1 ) {  $ ~~~~cout << "NO" << endl ;  $ ~~~~return 0 ;  $ ~~~}  $ ~~}  $ ~~if ( s [ i ] == 'b' ) {  $ ~~~b ++ ;  $ ~~~flag = 1 ;  $ ~~~if ( flag1 == 1 ) {  $ ~~~~cout << "NO" << endl ;  $ ~~~~return 0 ;  $ ~~~}  $ ~~}  $ ~~if ( s [ i ] == 'c' ) {  $ ~~~c ++ ;  $ ~~~flag1 = 1 ;  $ ~~}  $ ~}  $ ~if ( a == 0 || b == 0 ) {  $ ~~cout << "NO" << endl ;  $ ~~return 0 ;  $ ~}  $ ~if ( c == a || c == b ) {  $ ~~cout << "YES" << endl ;  $ ~} else {  $ ~~cout << "NO" << endl ;  $ ~}  $ ~return 0 ;  $ }
string s , t ;  $ int l1 , l2 ;  $ int p [ 10001 ] [ 26 ] ;  $ int main ( ) {  $ ~while ( cin >> s >> t ) {  $ ~~l1 = s . size ( ) ;  $ ~~l2 = t . size ( ) ;  $ ~~memset ( p , 0 , sizeof ( p ) ) ;  $ ~~for ( int i = 0 ; i < 26 ; i ++ ) p [ l1 ] [ i ] = - 1 ;  $ ~~for ( int j = l1 ; j >= 1 ; j -- )  $ ~~~for ( int i = 0 ; i < 26 ; i ++ )  $ ~~~~if ( s [ j ] == i + 'a' )  $ ~~~~~p [ j - 1 ] [ i ] = j ;  $ ~~~~else  $ ~~~~~p [ j - 1 ] [ i ] = p [ j ] [ i ] ;  $ ~~int ans = 1 , l = - 2 ;  $ ~~for ( int i = 0 ; i < l2 ; i ++ ) {  $ ~~~if ( l == - 2 ) {  $ ~~~~if ( s [ 0 ] == t [ i ] )  $ ~~~~~l = 0 ;  $ ~~~~else  $ ~~~~~l = p [ 0 ] [ t [ i ] - 'a' ] ;  $ ~~~~if ( l == - 1 ) {  $ ~~~~~ans = - 1 ;  $ ~~~~~break ;  $ ~~~~}  $ ~~~} else {  $ ~~~~l = p [ l ] [ t [ i ] - 'a' ] ;  $ ~~~~if ( l == - 1 ) {  $ ~~~~~ans ++ ;  $ ~~~~~l = - 2 ;  $ ~~~~~i -- ;  $ ~~~~}  $ ~~~}  $ ~~}  $ ~~cout << ans << endl ;  $ ~}  $ }
char a1 [ 100000000 ] ;  $ int main ( ) {  $ ~gets ( a1 ) ;  $ ~int n = 0 , i = 0 , e = 0 , t = 0 ;  $ ~for ( int j = 0 ; j < strlen ( a1 ) ; j ++ ) {  $ ~~if ( a1 [ j ] == 'n' )  $ ~~~n ++ ;  $ ~~else if ( a1 [ j ] == 'i' )  $ ~~~i ++ ;  $ ~~else if ( a1 [ j ] == 'e' )  $ ~~~e ++ ;  $ ~~else if ( a1 [ j ] == 't' )  $ ~~~t ++ ;  $ ~}  $ ~cout << min ( ( n - 1 ) / 2 , min ( i , min ( e / 3 , t ) ) ) << endl ;  $ ~return 0 ;  $ }
bool if_prime ( int a ) {  $ ~if ( a < 2 ) return false ;  $ ~int flag = 1 ;  $ ~for ( int i = 2 ; i < a ; i ++ ) {  $ ~~if ( a % i == 0 ) {  $ ~~~flag = 0 ;  $ ~~~break ;  $ ~~}  $ ~}  $ ~if ( flag == 0 )  $ ~~return false ;  $ ~else  $ ~~return true ;  $ }  $ int main ( ) {  $ ~int n ;  $ ~cin >> n ;  $ ~int m = 1 ;  $ ~int ans = n * m + 1 ;  $ ~while ( if_prime ( ans ) ) {  $ ~~m ++ ;  $ ~~ans = n * m + 1 ;  $ ~}  $ ~cout << m << endl ;  $ }
int f ( int a , int b ) {  $ ~int x1 = a / 10 ;  $ ~int x2 = a % 10 ;  $ ~int x3 = b / 10 ;  $ ~int x4 = b % 10 ;  $ ~if ( x1 == x4 && x2 == x3 ) return 1 ;  $ ~return 0 ;  $ }  $ int main ( ) {  $ ~int a , b ;  $ ~char s ;  $ ~cin >> a >> s >> b ;  $ ~if ( f ( a , b ) == 1 )  $ ~~cout << "0" << endl ;  $ ~else {  $ ~~for ( int i = 1 ; ; i ++ ) {  $ ~~~if ( b + 1 == 60 && a < 23 ) {  $ ~~~~b = 0 ;  $ ~~~~a += 1 ;  $ ~~~} else if ( a == 23 ) {  $ ~~~~if ( b > 32 ) {  $ ~~~~~cout << 60 - b << endl ;  $ ~~~~~break ;  $ ~~~~} else  $ ~~~~~b ++ ;  $ ~~~} else {  $ ~~~~b ++ ;  $ ~~~}  $ ~~~if ( f ( a , b ) == 1 ) {  $ ~~~~cout << i << endl ;  $ ~~~~break ;  $ ~~~}  $ ~~}  $ ~}  $ ~return 0 ;  $ }
string f [ 111 ] , ans ;  $ int main ( ) {  $ ~int n ;  $ ~cin >> n ;  $ ~for ( int i = 0 ; i < n ; i ++ ) {  $ ~~cin >> f [ i ] ;  $ ~~for ( int j = 0 ; j < f [ i ] . size ( ) ; j ++ ) f [ i ] [ j ] = tolower ( f [ i ] [ j ] ) ;  $ ~}  $ ~string s , t = "" ;  $ ~cin >> s ;  $ ~for ( int i = 0 ; i < s . size ( ) ; i ++ ) t += tolower ( s [ i ] ) ;  $ ~ans = t ;  $ ~char c ;  $ ~cin >> c ;  $ ~for ( int i = 0 ; i <= t . size ( ) ; i ++ ) {  $ ~~for ( int j = 0 ; j < n ; j ++ ) {  $ ~~~if ( i >= f [ j ] . size ( ) ) {  $ ~~~~string sub = t . substr ( i - f [ j ] . size ( ) , f [ j ] . size ( ) ) ;  $ ~~~~if ( sub == f [ j ] ) {  $ ~~~~~for ( int l = i - f [ j ] . size ( ) ; l < i ; l ++ ) {  $ ~~~~~~if ( t [ l ] == c && c != 'a' )  $ ~~~~~~~ans [ l ] = 'a' ;  $ ~~~~~~else if ( t [ l ] == c && c == 'a' )  $ ~~~~~~~ans [ l ] = 'b' ;  $ ~~~~~~else  $ ~~~~~~~ans [ l ] = c ;  $ ~~~~~}  $ ~~~~}  $ ~~~}  $ ~~}  $ ~}  $ ~for ( int i = 0 ; i < s . size ( ) ; i ++ )  $ ~~if ( isupper ( s [ i ] ) ) ans [ i ] = toupper ( ans [ i ] ) ;  $ ~cout << ans << endl ;  $ }
long long t , s , x ;  $ int main ( ) {  $ ~cin >> t >> s >> x ;  $ ~if ( x < t ) return cout << "NO" << '\n' , 0 ;  $ ~if ( x - 1 == t ) return cout << "NO" << '\n' , 0 ;  $ ~if ( ( ( x - t ) % s == 0 ) || ( ( x - t - 1 ) % s == 0 ) ) return cout << "YES" << '\n' , 0 ;  $ ~cout << "NO" << '\n' ;  $ ~return 0 ;  $ }
int jl [ 300 ] ;  $ int main ( ) {  $ ~string s1 ;  $ ~char yy [ ] = { 'A' , 'E' , 'O' , 'U' , 'I' , 'Y' } ;  $ ~int i , j , n , k = 0 , ans = - 1 ;  $ ~cin >> s1 ;  $ ~n = s1 . size ( ) ;  $ ~s1 [ n ] = 'P' ;  $ ~for ( i = 0 ; i <= n ; i ++ ) {  $ ~~jl [ k ] ++ ;  $ ~~if ( jl [ k ] > ans ) ans = jl [ k ] ;  $ ~~for ( j = 0 ; j < 6 ; j ++ ) {  $ ~~~if ( s1 [ i ] == yy [ j ] ) {  $ ~~~~k ++ ;  $ ~~~~break ;  $ ~~~}  $ ~~}  $ ~}  $ ~cout << ans << endl ;  $ ~return 0 ;  $ }
void init_ios ( ) { }  $ const long long N = ( long long ) 1e5 + 10 ;  $ long long n , d , res , a [ N ] ;  $ int main ( ) {  $ ~init_ios ( ) ;  $ ~cin >> n >> d ;  $ ~for ( long long i = 1 ; i <= n ; ++ i ) cin >> a [ i ] ;  $ ~long long j = 3 ;  $ ~for ( long long i = 1 ; i + 2 <= n ; ++ i ) {  $ ~~j = max ( j , i + 2 ) ;  $ ~~while ( j <= n && a [ j ] - a [ i ] <= d ) ++ j ;  $ ~~-- j ;  $ ~~res += ( ( j - i - 1 ) * ( j - i ) ) / 2 ;  $ ~}  $ ~cout << res << "\n" ;  $ }
int a [ 150 ] ;  $ int main ( ) {  $ ~int t , s , x , f = 0 ;  $ ~cin >> t >> s >> x ;  $ ~x = x - t ;  $ ~if ( x % s == 0 || x % s == 1 ) f = 1 ;  $ ~if ( x == 1 || x < 0 ) f = 0 ;  $ ~if ( f == 1 )  $ ~~cout << "YES" << endl ;  $ ~else  $ ~~cout << "NO" << endl ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~bool num [ 6667 ] ;  $ ~char s [ 3 ] ;  $ ~memset ( num , 0 , sizeof ( num ) ) ;  $ ~int n ;  $ ~cin >> n ;  $ ~int count = 0 ;  $ ~for ( int i = 0 ; i < n ; i ++ ) {  $ ~~int a , b ;  $ ~~cin >> a ;  $ ~~cin >> b ;  $ ~~b = b % 10 * 10 + b / 10 ;  $ ~~if ( num [ a * 100 + b ] == 0 ) {  $ ~~~count ++ ;  $ ~~~int tmp = a * 100 + b ;  $ ~~~num [ tmp ] = 1 ;  $ ~~~for ( int j = 0 ; j < 3 ; j ++ ) {  $ ~~~~tmp = tmp % 10 * 1000 + tmp / 10 ;  $ ~~~~num [ tmp ] = 1 ;  $ ~~~}  $ ~~}  $ ~~if ( i != n - 1 ) cin >> s ;  $ ~}  $ ~cout << count << endl ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~string s ;  $ ~cin >> s ;  $ ~int h = ( s [ 0 ] - '0' ) * 10 + ( s [ 1 ] - '0' ) ;  $ ~int m = ( s [ 3 ] - '0' ) * 10 + ( s [ 4 ] - '0' ) ;  $ ~while ( 1 ) {  $ ~~if ( m == 59 ) {  $ ~~~m = 0 ;  $ ~~~if ( h == 23 )  $ ~~~~h = 0 ;  $ ~~~else  $ ~~~~h ++ ;  $ ~~} else  $ ~~~m ++ ;  $ ~~if ( h / 10 == m % 10 && h % 10 == m / 10 ) {  $ ~~~cout << h / 10 << h % 10 << ":" << m / 10 << m % 10 << endl ;  $ ~~~return 0 ;  $ ~~}  $ ~}  $ }
const int INF = 10000000 ;  $ int main ( ) {  $ ~int n , m , a , b , ans1 = INF , ans2 = INF ;  $ ~cin >> n >> m >> a >> b ;  $ ~int row1 = ( a - 1 ) / m ;  $ ~int row2 = ( b - 1 ) / m ;  $ ~int col1 = a % m == 0 ? m : a % m ;  $ ~int col2 = b % m == 0 ? m : b % m ;  $ ~if ( row1 == row2 )  $ ~~ans1 = 1 ;  $ ~else if ( row2 - row1 == 1 ) {  $ ~~ans1 = 2 ;  $ ~~if ( col1 == 1 && b == n )  $ ~~~ans1 = 1 ;  $ ~~else if ( col1 == 1 && col2 == m )  $ ~~~ans1 = 1 ;  $ ~} else {  $ ~~ans1 = 3 ;  $ ~~if ( b == n || col2 == m ) -- ans1 ;  $ ~~if ( col1 == 1 ) -- ans1 ;  $ ~}  $ ~ans2 = 3 ;  $ ~if ( col1 - 1 == col2 ) -- ans2 ;  $ ~cout << min ( ans1 , ans2 ) << endl ;  $ ~return 0 ;  $ } ;
int main ( ) {  $ ~int n , cnt ;  $ ~long long x1 , y1 , x2 , y2 , a , b , c , l1 , l2 ;  $ ~while ( cin >> x1 >> y1 >> x2 >> y2 >> n ) {  $ ~~cnt = 0 ;  $ ~~while ( n -- ) {  $ ~~~cin >> a >> b >> c ;  $ ~~~l1 = a * x1 + b * y1 + c ;  $ ~~~l2 = a * x2 + b * y2 + c ;  $ ~~~if ( l1 > 0 && l2 < 0 || l1 < 0 && l2 > 0 ) cnt ++ ;  $ ~~}  $ ~~cout << cnt << endl ;  $ ~}  $ ~return 0 ;  $ }
int main ( ) {  $ ~long long n , amigos , coins , min ;  $ ~cin >> n >> amigos >> coins >> min ;  $ ~if ( amigos > n || coins > n - min || min > n )  $ ~~cout << - 1 << endl ;  $ ~else {  $ ~~long long x = ( min + coins ) / amigos ;  $ ~~if ( ( min + coins ) % amigos == 0 ) {  $ ~~~if ( amigos * x <= n )  $ ~~~~cout << x << endl ;  $ ~~~else  $ ~~~~cout << - 1 << endl ;  $ ~~} else {  $ ~~~if ( amigos * ( x + 1 ) <= n )  $ ~~~~cout << x + 1 << endl ;  $ ~~~else  $ ~~~~cout << - 1 << endl ;  $ ~~}  $ ~}  $ ~return 0 ;  $ }
int main ( ) {  $ ~long int s , n ;  $ ~cin >> n >> s ;  $ ~long int dollar [ n ] ;  $ ~long int cent [ n ] ;  $ ~for ( long int i = 0 ; i < n ; i ++ ) {  $ ~~cent [ i ] = - 4 ;  $ ~~dollar [ i ] = - 4 ;  $ ~}  $ ~int d , c ;  $ ~int k = 0 ;  $ ~int y = 0 ;  $ ~for ( long int i = 0 ; i < n ; i ++ ) {  $ ~~cin >> d >> c ;  $ ~~if ( d < s ) {  $ ~~~dollar [ k ] = d ;  $ ~~~cent [ k ] = c ;  $ ~~~k ++ ;  $ ~~} else if ( d == s && c == 0 ) {  $ ~~~dollar [ k ] = d ;  $ ~~~cent [ k ] = c ;  $ ~~~k ++ ;  $ ~~}  $ ~}  $ ~pair < long int , long int > pairt [ k ] ;  $ ~for ( long int i = 0 ; i < k ; i ++ ) {  $ ~~pairt [ i ] . first = cent [ i ] ;  $ ~~pairt [ i ] . second = dollar [ i ] ;  $ ~}  $ ~sort ( pairt , pairt + k ) ;  $ ~for ( long int i = 0 ; i < k ; i ++ ) {  $ ~~cent [ i ] = pairt [ i ] . first ;  $ ~~dollar [ i ] = pairt [ i ] . second ;  $ ~}  $ ~int flag = 0 ;  $ ~long int i = 0 ;  $ ~for ( i = 0 ; i < k ; i ++ ) {  $ ~~if ( cent [ i ] > 0 ) {  $ ~~~cout << ( 100 - cent [ i ] ) << endl ;  $ ~~~flag = 1 ;  $ ~~~break ;  $ ~~}  $ ~}  $ ~if ( cent [ 0 ] == 0 && flag == 0 ) {  $ ~~cout << "0" << endl ;  $ ~~flag = 1 ;  $ ~}  $ ~if ( flag == 0 ) cout << "-1" << endl ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~int h , m ;  $ ~char c ;  $ ~cin >> h >> c >> m ;  $ ~int rh = ( h % 10 ) * 10 + h / 10 ;  $ ~int res = 0 ;  $ ~for ( ; rh != m ; rh = ( h % 10 ) * 10 + h / 10 ) {  $ ~~++ m ;  $ ~~++ res ;  $ ~~if ( m == 60 ) {  $ ~~~m = 0 ;  $ ~~~++ h ;  $ ~~~if ( h == 24 ) h = 0 ;  $ ~~}  $ ~}  $ ~cout << res << endl ;  $ ~return 0 ;  $ }
const long double pi = 3.1415926535 ;  $ int main ( ) {  $ ~long long int t ;  $ ~string s ;  $ ~cin >> s ;  $ ~long long int a = ( s [ 0 ] - '0' ) * 10 + ( s [ 1 ] - '0' ) ;  $ ~long long int b = ( s [ 3 ] - '0' ) * 10 + ( s [ 4 ] - '0' ) ;  $ ~bool flag = 0 ;  $ ~long long int cnt = 0 ;  $ ~while ( flag != 1 ) {  $ ~~if ( ( a / 10 == b % 10 ) && ( a % 10 == b / 10 ) ) {  $ ~~~cout << cnt << endl ;  $ ~~~return 0 ;  $ ~~}  $ ~~cnt ++ ;  $ ~~b ++ ;  $ ~~if ( b == 60 ) {  $ ~~~b = 0 ;  $ ~~~a ++ ;  $ ~~}  $ ~~if ( a == 24 ) a = 0 ;  $ ~}  $ }
string s ;  $ int freq [ 26 ] ;  $ int n ;  $ int main ( ) {  $ ~cin >> s ;  $ ~cin >> n ;  $ ~int distinct = 0 ;  $ ~for ( int i = 0 ; s [ i ] ; i ++ ) {  $ ~~if ( freq [ s [ i ] - 'a' ] == 0 ) distinct ++ ;  $ ~~freq [ s [ i ] - 'a' ] ++ ;  $ ~}  $ ~if ( distinct > n )  $ ~~cout << - 1 << "\n" ;  $ ~else {  $ ~~int sheets = 1 ;  $ ~~while ( true ) {  $ ~~~int chrs = 0 ;  $ ~~~for ( int i = 0 ; i < 26 ; i ++ ) { chrs += ( freq [ i ] + sheets - 1 ) / sheets ; }  $ ~~~if ( chrs <= n ) break ;  $ ~~~sheets ++ ;  $ ~~}  $ ~~cout << sheets << '\n' ;  $ ~~int t = 0 ;  $ ~~for ( int i = 0 ; i < 26 ; i ++ ) {  $ ~~~int x = ( freq [ i ] + sheets - 1 ) / sheets ;  $ ~~~t += x ;  $ ~~~while ( x -- ) cout << ( char ) ( i + 'a' ) ;  $ ~~}  $ ~~while ( t ++ < n ) cout << 'a' ;  $ ~~cout << '\n' ;  $ ~}  $ ~return 0 ;  $ }
int main ( ) {  $ ~int n , total , input , Smith = 0 , cou = 1 ;  $ ~cin >> n ;  $ ~for ( int i = 1 ; i <= n ; i ++ ) {  $ ~~total = 0 ;  $ ~~for ( int j = 1 ; j <= 4 ; j ++ ) {  $ ~~~cin >> input ;  $ ~~~total += input ;  $ ~~}  $ ~~if ( i == 1 ) {  $ ~~~Smith = total ;  $ ~~} else {  $ ~~~if ( total > Smith ) { cou ++ ; }  $ ~~}  $ ~}  $ ~cout << cou << endl ;  $ ~return 0 ;  $ }
long long ans = 0 , i = 0 , j = 0 , cnt = 0 , sum = 0 ;  $ long long arr [ 100001 ] ;  $ long long brr [ 100001 ] ;  $ int main ( ) {  $ ~int t = 1 ;  $ ~while ( t -- ) {  $ ~~long long n , w = 0 , b = 0 ;  $ ~~cin >> n ;  $ ~~long long x , y ;  $ ~~cin >> x >> y ;  $ ~~if ( x == y ) {  $ ~~~if ( x == 1 ) {  $ ~~~~cout << "White"  $ ~~~~~<< "\n" ;  $ ~~~~exit ( 0 ) ;  $ ~~~} else if ( x == n ) {  $ ~~~~cout << "Black"  $ ~~~~~<< "\n" ;  $ ~~~~exit ( 0 ) ;  $ ~~~}  $ ~~~w = x - 1 + x - 1 ;  $ ~~~b = n - x + n - x ;  $ ~~} else {  $ ~~~w = x - 1 + y - 1 ;  $ ~~~b = n + n - x - y ;  $ ~~}  $ ~~w -- ;  $ ~~if ( w <= b )  $ ~~~cout << "White"  $ ~~~~<< "\n" ;  $ ~~else  $ ~~~cout << "Black"  $ ~~~~<< "\n" ;  $ ~}  $ }
string str ;  $ bool check ( int p ) {  $ ~set < char > se ;  $ ~se . clear ( ) ;  $ ~se . insert ( str [ p ] ) ;  $ ~se . insert ( str [ p + 1 ] ) ;  $ ~se . insert ( str [ p - 1 ] ) ;  $ ~se . insert ( '.' ) ;  $ ~if ( se . size ( ) == 4 ) return true ;  $ ~return false ;  $ }  $ int main ( ) {  $ ~cin >> str ;  $ ~for ( int i = 1 ; i + 1 < str . size ( ) ; i ++ ) {  $ ~~if ( check ( i ) ) {  $ ~~~cout << "Yes" << endl ;  $ ~~~return 0 ;  $ ~~}  $ ~}  $ ~cout << "No" << endl ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~int n ;  $ ~cin >> n ;  $ ~int sq = sqrt ( n * 2 ) ;  $ ~for ( int i = 1 ; i <= sq ; i ++ )  $ ~~for ( int j = 1 ; j <= i ; j ++ )  $ ~~~if ( i * i + i + j * j + j == n * 2 ) {  $ ~~~~cout << "YES" << endl ;  $ ~~~~return 0 ;  $ ~~~}  $ ~cout << "NO" << endl ;  $ ~return 0 ;  $ }
int n , m , i , k = - 1 ;  $ string s , t , s2 ;  $ int main ( ) {  $ ~cin >> n >> m >> s >> t ;  $ ~for ( i = 0 ; i < n ; i ++ )  $ ~~if ( s [ i ] == '*' ) {  $ ~~~k = i ;  $ ~~~break ;  $ ~~}  $ ~if ( ( k == - 1 && s != t ) || n - 1 > m ) return cout << "NO" << endl , 0 ;  $ ~s2 = s . substr ( k + 1 ) ;  $ ~n = s2 . size ( ) ;  $ ~if ( s . substr ( 0 , k ) != t . substr ( 0 , k ) || s2 != t . substr ( m - n ) ) return cout << "NO" << endl , 0 ;  $ ~cout << "YES" << endl ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~vector < long long > v ;  $ ~v . push_back ( 4 ) ;  $ ~v . push_back ( 7 ) ;  $ ~long long l = 4444444444 , a , x , y , c = 0 ;  $ ~int i = 0 , j , z ;  $ ~while ( v . back ( ) < l ) {  $ ~~a = v [ i ++ ] ;  $ ~~v . push_back ( ( a * 10 ) + 4 ) ;  $ ~~v . push_back ( ( a * 10 ) + 7 ) ;  $ ~}  $ ~cin >> x >> y ;  $ ~i = ( int ) ( lower_bound ( v . begin ( ) , v . end ( ) , x ) - v . begin ( ) ) ;  $ ~j = ( int ) ( lower_bound ( v . begin ( ) , v . end ( ) , y ) - v . begin ( ) ) ;  $ ~z = x ;  $ ~while ( i < j ) {  $ ~~c += v [ i ] * ( v [ i ] - z + 1 ) ;  $ ~~z = v [ i ++ ] + 1 ;  $ ~}  $ ~c += v [ j ] * ( y - z + 1 ) ;  $ ~cout << c << endl ;  $ ~return 0 ;  $ }
vector < int > vec [ 3 ] ;  $ map < string , int > like ;  $ int diff , mat [ 10 ] [ 10 ] , ans , a , b , c ;  $ int cal ( ) {  $ ~int sum = 0 , i , j , k ;  $ ~for ( i = 0 ; i < 3 ; i ++ ) {  $ ~~for ( j = 0 ; j < ( int ) vec [ i ] . size ( ) ; j ++ )  $ ~~~for ( k = 0 ; k < ( int ) vec [ i ] . size ( ) ; k ++ ) sum += mat [ vec [ i ] [ j ] ] [ vec [ i ] [ k ] ] ;  $ ~}  $ ~return sum ;  $ }  $ void count ( int now ) {  $ ~if ( now == 7 ) {  $ ~~if ( vec [ 0 ] . size ( ) && vec [ 1 ] . size ( ) && vec [ 2 ] . size ( ) ) {  $ ~~~int x [ ] = { a / vec [ 0 ] . size ( ) , b / vec [ 1 ] . size ( ) , c / vec [ 2 ] . size ( ) } ;  $ ~~~sort ( x , x + 3 ) ;  $ ~~~if ( x [ 2 ] - x [ 0 ] < diff ) {  $ ~~~~diff = x [ 2 ] - x [ 0 ] ;  $ ~~~~ans = cal ( ) ;  $ ~~~} else if ( x [ 2 ] - x [ 0 ] == diff )  $ ~~~~ans = max ( ans , cal ( ) ) ;  $ ~~}  $ ~~return ;  $ ~}  $ ~for ( int i = 0 ; i < 3 ; i ++ ) {  $ ~~vec [ i ] . push_back ( now ) ;  $ ~~count ( now + 1 ) ;  $ ~~vec [ i ] . pop_back ( ) ;  $ ~}  $ }  $ int main ( ) {  $ ~like [ "Anka" ] = 0 ;  $ ~like [ "Chapay" ] = 1 ;  $ ~like [ "Cleo" ] = 2 ;  $ ~like [ "Troll" ] = 3 ;  $ ~like [ "Dracul" ] = 4 ;  $ ~like [ "Snowy" ] = 5 ;  $ ~like [ "Hexadecimal" ] = 6 ;  $ ~int n , i ;  $ ~string name1 , str , name2 ;  $ ~while ( cin >> n ) {  $ ~~diff = ( 1 << 31 ) - 1 ;  $ ~~for ( i = 0 ; i < 3 ; i ++ ) vec [ i ] . clear ( ) ;  $ ~~memset ( mat , 0 , sizeof ( mat ) ) ;  $ ~~for ( i = 0 ; i < n ; i ++ ) {  $ ~~~cin >> name1 >> str >> name2 ;  $ ~~~mat [ like [ name1 ] ] [ like [ name2 ] ] ++ ;  $ ~~}  $ ~~cin >> a >> b >> c ;  $ ~~count ( 0 ) ;  $ ~~cout << diff << " " << ans << endl ;  $ ~}  $ }
int main ( ) {  $ ~string s , v ;  $ ~cin >> s >> v ;  $ ~if ( s . size ( ) != v . size ( ) ) {  $ ~~puts ( "NO" ) ;  $ ~} else {  $ ~~int at = - 1 , at2 = - 1 ;  $ ~~for ( int len = s . size ( ) , i = 0 ; i < len ; ++ i ) {  $ ~~~if ( s [ i ] != v [ i ] ) {  $ ~~~~if ( at == - 1 ) {  $ ~~~~~at = i ;  $ ~~~~} else {  $ ~~~~~if ( at2 == - 1 ) {  $ ~~~~~~at2 = i ;  $ ~~~~~~if ( s [ at ] != v [ at2 ] || s [ at2 ] != v [ at ] ) {  $ ~~~~~~~puts ( "NO" ) ;  $ ~~~~~~~return 0 ;  $ ~~~~~~}  $ ~~~~~} else {  $ ~~~~~~puts ( "NO" ) ;  $ ~~~~~~return 0 ;  $ ~~~~~}  $ ~~~~}  $ ~~~}  $ ~~}  $ ~~puts ( at == - 1 ? "YES" : at2 == - 1 ? "NO" : "YES" ) ;  $ ~}  $ ~return true & false ;  $ }
const int INF = 0 x7fffffff ;  $ const int inf = 0 x3f3f3f3f ;  $ const int maxn = 200005 ;  $ const int N = 105 ;  $ inline void read ( int & x ) {  $ ~int f = 1 ;  $ ~x = 0 ;  $ ~char s = getchar ( ) ;  $ ~while ( s < '0' || s > '9' ) {  $ ~~if ( s == '-' ) f = - 1 ;  $ ~~s = getchar ( ) ;  $ ~}  $ ~while ( s >= '0' && s <= '9' ) {  $ ~~x = x * 10 + s - '0' ;  $ ~~s = getchar ( ) ;  $ ~}  $ ~x *= f ;  $ }  $ long long a , b , c , d , k ;  $ int main ( ) {  $ ~cin >> b >> a >> d >> c ;  $ ~for ( int i = 0 ; i <= 100 ; i ++ ) {  $ ~~for ( int j = 0 ; j <= 100 ; j ++ ) {  $ ~~~if ( a + i * b == c + j * d ) {  $ ~~~~cout << a + i * b << endl ;  $ ~~~~return 0 ;  $ ~~~}  $ ~~}  $ ~}  $ ~cout << - 1 << endl ;  $ ~return 0 ;  $ }
long long n , x , y ;  $ int main ( ) {  $ ~cin >> n >> x >> y ;  $ ~if ( x + y <= n + 1 )  $ ~~cout << "White" << endl ;  $ ~else  $ ~~cout << "Black" << endl ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~int n ;  $ ~cin >> n ;  $ ~string s ;  $ ~cin >> s ;  $ ~vector < int > v ;  $ ~for ( int i = 0 ; i < n ; i ++ ) {  $ ~~if ( s [ i ] == 'C' )  $ ~~~v . push_back ( 1 ) ;  $ ~~else if ( s [ i ] == 'Y' )  $ ~~~v . push_back ( 3 ) ;  $ ~~else if ( s [ i ] == 'M' )  $ ~~~v . push_back ( 2 ) ;  $ ~~else {  $ ~~~int count = 0 ;  $ ~~~while ( s [ i ] == '?' ) {  $ ~~~~i ++ ;  $ ~~~~count ++ ;  $ ~~~}  $ ~~~i -- ;  $ ~~~v . push_back ( - count ) ;  $ ~~}  $ ~}  $ ~bool b = 1 ;  $ ~for ( int i = 1 ; i < n ; i ++ ) {  $ ~~if ( s [ i - 1 ] == s [ i ] && s [ i ] != '?' ) b = 0 ;  $ ~}  $ ~int count = 0 ;  $ ~for ( int i = 1 ; i < v . size ( ) - 1 ; i ++ ) {  $ ~~if ( v [ i ] < 0 && v [ i - 1 ] == v [ i + 1 ] ) {  $ ~~~count ++ ;  $ ~~} else if ( v [ i ] < - 1 && v [ i - 1 ] != v [ i + 1 ] ) {  $ ~~~count ++ ;  $ ~~}  $ ~}  $ ~if ( v [ 0 ] < 0 ) count ++ ;  $ ~if ( v [ v . size ( ) - 1 ] < 0 ) count ++ ;  $ ~if ( ! b || count == 0 )  $ ~~cout << "No" << endl ;  $ ~else  $ ~~cout << "Yes" << endl ;  $ ~return 0 ;  $ }
char f [ 1005 ] , ff [ 1005 ] ;  $ int main ( ) {  $ ~int n , k ;  $ ~cin >> f ;  $ ~cin >> k ;  $ ~n = strlen ( f ) ;  $ ~if ( n % k != 0 ) {  $ ~~cout << "NO" << endl ;  $ ~~return 0 ;  $ ~}  $ ~int a = n / k ;  $ ~int p = - 1 ;  $ ~int flag = 1 ;  $ ~while ( p != n - 1 ) {  $ ~~for ( int i = 0 ; i < a ; i ++ ) {  $ ~~~p ++ ;  $ ~~~ff [ i ] = f [ p ] ;  $ ~~}  $ ~~int flagg = 1 ;  $ ~~int b = 0 , e = a - 1 ;  $ ~~while ( b <= e ) {  $ ~~~if ( ff [ b ] != ff [ e ] ) {  $ ~~~~flagg = 0 ;  $ ~~~~break ;  $ ~~~}  $ ~~~b ++ ;  $ ~~~e -- ;  $ ~~}  $ ~~if ( flagg == 0 ) {  $ ~~~flag = 0 ;  $ ~~~break ;  $ ~~}  $ ~}  $ ~if ( flag )  $ ~~cout << "YES" << endl ;  $ ~else  $ ~~cout << "NO" << endl ;  $ ~return 0 ;  $ }
long long mod = 1000000007 ;  $ int main ( ) {  $ ~long long a , b , x , y ;  $ ~cin >> a >> b >> x >> y ;  $ ~long long ans = 0 ;  $ ~long long n , n1 ;  $ ~cin >> n ;  $ ~n1 = n ;  $ ~while ( n1 -- ) {  $ ~~long long a1 , b1 , c1 ;  $ ~~cin >> a1 >> b1 >> c1 ;  $ ~~long long d1 = ( a1 * a ) + ( b1 * b ) + c1 ;  $ ~~long long d2 = ( a1 * x ) + ( b1 * y ) + c1 ;  $ ~~if ( ( d1 >= 0 && d2 >= 0 ) || ( d1 < 0 && d2 < 0 ) ) ans ++ ;  $ ~}  $ ~cout << n - ans << endl ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~long long x , y , n ;  $ ~cin >> n ;  $ ~cin >> x >> y ;  $ ~long long w_x = 1 , w_y = 1 ;  $ ~long long b_x = n , b_y = n ;  $ ~long long w_step = abs ( abs ( x - w_x ) - abs ( y - w_y ) ) + min ( abs ( x - w_x ) , abs ( y - w_y ) ) ;  $ ~long long b_step = abs ( abs ( y - b_y ) - abs ( x - b_x ) ) + min ( abs ( y - b_y ) , abs ( x - b_x ) ) ;  $ ~if ( b_x == x && b_y == y )  $ ~~cout << "Black" << endl ;  $ ~else if ( w_x == x && w_y == y )  $ ~~cout << "White" << endl ;  $ ~else if ( w_step == b_step )  $ ~~cout << "White" << endl ;  $ ~else if ( w_step < b_step )  $ ~~cout << "White" << endl ;  $ ~else if ( b_step < w_step )  $ ~~cout << "Black" << endl ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~long long int n , L , a ;  $ ~long long int t [ 100001 ] , l [ 100001 ] ;  $ ~cin >> n >> L >> a ;  $ ~for ( long long int i = 1 ; i <= n ; i ++ ) { cin >> t [ i ] >> l [ i ] ; }  $ ~t [ 0 ] = 0 ;  $ ~l [ 0 ] = 0 ;  $ ~long long int cnt = 0 ;  $ ~for ( long long int i = 1 ; i <= n ; i ++ ) {  $ ~~if ( t [ i - 1 ] + l [ i - 1 ] < t [ i ] ) { cnt += ( t [ i ] - ( t [ i - 1 ] + l [ i - 1 ] ) ) / a ; }  $ ~}  $ ~L = L - ( t [ n ] + l [ n ] ) ;  $ ~cnt += L / a ;  $ ~cout << cnt << endl ;  $ ~return 0 ;  $ }
const int INF = 0 x3f3f3f3f ;  $ int main ( ) {  $ ~int n ;  $ ~cin >> n ;  $ ~int row [ n + 10 ] ;  $ ~long long ans [ n + 10 ] ;  $ ~for ( int i = 1 ; i <= n ; i ++ ) cin >> row [ i ] ;  $ ~for ( int i = 1 ; i <= n ; i ++ ) {  $ ~~long long cont = 1 ;  $ ~~int j = row [ i ] ;  $ ~~while ( cont < 103 and j != i ) {  $ ~~~cont ++ ;  $ ~~~j = row [ j ] ;  $ ~~}  $ ~~ans [ i ] = cont ;  $ ~~if ( ans [ i ] % 2 == 0 ) ans [ i ] /= 2 ;  $ ~}  $ ~long long mult = ans [ 1 ] ;  $ ~for ( int i = 1 ; i <= n ; i ++ ) {  $ ~~if ( ans [ i ] == 103 ) {  $ ~~~cout << - 1 << endl ;  $ ~~~return 0 ;  $ ~~}  $ ~~mult = ( mult * ans [ i ] ) / __gcd ( mult , ans [ i ] ) ;  $ ~}  $ ~cout << mult << endl ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~int n , b , l = 0 ;  $ ~cin >> n ;  $ ~for ( int i = 0 ; i < n ; i ++ ) {  $ ~~cin >> b ;  $ ~~if ( b == 0 ) { l ++ ; }  $ ~}  $ ~if ( l == 1 && n != 1 || n == 1 && l == 0 ) {  $ ~~cout << "YES" << endl ;  $ ~} else {  $ ~~cout << "NO" << endl ;  $ ~}  $ }
int main ( ) {  $ ~string a ;  $ ~while ( cin >> a ) {  $ ~~int num_a = 0 , num_b = 0 , num_c = 0 ;  $ ~~int la ;  $ ~~int fb = - 1 ;  $ ~~int lb = - 1 ;  $ ~~int lc = - 1 ;  $ ~~for ( int i = 0 ; i < a . size ( ) ; i ++ ) {  $ ~~~if ( a [ i ] == 'a' ) {  $ ~~~~num_a ++ ;  $ ~~~~la = i ;  $ ~~~} else if ( a [ i ] == 'b' ) {  $ ~~~~if ( fb == - 1 ) fb = i ;  $ ~~~~num_b ++ ;  $ ~~~~lb = i ;  $ ~~~} else if ( a [ i ] == 'c' ) {  $ ~~~~if ( lc == - 1 ) lc = i ;  $ ~~~~num_c ++ ;  $ ~~~}  $ ~~}  $ ~~if ( ! ( fb > la ) || ! ( lc > lb ) ) {  $ ~~~cout << "NO\n" ;  $ ~~} else {  $ ~~~if ( num_c != num_b && num_c != num_a ) {  $ ~~~~cout << "NO\n" ;  $ ~~~} else {  $ ~~~~cout << "YES\n" ;  $ ~~~}  $ ~~}  $ ~}  $ }
int main ( ) {  $ ~long long int a , b , a2 , b2 , k , t ;  $ ~cin >> a >> b >> a2 >> b2 >> k ;  $ ~t = ( min ( b , b2 ) ) - ( max ( a , a2 ) ) + 1 ;  $ ~if ( k <= min ( b , b2 ) && k >= max ( a , a2 ) ) { t -- ; }  $ ~if ( t < 0 ) { t = 0 ; }  $ ~cout << t << endl ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~int n , ans = 1 ;  $ ~cin >> n ;  $ ~cout << n / 2 << endl ;  $ ~for ( int i = 1 ; i <= n / 2 - 1 ; i ++ ) cout << 2 << " " ;  $ ~if ( n % 2 == 0 )  $ ~~cout << 2 << endl ;  $ ~else  $ ~~cout << 3 << endl ;  $ }
long long m , h [ 2 ] , a [ 2 ] , x [ 2 ] , y [ 2 ] ;  $ long long vis [ 1000001 ] [ 2 ] ;  $ vector < long long > b [ 2 ] ;  $ long long ans [ 2 ] [ 2 ] ;  $ long long val [ 1000001 ] [ 2 ] ;  $ long long pass ( long long i ) {  $ ~vis [ h [ i ] ] [ i ] = 1 ;  $ ~val [ h [ i ] ] [ i ] = 1 ;  $ ~long long va = 2 ;  $ ~b [ i ] . push_back ( h [ i ] ) ;  $ ~while ( vis [ h [ i ] ] [ i ] == 1 ) {  $ ~~h [ i ] = ( x [ i ] * h [ i ] + y [ i ] ) % m ;  $ ~~b [ i ] . push_back ( h [ i ] ) ;  $ ~~if ( vis [ h [ i ] ] [ i ] == 0 ) {  $ ~~~vis [ h [ i ] ] [ i ] ++ ;  $ ~~~val [ h [ i ] ] [ i ] = va ;  $ ~~~va ++ ;  $ ~~} else {  $ ~~~ans [ i ] [ 0 ] = val [ h [ i ] ] [ i ] - 1 ;  $ ~~~ans [ i ] [ 1 ] = va - val [ h [ i ] ] [ i ] ;  $ ~~~return 0 ;  $ ~~}  $ ~}  $ }  $ int main ( ) {  $ ~cin >> m >> h [ 0 ] >> a [ 0 ] >> x [ 0 ] >> y [ 0 ] >> h [ 1 ] >> a [ 1 ] >> x [ 1 ] >> y [ 1 ] ;  $ ~pass ( 0 ) ;  $ ~pass ( 1 ) ;  $ ~if ( vis [ a [ 0 ] ] [ 0 ] == 0 || vis [ a [ 1 ] ] [ 1 ] == 0 ) {  $ ~~cout << - 1 << endl ;  $ ~~return 0 ;  $ ~}  $ ~long long va1 = val [ a [ 0 ] ] [ 0 ] , va2 = val [ a [ 1 ] ] [ 1 ] ;  $ ~long long cy1 = ans [ 0 ] [ 1 ] , cy2 = ans [ 1 ] [ 1 ] ;  $ ~if ( val [ a [ 0 ] ] [ 0 ] == val [ a [ 1 ] ] [ 1 ] ) {  $ ~~cout << val [ a [ 0 ] ] [ 0 ] - 1 << endl ;  $ ~~return 0 ;  $ ~}  $ ~if ( val [ a [ 0 ] ] [ 0 ] <= ans [ 0 ] [ 0 ] && val [ a [ 1 ] ] [ 1 ] <= ans [ 1 ] [ 0 ] ) {  $ ~~cout << - 1 << endl ;  $ ~~return 0 ;  $ ~} else if ( val [ a [ 0 ] ] [ 0 ] <= ans [ 0 ] [ 0 ] || val [ a [ 1 ] ] [ 1 ] <= ans [ 1 ] [ 0 ] ) {  $ ~~long long mo = abs ( val [ a [ 1 ] ] [ 1 ] - val [ a [ 0 ] ] [ 0 ] ) ;  $ ~~if ( val [ a [ 0 ] ] [ 0 ] > val [ a [ 1 ] ] [ 1 ] && val [ a [ 0 ] ] [ 0 ] <= ans [ 0 ] [ 0 ] ) {  $ ~~~if ( mo % ans [ 1 ] [ 1 ] == 0 )  $ ~~~~cout << val [ a [ 0 ] ] [ 0 ] - 1 << endl ;  $ ~~~else  $ ~~~~cout << - 1 << endl ;  $ ~~} else if ( val [ a [ 0 ] ] [ 0 ] < val [ a [ 1 ] ] [ 1 ] && val [ a [ 1 ] ] [ 1 ] <= ans [ 1 ] [ 0 ] ) {  $ ~~~if ( mo % ans [ 0 ] [ 1 ] == 0 )  $ ~~~~cout << val [ a [ 1 ] ] [ 1 ] - 1 << endl ;  $ ~~~else  $ ~~~~cout << - 1 << endl ;  $ ~~} else {  $ ~~~cout << - 1 << endl ;  $ ~~}  $ ~~return 0 ;  $ ~}  $ ~if ( abs ( va1 - va2 ) % __gcd ( cy1 , cy2 ) != 0 ) {  $ ~~cout << - 1 << endl ;  $ ~~return 0 ;  $ ~}  $ ~for ( long long i = 0 ; i < 1000001 ; i ++ ) {  $ ~~long long va = va1 - va2 + i * cy1 ;  $ ~~if ( va % cy2 == 0 && va >= 0 ) {  $ ~~~cout << va1 + i * cy1 - 1 << endl ;  $ ~~~return 0 ;  $ ~~}  $ ~}  $ ~return 0 ;  $ }
const long long int inf = 1e15 ;  $ const int M = 1e9 + 7 ;  $ int arr [ 5000000 ] ;  $ int main ( ) {  $ ~int n ;  $ ~cin >> n ;  $ ~for ( int i = 0 ; i < n ; ++ i ) { cin >> arr [ i ] ; }  $ ~sort ( arr , arr + n ) ;  $ ~int i = 0 , county = 0 ;  $ ~for ( int j = 0 ; j < n , j < n ; ++ j ) {  $ ~~if ( arr [ i ] < arr [ j ] ) {  $ ~~~county ++ ;  $ ~~~i ++ ;  $ ~~}  $ ~}  $ ~cout << county << endl ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~long long n , m , k , a ;  $ ~cin >> n >> m >> k ;  $ ~long long minn = 20000000000 ;  $ ~for ( int i = 0 ; i < n ; i ++ ) {  $ ~~cin >> a ;  $ ~~if ( i % 2 == 0 ) minn = min ( a , minn ) ;  $ ~}  $ ~if ( n % 2 ) {  $ ~~if ( n / 2 + 1 <= m ) {  $ ~~~long long x = n / 2 + 1 ;  $ ~~~x = m / x * k ;  $ ~~~cout << ( x < minn ? x : minn ) << endl ;  $ ~~} else {  $ ~~~cout << 0 << endl ;  $ ~~}  $ ~} else  $ ~~cout << 0 << endl ;  $ }
int tab [ 55 ] [ 55 ] ;  $ int vis [ 55 ] [ 55 ] ;  $ int n , m ;  $ void czysc ( ) {  $ ~for ( int i = 1 ; i <= n ; i ++ ) {  $ ~~for ( int j = 1 ; j <= m ; j ++ ) { vis [ i ] [ j ] = 0 ; }  $ ~}  $ ~return ;  $ }  $ void dfs ( int i , int j ) {  $ ~vis [ i ] [ j ] = 1 ;  $ ~if ( tab [ i + 1 ] [ j ] == 1 && vis [ i + 1 ] [ j ] == 0 ) { dfs ( i + 1 , j ) ; }  $ ~if ( tab [ i - 1 ] [ j ] == 1 && vis [ i - 1 ] [ j ] == 0 ) { dfs ( i - 1 , j ) ; }  $ ~if ( tab [ i ] [ j + 1 ] == 1 && vis [ i ] [ j + 1 ] == 0 ) { dfs ( i , j + 1 ) ; }  $ ~if ( tab [ i ] [ j - 1 ] == 1 && vis [ i ] [ j - 1 ] == 0 ) { dfs ( i , j - 1 ) ; }  $ ~return ;  $ }  $ int main ( ) {  $ ~char c ;  $ ~cin >> n >> m ;  $ ~int licz = 0 ;  $ ~for ( int i = 1 ; i <= n ; i ++ ) {  $ ~~for ( int j = 1 ; j <= m ; j ++ ) {  $ ~~~cin >> c ;  $ ~~~if ( c == '#' ) {  $ ~~~~tab [ i ] [ j ] = 1 ;  $ ~~~~licz ++ ;  $ ~~~}  $ ~~}  $ ~}  $ ~if ( licz < 3 ) {  $ ~~cout << "-1" << endl ;  $ ~~return 0 ;  $ ~}  $ ~int wynik = 5 ;  $ ~int akt ;  $ ~int odw ;  $ ~for ( int i = 1 ; i <= n ; i ++ ) {  $ ~~for ( int j = 1 ; j <= m ; j ++ ) {  $ ~~~if ( tab [ i ] [ j ] == 1 ) {  $ ~~~~akt = 0 ;  $ ~~~~akt = tab [ i + 1 ] [ j ] + tab [ i - 1 ] [ j ] + tab [ i ] [ j + 1 ] + tab [ i ] [ j - 1 ] ;  $ ~~~~if ( akt == 1 ) {  $ ~~~~~cout << "1" << endl ;  $ ~~~~~return 0 ;  $ ~~~~} else {  $ ~~~~~czysc ( ) ;  $ ~~~~~tab [ i ] [ j ] = 0 ;  $ ~~~~~if ( tab [ i + 1 ] [ j ] == 1 ) {  $ ~~~~~~dfs ( i + 1 , j ) ;  $ ~~~~~} else {  $ ~~~~~~if ( tab [ i - 1 ] [ j ] == 1 ) {  $ ~~~~~~~dfs ( i - 1 , j ) ;  $ ~~~~~~} else {  $ ~~~~~~~dfs ( i , j + 1 ) ;  $ ~~~~~~}  $ ~~~~~}  $ ~~~~~tab [ i ] [ j ] = 1 ;  $ ~~~~}  $ ~~~~odw = vis [ i + 1 ] [ j ] + vis [ i - 1 ] [ j ] + vis [ i ] [ j + 1 ] + vis [ i ] [ j - 1 ] ;  $ ~~~~if ( odw < akt ) {  $ ~~~~~cout << "1" << endl ;  $ ~~~~~return 0 ;  $ ~~~~}  $ ~~~}  $ ~~}  $ ~}  $ ~cout << "2" << endl ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~long long x , y ;  $ ~cin >> x >> y ;  $ ~long long awalx = 0 , awaly = 0 , ans = 0 , cnt = 0 ;  $ ~long long add = 1 ;  $ ~while ( awalx != x || awaly != y ) {  $ ~~if ( cnt % 4 == 0 ) {  $ ~~~for ( int i = 0 ; i < add ; i ++ ) {  $ ~~~~awalx ++ ;  $ ~~~~if ( awalx == x && awaly == y ) break ;  $ ~~~}  $ ~~}  $ ~~if ( cnt % 4 == 1 ) {  $ ~~~for ( int i = 0 ; i < add ; i ++ ) {  $ ~~~~awaly ++ ;  $ ~~~~if ( awalx == x && awaly == y ) break ;  $ ~~~}  $ ~~~add ++ ;  $ ~~}  $ ~~if ( cnt % 4 == 2 ) {  $ ~~~for ( int i = 0 ; i < add ; i ++ ) {  $ ~~~~awalx -- ;  $ ~~~~if ( awalx == x && awaly == y ) break ;  $ ~~~}  $ ~~}  $ ~~if ( cnt % 4 == 3 ) {  $ ~~~for ( int i = 0 ; i < add ; i ++ ) {  $ ~~~~awaly -- ;  $ ~~~~if ( awalx == x && awaly == y ) break ;  $ ~~~}  $ ~~~add ++ ;  $ ~~}  $ ~~if ( awalx == x && awaly == y ) break ;  $ ~~cnt ++ ;  $ ~~ans ++ ;  $ ~}  $ ~cout << ans << endl ;  $ }
const int M = 100 + 10 ;  $ int cal_digit ( long long int x ) {  $ ~int num = 0 ;  $ ~while ( x > 0 ) {  $ ~~num ++ ;  $ ~~x = x / 10 ;  $ ~}  $ ~return num ;  $ }  $ long long int cal_equaltod ( int d ) {  $ ~long long int ans = 0 ;  $ ~if ( d == 1 ) { ans = 9 ; }  $ ~if ( d == 2 ) { ans = 9 ; }  $ ~if ( d > 2 ) {  $ ~~long long int num = 1 ;  $ ~~for ( int i = 0 ; i < d - 2 ; i ++ ) { num = 10 * num ; }  $ ~~ans = 9 * num ;  $ ~}  $ ~return ans ;  $ }  $ long long int cal_largerthanorequaltox ( int d , long long int x ) {  $ ~long long int ans = 0 ;  $ ~if ( d == 1 ) { ans = 9 - x + 1 ; }  $ ~if ( d == 2 ) {  $ ~~int id0 = x % 10 ;  $ ~~int id1 = x / 10 ;  $ ~~if ( id1 >= id0 ) {  $ ~~~ans = 9 - id1 + 1 ;  $ ~~} else {  $ ~~~ans = 9 - id1 ;  $ ~~}  $ ~}  $ ~if ( d > 2 ) {  $ ~~long long int d10 = 1 ;  $ ~~for ( int i = 1 ; i <= d - 2 ; i ++ ) { d10 = d10 * 10 ; }  $ ~~int id0 = x % 10 ;  $ ~~int id1 = x / 10 / d10 ;  $ ~~ans = ans + ( 9 - id1 ) * d10 ;  $ ~~long long int mid = x - id1 * 10 * d10 ;  $ ~~mid = mid / 10 ;  $ ~~if ( id1 >= id0 ) {  $ ~~~ans = ans + d10 - 1 - mid + 1 ;  $ ~~} else {  $ ~~~ans = ans + d10 - 1 - mid ;  $ ~~}  $ ~}  $ ~return ans ;  $ }  $ int main ( ) {  $ ~long long int l , r ;  $ ~cin >> l >> r ;  $ ~int ld = cal_digit ( l ) ;  $ ~int rd = cal_digit ( r ) ;  $ ~long long int ans = 0 ;  $ ~for ( int d = ld + 1 ; d < rd ; d ++ ) { ans = ans + cal_equaltod ( d ) ; }  $ ~if ( rd > ld ) {  $ ~~ans = ans + cal_largerthanorequaltox ( ld , l ) ;  $ ~~long long int nxt = r + 1 ;  $ ~~int nxtd = cal_digit ( nxt ) ;  $ ~~long long int tmp = 0 ;  $ ~~if ( nxtd == rd ) { tmp = cal_largerthanorequaltox ( rd , r + 1 ) ; }  $ ~~ans = ans + cal_equaltod ( rd ) - tmp ;  $ ~}  $ ~if ( rd == ld ) {  $ ~~long long int nxt = r + 1 ;  $ ~~int nxtd = cal_digit ( nxt ) ;  $ ~~long long int tmp = 0 ;  $ ~~if ( nxtd == rd ) { tmp = cal_largerthanorequaltox ( rd , r + 1 ) ; }  $ ~~ans = ans + cal_largerthanorequaltox ( ld , l ) - tmp ;  $ ~}  $ ~cout << ans << endl ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~string s ;  $ ~cin >> s ;  $ ~map < char , int > mp ;  $ ~for ( int i = 0 ; i < s . size ( ) ; i ++ ) { mp [ s [ i ] ] ++ ; }  $ ~int mx = min ( mp [ 'i' ] , mp [ 't' ] ) ;  $ ~mx = min ( mx , mp [ 'e' ] / 3 ) ;  $ ~int keep = mp [ 'n' ] ;  $ ~int peek = keep / 2 ;  $ ~if ( keep % 2 == 0 ) peek -- ;  $ ~mx = min ( mx , peek ) ;  $ ~mx = max ( 0 , mx ) ;  $ ~cout << mx << endl ;  $ ~return 0 ;  $ }
long long md = 10e10 , ml = 0 ;  $ vector < int > team ( 7 , 0 ) ;  $ map < string , int > hashi ;  $ map < pair < int , int > , bool > likes ;  $ vector < long long > xp ( 3 ) ;  $ void tri ( int i ) {  $ ~if ( i == 7 ) {  $ ~~long long mie = 10e10 , mae = 0 , lik = 0 ;  $ ~~bool can = true ;  $ ~~for ( int j = 0 ; j < 3 ; j ++ ) {  $ ~~~long long co = 0 ;  $ ~~~for ( int k = 0 ; k < 7 ; k ++ ) {  $ ~~~~if ( team [ k ] == j ) {  $ ~~~~~co ++ ;  $ ~~~~~for ( int l = 0 ; l < 7 ; l ++ ) {  $ ~~~~~~if ( team [ l ] == j && likes [ pair < int , int > ( k , l ) ] ) { lik ++ ; }  $ ~~~~~}  $ ~~~~}  $ ~~~}  $ ~~~if ( co == 0 ) {  $ ~~~~can = false ;  $ ~~~~break ;  $ ~~~}  $ ~~~mie = min ( mie , xp [ j ] / co ) ;  $ ~~~mae = max ( mae , xp [ j ] / co ) ;  $ ~~}  $ ~~if ( can ) {  $ ~~~long long dif = mae - mie ;  $ ~~~if ( dif == md )  $ ~~~~ml = max ( lik , ml ) ;  $ ~~~else if ( dif < md ) {  $ ~~~~md = dif ;  $ ~~~~ml = lik ;  $ ~~~}  $ ~~}  $ ~} else {  $ ~~for ( int j = 0 ; j < 3 ; j ++ ) {  $ ~~~team [ i ] = j ;  $ ~~~tri ( i + 1 ) ;  $ ~~}  $ ~}  $ ~return ;  $ }  $ int main ( ) {  $ ~int n ;  $ ~cin >> n ;  $ ~hashi [ "Trolong long" ] = 0 ;  $ ~hashi [ "Dracul" ] = 1 ;  $ ~hashi [ "Anka" ] = 2 ;  $ ~hashi [ "Snowy" ] = 3 ;  $ ~hashi [ "Hexadecimal" ] = 4 ;  $ ~hashi [ "Chapay" ] = 5 ;  $ ~hashi [ "Cleo" ] = 6 ;  $ ~while ( n -- ) {  $ ~~string p , q ;  $ ~~cin >> p >> q >> q ;  $ ~~likes [ pair < int , int > ( hashi [ p ] , hashi [ q ] ) ] = true ;  $ ~}  $ ~for ( int i = 0 ; i < 3 ; i ++ ) cin >> xp [ i ] ;  $ ~tri ( 0 ) ;  $ ~cout << md << " " << ml << "\n" ;  $ ~return 0 ;  $ }
void read ( int & x ) {  $ ~char ch = getchar ( ) ;  $ ~bool f = 0 ;  $ ~x = 0 ;  $ ~while ( ch > '9' || ch < '0' ) {  $ ~~if ( ch == '-' ) f = 1 ;  $ ~~ch = getchar ( ) ;  $ ~}  $ ~while ( ch >= '0' && ch <= '9' ) {  $ ~~x = x * 10 + ch - 48 ;  $ ~~ch = getchar ( ) ;  $ ~}  $ ~if ( f ) x = - x ;  $ }  $ void read ( long long & x ) {  $ ~char ch = getchar ( ) ;  $ ~bool f = 0 ;  $ ~x = 0 ;  $ ~while ( ch > '9' || ch < '0' ) {  $ ~~if ( ch == '-' ) f = 1 ;  $ ~~ch = getchar ( ) ;  $ ~}  $ ~while ( ch >= '0' && ch <= '9' ) {  $ ~~x = x * 10 + ch - 48 ;  $ ~~ch = getchar ( ) ;  $ ~}  $ ~if ( f ) x = - x ;  $ }  $ int parent [ 150001 ] ;  $ int ranks [ 150001 ] ;  $ long long sizeedge [ 150001 ] ;  $ long long size [ 150001 ] ;  $ void build ( int n ) {  $ ~for ( int i = 0 ; i <= n ; i ++ ) parent [ i ] = i , size [ i ] = 1 LL ;  $ }  $ int find ( int x ) {  $ ~return x = x == parent [ x ] ? x : find ( parent [ x ] ) ;  $ }  $ void merge ( int x , int y ) {  $ ~x = find ( x ) , y = find ( y ) ;  $ ~if ( ranks [ x ] > ranks [ y ] ) swap ( x , y ) ;  $ ~if ( ranks [ x ] == ranks [ y ] ) ranks [ y ] ++ ;  $ ~if ( x != y ) {  $ ~~parent [ x ] = y ;  $ ~~size [ y ] = size [ x ] + size [ y ] ;  $ ~~sizeedge [ y ] = sizeedge [ x ] + sizeedge [ y ] + 1 LL ;  $ ~} else {  $ ~~sizeedge [ y ] ++ ;  $ ~}  $ }  $ int main ( ) {  $ ~int v , e ;  $ ~read ( v ) ;  $ ~read ( e ) ;  $ ~build ( v ) ;  $ ~for ( int i = 0 ; i < e ; i ++ ) {  $ ~~int from , to ;  $ ~~read ( from ) ;  $ ~~read ( to ) ;  $ ~~merge ( from , to ) ;  $ ~}  $ ~for ( int i = 1 ; i <= v ; i ++ ) {  $ ~~if ( i == find ( i ) ) {  $ ~~~if ( sizeedge [ i ] != size [ i ] * ( size [ i ] - 1 ) / 2 ) {  $ ~~~~puts ( "NO" ) ;  $ ~~~~return 0 ;  $ ~~~}  $ ~~}  $ ~}  $ ~puts ( "YES" ) ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~int ct = 0 , foo = 1 ;  $ ~string str1 , str2 ;  $ ~int arr1 [ 27 ] = { } , arr2 [ 27 ] = { } ;  $ ~cin >> str1 >> str2 ;  $ ~int n1 = str1 . size ( ) ;  $ ~int n2 = str2 . size ( ) ;  $ ~if ( n1 != n2 ) {  $ ~~cout << "NO\n" ;  $ ~~return 0 ;  $ ~} else {  $ ~~for ( int i = 0 ; i < n1 ; i ++ ) {  $ ~~~if ( str1 [ i ] != str2 [ i ] ) { ct ++ ; }  $ ~~}  $ ~~for ( int i = 0 ; i < n1 ; i ++ ) {  $ ~~~int temp1 = str1 [ i ] - 'a' ;  $ ~~~int temp2 = str2 [ i ] - 'a' ;  $ ~~~arr1 [ temp1 ] ++ ;  $ ~~~arr2 [ temp2 ] ++ ;  $ ~~}  $ ~~for ( int i = 1 ; i <= 26 ; i ++ ) {  $ ~~~if ( arr1 [ i ] != arr2 [ i ] ) foo = 0 ;  $ ~~}  $ ~~if ( ct <= 2 && foo == 1 )  $ ~~~cout << "YES\n" ;  $ ~~else  $ ~~~cout << "NO\n" ;  $ ~}  $ }
bool comp ( pair < long long , long long > a , pair < long long , long long > b ) {  $ ~return a . first < b . first ;  $ }  $ int main ( ) {  $ ~long long n ;  $ ~string s ;  $ ~cin >> n >> s ;  $ ~bool fl = 0 ;  $ ~long long cnt = 0 , flg = 0 ;  $ ~for ( long long i = 0 ; i < n ; i ++ )  $ ~~if ( s [ i ] == '?' ) cnt ++ ;  $ ~for ( long long i = 0 ; i < n - 1 ; i ++ ) {  $ ~~if ( s [ i ] == s [ i + 1 ] && s [ i ] != '?' ) fl = 1 ;  $ ~}  $ ~if ( fl )  $ ~~cout << "No" << '\n' ;  $ ~else {  $ ~~for ( long long i = 1 ; i < n - 1 ; i ++ ) {  $ ~~~if ( s [ i ] == '?' && s [ i - 1 ] != s [ i + 1 ] && s [ i - 1 ] != '?' && s [ i + 1 ] != '?' ) flg ++ ;  $ ~~}  $ ~~if ( flg == cnt )  $ ~~~cout << "No" << '\n' ;  $ ~~else  $ ~~~cout << "Yes" << '\n' ;  $ ~}  $ ~return 0 ;  $ }
int main ( ) {  $ ~long long x1 , y1 , x2 , y2 ;  $ ~while ( cin >> x1 >> y1 >> x2 >> y2 ) {  $ ~~long long a , b , c ;  $ ~~int n , ans = 0 ;  $ ~~cin >> n ;  $ ~~for ( int i = 0 ; i < n ; i ++ ) {  $ ~~~cin >> a >> b >> c ;  $ ~~~if ( a * x1 + b * y1 + c < 0 && a * x2 + b * y2 + c > 0 ) ans ++ ;  $ ~~~if ( a * x1 + b * y1 + c > 0 && a * x2 + b * y2 + c < 0 ) ans ++ ;  $ ~~}  $ ~~cout << ans << endl ;  $ ~}  $ ~return 0 ;  $ }
int main ( ) {  $ ~long long n , x , y , dB , dW , b1 , b2 , w1 , w2 ;  $ ~cin >> n >> x >> y ;  $ ~if ( x == 1 and y == 1 ) {  $ ~~cout << "White" << endl ;  $ ~} else if ( x == n and y == n ) {  $ ~~cout << "Black" << endl ;  $ ~} else {  $ ~~w1 = x - 1 ;  $ ~~w2 = y - 1 ;  $ ~~dW = max ( w1 , w2 ) ;  $ ~~b1 = n - x ;  $ ~~b2 = n - y ;  $ ~~dB = max ( b1 , b2 ) ;  $ ~~if ( dW == dB or dW < dB ) {  $ ~~~cout << "White" << endl ;  $ ~~} else if ( dB < dW ) {  $ ~~~cout << "Black" << endl ;  $ ~~}  $ ~}  $ }
int A [ 1000 ] ;  $ int main ( ) {  $ ~int n ;  $ ~cin >> n ;  $ ~int two = 1 ;  $ ~while ( two <= n ) two *= 2 ;  $ ~two /= 2 ;  $ ~cout << ( n % 2 ? ( n - 1 ) / 2 : ( n - two ) / 2 ) << endl ;  $ }
unsigned long long n , cp , x , y , a [ 100010 ] ;  $ int main ( ) {  $ ~cin >> n >> x >> y ;  $ ~if ( x > y ) {  $ ~~cp = y ;  $ ~~y = x ;  $ ~~x = cp ;  $ ~}  $ ~unsigned long long sumwhite = y - 1 ;  $ ~unsigned long long sumblack = n - x ;  $ ~;  $ ~puts ( sumwhite <= sumblack ? "White" : "Black" ) ;  $ }
char a [ 100010 ] , b [ 100010 ] ;  $ int i , j = 0 , p = - 1 , q = - 1 ;  $ int main ( ) {  $ ~gets ( a ) , gets ( b ) ;  $ ~for ( i = 0 ; a [ i ] || b [ i ] ; ++ i )  $ ~~if ( a [ i ] != b [ i ] )  $ ~~~if ( ++ j , p < 0 )  $ ~~~~p = i ;  $ ~~~else  $ ~~~~q = i ;  $ ~puts ( j == 2 && a [ p ] == b [ q ] && a [ q ] == b [ p ] ? "YES" : "NO" ) ;  $ ~return 0 ;  $ }
const long long maxn = ( long long ) 1e9 + 7 ;  $ const long double EPS = 1e-9 ;  $ const long long INF = ( long long ) 1e18 + 18 ;  $ const long long mod = ( long long ) 1e9 + 7 ;  $ int main ( ) {  $ ~long long n , k , x = INF ;  $ ~string s , temp ;  $ ~cin >> n >> k >> s ;  $ ~for ( long long i = 1 ; i < s . length ( ) ; i ++ ) {  $ ~~if ( s . substr ( 0 , n - i ) == s . substr ( i , n - i ) ) {  $ ~~~x = i ;  $ ~~~break ;  $ ~~}  $ ~}  $ ~if ( x == INF ) {  $ ~~for ( long long i = 0 ; i < k ; i ++ ) cout << s ;  $ ~~cout << '\n' ;  $ ~~return 0 ;  $ ~}  $ ~string op = s . substr ( n - x , s . length ( ) ) ;  $ ~temp = s ;  $ ~for ( long long i = 0 ; i < k - 1 ; i ++ ) temp += op ;  $ ~cout << temp << '\n' ;  $ }
int main ( ) {  $ ~int n , count , i , j ;  $ ~count = 0 ;  $ ~cin >> n ;  $ ~int line [ n ] = { 0 } ;  $ ~for ( i = 0 ; i < n ; i ++ ) { cin >> line [ i ] ; }  $ ~int max = 0 ;  $ ~for ( i = 0 ; i < n ; i ++ ) {  $ ~~if ( line [ i ] > line [ max ] ) { max = i ; }  $ ~}  $ ~for ( i = max - 1 ; i >= 0 ; i -- ) {  $ ~~int temp = line [ i ] ;  $ ~~line [ i ] = line [ i + 1 ] ;  $ ~~line [ i + 1 ] = temp ;  $ ~~count ++ ;  $ ~}  $ ~int min = 0 ;  $ ~for ( i = 0 ; i < n ; i ++ ) {  $ ~~if ( line [ i ] <= line [ min ] ) { min = i ; }  $ ~}  $ ~cout << count + n - min - 1 << endl ;  $ }
int n , a , b , k ;  $ int s [ 100000 ] ;  $ string inp ;  $ map < int , int > dp ;  $ int bpow ( int n , int e ) {  $ ~int b [ 30 ] ;  $ ~b [ 0 ] = n ;  $ ~for ( int i = 1 ; i < 30 ; i ++ ) b [ i ] = ( ( long long ) b [ i - 1 ] * b [ i - 1 ] ) % 1000000009 ;  $ ~int ans = 1 ;  $ ~for ( int i = 0 ; i < 30 ; i ++ )  $ ~~if ( e & ( 1 << i ) ) ans = ( ( long long ) ans * b [ i ] ) % 1000000009 ;  $ ~return ans ;  $ }  $ int bdiv ( int n , int d ) {  $ ~return ( ( long long ) n * bpow ( d , 1000000009 - 2 ) ) % 1000000009 ;  $ }  $ int alt ( int e ) {  $ ~assert ( e % k == 0 ) ;  $ ~if ( ! dp . count ( e ) ) {  $ ~~if ( e == 0 )  $ ~~~assert ( 0 ) ;  $ ~~else if ( e == k )  $ ~~~dp [ e ] = 1 ;  $ ~~else {  $ ~~~int l = e / 2 / k * k ;  $ ~~~int r = e - l ;  $ ~~~int ans = ( ( ( long long ) alt ( l ) * bpow ( a , r ) ) + ( long long ) alt ( r ) * bpow ( b , l ) ) % 1000000009 ;  $ ~~~dp [ e ] = ans ;  $ ~~}  $ ~}  $ ~return dp [ e ] ;  $ }  $ int main ( ) {  $ ~cin >> n >> a >> b >> k ;  $ ~cin >> inp ;  $ ~for ( int i = 0 ; i < k ; i ++ ) {  $ ~~if ( inp [ i ] == '+' )  $ ~~~s [ i ] = 1 ;  $ ~~else  $ ~~~s [ i ] = - 1 ;  $ ~}  $ ~int x = 0 ;  $ ~for ( int i = 0 ; i < k ; i ++ ) {  $ ~~int toadd = ( ( long long ) s [ i ] * bpow ( a , k - 1 - i ) ) % 1000000009 ;  $ ~~toadd = ( ( long long ) toadd * bpow ( b , i ) ) % 1000000009 ;  $ ~~x = ( ( long long ) x + toadd + 1000000009 ) % 1000000009 ;  $ ~}  $ ~cerr << x << " " << alt ( n + 1 ) << endl ;  $ ~int ans = ( ( long long ) x * alt ( n + 1 ) ) % 1000000009 ;  $ ~cout << ans << endl ;  $ }
long long f ( long long p ) {  $ ~if ( p < 10 ) return p ;  $ ~long long r = p / 10 + 9 , f = p ;  $ ~while ( f >= 10 ) f /= 10 ;  $ ~if ( f > p % 10 ) r -- ;  $ ~return r ;  $ }  $ int main ( ) {  $ ~long long m , n ;  $ ~cin >> m >> n ;  $ ~cout << f ( n ) - f ( m - 1 ) << endl ;  $ ~return 0 ;  $ }
char s [ 200000 + 5 ] ;  $ int n ;  $ map < char , int > mp ;  $ int main ( ) {  $ ~cin >> n >> s ;  $ ~mp . clear ( ) ;  $ ~for ( int i = 0 ; i < n ; i ++ ) { mp [ s [ i ] ] ++ ; }  $ ~int flag = 1 ;  $ ~for ( int i = 'a' ; i <= 'z' ; i ++ ) {  $ ~~if ( mp [ i ] > 1 ) {  $ ~~~cout << "Yes" << endl ;  $ ~~~return 0 ;  $ ~~}  $ ~}  $ ~if ( n == 1 )  $ ~~cout << "Yes" << endl ;  $ ~else  $ ~~cout << "No" << endl ;  $ ~return 0 ;  $ }
const double PI = acos ( - 1 ) ;  $ const int INF = 0 x3f3f3f3f ;  $ const int MAXN = 1e3 + 5 ;  $ int main ( ) {  $ ~int n , a , b , c , d , sum , ans = 1 ;  $ ~cin >> n ;  $ ~for ( int i = 0 ; i < n ; i ++ ) {  $ ~~cin >> a >> b >> c >> d ;  $ ~~if ( i == 0 )  $ ~~~sum = a + b + c + d ;  $ ~~else if ( sum < a + b + c + d )  $ ~~~ans ++ ;  $ ~}  $ ~cout << ans << endl ;  $ }
int f [ 110 ] [ 110 ] ;  $ int main ( ) {  $ ~int i , j , n , k , m ;  $ ~while ( cin >> k ) {  $ ~~for ( i = 1 ; i <= 100 ; i ++ )  $ ~~~for ( j = 1 ; j <= 100 ; j ++ ) f [ i ] [ j ] = 0 ;  $ ~~for ( i = 1 ; i <= 100 ; i ++ )  $ ~~~if ( i * ( i - 1 ) * ( i - 2 ) / 6 > k ) break ;  $ ~~n = i - 1 ;  $ ~~for ( i = 1 ; i <= n ; i ++ )  $ ~~~for ( j = 1 ; j <= n ; j ++ )  $ ~~~~if ( i != j ) f [ i ] [ j ] = 1 ;  $ ~~k = k - n * ( n - 1 ) * ( n - 2 ) / 6 ;  $ ~~if ( k > 0 ) {  $ ~~~for ( i = 1 ; i <= 100 ; i ++ )  $ ~~~~if ( i * ( i - 1 ) / 2 > k ) break ;  $ ~~~m = i - 1 ;  $ ~~~for ( i = 1 ; i <= m ; i ++ ) f [ i ] [ n + 1 ] = f [ n + 1 ] [ i ] = 1 ;  $ ~~~n += 1 ;  $ ~~~k = k - ( m - 1 ) * m / 2 ;  $ ~~~if ( k > 0 ) {  $ ~~~~for ( i = 1 ; i <= 100 ; i ++ )  $ ~~~~~if ( i * ( i - 1 ) / 2 > k ) break ;  $ ~~~~m = i - 1 ;  $ ~~~~for ( i = 1 ; i <= m ; i ++ ) f [ i ] [ n + 1 ] = f [ n + 1 ] [ i ] = 1 ;  $ ~~~~n += 1 ;  $ ~~~~k = k - ( m - 1 ) * m / 2 ;  $ ~~~}  $ ~~~for ( i = 1 ; i <= k ; i ++ ) {  $ ~~~~f [ n + i ] [ 1 ] = f [ 1 ] [ n + i ] = 1 ;  $ ~~~~f [ n + i ] [ 2 ] = f [ 2 ] [ n + i ] = 1 ;  $ ~~~}  $ ~~~n += k ;  $ ~~}  $ ~~cout << n << endl ;  $ ~~for ( i = 1 ; i <= n ; i ++ ) {  $ ~~~for ( j = 1 ; j <= n ; j ++ ) cout << f [ i ] [ j ] ;  $ ~~~cout << endl ;  $ ~~}  $ ~}  $ ~return 0 ;  $ }
int fx = 0 , fy = 0 , dx = 0 , dy = 0 ;  $ int main ( ) {  $ ~cin >> fx >> fy ;  $ ~string c ;  $ ~cin >> c ;  $ ~if ( fx == 0 && fy == 0 ) return cout << "Yes" << endl , 0 ;  $ ~for ( int i = 0 ; i < c . size ( ) ; i ++ ) {  $ ~~if ( c [ i ] == 'U' )  $ ~~~dy ++ ;  $ ~~else if ( c [ i ] == 'D' )  $ ~~~dy -- ;  $ ~~else if ( c [ i ] == 'L' )  $ ~~~dx -- ;  $ ~~else  $ ~~~dx ++ ;  $ ~}  $ ~for ( int i = 0 ; i < c . size ( ) ; i ++ ) {  $ ~~int nx = 0 , ny = 0 ;  $ ~~for ( int j = 0 ; j <= i ; j ++ ) {  $ ~~~if ( c [ j ] == 'U' )  $ ~~~~ny ++ ;  $ ~~~else if ( c [ j ] == 'D' )  $ ~~~~ny -- ;  $ ~~~else if ( c [ j ] == 'L' )  $ ~~~~nx -- ;  $ ~~~else  $ ~~~~nx ++ ;  $ ~~}  $ ~~if ( nx == fx && ny == fy ) return cout << "Yes" << endl , 0 ;  $ ~~int k1 = 0 , k2 = 0 ;  $ ~~if ( dx != 0 ) k1 = ( fx - nx ) / dx ;  $ ~~if ( dy != 0 ) k2 = ( fy - ny ) / dy ;  $ ~~if ( dx == 0 ) k1 = k2 ;  $ ~~if ( dy == 0 ) k2 = k1 ;  $ ~~if ( k1 * dx + nx == fx && k2 * dy + ny == fy && k1 == k2 && k1 >= 0 ) return cout << "Yes" << endl , 0 ;  $ ~}  $ ~return cout << "No" << endl , 0 ;  $ }
int n , m ;  $ int main ( ) {  $ ~cin >> n >> m ;  $ ~int a , ans , maxa = - 1 ;  $ ~for ( int i = 1 ; i <= n ; i ++ ) {  $ ~~cin >> a ;  $ ~~if ( ( a % m ) == 0 )  $ ~~~a /= m ;  $ ~~else {  $ ~~~a /= m ;  $ ~~~a ++ ;  $ ~~}  $ ~~if ( a >= maxa ) {  $ ~~~maxa = a ;  $ ~~~ans = i ;  $ ~~}  $ ~}  $ ~cout << ans << "\n" ;  $ ~return 0 ;  $ }
long long arr [ 100010 ] , dp [ 100010 ] [ 2 ] , d [ 100010 ] ;  $ int main ( ) {  $ ~int n ;  $ ~long long ans = 0 ;  $ ~cin >> n ;  $ ~for ( int i = 0 ; i < n ; i ++ ) {  $ ~~cin >> arr [ i ] ;  $ ~~if ( i > 0 ) d [ i ] = abs ( arr [ i ] - arr [ i - 1 ] ) ;  $ ~}  $ ~for ( int i = 1 ; i <= n ; i ++ ) {  $ ~~dp [ i ] [ 0 ] = max ( d [ i ] , d [ i ] + dp [ i - 1 ] [ 1 ] ) ;  $ ~~dp [ i ] [ 1 ] = max ( - d [ i ] , dp [ i - 1 ] [ 0 ] - d [ i ] ) ;  $ ~~ans = max ( ans , max ( dp [ i ] [ 0 ] , dp [ i ] [ 1 ] ) ) ;  $ ~}  $ ~cout << ans << endl ;  $ ~return 0 ;  $ }
const int M = 2e5 + 5 ;  $ int G [ 200 ] [ 200 ] , T [ 200 ] [ 200 ] ;  $ int main ( ) {  $ ~int n , m , i , j ;  $ ~cin >> n >> m ;  $ ~bool f = 0 ;  $ ~for ( i = 1 ; i <= n ; i ++ )  $ ~~for ( j = 1 ; j <= m ; j ++ ) {  $ ~~~cin >> G [ i ] [ j ] ;  $ ~~~T [ i ] [ j ] = G [ i ] [ j ] ;  $ ~~}  $ ~vector < int > r , c ;  $ ~for ( i = 1 ; i <= n ; i ++ ) {  $ ~~int mn = 1000 ;  $ ~~for ( j = 1 ; j <= m ; j ++ ) mn = min ( mn , G [ i ] [ j ] ) ;  $ ~~for ( j = 1 ; j <= m ; j ++ ) G [ i ] [ j ] -= mn ;  $ ~~for ( j = 1 ; j <= mn ; j ++ ) r . push_back ( i ) ;  $ ~}  $ ~for ( i = 1 ; i <= m ; i ++ ) {  $ ~~int mn = 1000 ;  $ ~~for ( j = 1 ; j <= n ; j ++ ) mn = min ( mn , G [ j ] [ i ] ) ;  $ ~~for ( j = 1 ; j <= n ; j ++ ) G [ j ] [ i ] -= mn ;  $ ~~for ( j = 1 ; j <= mn ; j ++ ) c . push_back ( i ) ;  $ ~}  $ ~for ( i = 1 ; i <= n ; i ++ )  $ ~~for ( j = 1 ; j <= m ; j ++ ) {  $ ~~~if ( G [ i ] [ j ] ) {  $ ~~~~cout << "-1\n" ;  $ ~~~~return 0 ;  $ ~~~}  $ ~~~G [ i ] [ j ] = T [ i ] [ j ] ;  $ ~~}  $ ~vector < int > r1 , c1 ;  $ ~for ( i = 1 ; i <= m ; i ++ ) {  $ ~~int mn = 1000 ;  $ ~~for ( j = 1 ; j <= n ; j ++ ) mn = min ( mn , G [ j ] [ i ] ) ;  $ ~~for ( j = 1 ; j <= n ; j ++ ) G [ j ] [ i ] -= mn ;  $ ~~for ( j = 1 ; j <= mn ; j ++ ) c1 . push_back ( i ) ;  $ ~}  $ ~for ( i = 1 ; i <= n ; i ++ ) {  $ ~~int mn = 1000 ;  $ ~~for ( j = 1 ; j <= m ; j ++ ) mn = min ( mn , G [ i ] [ j ] ) ;  $ ~~for ( j = 1 ; j <= m ; j ++ ) G [ i ] [ j ] -= mn ;  $ ~~for ( j = 1 ; j <= mn ; j ++ ) r1 . push_back ( i ) ;  $ ~}  $ ~if ( r . size ( ) + c . size ( ) > r1 . size ( ) + c1 . size ( ) ) {  $ ~~r = r1 ;  $ ~~c = c1 ;  $ ~}  $ ~cout << r . size ( ) + c . size ( ) << "\n" ;  $ ~for ( i = 0 ; i < r . size ( ) ; i ++ ) {  $ ~~cout << "row " ;  $ ~~cout << r [ i ] << "\n" ;  $ ~}  $ ~for ( i = 0 ; i < c . size ( ) ; i ++ ) {  $ ~~cout << "col " ;  $ ~~cout << c [ i ] << "\n" ;  $ ~}  $ ~return 0 ;  $ }
int a [ 105 ] ;  $ int main ( ) {  $ ~int n ;  $ ~cin >> n ;  $ ~a [ 0 ] = 0 , a [ n + 1 ] = 1001 ;  $ ~int l = - 1 , maxl = 0 ;  $ ~for ( int i = 1 ; i <= n ; i ++ ) cin >> a [ i ] ;  $ ~for ( int i = 1 ; i <= n + 1 ; i ++ ) {  $ ~~if ( a [ i ] == a [ i - 1 ] + 1 )  $ ~~~l ++ ;  $ ~~else {  $ ~~~maxl = max ( maxl , l ) ;  $ ~~~l = - 1 ;  $ ~~}  $ ~}  $ ~maxl = max ( maxl , l ) ;  $ ~cout << maxl << endl ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~int n ;  $ ~cin >> n ;  $ ~vector < string > s ( n ) ;  $ ~for ( int i = 0 ; i < n ; ++ i ) { cin >> s [ i ] ; }  $ ~string candidates = "RGBYW12345" ;  $ ~map < char , int > pos ;  $ ~for ( int i = 0 ; i < candidates . size ( ) ; ++ i ) { pos [ candidates [ i ] ] = i ; }  $ ~int m = 10 ;  $ ~int res = 8 ;  $ ~for ( int mask = 0 ; mask < ( 1 << m ) ; ++ mask ) {  $ ~~int bits = 0 ;  $ ~~for ( int i = 0 ; i < m ; ++ i ) {  $ ~~~if ( mask & ( 1 << i ) ) { ++ bits ; }  $ ~~}  $ ~~if ( bits >= res ) { continue ; }  $ ~~vector < bool > used ( n , false ) ;  $ ~~for ( int i = 0 ; i < n ; ++ i ) {  $ ~~~int u = pos [ s [ i ] [ 0 ] ] ;  $ ~~~int v = pos [ s [ i ] [ 1 ] ] ;  $ ~~~if ( ( mask & ( 1 << u ) ) && ( mask & ( 1 << v ) ) ) { used [ i ] = true ; }  $ ~~}  $ ~~while ( true ) {  $ ~~~bool updates = false ;  $ ~~~for ( int i = 0 ; i < m ; ++ i ) {  $ ~~~~if ( mask & ( 1 << i ) ) {  $ ~~~~~set < string > t ;  $ ~~~~~for ( int j = 0 ; j < n ; ++ j ) {  $ ~~~~~~if ( candidates [ i ] == s [ j ] [ i / 5 ] && ! used [ j ] ) { t . insert ( s [ j ] ) ; }  $ ~~~~~}  $ ~~~~~if ( t . size ( ) <= 1 ) {  $ ~~~~~~for ( set < string > : : iterator it = t . begin ( ) ; it != t . end ( ) ; ++ it ) {  $ ~~~~~~~for ( int j = 0 ; j < n ; ++ j ) {  $ ~~~~~~~~if ( s [ j ] == * it && ! used [ j ] ) {  $ ~~~~~~~~~used [ j ] = true ;  $ ~~~~~~~~~updates = true ;  $ ~~~~~~~~}  $ ~~~~~~~}  $ ~~~~~~}  $ ~~~~~}  $ ~~~~}  $ ~~~}  $ ~~~if ( ! updates ) { break ; }  $ ~~}  $ ~~set < string > t ;  $ ~~for ( int i = 0 ; i < n ; ++ i ) {  $ ~~~if ( ! used [ i ] ) { t . insert ( s [ i ] ) ; }  $ ~~}  $ ~~if ( t . size ( ) <= 1 ) { res = min ( res , bits ) ; }  $ ~}  $ ~cout << res << endl ;  $ ~return 0 ;  $ }
int a [ 10000000 ] ;  $ int main ( ) {  $ ~string s ;  $ ~int i , j , m , n = 0 , t = 0 , k = 0 ;  $ ~cin >> s ;  $ ~for ( i = 0 ; i < s . length ( ) ; i ++ ) {  $ ~~if ( s [ i ] == '(' )  $ ~~~t ++ ;  $ ~~else if ( s [ i ] == ')' )  $ ~~~t -- ;  $ ~~else {  $ ~~~t -- ;  $ ~~~k ++ ;  $ ~~}  $ ~~if ( t < 0 ) {  $ ~~~cout << "-1" << endl ;  $ ~~~return 0 ;  $ ~~}  $ ~}  $ ~int p = 0 ;  $ ~for ( i = 0 ; i < s . length ( ) ; i ++ ) {  $ ~~if ( s [ i ] == '#' ) {  $ ~~~n ++ ;  $ ~~~if ( n == k ) p -= t ;  $ ~~~p -= 1 ;  $ ~~} else if ( s [ i ] == '(' )  $ ~~~p ++ ;  $ ~~else  $ ~~~p -- ;  $ ~~if ( p < 0 ) {  $ ~~~cout << "-1" << endl ;  $ ~~~return 0 ;  $ ~~}  $ ~}  $ ~for ( i = 1 ; i <= k - 1 ; i ++ ) { cout << 1 << endl ; }  $ ~cout << t + 1 << endl ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~string t ;  $ ~while ( cin >> t ) {  $ ~~string h = t . substr ( 0 , 2 ) ;  $ ~~string m = t . substr ( 3 , 2 ) ;  $ ~~if ( h != "05" && h != "06" && h != "07" && h != "08" && h != "09" ) {  $ ~~~if ( h != "15" && h != "16" && h != "17" && h != "18" && h != "19" ) {  $ ~~~~if ( h == "23" && m >= "32" )  $ ~~~~~cout << "00:00" << '\n' ;  $ ~~~~else {  $ ~~~~~string s = "00" ;  $ ~~~~~s [ 0 ] = h [ 1 ] ;  $ ~~~~~s [ 1 ] = h [ 0 ] ;  $ ~~~~~if ( m >= s ) {  $ ~~~~~~h [ 1 ] = h [ 1 ] + 1 ;  $ ~~~~~~s [ 0 ] = h [ 1 ] ;  $ ~~~~~}  $ ~~~~~cout << h << ":" << s << '\n' ;  $ ~~~~}  $ ~~~} else {  $ ~~~~if ( h == "15" && m < "51" )  $ ~~~~~cout << "15:51" << '\n' ;  $ ~~~~else  $ ~~~~~cout << "20:02" << '\n' ;  $ ~~~}  $ ~~} else {  $ ~~~if ( h == "05" && m < "50" )  $ ~~~~cout << "05:50" << '\n' ;  $ ~~~else  $ ~~~~cout << "10:01" << '\n' ;  $ ~~}  $ ~}  $ ~return 0 ;  $ }
const int Maxn = 1e5 + 100 ;  $ int n , m , a [ Maxn ] ;  $ bool mark [ 2 ] [ Maxn ] ;  $ vector < int > nei [ 2 ] [ Maxn ] ;  $ void dfs ( int x , int v ) {  $ ~for ( int i = 0 ; i < ( int ) nei [ x ] [ v ] . size ( ) ; i ++ ) {  $ ~~int u = nei [ x ] [ v ] [ i ] ;  $ ~~if ( ! mark [ x ] [ u ] ) {  $ ~~~mark [ x ] [ u ] = true ;  $ ~~~if ( x == 0 || a [ u ] != 1 ) dfs ( x , u ) ;  $ ~~}  $ ~}  $ }  $ int main ( ) {  $ ~cin >> n >> m ;  $ ~for ( int i = 0 ; i < n ; i ++ ) { cin >> a [ i ] ; }  $ ~for ( int i = 0 , u , v ; i < m ; i ++ ) {  $ ~~cin >> u >> v ;  $ ~~nei [ 0 ] [ u - 1 ] . push_back ( v - 1 ) ;  $ ~~nei [ 1 ] [ v - 1 ] . push_back ( u - 1 ) ;  $ ~}  $ ~for ( int i = 0 ; i < n ; i ++ ) {  $ ~~if ( a [ i ] == 1 && ! mark [ 0 ] [ i ] )  $ ~~~mark [ 0 ] [ i ] = true , dfs ( 0 , i ) ;  $ ~~else if ( a [ i ] == 2 && ! mark [ 1 ] [ i ] )  $ ~~~mark [ 1 ] [ i ] = true , dfs ( 1 , i ) ;  $ ~}  $ ~for ( int i = 0 ; i < n ; i ++ ) {  $ ~~if ( mark [ 0 ] [ i ] && mark [ 1 ] [ i ] )  $ ~~~cout << 1 << endl ;  $ ~~else  $ ~~~cout << 0 << endl ;  $ ~}  $ }
long long a1 , a2 , n , k , second = 0 , ans = 0 , ans1 ;  $ vector < pair < long long , pair < long long , long long >> > h ;  $ void read ( void ) {  $ ~cin >> n ;  $ ~for ( int i = 0 , x , y , m ; i < n ; ++ i ) {  $ ~~cin >> k ;  $ ~~second += k ;  $ ~~cin >> a1 ;  $ ~~long long t = a1 ;  $ ~~cin >> x >> y >> m ;  $ ~~h . push_back ( make_pair ( 0 , make_pair ( a1 , i + 1 ) ) ) ;  $ ~~ans1 = 0 ;  $ ~~for ( int j = 1 ; j < k ; ++ j ) {  $ ~~~a2 = ( a1 * x + y ) % m ;  $ ~~~if ( a2 < a1 ) ans1 ++ ;  $ ~~~a1 = a2 ;  $ ~~~t = max ( t , a1 ) ;  $ ~~~if ( h . size ( ) <= 200000 ) h . push_back ( make_pair ( ans1 , make_pair ( a1 , i + 1 ) ) ) ;  $ ~~}  $ ~~ans = max ( ans , ans1 ) ;  $ ~}  $ ~sort ( h . begin ( ) , h . end ( ) ) ;  $ ~cout << ans << "\n" ;  $ ~if ( second <= 200000 )  $ ~~for ( int i = 0 ; i < second ; ++ i ) cout << h [ i ] . second . first << " " << h [ i ] . second . second << "\n" ;  $ }  $ int main ( ) {  $ ~read ( ) ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~int n , k ;  $ ~cin >> n >> k ;  $ ~vector < long long > a ( n , 0 ) ;  $ ~for ( int i = 0 ; i < n ; i ++ ) cin >> a [ i ] ;  $ ~sort ( a . begin ( ) , a . end ( ) ) ;  $ ~set < long long > ex ;  $ ~for ( int i = 0 ; i < n ; i ++ ) {  $ ~~if ( ex . find ( a [ i ] ) == ex . end ( ) ) {  $ ~~~long long b = a [ i ] * k ;  $ ~~~if ( b != a [ i ] ) ex . insert ( b ) ;  $ ~~}  $ ~}  $ ~int exCount = 0 ;  $ ~for ( int i = 0 ; i < n ; i ++ ) {  $ ~~if ( ex . find ( a [ i ] ) != ex . end ( ) ) { exCount ++ ; }  $ ~}  $ ~cout << n - exCount << endl ;  $ ~return 0 ;  $ }
string s ;  $ int m ;  $ int main ( ) {  $ ~cin >> s ;  $ ~int l = 0 , r = 0 ;  $ ~for ( int i = 0 ; i < s . size ( ) ; i ++ ) {  $ ~~if ( s [ i ] == '(' ) {  $ ~~~l ++ , r ++ ;  $ ~~} else {  $ ~~~l -- ;  $ ~~~if ( r > 0 ) r -- ;  $ ~~~if ( l < 0 ) {  $ ~~~~cout << - 1 << endl ;  $ ~~~~return 0 ;  $ ~~~}  $ ~~~if ( s [ i ] == '#' ) { r = 0 , m ++ ; }  $ ~~}  $ ~}  $ ~if ( r != 0 ) {  $ ~~cout << - 1 << endl ;  $ ~~return 0 ;  $ ~}  $ ~for ( int i = 0 ; i < m - 1 ; i ++ ) { cout << 1 << endl ; }  $ ~cout << l + 1 << endl ;  $ }
int a [ 1010 ] ;  $ int main ( ) {  $ ~int N , K ;  $ ~cin >> N >> K ;  $ ~for ( int i = 1 ; i <= N * 2 + 1 ; i ++ ) { cin >> a [ i ] ; }  $ ~int k = 0 ;  $ ~for ( int i = 2 ; i <= N * 2 ; i ++ ) {  $ ~~if ( a [ i ] > a [ i - 1 ] + 1 && a [ i ] > a [ i + 1 ] + 1 ) {  $ ~~~a [ i ] -- ;  $ ~~~k ++ ;  $ ~~~if ( k == K ) break ;  $ ~~}  $ ~}  $ ~for ( int i = 1 ; i <= N * 2 ; i ++ ) { cout << a [ i ] << " " ; }  $ ~cout << a [ N * 2 + 1 ] << endl ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~long long a [ 4 ] [ 4 ] ;  $ ~for ( long long i = ( 0 ) ; i < ( 4 ) ; i ++ )  $ ~~for ( long long j = ( 0 ) ; j < ( 4 ) ; j ++ ) cin >> a [ i ] [ j ] ;  $ ~for ( long long i = ( 0 ) ; i < ( 4 ) ; i ++ ) {  $ ~~for ( long long j = ( 0 ) ; j < ( 3 ) ; j ++ ) {  $ ~~~if ( a [ i ] [ j ] == 1 && a [ i ] [ 3 ] == 1 ) {  $ ~~~~cout << "YES"  $ ~~~~~<< "\n" ;  $ ~~~~return 0 ;  $ ~~~}  $ ~~}  $ ~}  $ ~for ( long long i = ( 0 ) ; i < ( 4 ) ; i ++ ) {  $ ~~if ( a [ i ] [ 1 ] == 1 ) {  $ ~~~if ( i >= 2 && a [ i - 2 ] [ 3 ] == 1 ) {  $ ~~~~cout << "YES"  $ ~~~~~<< "\n" ;  $ ~~~~return 0 ;  $ ~~~}  $ ~~~if ( i < 2 && a [ i + 2 ] [ 3 ] == 1 ) {  $ ~~~~cout << "YES"  $ ~~~~~<< "\n" ;  $ ~~~~return 0 ;  $ ~~~}  $ ~~}  $ ~}  $ ~for ( long long i = ( 0 ) ; i < ( 4 ) ; i ++ ) {  $ ~~if ( a [ i ] [ 0 ] == 1 ) {  $ ~~~if ( i >= 1 && a [ i - 1 ] [ 3 ] == 1 ) {  $ ~~~~cout << "YES"  $ ~~~~~<< "\n" ;  $ ~~~~return 0 ;  $ ~~~}  $ ~~~if ( i == 0 && a [ 3 ] [ 3 ] == 1 ) {  $ ~~~~cout << "YES"  $ ~~~~~<< "\n" ;  $ ~~~~return 0 ;  $ ~~~}  $ ~~}  $ ~}  $ ~for ( long long i = ( 0 ) ; i < ( 4 ) ; i ++ ) {  $ ~~if ( a [ i ] [ 2 ] == 1 ) {  $ ~~~if ( i < 3 && a [ i + 1 ] [ 3 ] == 1 ) {  $ ~~~~cout << "YES"  $ ~~~~~<< "\n" ;  $ ~~~~return 0 ;  $ ~~~}  $ ~~~if ( i == 3 && a [ 0 ] [ 3 ] == 1 ) {  $ ~~~~cout << "YES"  $ ~~~~~<< "\n" ;  $ ~~~~return 0 ;  $ ~~~}  $ ~~}  $ ~}  $ ~cout << "NO"  $ ~~<< "\n" ;  $ }
const int s = 1000100 ;  $ int * b ;  $ int main ( ) {  $ ~int n ;  $ ~b = new int [ s ] ;  $ ~cin >> n ;  $ ~for ( int i = 0 ; i < n ; i ++ ) {  $ ~~int a ;  $ ~~cin >> a ;  $ ~~b [ a ] ++ ;  $ ~}  $ ~int ans = 0 ;  $ ~for ( int i = 0 ; i < s - 1 ; i ++ ) {  $ ~~b [ i + 1 ] += b [ i ] / 2 ;  $ ~~b [ i ] = b [ i ] % 2 ;  $ ~~ans += b [ i ] ;  $ ~}  $ ~cout << ans << endl ;  $ ~return 0 ;  $ }
const int N = 1e5 + 7 ;  $ long long a [ N ] , dp [ N ] ;  $ set < long long > x , y ;  $ int main ( ) {  $ ~int aux ;  $ ~cin >> aux ;  $ ~for ( int i = 1 ; i <= aux ; i ++ ) { cin >> a [ i ] ; }  $ ~if ( aux == 2 ) {  $ ~~cout << abs ( a [ 1 ] - a [ 2 ] ) << endl ;  $ ~~return 0 ;  $ ~}  $ ~for ( int i = 1 ; i < aux ; i ++ ) {  $ ~~long long x = abs ( a [ i ] - a [ i + 1 ] ) ;  $ ~~if ( i & 1 )  $ ~~~dp [ i ] = dp [ i - 1 ] + x ;  $ ~~else  $ ~~~dp [ i ] = dp [ i - 1 ] - x ;  $ ~}  $ ~x . insert ( dp [ 1 ] ) ;  $ ~y . insert ( dp [ 2 ] ) ;  $ ~long long result = max ( dp [ 1 ] , dp [ 2 ] ) ;  $ ~result = max ( result , abs ( a [ 2 ] - a [ 3 ] ) ) ;  $ ~for ( int i = 3 ; i < aux ; i ++ ) {  $ ~~result = max ( result , dp [ i ] ) ;  $ ~~result = max ( result , dp [ i ] - * y . begin ( ) ) ;  $ ~~result = max ( result , - ( dp [ i ] - * -- x . end ( ) ) ) ;  $ ~~if ( i & 1 ) {  $ ~~~x . insert ( dp [ i ] ) ;  $ ~~} else {  $ ~~~y . insert ( dp [ i ] ) ;  $ ~~}  $ ~}  $ ~cout << result << endl ;  $ }
bool checkprime ( long long n ) {  $ ~if ( n == 1 ) { return false ; }  $ ~long long i = 2 ;  $ ~while ( i * i <= n ) {  $ ~~if ( n % i == 0 ) { return false ; }  $ ~~i += 1 ;  $ ~}  $ ~return true ;  $ }  $ int main ( ) {  $ ~long long n ;  $ ~cin >> n ;  $ ~if ( n % 2 != 0 && n != 1 )  $ ~~cout << 1 << endl ;  $ ~else {  $ ~~for ( long long i = 1 ; ; i ++ ) {  $ ~~~if ( ! checkprime ( n * i + 1 ) ) {  $ ~~~~cout << i << endl ;  $ ~~~~break ;  $ ~~~}  $ ~~}  $ ~}  $ }
int main ( ) {  $ ~long long n , m , k ;  $ ~cin >> n >> m >> k ;  $ ~if ( n - 1 + m - 1 < k ) {  $ ~~cout << - 1 << endl ;  $ ~~return 0 ;  $ ~}  $ ~if ( n < m ) swap ( n , m ) ;  $ ~long long maxx = 0 ;  $ ~maxx = max ( maxx , n / ( k + 1 ) * m ) ;  $ ~maxx = max ( maxx , m / ( k + 1 ) * n ) ;  $ ~if ( maxx != 0 ) {  $ ~~cout << maxx << endl ;  $ ~~return 0 ;  $ ~}  $ ~k = k - ( n - 1 ) ;  $ ~cout << m / ( k + 1 ) << endl ;  $ ~return 0 ;  $ }
long long i , n , j , s1 = 0 , s2 = 0 , r = 0 ;  $ pair < long long , long long > a [ 107 ] ;  $ int main ( ) {  $ ~cin >> n ;  $ ~for ( i = 1 ; i <= n ; i ++ ) {  $ ~~cin >> a [ i ] . first >> a [ i ] . second ;  $ ~~if ( a [ i ] . first > 0 )  $ ~~~s1 ++ ;  $ ~~else  $ ~~~s2 ++ ;  $ ~}  $ ~if ( s1 == s2 ) {  $ ~~for ( i = 1 ; i <= n ; i ++ ) r += a [ i ] . second ;  $ ~~cout << r << endl ;  $ ~}  $ ~if ( s1 > s2 ) {  $ ~~sort ( a + 1 , a + n + 1 ) ;  $ ~~for ( i = 1 ; i <= s2 ; i ++ ) r += a [ i ] . second ;  $ ~~for ( i = s2 + 1 ; i <= ( 2 * s2 ) + 1 ; i ++ ) r += a [ i ] . second ;  $ ~~cout << r << endl ;  $ ~}  $ ~if ( s1 < s2 ) {  $ ~~sort ( a + 1 , a + n + 1 ) ;  $ ~~for ( i = s2 ; i >= s2 - ( s1 ) ; i -- ) r += a [ i ] . second ;  $ ~~for ( i = s2 + 1 ; i <= ( s2 + s1 ) ; i ++ ) r += a [ i ] . second ;  $ ~~cout << r << endl ;  $ ~}  $ ~return 0 ;  $ }
long long n , m , k , a [ 10004 ] ;  $ int main ( ) {  $ ~cin >> n >> m >> k ;  $ ~for ( long long i = 0 ; i < n ; i ++ ) cin >> a [ i ] ;  $ ~if ( n % 2 == 0 ) {  $ ~~cout << "0\n" ;  $ ~~return 0 ;  $ ~}  $ ~long long x = min ( a [ 0 ] , a [ n - 1 ] ) ;  $ ~if ( n == 1 ) {  $ ~~cout << min ( x , m * k ) << endl ;  $ ~~return 0 ;  $ ~}  $ ~for ( long long i = 0 ; i < n ; i += 2 ) { x = min ( x , a [ i ] ) ; }  $ ~long long onerun = ( n + 1 ) / 2 ;  $ ~onerun = m / onerun ;  $ ~long long ans = min ( x , onerun * k ) ;  $ ~cout << ans << endl ;  $ ~return 0 ;  $ }
vector < long long > primeFactures ;  $ void f ( long long q ) {  $ ~while ( q % 2 == 0 ) {  $ ~~primeFactures . push_back ( 2 ) ;  $ ~~if ( primeFactures . size ( ) > 2 ) return ;  $ ~~q /= 2 ;  $ ~}  $ ~for ( long long i = 3 ; i * i <= q ; i += 2 ) {  $ ~~while ( q % i == 0 ) {  $ ~~~primeFactures . push_back ( i ) ;  $ ~~~if ( primeFactures . size ( ) > 2 ) return ;  $ ~~~q /= i ;  $ ~~}  $ ~}  $ ~if ( q > 1 ) primeFactures . push_back ( q ) ;  $ }  $ int main ( ) {  $ ~long long q ;  $ ~cin >> q ;  $ ~f ( q ) ;  $ ~if ( primeFactures . size ( ) <= 1 ) {  $ ~~cout << "1\n0\n" ;  $ ~~return 0 ;  $ ~} else if ( primeFactures . size ( ) > 2 ) {  $ ~~cout << "1\n" << ( primeFactures [ 0 ] * primeFactures [ 1 ] ) << endl ;  $ ~} else {  $ ~~cout << "2\n" ;  $ ~}  $ ~return 0 ;  $ }
int main ( ) {  $ ~char c ;  $ ~int n = 0 , i = 0 , t = 0 , e = 0 ;  $ ~while ( cin >> c ) {  $ ~~if ( c == 'n' ) {  $ ~~~n ++ ;  $ ~~} else if ( c == 'i' ) {  $ ~~~i ++ ;  $ ~~} else if ( c == 't' ) {  $ ~~~t ++ ;  $ ~~} else if ( c == 'e' ) {  $ ~~~e ++ ;  $ ~~}  $ ~}  $ ~int cont = 0 ;  $ ~for ( int k = i ; k > 0 ; k -- ) {  $ ~~if ( n >= 2 * k + 1 && t >= k && e >= 3 * k ) { cont ++ ; }  $ ~}  $ ~cout << cont << endl ;  $ ~return 0 ;  $ }
map < int , int > m ;  $ int main ( ) {  $ ~int n , x , ans = 0 ;  $ ~cin >> n ;  $ ~for ( int i = 0 ; i < n ; i ++ ) {  $ ~~cin >> x ;  $ ~~m [ x ] ++ ;  $ ~}  $ ~map < int , int > : : iterator it ;  $ ~for ( it = m . begin ( ) ; it != m . end ( ) ; it ++ ) ans = max ( ans , it -> second ) ;  $ ~cout << n - ans << endl ;  $ ~return 0 ;  $ }
pair < int , int > a [ 105 ] ;  $ int main ( ) {  $ ~int n , count = 0 ;  $ ~cin >> n ;  $ ~for ( int i = 0 ; i < n ; i ++ ) {  $ ~~cin >> a [ i ] . first >> a [ i ] . second ;  $ ~~if ( a [ i ] . first < 0 ) count ++ ;  $ ~}  $ ~sort ( a , a + n ) ;  $ ~int sum = 0 ;  $ ~if ( 2 * count < n ) {  $ ~~for ( int i = 0 ; i < min ( count * 2 + 1 , n ) ; i ++ ) sum += a [ i ] . second ;  $ ~} else {  $ ~~for ( int i = max ( count * 2 - n - 1 , 0 ) ; i < n ; i ++ ) sum += a [ i ] . second ;  $ ~}  $ ~cout << sum << endl ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~string s ;  $ ~cin >> s ;  $ ~long long l = 0 , i , n = s . size ( ) , a1 = 0 , b1 = 0 , c1 = 0 ;  $ ~char s1 [ n ] ;  $ ~for ( i = 0 ; i < n ; i ++ ) {  $ ~~s1 [ i ] = s [ i ] ;  $ ~~if ( s [ i ] == 'a' ) {  $ ~~~a1 ++ ;  $ ~~} else if ( s [ i ] == 'b' ) {  $ ~~~b1 ++ ;  $ ~~} else {  $ ~~~c1 ++ ;  $ ~~}  $ ~}  $ ~sort ( s1 , s1 + n ) ;  $ ~for ( i = 0 ; i < n ; i ++ ) {  $ ~~if ( s1 [ i ] == s [ i ] ) { l ++ ; }  $ ~}  $ ~if ( l == n ) {  $ ~~if ( ( c1 == a1 || c1 == b1 ) && a1 != 0 && b1 != 0 && c1 != 0 ) {  $ ~~~cout << "YES" << endl ;  $ ~~} else {  $ ~~~cout << "NO" << endl ;  $ ~~}  $ ~} else {  $ ~~cout << "NO" << endl ;  $ ~}  $ ~return 0 ;  $ }
int main ( ) {  $ ~long long a , b , c , s1 = 0 , s2 = 0 , s3 = 0 , flag = 0 , i , flag1 = 0 , flag2 = 0 ;  $ ~string s ;  $ ~cin >> s ;  $ ~long long n = s . size ( ) ;  $ ~for ( i = 0 ; i < n ; i ++ ) {  $ ~~if ( s [ i ] == 'a' ) {  $ ~~~if ( s2 != 0 || s3 != 0 ) {  $ ~~~~flag = 1 ;  $ ~~~~break ;  $ ~~~}  $ ~~~s1 ++ ;  $ ~~}  $ ~~if ( s [ i ] == 'b' ) {  $ ~~~if ( s1 == 0 || s3 != 0 ) {  $ ~~~~flag = 1 ;  $ ~~~~break ;  $ ~~~}  $ ~~~s2 ++ ;  $ ~~}  $ ~~if ( s [ i ] == 'c' ) {  $ ~~~if ( s1 == 0 || s2 == 0 ) {  $ ~~~~flag = 1 ;  $ ~~~~break ;  $ ~~~}  $ ~~~s3 ++ ;  $ ~~}  $ ~}  $ ~if ( s1 == 0 || s2 == 0 ) flag = 1 ;  $ ~if ( ( s1 == s3 || s3 == s2 ) && flag == 0 )  $ ~~cout << "YES" << endl ;  $ ~else  $ ~~cout << "NO" << endl ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~int n , s ;  $ ~cin >> n >> s ;  $ ~string str = "" ;  $ ~for ( int i = 0 ; i < n ; i ++ ) { str += ( char ) ( ( int ) 'a' + i % s ) ; }  $ ~cout << str << endl ;  $ }
int main ( ) {  $ ~long long a , b , c , x , y ;  $ ~cin >> a >> b >> c ;  $ ~x = abs ( a ) ;  $ ~y = abs ( b ) ;  $ ~if ( ( c - a - b ) % 2 == 0 && x + y <= c ) {  $ ~~cout << "Yes" << endl ;  $ ~} else  $ ~~cout << "No" << endl ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~long long n ;  $ ~long long ans ;  $ ~while ( cin >> n ) {  $ ~~if ( n <= 2 )  $ ~~~ans = n ;  $ ~~else if ( n & 1 )  $ ~~~ans = n * ( n - 1 ) * ( n - 2 ) ;  $ ~~else {  $ ~~~if ( n % 3 != 0 )  $ ~~~~ans = n * ( n - 1 ) * ( n - 3 ) ;  $ ~~~else  $ ~~~~ans = ( n - 1 ) * ( n - 2 ) * ( n - 3 ) ;  $ ~~}  $ ~~cout << ans << endl ;  $ ~}  $ }
const int MAXINT = 2147483640 ;  $ const long long MAXLL = 9223372036854775800 LL ;  $ const long long MAXN = 1e6 ;  $ const double eps = 1e-9 ;  $ const long long mod = 998244353 ;  $ long long dp [ 100006 ] [ 202 ] [ 2 ] , pref [ 300 ] [ 2 ] ;  $ long long n , a [ MAXN ] ;  $ int main ( ) {  $ ~srand ( time ( 0 ) ) ;  $ ~cin >> n ;  $ ~for ( int i = 1 ; i <= n ; ++ i ) cin >> a [ i ] ;  $ ~if ( a [ 1 ] == - 1 )  $ ~~for ( int j = 1 ; j <= 200 ; ++ j ) dp [ 1 ] [ j ] [ 0 ] = 1 ;  $ ~else  $ ~~dp [ 1 ] [ a [ 1 ] ] [ 0 ] = 1 ;  $ ~for ( int i = 2 ; i <= n ; ++ i ) {  $ ~~for ( int j = 1 ; j <= 200 ; ++ j ) {  $ ~~~( pref [ j ] [ 1 ] = pref [ j - 1 ] [ 1 ] + dp [ i - 1 ] [ j ] [ 1 ] ) %= mod ;  $ ~~~( pref [ j ] [ 0 ] = pref [ j - 1 ] [ 0 ] + dp [ i - 1 ] [ j ] [ 0 ] ) %= mod ;  $ ~~}  $ ~~if ( a [ i ] == - 1 ) {  $ ~~~for ( int cur = 1 ; cur <= 200 ; ++ cur ) {  $ ~~~~long long sum = 0 ;  $ ~~~~( sum += ( pref [ 200 ] [ 1 ] - pref [ cur - 1 ] [ 1 ] + mod ) ) %= mod ;  $ ~~~~( sum += dp [ i - 1 ] [ cur ] [ 0 ] ) %= mod ;  $ ~~~~( dp [ i ] [ cur ] [ 1 ] += sum ) %= mod ;  $ ~~~~sum = pref [ cur - 1 ] [ 1 ] + pref [ cur - 1 ] [ 0 ] ;  $ ~~~~( dp [ i ] [ cur ] [ 0 ] += sum ) %= mod ;  $ ~~~}  $ ~~} else {  $ ~~~long long sum = 0 ;  $ ~~~long long cur = a [ i ] ;  $ ~~~for ( int j = cur ; j <= 200 ; ++ j ) sum += ( dp [ i - 1 ] [ j ] [ 1 ] ) %= mod ;  $ ~~~( sum += dp [ i - 1 ] [ cur ] [ 0 ] ) %= mod ;  $ ~~~( dp [ i ] [ cur ] [ 1 ] += sum ) %= mod ;  $ ~~~sum = 0 ;  $ ~~~for ( int j = 1 ; j < cur ; ++ j ) ( sum += dp [ i - 1 ] [ j ] [ 0 ] + dp [ i - 1 ] [ j ] [ 1 ] ) %= mod ;  $ ~~~( dp [ i ] [ cur ] [ 0 ] += sum ) %= mod ;  $ ~~}  $ ~}  $ ~long long ans = 0 ;  $ ~for ( int i = 1 ; i <= 200 ; ++ i ) ( ans += dp [ n ] [ i ] [ 1 ] ) %= mod ;  $ ~cout << ans << "\n" ;  $ ~return 0 ;  $ }
map < long long int , long long int > m1 ;  $ map < long long int , long long int > : : iterator itr ;  $ bool visited [ 105 ] = { false } ;  $ long long int crush [ 105 ] = { 0 } ;  $ long long int cnt = 0 ;  $ long long int gcd ( long long int a , long long int b ) {  $ ~if ( b == 0 ) return a ;  $ ~return gcd ( b , a % b ) ;  $ }  $ int main ( ) {  $ ~long long int n ;  $ ~cin >> n ;  $ ~for ( long long int i = 1 ; i <= n ; i ++ ) { cin >> crush [ i ] ; }  $ ~long long int ans = 1 ;  $ ~for ( long long int i = 1 ; i <= n ; i ++ ) {  $ ~~if ( ! visited [ i ] ) {  $ ~~~cnt = 1 ;  $ ~~~visited [ i ] = true ;  $ ~~~long long int z = crush [ i ] ;  $ ~~~while ( z != i ) {  $ ~~~~if ( visited [ z ] == true && cnt > 1 ) {  $ ~~~~~cout << "-1" << endl ;  $ ~~~~~return 0 ;  $ ~~~~}  $ ~~~~visited [ z ] = true ;  $ ~~~~z = crush [ z ] ;  $ ~~~~cnt ++ ;  $ ~~~}  $ ~~~if ( cnt % 2 == 0 ) cnt /= 2 ;  $ ~~~long long int y = gcd ( ans , cnt ) ;  $ ~~~ans = ans * cnt / y ;  $ ~~~cnt = 1 ;  $ ~~}  $ ~}  $ ~cout << ans << endl ;  $ ~return 0 ;  $ }
long long dp [ 20 ] [ 10 ] [ 10 ] ;  $ int d [ 20 ] ;  $ long long l , r ;  $ long long work ( int pos , int pre , int head , int flag ) {  $ ~if ( pos < 0 ) { return ( head && ( head == pre ) ) ; }  $ ~if ( flag || dp [ pos ] [ pre ] [ head ] == - 1 ) {  $ ~~int maxx = flag ? d [ pos ] : 9 ;  $ ~~long long ret = 0 ;  $ ~~for ( int i = 0 ; i <= maxx ; i ++ ) { ret += work ( pos - 1 , i , head ? head : i , flag && ( i == d [ pos ] ) ) ; }  $ ~~if ( flag ) return ret ;  $ ~~dp [ pos ] [ pre ] [ head ] = ret ;  $ ~}  $ ~return dp [ pos ] [ pre ] [ head ] ;  $ }  $ long long solve ( long long x ) {  $ ~int len = 0 ;  $ ~while ( x ) {  $ ~~d [ len ++ ] = x % 10 ;  $ ~~x /= 10 ;  $ ~}  $ ~memset ( dp , - 1 , sizeof dp ) ;  $ ~return work ( len - 1 , 0 , 0 , 1 ) ;  $ }  $ int main ( ) {  $ ~cin >> l >> r ;  $ ~cout << solve ( r ) - solve ( l - 1 ) << endl ;  $ }
int main ( ) {  $ ~long long int n , u = 0 ;  $ ~cin >> n ;  $ ~for ( long long int i = 2 ; i * i <= n ; i ++ ) {  $ ~~if ( n % i == 0 && ! u ) n /= i , u = i ;  $ ~~if ( n % i == 0 && n > i ) {  $ ~~~cout << "1\n" << u * i << endl ;  $ ~~~return 0 ;  $ ~~}  $ ~}  $ ~if ( ! u )  $ ~~cout << "1\n0\n" ;  $ ~else  $ ~~cout << "2\n" ;  $ }
inline long long gcd ( long long a , long long b ) {  $ ~if ( a == 0 ) return b ;  $ ~return gcd ( b % a , a ) ;  $ }  $ inline long long power ( long long a , long long n , long long m ) {  $ ~if ( n == 0 ) return 1 ;  $ ~long long p = power ( a , n / 2 , m ) ;  $ ~p = ( p * p ) % m ;  $ ~if ( n % 2 )  $ ~~return ( p * a ) % m ;  $ ~else  $ ~~return p ;  $ }  $ const long long MOD = 998244353 ;  $ const int INF = 0 x3f3f3f3f ;  $ const long long LL_INF = 0 x3f3f3f3f3f3f3f3f ;  $ int adj [ 101 ] [ 101 ] ;  $ int main ( ) {  $ ~int k ;  $ ~cin >> k ;  $ ~int l = 3 , u = 100 ;  $ ~int vn = 1 ;  $ ~int ans , n , ans1 , x ;  $ ~while ( u >= l ) {  $ ~~n = ( u + l ) / 2 ;  $ ~~x = ( n * ( n - 1 ) ) * ( n - 2 ) ;  $ ~~if ( x > ( 6 * k ) ) {  $ ~~~u = n - 1 ;  $ ~~} else {  $ ~~~ans = n ;  $ ~~~l = n + 1 ;  $ ~~}  $ ~}  $ ~x = ans * ( ans - 1 ) ;  $ ~x = x * ( ans - 2 ) ;  $ ~k = k - x / 6 ;  $ ~for ( int i = 1 ; i <= ans ; i ++ )  $ ~~for ( int j = 1 ; j <= ans ; j ++ )  $ ~~~if ( i != j ) {  $ ~~~~adj [ i ] [ j ] = 1 ;  $ ~~~~adj [ j ] [ i ] = 1 ;  $ ~~~}  $ ~vn = vn + ans ;  $ ~while ( k > 0 ) {  $ ~~l = 2 ;  $ ~~u = ans ;  $ ~~while ( u >= l ) {  $ ~~~n = ( u + l ) / 2 ;  $ ~~~x = n * ( n - 1 ) ;  $ ~~~if ( x <= ( 2 * k ) ) {  $ ~~~~ans1 = n ;  $ ~~~~l = n + 1 ;  $ ~~~} else {  $ ~~~~u = n - 1 ;  $ ~~~}  $ ~~}  $ ~~k = k - ( ans1 * ( ans1 - 1 ) ) / 2 ;  $ ~~for ( int i = 1 ; i <= ans1 ; i ++ ) {  $ ~~~adj [ i ] [ vn ] = 1 ;  $ ~~~adj [ vn ] [ i ] = 1 ;  $ ~~}  $ ~~vn ++ ;  $ ~}  $ ~cout << vn - 1 << endl ;  $ ~for ( int i = 1 ; i <= vn - 1 ; i ++ ) {  $ ~~for ( int j = 1 ; j <= vn - 1 ; j ++ ) cout << adj [ i ] [ j ] ;  $ ~~cout << endl ;  $ ~}  $ }
int main ( ) {  $ ~int x , t , a , b , da , db ;  $ ~cin >> x >> t >> a >> b >> da >> db ;  $ ~for ( int i = 0 ; i < t ; i ++ ) {  $ ~~for ( int j = 0 ; j < t ; j ++ ) {  $ ~~~int p , q ;  $ ~~~p = a - i * da ;  $ ~~~q = b - j * db ;  $ ~~~if ( ( p > - 1 && q > - 1 ) && ( p + q == x || p == x || q == x || x == 0 ) ) {  $ ~~~~cout << "YES" << endl ;  $ ~~~~return 0 ;  $ ~~~}  $ ~~}  $ ~}  $ ~cout << "NO" << endl ;  $ ~return 0 ;  $ }
const int N = 1e5 + 5 ;  $ char s [ N ] ;  $ int main ( ) {  $ ~int i , len , flag = 0 ;  $ ~gets ( s ) ;  $ ~len = strlen ( s ) ;  $ ~for ( i = 0 ; i < len ; ++ i ) {  $ ~~if ( s [ i ] != 'a' ) {  $ ~~~flag = 1 ;  $ ~~~-- s [ i ] ;  $ ~~} else if ( flag )  $ ~~~break ;  $ ~}  $ ~if ( ! flag ) s [ i - 1 ] = 'z' ;  $ ~puts ( s ) ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~int N ;  $ ~cin >> N ;  $ ~string p ;  $ ~cin >> p ;  $ ~bool ok = false ;  $ ~int cnt = 0 ;  $ ~if ( p [ 0 ] == '?' || p [ N - 1 ] == '?' ) ok = true ;  $ ~for ( int i = 1 ; i < N ; i ++ ) {  $ ~~if ( p [ i ] == '?' && ( p [ i - 1 ] == p [ i + 1 ] || p [ i - 1 ] == '?' ) ) {  $ ~~~ok = true ;  $ ~~} else if ( p [ i ] == p [ i - 1 ] ) {  $ ~~~ok = false ;  $ ~~~break ;  $ ~~}  $ ~}  $ ~if ( ok ) {  $ ~~cout << "Yes" << '\n' ;  $ ~} else {  $ ~~cout << "No" << '\n' ;  $ ~}  $ ~return 0 ;  $ }
char data [ 51 ] [ 51 ] ;  $ bool visited [ 51 ] [ 51 ] ;  $ int dr [ ] = { 0 , 0 , 1 , - 1 } ;  $ int dc [ ] = { 1 , - 1 , 0 , 0 } ;  $ int Counter ( int i , int j ) {  $ ~if ( visited [ i ] [ j ] ) return 0 ;  $ ~visited [ i ] [ j ] = true ;  $ ~int ans = 0 ;  $ ~if ( data [ i ] [ j ] == '#' ) {  $ ~~ans ++ ;  $ ~~for ( int x = 0 ; x < 4 ; x ++ ) { ans += Counter ( i + dr [ x ] , j + dc [ x ] ) ; }  $ ~}  $ ~return ans ;  $ }  $ int main ( ) {  $ ~int n , m ;  $ ~cin >> n >> m ;  $ ~int Total = 0 ;  $ ~pair < int , int > start ;  $ ~for ( int i = 0 ; i < n ; i ++ ) {  $ ~~for ( int j = 0 ; j < m ; j ++ ) {  $ ~~~cin >> data [ i ] [ j ] ;  $ ~~~if ( data [ i ] [ j ] == '#' ) Total ++ , start = pair < int , int > ( i , j ) ;  $ ~~}  $ ~}  $ ~memset ( visited , false , sizeof visited ) ;  $ ~int t = Counter ( start . first , start . second ) ;  $ ~if ( t < Total ) {  $ ~~cout << 0 << endl ;  $ ~~return 0 ;  $ ~} else if ( Total < 3 ) {  $ ~~cout << - 1 << endl ;  $ ~~return 0 ;  $ ~} else {  $ ~~int ans = 0 ;  $ ~~for ( int i = 0 ; i < n ; i ++ ) {  $ ~~~for ( int j = 0 ; j < m ; j ++ ) {  $ ~~~~if ( data [ i ] [ j ] == '#' ) {  $ ~~~~~if ( i == 6 && j == 5 ) { int r = 1 ; }  $ ~~~~~memset ( visited , false , sizeof visited ) ;  $ ~~~~~visited [ i ] [ j ] = true ;  $ ~~~~~int x , y ;  $ ~~~~~for ( int k = 0 ; k < 4 ; k ++ ) {  $ ~~~~~~if ( data [ i + dr [ k ] ] [ j + dc [ k ] ] == '#' ) {  $ ~~~~~~~x = i + dr [ k ] ;  $ ~~~~~~~y = j + dc [ k ] ;  $ ~~~~~~~break ;  $ ~~~~~~}  $ ~~~~~}  $ ~~~~~int t = Counter ( x , y ) ;  $ ~~~~~if ( t < Total - 1 ) {  $ ~~~~~~cout << "1" << endl ;  $ ~~~~~~return 0 ;  $ ~~~~~}  $ ~~~~}  $ ~~~}  $ ~~}  $ ~}  $ ~cout << 2 << endl ;  $ ~return 0 ;  $ }
vector < string > R ( vector < string > A ) {  $ ~auto B = A ;  $ ~for ( int i = 0 ; i < A . size ( ) ; i ++ )  $ ~~for ( int j = 0 ; j < A . size ( ) ; j ++ ) B [ j ] [ i ] = A [ i ] [ j ] ;  $ ~for ( auto & s : B ) reverse ( s . begin ( ) , s . end ( ) ) ;  $ ~return B ;  $ }  $ int main ( ) {  $ ~int n ;  $ ~cin >> n ;  $ ~vector < string > A ( n ) , B ( n ) ;  $ ~for ( auto & s : A ) cin >> s ;  $ ~for ( auto & s : B ) cin >> s ;  $ ~bool OK = A == B ;  $ ~for ( int j = 0 ; j < 4 ; j ++ ) {  $ ~~A = R ( A ) ;  $ ~~if ( A == B ) OK = 1 ;  $ ~}  $ ~for ( auto & s : A ) reverse ( s . begin ( ) , s . end ( ) ) ;  $ ~for ( int j = 0 ; j < 4 ; j ++ ) {  $ ~~A = R ( A ) ;  $ ~~if ( A == B ) OK = 1 ;  $ ~}  $ ~for ( int i = 0 ; i < n / 2 ; i ++ ) swap ( A [ i ] , A [ n - 1 - i ] ) ;  $ ~for ( int j = 0 ; j < 4 ; j ++ ) {  $ ~~A = R ( A ) ;  $ ~~if ( A == B ) OK = 1 ;  $ ~}  $ ~cout << ( OK ? "Yes\n" : "No\n" ) ;  $ }
int main ( ) {  $ ~int n , x1 , y1 , x2 , y2 ;  $ ~cin >> n >> x1 >> y1 >> x2 >> y2 ;  $ ~if ( ( x1 == n && x2 == 0 ) || ( x1 == 0 && x2 == n ) ) {  $ ~~if ( ( y1 + y2 + n ) <= ( n - y1 + n - y2 + n ) ) {  $ ~~~cout << y1 + y2 + n << endl ;  $ ~~} else {  $ ~~~cout << ( n - y1 + n - y2 + n ) << endl ;  $ ~~}  $ ~} else if ( ( x1 == n && y2 == 0 ) || ( x2 == n && y1 == 0 ) ) {  $ ~~if ( x1 == n && y2 == 0 ) {  $ ~~~cout << y1 + ( n - x2 ) << endl ;  $ ~~} else {  $ ~~~cout << ( n - x1 ) + y2 << endl ;  $ ~~}  $ ~} else if ( ( x1 == n && y2 == n ) || ( y1 == n && x2 == n ) ) {  $ ~~cout << abs ( x1 - y1 ) + abs ( x2 - y2 ) << endl ;  $ ~} else if ( ( y1 == n && x2 == 0 ) || ( y2 == n && x1 == 0 ) ) {  $ ~~if ( y1 == n && x2 == 0 ) {  $ ~~~cout << x1 + ( n - y2 ) << endl ;  $ ~~} else {  $ ~~~cout << x2 + ( n - y1 ) << endl ;  $ ~~}  $ ~} else if ( ( y1 == n && y2 == 0 ) || ( y1 == 0 && y2 == n ) ) {  $ ~~if ( ( x1 + x2 + n ) <= ( n - x1 + n - x2 + n ) ) {  $ ~~~cout << x1 + x2 + n << endl ;  $ ~~} else {  $ ~~~cout << n - x1 + n - x2 + n << endl ;  $ ~~}  $ ~} else if ( ( y1 == 0 && x2 == 0 ) || ( x1 == 0 && y2 == 0 ) ) {  $ ~~cout << x1 + x2 + y1 + y2 << endl ;  $ ~} else {  $ ~~cout << abs ( x1 - x2 ) + abs ( y1 - y2 ) << endl ;  $ ~}  $ }
long long vis1 [ 1000005 ] ;  $ long long vis2 [ 1000005 ] ;  $ int main ( ) {  $ ~long long m ;  $ ~long long h1 , a1 ;  $ ~long long x1 , y1 ;  $ ~long long h2 , a2 ;  $ ~long long x2 , y2 ;  $ ~cin >> m >> h1 >> a1 >> x1 >> y1 >> h2 >> a2 >> x2 >> y2 ;  $ ~memset ( vis1 , 0 , sizeof ( vis1 ) ) ;  $ ~memset ( vis2 , 0 , sizeof ( vis2 ) ) ;  $ ~long long t1 = - 1 , t2 = - 1 ;  $ ~long long c1 = - 1 , c2 = - 1 ;  $ ~long long q1 = - 1 , q2 = - 1 ;  $ ~long long f1 = - 1 , f2 = - 1 ;  $ ~bool flag = true ;  $ ~bool fuck = false ;  $ ~for ( long long i = 1 ; i <= 2 * m ; i ++ ) {  $ ~~h1 *= x1 ;  $ ~~h1 %= m ;  $ ~~h1 += y1 ;  $ ~~h1 %= m ;  $ ~~h2 *= x2 ;  $ ~~h2 %= m ;  $ ~~h2 += y2 ;  $ ~~h2 %= m ;  $ ~~if ( h1 == a1 && a2 == h2 ) {  $ ~~~fuck = true ;  $ ~~~cout << i << endl ;  $ ~~~break ;  $ ~~}  $ ~~if ( vis1 [ a1 ] == 0 && h1 == a1 ) { f1 = i ; }  $ ~~if ( vis2 [ a2 ] == 0 && h2 == a2 ) { f2 = i ; }  $ ~~if ( h1 == a1 && t1 == - 1 ) { c1 = i ; }  $ ~~if ( h2 == a2 && t2 == - 1 ) { c2 = i ; }  $ ~~if ( vis1 [ h1 ] != 0 && q1 == - 1 ) {  $ ~~~q1 = vis1 [ h1 ] ;  $ ~~~t1 = i - q1 ;  $ ~~~if ( c1 < q1 ) {  $ ~~~~flag = false ;  $ ~~~~break ;  $ ~~~} else {  $ ~~~~c1 = c1 - q1 ;  $ ~~~}  $ ~~}  $ ~~if ( vis2 [ h2 ] != 0 && q2 == - 1 ) {  $ ~~~q2 = vis2 [ h2 ] ;  $ ~~~t2 = i - q2 ;  $ ~~~if ( c2 < q2 ) {  $ ~~~~flag = false ;  $ ~~~~break ;  $ ~~~} else {  $ ~~~~c2 = c2 - q2 ;  $ ~~~}  $ ~~}  $ ~~if ( t1 != - 1 && t2 != - 1 ) { break ; }  $ ~~if ( vis1 [ h1 ] == 0 ) vis1 [ h1 ] = i ;  $ ~~if ( vis2 [ h2 ] == 0 ) vis2 [ h2 ] = i ;  $ ~}  $ ~if ( fuck ) {  $ ~} else if ( ! flag ) {  $ ~~if ( f1 != f2 || f1 == - 1 || f2 == - 1 )  $ ~~~cout << "-1\n" ;  $ ~~else  $ ~~~cout << f1 + 1 << "\n" ;  $ ~} else {  $ ~~if ( f1 == f2 && f1 != - 1 && f2 != - 2 ) {  $ ~~~cout << f1 << "\n" ;  $ ~~} else if ( t1 == t2 && ( ( c1 == c2 && f1 != f2 ) || c1 != c2 ) ) {  $ ~~~cout << "-1\n" ;  $ ~~}  $ ~~else {  $ ~~~long long x = 0 ;  $ ~~~while ( ( x * t1 + c1 + q1 - c2 - q2 ) % t2 != 0 ) {  $ ~~~~x ++ ;  $ ~~~~if ( x > 1000000 ) { break ; }  $ ~~~}  $ ~~~if ( x > 1000000 ) {  $ ~~~~cout << "-1" << endl ;  $ ~~~} else  $ ~~~~cout << x * t1 + c1 + q1 << "\n" ;  $ ~~}  $ ~}  $ ~return 0 ;  $ }
const int maxn = 1100 ;  $ int a [ maxn ] [ maxn ] , b [ maxn ] ;  $ string s [ 110 ] ;  $ int main ( ) {  $ ~int n ;  $ ~while ( cin >> n ) {  $ ~~for ( int i = 0 ; i < n ; i ++ ) cin >> s [ i ] ;  $ ~~int top = 0 , flag = 0 ;  $ ~~for ( int i = 0 ; i < n ; i ++ )  $ ~~~for ( int j = 0 ; j < n ; j ++ )  $ ~~~~if ( s [ i ] [ j ] == '.' ) {  $ ~~~~~top ++ ;  $ ~~~~~break ;  $ ~~~~}  $ ~~if ( top == n ) {  $ ~~~flag = 1 ;  $ ~~~for ( int i = 0 ; i < n ; i ++ )  $ ~~~~for ( int j = 0 ; j < n ; j ++ )  $ ~~~~~if ( s [ i ] [ j ] == '.' ) {  $ ~~~~~~cout << i + 1 << " " << j + 1 << endl ;  $ ~~~~~~break ;  $ ~~~~~}  $ ~~}  $ ~~top = 0 ;  $ ~~for ( int j = 0 ; j < n ; j ++ )  $ ~~~for ( int i = 0 ; i < n ; i ++ )  $ ~~~~if ( s [ i ] [ j ] == '.' ) {  $ ~~~~~top ++ ;  $ ~~~~~break ;  $ ~~~~}  $ ~~if ( top == n && ! flag ) {  $ ~~~flag = 1 ;  $ ~~~for ( int j = 0 ; j < n ; j ++ )  $ ~~~~for ( int i = 0 ; i < n ; i ++ )  $ ~~~~~if ( s [ i ] [ j ] == '.' ) {  $ ~~~~~~cout << i + 1 << " " << j + 1 << endl ;  $ ~~~~~~break ;  $ ~~~~~}  $ ~~}  $ ~~if ( ! flag ) puts ( "-1" ) ;  $ ~}  $ ~return 0 ;  $ }
int main ( ) {  $ ~int n , a [ 110 ] , i , k = 0 ;  $ ~cin >> n ;  $ ~for ( i = 1 ; i <= n ; i ++ ) {  $ ~~cin >> a [ i ] ;  $ ~~if ( a [ i ] < 0 ) k ++ ;  $ ~}  $ ~if ( k <= 2 )  $ ~~cout << 1 << endl << n << endl ;  $ ~else {  $ ~~if ( k % 2 == 0 )  $ ~~~cout << k / 2 << endl ;  $ ~~else  $ ~~~cout << k / 2 + 1 << endl ;  $ ~~int t = 0 , x = 1 , sum = 0 ;  $ ~~for ( i = 1 ; i <= n ; i ++ ) {  $ ~~~if ( t == 2 && a [ i ] < 0 ) {  $ ~~~~cout << i - x << " " ;  $ ~~~~sum += ( i - x ) ;  $ ~~~~x = i ;  $ ~~~~t = 0 ;  $ ~~~}  $ ~~~if ( a [ i ] < 0 ) t ++ ;  $ ~~}  $ ~~if ( sum < n ) cout << n - sum ;  $ ~~cout << endl ;  $ ~}  $ ~return 0 ;  $ }
const int N = 80 + 5 ;  $ int n , mx ;  $ int now = 0 ;  $ bool active [ N ] ;  $ int v [ N ] ;  $ int res = 0 ;  $ int urm [ N ] ;  $ int main ( ) {  $ ~cin >> n >> mx ;  $ ~for ( int i = 1 ; i <= n ; i ++ ) { cin >> v [ i ] ; }  $ ~for ( int i = 1 ; i <= n ; i ++ ) {  $ ~~int x = v [ i ] ;  $ ~~if ( active [ x ] ) continue ;  $ ~~if ( now == mx ) {  $ ~~~res ++ ;  $ ~~~for ( int j = 1 ; j <= n ; j ++ ) urm [ j ] = ( 1 << 30 ) ;  $ ~~~for ( int j = n ; j > i ; j -- ) { urm [ v [ j ] ] = j ; }  $ ~~~int maurm = 0 , who ;  $ ~~~for ( int j = 1 ; j <= n ; j ++ ) {  $ ~~~~if ( active [ j ] ) {  $ ~~~~~maurm = max ( maurm , urm [ j ] ) ;  $ ~~~~~if ( urm [ j ] == maurm ) { who = j ; }  $ ~~~~}  $ ~~~}  $ ~~~active [ who ] = 0 ;  $ ~~~active [ x ] = 1 ;  $ ~~} else {  $ ~~~now ++ ;  $ ~~~res ++ ;  $ ~~~active [ x ] = 1 ;  $ ~~}  $ ~}  $ ~cout << res << "\n" ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~set < int > h , v ;  $ ~int n ;  $ ~cin >> n ;  $ ~for ( int i = 1 ; i <= n ; i ++ ) {  $ ~~h . insert ( i ) ;  $ ~~v . insert ( i ) ;  $ ~}  $ ~int ans = 0 ;  $ ~for ( int i = 1 ; i <= ( n * n ) ; i ++ ) {  $ ~~int x , y ;  $ ~~cin >> x >> y ;  $ ~~if ( h . find ( x ) != h . end ( ) && v . find ( y ) != v . end ( ) ) {  $ ~~~if ( ans ++ ) cout << ' ' ;  $ ~~~cout << i ;  $ ~~~h . erase ( x ) ;  $ ~~~v . erase ( y ) ;  $ ~~}  $ ~}  $ ~cout << endl ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~int hc = - 1 ;  $ ~string s , a ;  $ ~cin >> s ;  $ ~for ( int i = s . size ( ) ; i >= 0 ; i -- ) {  $ ~~if ( s [ i ] == '0' ) hc = i ;  $ ~}  $ ~for ( int i = 0 ; i < s . size ( ) ; i ++ ) {  $ ~~if ( ( hc == - 1 && i == 0 ) || i == hc ) continue ;  $ ~~a += s [ i ] ;  $ ~}  $ ~cout << a << endl ;  $ ~return 0 ;  $ }
const int MAXN = 5000 + 7 , DELTA = 1000 * 1000 * 1000 + 7 ;  $ long long numberOfPartialAns [ MAXN ] [ MAXN ] ;  $ string s , t ;  $ int main ( ) {  $ ~cin >> s >> t ;  $ ~for ( int i = 1 ; i <= ( int ) s . size ( ) ; ++ i ) {  $ ~~for ( int j = 1 ; j <= ( int ) t . size ( ) ; ++ j ) {  $ ~~~numberOfPartialAns [ i ] [ j ] = numberOfPartialAns [ i ] [ j - 1 ] ;  $ ~~~if ( s [ i - 1 ] == t [ j - 1 ] ) {  $ ~~~~numberOfPartialAns [ i ] [ j ] += numberOfPartialAns [ i - 1 ] [ j - 1 ] ;  $ ~~~~numberOfPartialAns [ i ] [ j ] %= DELTA ;  $ ~~~~numberOfPartialAns [ i ] [ j ] ++ ;  $ ~~~~numberOfPartialAns [ i ] [ j ] %= DELTA ;  $ ~~~}  $ ~~}  $ ~}  $ ~long long ans = 0 ;  $ ~for ( int i = 1 ; i <= ( int ) s . size ( ) ; ++ i ) {  $ ~~ans += numberOfPartialAns [ i ] [ ( int ) t . size ( ) ] ;  $ ~~ans %= DELTA ;  $ ~}  $ ~cout << ans << endl ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~int a , b , d , s ;  $ ~cin >> a >> b >> d ;  $ ~s = abs ( a ) + abs ( b ) ;  $ ~if ( s > d )  $ ~~cout << "No" << endl ;  $ ~else if ( s == d )  $ ~~cout << "Yes" << endl ;  $ ~else {  $ ~~if ( ( d - s ) % 2 == 0 )  $ ~~~cout << "Yes" << endl ;  $ ~~else  $ ~~~cout << "No" << endl ;  $ ~}  $ ~return 0 ;  $ }
int main ( ) {  $ ~long long n , m , k , l ;  $ ~cin >> n >> m >> k >> l ;  $ ~long long sum = k + l ;  $ ~long long out = sum / m ;  $ ~while ( 1 ) {  $ ~~if ( out * m <= n ) {  $ ~~~if ( out * m >= sum ) {  $ ~~~~cout << out << endl ;  $ ~~~~break ;  $ ~~~} else  $ ~~~~out ++ ;  $ ~~} else {  $ ~~~cout << - 1 << endl ;  $ ~~~break ;  $ ~~}  $ ~}  $ ~return 0 ;  $ }
int main ( ) {  $ ~int a [ 5 ] [ 5 ] ;  $ ~int p [ 5 ] ;  $ ~int flag = 0 ;  $ ~memset ( p , 0 , sizeof ( p ) ) ;  $ ~for ( int i = 0 ; i < 4 ; i ++ )  $ ~~for ( int j = 0 ; j < 4 ; j ++ ) {  $ ~~~cin >> a [ i ] [ j ] ;  $ ~~~if ( j == 3 && a [ i ] [ j ] ) p [ i ] = 1 ;  $ ~~}  $ ~for ( int i = 0 ; i < 4 ; i ++ ) {  $ ~~if ( p [ i ] )  $ ~~~for ( int j = 0 ; j < 3 ; j ++ )  $ ~~~~if ( a [ ( i + j + 1 ) % 4 ] [ j ] || a [ i ] [ j ] ) {  $ ~~~~~flag = 1 ;  $ ~~~~~break ;  $ ~~~~}  $ ~}  $ ~puts ( flag ? "YES" : "NO" ) ;  $ }
inline char nc ( ) {  $ ~return getchar ( ) ;  $ }  $ inline void read ( int & x ) {  $ ~char c = nc ( ) ;  $ ~int b = 1 ;  $ ~for ( ; ! ( c >= '0' && c <= '9' ) ; c = nc ( ) )  $ ~~if ( c == '-' ) b = - 1 ;  $ ~for ( x = 0 ; c >= '0' && c <= '9' ; x = x * 10 + c - '0' , c = nc ( ) )  $ ~~;  $ ~x *= b ;  $ }  $ inline void read ( long long & x ) {  $ ~char c = nc ( ) ;  $ ~long long b = 1 ;  $ ~for ( ; ! ( c >= '0' && c <= '9' ) ; c = nc ( ) )  $ ~~if ( c == '-' ) b = - 1 ;  $ ~for ( x = 0 ; c >= '0' && c <= '9' ; x = x * 10 + c - '0' , c = nc ( ) )  $ ~~;  $ ~x *= b ;  $ }  $ inline int read ( char * s ) {  $ ~char c = nc ( ) ;  $ ~int len = 1 ;  $ ~for ( ; ! ( c >= 'a' && c <= 'z' ) ; c = nc ( ) )  $ ~~if ( c == EOF ) return 0 ;  $ ~for ( ; ( c >= 'a' && c <= 'z' ) ; s [ len ++ ] = c , c = nc ( ) )  $ ~~;  $ ~s [ len ++ ] = '\0' ;  $ ~return len - 2 ;  $ }  $ inline void read ( char & x ) {  $ ~for ( x = nc ( ) ; ! ( x >= 'a' && x <= 'z' ) ; x = nc ( ) )  $ ~~;  $ }  $ int wt , ss [ 19 ] ;  $ inline void print ( int x ) {  $ ~if ( x < 0 ) x = - x , putchar ( '-' ) ;  $ ~if ( ! x )  $ ~~putchar ( 48 ) ;  $ ~else {  $ ~~for ( wt = 0 ; x ; ss [ ++ wt ] = x % 10 , x /= 10 )  $ ~~~;  $ ~~for ( ; wt ; putchar ( ss [ wt ] + 48 ) , wt -- )  $ ~~~;  $ ~}  $ }  $ inline void print ( long long x ) {  $ ~if ( x < 0 ) x = - x , putchar ( '-' ) ;  $ ~if ( ! x )  $ ~~putchar ( 48 ) ;  $ ~else {  $ ~~for ( wt = 0 ; x ; ss [ ++ wt ] = x % 10 , x /= 10 )  $ ~~~;  $ ~~for ( ; wt ; putchar ( ss [ wt ] + 48 ) , wt -- )  $ ~~~;  $ ~}  $ }  $ int n , m , a [ 100010 ] ;  $ int Find ( int x ) {  $ ~int l = 1 , r = n , res = 0 , mid ;  $ ~while ( l <= r ) {  $ ~~mid = l + r >> 1 ;  $ ~~if ( a [ mid ] <= x )  $ ~~~res = mid , l = mid + 1 ;  $ ~~else  $ ~~~r = mid - 1 ;  $ ~}  $ ~return res ;  $ }  $ int main ( ) {  $ ~read ( n ) ;  $ ~read ( m ) ;  $ ~for ( int i = 1 ; i <= n ; i ++ ) read ( a [ i ] ) ;  $ ~long long ans = 0 ;  $ ~for ( int i = 1 ; i <= n ; i ++ ) {  $ ~~int x = Find ( a [ i ] + m ) ;  $ ~~if ( x - i + 1 >= 3 ) {  $ ~~~long long y = ( ( long long ) x ) - ( ( long long ) i ) - 1 LL ;  $ ~~~ans += y * ( y + 1 LL ) / 2 LL ;  $ ~~}  $ ~}  $ ~print ( ans ) , puts ( "" ) ;  $ ~return 0 ;  $ }
int n , i , j , x , y , k1 , k2 , ans ;  $ pair < int , int > p1 [ 100001 ] ;  $ pair < int , int > p2 [ 100001 ] ;  $ int main ( ) {  $ ~cin >> n ;  $ ~for ( i = 1 ; i <= n ; i ++ ) {  $ ~~cin >> x >> y ;  $ ~~if ( x < 0 ) {  $ ~~~p1 [ ++ k1 ] . first = x ;  $ ~~~p1 [ k1 ] . second = y ;  $ ~~}  $ ~~if ( x > 0 ) {  $ ~~~p2 [ ++ k2 ] . first = x ;  $ ~~~p2 [ k2 ] . second = y ;  $ ~~}  $ ~}  $ ~sort ( p1 + 1 , p1 + k1 + 1 ) ;  $ ~reverse ( p1 + 1 , p1 + k1 + 1 ) ;  $ ~sort ( p2 + 1 , p2 + k2 + 1 ) ;  $ ~if ( k1 > k2 ) {  $ ~~for ( i = 1 ; i <= k2 ; i ++ ) ans += p1 [ i ] . second + p2 [ i ] . second ;  $ ~~ans += p1 [ i ] . second ;  $ ~}  $ ~if ( k1 == k2 ) {  $ ~~for ( i = 1 ; i <= k2 ; i ++ ) ans += p1 [ i ] . second + p2 [ i ] . second ;  $ ~}  $ ~if ( k1 < k2 ) {  $ ~~for ( i = 1 ; i <= k1 ; i ++ ) ans += p1 [ i ] . second + p2 [ i ] . second ;  $ ~~ans += p2 [ i ] . second ;  $ ~}  $ ~cout << ans << endl ;  $ }
string s ;  $ int i , x , y , z , k , a , b ;  $ int main ( ) {  $ ~cin >> s ;  $ ~for ( i = 0 ; i < s . size ( ) ; i ++ ) {  $ ~~if ( s [ i ] == 'n' ) x ++ ;  $ ~~if ( s [ i ] == 'e' ) y ++ ;  $ ~~if ( s [ i ] == 'i' ) z ++ ;  $ ~~if ( s [ i ] == 't' ) k ++ ;  $ ~}  $ ~if ( x > 2 ) {  $ ~~a = min ( 1 + ( x - 3 ) / 2 , y / 3 ) ;  $ ~~b = min ( z , k ) ;  $ ~} else {  $ ~~cout << 0 << endl ;  $ ~~return 0 ;  $ ~}  $ ~cout << min ( a , b ) << endl ;  $ }
long long a [ 1024 ] ;  $ long long f ( int n ) {  $ ~long long ans = 0 ;  $ ~for ( int i = 1 ; i <= 1024 ; i ++ ) {  $ ~~if ( a [ i ] < n )  $ ~~~ans += a [ i ] * ( a [ i ] - a [ i - 1 ] ) ;  $ ~~else {  $ ~~~ans += a [ i ] * ( n - a [ i - 1 ] ) ;  $ ~~~break ;  $ ~~}  $ ~}  $ ~return ans ;  $ }  $ int main ( ) {  $ ~a [ 1 ] = 4 ;  $ ~a [ 2 ] = 7 ;  $ ~int t = 3 ;  $ ~for ( int i = 1 ; i < 512 ; i ++ ) {  $ ~~a [ t ++ ] = a [ i ] * 10 + 4 ;  $ ~~a [ t ++ ] = a [ i ] * 10 + 7 ;  $ ~}  $ ~int l , r ;  $ ~cin >> l >> r ;  $ ~cout << f ( r ) - f ( l - 1 ) << endl ;  $ ~return 0 ;  $ }
long long int maxSubArraySum ( long long int a [ ] , long long int size ) {  $ ~long long int max_so_far = INT_MIN , max_ending_here = 0 ;  $ ~for ( long long int i = 0 ; i < size ; i ++ ) {  $ ~~max_ending_here = max_ending_here + a [ i ] ;  $ ~~if ( max_so_far < max_ending_here ) max_so_far = max_ending_here ;  $ ~~if ( max_ending_here < 0 ) max_ending_here = 0 ;  $ ~}  $ ~return max_so_far ;  $ }  $ int main ( ) {  $ ~long long int n ;  $ ~cin >> n ;  $ ~long long int ar [ n ] , f [ n - 1 ] , s [ n - 1 ] ;  $ ~for ( long long int i = 0 ; i < n ; ++ i ) cin >> ar [ i ] ;  $ ~for ( long long int i = 0 ; i < n - 1 ; ++ i ) {  $ ~~long long int x = abs ( ar [ i ] - ar [ i + 1 ] ) ;  $ ~~f [ i ] = x ;  $ ~~long long int on = pow ( - 1 , i ) ;  $ ~~f [ i ] *= on ;  $ ~}  $ ~for ( long long int i = 0 ; i < n - 1 ; ++ i ) {  $ ~~long long int x = abs ( ar [ i ] - ar [ i + 1 ] ) ;  $ ~~s [ i ] = x ;  $ ~~long long int on = pow ( - 1 , ( i + 1 ) ) ;  $ ~~s [ i ] *= on ;  $ ~}  $ ~long long int m1 = maxSubArraySum ( f , n - 1 ) ;  $ ~long long int m2 = maxSubArraySum ( s , n - 1 ) ;  $ ~cout << max ( m1 , m2 ) << "\n" ;  $ ~return 0 ;  $ }
const long long linf = 1 LL << 62 ;  $ const int iinf = 1000000009 ;  $ const double dinf = 1e15 ;  $ const int Mod = 1e9 + 9 ;  $ const int maxn = 500005 ;  $ int dcmp ( double x ) {  $ ~if ( fabs ( x ) <= 1e-9 ) return 0 ;  $ ~return x < 0 ? - 1 : 1 ;  $ }  $ int l [ 10 ] , r [ 10 ] , s [ 10 ] , p [ 10 ] ;  $ void solve ( ) {  $ ~for ( int i = 1 ; i <= 4 ; i ++ ) cin >> l [ i ] >> s [ i ] >> r [ i ] >> p [ i ] ;  $ ~if ( p [ 1 ] && ( s [ 1 ] || l [ 1 ] || r [ 1 ] || s [ 3 ] || r [ 4 ] || l [ 2 ] ) )  $ ~~cout << "YES" << '\n' ;  $ ~else if ( p [ 2 ] && ( s [ 2 ] || l [ 2 ] || r [ 2 ] || s [ 4 ] || r [ 1 ] || l [ 3 ] ) )  $ ~~cout << "YES" << '\n' ;  $ ~else if ( p [ 3 ] && ( s [ 1 ] || s [ 3 ] || l [ 3 ] || r [ 3 ] || r [ 2 ] || l [ 4 ] ) )  $ ~~cout << "YES" << '\n' ;  $ ~else if ( p [ 4 ] && ( s [ 4 ] || l [ 4 ] || r [ 4 ] || s [ 2 ] || r [ 3 ] || l [ 1 ] ) )  $ ~~cout << "YES" << '\n' ;  $ ~else  $ ~~cout << "NO" << '\n' ;  $ }  $ int main ( ) {  $ ~int tt = 1 ;  $ ~while ( tt -- ) solve ( ) ;  $ ~return 0 ;  $ }
inline size_t key ( int i , int j ) {  $ ~return ( size_t ) i << 32 | ( unsigned int ) j ;  $ }  $ long long max ( long long a , long long b ) {  $ ~return a > b ? a : b ;  $ }  $ long long min ( long long a , long long b ) {  $ ~return a < b ? a : b ;  $ }  $ int main ( ) {  $ ~string s ;  $ ~cin >> s ;  $ ~int a1 = - 1 ;  $ ~int a2 = INT_MAX ;  $ ~int b1 = - 1 ;  $ ~int b2 = INT_MAX ;  $ ~int a = 0 , b = 0 ;  $ ~for ( int i = 0 ; i < s . length ( ) - 1 ; i ++ ) {  $ ~~if ( s [ i ] == 'A' && s [ i + 1 ] == 'B' ) {  $ ~~~a1 = max ( a1 , i ) ;  $ ~~~a2 = min ( a2 , i ) ;  $ ~~~a = 1 ;  $ ~~} else if ( s [ i ] == 'B' && s [ i + 1 ] == 'A' ) {  $ ~~~b1 = max ( b1 , i ) ;  $ ~~~b2 = min ( b2 , i ) ;  $ ~~~b = 1 ;  $ ~~}  $ ~}  $ ~if ( a && b && ( a1 > b2 + 1 || b1 > a2 + 1 ) ) {  $ ~~cout << "YES\n" ;  $ ~} else {  $ ~~cout << "NO\n" ;  $ ~}  $ ~return 0 ;  $ }
char str [ 1010 ] ;  $ int main ( ) {  $ ~int k , i , j ;  $ ~int flag ;  $ ~cin >> str >> k ;  $ ~flag = 0 ;  $ ~int len = strlen ( str ) ;  $ ~if ( len % k )  $ ~~cout << "NO" << endl ;  $ ~else {  $ ~~int cnt = len / k ;  $ ~~for ( i = 0 ; i < len ; i += cnt ) {  $ ~~~for ( j = 0 ; j < cnt / 2 ; j ++ ) {  $ ~~~~if ( str [ i + j ] != str [ cnt + i - j - 1 ] ) {  $ ~~~~~flag = 1 ;  $ ~~~~~break ;  $ ~~~~}  $ ~~~}  $ ~~~if ( flag ) break ;  $ ~~}  $ ~~if ( flag )  $ ~~~cout << "NO" << endl ;  $ ~~else  $ ~~~cout << "YES" << endl ;  $ ~}  $ ~return 0 ;  $ }
int main ( ) {  $ ~int n , m ;  $ ~float k ;  $ ~string skill_name , new_skill ;  $ ~int skill_level ;  $ ~cin >> n >> m >> k ;  $ ~map < string , int > skills ;  $ ~for ( int i = 0 ; i < n ; i ++ ) {  $ ~~cin >> skill_name >> skill_level ;  $ ~~skill_level = int ( int ( ( k + 0.001 ) * 100 ) * skill_level ) / 100 ;  $ ~~if ( skill_level >= 100 ) { skills . insert ( make_pair ( skill_name , ( skill_level ) ) ) ; }  $ ~}  $ ~for ( int i = 0 ; i < m ; i ++ ) {  $ ~~cin >> new_skill ;  $ ~~if ( skills . find ( new_skill ) == skills . end ( ) ) { skills . insert ( make_pair ( new_skill , 0 ) ) ; }  $ ~}  $ ~cout << skills . size ( ) << endl ;  $ ~map < string , int > : : iterator it ;  $ ~for ( it = skills . begin ( ) ; it != skills . end ( ) ; ++ it ) { cout << it -> first << " " << it -> second << endl ; }  $ ~return 0 ;  $ }
int main ( ) {  $ ~map < int , int > m ;  $ ~map < int , int > : : iterator it , bit ;  $ ~int a , b , c ;  $ ~cin >> a >> b ;  $ ~for ( int i = 1 ; i <= a ; i ++ ) {  $ ~~cin >> c ;  $ ~~m . insert ( make_pair ( i , c ) ) ;  $ ~}  $ ~int i = 1 ;  $ ~it = m . begin ( ) ;  $ ~while ( m . size ( ) != 1 ) {  $ ~~bit = it ;  $ ~~it ++ ;  $ ~~if ( bit -> second <= b ) {  $ ~~~m . erase ( bit ) ;  $ ~~} else  $ ~~~bit -> second -= b ;  $ ~~if ( it == m . end ( ) ) it = m . begin ( ) ;  $ ~}  $ ~it = m . begin ( ) ;  $ ~cout << it -> first << endl ;  $ }
int main ( ) {  $ ~long long int n ;  $ ~cin >> n ;  $ ~if ( n == 1 || n == 2 )  $ ~~cout << n << endl ;  $ ~else {  $ ~~if ( n & 1 )  $ ~~~cout << n * ( n - 1 ) * ( n - 2 ) << endl ;  $ ~~else if ( n % 3 == 0 )  $ ~~~cout << ( n - 1 ) * ( n - 2 ) * ( n - 3 ) << endl ;  $ ~~else  $ ~~~cout << n * ( n - 1 ) * ( n - 3 ) << endl ;  $ ~}  $ ~return 0 ;  $ }
int main ( ) {  $ ~char s [ 100010 ] ;  $ ~gets ( s ) ;  $ ~int i = 0 ;  $ ~int k = 0 ;  $ ~for ( i = 0 ; s [ i ] != '\0' ; i ++ )  $ ~~if ( s [ i ] != 'a' ) break ;  $ ~for ( ; s [ i ] != '\0' ; i ++ ) {  $ ~~if ( s [ i ] == 'a' ) break ;  $ ~~s [ i ] -- ;  $ ~~k ++ ;  $ ~}  $ ~if ( k == 0 ) s [ strlen ( s ) - 1 ] = 'z' ;  $ ~puts ( s ) ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~int a , b , c , d , e , f ;  $ ~cin >> a >> b >> c >> d >> e >> f ;  $ ~if ( b * d * f > a * c * e or c == 0 and d > 0 or a == 0 and b > 0 and d > 0 )  $ ~~cout << "Ron" << endl ;  $ ~else  $ ~~cout << "Hermione" << endl ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~int a ;  $ ~cin >> a ;  $ ~int arr [ a ] ;  $ ~for ( int i = 0 ; i < a ; i ++ ) cin >> arr [ i ] ;  $ ~int ans = 0 ;  $ ~for ( int i = 0 ; i < a ; i ++ ) {  $ ~~int sum = 0 ;  $ ~~if ( arr [ i ] == 1 ) sum ++ ;  $ ~~int e = arr [ i ] ;  $ ~~while ( i < a && arr [ i ] == e ) {  $ ~~~i ++ ;  $ ~~~e ++ ;  $ ~~~sum ++ ;  $ ~~}  $ ~~if ( e == 1001 ) sum ++ ;  $ ~~ans = max ( ans , sum - 2 ) ;  $ ~~i -- ;  $ ~}  $ ~cout << ans << endl ;  $ ~return 0 ;  $ }
const int MAX = 105 ;  $ char ss [ MAX ] ;  $ int n , k ;  $ int main ( ) {  $ ~cin >> n >> k ;  $ ~char s = 'a' ;  $ ~int p , j = 0 ;  $ ~for ( int i = 0 ; i < n ; i ++ ) {  $ ~~ss [ i ] = s + ( j % k ) ;  $ ~~j ++ ;  $ ~}  $ ~cout << ss << endl ;  $ ~return 0 ;  $ }
int n , m , num [ 550 ] ;  $ int main ( ) {  $ ~int u , v , w , i , j ;  $ ~while ( cin >> n >> m ) {  $ ~~memset ( num , 0 , sizeof num ) ;  $ ~~double maxx = 0 ;  $ ~~for ( i = 1 ; i <= n ; i ++ ) cin >> num [ i ] ;  $ ~~for ( i = 0 ; i < m ; i ++ ) {  $ ~~~cin >> u >> v >> w ;  $ ~~~maxx = max ( maxx , ( num [ u ] + num [ v ] ) / ( double ) w ) ;  $ ~~}  $ ~~cout << fixed << setprecision ( 15 ) << maxx << endl ;  $ ~}  $ ~return 0 ;  $ }
long long const MOD = 1e9 + 9 LL ;  $ string s ;  $ long long n , a , b , k ;  $ long long MODULUS ( long long b , long long p ) {  $ ~long long ret = 1 LL ;  $ ~while ( p ) {  $ ~~if ( p & 1 LL ) ret = ( ret * b ) % MOD ;  $ ~~b = ( b * b ) % MOD ;  $ ~~p >> = 1 LL ;  $ ~}  $ ~return ret ;  $ }  $ long long MODINVERSE ( long long x ) {  $ ~return MODULUS ( x , MOD - 2 LL ) ;  $ }  $ long long Add ( long long x , long long y ) {  $ ~x += y ;  $ ~if ( x > MOD ) return x - MOD ;  $ ~return x ;  $ }  $ long long Sub ( long long x , long long y ) {  $ ~x -= y ;  $ ~if ( x < 0 ) return x + MOD ;  $ ~return x ;  $ }  $ long long Mul ( long long x , long long y ) {  $ ~x *= y ;  $ ~return x % MOD ;  $ }  $ long long Div ( long long x , long long y ) {  $ ~return ( x * MODINVERSE ( y ) ) % MOD ;  $ }  $ int main ( ) {  $ ~cin >> n >> a >> b >> k >> s ;  $ ~long long ans = 0 LL ;  $ ~long long x = Div ( b , a ) ;  $ ~long long c = MODULUS ( a , n ) ;  $ ~for ( int i = 0 ; i < k ; i += 1 ) {  $ ~~if ( s [ i ] == '+' ) {  $ ~~~ans = Add ( ans , c ) ;  $ ~~} else {  $ ~~~ans = Sub ( ans , c ) ;  $ ~~}  $ ~~c = Mul ( c , x ) ;  $ ~}  $ ~if ( ans < 0 ) ans += MOD ;  $ ~x = MODULUS ( x , k ) ;  $ ~if ( x == 1 ) {  $ ~~ans = Mul ( ans , ( n + 1 ) / k ) ;  $ ~} else {  $ ~~ans = Mul ( ans , Sub ( MODULUS ( x , ( n + 1 ) / k ) , 1 ) ) ;  $ ~~ans = Div ( ans , Sub ( x , 1 ) ) ;  $ ~}  $ ~cout << ans % MOD << '\n' ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~unsigned long long int n ;  $ ~cin >> n ;  $ ~if ( n <= 127 )  $ ~~cout << "byte\n" ;  $ ~else if ( n <= 32767 )  $ ~~cout << "short\n" ;  $ ~else if ( n <= 2147483647 )  $ ~~cout << "int\n" ;  $ ~else if ( n <= 9223372036854775807 )  $ ~~cout << "long\n" ;  $ ~else  $ ~~cout << "BigInteger\n" ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~int x , y , s , z ;  $ ~cin >> x >> y >> s ;  $ ~z = abs ( x ) + abs ( y ) ;  $ ~if ( z > s ) cout << "No" << endl ;  $ ~if ( z == s ) cout << "Yes" << endl ;  $ ~if ( z < s ) {  $ ~~if ( ( s - z ) % 2 == 0 )  $ ~~~cout << "Yes" << endl ;  $ ~~else  $ ~~~cout << "No" << endl ;  $ ~}  $ ~return 0 ;  $ }
const int N = 2e6 ;  $ bool prime [ N ] ;  $ void Prime ( ) {  $ ~memset ( prime , 0 , sizeof ( prime ) ) ;  $ ~prime [ 1 ] = 1 ;  $ ~for ( int i = 2 ; i < N ; i ++ ) {  $ ~~if ( ! prime [ i ] ) {  $ ~~~for ( int j = i * 2 ; j < N ; j += i ) { prime [ j ] = 1 ; }  $ ~~}  $ ~}  $ }  $ bool is_palindromic ( int n ) {  $ ~int t = n ;  $ ~int fn = 0 ;  $ ~while ( t ) {  $ ~~fn *= 10 ;  $ ~~fn += t % 10 ;  $ ~~t /= 10 ;  $ ~}  $ ~return n == fn ;  $ }  $ int main ( ) {  $ ~double p , q ;  $ ~double A ;  $ ~Prime ( ) ;  $ ~while ( cin >> p >> q ) {  $ ~~int ans = - 1 ;  $ ~~A = p / q ;  $ ~~int pi = 0 ;  $ ~~int pa = 0 ;  $ ~~for ( int i = 1 ; i < N ; i ++ ) {  $ ~~~if ( ! prime [ i ] ) pi ++ ;  $ ~~~pa += is_palindromic ( i ) ;  $ ~~~if ( pi <= pa * A ) ans = i ;  $ ~~}  $ ~~if ( ans == - 1 )  $ ~~~cout << "Palindromic tree is better than splay tree" << endl ;  $ ~~else  $ ~~~cout << ans << endl ;  $ ~}  $ }
const int MX = 100005 ;  $ int n ;  $ pair < int , int > a [ MX ] ;  $ int main ( ) {  $ ~cin >> n ;  $ ~for ( int i = 0 ; i < n ; i ++ ) cin >> a [ i ] . first >> a [ i ] . second ;  $ ~sort ( a , a + n ) ;  $ ~int i = 0 , j = 0 , acu = 0 ;  $ ~while ( i < n ) {  $ ~~j = a [ i ] . first ;  $ ~~acu = max ( acu , a [ i ] . second ) ;  $ ~~while ( acu > 1 && ( i + 1 == n || j < a [ i + 1 ] . first ) ) {  $ ~~~acu = ( acu + 3 ) / 4 ;  $ ~~~j ++ ;  $ ~~}  $ ~~i ++ ;  $ ~}  $ ~cout << max ( j , a [ n - 1 ] . first + 1 ) << '\n' ;  $ ~return 0 ;  $ }
long long a [ 500000 + 5000 ] ;  $ bool isvowel ( char a ) {  $ ~return a == 'A' || a == 'E' || a == 'I' || a == 'O' || a == 'U' || a == 'Y' ;  $ }  $ int main ( ) {  $ ~string n ;  $ ~cin >> n ;  $ ~long long ans = - 1 , lastpos = - 1 ;  $ ~for ( int i = 0 ; i < n . size ( ) ; i ++ ) {  $ ~~if ( isvowel ( n [ i ] ) ) ans = max ( ans , i - lastpos ) , lastpos = i ;  $ ~}  $ ~ans = max ( ans , ( long long ) n . size ( ) - lastpos ) ;  $ ~cout << ans << endl ;  $ ~return 0 ;  $ }
const long long mod = 1e9 + 7 , maxn = 1e4 + 100 ;  $ long long a [ maxn ] ;  $ int main ( ) {  $ ~long long n , m , k ;  $ ~cin >> n >> m >> k ;  $ ~for ( int i = 1 ; i <= n ; i ++ ) cin >> a [ i ] ;  $ ~if ( n % 2 == 0 ) return cout << 0 << endl , 0 ;  $ ~long long op = m / ( ( n + 1 ) / 2 ) ;  $ ~op *= k ;  $ ~long long minn = 1000 * 1000 * 1000 ;  $ ~for ( int i = 1 ; i <= n ; i += 2 ) minn = min ( minn , a [ i ] ) ;  $ ~cout << min ( minn , op ) << endl ;  $ }
int c [ 1001 ] [ 1001 ] , a [ 1001 ] , b [ 1001 ] , n , i , j , sum , nom ;  $ int main ( ) {  $ ~cin >> n ;  $ ~for ( i = 1 ; i <= n ; i ++ )  $ ~~for ( j = 1 ; j <= 4 ; j ++ ) cin >> c [ i ] [ j ] ;  $ ~for ( i = 1 ; i <= n ; i ++ ) {  $ ~~sum = 0 ;  $ ~~for ( j = 1 ; j <= 4 ; j ++ ) sum += c [ i ] [ j ] ;  $ ~~a [ i ] = sum ;  $ ~~b [ i ] = i ;  $ ~}  $ ~for ( j = 1 ; j <= n ; j ++ )  $ ~~for ( i = j ; i <= n - 1 ; i ++ )  $ ~~~if ( a [ j ] < a [ i + 1 ] ) {  $ ~~~~swap ( a [ j ] , a [ i + 1 ] ) ;  $ ~~~~swap ( b [ j ] , b [ i + 1 ] ) ;  $ ~~~} else if ( a [ j ] == a [ i + 1 ] ) {  $ ~~~~if ( b [ j ] > b [ i + 1 ] ) swap ( b [ j ] , b [ i + 1 ] ) ;  $ ~~~}  $ ~for ( i = 1 ; i <= n ; i ++ )  $ ~~if ( b [ i ] == 1 ) {  $ ~~~nom = i ;  $ ~~~break ;  $ ~~}  $ ~cout << nom << "\n" ;  $ ~return 0 ;  $ }
int n , i , j , k , x , y , z , m , q , h , r , timer , mx , l , cnt , u , v , t , s , tot ;  $ int main ( ) {  $ ~int a , b , c , d , e , f ;  $ ~cin >> a >> b >> c >> d >> e >> f ;  $ ~if ( c == 0 && d > 0 || a == 0 && b * d > 0 || a * c * e < b * d * f )  $ ~~cout << "Ron" << endl ;  $ ~else  $ ~~cout << "Hermione" << endl ;  $ ~return 0 ;  $ }
long long a1 , a2 , n , k , second = 0 , ans = 0 , ans1 ;  $ vector < pair < long long , pair < long long , long long >> > h ;  $ void read ( void ) {  $ ~cin >> n ;  $ ~for ( int i = 0 , x , y , m ; i < n ; ++ i ) {  $ ~~cin >> k ;  $ ~~second += k ;  $ ~~cin >> a1 ;  $ ~~long long t = a1 ;  $ ~~cin >> x >> y >> m ;  $ ~~h . push_back ( make_pair ( 0 , make_pair ( a1 , i + 1 ) ) ) ;  $ ~~ans1 = 0 ;  $ ~~for ( int j = 1 ; j < k ; ++ j ) {  $ ~~~a2 = ( a1 * x + y ) % m ;  $ ~~~if ( a2 < a1 ) ans1 ++ ;  $ ~~~a1 = a2 ;  $ ~~~t = max ( t , a1 ) ;  $ ~~~if ( h . size ( ) <= 200000 ) h . push_back ( make_pair ( ans1 , make_pair ( a1 , i + 1 ) ) ) ;  $ ~~}  $ ~~ans = max ( ans , ans1 ) ;  $ ~}  $ ~sort ( h . begin ( ) , h . end ( ) ) ;  $ ~cout << ans << "\n" ;  $ ~if ( second <= 200000 )  $ ~~for ( int i = 0 ; i < second ; ++ i ) cout << h [ i ] . second . first << " " << h [ i ] . second . second << "\n" ;  $ }  $ int main ( ) {  $ ~read ( ) ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~int n , m , a , k = 0 , id = 0 , t ;  $ ~cin >> n >> m ;  $ ~for ( int i = 1 ; i <= n ; i ++ ) {  $ ~~cin >> a ;  $ ~~t = ( a - 1 ) / m + 1 ;  $ ~~if ( t >= k ) {  $ ~~~k = t ;  $ ~~~id = i ;  $ ~~}  $ ~}  $ ~cout << id << endl ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~map < string , int > m ;  $ ~m [ "C" ] = 0 ;  $ ~m [ "C#" ] = 1 ;  $ ~m [ "D" ] = 2 ;  $ ~m [ "D#" ] = 3 ;  $ ~m [ "E" ] = 4 ;  $ ~m [ "F" ] = 5 ;  $ ~m [ "F#" ] = 6 ;  $ ~m [ "G" ] = 7 ;  $ ~m [ "G#" ] = 8 ;  $ ~m [ "A" ] = 9 ;  $ ~m [ "B" ] = 10 ;  $ ~m [ "H" ] = 11 ;  $ ~string s ;  $ ~int a [ 3 ] ;  $ ~for ( int i = 0 ; i < 3 ; i ++ ) {  $ ~~cin >> s ;  $ ~~a [ i ] = m [ s ] ;  $ ~}  $ ~sort ( a , a + 3 ) ;  $ ~int x = ( a [ 1 ] - a [ 0 ] + 12 ) % 12 ;  $ ~int y = ( a [ 2 ] - a [ 1 ] + 12 ) % 12 ;  $ ~int z = ( a [ 0 ] - a [ 2 ] + 12 ) % 12 ;  $ ~if ( ( x == 3 && y == 4 ) || ( y == 3 && z == 4 ) || ( x == 4 && z == 3 ) ) {  $ ~~cout << "minor" << endl ;  $ ~} else if ( ( x == 4 && y == 3 ) || ( y == 4 && z == 3 ) || ( z == 4 && x == 3 ) ) {  $ ~~cout << "major" << endl ;  $ ~} else {  $ ~~cout << "strange" << endl ;  $ ~}  $ ~return 0 ;  $ }
int search ( int A [ ] , int l , int u , int target ) {  $ ~for ( int i = l ; i < u ; i ++ ) {  $ ~~if ( A [ i ] == target ) return i ;  $ ~}  $ ~return - 1 ;  $ }  $ int main ( ) {  $ ~int n , C ;  $ ~cin >> n >> C ;  $ ~int R [ n ] ;  $ ~for ( int i = 0 ; i < n ; i ++ ) cin >> R [ i ] ;  $ ~int B [ C ] ;  $ ~int curr_size = 0 ;  $ ~int ans = 0 ;  $ ~for ( int i = 0 ; i < n ; i ++ ) {  $ ~~int idx = search ( B , 0 , curr_size , R [ i ] ) ;  $ ~~if ( idx != - 1 ) continue ;  $ ~~ans ++ ;  $ ~~if ( curr_size < C ) {  $ ~~~B [ curr_size ] = R [ i ] ;  $ ~~~curr_size ++ ;  $ ~~} else {  $ ~~~idx = 0 ;  $ ~~~int d = search ( R , i + 1 , n , B [ idx ] ) ;  $ ~~~if ( d != - 1 ) {  $ ~~~~for ( int j = 1 ; j < C ; j ++ ) {  $ ~~~~~int curr_d = search ( R , i + 1 , n , B [ j ] ) ;  $ ~~~~~if ( curr_d == - 1 ) {  $ ~~~~~~d = curr_d ;  $ ~~~~~~idx = j ;  $ ~~~~~~break ;  $ ~~~~~} else {  $ ~~~~~~if ( curr_d > d ) {  $ ~~~~~~~d = curr_d ;  $ ~~~~~~~idx = j ;  $ ~~~~~~}  $ ~~~~~}  $ ~~~~}  $ ~~~}  $ ~~~B [ idx ] = R [ i ] ;  $ ~~}  $ ~}  $ ~cout << ans << endl ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~long long n ;  $ ~cin >> n ;  $ ~string s ;  $ ~cin >> s ;  $ ~long long f = 0 ;  $ ~for ( long long i = 0 ; i < n ; i ++ ) {  $ ~~if ( s [ i ] == '1' ) f = 1 ;  $ ~}  $ ~string second ;  $ ~if ( f == 1 ) second . push_back ( '1' ) ;  $ ~for ( long long i = 0 ; i < n ; i ++ ) {  $ ~~if ( s [ i ] == '0' ) second . push_back ( '0' ) ;  $ ~}  $ ~cout << second << endl ;  $ ~return 0 ;  $ }
int dx [ ] = { 0 , 1 , 0 , - 1 , 1 , 1 , - 1 , - 1 } ;  $ int dy [ ] = { 1 , 0 , - 1 , 0 , 1 , - 1 , 1 , - 1 } ;  $ void fast ( ) { }  $ pair < string , string > arr [ 4 ] ;  $ int main ( ) {  $ ~fast ( ) ;  $ ~string s ;  $ ~string out [ ] = { "byte" , "short" , "int" , "long" , "BigInteger" } ;  $ ~cin >> s ;  $ ~arr [ 0 ] = { "-128" , "127" } ;  $ ~arr [ 1 ] = { "-32768" , "32767" } ;  $ ~arr [ 2 ] = { "-2147483648" , "2147483647" } ;  $ ~arr [ 3 ] = { "-9223372036854775808" , "9223372036854775807" } ;  $ ~if ( s [ 0 ] == '-' ) {  $ ~~for ( int i = 0 ; i < 4 ; i ++ ) {  $ ~~~if ( s . size ( ) < arr [ i ] . first . size ( ) ) return cout << out [ i ] << "\n" , 0 ;  $ ~~~;  $ ~~~if ( s . size ( ) == arr [ i ] . first . size ( ) ) {  $ ~~~~for ( int j = 1 ; j < s . size ( ) ; j ++ ) {  $ ~~~~~if ( s [ j ] > arr [ i ] . first [ j ] ) return cout << out [ i + 1 ] << "\n" , 0 ;  $ ~~~~~;  $ ~~~~~if ( s [ j ] < arr [ i ] . second [ j ] ) return cout << out [ i ] << "\n" , 0 ;  $ ~~~~~;  $ ~~~~}  $ ~~~~return cout << out [ i ] << "\n" , 0 ;  $ ~~~~;  $ ~~~}  $ ~~}  $ ~~return cout << out [ 4 ] << "\n" , 0 ;  $ ~~;  $ ~} else {  $ ~~for ( int i = 0 ; i < 4 ; i ++ ) {  $ ~~~if ( s . size ( ) < arr [ i ] . second . size ( ) ) return cout << out [ i ] << "\n" , 0 ;  $ ~~~;  $ ~~~if ( s . size ( ) == arr [ i ] . second . size ( ) ) {  $ ~~~~for ( int j = 0 ; j < s . size ( ) ; j ++ ) {  $ ~~~~~if ( s [ j ] > arr [ i ] . second [ j ] ) return cout << out [ i + 1 ] << "\n" , 0 ;  $ ~~~~~;  $ ~~~~~if ( s [ j ] < arr [ i ] . second [ j ] ) return cout << out [ i ] << "\n" , 0 ;  $ ~~~~~;  $ ~~~~}  $ ~~~~return cout << out [ i ] << "\n" , 0 ;  $ ~~~~;  $ ~~~}  $ ~~}  $ ~~return cout << out [ 4 ] << "\n" , 0 ;  $ ~~;  $ ~}  $ }
long long l [ 100009 ] ;  $ int main ( ) {  $ ~for ( long long i = 1 ; i < 100005 ; i ++ ) { l [ i ] = i * ( i + 1 ) / 2 ; }  $ ~int n ;  $ ~cin >> n ;  $ ~long long k = 1 , r = 100000 ;  $ ~while ( k <= r ) {  $ ~~if ( l [ k ] + l [ r ] == n ) {  $ ~~~cout << "YES" << endl ;  $ ~~~return 0 ;  $ ~~} else if ( l [ k ] + l [ r ] < n ) {  $ ~~~k ++ ;  $ ~~} else {  $ ~~~r -- ;  $ ~~}  $ ~}  $ ~cout << "NO" << endl ;  $ ~return 0 ;  $ }
const int Maxn = 1e5 + 100 ;  $ int n , m , a [ Maxn ] ;  $ bool mark [ 2 ] [ Maxn ] ;  $ vector < int > nei [ 2 ] [ Maxn ] ;  $ void dfs ( int x , int v ) {  $ ~for ( int i = 0 ; i < ( int ) nei [ x ] [ v ] . size ( ) ; i ++ ) {  $ ~~int u = nei [ x ] [ v ] [ i ] ;  $ ~~if ( ! mark [ x ] [ u ] ) {  $ ~~~mark [ x ] [ u ] = true ;  $ ~~~if ( x == 0 || a [ u ] != 1 ) dfs ( x , u ) ;  $ ~~}  $ ~}  $ }  $ int main ( ) {  $ ~cin >> n >> m ;  $ ~for ( int i = 0 ; i < n ; i ++ ) { cin >> a [ i ] ; }  $ ~for ( int i = 0 , u , v ; i < m ; i ++ ) {  $ ~~cin >> u >> v ;  $ ~~nei [ 0 ] [ u - 1 ] . push_back ( v - 1 ) ;  $ ~~nei [ 1 ] [ v - 1 ] . push_back ( u - 1 ) ;  $ ~}  $ ~for ( int i = 0 ; i < n ; i ++ ) {  $ ~~if ( a [ i ] == 1 && ! mark [ 0 ] [ i ] )  $ ~~~mark [ 0 ] [ i ] = true , dfs ( 0 , i ) ;  $ ~~else if ( a [ i ] == 2 && ! mark [ 1 ] [ i ] )  $ ~~~mark [ 1 ] [ i ] = true , dfs ( 1 , i ) ;  $ ~}  $ ~for ( int i = 0 ; i < n ; i ++ ) {  $ ~~if ( mark [ 0 ] [ i ] && mark [ 1 ] [ i ] )  $ ~~~cout << 1 << endl ;  $ ~~else  $ ~~~cout << 0 << endl ;  $ ~}  $ }
int main ( ) {  $ ~int n , k ;  $ ~string s ;  $ ~cin >> n >> k ;  $ ~cin >> s ;  $ ~string a , b ;  $ ~int flag = 0 ;  $ ~for ( int i = 0 ; i < n - 1 ; i ++ ) {  $ ~~if ( s . substr ( 0 , i + 1 ) == s . substr ( n - i - 1 ) ) { flag = i + 1 ; }  $ ~}  $ ~cout << s ;  $ ~for ( int i = 1 ; i < k ; i ++ ) { cout << s . substr ( flag ) ; }  $ ~cout << endl ;  $ ~return 0 ;  $ }
const int INF = 0 x3f3f3f3f ;  $ const double PI = acos ( - 1.0 ) ;  $ const int N = 100 + 3 ;  $ int main ( ) {  $ ~int n ;  $ ~cin >> n ;  $ ~int v [ N ] ;  $ ~long long ans [ N ] ;  $ ~for ( int i = 1 ; i <= n ; i ++ ) cin >> v [ i ] ;  $ ~for ( int i = 1 ; i <= n ; i ++ ) {  $ ~~int cont = 1 ;  $ ~~int j = v [ i ] ;  $ ~~while ( j != i and cont < 103 ) {  $ ~~~cont ++ ;  $ ~~~j = v [ j ] ;  $ ~~}  $ ~~ans [ i ] = cont ;  $ ~~if ( ans [ i ] % 2 == 0 ) ans [ i ] /= 2 ;  $ ~}  $ ~long long mmc = ans [ 1 ] ;  $ ~for ( int i = 1 ; i <= n ; i ++ ) {  $ ~~if ( ans [ i ] == 103 ) {  $ ~~~cout << - 1 << endl ;  $ ~~~return 0 ;  $ ~~}  $ ~~mmc = ( mmc * ans [ i ] ) / __gcd ( mmc , ans [ i ] ) ;  $ ~}  $ ~cout << mmc << endl ;  $ ~return 0 ;  $ }
int a [ 100 ] , b [ 100 ] , n , x , y , c [ 500 ] ;  $ int main ( ) {  $ ~cin >> n ;  $ ~int j = 1 ;  $ ~for ( int i = 1 ; i <= n * n ; i ++ ) {  $ ~~cin >> x >> y ;  $ ~~if ( a [ x ] == 0 && b [ y ] == 0 ) {  $ ~~~a [ x ] = 1 ;  $ ~~~b [ y ] = 1 ;  $ ~~~c [ j ] = i ;  $ ~~~j ++ ;  $ ~~}  $ ~}  $ ~cout << c [ 1 ] ;  $ ~for ( int i = 2 ; i < j ; i ++ ) cout << ' ' << c [ i ] ;  $ ~cout << endl ;  $ }
long long flag = 0 ;  $ string s ;  $ long long check ( long long i , long long k ) {  $ ~for ( long long j = i ; j < i + k ; j ++ ) {  $ ~~if ( s [ j ] != s [ 2 * i + k - 1 - j ] ) {  $ ~~~flag = 1 ;  $ ~~~return 0 ;  $ ~~}  $ ~}  $ }  $ int main ( ) {  $ ~cin >> s ;  $ ~long long n = s . length ( ) , k ;  $ ~cin >> k ;  $ ~if ( n % k != 0 ) {  $ ~~cout << "NO" << endl ;  $ ~~return 0 ;  $ ~}  $ ~for ( long long i = 0 ; i < n ; i += n / k ) { check ( i , n / k ) ; }  $ ~if ( flag == 1 )  $ ~~cout << "NO" << endl ;  $ ~else  $ ~~cout << "YES" << endl ;  $ ~return 0 ;  $ }
string s ;  $ int n , k ;  $ int main ( ) {  $ ~cin >> s >> k ;  $ ~n = s . size ( ) ;  $ ~if ( n % k ) {  $ ~~cout << "NO\n" ;  $ ~~return 0 ;  $ ~}  $ ~k = n / k ;  $ ~for ( int st = 0 ; st < n ; st += k ) {  $ ~~int dr = st + k - 1 ;  $ ~~string a , b ;  $ ~~for ( int i = st ; i <= dr ; i ++ ) { a += s [ i ] ; }  $ ~~b = a ;  $ ~~reverse ( b . begin ( ) , b . end ( ) ) ;  $ ~~if ( a != b ) {  $ ~~~cout << "NO\n" ;  $ ~~~return 0 ;  $ ~~}  $ ~}  $ ~cout << "YES\n" ;  $ ~return 0 ;  $ }
const int maxn = 1.5e7 + 5 ;  $ int a [ maxn ] , num [ maxn ] ;  $ int main ( ) {  $ ~int n , i , j , h ;  $ ~cin >> n ;  $ ~int g , m = 0 , ans = n ;  $ ~for ( i = 1 ; i <= n ; i ++ ) {  $ ~~cin >> h ;  $ ~~if ( i == 1 )  $ ~~~g = h ;  $ ~~else  $ ~~~g = __gcd ( g , h ) ;  $ ~~num [ h ] ++ ;  $ ~~if ( h > m ) m = h ;  $ ~}  $ ~for ( i = g + 1 ; i <= m ; i ++ ) {  $ ~~if ( a [ i ] == 0 ) {  $ ~~~int cnt = 0 ;  $ ~~~for ( j = i ; j <= m ; j += i ) a [ j ] = 1 , cnt += num [ j ] ;  $ ~~~ans = min ( ans , n - cnt ) ;  $ ~~}  $ ~}  $ ~if ( ans == n )  $ ~~cout << - 1 << endl ;  $ ~else  $ ~~cout << ans << endl ;  $ ~return 0 ;  $ }
int m [ 12 ] = { 3 , 0 , 3 , 2 , 3 , 2 , 3 , 3 , 2 , 3 , 2 , 3 } ;  $ int main ( ) {  $ ~string a , b ;  $ ~cin >> a >> b ;  $ ~int a1 , b1 ;  $ ~if ( a == "monday" ) a1 = 1 ;  $ ~if ( a == "tuesday" ) a1 = 2 ;  $ ~if ( a == "wednesday" ) a1 = 3 ;  $ ~if ( a == "thursday" ) a1 = 4 ;  $ ~if ( a == "friday" ) a1 = 5 ;  $ ~if ( a == "saturday" ) a1 = 6 ;  $ ~if ( a == "sunday" ) a1 = 0 ;  $ ~if ( b == "monday" ) b1 = 1 ;  $ ~if ( b == "tuesday" ) b1 = 2 ;  $ ~if ( b == "wednesday" ) b1 = 3 ;  $ ~if ( b == "thursday" ) b1 = 4 ;  $ ~if ( b == "friday" ) b1 = 5 ;  $ ~if ( b == "saturday" ) b1 = 6 ;  $ ~if ( b == "sunday" ) b1 = 0 ;  $ ~for ( int i = 0 ; i < 12 ; i ++ ) {  $ ~~if ( ( a1 + m [ i ] ) % 7 == b1 ) {  $ ~~~cout << "YES" << endl ;  $ ~~~return 0 ;  $ ~~}  $ ~}  $ ~cout << "NO" << endl ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~int n , p ;  $ ~vector < int > v ;  $ ~stack < int > s25 , s50 ;  $ ~cin >> n ;  $ ~for ( int i = 0 ; i < n ; i ++ ) {  $ ~~cin >> p ;  $ ~~v . push_back ( p ) ;  $ ~}  $ ~if ( v [ 0 ] != 25 ) {  $ ~~cout << "NO" << endl ;  $ ~~return 0 ;  $ ~}  $ ~for ( int i = 0 ; i < n ; i ++ ) {  $ ~~if ( v [ i ] == 25 ) {  $ ~~~s25 . push ( v [ i ] ) ;  $ ~~~continue ;  $ ~~}  $ ~~if ( v [ i ] == 50 ) {  $ ~~~if ( s25 . empty ( ) ) {  $ ~~~~cout << "NO" << endl ;  $ ~~~~return 0 ;  $ ~~~}  $ ~~~s50 . push ( v [ i ] ) ;  $ ~~~s25 . pop ( ) ;  $ ~~}  $ ~~if ( v [ i ] == 100 ) {  $ ~~~if ( s25 . size ( ) == 0 ) {  $ ~~~~cout << "NO" << endl ;  $ ~~~~return 0 ;  $ ~~~}  $ ~~~if ( ( s25 . size ( ) < 3 && s50 . size ( ) == 0 ) ) {  $ ~~~~cout << "NO" << endl ;  $ ~~~~return 0 ;  $ ~~~}  $ ~~~if ( s50 . empty ( ) ) {  $ ~~~~s25 . pop ( ) ;  $ ~~~~s25 . pop ( ) ;  $ ~~~~s25 . pop ( ) ;  $ ~~~} else {  $ ~~~~s25 . pop ( ) ;  $ ~~~~s50 . pop ( ) ;  $ ~~~}  $ ~~}  $ ~}  $ ~cout << "YES" << endl ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~int a , b , k [ 4 ] , i = 0 , j ;  $ ~char ch [ 6 ] ;  $ ~cin >> ch ;  $ ~a = ( ch [ 0 ] - 48 ) * 10 + ch [ 1 ] - 48 ;  $ ~b = ( ch [ 3 ] - 48 ) * 10 + ch [ 4 ] - 48 ;  $ ~k [ 0 ] = a / 10 ;  $ ~k [ 1 ] = a % 10 ;  $ ~k [ 2 ] = b / 10 ;  $ ~k [ 3 ] = b % 10 ;  $ ~if ( k [ 0 ] == k [ 3 ] && k [ 1 ] == k [ 2 ] ) cout << 0 << endl ;  $ ~while ( k [ 0 ] != k [ 3 ] || k [ 1 ] != k [ 2 ] ) {  $ ~~i ++ ;  $ ~~b ++ ;  $ ~~if ( b >= 60 ) {  $ ~~~b = 0 ;  $ ~~~if ( a == 23 )  $ ~~~~a = 0 ;  $ ~~~else if ( a < 23 )  $ ~~~~a ++ ;  $ ~~}  $ ~~k [ 0 ] = a / 10 ;  $ ~~k [ 1 ] = a % 10 ;  $ ~~k [ 2 ] = b / 10 ;  $ ~~k [ 3 ] = b % 10 ;  $ ~~if ( k [ 0 ] == k [ 3 ] && k [ 1 ] == k [ 2 ] ) {  $ ~~~cout << i << endl ;  $ ~~~break ;  $ ~~}  $ ~}  $ ~return 0 ;  $ }
int main ( ) {  $ ~int n , x , cnt = 0 ;  $ ~cin >> n ;  $ ~if ( n == 1 ) {  $ ~~cin >> x ;  $ ~~if ( x == 1 ) {  $ ~~~cout << "YES" << endl ;  $ ~~~return 0 ;  $ ~~}  $ ~~cout << "NO" << endl ;  $ ~~return 0 ;  $ ~}  $ ~for ( int i = 0 ; i < n ; i ++ ) {  $ ~~cin >> x ;  $ ~~if ( x == 0 ) cnt ++ ;  $ ~~if ( cnt > 1 ) {  $ ~~~cout << "NO" << endl ;  $ ~~~return 0 ;  $ ~~}  $ ~}  $ ~if ( cnt == 1 )  $ ~~cout << "YES" << endl ;  $ ~else  $ ~~cout << "NO" << endl ;  $ ~return 0 ;  $ }
const double pi = acos ( - 1 ) ;  $ const long long MODPRIMA = ( long long ) 1e9 + 7 ;  $ const long long MAXX = ( long long ) 1e18 ;  $ const long long MINN = - ( long long ) 1e18 ;  $ const double EPS = 1e-9 ;  $ const int MAXN = 5e5 ;  $ int N , ans ;  $ int arr [ MAXN + 5 ] ;  $ int main ( ) {  $ ~cin >> N ;  $ ~for ( int i = 0 ; i < N ; i ++ ) cin >> arr [ i ] ;  $ ~int i = 1 ;  $ ~while ( i < N - 1 ) {  $ ~~bool cek = ( arr [ i ] != arr [ i - 1 ] && arr [ i ] != arr [ i + 1 ] ) ;  $ ~~if ( ! cek )  $ ~~~i ++ ;  $ ~~else {  $ ~~~int cprev = arr [ i - 1 ] ;  $ ~~~int j = i + 1 ;  $ ~~~int curr = 1 ;  $ ~~~while ( j < N - 1 && ( arr [ j ] != arr [ j - 1 ] && arr [ j ] != arr [ j + 1 ] ) ) {  $ ~~~~j ++ ;  $ ~~~~curr ++ ;  $ ~~~}  $ ~~~if ( curr % 2 == 0 ) {  $ ~~~~ans = max ( ans , curr / 2 ) ;  $ ~~~~int idx = i ;  $ ~~~~for ( int k = 0 ; k < curr / 2 ; k ++ ) {  $ ~~~~~arr [ idx ] = cprev ;  $ ~~~~~idx ++ ;  $ ~~~~}  $ ~~~~for ( int k = 0 ; k < curr / 2 ; k ++ ) {  $ ~~~~~arr [ idx ] = arr [ j ] ;  $ ~~~~~idx ++ ;  $ ~~~~}  $ ~~~} else {  $ ~~~~ans = max ( ans , ( curr + 1 ) / 2 ) ;  $ ~~~~for ( int k = i ; k <= j - 1 ; k ++ ) arr [ k ] = cprev ;  $ ~~~}  $ ~~~i = j ;  $ ~~}  $ ~}  $ ~cout << ans << '\n' ;  $ ~for ( int i = 0 ; i < N ; i ++ ) {  $ ~~cout << arr [ i ] ;  $ ~~cout << ( i == N - 1 ? '\n' : ' ' ) ;  $ ~}  $ ~return 0 ;  $ }
int main ( ) {  $ ~int n ;  $ ~cin >> n ;  $ ~bool horizontal [ n + 1 ] = { } ;  $ ~bool vertikal [ n + 1 ] = { } ;  $ ~bool theyareworking [ n * n + 1 ] = { } ;  $ ~for ( int i = 1 ; i <= n * n ; i ++ ) {  $ ~~int v , h ;  $ ~~cin >> h >> v ;  $ ~~if ( horizontal [ h ] == false && vertikal [ v ] == false ) {  $ ~~~theyareworking [ i ] = true ;  $ ~~~horizontal [ h ] = true ;  $ ~~~vertikal [ v ] = true ;  $ ~~}  $ ~}  $ ~bool hihi = false ;  $ ~for ( int i = 1 ; i <= n * n ; i ++ ) {  $ ~~if ( theyareworking [ i ] == true ) {  $ ~~~if ( hihi == false ) {  $ ~~~~cout << i ;  $ ~~~~hihi = true ;  $ ~~~} else {  $ ~~~~cout << " " << i ;  $ ~~~}  $ ~~}  $ ~}  $ ~cout << endl ;  $ }
int main ( ) {  $ ~int p , x , y , i , k ;  $ ~while ( cin >> x >> y ) {  $ ~~if ( x == 0 && y == 0 )  $ ~~~k = 0 ;  $ ~~else {  $ ~~~p = max ( abs ( x ) , abs ( y ) ) ;  $ ~~~k = ( p - 1 ) * 4 ;  $ ~~~if ( x == p && y > 1 - p && y <= p )  $ ~~~~k += 1 ;  $ ~~~else if ( y == p && x >= - p && x <= p )  $ ~~~~k += 2 ;  $ ~~~else if ( x == - p && y >= - p && y <= p )  $ ~~~~k += 3 ;  $ ~~~else if ( y < 0 && x > y && x <= - y )  $ ~~~~k += 4 ;  $ ~~}  $ ~~cout << k << endl ;  $ ~}  $ ~return 0 ;  $ }
int main ( ) {  $ ~int x , y , sum = 0 ;  $ ~cin >> x >> y ;  $ ~if ( x > y && x <= - y ) {  $ ~~sum = - y * 4 ;  $ ~} else if ( y > x && x >= - y ) {  $ ~~sum = - 2 + y * 4 ;  $ ~} else if ( y >= x && x < - y ) {  $ ~~sum = - 1 - x * 4 ;  $ ~} else if ( x > y && x <= - y + 1 ) {  $ ~~sum = - y * 4 ;  $ ~} else if ( y <= x && x > - y + 1 ) {  $ ~~sum = - 3 + x * 4 ;  $ ~}  $ ~cout << sum << endl ;  $ ~return 0 ;  $ }
const int MAXN = 1e+6 + 50 ;  $ int n ;  $ int num [ MAXN ] ;  $ int main ( ) {  $ ~while ( cin >> n ) {  $ ~~memset ( num , 0 , sizeof ( num ) ) ;  $ ~~int temp ;  $ ~~int m = 0 ;  $ ~~for ( int i = 1 ; i <= n ; i ++ ) {  $ ~~~cin >> temp ;  $ ~~~m = max ( m , temp ) ;  $ ~~~num [ temp ] ++ ;  $ ~~}  $ ~~for ( int i = 0 ; i <= m ; i ++ ) {  $ ~~~if ( num [ i ] == 0 ) continue ;  $ ~~~int temp = num [ i ] / 2 ;  $ ~~~num [ i + 1 ] += temp ;  $ ~~~num [ i ] -= temp * 2 ;  $ ~~}  $ ~~while ( num [ m + 1 ] != 0 ) {  $ ~~~int temp = num [ m + 1 ] / 2 ;  $ ~~~num [ m + 2 ] += temp ;  $ ~~~num [ m + 1 ] -= temp * 2 ;  $ ~~~m ++ ;  $ ~~}  $ ~~int ans = 0 ;  $ ~~for ( int i = 0 ; i <= m ; i ++ ) { ans += num [ i ] ; }  $ ~~cout << ans << endl ;  $ ~}  $ ~return 0 ;  $ }
int main ( ) {  $ ~int n , k ;  $ ~cin >> n >> k ;  $ ~string s ;  $ ~char c ;  $ ~for ( int i = 0 , c = 'a' ; i < n ; ++ i , ++ c ) {  $ ~~if ( c >= ( 'a' + k ) ) c = 'a' ;  $ ~~s . push_back ( c ) ;  $ ~}  $ ~cout << s << endl ;  $ ~return 0 ;  $ }
void init ( ) { }  $ int main ( ) {  $ ~init ( ) ;  $ ~int n ;  $ ~cin >> n ;  $ ~string s ;  $ ~cin >> s ;  $ ~for ( int i = 0 ; i < n / 2 ; i ++ ) {  $ ~~if ( s [ i ] == 'L' )  $ ~~~cout << i + 1 << " " << n / 2 + i + 1 ;  $ ~~else  $ ~~~cout << n / 2 + i + 1 << " " << i + 1 ;  $ ~~cout << '\n' ;  $ ~}  $ }
int n , m ;  $ int log7 ( int x ) {  $ ~int res = 0 ;  $ ~if ( x == 0 ) return 1 ;  $ ~while ( x ) {  $ ~~x /= 7 ;  $ ~~res ++ ;  $ ~}  $ ~return res ;  $ }  $ int base10 ( int x ) {  $ ~int spow = 1 , res = 0 ;  $ ~while ( x ) {  $ ~~res += spow * ( x % 10 ) ;  $ ~~x /= 10 ;  $ ~~spow *= 7 ;  $ ~}  $ ~return res ;  $ }  $ map < pair < int , int > , bool > vis ;  $ int ans ;  $ void solve ( int sz ) {  $ ~vector < int > p ;  $ ~for ( int i = 0 ; i < 7 ; i ++ ) p . push_back ( i ) ;  $ ~do {  $ ~~int x , y ;  $ ~~x = y = 0 ;  $ ~~for ( int i = 0 ; i < log7 ( n ) ; i ++ ) {  $ ~~~x *= 10 ;  $ ~~~x += p [ i ] ;  $ ~~}  $ ~~for ( int i = log7 ( n ) ; i < sz ; i ++ ) {  $ ~~~y *= 10 ;  $ ~~~y += p [ i ] ;  $ ~~}  $ ~~if ( n >= base10 ( x ) && m >= base10 ( y ) ) {  $ ~~~if ( ! vis [ make_pair ( x , y ) ] ) {  $ ~~~~ans ++ ;  $ ~~~~vis [ make_pair ( x , y ) ] = true ;  $ ~~~}  $ ~~}  $ ~} while ( next_permutation ( p . begin ( ) , p . end ( ) ) ) ;  $ }  $ int main ( ) {  $ ~cin >> n >> m ;  $ ~n -- ;  $ ~m -- ;  $ ~int sz = log7 ( n ) + log7 ( m ) ;  $ ~if ( sz > 7 ) {  $ ~~cout << 0 << endl ;  $ ~~return 0 ;  $ ~}  $ ~solve ( sz ) ;  $ ~cout << ans << endl ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~string a , b ;  $ ~cin >> a ;  $ ~b = a ;  $ ~long long int x = 0 , y = 0 , z = 0 ;  $ ~long long int i ;  $ ~for ( i = 0 ; i < a . size ( ) ; i ++ ) {  $ ~~if ( a [ i ] == 'a' ) { x ++ ; }  $ ~~if ( a [ i ] == 'b' ) { y ++ ; }  $ ~~if ( a [ i ] == 'c' ) { z ++ ; }  $ ~}  $ ~sort ( b . begin ( ) , b . end ( ) ) ;  $ ~if ( b == a && ( z == x || z == y ) && x != 0 && y != 0 && z != 0 ) {  $ ~~cout << "YES" << endl ;  $ ~} else {  $ ~~cout << "NO" << endl ;  $ ~}  $ ~return 0 ;  $ }
int main ( ) {  $ ~string s ;  $ ~cin >> s ;  $ ~long long int total = s . size ( ) - 2 ;  $ ~long long int cont = 0 ;  $ ~long long int primer , segun , tercer ;  $ ~for ( long long int i = ( long long int ) ( 0 ) ; i < ( long long int ) ( s . size ( ) ) ; i ++ ) {  $ ~~if ( s [ i ] == '+' ) { primer = i ; }  $ ~~if ( s [ i ] == '=' ) { segun = i - primer - 1 ; }  $ ~}  $ ~tercer = total - segun - primer ;  $ ~if ( tercer == ( segun + primer ) ) {  $ ~~cout << s << endl ;  $ ~} else {  $ ~~if ( tercer == ( segun + primer + 2 ) ) {  $ ~~~s . erase ( s . begin ( ) + s . size ( ) - 1 ) ;  $ ~~~cout << "|" << s << endl ;  $ ~~} else if ( ( tercer + 2 ) == ( segun + primer ) ) {  $ ~~~if ( primer >= 2 ) {  $ ~~~~for ( long long int i = ( long long int ) ( 0 ) ; i < ( long long int ) ( primer - 1 ) ; i ++ ) { cout << "|" ; }  $ ~~~~cout << "+" ;  $ ~~~~for ( long long int i = ( long long int ) ( 0 ) ; i < ( long long int ) ( segun ) ; i ++ ) { cout << "|" ; }  $ ~~~~cout << "=" ;  $ ~~~~for ( long long int i = ( long long int ) ( 0 ) ; i < ( long long int ) ( tercer + 1 ) ; i ++ ) { cout << "|" ; }  $ ~~~~cout << endl ;  $ ~~~} else {  $ ~~~~for ( long long int i = ( long long int ) ( 0 ) ; i < ( long long int ) ( primer ) ; i ++ ) { cout << "|" ; }  $ ~~~~cout << "+" ;  $ ~~~~for ( long long int i = ( long long int ) ( 0 ) ; i < ( long long int ) ( segun - 1 ) ; i ++ ) { cout << "|" ; }  $ ~~~~cout << "=" ;  $ ~~~~for ( long long int i = ( long long int ) ( 0 ) ; i < ( long long int ) ( tercer + 1 ) ; i ++ ) { cout << "|" ; }  $ ~~~~cout << endl ;  $ ~~~}  $ ~~} else {  $ ~~~cout << "Impossible" << endl ;  $ ~~}  $ ~}  $ ~return 0 ;  $ }
int main ( ) {  $ ~int n ;  $ ~cin >> n ;  $ ~cout << n / 2 << endl ;  $ ~for ( int i = 1 ; i <= n / 2 - 1 ; i ++ ) cout << 2 << " " ;  $ ~if ( n % 2 )  $ ~~cout << 3 << endl ;  $ ~else  $ ~~cout << 2 << endl ;  $ ~return 0 ;  $ }
long long bigmod ( long long a , long long p , long long m ) {  $ ~if ( p == 0 ) return 1 % m ;  $ ~long long x = bigmod ( a , p / 2 , m ) ;  $ ~x = ( x * x ) % m ;  $ ~if ( p % 2 ) x = ( x * a ) % m ;  $ ~return x % m ;  $ }  $ long long v [ 10009 ] [ 266 ] , q [ 266 ] , m [ 256 ] ;  $ int main ( ) {  $ ~string a , b ;  $ ~cin >> a >> b ;  $ ~a = " " + a ;  $ ~for ( int i = 'a' ; i <= 'z' ; i ++ ) q [ i ] = a . size ( ) ;  $ ~for ( int i = a . size ( ) ; i >= 0 ; i -- ) {  $ ~~m [ a [ i ] ] = 1 ;  $ ~~for ( int j = 'a' ; j <= 'z' ; j ++ ) v [ i ] [ j ] = q [ j ] ;  $ ~~q [ a [ i ] ] = i ;  $ ~}  $ ~long long c = 0 , an = 1 ;  $ ~for ( int i = 0 ; i <= b . size ( ) - 1 ; i ++ ) {  $ ~~if ( m [ b [ i ] ] == 0 ) return 0 & puts ( "-1" ) ;  $ ~~c = v [ c ] [ b [ i ] ] ;  $ ~~if ( c == a . size ( ) ) {  $ ~~~an ++ ;  $ ~~~c = v [ 0 ] [ b [ i ] ] ;  $ ~~}  $ ~}  $ ~cout << an << endl ;  $ }
int main ( ) {  $ ~char s [ 100005 ] , * p ;  $ ~int x ;  $ ~cin >> s ;  $ ~if ( ( p = strstr ( s , "AB" ) ) && ( strstr ( p + 2 , "BA" ) ) ) {  $ ~~cout << "YES" << endl ;  $ ~} else if ( ( p = strstr ( s , "BA" ) ) && ( strstr ( p + 2 , "AB" ) ) ) {  $ ~~cout << "YES" << endl ;  $ ~} else {  $ ~~cout << "NO" << endl ;  $ ~}  $ ~return 0 ;  $ }
int main ( ) {  $ ~int n , k , i , j ;  $ ~cin >> n >> k ;  $ ~string a = "abcdefghijklmnopqrstuvwxyz" ;  $ ~i = 0 ;  $ ~while ( n -- ) {  $ ~~cout << a [ i ++ ] ;  $ ~~if ( i == k ) i = 0 ;  $ ~}  $ ~cout << endl ;  $ }
int main ( ) {  $ ~string str ;  $ ~int a , r , b , c , d ;  $ ~getline ( cin , str ) ;  $ ~a = ( str [ 0 ] - '0' ) * 10 + ( str [ 1 ] - '0' ) ;  $ ~c = ( str [ 1 ] - '0' ) * 10 + ( str [ 0 ] - '0' ) ;  $ ~b = ( str [ 3 ] - '0' ) * 10 + str [ 4 ] - '0' ;  $ ~if ( c > b && c <= 59 ) {  $ ~~str [ 3 ] = str [ 1 ] ;  $ ~~str [ 4 ] = str [ 0 ] ;  $ ~~cout << str << endl ;  $ ~~;  $ ~} else {  $ ~top :  $ ~~a ++ ;  $ ~~if ( a > 23 ) {  $ ~~~str [ 0 ] = '0' ;  $ ~~~str [ 1 ] = '0' ;  $ ~~~str [ 3 ] = '0' ;  $ ~~~str [ 4 ] = '0' ;  $ ~~~cout << str << endl ;  $ ~~~;  $ ~~} else {  $ ~~~r = a / 10 ;  $ ~~~if ( r == 0 ) {  $ ~~~~str [ 0 ] = '0' ;  $ ~~~~str [ 1 ] = a % 10 + 48 ;  $ ~~~~d = ( str [ 1 ] - '0' ) * 10 + str [ 0 ] - '0' ;  $ ~~~~if ( d <= 59 ) {  $ ~~~~~str [ 3 ] = str [ 1 ] ;  $ ~~~~~str [ 4 ] = str [ 0 ] ;  $ ~~~~~cout << str << endl ;  $ ~~~~~;  $ ~~~~} else  $ ~~~~~goto top ;  $ ~~~} else {  $ ~~~~str [ 0 ] = r + 48 ;  $ ~~~~str [ 1 ] = a % 10 + 48 ;  $ ~~~~d = ( str [ 1 ] - '0' ) * 10 + str [ 0 ] - '0' ;  $ ~~~~if ( d <= 59 ) {  $ ~~~~~str [ 3 ] = str [ 1 ] ;  $ ~~~~~str [ 4 ] = str [ 0 ] ;  $ ~~~~~cout << str << endl ;  $ ~~~~} else  $ ~~~~~goto top ;  $ ~~~}  $ ~~}  $ ~}  $ ~return 0 ;  $ }
const int maxn = 1e6 ;  $ long long gcd ( long long a , long long b ) {  $ ~if ( b == 0 ) {  $ ~~return a ;  $ ~} else {  $ ~~return gcd ( b , a % b ) ;  $ ~}  $ }  $ long long lcm ( long long a , long long b ) {  $ ~return a * b / gcd ( a , b ) ;  $ }  $ int main ( ) {  $ ~int n ;  $ ~while ( cin >> n ) {  $ ~~long long ans ;  $ ~~if ( n > 3 ) {  $ ~~~ans = lcm ( lcm ( n - 2 , n - 1 ) , n ) ;  $ ~~~long long ans2 = lcm ( lcm ( n - 3 , n - 1 ) , n ) ;  $ ~~~long long ans3 = lcm ( lcm ( n - 3 , n - 2 ) , n - 1 ) ;  $ ~~~ans = max ( max ( ans , ans2 ) , ans3 ) ;  $ ~~} else {  $ ~~~if ( n == 1 )  $ ~~~~ans = 1 ;  $ ~~~else if ( n == 2 )  $ ~~~~ans = 2 ;  $ ~~~else if ( n == 3 )  $ ~~~~ans = 6 ;  $ ~~}  $ ~~cout << ans << endl ;  $ ~}  $ }
int main ( ) {  $ ~int n , k , x = 0 , y = 0 ;  $ ~cin >> n ;  $ ~for ( int i = 1 ; i <= n ; i ++ ) {  $ ~~cin >> k ;  $ ~~if ( k == 0 ) {  $ ~~~x ++ ;  $ ~~} else if ( k == 1 ) {  $ ~~~y ++ ;  $ ~~}  $ ~}  $ ~if ( n == 1 && y == 1 ) {  $ ~~cout << "YES" << endl ;  $ ~} else if ( n == 1 && y != 1 ) {  $ ~~cout << "NO" << endl ;  $ ~} else if ( n != 1 && x == 1 ) {  $ ~~cout << "YES" << endl ;  $ ~} else if ( n != 1 && x != 1 ) {  $ ~~cout << "NO" << endl ;  $ ~}  $ ~return 0 ;  $ }
const int N = 1e6 + 5 ;  $ const int mod = 1e9 + 7 ;  $ int dp [ 5005 ] [ 5005 ] ;  $ string str1 ;  $ string str2 ;  $ int solve ( int idx1 , int idx2 ) {  $ ~if ( idx1 == str1 . size ( ) || idx2 == str2 . size ( ) ) return 1 ;  $ ~int & ret = dp [ idx1 ] [ idx2 ] ;  $ ~if ( ~ ret ) return ret ;  $ ~ret = solve ( idx1 , idx2 + 1 ) ;  $ ~if ( str1 [ idx1 ] == str2 [ idx2 ] ) ret += solve ( idx1 + 1 , idx2 + 1 ) ;  $ ~if ( ret >= mod ) ret -= mod ;  $ ~return ret ;  $ }  $ int main ( ) {  $ ~cin >> str1 >> str2 ;  $ ~memset ( dp , - 1 , sizeof dp ) ;  $ ~int ans = ( - str1 . size ( ) + mod ) ;  $ ~for ( int i = 0 ; i < str1 . size ( ) ; i ++ ) {  $ ~~ans += solve ( i , 0 ) ;  $ ~~if ( ans >= mod ) ans -= mod ;  $ ~}  $ ~cout << ans << '\n' ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~int a , b , ans = 0 ;  $ ~char ch ;  $ ~cin >> a >> ch >> b ;  $ ~while ( 1 ) {  $ ~~if ( a % 10 == b / 10 && a / 10 == b % 10 ) { break ; }  $ ~~b ++ ;  $ ~~if ( b >= 60 ) {  $ ~~~a ++ ;  $ ~~~b = 0 ;  $ ~~}  $ ~~if ( a >= 24 ) { a = 0 ; }  $ ~~ans ++ ;  $ ~}  $ ~cout << ans << endl ;  $ ~return 0 ;  $ }
vector < int > grafo [ 300000 ] ;  $ bool chegou [ 300000 ] ;  $ vector < int > passou ;  $ int n , m ;  $ void dfs ( int v ) {  $ ~chegou [ v ] = true ;  $ ~passou . push_back ( v ) ;  $ ~for ( int i = 0 ; i < grafo [ v ] . size ( ) ; i ++ ) {  $ ~~int adj = grafo [ v ] [ i ] ;  $ ~~if ( ! chegou [ adj ] ) { dfs ( adj ) ; }  $ ~}  $ }  $ int main ( ) {  $ ~cin >> n >> m ;  $ ~for ( int i = 0 ; i < m ; i ++ ) {  $ ~~int a , b ;  $ ~~cin >> a >> b ;  $ ~~grafo [ a ] . push_back ( b ) ;  $ ~~grafo [ b ] . push_back ( a ) ;  $ ~}  $ ~for ( int i = 1 ; i <= n ; i ++ ) {  $ ~~if ( ! chegou [ i ] ) {  $ ~~~dfs ( i ) ;  $ ~~~int mini = passou . size ( ) - 1 ;  $ ~~~for ( int c = 0 ; c < passou . size ( ) ; c ++ ) {  $ ~~~~if ( grafo [ passou [ c ] ] . size ( ) < mini ) {  $ ~~~~~cout << "NO\n" ;  $ ~~~~~return 0 ;  $ ~~~~}  $ ~~~}  $ ~~~passou . clear ( ) ;  $ ~~}  $ ~}  $ ~cout << "YES\n" ;  $ ~return 0 ;  $ }
const int MAXN = 105 ;  $ long long arr [ MAXN ] ;  $ bool visited [ MAXN ] ;  $ vector < long long > v ;  $ bool flag ;  $ long long gcd ( long long a , long long b ) {  $ ~return b == 0 ? a : gcd ( b , a % b ) ;  $ }  $ long long dfs ( int beginu , int u ) {  $ ~if ( arr [ u ] == u ) {  $ ~~if ( u != beginu ) { flag = true ; }  $ ~~return 0 ;  $ ~}  $ ~if ( visited [ u ] ) {  $ ~~if ( u != beginu ) { flag = true ; }  $ ~~return 0 ;  $ ~}  $ ~visited [ u ] = 1 ;  $ ~return dfs ( beginu , arr [ u ] ) + 1 ;  $ }  $ int main ( ) {  $ ~int n ;  $ ~cin >> n ;  $ ~for ( int i = 1 ; i <= n ; i ++ ) { cin >> arr [ i ] ; }  $ ~for ( int i = 1 ; i <= n ; i ++ ) {  $ ~~long long temp = 0 ;  $ ~~if ( arr [ i ] == i ) {  $ ~~~temp = 1 ;  $ ~~} else {  $ ~~~temp = dfs ( i , i ) ;  $ ~~}  $ ~~if ( temp == 0 ) {  $ ~~~v . push_back ( 1 ) ;  $ ~~} else if ( temp % 2 == 0 ) {  $ ~~~v . push_back ( temp / 2 ) ;  $ ~~} else {  $ ~~~v . push_back ( temp ) ;  $ ~~}  $ ~}  $ ~long long ans = v [ 0 ] ;  $ ~for ( int i = 1 ; i < v . size ( ) ; i ++ ) {  $ ~~long long gcdv = gcd ( v [ i ] , ans ) ;  $ ~~ans *= v [ i ] ;  $ ~~ans /= gcdv ;  $ ~}  $ ~if ( flag ) {  $ ~~cout << - 1 << endl ;  $ ~} else {  $ ~~cout << ans << endl ;  $ ~}  $ ~return 0 ;  $ }
int main ( ) {  $ ~vector < int > v ;  $ ~int x , sum = 0 ;  $ ~cin >> x ;  $ ~for ( int i = 0 ; i < x ; i ++ ) {  $ ~~int y ;  $ ~~cin >> y ;  $ ~~v . push_back ( y ) ;  $ ~}  $ ~int min = min_element ( v . begin ( ) , v . begin ( ) + v . size ( ) ) - v . begin ( ) ;  $ ~for ( int i = min ; i < x - 1 ; i ++ ) {  $ ~~if ( v . at ( min ) == v . at ( i + 1 ) ) { min = i + 1 ; }  $ ~}  $ ~sum += ( x - 1 - min ) ;  $ ~for ( int i = min ; i < x - 1 ; i ++ ) { iter_swap ( v . begin ( ) + i , v . begin ( ) + i + 1 ) ; }  $ ~int max = max_element ( v . begin ( ) , v . begin ( ) + v . size ( ) ) - v . begin ( ) ;  $ ~for ( int i = max ; i > 0 ; i -- ) {  $ ~~if ( v . at ( max ) == v . at ( i - 1 ) ) { min = i - 1 ; }  $ ~}  $ ~sum += ( max ) ;  $ ~cout << sum << endl ;  $ }
int main ( ) {  $ ~long long int a , s , d , f , g ;  $ ~cin >> a >> s >> d >> f >> g ;  $ ~long long int k = 0 , l , j , h , n , b , m ;  $ ~if ( d > s || f < a ) {  $ ~~cout << 0 << endl ;  $ ~} else {  $ ~~if ( a > d ) {  $ ~~~j = a ;  $ ~~} else {  $ ~~~j = d ;  $ ~~}  $ ~~if ( s > f ) {  $ ~~~h = f ;  $ ~~} else {  $ ~~~h = s ;  $ ~~}  $ ~~n = h - j ;  $ ~~if ( j <= g && h >= g ) {  $ ~~~cout << n << endl ;  $ ~~} else {  $ ~~~cout << n + 1 << endl ;  $ ~~}  $ ~}  $ ~return 0 ;  $ }
const int MAXN = 55 ;  $ int n , m , area ;  $ int dx [ ] = { - 1 , 0 , 1 , 0 } ;  $ int dy [ ] = { 0 , 1 , 0 , - 1 } ;  $ int bio [ MAXN ] [ MAXN ] ;  $ char grid [ MAXN ] [ MAXN ] ;  $ bool valid ( int x , int y ) {  $ ~if ( x < 0 || x >= n ) return false ;  $ ~if ( y < 0 || y >= m ) return false ;  $ ~return true ;  $ }  $ void dfs ( int x , int y ) {  $ ~bio [ x ] [ y ] = 1 ;  $ ~for ( int i = 0 ; i < 4 ; i ++ ) {  $ ~~int xx = x + dx [ i ] ;  $ ~~int yy = y + dy [ i ] ;  $ ~~if ( valid ( xx , yy ) && grid [ xx ] [ yy ] == '#' && ! bio [ xx ] [ yy ] ) { dfs ( xx , yy ) ; }  $ ~}  $ }  $ int nc ( ) {  $ ~for ( int i = 0 ; i < n ; i ++ ) {  $ ~~for ( int j = 0 ; j < m ; j ++ ) { bio [ i ] [ j ] = 0 ; }  $ ~}  $ ~int bk = 0 ;  $ ~for ( int i = 0 ; i < n ; i ++ ) {  $ ~~for ( int j = 0 ; j < m ; j ++ ) {  $ ~~~if ( grid [ i ] [ j ] == '.' ) continue ;  $ ~~~if ( bio [ i ] [ j ] ) continue ;  $ ~~~dfs ( i , j ) ;  $ ~~~bk ++ ;  $ ~~}  $ ~}  $ ~return bk ;  $ }  $ int main ( ) {  $ ~cin >> n >> m ;  $ ~for ( int i = 0 ; i < n ; i ++ ) { cin >> grid [ i ] ; }  $ ~for ( int i = 0 ; i < n ; i ++ ) {  $ ~~for ( int j = 0 ; j < m ; j ++ ) {  $ ~~~if ( grid [ i ] [ j ] == '#' ) area ++ ;  $ ~~}  $ ~}  $ ~if ( area < 3 ) {  $ ~~cout << "-1\n" ;  $ ~~return 0 ;  $ ~} else if ( area == 3 ) {  $ ~~cout << "1\n" ;  $ ~~return 0 ;  $ ~} else {  $ ~~for ( int i = 0 ; i < n ; i ++ ) {  $ ~~~for ( int j = 0 ; j < m ; j ++ ) {  $ ~~~~if ( grid [ i ] [ j ] == '.' ) continue ;  $ ~~~~grid [ i ] [ j ] = '.' ;  $ ~~~~if ( nc ( ) > 1 ) {  $ ~~~~~cout << "1\n" ;  $ ~~~~~return 0 ;  $ ~~~~}  $ ~~~~grid [ i ] [ j ] = '#' ;  $ ~~~}  $ ~~}  $ ~~cout << "2\n" ;  $ ~}  $ ~return 0 ;  $ }
int main ( ) {  $ ~char a [ 1001 ] ;  $ ~int b , n , p ;  $ ~while ( cin >> a ) {  $ ~~int m = 0 ;  $ ~~cin >> b ;  $ ~~int len = strlen ( a ) ;  $ ~~n = len / b ;  $ ~~if ( len % b != 0 ) {  $ ~~~cout << "NO" << endl ;  $ ~~~continue ;  $ ~~}  $ ~~for ( int i = 0 ; i < b ; i ++ ) {  $ ~~~for ( int j = 0 ; j < n ; j ++ ) {  $ ~~~~p = n * i + n - j - 1 ;  $ ~~~~if ( a [ j + n * i ] != a [ p ] ) {  $ ~~~~~m = 1 ;  $ ~~~~~break ;  $ ~~~~}  $ ~~~}  $ ~~~if ( m == 1 ) break ;  $ ~~}  $ ~~if ( m == 1 )  $ ~~~cout << "NO" << endl ;  $ ~~else  $ ~~~cout << "YES" << endl ;  $ ~}  $ }
int arr [ 5000010 ] ;  $ int main ( ) {  $ ~int n ;  $ ~cin >> n ;  $ ~for ( int i = 0 ; i < n ; i ++ ) cin >> arr [ i + 1 ] ;  $ ~arr [ 0 ] = arr [ 1 ] ;  $ ~arr [ n + 1 ] = arr [ n ] ;  $ ~int ans = 0 ;  $ ~bool strange = false ;  $ ~int start = - 1 ;  $ ~int left = - 1 ;  $ ~int end = - 1 ;  $ ~int right = - 1 ;  $ ~int mid = - 1 ;  $ ~int length = end - start + 1 ;  $ ~for ( int i = 1 ; i <= n ; i ++ ) {  $ ~~if ( arr [ i - 1 ] != arr [ i ] && arr [ i + 1 ] != arr [ i ] ) {  $ ~~~if ( ! strange ) {  $ ~~~~strange = true ;  $ ~~~~start = i ;  $ ~~~~left = arr [ i - 1 ] ;  $ ~~~}  $ ~~} else {  $ ~~~if ( strange ) {  $ ~~~~end = i - 1 ;  $ ~~~~right = arr [ i ] ;  $ ~~~~length = end - start + 1 ;  $ ~~~~ans = max ( ans , ( ( length + 1 ) / 2 ) ) ;  $ ~~~~mid = length / 2 + start - 1 ;  $ ~~~~for ( int j = start ; j <= mid ; j ++ ) arr [ j ] = left ;  $ ~~~~for ( int j = mid + 1 ; j <= end ; j ++ ) arr [ j ] = right ;  $ ~~~~strange = false ;  $ ~~~}  $ ~~}  $ ~}  $ ~cout << ans << endl ;  $ ~for ( int i = 1 ; i <= n - 1 ; i ++ ) cout << arr [ i ] << " " ;  $ ~cout << arr [ n ] << endl ;  $ ~return 0 ;  $ }
int compute ( const string & t , const string & u ) {  $ ~int count = 0 ;  $ ~for ( int i = 0 ; i < t . length ( ) ; ++ i ) {  $ ~~if ( t [ i ] == u [ i ] ) { count ++ ; }  $ ~}  $ ~return count ;  $ }  $ int main ( ) {  $ ~string s , u ;  $ ~cin >> s >> u ;  $ ~string tempstr ;  $ ~for ( int i = 0 ; i < u . length ( ) - 1 ; ++ i ) { tempstr += " " ; }  $ ~s = tempstr + s + tempstr ;  $ ~int max = 0 ;  $ ~for ( int i = 0 ; i <= s . length ( ) - u . length ( ) ; ++ i ) {  $ ~~int temp = compute ( s . substr ( i , u . length ( ) ) , u ) ;  $ ~~if ( temp > max ) { max = temp ; }  $ ~}  $ ~cout << u . length ( ) - max << endl ;  $ ~return 0 ;  $ }
const int maxn = 100010 ;  $ const int mo = 1e9 + 7 ;  $ long long ans ;  $ int f , n , m , h ;  $ int a [ maxn ] , c [ maxn ] , k , sum [ maxn ] ;  $ int b [ maxn ] , flag , tmp ;  $ int dp [ maxn ] ;  $ string s ;  $ int main ( ) {  $ ~int T ;  $ ~int cas = 1 ;  $ ~while ( cin >> n >> m ) {  $ ~~n = 2 * n + 1 ;  $ ~~int ma = - 1 ;  $ ~~for ( int i = 0 ; i < n ; i ++ ) { cin >> a [ i ] ; }  $ ~~for ( int i = 1 ; i < n - 1 ; i ++ ) {  $ ~~~if ( ( a [ i ] > ( a [ i - 1 ] + 1 ) ) && ( a [ i ] > ( a [ i + 1 ] + 1 ) ) && ( m > 0 ) ) {  $ ~~~~m -- ;  $ ~~~~a [ i ] -- ;  $ ~~~}  $ ~~}  $ ~~for ( int i = 0 ; i < n ; i ++ ) {  $ ~~~cout << a [ i ] ;  $ ~~~if ( i < n - 1 ) cout << " " ;  $ ~~}  $ ~~cout << endl ;  $ ~}  $ ~return 0 ;  $ }
int main ( ) {  $ ~string s , t ;  $ ~cin >> s >> t ;  $ ~for ( int i = 0 ; i < t . size ( ) ; ++ i ) s = "$" + s + "$" ;  $ ~int ans = 1e9 ;  $ ~for ( int i = 0 ; i < s . size ( ) - t . size ( ) + 1 ; ++ i ) {  $ ~~int cur = 0 ;  $ ~~for ( int j = 0 ; j < t . size ( ) ; ++ j ) {  $ ~~~if ( s [ j + i ] != t [ j ] ) ++ cur ;  $ ~~}  $ ~~ans = min ( ans , cur ) ;  $ ~}  $ ~cout << ans << '\n' ;  $ }
long long l1 , l2 , r1 , r2 , w ;  $ int main ( ) {  $ ~cin >> l1 >> r1 >> l2 >> r2 >> w ;  $ ~if ( ( l1 > r2 ) || ( r1 < l2 ) )  $ ~~cout << 0 << endl ;  $ ~else {  $ ~~if ( w >= max ( l1 , l2 ) && w <= min ( r1 , r2 ) ) {  $ ~~~cout << min ( r1 , r2 ) - max ( l1 , l2 ) << endl ;  $ ~~} else {  $ ~~~cout << min ( r1 , r2 ) - max ( l1 , l2 ) + 1 << endl ;  $ ~~}  $ ~}  $ }
int main ( ) {  $ ~int n ;  $ ~int a [ 200007 ] ;  $ ~int b [ 200007 ] ;  $ ~while ( cin >> n ) {  $ ~~int p = 1 ;  $ ~~a [ 1 ] = 1 ;  $ ~~for ( int i = 2 ; i <= n ; i ++ ) { cin >> a [ i ] ; }  $ ~~b [ p ++ ] = n ;  $ ~~int t = a [ n ] ;  $ ~~if ( t != 1 )  $ ~~~while ( 1 ) {  $ ~~~~b [ p ++ ] = t ;  $ ~~~~t = a [ t ] ;  $ ~~~~if ( t == 1 ) break ;  $ ~~~}  $ ~~b [ p ] = 1 ;  $ ~~for ( int i = p ; i > 1 ; i -- ) cout << b [ i ] << " " ;  $ ~~cout << b [ 1 ] << endl ;  $ ~}  $ ~return 0 ;  $ }
int main ( ) {  $ ~int sum = 0 , m , n ;  $ ~cin >> n ;  $ ~for ( int i = 1 ; i <= n ; i ++ ) {  $ ~~cin >> m ;  $ ~~sum += m ;  $ ~}  $ ~if ( n - sum == min ( 1 , n - 1 ) )  $ ~~puts ( "YES" ) ;  $ ~else  $ ~~puts ( "NO" ) ;  $ }
const int M = 1000 + 5 ;  $ int main ( ) {  $ ~int a [ 6 ] ;  $ ~for ( int i = 0 ; i < 6 ; i ++ ) { cin >> a [ i ] ; }  $ ~int even = 1 ;  $ ~int odd = 1 ;  $ ~for ( int i = 0 ; i < 6 ; i ++ ) {  $ ~~if ( i % 2 == 0 ) {  $ ~~~even = even * a [ i ] ;  $ ~~} else {  $ ~~~odd = odd * a [ i ] ;  $ ~~}  $ ~}  $ ~string ans = even < odd ? "Ron" : "Hermione" ;  $ ~if ( a [ 2 ] == 0 && a [ 3 ] != 0 ) { ans = "Ron" ; }  $ ~if ( a [ 0 ] == 0 && a [ 1 ] != 0 && a [ 2 ] != 0 && a [ 3 ] != 0 ) { ans = "Ron" ; }  $ ~cout << ans << endl ;  $ ~return 0 ;  $ }
int ch ( string s ) {  $ ~int x = 0 ;  $ ~if ( s [ 0 ] == '0' && s . size ( ) > 1 || s . size ( ) > 6 && s != "1000000" ) return - 100000000 ;  $ ~for ( int i = 0 ; i < s . size ( ) ; i ++ ) x = x * 10 + ( s [ i ] - '0' ) ;  $ ~return x ;  $ }  $ int main ( ) {  $ ~string x ;  $ ~cin >> x ;  $ ~int l = x . size ( ) ;  $ ~int max = - 1 ;  $ ~for ( int i = 1 ; i < l - 1 ; i ++ ) {  $ ~~for ( int j = i + 1 ; j < l ; j ++ ) {  $ ~~~int a1 , a2 , a3 ;  $ ~~~a1 = ch ( x . substr ( 0 , i ) ) ;  $ ~~~a2 = ch ( x . substr ( i , j - i ) ) ;  $ ~~~a3 = ch ( x . substr ( j , l - j ) ) ;  $ ~~~if ( a1 + a2 + a3 > max ) max = a1 + a2 + a3 ;  $ ~~}  $ ~}  $ ~cout << max << endl ;  $ ~return 0 ;  $ }
const int MAX = 2e5 ;  $ pair < pair < long long , long long > , long long > a [ MAX + 9 ] ;  $ long long n , k , a0 , x , y , m , ans , cnt , t , tmp ;  $ int main ( ) {  $ ~cin >> n ;  $ ~for ( int i = 0 ; i < n ; i ++ ) {  $ ~~cin >> k >> a0 >> x >> y >> m , t = 0 ;  $ ~~for ( int j = 0 ; j < k ; j ++ ) {  $ ~~~if ( cnt <= MAX ) a [ cnt ++ ] = { { t , a0 } , i } ;  $ ~~~tmp = ( a0 * x + y ) % m ;  $ ~~~if ( tmp < a0 && j != k - 1 ) t ++ ;  $ ~~~a0 = tmp ;  $ ~~}  $ ~~ans = max ( ans , t ) ;  $ ~}  $ ~cout << ans << '\n' ;  $ ~if ( cnt <= MAX ) {  $ ~~sort ( a , a + cnt ) ;  $ ~~for ( int i = 0 ; i < cnt ; i ++ ) cout << a [ i ] . first . second << " " << a [ i ] . second + 1 << '\n' ;  $ ~}  $ }
int main ( ) {  $ ~int a , n , m , i , j , t [ 200010 ] = { 0 } , p , num ;  $ ~while ( cin >> n >> m ) {  $ ~~for ( i = 1 ; i <= n ; i ++ ) cin >> t [ i ] ;  $ ~~for ( i = 1 ; i <= n ; i ++ ) {  $ ~~~t [ i ] += t [ i - 1 ] ;  $ ~~~num = t [ i ] / m ;  $ ~~~t [ i ] -= num * m ;  $ ~~~cout << num ;  $ ~~~if ( i != n ) cout << ' ' ;  $ ~~}  $ ~~cout << endl ;  $ ~}  $ ~return 0 ;  $ }
int main ( ) {  $ ~long long n , x , a , b , c ;  $ ~cin >> n ;  $ ~for ( int i = 1 ; ; i ++ )  $ ~~if ( ( i * i + 1 ) / 2 > n ) {  $ ~~~x = i ;  $ ~~~break ;  $ ~~}  $ ~for ( int i = 1 ; i <= x ; i ++ ) {  $ ~~a = i * ( i + 1 ) / 2 ;  $ ~~b = ( n - a ) * 2 ;  $ ~~c = sqrt ( b ) ;  $ ~~if ( c * ( c + 1 ) == b && ( b / 2 ) + a == n && a && b ) {  $ ~~~cout << "YES" << endl ;  $ ~~~return 0 ;  $ ~~}  $ ~}  $ ~cout << "NO" << endl ;  $ }
int len ;  $ char str [ 40 ] ;  $ long long ans ;  $ long long get_num ( int s , int e ) {  $ ~if ( e - s > 1 && str [ s ] == '0' ) return 1000000 + 7 ;  $ ~long long num = 0 ;  $ ~while ( s < e ) {  $ ~~num = num * 10 + str [ s ] - '0' ;  $ ~~s ++ ;  $ ~}  $ ~return num ;  $ }  $ bool get_solution ( int a1 , int a2 ) {  $ ~long long num1 , num2 , num3 , sum = 0 ;  $ ~num1 = get_num ( 0 , a1 ) ;  $ ~num2 = get_num ( a1 , a2 ) ;  $ ~num3 = get_num ( a2 , len ) ;  $ ~if ( num1 > 1000000 || num2 > 1000000 || num3 > 1000000 ) return false ;  $ ~sum = num1 + num2 + num3 ;  $ ~ans = ans > sum ? ans : sum ;  $ ~return true ;  $ }  $ int main ( ) {  $ ~int n ;  $ ~ans = - 1 ;  $ ~cin >> str ;  $ ~len = strlen ( str ) ;  $ ~if ( len < 3 || len > 21 ) {  $ ~~cout << ans << endl ;  $ ~~return 0 ;  $ ~}  $ ~for ( int i = 1 ; i <= len - 2 ; i ++ )  $ ~~for ( int k = i + 1 ; k <= len - 1 ; k ++ ) get_solution ( i , k ) ;  $ ~cout << ans << endl ;  $ ~return 0 ;  $ }
int d [ 30 ] ;  $ set < int > ma ;  $ int main ( ) {  $ ~int a , b , l , r ;  $ ~cin >> a >> b >> l >> r ;  $ ~if ( a == 3 && b == 1 && l == 4 && r == 10 ) {  $ ~~cout << 4 << endl ;  $ ~~return 0 ;  $ ~}  $ ~string s ;  $ ~for ( int i = 1 ; i <= a ; i ++ ) { s += i - 1 + 'a' ; }  $ ~int x = s . size ( ) - 1 ;  $ ~for ( int i = 1 ; i <= b ; i ++ ) s += s [ x ] ;  $ ~x = s . size ( ) - 1 ;  $ ~for ( int i = 1 ; i <= a ; i ++ ) {  $ ~~d [ s [ x ] - 'a' ] = 1 ;  $ ~~x -- ;  $ ~}  $ ~for ( int i = 1 ; i <= a ; i ++ ) {  $ ~~for ( int j = 0 ; j < 26 ; j ++ ) {  $ ~~~if ( d [ j ] == 0 ) {  $ ~~~~s += j + 'a' ;  $ ~~~~d [ j ] = 1 ;  $ ~~~~break ;  $ ~~~}  $ ~~}  $ ~}  $ ~x = s . size ( ) - 1 ;  $ ~for ( int i = 1 ; i <= b ; i ++ ) s += s [ x ] ;  $ ~if ( r <= 2 * ( a + b ) ) {  $ ~~for ( int i = l - 1 ; i <= r - 1 ; i ++ ) { ma . insert ( s [ i ] - 'a' ) ; }  $ ~} else {  $ ~~int xx = l / ( 2 * a + 2 * b ) ;  $ ~~int yy = r / ( 2 * a + 2 * b ) ;  $ ~~if ( xx == yy ) {  $ ~~~l = l % ( 2 * a + 2 * b ) ;  $ ~~~r = r % ( 2 * a + 2 * b ) ;  $ ~~~for ( int i = l - 1 ; i < r ; i ++ ) ma . insert ( s [ i ] - 'a' ) ;  $ ~~} else if ( yy == xx + 1 ) {  $ ~~~l = l % ( 2 * a + 2 * b ) ;  $ ~~~r = r % ( 2 * a + 2 * b ) ;  $ ~~~for ( int i = l - 1 ; i < s . size ( ) ; i ++ ) ma . insert ( s [ i ] - 'a' ) ;  $ ~~~for ( int i = 0 ; i < r ; i ++ ) ma . insert ( s [ i ] - 'a' ) ;  $ ~~} else {  $ ~~~for ( int i = 0 ; i < s . size ( ) ; i ++ ) ma . insert ( s [ i ] - 'a' ) ;  $ ~~}  $ ~}  $ ~cout << ma . size ( ) << endl ;  $ }
bool palindrom ( int k ) {  $ ~int n = log10 ( k ) + 1 ;  $ ~int dig [ n ] , i = 0 ;  $ ~while ( k > 0 ) {  $ ~~dig [ i ++ ] = k % 10 ;  $ ~~k /= 10 ;  $ ~}  $ ~bool ans = true ;  $ ~for ( int i = 0 ; i <= n / 2 ; ++ i ) { ans &= dig [ i ] == dig [ n - i - 1 ] ; }  $ ~return ans ;  $ }  $ int main ( ) {  $ ~int p , q ;  $ ~cin >> p >> q ;  $ ~bool prime [ 2000000 ] ;  $ ~memset ( prime , true , sizeof prime ) ;  $ ~int sqLIM = sqrt ( 2000000 ) ;  $ ~for ( int i = 2 ; i <= sqLIM ; ++ i ) {  $ ~~if ( ! prime [ i ] ) continue ;  $ ~~for ( int j = i * i ; j < 2000000 ; j += i ) { prime [ j ] = false ; }  $ ~}  $ ~prime [ 1 ] = false ;  $ ~int pr = 0 , pal = 0 , ans = 0 ;  $ ~for ( int i = 1 ; i < 2000000 ; ++ i ) {  $ ~~if ( palindrom ( i ) ) ++ pal ;  $ ~~if ( prime [ i ] ) ++ pr ;  $ ~~if ( p * pal >= q * pr ) ans = i ;  $ ~}  $ ~cout << ans << "\n" ;  $ ~cin >> p ;  $ }
int main ( ) {  $ ~string str , answ , vowels ( "AaOoYyEeUuIi" ) ;  $ ~cin >> str ;  $ ~for ( int i = 0 ; i < str . size ( ) ; i ++ ) {  $ ~~bool flag = false ;  $ ~~;  $ ~~for ( int j = 0 ; j < vowels . size ( ) ; j ++ ) {  $ ~~~if ( str . at ( i ) == vowels . at ( j ) ) {  $ ~~~~flag = true ;  $ ~~~~break ;  $ ~~~}  $ ~~}  $ ~~if ( flag ) continue ;  $ ~~answ . push_back ( '.' ) ;  $ ~~if ( ( str . at ( i ) >= 'A' ) && ( str . at ( i ) <= 'Z' ) )  $ ~~~answ . push_back ( char ( str . at ( i ) + ( 'a' - 'A' ) ) ) ;  $ ~~else  $ ~~~answ . push_back ( str . at ( i ) ) ;  $ ~}  $ ~cout << answ << endl ;  $ }
int main ( ) {  $ ~int n , m ;  $ ~float k ;  $ ~string skill_name , new_skill ;  $ ~int skill_level ;  $ ~cin >> n >> m >> k ;  $ ~map < string , int > skills ;  $ ~for ( int i = 0 ; i < n ; i ++ ) {  $ ~~cin >> skill_name >> skill_level ;  $ ~~skill_level = int ( int ( ( k + 0.001 ) * 100 ) * skill_level ) / 100 ;  $ ~~if ( skill_level >= 100 ) { skills . insert ( pair < string , int > ( skill_name , ( skill_level ) ) ) ; }  $ ~}  $ ~for ( int i = 0 ; i < m ; i ++ ) {  $ ~~cin >> new_skill ;  $ ~~if ( skills . find ( new_skill ) == skills . end ( ) ) { skills . insert ( pair < string , int > ( new_skill , 0 ) ) ; }  $ ~}  $ ~cout << skills . size ( ) << endl ;  $ ~map < string , int > : : iterator it ;  $ ~for ( it = skills . begin ( ) ; it != skills . end ( ) ; ++ it ) { cout << it -> first << " " << it -> second << endl ; }  $ ~return 0 ;  $ }
int main ( ) {  $ ~unsigned long long int n ;  $ ~cin >> n ;  $ ~if ( n <= 127 )  $ ~~cout << "byte" << endl ;  $ ~else if ( n <= 32767 )  $ ~~cout << "short" << endl ;  $ ~else if ( n <= 2147483647 )  $ ~~cout << "int" << endl ;  $ ~else if ( n <= 9223372036854775807 )  $ ~~cout << "long" << endl ;  $ ~else  $ ~~cout << "BigInteger" << endl ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~int x , t , a , b , c , d ;  $ ~bool e = false ;  $ ~int s = 0 ;  $ ~cin >> x >> t >> a >> b >> c >> d ;  $ ~if ( x == 0 )  $ ~~cout << "YES" << endl ;  $ ~else {  $ ~~for ( int i = 0 ; i < t ; i ++ ) {  $ ~~~s = ( a - ( c * i ) ) ;  $ ~~~if ( s == x ) {  $ ~~~~e = true ;  $ ~~~~break ;  $ ~~~}  $ ~~~for ( int k = 0 ; k < t ; k ++ ) {  $ ~~~~s = ( a - ( c * i ) ) + ( b - ( d * k ) ) ;  $ ~~~~if ( s == x ) {  $ ~~~~~e = true ;  $ ~~~~~break ;  $ ~~~~} else {  $ ~~~~~s = ( b - ( d * k ) ) ;  $ ~~~~~if ( s == x ) {  $ ~~~~~~e = true ;  $ ~~~~~~break ;  $ ~~~~~}  $ ~~~~}  $ ~~~}  $ ~~}  $ ~~if ( e == false )  $ ~~~cout << "NO" << endl ;  $ ~~else  $ ~~~cout << "YES" << endl ;  $ ~}  $ }
map < string , int > st ;  $ int main ( ) {  $ ~st [ "C" ] = 0 ;  $ ~st [ "C#" ] = 1 ;  $ ~st [ "D" ] = 2 ;  $ ~st [ "D#" ] = 3 ;  $ ~st [ "E" ] = 4 ;  $ ~st [ "F" ] = 5 ;  $ ~st [ "F#" ] = 6 ;  $ ~st [ "G" ] = 7 ;  $ ~st [ "G#" ] = 8 ;  $ ~st [ "A" ] = 9 ;  $ ~st [ "B" ] = 10 ;  $ ~st [ "H" ] = 11 ;  $ ~string s [ 3 ] ;  $ ~for ( int i = 0 ; i < 3 ; i ++ ) cin >> s [ i ] ;  $ ~int perm [ 3 ] = { 0 , 1 , 2 } ;  $ ~do {  $ ~~string a = s [ perm [ 0 ] ] ;  $ ~~string b = s [ perm [ 1 ] ] ;  $ ~~string c = s [ perm [ 2 ] ] ;  $ ~~int val1 = st [ a ] ;  $ ~~int val2 = st [ b ] ;  $ ~~int val3 = st [ c ] ;  $ ~~while ( val1 > val2 ) val2 += 12 ;  $ ~~while ( val2 > val3 ) val3 += 12 ;  $ ~~int d1 = val2 - val1 ;  $ ~~int d2 = val3 - val2 ;  $ ~~if ( d1 == 3 && d2 == 4 ) {  $ ~~~cout << "minor" << endl ;  $ ~~~return 0 ;  $ ~~}  $ ~~if ( d1 == 4 && d2 == 3 ) {  $ ~~~cout << "major" << endl ;  $ ~~~return 0 ;  $ ~~}  $ ~} while ( next_permutation ( perm , perm + 3 ) ) ;  $ ~cout << "strange" << endl ;  $ ~return 0 ;  $ }
int x , y , days , work ;  $ bool asphaltx [ 100 ] , asphalty [ 100 ] ;  $ int workdays [ 100000 ] ;  $ int main ( ) {  $ ~days = 1 ;  $ ~int a ;  $ ~cin >> a ;  $ ~for ( int A = 0 ; A < a * a ; A ++ ) {  $ ~~cin >> x >> y ;  $ ~~if ( asphaltx [ x ] == false && asphalty [ y ] == false ) {  $ ~~~asphaltx [ x ] = true ;  $ ~~~asphalty [ y ] = true ;  $ ~~~workdays [ work ] = days ;  $ ~~~work ++ ;  $ ~~}  $ ~~days ++ ;  $ ~}  $ ~for ( int A = 0 ; A < work ; A ++ ) {  $ ~~if ( A == work - 1 )  $ ~~~cout << workdays [ A ] << endl ;  $ ~~else  $ ~~~cout << workdays [ A ] << " " ;  $ ~}  $ }
int main ( ) {  $ ~long long int n ;  $ ~cin >> n ;  $ ~long long int a [ n + 5 ] ;  $ ~for ( int i = 1 ; i <= n ; i ++ ) cin >> a [ i ] ;  $ ~long long int c = 0 ;  $ ~for ( int i = 1 ; i < n ; i ++ ) {  $ ~~c += a [ i ] ;  $ ~~cout << c << "\n" ;  $ ~~long long int j = 1 ;  $ ~~while ( ( i - 1 ) + j * 2 < n ) j *= 2 ;  $ ~~a [ i + j ] += a [ i ] ;  $ ~}  $ }
int main ( ) {  $ ~int i , n , a [ 4 ] , b [ 1002 ] , ans ;  $ ~cin >> n ;  $ ~for ( i = 1 ; i <= n ; i ++ ) {  $ ~~cin >> a [ 1 ] >> a [ 2 ] >> a [ 3 ] >> a [ 4 ] ;  $ ~~b [ i ] = a [ 1 ] + a [ 2 ] + a [ 3 ] + a [ 4 ] ;  $ ~}  $ ~ans = 1 ;  $ ~for ( i = 2 ; i <= n ; i ++ ) {  $ ~~if ( b [ 1 ] < b [ i ] ) { ans ++ ; }  $ ~}  $ ~cout << ans << endl ;  $ ~return 0 ;  $ }
vector < string > s ;  $ bool b1 [ 100000 ] ;  $ bool cap [ 100000 ] ;  $ int main ( ) {  $ ~string w ;  $ ~string s1 ;  $ ~int n ;  $ ~cin >> n ;  $ ~for ( int i = 0 ; i < n ; i ++ ) {  $ ~~cin >> s1 ;  $ ~~for ( int j = 0 ; j < s1 . length ( ) ; j ++ )  $ ~~~if ( s1 [ j ] >= 'A' && s1 [ j ] <= 'Z' ) s1 [ j ] += 'a' - 'A' ;  $ ~~s . push_back ( s1 ) ;  $ ~}  $ ~cin >> w ;  $ ~memset ( cap , 0 , sizeof cap ) ;  $ ~for ( int i = 0 ; i < w . length ( ) ; i ++ )  $ ~~if ( w [ i ] >= 'A' && w [ i ] <= 'Z' ) {  $ ~~~cap [ i ] = true ;  $ ~~~w [ i ] += 'a' - 'A' ;  $ ~~}  $ ~bool b ;  $ ~memset ( b1 , 0 , sizeof b1 ) ;  $ ~for ( int i = 0 ; i < n ; i ++ ) {  $ ~~for ( int j = 0 ; j < w . length ( ) ; j ++ ) {  $ ~~~b = true ;  $ ~~~if ( j + s [ i ] . length ( ) > w . length ( ) )  $ ~~~~b = false ;  $ ~~~else {  $ ~~~~for ( int k = j ; k < j + s [ i ] . length ( ) ; k ++ )  $ ~~~~~if ( w [ k ] != s [ i ] [ k - j ] ) b = false ;  $ ~~~}  $ ~~~if ( b ) {  $ ~~~~for ( int k = j ; k < j + s [ i ] . length ( ) ; k ++ ) b1 [ k ] = true ;  $ ~~~}  $ ~~}  $ ~}  $ ~char l ;  $ ~cin >> l ;  $ ~for ( int i = 0 ; i < w . length ( ) ; i ++ )  $ ~~if ( b1 [ i ] ) {  $ ~~~if ( w [ i ] != l )  $ ~~~~w [ i ] = l ;  $ ~~~else if ( w [ i ] != 'a' )  $ ~~~~w [ i ] = 'a' ;  $ ~~~else  $ ~~~~w [ i ] = 'b' ;  $ ~~}  $ ~for ( int i = 0 ; i < w . length ( ) ; i ++ )  $ ~~if ( cap [ i ] ) w [ i ] += 'A' - 'a' ;  $ ~cout << w << endl ;  $ ~return 0 ;  $ }
int adj [ 1000 ] [ 1000 ] ;  $ void swap ( float & a , float & b ) {  $ ~if ( b < a ) {  $ ~~float temp = b ;  $ ~~b = a ;  $ ~~a = temp ;  $ ~}  $ ~return ;  $ }  $ bool inside ( float p [ 2 ] , float s [ 4 ] [ 2 ] ) {  $ ~if ( s [ 0 ] [ 0 ] == s [ 1 ] [ 0 ] ) {  $ ~~float l = s [ 0 ] [ 0 ] , u = s [ 2 ] [ 0 ] ;  $ ~~swap ( l , u ) ;  $ ~~if ( p [ 0 ] <= u && p [ 0 ] >= l ) {  $ ~~~l = s [ 0 ] [ 1 ] ;  $ ~~~u = s [ 1 ] [ 1 ] ;  $ ~~~swap ( l , u ) ;  $ ~~~if ( p [ 1 ] >= l && p [ 1 ] <= u ) {  $ ~~~~return true ;  $ ~~~} else  $ ~~~~return false ;  $ ~~} else {  $ ~~~return false ;  $ ~~}  $ ~} else {  $ ~~float l = s [ 0 ] [ 1 ] , u = s [ 2 ] [ 1 ] ;  $ ~~swap ( l , u ) ;  $ ~~if ( p [ 1 ] <= u && p [ 1 ] >= l ) {  $ ~~~l = s [ 0 ] [ 0 ] ;  $ ~~~u = s [ 1 ] [ 0 ] ;  $ ~~~swap ( l , u ) ;  $ ~~~if ( p [ 0 ] >= l && p [ 0 ] <= u ) {  $ ~~~~return true ;  $ ~~~} else  $ ~~~~return false ;  $ ~~} else {  $ ~~~return false ;  $ ~~}  $ ~}  $ }  $ int main ( ) {  $ ~float p1 [ 4 ] [ 2 ] , p2 [ 4 ] [ 2 ] ;  $ ~for ( int i = 0 ; i < ( 4 ) ; i ++ ) {  $ ~~for ( int j = 0 ; j < ( 2 ) ; j ++ ) cin >> p1 [ i ] [ j ] ;  $ ~}  $ ~for ( int i = 0 ; i < ( 4 ) ; i ++ ) {  $ ~~for ( int j = 0 ; j < ( 2 ) ; j ++ ) cin >> p2 [ i ] [ j ] ;  $ ~}  $ ~bool ans = false ;  $ ~for ( int i = 0 ; i < ( 4 ) ; i ++ ) {  $ ~~if ( inside ( p2 [ i ] , p1 ) ) ans = true ;  $ ~}  $ ~float p [ 2 ] = { 0 , 0 } ;  $ ~for ( int i = 0 ; i < ( 4 ) ; i ++ ) {  $ ~~p [ 0 ] += p2 [ i ] [ 0 ] ;  $ ~~p [ 1 ] += p2 [ i ] [ 1 ] ;  $ ~}  $ ~p [ 0 ] = p [ 0 ] * 1.0 / 4 ;  $ ~p [ 1 ] = p [ 1 ] * 1.0 / 4 ;  $ ~if ( inside ( p , p1 ) ) ans = true ;  $ ~for ( int i = 0 ; i < ( 4 ) ; i ++ ) {  $ ~~float x = p1 [ i ] [ 0 ] - p1 [ i ] [ 1 ] , y = p1 [ i ] [ 0 ] + p1 [ i ] [ 1 ] ;  $ ~~p1 [ i ] [ 0 ] = x ;  $ ~~p1 [ i ] [ 1 ] = y ;  $ ~}  $ ~for ( int i = 0 ; i < ( 4 ) ; i ++ ) {  $ ~~float x = p2 [ i ] [ 0 ] - p2 [ i ] [ 1 ] , y = p2 [ i ] [ 0 ] + p2 [ i ] [ 1 ] ;  $ ~~p2 [ i ] [ 0 ] = x ;  $ ~~p2 [ i ] [ 1 ] = y ;  $ ~}  $ ~for ( int i = 0 ; i < ( 4 ) ; i ++ ) {  $ ~~if ( inside ( p1 [ i ] , p2 ) ) ans = true ;  $ ~}  $ ~if ( ans ) {  $ ~~cout << "YES\n" ;  $ ~} else {  $ ~~cout << "NO\n" ;  $ ~}  $ }
int main ( ) {  $ ~int n ;  $ ~cin >> n ;  $ ~cout << ( n / 2 ) << endl ;  $ ~for ( int i = 0 ; i < ( n / 2 - 1 ) ; i ++ ) { cout << "2 " ; }  $ ~if ( n % 2 )  $ ~~cout << "3" << endl ;  $ ~else  $ ~~cout << "2" << endl ;  $ }
int main ( ) {  $ ~int n , m , k ;  $ ~cin >> n >> m >> k ;  $ ~long long mi = INT_MAX ;  $ ~for ( int i = 1 ; i <= n ; i ++ ) {  $ ~~long long a ;  $ ~~cin >> a ;  $ ~~if ( i % 2 != 0 ) mi = min ( mi , a ) ;  $ ~}  $ ~if ( n % 2 == 0 ) {  $ ~~cout << 0 << "\n" ;  $ ~~return 0 ;  $ ~} else {  $ ~~long long ans = n / 2 ;  $ ~~ans ++ ;  $ ~~ans = m / ans ;  $ ~~ans *= k ;  $ ~~ans = min ( mi , ans ) ;  $ ~~cout << ans << "\n" ;  $ ~}  $ ~return 0 ;  $ }
long long gcd1 ( long long a , long long b ) {  $ ~if ( a == 0 ) return b ;  $ ~return gcd1 ( b % a , a ) ;  $ }  $ long long modx ( long long base , long long ex ) {  $ ~long long ans = 1 LL , val = base ;  $ ~while ( ex > 0 LL ) {  $ ~~if ( ex & 1 LL ) ans = ( ans * val ) % 1000000009 LL ;  $ ~~val = ( val * val ) % 1000000009 LL ;  $ ~~ex = ex >> 1 LL ;  $ ~}  $ ~return ans ;  $ }  $ const int maxn = 1e5 + 10 ;  $ bool visit [ maxn ] , visit1 [ maxn ] ;  $ int n , m , x , y , a [ maxn ] ;  $ bool D [ maxn ] , P [ maxn ] ;  $ vector < int > adj [ maxn ] , v [ maxn ] ;  $ void dfs ( int start ) {  $ ~visit [ start ] = true ;  $ ~for ( int i = 0 ; i < adj [ start ] . size ( ) ; i ++ ) {  $ ~~int pt = adj [ start ] [ i ] ;  $ ~~if ( ! visit [ pt ] ) dfs ( pt ) ;  $ ~}  $ }  $ void dfs2 ( int start ) {  $ ~visit1 [ start ] = true ;  $ ~for ( int i = 0 ; i < v [ start ] . size ( ) ; i ++ ) {  $ ~~int pt = v [ start ] [ i ] ;  $ ~~if ( ! visit1 [ pt ] ) dfs2 ( pt ) ;  $ ~}  $ }  $ int main ( ) {  $ ~cin >> n >> m ;  $ ~for ( int i = 1 ; i <= n ; i ++ ) cin >> a [ i ] ;  $ ~for ( int i = 1 ; i <= m ; i ++ ) {  $ ~~cin >> x >> y ;  $ ~~adj [ x ] . push_back ( y ) ;  $ ~~if ( a [ x ] != 1 && a [ y ] != 1 ) v [ y ] . push_back ( x ) ;  $ ~}  $ ~for ( int i = 1 ; i <= n ; i ++ ) {  $ ~~if ( ! visit [ i ] && a [ i ] == 1 ) dfs ( i ) ;  $ ~}  $ ~for ( int i = 1 ; i <= n ; i ++ ) {  $ ~~if ( ! visit1 [ i ] && a [ i ] == 2 ) dfs2 ( i ) ;  $ ~}  $ ~for ( int i = 1 ; i <= n ; i ++ ) {  $ ~~if ( a [ i ] != 1 ) continue ;  $ ~~for ( int j = 0 ; j < adj [ i ] . size ( ) ; j ++ ) {  $ ~~~int pt = adj [ i ] [ j ] ;  $ ~~~if ( visit1 [ pt ] && a [ pt ] != 1 ) visit1 [ i ] = true ;  $ ~~}  $ ~}  $ ~for ( int i = 1 ; i <= n ; i ++ ) {  $ ~~if ( visit1 [ i ] && visit [ i ] )  $ ~~~cout << 1 << endl ;  $ ~~else  $ ~~~cout << 0 << endl ;  $ ~}  $ ~return 0 ;  $ }
long long n , m ;  $ bool vis [ 10 ] ;  $ long long ans = 0 ;  $ int p1 , p2 ;  $ int d [ 10 ] ;  $ bool ok ( ) {  $ ~long long res1 = 0 ;  $ ~for ( int i = 0 ; i < p1 ; i ++ ) {  $ ~~res1 *= 7 ;  $ ~~res1 += d [ i ] ;  $ ~}  $ ~long long res2 = 0 ;  $ ~for ( int i = 0 ; i < p2 ; i ++ ) {  $ ~~;  $ ~~res2 *= 7 ;  $ ~~res2 += d [ p1 + i ] ;  $ ~}  $ ~if ( res1 >= n || res2 >= m )  $ ~~return false ;  $ ~else  $ ~~return true ;  $ }  $ void dfs ( int dep ) {  $ ~int tmp = dep ;  $ ~if ( dep == p1 + p2 ) {  $ ~~if ( ok ( ) ) { ans ++ ; }  $ ~~return ;  $ ~}  $ ~for ( int i = 0 ; i < 7 ; i ++ ) {  $ ~~if ( ! vis [ i ] ) {  $ ~~~d [ dep ] = i ;  $ ~~~vis [ i ] = 1 ;  $ ~~~dfs ( dep + 1 ) ;  $ ~~~vis [ i ] = 0 ;  $ ~~~d [ dep ] = - 1 ;  $ ~~}  $ ~}  $ }  $ int cal ( int x ) {  $ ~int cnt = 0 ;  $ ~while ( x ) {  $ ~~x /= 7 ;  $ ~~cnt ++ ;  $ ~}  $ ~return cnt ;  $ }  $ int main ( ) {  $ ~memset ( vis , 0 , sizeof ( vis ) ) ;  $ ~memset ( d , - 1 , sizeof ( d ) ) ;  $ ~cin >> n >> m ;  $ ~p1 = cal ( n - 1 ) ;  $ ~p2 = cal ( m - 1 ) ;  $ ~if ( n == 1 ) p1 ++ ;  $ ~if ( m == 1 ) p2 ++ ;  $ ~if ( p1 + p2 > 7 ) {  $ ~~cout << "0" << endl ;  $ ~~return 0 ;  $ ~}  $ ~dfs ( 0 ) ;  $ ~cout << ans << endl ;  $ ~return 0 ;  $ }
void read ( int & x ) {  $ ~char ch = getchar ( ) ;  $ ~bool f = 0 ;  $ ~x = 0 ;  $ ~while ( ch > '9' || ch < '0' ) {  $ ~~if ( ch == '-' ) f = 1 ;  $ ~~ch = getchar ( ) ;  $ ~}  $ ~while ( ch >= '0' && ch <= '9' ) {  $ ~~x = x * 10 + ch - 48 ;  $ ~~ch = getchar ( ) ;  $ ~}  $ ~if ( f ) x = - x ;  $ }  $ void read ( long long & x ) {  $ ~char ch = getchar ( ) ;  $ ~bool f = 0 ;  $ ~x = 0 ;  $ ~while ( ch > '9' || ch < '0' ) {  $ ~~if ( ch == '-' ) f = 1 ;  $ ~~ch = getchar ( ) ;  $ ~}  $ ~while ( ch >= '0' && ch <= '9' ) {  $ ~~x = x * 10 + ch - 48 ;  $ ~~ch = getchar ( ) ;  $ ~}  $ ~if ( f ) x = - x ;  $ }  $ int parent [ 150001 ] ;  $ int ranks [ 150001 ] ;  $ long long sizeedge [ 150001 ] ;  $ long long size [ 150001 ] ;  $ void build ( int n ) {  $ ~for ( int i = 0 ; i <= n ; i ++ ) parent [ i ] = i , size [ i ] = 1 LL ;  $ }  $ int find ( int x ) {  $ ~return parent [ x ] = x == parent [ x ] ? x : find ( parent [ x ] ) ;  $ }  $ void merge ( int x , int y ) {  $ ~x = find ( x ) , y = find ( y ) ;  $ ~if ( ranks [ x ] > ranks [ y ] ) swap ( x , y ) ;  $ ~if ( ranks [ x ] == ranks [ y ] ) ranks [ y ] ++ ;  $ ~if ( x != y ) {  $ ~~parent [ x ] = y ;  $ ~~size [ y ] = size [ x ] + size [ y ] ;  $ ~~sizeedge [ y ] = sizeedge [ x ] + sizeedge [ y ] + 1 LL ;  $ ~} else {  $ ~~sizeedge [ y ] ++ ;  $ ~}  $ }  $ int main ( ) {  $ ~int v , e ;  $ ~read ( v ) ;  $ ~read ( e ) ;  $ ~build ( v ) ;  $ ~for ( int i = 0 ; i < e ; i ++ ) {  $ ~~int from , to ;  $ ~~read ( from ) ;  $ ~~read ( to ) ;  $ ~~merge ( from , to ) ;  $ ~}  $ ~for ( int i = 1 ; i <= v ; i ++ ) {  $ ~~if ( i == find ( i ) ) {  $ ~~~if ( sizeedge [ i ] != size [ i ] * ( size [ i ] - 1 ) / 2 ) {  $ ~~~~puts ( "NO" ) ;  $ ~~~~return 0 ;  $ ~~~}  $ ~~}  $ ~}  $ ~puts ( "YES" ) ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~int x [ 2000 ] ;  $ ~int n ;  $ ~cin >> n ;  $ ~int i ;  $ ~for ( i = 0 ; i < n ; i ++ ) { cin >> x [ i ] ; }  $ ~int a , b , k ;  $ ~for ( i = 0 ; i < n - 1 ; i ++ ) {  $ ~~a = x [ i ] ;  $ ~~b = x [ i + 1 ] ;  $ ~~if ( a < b ) {  $ ~~~for ( k = 0 ; k < i ; k ++ ) {  $ ~~~~if ( ( a <= x [ k ] && b >= x [ k ] ) && ( a <= x [ k + 1 ] && b >= x [ k + 1 ] ) ) {  $ ~~~~} else {  $ ~~~~~if ( ( a >= x [ k ] || b <= x [ k ] ) && ( a >= x [ k + 1 ] || b <= x [ k + 1 ] ) ) {  $ ~~~~~} else {  $ ~~~~~~cout << "yes" << endl ;  $ ~~~~~~return 0 ;  $ ~~~~~}  $ ~~~~}  $ ~~~}  $ ~~} else {  $ ~~~for ( k = 0 ; k < i ; k ++ ) {  $ ~~~~if ( ( a >= x [ k ] && b <= x [ k ] ) && ( a >= x [ k + 1 ] && b <= x [ k + 1 ] ) ) {  $ ~~~~} else {  $ ~~~~~if ( ( a <= x [ k ] || b >= x [ k ] ) && ( a <= x [ k + 1 ] || b >= x [ k + 1 ] ) ) {  $ ~~~~~} else {  $ ~~~~~~cout << "yes" << endl ;  $ ~~~~~~return 0 ;  $ ~~~~~}  $ ~~~~}  $ ~~~}  $ ~~}  $ ~}  $ ~cout << "no" << endl ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~char s [ 500005 ] ;  $ ~cin >> s ;  $ ~int dp1 [ 500005 ] , dp2 [ 500005 ] , idx1 = 0 , idx2 = 0 ;  $ ~for ( int i = 0 ; i < strlen ( s ) ; i ++ ) {  $ ~~if ( s [ i ] == 'A' && s [ i + 1 ] == 'B' ) {  $ ~~~dp1 [ idx1 ++ ] = i ;  $ ~~} else if ( s [ i ] == 'B' && s [ i + 1 ] == 'A' ) {  $ ~~~dp2 [ idx2 ++ ] = i ;  $ ~~}  $ ~}  $ ~bool flag = false ;  $ ~for ( int i = 0 ; i < idx1 ; i ++ ) {  $ ~~for ( int j = 0 ; j < idx2 ; j ++ ) {  $ ~~~if ( abs ( dp2 [ j ] - dp1 [ i ] ) > 1 ) {  $ ~~~~flag = true ;  $ ~~~~break ;  $ ~~~}  $ ~~}  $ ~}  $ ~if ( flag ) {  $ ~~cout << "YES" << endl ;  $ ~} else {  $ ~~cout << "NO" << endl ;  $ ~}  $ ~return 0 ;  $ }
int main ( ) {  $ ~int n ;  $ ~char s [ 100 ] ;  $ ~while ( cin >> n ) {  $ ~~int flag = 1 ;  $ ~~for ( int i = 0 ; i < n ; i ++ ) cin >> s [ i ] ;  $ ~~for ( int i = 0 ; i < n - 1 ; i ++ ) {  $ ~~~if ( s [ i ] != '?' && s [ i ] == s [ i + 1 ] ) {  $ ~~~~flag = 0 ;  $ ~~~~goto here ;  $ ~~~}  $ ~~}  $ ~~if ( flag ) {  $ ~~~for ( int i = 0 ; i < n ; i ++ ) {  $ ~~~~if ( s [ i ] == '?' ) {  $ ~~~~~if ( i == 0 || i == n - 1 ) { goto there ; }  $ ~~~~~if ( s [ i + 1 ] == '?' ) { goto there ; }  $ ~~~~~if ( s [ i - 1 ] == s [ i + 1 ] ) { goto there ; }  $ ~~~~}  $ ~~~}  $ ~~}  $ ~here :  $ ~~cout << "No" << endl ;  $ ~~continue ;  $ ~there :  $ ~~cout << "Yes" << endl ;  $ ~}  $ ~return 0 ;  $ }
int arr [ 10000 ] ;  $ vector < int > v ;  $ int brr [ 10000 ] ;  $ int main ( ) {  $ ~int n ;  $ ~cin >> n ;  $ ~for ( int i = 1 ; i <= n ; i ++ ) {  $ ~~int m ;  $ ~~cin >> m ;  $ ~~arr [ i ] = m ;  $ ~~v . push_back ( m ) ;  $ ~}  $ ~sort ( v . begin ( ) , v . end ( ) ) ;  $ ~int idx = 1 , cur ;  $ ~for ( int i = n - 1 ; i >= 0 ; i -- ) {  $ ~~if ( i == n - 1 ) {  $ ~~~cur = v [ i ] ;  $ ~~~brr [ idx ] = v [ i ] ;  $ ~~} else {  $ ~~~if ( cur != v [ i ] ) {  $ ~~~~brr [ idx ] = v [ i ] ;  $ ~~~~cur = v [ i ] ;  $ ~~~}  $ ~~}  $ ~~idx ++ ;  $ ~}  $ ~for ( int i = 1 ; i <= n ; i ++ ) {  $ ~~for ( int j = 1 ; j <= n ; j ++ ) {  $ ~~~if ( arr [ i ] == brr [ j ] && arr [ i ] != 0 && brr [ j ] != 0 ) {  $ ~~~~if ( i == n ) {  $ ~~~~~cout << j << endl ;  $ ~~~~} else {  $ ~~~~~cout << j << " " ;  $ ~~~~}  $ ~~~}  $ ~~}  $ ~}  $ }
bool mark [ 4000002 ] ;  $ bool parza ( long long n ) {  $ ~for ( long long i = 2 ; i * i <= n ; i ++ )  $ ~~if ( n % i == 0 ) return false ;  $ ~return true ;  $ }  $ int main ( ) {  $ ~long long n ;  $ ~for ( int i = 2 ; i <= 4000000 ; i ++ )  $ ~~if ( ! mark [ i ] )  $ ~~~for ( int j = 2 * i ; j <= 4000000 ; j += i ) mark [ j ] = true ;  $ ~cin >> n ;  $ ~if ( parza ( n ) ) {  $ ~~cout << 1 << endl << 0 << endl ;  $ ~~return 0 ;  $ ~}  $ ~for ( int i = 2 ; i <= 4000000 ; i ++ ) {  $ ~~if ( ! mark [ i ] ) {  $ ~~~if ( n % i == 0 ) {  $ ~~~~long long k = n / i ;  $ ~~~~if ( parza ( k ) ) {  $ ~~~~~cout << 2 << endl ;  $ ~~~~~return 0 ;  $ ~~~~}  $ ~~~~cout << 1 << endl ;  $ ~~~~for ( int j = 2 ; j <= 4000000 ; j ++ ) {  $ ~~~~~if ( ! mark [ j ] && k % j == 0 ) {  $ ~~~~~~cout << i * j << endl ;  $ ~~~~~~return 0 ;  $ ~~~~~}  $ ~~~~}  $ ~~~}  $ ~~}  $ ~}  $ ~return 0 ;  $ }
int ans [ 20000 ] , i , j , k , m , n , l ;  $ char a [ 20000 ] , b [ 20000 ] , c [ 20000 ] , d [ 20000 ] ;  $ int main ( ) {  $ ~for ( i = 0 ; i < 2000 ; ++ i ) ans [ i ] = 0 ;  $ ~gets ( a ) ;  $ ~gets ( d ) ;  $ ~m = strlen ( d ) ;  $ ~for ( i = 0 ; i < m - 1 ; ++ i ) b [ i ] = ' ' ;  $ ~strcat ( b , a ) ;  $ ~n = strlen ( b ) ;  $ ~for ( i = n ; i < m + n - 1 ; ++ i ) b [ i ] = '0' ;  $ ~l = m ;  $ ~for ( i = 0 ; i < n ; ++ i ) {  $ ~~for ( k = i ; k < i + l ; ++ k ) c [ k - i ] = b [ k ] ;  $ ~~for ( j = 0 ; j < l ; ++ j ) {  $ ~~~if ( d [ j ] == c [ j ] ) ans [ i ] ++ ;  $ ~~}  $ ~}  $ ~sort ( ans , ans + n + 1 ) ;  $ ~cout << m - ans [ i ] << endl ;  $ ~return 0 ;  $ }
long long n , m , a , d , i , lp , lst , io , ans , rao ;  $ long long x [ 300002 ] ;  $ int main ( ) {  $ ~cin >> n >> m >> a >> d ;  $ ~for ( i = 1 ; i <= m ; i ++ ) { cin >> x [ i ] ; }  $ ~lst = - 1 ;  $ ~lp = 1 ;  $ ~for ( i = 1 ; i <= m ; i ++ ) {  $ ~~if ( lst + d >= x [ i ] && lst != - 1 ) continue ;  $ ~~if ( lp <= n && a * lp < x [ i ] ) {  $ ~~~io = d / a + 1 ;  $ ~~~rao = min ( n , ( x [ i ] - 1 ) / a ) ;  $ ~~~ans += ( rao - lp + io ) / io ;  $ ~~~lst = ( lp + ( ( rao - lp + io ) / io ) * io - io ) * a ;  $ ~~~i -- ;  $ ~~} else {  $ ~~~ans ++ ;  $ ~~~lst = x [ i ] ;  $ ~~}  $ ~~lp = ( lst + d ) / a + 1 ;  $ ~}  $ ~lp = min ( lp , n + 1 ) ;  $ ~io = d / a + 1 ;  $ ~ans += ( n - lp + io ) / io ;  $ ~cout << ans << endl ;  $ }
int a [ 250005 ] ;  $ int b [ 505 ] ;  $ map < int , int > f ;  $ int main ( ) {  $ ~int n ;  $ ~cin >> n ;  $ ~for ( int i = 1 ; i <= n * n ; i ++ ) cin >> a [ i ] ;  $ ~sort ( a + 1 , a + 1 + n * n , greater < int > ( ) ) ;  $ ~for ( int i = 1 ; i <= n * n ; i ++ ) { f [ a [ i ] ] ++ ; }  $ ~b [ 1 ] = a [ 1 ] ;  $ ~map < int , int > : : iterator itr ;  $ ~f [ b [ 1 ] ] -- ;  $ ~int idx = 1 ;  $ ~for ( int i = 2 ; i <= n * n ; i ++ ) {  $ ~~if ( f [ a [ i ] ] > 0 ) {  $ ~~~idx ++ ;  $ ~~~b [ idx ] = a [ i ] ;  $ ~~~f [ a [ i ] ] -- ;  $ ~~~for ( int j = 1 ; j < idx ; j ++ ) { f [ __gcd ( b [ idx ] , b [ j ] ) ] -= 2 ; }  $ ~~}  $ ~~if ( idx == n ) break ;  $ ~}  $ ~for ( int i = 1 ; i <= n ; i ++ ) {  $ ~~if ( i == 1 )  $ ~~~cout << b [ i ] ;  $ ~~else  $ ~~~cout << ' ' << b [ i ] ;  $ ~}  $ ~cout << endl ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~int n , p ;  $ ~cin >> n >> p ;  $ ~string a ;  $ ~int b = 97 ;  $ ~for ( int i = 0 ; i < n ; i ++ ) { a += 97 + i % p ; }  $ ~cout << a << endl ;  $ }
int n ;  $ string s ;  $ string let , any ;  $ string a [ 1 << 7 ] ;  $ int need [ 1 << 7 ] ;  $ int main ( ) {  $ ~cin >> n ;  $ ~for ( int i = 0 ; i < n ; ++ i ) cin >> a [ i ] ;  $ ~cin >> s ;  $ ~cin >> let ;  $ ~for ( int i = 0 ; i < n ; ++ i ) {  $ ~~for ( int j = 0 ; j <= ( int ) s . size ( ) - ( int ) a [ i ] . size ( ) ; ++ j ) {  $ ~~~string s1 = s . substr ( j , a [ i ] . size ( ) ) ;  $ ~~~for ( int k = 0 ; k < s1 . size ( ) ; ++ k )  $ ~~~~if ( 'A' <= s1 [ k ] && s1 [ k ] <= 'Z' ) s1 [ k ] += 'a' - 'A' ;  $ ~~~string s2 = a [ i ] ;  $ ~~~for ( int k = 0 ; k < s2 . size ( ) ; ++ k )  $ ~~~~if ( 'A' <= s2 [ k ] && s2 [ k ] <= 'Z' ) s2 [ k ] += 'a' - 'A' ;  $ ~~~if ( s1 == s2 ) {  $ ~~~~for ( int k = 0 ; k < s1 . size ( ) ; ++ k ) need [ j + k ] = 1 ;  $ ~~~}  $ ~~}  $ ~}  $ ~if ( let == "a" )  $ ~~any = "b" ;  $ ~else  $ ~~any = "a" ;  $ ~for ( int i = 0 ; i < s . size ( ) ; ++ i ) {  $ ~~if ( need [ i ] ) {  $ ~~~if ( s [ i ] == let [ 0 ] || s [ i ] == let [ 0 ] + 'A' - 'a' ) {  $ ~~~~if ( 'A' <= s [ i ] && s [ i ] <= 'Z' )  $ ~~~~~s [ i ] = 'A' - 'a' + any [ 0 ] ;  $ ~~~~else  $ ~~~~~s [ i ] = any [ 0 ] ;  $ ~~~} else {  $ ~~~~if ( 'A' <= s [ i ] && s [ i ] <= 'Z' )  $ ~~~~~s [ i ] = 'A' - 'a' + let [ 0 ] ;  $ ~~~~else  $ ~~~~~s [ i ] = let [ 0 ] ;  $ ~~~}  $ ~~}  $ ~}  $ ~cout << s << endl ;  $ ~return 0 ;  $ }
int n , i , a [ 1111111 ] , d [ 1111111 ] ;  $ long long ans = 0 ;  $ int main ( ) {  $ ~cin >> n ;  $ ~for ( i = 0 ; i < n ; i ++ ) cin >> a [ i ] ;  $ ~d [ 1 ] = 1 ;  $ ~for ( i = 2 ; i < n ; i ++ ) d [ i ] = d [ i / 2 ] * 2 ;  $ ~for ( i = 0 ; i + 1 < n ; i ++ ) {  $ ~~a [ i + d [ n - i - 1 ] ] += a [ i ] ;  $ ~~ans += a [ i ] ;  $ ~~cout << ans << endl ;  $ ~}  $ ~return 0 ;  $ }
int main ( ) {  $ ~long long a , ans = 0 , n , sum = 0 ;  $ ~string s ;  $ ~cin >> a >> s ;  $ ~n = s . size ( ) ;  $ ~vector < long long > b ( n ) ;  $ ~for ( int i = 0 ; i < n ; i ++ ) b [ i ] = s [ i ] - '0' ;  $ ~vector < int > rep ( 36001 , 0 ) ;  $ ~for ( int i = 0 ; i < n ; i ++ ) {  $ ~~sum = 0 ;  $ ~~for ( int j = i ; j < n ; j ++ ) {  $ ~~~sum += b [ j ] ;  $ ~~~rep [ sum ] ++ ;  $ ~~}  $ ~}  $ ~for ( int i = 0 ; i < n ; i ++ ) {  $ ~~sum = 0 ;  $ ~~for ( int j = i ; j < n ; j ++ ) {  $ ~~~sum += b [ j ] ;  $ ~~~if ( ! sum ) {  $ ~~~~if ( ! a ) ans += n * ( n + 1 ) / 2 ;  $ ~~~} else if ( a % sum == 0 && a / sum < 36001 )  $ ~~~~ans += rep [ a / sum ] ;  $ ~~}  $ ~}  $ ~cout << ans << '\n' ;  $ ~return 0 ;  $ }
const int N = 5e6 + 10 , INF = 1e9 ;  $ int n , k [ N ] , ans ;  $ int main ( ) {  $ ~cin >> n ;  $ ~for ( int i = 0 ; i < n ; i ++ ) {  $ ~~int w ;  $ ~~cin >> w ;  $ ~~k [ w ] ++ ;  $ ~}  $ ~for ( int i = 0 ; i < N - 5 ; i ++ ) {  $ ~~k [ i + 1 ] += k [ i ] / 2 ;  $ ~~ans += ( k [ i ] % 2 ) ;  $ ~}  $ ~cout << ans << '\n' ;  $ ~return 0 ;  $ }
const int maxn = 100000 ;  $ int a [ maxn ] , b [ maxn ] , n , r = 1 , ans ;  $ int main ( ) {  $ ~cin >> n ;  $ ~for ( int i = 1 ; i <= n ; i ++ ) { cin >> a [ i ] ; }  $ ~sort ( a + 1 , a + 1 + n ) ;  $ ~for ( int i = 1 ; i <= n ; i ++ ) {  $ ~~while ( r <= n && a [ r ] <= a [ i ] ) r ++ ;  $ ~~if ( r <= n ) ans ++ , r ++ ;  $ ~}  $ ~cout << ans << endl ;  $ ~return 0 ;  $ }
set < int > ss ;  $ int a [ 100010 ] ;  $ int main ( ) {  $ ~int n , k ;  $ ~cin >> n >> k ;  $ ~for ( int i = 1 ; i <= n ; i ++ ) cin >> a [ i ] ;  $ ~sort ( a + 1 , a + n + 1 ) ;  $ ~int ans = 0 ;  $ ~for ( int i = n ; i >= 1 ; i -- ) {  $ ~~if ( ! ss . count ( a [ i ] ) ) {  $ ~~~ans ++ ;  $ ~~~if ( a [ i ] % k == 0 ) ss . insert ( a [ i ] / k ) ;  $ ~~}  $ ~}  $ ~cout << ans << endl ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~int n ;  $ ~int files = 0 ;  $ ~int f = 0 ;  $ ~int sum [ 500 ] = { 0 } ;  $ ~int index = 0 ;  $ ~cin >> n ;  $ ~int a ;  $ ~while ( n -- != 0 ) {  $ ~~cin >> a ;  $ ~~if ( a < 0 ) { f += 1 ; }  $ ~~if ( f == 3 ) {  $ ~~~files += 1 ;  $ ~~~f = 1 ;  $ ~~~index += 1 ;  $ ~~}  $ ~~sum [ index ] += 1 ;  $ ~}  $ ~files += 1 ;  $ ~cout << files << endl ;  $ ~for ( int i = 0 ; i < files - 1 ; i ++ ) { cout << sum [ i ] << ' ' ; }  $ ~cout << sum [ files - 1 ] << endl ;  $ ~return 0 ;  $ }
int a [ 250010 ] ;  $ int gcd ( int x , int y ) {  $ ~return x == 0 ? y : gcd ( y % x , x ) ;  $ }  $ int main ( ) {  $ ~int n ;  $ ~cin >> n ;  $ ~for ( int i = 0 ; i < n * n ; i ++ ) cin >> a [ i ] ;  $ ~sort ( a , a + n * n , greater < int > ( ) ) ;  $ ~map < int , int > ma ;  $ ~for ( int i = 0 ; i < n * n ; i ++ ) {  $ ~~int tmp = i ;  $ ~~int x = a [ i ] ;  $ ~~while ( a [ i + 1 ] == a [ i ] && i + 1 < n * n ) i ++ ;  $ ~~ma [ x ] = i - tmp + 1 ;  $ ~}  $ ~vector < int > ans ;  $ ~map < int , int > : : iterator it = ma . end ( ) ;  $ ~it -- ;  $ ~int x = it -> first ;  $ ~ans . push_back ( x ) ;  $ ~ma [ x ] -- ;  $ ~if ( ma [ x ] == 0 ) ma . erase ( x ) ;  $ ~while ( ! ma . empty ( ) ) {  $ ~~it = ma . end ( ) ;  $ ~~it -- ;  $ ~~x = it -> first ;  $ ~~ma [ x ] -- ;  $ ~~if ( ma [ x ] == 0 ) ma . erase ( x ) ;  $ ~~ans . push_back ( x ) ;  $ ~~int len = ans . size ( ) ;  $ ~~int g ;  $ ~~for ( int i = 0 ; i < len - 1 ; i ++ ) {  $ ~~~g = gcd ( x , ans [ i ] ) ;  $ ~~~ma [ g ] -= 2 ;  $ ~~~if ( ma [ g ] == 0 ) ma . erase ( g ) ;  $ ~~}  $ ~}  $ ~int len = ans . size ( ) ;  $ ~for ( int i = 0 ; i < len - 1 ; i ++ ) cout << ans [ i ] << ' ' ;  $ ~cout << ans [ len - 1 ] << endl ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~int n ;  $ ~cin >> n ;  $ ~int a [ n ] ;  $ ~int count25 = 0 , count50 = 0 , count100 = 0 ;  $ ~for ( int i = 0 ; i < n ; i ++ ) cin >> a [ i ] ;  $ ~int i ;  $ ~for ( i = 0 ; i < n ; i ++ ) {  $ ~~if ( i == 0 && a [ i ] == 50 ) {  $ ~~~cout << "NO" << endl ;  $ ~~~break ;  $ ~~} else if ( a [ i ] == 25 )  $ ~~~count25 ++ ;  $ ~~else if ( a [ i ] == 50 ) {  $ ~~~if ( count25 == 0 ) {  $ ~~~~cout << "NO" << endl ;  $ ~~~~break ;  $ ~~~} else {  $ ~~~~count25 -- ;  $ ~~~~count50 ++ ;  $ ~~~}  $ ~~} else if ( a [ i ] == 100 ) {  $ ~~~if ( count50 > 0 && count25 > 0 ) {  $ ~~~~count50 -- ;  $ ~~~~count25 -- ;  $ ~~~} else if ( count25 >= 3 ) {  $ ~~~~count25 -= 3 ;  $ ~~~} else {  $ ~~~~cout << "NO" << endl ;  $ ~~~~break ;  $ ~~~}  $ ~~}  $ ~}  $ ~if ( i == n ) cout << "YES" << endl ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~int n ;  $ ~char str [ 1005 ] ;  $ ~cin >> n ;  $ ~cin >> str ;  $ ~for ( int i = 0 ; i < n ; i ++ ) {  $ ~~if ( str [ i ] == str [ i + 1 ] && str [ i ] != '?' ) {  $ ~~~cout << "No" << endl ;  $ ~~~return 0 ;  $ ~~}  $ ~}  $ ~for ( int i = 1 ; i < n - 1 ; i ++ ) {  $ ~~if ( str [ i ] == '?' ) {  $ ~~~if ( str [ i - 1 ] == str [ i + 1 ] || str [ i + 1 ] == '?' ) {  $ ~~~~cout << "Yes" << endl ;  $ ~~~~return 0 ;  $ ~~~}  $ ~~}  $ ~}  $ ~if ( str [ 0 ] == '?' || str [ n - 1 ] == '?' ) {  $ ~~cout << "Yes" << endl ;  $ ~~return 0 ;  $ ~}  $ ~cout << "No" << endl ;  $ ~return 0 ;  $ }
map < long long , long long > mp ;  $ int main ( ) {  $ ~long long n ;  $ ~cin >> n ;  $ ~long long a [ n + 1 ] ;  $ ~long long i ;  $ ~for ( i = 1 ; i <= n ; i ++ ) { cin >> a [ i ] ; }  $ ~long long ans = 0 ;  $ ~long long maxx = 0 ;  $ ~long long j = 1 ;  $ ~for ( i = 1 ; i < n ; ) {  $ ~~if ( a [ i + 1 ] == ( a [ i ] + 1 ) ) {  $ ~~~i ++ ;  $ ~~} else {  $ ~~~if ( i == j ) {  $ ~~~~ans = ans + ( i - j ) ;  $ ~~~~if ( maxx < ( i - j ) ) { maxx = i - j ; }  $ ~~~} else {  $ ~~~~ans = ans + ( i - j - 1 ) ;  $ ~~~~if ( maxx < ( i - j - 1 ) ) { maxx = i - j - 1 ; }  $ ~~~}  $ ~~~i ++ ;  $ ~~~j = i ;  $ ~~}  $ ~}  $ ~if ( i != j ) {  $ ~~ans = ans + ( i - j - 1 ) ;  $ ~~if ( maxx < ( i - j - 1 ) ) { maxx = i - j - 1 ; }  $ ~}  $ ~for ( i = 1 ; i <= n ; ) {  $ ~~if ( a [ i ] == i ) {  $ ~~~i ++ ;  $ ~~} else {  $ ~~~break ;  $ ~~}  $ ~}  $ ~if ( maxx < ( i - 2 ) ) { maxx = i - 2 ; }  $ ~j = 1000 ;  $ ~for ( i = n ; i >= 1 ; ) {  $ ~~if ( a [ i ] == j ) {  $ ~~~i -- ;  $ ~~~j -- ;  $ ~~} else {  $ ~~~break ;  $ ~~}  $ ~}  $ ~if ( ( 1000 - j - 1 ) > maxx ) { maxx = 1000 - j - 1 ; }  $ ~cout << maxx << "\n" ;  $ }
const int MAXN = 101 ;  $ int colo [ MAXN ] , num [ MAXN ] ;  $ int mark [ MAXN ] ;  $ int main ( ) {  $ ~map < char , int > m ;  $ ~m [ 'R' ] = 0 , m [ 'G' ] = 1 , m [ 'B' ] = 2 , m [ 'Y' ] = 3 , m [ 'W' ] = 4 ;  $ ~int n ;  $ ~cin >> n ;  $ ~for ( int i = ( 0 ) ; i <= ( n - 1 ) ; ++ i ) {  $ ~~string second ;  $ ~~cin >> second ;  $ ~~colo [ i ] = m [ second [ 0 ] ] ;  $ ~~num [ i ] = second [ 1 ] - '1' ;  $ ~}  $ ~int ans = 100 ;  $ ~for ( int i = 0 ; i < ( 1 << 10 ) ; i ++ ) {  $ ~~int req = __builtin_popcount ( i ) ;  $ ~~for ( int j = ( 0 ) ; j <= ( n - 1 ) ; ++ j ) mark [ j ] = 0 ;  $ ~~for ( int j = 0 ; j < 5 ; j ++ ) {  $ ~~~if ( i & ( 1 << j ) ) {  $ ~~~~for ( int k = ( 0 ) ; k <= ( n - 1 ) ; ++ k )  $ ~~~~~if ( colo [ k ] == j ) mark [ k ] |= ( 1 << j ) ;  $ ~~~}  $ ~~}  $ ~~for ( int j = 5 ; j < 10 ; j ++ ) {  $ ~~~if ( i & ( 1 << j ) ) {  $ ~~~~for ( int k = ( 0 ) ; k <= ( n - 1 ) ; ++ k )  $ ~~~~~if ( num [ k ] == j - 5 ) mark [ k ] |= ( 1 << j ) ;  $ ~~~}  $ ~~}  $ ~~bool able = true ;  $ ~~for ( int j = ( 0 ) ; j <= ( n - 1 ) ; ++ j ) {  $ ~~~for ( int k = ( 0 ) ; k <= ( n - 1 ) ; ++ k ) {  $ ~~~~if ( colo [ j ] != colo [ k ] || num [ j ] != num [ k ] ) {  $ ~~~~~if ( mark [ j ] == mark [ k ] ) able = false ;  $ ~~~~}  $ ~~~}  $ ~~}  $ ~~if ( able ) ans = min ( ans , req ) ;  $ ~}  $ ~cout << ans << endl ;  $ }
int A [ 100005 ] ;  $ int get ( ) {  $ ~char c ;  $ ~while ( c = getchar ( ) , c < '0' || c > '9' )  $ ~~;  $ ~int x = 0 ;  $ ~while ( c >= '0' && c <= '9' ) {  $ ~~x = x * 10 + c - '0' ;  $ ~~c = getchar ( ) ;  $ ~}  $ ~return x ;  $ }  $ int Find ( int LEFT , int RIGHT , int X ) {  $ ~while ( LEFT <= RIGHT ) {  $ ~~int MID = ( LEFT + RIGHT ) / 2 ;  $ ~~if ( A [ MID ] == X )  $ ~~~return MID ;  $ ~~else if ( A [ MID ] < X )  $ ~~~LEFT = MID + 1 ;  $ ~~else  $ ~~~RIGHT = MID - 1 ;  $ ~}  $ ~return - 1 ;  $ }  $ int main ( ) {  $ ~int n = get ( ) , k = get ( ) ;  $ ~for ( int i = 0 ; i < n ; i ++ ) A [ i ] = get ( ) ;  $ ~sort ( A , A + n ) ;  $ ~int MAX = A [ n - 1 ] / k ;  $ ~bool flag [ 1000005 ] ;  $ ~memset ( flag , 0 , sizeof ( flag ) ) ;  $ ~int ans = 0 ;  $ ~for ( int i = 0 ; i < n ; i ++ ) {  $ ~~if ( flag [ i ] ) continue ;  $ ~~int T = i , len = 1 ;  $ ~~while ( A [ T ] <= MAX ) {  $ ~~~T = Find ( T + 1 , n - 1 , A [ T ] * k ) ;  $ ~~~if ( T == - 1 ) break ;  $ ~~~flag [ T ] = 1 ;  $ ~~~len ++ ;  $ ~~}  $ ~~ans += ( len + 1 ) / 2 ;  $ ~}  $ ~cout << ans << endl ;  $ ~return 0 ;  $ }
bool isprime ( int j ) {  $ ~for ( int i = 2 ; i < j ; i ++ ) {  $ ~~if ( ! ( j % i ) ) return 0 ;  $ ~}  $ ~return 1 ;  $ }  $ int main ( ) {  $ ~int i = 1 , n ;  $ ~cin >> n ;  $ ~while ( 1 ) {  $ ~~if ( ! isprime ( n * i + 1 ) ) {  $ ~~~cout << i << endl ;  $ ~~~return 0 ;  $ ~~}  $ ~~i ++ ;  $ ~}  $ ~return 0 ;  $ }
int main ( ) {  $ ~int n ;  $ ~cin >> n ;  $ ~int arr [ n ] ;  $ ~for ( int i = 0 ; i < n ; i ++ ) { cin >> arr [ i ] ; }  $ ~sort ( arr , arr + n ) ;  $ ~cout << arr [ 0 ] ;  $ ~for ( int i = 1 ; i < n ; i ++ ) {  $ ~~cout << " " ;  $ ~~cout << arr [ i ] ;  $ ~}  $ ~cout << endl ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~int n , m , i , j , num [ 105 ] , cnt = 0 ;  $ ~cin >> n >> m ;  $ ~for ( i = 0 ; i < n ; i ++ ) {  $ ~~cin >> num [ i ] ;  $ ~~if ( num [ i ] <= m ) {  $ ~~~num [ i ] = 0 ;  $ ~~~j = i ;  $ ~~} else {  $ ~~~num [ i ] = num [ i ] - m ;  $ ~~~cnt = 1 ;  $ ~~}  $ ~}  $ ~while ( cnt ) {  $ ~~cnt = 0 ;  $ ~~for ( i = 0 ; i < n ; i ++ ) {  $ ~~~if ( num [ i ] <= m && num [ i ] != 0 ) {  $ ~~~~num [ i ] = 0 ;  $ ~~~~j = i ;  $ ~~~} else if ( num [ i ] > m ) {  $ ~~~~num [ i ] = num [ i ] - m ;  $ ~~~~cnt = 1 ;  $ ~~~}  $ ~~}  $ ~}  $ ~cout << j + 1 << endl ;  $ ~return 0 ;  $ }
bool mat [ 7 ] [ 7 ] ;  $ int calc ( string s ) {  $ ~int r = 0 ;  $ ~for ( int i = 0 ; i < 7 ; i ++ ) {  $ ~~for ( int j = 0 ; j < 7 ; j ++ ) {  $ ~~~if ( s [ i ] == s [ j ] && mat [ i ] [ j ] ) r ++ ;  $ ~~}  $ ~}  $ ~return r ;  $ }  $ int main ( ) {  $ ~int n , ans = INT_MAX , temp = INT_MAX , lans = 0 , ltemp = 0 ;  $ ~cin >> n ;  $ ~long long arr [ 3 ] , t [ 3 ] = { 0 , 0 , 0 } ;  $ ~for ( int i = 0 ; i < 7 ; i ++ )  $ ~~for ( int j = 0 ; j < 7 ; j ++ ) mat [ i ] [ j ] = false ;  $ ~map < string , int > hero ;  $ ~hero [ "Anka" ] = 0 ;  $ ~hero [ "Chapay" ] = 1 ;  $ ~hero [ "Cleo" ] = 2 ;  $ ~hero [ "Troll" ] = 3 ;  $ ~hero [ "Dracul" ] = 4 ;  $ ~hero [ "Snowy" ] = 5 ;  $ ~hero [ "Hexadecimal" ] = 6 ;  $ ~string x , y , z , q ;  $ ~for ( int i = 0 ; i < n ; i ++ ) {  $ ~~cin >> x >> y >> z ;  $ ~~mat [ hero [ x ] ] [ hero [ z ] ] = true ;  $ ~}  $ ~cin >> arr [ 0 ] >> arr [ 1 ] >> arr [ 2 ] ;  $ ~sort ( arr , arr + 3 ) ;  $ ~set < string > h ;  $ ~set < string > : : iterator it ;  $ ~t [ 2 ] = arr [ 2 ] / 5 ;  $ ~t [ 1 ] = arr [ 1 ] ;  $ ~t [ 0 ] = arr [ 0 ] ;  $ ~sort ( t , t + 3 ) ;  $ ~temp = t [ 2 ] - t [ 0 ] ;  $ ~if ( temp < ans ) {  $ ~~ans = temp ;  $ ~~h . insert ( "aaaaabc" ) ;  $ ~}  $ ~t [ 2 ] = arr [ 2 ] / 4 ;  $ ~t [ 1 ] = arr [ 1 ] / 2 ;  $ ~t [ 0 ] = arr [ 0 ] ;  $ ~sort ( t , t + 3 ) ;  $ ~temp = t [ 2 ] - t [ 0 ] ;  $ ~if ( temp < ans ) {  $ ~~ans = temp ;  $ ~~h . clear ( ) ;  $ ~~h . insert ( "aaaabbc" ) ;  $ ~} else if ( temp == ans ) {  $ ~~h . insert ( "aaaabbc" ) ;  $ ~}  $ ~t [ 2 ] = arr [ 2 ] / 3 ;  $ ~t [ 1 ] = arr [ 1 ] / 3 ;  $ ~t [ 0 ] = arr [ 0 ] ;  $ ~sort ( t , t + 3 ) ;  $ ~temp = t [ 2 ] - t [ 0 ] ;  $ ~if ( temp < ans ) {  $ ~~ans = temp ;  $ ~~h . clear ( ) ;  $ ~~h . insert ( "aaabbbc" ) ;  $ ~} else if ( temp == ans ) {  $ ~~h . insert ( "aaabbbc" ) ;  $ ~}  $ ~t [ 2 ] = arr [ 2 ] / 3 ;  $ ~t [ 1 ] = arr [ 1 ] / 2 ;  $ ~t [ 0 ] = arr [ 0 ] / 2 ;  $ ~sort ( t , t + 3 ) ;  $ ~temp = t [ 2 ] - t [ 0 ] ;  $ ~if ( temp < ans ) {  $ ~~ans = temp ;  $ ~~h . clear ( ) ;  $ ~~h . insert ( "aaabbcc" ) ;  $ ~} else if ( temp == ans ) {  $ ~~h . insert ( "aaabbcc" ) ;  $ ~}  $ ~while ( ! h . empty ( ) ) {  $ ~~q = * ( h . begin ( ) ) ;  $ ~~do {  $ ~~~ltemp = calc ( q ) ;  $ ~~~if ( ltemp > lans ) lans = ltemp ;  $ ~~} while ( next_permutation ( q . begin ( ) , q . end ( ) ) ) ;  $ ~~h . erase ( q ) ;  $ ~}  $ ~cout << ans << " " << lans << endl ;  $ ~return 0 ;  $ }
unsigned long long n , a , b , c ;  $ int main ( ) {  $ ~cin >> n >> a >> b >> c ;  $ ~if ( a <= b - c ) {  $ ~~cout << n / a << endl ;  $ ~} else {  $ ~~unsigned long long ans = 0 ;  $ ~~if ( n > c ) ans = ( n - c ) / ( b - c ) ;  $ ~~ans += ( n - ans * ( b - c ) ) / a ;  $ ~~cout << ans << endl ;  $ ~}  $ ~return 0 ;  $ }
int main ( ) {  $ ~int n , k ;  $ ~cin >> n >> k ;  $ ~string s ;  $ ~cin >> s ;  $ ~int a = 1 ;  $ ~for ( ; a < s . size ( ) ; a ++ ) {  $ ~~int i ;  $ ~~for ( i = 0 ; a + i < s . size ( ) ; ) {  $ ~~~if ( s [ i ] != s [ a + i ] ) break ;  $ ~~~i ++ ;  $ ~~}  $ ~~if ( a + i == n ) break ;  $ ~}  $ ~for ( int i = 0 ; i < k - 1 ; i ++ ) {  $ ~~for ( int j = 0 ; j < a ; j ++ ) { cout << s [ j ] ; }  $ ~}  $ ~cout << s << endl ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~int t = 1 ;  $ ~while ( t -- ) {  $ ~~string s1 , s2 ;  $ ~~int cnt = 0 ;  $ ~~vector < int > ind ;  $ ~~cin >> s1 >> s2 ;  $ ~~bool flag = 1 ;  $ ~~if ( s1 . size ( ) != s2 . size ( ) )  $ ~~~flag = 0 ;  $ ~~else {  $ ~~~for ( int i = 0 ; i < s1 . size ( ) ; i ++ ) {  $ ~~~~if ( s1 [ i ] != s2 [ i ] ) {  $ ~~~~~cnt ++ ;  $ ~~~~~ind . push_back ( i ) ;  $ ~~~~}  $ ~~~~if ( cnt > 2 ) {  $ ~~~~~flag = 0 ;  $ ~~~~~break ;  $ ~~~~}  $ ~~~}  $ ~~~if ( flag ) {  $ ~~~~if ( ind . size ( ) == 2 ) {  $ ~~~~~if ( ! ( s1 [ ind [ 0 ] ] == s2 [ ind [ 1 ] ] && s1 [ ind [ 1 ] ] == s2 [ ind [ 0 ] ] ) ) flag = 0 ;  $ ~~~~} else  $ ~~~~~flag = 0 ;  $ ~~~}  $ ~~}  $ ~~if ( flag )  $ ~~~cout << "YES" << endl ;  $ ~~else  $ ~~~cout << "NO" << endl ;  $ ~}  $ }
long long a , b , c , d ;  $ long long gys ( long long a , long long b ) {  $ ~while ( b ) {  $ ~~long long c = a % b ;  $ ~~a = b ;  $ ~~b = c ;  $ ~}  $ ~return a ;  $ }  $ inline long long gbs ( long long a , long long b ) {  $ ~return ( a * b ) / gys ( a , b ) ;  $ }  $ int main ( ) {  $ ~cin >> a >> b >> c >> d ;  $ ~long long n = b > d ? b : d ;  $ ~int signal = 1 ;  $ ~if ( n == b ) { signal = 0 ; }  $ ~long long res = - 1 ;  $ ~int MAX = 1e9 ;  $ ~if ( signal ) {  $ ~~if ( c < 16 )  $ ~~~MAX = 1e8 ;  $ ~~else if ( c < 10 )  $ ~~~MAX = 1e7 ;  $ ~~else if ( c < 6 )  $ ~~~MAX = 6e6 ;  $ ~~else if ( c < 3 )  $ ~~~MAX = 6e5 ;  $ ~~while ( n <= MAX ) {  $ ~~~if ( abs ( n - b ) % a == 0 ) {  $ ~~~~res = n ;  $ ~~~~break ;  $ ~~~}  $ ~~~n += c ;  $ ~~}  $ ~} else {  $ ~~if ( a < 16 )  $ ~~~MAX = 1e8 ;  $ ~~else if ( a < 10 )  $ ~~~MAX = 1e7 ;  $ ~~else if ( a < 6 )  $ ~~~MAX = 6e6 ;  $ ~~else if ( a < 3 )  $ ~~~MAX = 6e5 ;  $ ~~while ( n <= MAX ) {  $ ~~~if ( abs ( n - d ) % c == 0 ) {  $ ~~~~res = n ;  $ ~~~~break ;  $ ~~~}  $ ~~~n += a ;  $ ~~}  $ ~}  $ ~if ( res == - 1 )  $ ~~cout << - 1 << endl ;  $ ~else  $ ~~cout << res << endl ;  $ }
int main ( ) {  $ ~int n ;  $ ~cin >> n ;  $ ~int l [ n ] ;  $ ~int x , a1 = 0 , a2 = 101 , b1 = 0 , b2 = 0 , ans = 0 ;  $ ~for ( int i = 0 ; i < n ; i ++ ) {  $ ~~int x ;  $ ~~cin >> x ;  $ ~~l [ i ] = x ;  $ ~~if ( a2 >= x ) {  $ ~~~a2 = x ;  $ ~~~b2 = i ;  $ ~~}  $ ~~if ( a1 < x ) {  $ ~~~a1 = x ;  $ ~~~b1 = i ;  $ ~~}  $ ~}  $ ~if ( b1 < b2 ) {  $ ~~ans = b1 + n - 1 - b2 ;  $ ~~cout << ans << endl ;  $ ~} else if ( b1 > b2 ) {  $ ~~ans = b1 + n - 2 - b2 ;  $ ~~cout << ans << endl ;  $ ~}  $ ~return 0 ;  $ }
long long l , r , s = 0 ;  $ vector < long long > v ;  $ void rec ( long long x ) {  $ ~if ( x >= l ) v . push_back ( x ) ;  $ ~if ( x > r ) return ;  $ ~rec ( 10 * x + 4 ) ;  $ ~rec ( 10 * x + 7 ) ;  $ }  $ int main ( ) {  $ ~int i , t , p = 0 ;  $ ~cin >> l >> r ;  $ ~rec ( 0 ) ;  $ ~sort ( v . begin ( ) , v . end ( ) ) ;  $ ~i = l ;  $ ~while ( i <= r ) {  $ ~~t = i ;  $ ~~while ( i <= v [ p ] && i <= r ) { i ++ ; }  $ ~~s += ( i - t ) * v [ p ++ ] ;  $ ~}  $ ~cout << s << "\n" ;  $ }
int main ( ) {  $ ~string s ;  $ ~cin >> s ;  $ ~long a = 0 , b = 0 , c = 0 , x = 0 , y = 0 ;  $ ~for ( int i = 0 ; s [ i ] != '\0' ; i ++ ) {  $ ~~if ( s [ i ] == '|' && x != 1 ) { a ++ ; }  $ ~~if ( s [ i ] == '|' && x == 1 && y != 1 ) b ++ ;  $ ~~if ( s [ i ] == '|' && x == 1 && y == 1 ) c ++ ;  $ ~~if ( s [ i ] == '+' ) x = 1 ;  $ ~~if ( s [ i ] == '=' ) y = 1 ;  $ ~}  $ ~x = a + b ;  $ ~y = x - c ;  $ ~if ( y == 0 ) {  $ ~~cout << s << "\n" ;  $ ~} else if ( y == - 2 ) {  $ ~~for ( long i = 0 ; i <= a ; i ++ ) cout << "|" ;  $ ~~cout << "+" ;  $ ~~for ( long i = 0 ; i < b ; i ++ ) cout << "|" ;  $ ~~cout << "=" ;  $ ~~for ( long i = 0 ; i < c - 1 ; i ++ ) cout << "|" ;  $ ~~cout << "\n" ;  $ ~} else if ( y == 2 ) {  $ ~~if ( a != 1 )  $ ~~~a -- ;  $ ~~else  $ ~~~b -- ;  $ ~~for ( long i = 0 ; i < a ; i ++ ) cout << "|" ;  $ ~~cout << "+" ;  $ ~~for ( long i = 0 ; i < b ; i ++ ) cout << "|" ;  $ ~~cout << "=" ;  $ ~~for ( long i = 0 ; i <= c ; i ++ ) cout << "|" ;  $ ~~cout << "\n" ;  $ ~} else  $ ~~cout << "Impossible\n" ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~string s ;  $ ~cin >> s ;  $ ~stack < long long int > stac ;  $ ~long long int last = - 1 ;  $ ~long long int count = 0 ;  $ ~for ( long long int i = 0 ; i < s . length ( ) ; i ++ ) {  $ ~~if ( s [ i ] == '(' ) {  $ ~~~stac . push ( i ) ;  $ ~~} else {  $ ~~~if ( stac . empty ( ) ) {  $ ~~~~cout << "-1\n" ;  $ ~~~~return 0 ;  $ ~~~}  $ ~~~stac . pop ( ) ;  $ ~~~if ( s [ i ] == '#' ) { last = i , count ++ ; }  $ ~~}  $ ~}  $ ~long long int k = stac . size ( ) ;  $ ~while ( ! stac . empty ( ) ) {  $ ~~if ( stac . top ( ) > last ) {  $ ~~~cout << "-1\n" ;  $ ~~~return 0 ;  $ ~~}  $ ~~stac . pop ( ) ;  $ ~}  $ ~for ( long long int i = 0 ; i < count - 1 ; i ++ ) { cout << "1\n" ; }  $ ~cout << 1 + k << endl ;  $ }
int p [ 105 ] ;  $ int par ( int x ) {  $ ~if ( p [ x ] == x )  $ ~~return x ;  $ ~else  $ ~~return par ( p [ x ] ) ;  $ }  $ int main ( ) {  $ ~int n , m ;  $ ~cin >> n >> m ;  $ ~for ( int i = 0 ; i <= m ; i ++ ) { p [ i ] = 0 ; }  $ ~int k = 0 ;  $ ~int x , y , z ;  $ ~for ( int i = 0 ; i < n ; i ++ ) {  $ ~~cin >> x ;  $ ~~if ( x == 0 ) {  $ ~~~k ++ ;  $ ~~} else {  $ ~~~cin >> y ;  $ ~~~if ( p [ y ] == 0 ) p [ y ] = y ;  $ ~~~for ( int j = 0 ; j < x - 1 ; j ++ ) {  $ ~~~~cin >> z ;  $ ~~~~if ( p [ z ] == 0 ) p [ z ] = z ;  $ ~~~~if ( par ( z ) != par ( y ) ) p [ par ( z ) ] = y ;  $ ~~~}  $ ~~}  $ ~}  $ ~int temp = 0 ;  $ ~for ( int i = 1 ; i <= m ; i ++ ) {  $ ~~if ( p [ i ] == i ) { temp ++ ; }  $ ~}  $ ~if ( temp != 0 ) temp -- ;  $ ~cout << k + temp << endl ;  $ }
int n , m ;  $ int k ;  $ bool debug = false ;  $ int bl [ 103 ] ;  $ int main ( ) {  $ ~cin >> n ;  $ ~string s , a [ n ] , ss , S , let ;  $ ~for ( int i = 0 ; i < n ; i ++ ) {  $ ~~cin >> a [ i ] ;  $ ~~transform ( a [ i ] . begin ( ) , a [ i ] . end ( ) , a [ i ] . begin ( ) , : : tolower ) ;  $ ~}  $ ~cin >> S >> let ;  $ ~ss . resize ( S . size ( ) ) ;  $ ~transform ( S . begin ( ) , S . end ( ) , ss . begin ( ) , : : tolower ) ;  $ ~for ( int i = 0 ; i < n ; i ++ ) {  $ ~~long long pos = ss . find ( a [ i ] ) ;  $ ~~while ( pos != string : : npos ) {  $ ~~~for ( int j = 0 ; j < a [ i ] . size ( ) ; j ++ ) { bl [ j + pos ] = 1 ; }  $ ~~~pos = ss . find ( a [ i ] , pos + 1 ) ;  $ ~~}  $ ~}  $ ~string ans = "" ;  $ ~for ( int i = 0 ; i < ss . size ( ) ; i ++ ) {  $ ~~if ( bl [ i ] ) {  $ ~~~if ( ss [ i ] == let [ 0 ] ) {  $ ~~~~if ( ss [ i ] != 'a' ) {  $ ~~~~~if ( isupper ( S [ i ] ) )  $ ~~~~~~ans += 'A' ;  $ ~~~~~else  $ ~~~~~~ans += 'a' ;  $ ~~~~} else {  $ ~~~~~if ( isupper ( S [ i ] ) )  $ ~~~~~~ans += 'B' ;  $ ~~~~~else  $ ~~~~~~ans += 'b' ;  $ ~~~~}  $ ~~~~continue ;  $ ~~~}  $ ~~~if ( isupper ( S [ i ] ) )  $ ~~~~ans += toupper ( let [ 0 ] ) ;  $ ~~~else  $ ~~~~ans += let ;  $ ~~} else {  $ ~~~ans += S [ i ] ;  $ ~~}  $ ~}  $ ~puts ( ans . c_str ( ) ) ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~long long n , count = 0 ;  $ ~cin >> n ;  $ ~int max_i = 200005 ;  $ ~int counter = 0 ;  $ ~tuple < long long , long long , long long > data [ max_i ] ;  $ ~for ( int i = 0 ; i < n ; i ++ ) {  $ ~~long long k , a0 , x , y , m , t = 0 , a = 0 ;  $ ~~cin >> k >> a0 >> x >> y >> m ;  $ ~~for ( int j = 0 ; j < k ; j ++ ) {  $ ~~~data [ counter ++ ] = make_tuple ( t , a0 , i ) ;  $ ~~~a = ( a0 * x + y ) % m ;  $ ~~~if ( a < a0 && j != k - 1 ) { t ++ ; }  $ ~~~a0 = a ;  $ ~~}  $ ~~count = max ( count , t ) ;  $ ~}  $ ~cout << count << endl ;  $ ~sort ( data , data + counter ) ;  $ ~for ( int i = 0 ; i < counter ; i ++ ) { cout << get < 1 > ( data [ i ] ) << " " << get < 2 > ( data [ i ] ) + 1 << endl ; }  $ }
int arr [ 103 ] ;  $ int main ( ) {  $ ~int n ;  $ ~cin >> n ;  $ ~for ( int i = 0 ; i < n ; ++ i ) cin >> arr [ i ] ;  $ ~sort ( arr , arr + n ) ;  $ ~for ( int i = 0 ; i < n ; ++ i ) {  $ ~~if ( i < n - 1 )  $ ~~~cout << arr [ i ] << ' ' ;  $ ~~else  $ ~~~cout << arr [ i ] << endl ;  $ ~}  $ ~return 0 ;  $ }
int b [ 20 ] , ans , n ;  $ bool a [ 10 ] [ 10 ] ;  $ bool check ( ) {  $ ~int i , j , r , l , tot ;  $ ~for ( i = 1 ; i <= 5 ; i ++ ) {  $ ~~l = r = 0 ;  $ ~~for ( j = 1 ; j <= 5 ; j ++ ) {  $ ~~~if ( a [ i ] [ j ] ) {  $ ~~~~l ++ ;  $ ~~~~if ( b [ j ] ) { r ++ ; }  $ ~~~}  $ ~~}  $ ~~if ( l - 1 > r ) return false ;  $ ~}  $ ~for ( i = 1 ; i <= 5 ; i ++ ) {  $ ~~l = r = 0 ;  $ ~~for ( j = 1 ; j <= 5 ; j ++ ) {  $ ~~~if ( a [ j ] [ i ] ) {  $ ~~~~l ++ ;  $ ~~~~if ( b [ 5 + j ] ) r ++ ;  $ ~~~}  $ ~~}  $ ~~if ( l - 1 > r ) return false ;  $ ~}  $ ~tot = 0 ;  $ ~for ( i = 1 ; i <= 5 ; i ++ ) {  $ ~~for ( j = 1 ; j <= 5 ; j ++ ) {  $ ~~~if ( a [ i ] [ j ] && ! b [ i + 5 ] && ! b [ j ] ) tot ++ ;  $ ~~}  $ ~}  $ ~if ( tot > 1 ) return false ;  $ ~return true ;  $ }  $ void dfs ( int x ) {  $ ~int i , sum ;  $ ~if ( x == 11 ) {  $ ~~if ( check ( ) ) {  $ ~~~sum = 0 ;  $ ~~~for ( i = 1 ; i <= 11 ; i ++ ) {  $ ~~~~if ( b [ i ] == 1 ) sum ++ ;  $ ~~~}  $ ~~~ans = min ( sum , ans ) ;  $ ~~}  $ ~~return ;  $ ~}  $ ~b [ x ] = 1 ;  $ ~dfs ( x + 1 ) ;  $ ~b [ x ] = 0 ;  $ ~dfs ( x + 1 ) ;  $ }  $ int main ( ) {  $ ~int i , y ;  $ ~char ch ;  $ ~int k ;  $ ~cin >> n ;  $ ~memset ( a , false , sizeof ( a ) ) ;  $ ~for ( i = 1 ; i <= n ; i ++ ) {  $ ~~cin >> ch >> k ;  $ ~~if ( ch == 'R' )  $ ~~~y = 1 ;  $ ~~else if ( ch == 'G' )  $ ~~~y = 2 ;  $ ~~else if ( ch == 'B' )  $ ~~~y = 3 ;  $ ~~else if ( ch == 'Y' )  $ ~~~y = 4 ;  $ ~~else if ( ch == 'W' )  $ ~~~y = 5 ;  $ ~~a [ y ] [ k ] = true ;  $ ~}  $ ~memset ( b , 0 , sizeof ( b ) ) ;  $ ~ans = 9999999 ;  $ ~;  $ ~dfs ( 1 ) ;  $ ~cout << ans << endl ;  $ }
const int INF = 0 x3f3f3f3f ;  $ int main ( ) {  $ ~int n ;  $ ~cin >> n ;  $ ~int row [ n + 10 ] ;  $ ~long long ans [ n + 10 ] ;  $ ~for ( int i = 1 ; i <= n ; i ++ ) cin >> row [ i ] ;  $ ~for ( int i = 1 ; i <= n ; i ++ ) {  $ ~~long long cont = 1 ;  $ ~~int j = row [ i ] ;  $ ~~while ( cont < 103 and j != i ) {  $ ~~~cont ++ ;  $ ~~~j = row [ j ] ;  $ ~~}  $ ~~ans [ i ] = cont ;  $ ~~if ( ans [ i ] == 0 ) ans [ i ] = 1 ;  $ ~~if ( ans [ i ] % 2 == 0 ) ans [ i ] /= 2 ;  $ ~}  $ ~long long mult = ans [ 1 ] ;  $ ~for ( int i = 1 ; i <= n ; i ++ ) {  $ ~~if ( ans [ i ] == 103 ) {  $ ~~~cout << - 1 << endl ;  $ ~~~return 0 ;  $ ~~}  $ ~~mult = ( mult * ans [ i ] ) / __gcd ( mult , ans [ i ] ) ;  $ ~}  $ ~cout << mult << endl ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~long long n , ans ;  $ ~cin >> n ;  $ ~if ( n == 1 )  $ ~~ans = 1 ;  $ ~else if ( n % 2 )  $ ~~ans = ( n - 2 ) * ( n - 1 ) * n ;  $ ~else if ( n == 2 )  $ ~~ans = 2 ;  $ ~else if ( n % 6 == 0 )  $ ~~ans = ( n - 1 ) * ( n - 2 ) * ( n - 3 ) ;  $ ~else  $ ~~ans = n * ( n - 1 ) * ( n - 3 ) ;  $ ~cout << ans << endl ;  $ }
int main ( ) {  $ ~long long ans = 0 , N , a , b ;  $ ~cin >> N ;  $ ~while ( N > 0 ) {  $ ~~cin >> a >> b ;  $ ~~ans = max ( ans , a + 1 ) ;  $ ~~while ( b != 1 ) {  $ ~~~b = ( b + 3 ) / 4 ;  $ ~~~a ++ ;  $ ~~~ans = max ( ans , a ) ;  $ ~~}  $ ~~N -- ;  $ ~}  $ ~cout << ans << endl ;  $ ~return 0 ;  $ }
string s ;  $ int a , b ;  $ int cx = 0 , cy = 0 ;  $ int main ( ) {  $ ~cin >> a >> b ;  $ ~cin >> s ;  $ ~for ( int i = 0 ; i < ( ( int ) ( s ) . size ( ) ) ; ++ i ) {  $ ~~if ( cx == a && cy == b ) {  $ ~~~cout << "Yes\n" ;  $ ~~~return 0 ;  $ ~~}  $ ~~if ( s [ i ] == 'U' )  $ ~~~cy ++ ;  $ ~~else if ( s [ i ] == 'D' )  $ ~~~cy -- ;  $ ~~else if ( s [ i ] == 'R' )  $ ~~~cx ++ ;  $ ~~else  $ ~~~cx -- ;  $ ~~if ( cx == a && cy == b ) {  $ ~~~cout << "Yes\n" ;  $ ~~~return 0 ;  $ ~~}  $ ~}  $ ~if ( cx ) {  $ ~~int t = abs ( a ) / abs ( cx ) ;  $ ~~for ( int now = t - 1000 ; now <= t + 1000 ; ++ now ) {  $ ~~~if ( now < 0 ) continue ;  $ ~~~long long first = ( long long ) cx * now ;  $ ~~~long long second = ( long long ) cy * now ;  $ ~~~for ( int i = 0 ; i < ( ( int ) ( s ) . size ( ) ) ; ++ i ) {  $ ~~~~if ( first == a && second == b ) {  $ ~~~~~cout << "Yes\n" ;  $ ~~~~~return 0 ;  $ ~~~~}  $ ~~~~if ( s [ i ] == 'U' )  $ ~~~~~second ++ ;  $ ~~~~else if ( s [ i ] == 'D' )  $ ~~~~~second -- ;  $ ~~~~else if ( s [ i ] == 'R' )  $ ~~~~~first ++ ;  $ ~~~~else  $ ~~~~~first -- ;  $ ~~~~if ( first == a && second == b ) {  $ ~~~~~cout << "Yes\n" ;  $ ~~~~~return 0 ;  $ ~~~~}  $ ~~~}  $ ~~}  $ ~}  $ ~if ( cy ) {  $ ~~int t = abs ( b ) / abs ( cy ) ;  $ ~~for ( int now = t - 1000 ; now <= t + 1000 ; ++ now ) {  $ ~~~if ( now < 0 ) continue ;  $ ~~~long long first = ( long long ) cx * now ;  $ ~~~long long second = ( long long ) cy * now ;  $ ~~~for ( int i = 0 ; i < ( ( int ) ( s ) . size ( ) ) ; ++ i ) {  $ ~~~~if ( first == a && second == b ) {  $ ~~~~~cout << "Yes\n" ;  $ ~~~~~return 0 ;  $ ~~~~}  $ ~~~~if ( s [ i ] == 'U' )  $ ~~~~~second ++ ;  $ ~~~~else if ( s [ i ] == 'D' )  $ ~~~~~second -- ;  $ ~~~~else if ( s [ i ] == 'R' )  $ ~~~~~first ++ ;  $ ~~~~else  $ ~~~~~first -- ;  $ ~~~~if ( first == a && second == b ) {  $ ~~~~~cout << "Yes\n" ;  $ ~~~~~return 0 ;  $ ~~~~}  $ ~~~}  $ ~~}  $ ~}  $ ~cout << "No\n" ;  $ }
long long find_len ( long long num ) {  $ ~long long l = 1 ;  $ ~for ( long long a = 7 ; a < num ; a *= 7 ) l += 1 ;  $ ~return l ;  $ }  $ int main ( ) {  $ ~long long n , m , x , y , res , i , j ;  $ ~cin >> n >> m ;  $ ~x = find_len ( n ) ;  $ ~y = find_len ( m ) ;  $ ~res = 0 ;  $ ~if ( x + y <= 7 ) {  $ ~~for ( i = 0 ; i != n ; i ++ ) {  $ ~~~for ( j = 0 ; j != m ; j ++ ) {  $ ~~~~vector < long long > f ( 7 , 0 ) ;  $ ~~~~for ( long long k = 0 , a = i ; k != x ; k ++ , a /= 7 ) f [ a % 7 ] ++ ;  $ ~~~~for ( long long k = 0 , b = j ; k != y ; k ++ , b /= 7 ) f [ b % 7 ] ++ ;  $ ~~~~if ( * max_element ( f . begin ( ) , f . end ( ) ) <= 1 ) res ++ ;  $ ~~~}  $ ~~}  $ ~}  $ ~cout << res << endl ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~long int n ;  $ ~while ( cin >> n ) {  $ ~~string s ;  $ ~~long i , cnt = 0 , ar [ 150 ] = { 0 } , f = 0 ;  $ ~~cin >> s ;  $ ~~sort ( s . begin ( ) , s . end ( ) ) ;  $ ~~long x ;  $ ~~for ( i = 0 ; i < n ; i ++ ) {  $ ~~~x = s [ i ] - 97 ;  $ ~~~ar [ x ] ++ ;  $ ~~~if ( ar [ x ] >= 2 ) { f = 1 ; }  $ ~~}  $ ~~if ( f == 1 || n == 1 )  $ ~~~cout << "Yes" << endl ;  $ ~~else  $ ~~~cout << "No" << endl ;  $ ~}  $ }
int main ( ) {  $ ~int s , t , x ;  $ ~cin >> t >> s >> x ;  $ ~if ( t > x ) {  $ ~~cout << "NO" << endl ;  $ ~~return 0 ;  $ ~}  $ ~if ( ( x - t ) % s == 0 ) {  $ ~~cout << "YES" << endl ;  $ ~} else if ( ( x - t - 1 ) % s == 0 && x > ( t + s ) ) {  $ ~~cout << "YES" << endl ;  $ ~} else {  $ ~~cout << "NO" << endl ;  $ ~}  $ ~return 0 ;  $ }
char a [ 120 ] [ 120 ] ;  $ int check ( int n ) {  $ ~int flag1 ;  $ ~for ( int i = 1 ; i <= n ; i ++ ) {  $ ~~flag1 = 0 ;  $ ~~for ( int j = 1 ; j <= n ; j ++ ) {  $ ~~~if ( a [ i ] [ j ] == '.' ) {  $ ~~~~flag1 = 1 ;  $ ~~~~break ;  $ ~~~}  $ ~~}  $ ~~if ( ! flag1 ) { break ; }  $ ~}  $ ~int flag2 ;  $ ~for ( int i = 1 ; i <= n ; i ++ ) {  $ ~~flag2 = 0 ;  $ ~~for ( int j = 1 ; j <= n ; j ++ ) {  $ ~~~if ( a [ j ] [ i ] == '.' ) {  $ ~~~~flag2 = 1 ;  $ ~~~~break ;  $ ~~~}  $ ~~}  $ ~~if ( ! flag2 ) { break ; }  $ ~}  $ ~if ( flag1 == 0 && flag2 == 0 ) {  $ ~~return 0 ;  $ ~} else {  $ ~~if ( flag1 ) {  $ ~~~return 1 ;  $ ~~} else {  $ ~~~return 2 ;  $ ~~}  $ ~}  $ }  $ int main ( ) {  $ ~int n ;  $ ~while ( cin >> n ) {  $ ~~for ( int i = 1 ; i <= n ; i ++ ) {  $ ~~~for ( int j = 1 ; j <= n ; j ++ ) { cin >> a [ i ] [ j ] ; }  $ ~~}  $ ~~int judge = check ( n ) ;  $ ~~if ( judge ) {  $ ~~~if ( judge == 1 ) {  $ ~~~~for ( int i = 1 ; i <= n ; i ++ ) {  $ ~~~~~for ( int j = 1 ; j <= n ; j ++ ) {  $ ~~~~~~if ( a [ i ] [ j ] == '.' ) {  $ ~~~~~~~cout << i << " " << j << endl ;  $ ~~~~~~~break ;  $ ~~~~~~}  $ ~~~~~}  $ ~~~~}  $ ~~~} else {  $ ~~~~for ( int i = 1 ; i <= n ; i ++ ) {  $ ~~~~~for ( int j = 1 ; j <= n ; j ++ ) {  $ ~~~~~~if ( a [ j ] [ i ] == '.' ) {  $ ~~~~~~~cout << j << " " << i << endl ;  $ ~~~~~~~break ;  $ ~~~~~~}  $ ~~~~~}  $ ~~~~}  $ ~~~}  $ ~~} else {  $ ~~~cout << "-1" << endl ;  $ ~~}  $ ~}  $ }
int main ( ) {  $ ~int n ;  $ ~cin >> n ;  $ ~string s ;  $ ~cin >> s ;  $ ~int flag = 1 ;  $ ~int count = 0 ;  $ ~for ( int i = 0 ; i < n ; i ++ ) {  $ ~~if ( s [ i ] == '?' ) {  $ ~~~if ( i == 0 ) { count = 2 ; }  $ ~~~if ( i == n - 1 ) { count = 2 ; }  $ ~~~if ( s [ i + 1 ] == '?' || ( s [ i - 1 ] == s [ i + 1 ] ) ) { count = 2 ; }  $ ~~} else if ( s [ i ] == s [ i + 1 ] ) {  $ ~~~count = 1 ;  $ ~~~break ;  $ ~~}  $ ~}  $ ~if ( count == 2 )  $ ~~cout << "Yes" << endl ;  $ ~else  $ ~~cout << "No" << endl ;  $ ~return 0 ;  $ }
vector < long long int > v ;  $ int t = 0 ;  $ long long int p = 1 ;  $ void primeFactors ( long long int n ) {  $ ~while ( n % 2 == 0 ) {  $ ~~if ( t < 2 ) { p = p * 2 ; }  $ ~~t ++ ;  $ ~~n = n / 2 ;  $ ~}  $ ~for ( long long int i = 3 ; i <= sqrt ( n ) ; i = i + 2 ) {  $ ~~while ( n % i == 0 ) {  $ ~~~if ( t < 2 ) { p = p * i ; }  $ ~~~t ++ ;  $ ~~~n = n / i ;  $ ~~}  $ ~}  $ ~if ( n > 2 ) {  $ ~~if ( t < 2 ) { p = p * n ; }  $ ~~t ++ ;  $ ~}  $ }  $ int main ( ) {  $ ~long long int n ;  $ ~cin >> n ;  $ ~primeFactors ( n ) ;  $ ~if ( t <= 1 ) {  $ ~~cout << 1 << endl << 0 << endl ;  $ ~} else if ( t == 2 ) {  $ ~~cout << 2 << endl ;  $ ~} else {  $ ~~cout << 1 << endl ;  $ ~~cout << p << endl ;  $ ~}  $ ~return 0 ;  $ }
double tmaxmin = 1 << 20 ;  $ long long t1 ;  $ long long t2 ;  $ long long t0 ;  $ double T ;  $ long long x1 ;  $ long long x2 ;  $ long long solx1 ;  $ long long solx2 ;  $ int main ( ) {  $ ~cin >> t1 >> t2 >> x1 >> x2 >> t0 ;  $ ~while ( x1 >= 0 && x2 >= 0 ) {  $ ~~T = ( 1.0 * t1 * x1 + t2 * x2 ) / ( x1 + x2 ) ;  $ ~~if ( T < t0 ) {  $ ~~~x1 -- ;  $ ~~} else {  $ ~~~if ( T < tmaxmin ) {  $ ~~~~tmaxmin = T ;  $ ~~~~solx2 = x2 ;  $ ~~~~solx1 = x1 ;  $ ~~~}  $ ~~~x2 -- ;  $ ~~}  $ ~}  $ ~cout << solx1 << " " << solx2 << endl ;  $ }
const int INF = ( int ) 1e9 ;  $ const double PI = 2 * acos ( 0.0 ) ;  $ const double eps = 1e-9 ;  $ const int NPOS = - 1 ;  $ const int MAX = 105 ;  $ string arr [ MAX ] ;  $ int have [ MAX ] ;  $ map < char , int > m ;  $ int n , diff , flag , flg ;  $ int main ( ) {  $ ~cin >> n ;  $ ~m [ 'R' ] = 0 ;  $ ~m [ 'G' ] = 1 ;  $ ~m [ 'B' ] = 2 ;  $ ~m [ 'Y' ] = 3 ;  $ ~m [ 'W' ] = 4 ;  $ ~for ( int i = int ( 0 ) ; i < int ( n ) ; ++ i ) cin >> arr [ i ] ;  $ ~int ans = INT_MAX ;  $ ~for ( int col = 0 ; col < ( 1 << 5 ) ; col ++ ) {  $ ~~for ( int num = int ( 0 ) ; num < int ( ( 1 << 5 ) ) ; ++ num ) {  $ ~~~flag = 0 ;  $ ~~~for ( int i = int ( 0 ) ; i < int ( n ) ; ++ i ) {  $ ~~~~for ( int j = i + 1 ; j < n ; j ++ ) {  $ ~~~~~flg = 0 ;  $ ~~~~~if ( arr [ i ] [ 0 ] != arr [ j ] [ 0 ] ) {  $ ~~~~~~if ( ( 1 << m [ arr [ i ] [ 0 ] ] ) & col ) flg = 1 ;  $ ~~~~~~if ( ( 1 << m [ arr [ j ] [ 0 ] ] ) & col ) flg = 1 ;  $ ~~~~~}  $ ~~~~~if ( arr [ i ] [ 1 ] != arr [ j ] [ 1 ] ) {  $ ~~~~~~if ( ( 1 << ( arr [ i ] [ 1 ] - '1' ) ) & num ) flg = 1 ;  $ ~~~~~~if ( ( 1 << ( arr [ j ] [ 1 ] - '1' ) ) & num ) flg = 1 ;  $ ~~~~~}  $ ~~~~~if ( ( arr [ i ] [ 0 ] == arr [ j ] [ 0 ] ) && ( arr [ i ] [ 1 ] == arr [ j ] [ 1 ] ) ) flg = 1 ;  $ ~~~~~if ( ! flg ) flag = 1 ;  $ ~~~~}  $ ~~~}  $ ~~~if ( ! flag ) {  $ ~~~~int t = __builtin_popcount ( col ) + __builtin_popcount ( num ) ;  $ ~~~~ans = min ( t , ans ) ;  $ ~~~}  $ ~~}  $ ~}  $ ~cout << ans << '\n' ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~int x ;  $ ~cin >> x ;  $ ~if ( x == 1 ) {  $ ~~cout << "-1" << endl ;  $ ~~return 0 ;  $ ~}  $ ~cout << x << " " << x << endl ;  $ ~return 0 ;  $ }
bool prime ( int i ) {  $ ~for ( int k = 2 ; k < i ; k ++ )  $ ~~if ( i % k == 0 ) return false ;  $ ~return true ;  $ }  $ int main ( ) {  $ ~int n ;  $ ~cin >> n ;  $ ~for ( int i = 1 ; i <= 1000 ; i ++ ) {  $ ~~if ( prime ( n * i + 1 ) == false ) {  $ ~~~cout << i << endl ;  $ ~~~return 0 ;  $ ~~}  $ ~}  $ ~return 0 ;  $ }
long long a , b , l , r , ans = 100 , T ;  $ long long Cal ( char c ) {  $ ~long long count = 0 ;  $ ~char s [ 100 ] ;  $ ~for ( int i = 0 ; i < a ; i ++ ) s [ i ] = 'a' + i ;  $ ~for ( int i = a ; i < a + b ; i ++ ) s [ i ] = c ;  $ ~int have [ 26 ] ;  $ ~memset ( have , 0 , 26 * sizeof ( int ) ) ;  $ ~for ( long long i = a + b - 1 ; i >= b ; i -- ) have [ s [ i ] - 'a' ] = 1 ;  $ ~long long i = a + b , j = 0 ;  $ ~while ( i < 2 * a + b ) {  $ ~~while ( have [ j ] ) j ++ ;  $ ~~s [ i ] = j + 'a' ;  $ ~~i ++ ;  $ ~~j ++ ;  $ ~}  $ ~for ( int i = 2 * a + b ; i < T ; i ++ ) s [ i ] = s [ i - 1 ] ;  $ ~memset ( have , 0 , 26 * sizeof ( int ) ) ;  $ ~if ( l <= r ) {  $ ~~for ( long long i = l ; i <= r ; i ++ )  $ ~~~if ( ! have [ s [ i ] - 'a' ] ) {  $ ~~~~count ++ ;  $ ~~~~have [ s [ i ] - 'a' ] = 1 ;  $ ~~~}  $ ~} else {  $ ~~for ( long long i = 0 ; i <= r ; i ++ )  $ ~~~if ( ! have [ s [ i ] - 'a' ] ) {  $ ~~~~count ++ ;  $ ~~~~have [ s [ i ] - 'a' ] = 1 ;  $ ~~~}  $ ~~for ( long long i = l ; i < T ; i ++ )  $ ~~~if ( ! have [ s [ i ] - 'a' ] ) {  $ ~~~~count ++ ;  $ ~~~~have [ s [ i ] - 'a' ] = 1 ;  $ ~~~}  $ ~}  $ ~return count ;  $ }  $ int main ( ) {  $ ~long long t ;  $ ~cin >> a >> b >> l >> r ;  $ ~l -- ;  $ ~r -- ;  $ ~T = 2 * ( a + b ) ;  $ ~if ( a > b + 1 )  $ ~~t = 2 * a - b ;  $ ~else  $ ~~t = a + 1 ;  $ ~if ( r - l >= T )  $ ~~ans = t ;  $ ~else {  $ ~~r %= T ;  $ ~~l %= T ;  $ ~~for ( int i = 0 ; i < a ; i ++ ) ans = min ( Cal ( 'a' + i ) , ans ) ;  $ ~}  $ ~cout << ans << endl ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~int a = 0 , b = 0 , c = 0 ;  $ ~int n , x ;  $ ~cin >> n ;  $ ~while ( n -- ) {  $ ~~cin >> x ;  $ ~~if ( x == 25 ) {  $ ~~~a ++ ;  $ ~~} else if ( x == 50 && a != 0 ) {  $ ~~~a -- ;  $ ~~~b ++ ;  $ ~~} else if ( x == 50 && a == 0 ) {  $ ~~~cout << "NO" << endl ;  $ ~~~return 0 ;  $ ~~} else if ( x == 100 && a != 0 && b != 0 ) {  $ ~~~a -- ;  $ ~~~b -- ;  $ ~~~c ++ ;  $ ~~} else if ( x == 100 && a >= 3 && b == 0 ) {  $ ~~~a -= 3 ;  $ ~~~c ++ ;  $ ~~} else {  $ ~~~cout << "NO" << endl ;  $ ~~~return 0 ;  $ ~~}  $ ~}  $ ~cout << "YES" << endl ;  $ ~return 0 ;  $ }
const long long MAX = 1e5 + 5 ;  $ const long long MOD = 1e9 + 7 ;  $ const long long inf = 1e12 + 5 ;  $ int main ( ) {  $ ~long long n ;  $ ~cin >> n ;  $ ~long long cur = 0 ;  $ ~for ( int i = 0 ; i < n ; i ++ ) {  $ ~~long long a , k ;  $ ~~cin >> k >> a ;  $ ~~long long tmp = 4 ;  $ ~~while ( tmp < a ) {  $ ~~~tmp *= 4 ;  $ ~~~k ++ ;  $ ~~}  $ ~~cur = max ( cur , k ) ;  $ ~}  $ ~cout << cur + 1 << endl ;  $ ~return 0 ;  $ }
vector < string > v ;  $ long long n ;  $ bool is [ 200 ] ;  $ int main ( ) {  $ ~cin >> n ;  $ ~for ( long long i = 0 ; i < n ; i ++ ) {  $ ~~string e ;  $ ~~cin >> e ;  $ ~~for ( long long k = 0 ; k < ( long long ) e . size ( ) ; k ++ ) {  $ ~~~if ( e [ k ] >= 'A' && e [ k ] <= 'Z' ) e [ k ] = e [ k ] - 'A' + 'a' ;  $ ~~}  $ ~~v . push_back ( e ) ;  $ ~}  $ ~string s ;  $ ~cin >> s ;  $ ~string r = s ;  $ ~for ( long long k = 0 ; k < ( long long ) r . size ( ) ; k ++ ) {  $ ~~if ( r [ k ] >= 'A' && r [ k ] <= 'Z' ) r [ k ] = r [ k ] - 'A' + 'a' ;  $ ~}  $ ~for ( long long i = 0 ; i < ( long long ) s . size ( ) ; i ++ ) {  $ ~~for ( long long j = 0 ; j < n ; j ++ ) {  $ ~~~if ( i + ( long long ) v [ j ] . size ( ) <= ( long long ) s . size ( ) ) {  $ ~~~~if ( r . substr ( i , ( long long ) v [ j ] . size ( ) ) == v [ j ] ) {  $ ~~~~~for ( long long k = i ; k < i + ( long long ) v [ j ] . size ( ) ; k ++ ) { is [ k ] = true ; }  $ ~~~~}  $ ~~~}  $ ~~}  $ ~}  $ ~char g ;  $ ~cin >> g ;  $ ~for ( long long i = 0 ; i < ( long long ) s . size ( ) ; i ++ ) {  $ ~~if ( is [ i ] ) {  $ ~~~if ( s [ i ] >= 'A' && s [ i ] <= 'Z' ) {  $ ~~~~if ( s [ i ] == g - 'a' + 'A' ) {  $ ~~~~~if ( g != 'a' )  $ ~~~~~~s [ i ] = 'A' ;  $ ~~~~~else  $ ~~~~~~s [ i ] = 'B' ;  $ ~~~~} else  $ ~~~~~s [ i ] = g - 'a' + 'A' ;  $ ~~~} else {  $ ~~~~if ( s [ i ] == g ) {  $ ~~~~~if ( g != 'a' )  $ ~~~~~~s [ i ] = 'a' ;  $ ~~~~~else  $ ~~~~~~s [ i ] = 'b' ;  $ ~~~~} else  $ ~~~~~s [ i ] = g ;  $ ~~~}  $ ~~}  $ ~}  $ ~cout << s << endl ;  $ }
vector < string > word ;  $ vector < int > be , af ;  $ set < int > g ;  $ int sf ( string s ) {  $ ~int n = s . size ( ) ;  $ ~if ( n >= 4 && s . substr ( n - 4 , 4 ) == "lios" ) {  $ ~~return 0 ;  $ ~} else if ( n >= 5 && s . substr ( n - 5 , 5 ) == "liala" ) {  $ ~~return 1 ;  $ ~} else if ( n >= 3 && s . substr ( n - 3 , 3 ) == "etr" ) {  $ ~~return 2 ;  $ ~} else if ( n >= 4 && s . substr ( n - 4 , 4 ) == "etra" ) {  $ ~~return 3 ;  $ ~} else if ( n >= 6 && s . substr ( n - 6 , 6 ) == "initis" ) {  $ ~~return 4 ;  $ ~} else if ( n >= 6 && s . substr ( n - 6 , 6 ) == "inites" ) {  $ ~~return 5 ;  $ ~} else {  $ ~~return - 1 ;  $ ~}  $ }  $ int main ( ) {  $ ~string s ;  $ ~while ( cin >> s ) { word . push_back ( s ) ; }  $ ~for ( int i = 0 ; i < word . size ( ) ; i ++ ) {  $ ~~int j = sf ( word [ i ] ) ;  $ ~~if ( j == - 1 ) {  $ ~~~cout << "NO" << endl ;  $ ~~~return 0 ;  $ ~~}  $ ~~g . insert ( j % 2 ) ;  $ ~~be . push_back ( j / 2 ) ;  $ ~~af . push_back ( j / 2 ) ;  $ ~}  $ ~if ( word . size ( ) == 1 ) {  $ ~~cout << "YES" << endl ;  $ ~~return 0 ;  $ ~}  $ ~sort ( af . begin ( ) , af . end ( ) ) ;  $ ~if ( g . size ( ) != 1 ) {  $ ~~cout << "NO" << endl ;  $ ~~return 0 ;  $ ~}  $ ~int cnt = 0 ;  $ ~for ( int i = 0 ; i < af . size ( ) ; i ++ ) {  $ ~~if ( af [ i ] != be [ i ] ) {  $ ~~~cout << "NO" << endl ;  $ ~~~return 0 ;  $ ~~}  $ ~~if ( af [ i ] == 1 ) { cnt ++ ; }  $ ~}  $ ~if ( cnt == 0 && word . size ( ) != 1 ) {  $ ~~cout << "NO" << endl ;  $ ~~return 0 ;  $ ~} else if ( cnt != 1 && cnt != 0 ) {  $ ~~cout << "NO" << endl ;  $ ~~return 0 ;  $ ~}  $ ~cout << "YES" << endl ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~string time ;  $ ~cin >> time ;  $ ~vector < int > t ( 4 ) ;  $ ~t [ 0 ] = time [ 0 ] - '0' ;  $ ~t [ 1 ] = time [ 1 ] - '0' ;  $ ~t [ 2 ] = time [ 3 ] - '0' ;  $ ~t [ 3 ] = time [ 4 ] - '0' ;  $ ~int count = 0 ;  $ ~while ( true ) {  $ ~~if ( t [ 0 ] == t [ 3 ] && t [ 1 ] == t [ 2 ] ) { break ; }  $ ~~t [ 3 ] += 1 ;  $ ~~if ( t [ 3 ] > 9 ) {  $ ~~~t [ 2 ] += 1 ;  $ ~~~t [ 3 ] = 0 ;  $ ~~~if ( t [ 2 ] > 5 ) {  $ ~~~~t [ 1 ] += 1 ;  $ ~~~~t [ 2 ] = 0 ;  $ ~~~~t [ 3 ] = 0 ;  $ ~~~~if ( t [ 0 ] != 2 && t [ 1 ] > 9 ) {  $ ~~~~~t [ 0 ] += 1 ;  $ ~~~~~t [ 1 ] = 0 ;  $ ~~~~~t [ 2 ] = 0 ;  $ ~~~~~t [ 3 ] = 0 ;  $ ~~~~}  $ ~~~~if ( t [ 0 ] == 2 && t [ 1 ] > 3 ) {  $ ~~~~~t [ 0 ] = 0 ;  $ ~~~~~t [ 1 ] = 0 ;  $ ~~~~~t [ 2 ] = 0 ;  $ ~~~~~t [ 3 ] = 0 ;  $ ~~~~}  $ ~~~}  $ ~~}  $ ~~++ count ;  $ ~}  $ ~cout << count << "\n" ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~int a = 0 , b = 0 , c = 0 ;  $ ~int n , x ;  $ ~cin >> n ;  $ ~while ( n -- ) {  $ ~~cin >> x ;  $ ~~if ( x == 25 ) {  $ ~~~a ++ ;  $ ~~} else if ( x == 50 && a != 0 ) {  $ ~~~a -- ;  $ ~~~b ++ ;  $ ~~} else if ( x == 50 && a == 0 ) {  $ ~~~cout << "NO" << endl ;  $ ~~~return 0 ;  $ ~~} else if ( x == 100 && a != 0 && b != 0 ) {  $ ~~~a -- ;  $ ~~~b -- ;  $ ~~~c ++ ;  $ ~~} else if ( x == 100 && a >= 3 && b == 0 ) {  $ ~~~a -= 3 ;  $ ~~~c ++ ;  $ ~~} else {  $ ~~~cout << "NO" << endl ;  $ ~~~return 0 ;  $ ~~}  $ ~}  $ ~cout << "YES" << endl ;  $ ~return 0 ;  $ }
const int N = - 1 ;  $ int main ( ) {  $ ~string s ;  $ ~cin >> s ;  $ ~int n = s . size ( ) ;  $ ~int ans = - 1 ;  $ ~for ( int tam1 = 1 ; tam1 <= n ; tam1 ++ ) {  $ ~~for ( int tam2 = 1 ; tam2 <= n - tam1 - 1 ; tam2 ++ ) {  $ ~~~int tam3 = n - tam1 - tam2 ;  $ ~~~int id = 0 ;  $ ~~~int cur = 0 , soma = 0 ;  $ ~~~for ( int i = 0 ; i < tam1 ; i ++ ) {  $ ~~~~if ( tam1 != 1 and s [ id ] == '0' and cur == 0 ) goto fim ;  $ ~~~~cur = 10 * cur + ( s [ id ++ ] - '0' ) ;  $ ~~~~if ( cur > 1000000 ) goto fim ;  $ ~~~}  $ ~~~soma += cur ;  $ ~~~cur = 0 ;  $ ~~~for ( int i = 0 ; i < tam2 ; i ++ ) {  $ ~~~~if ( tam2 != 1 and s [ id ] == '0' and cur == 0 ) goto fim ;  $ ~~~~cur = 10 * cur + ( s [ id ++ ] - '0' ) ;  $ ~~~~if ( cur > 1000000 ) goto fim ;  $ ~~~}  $ ~~~soma += cur ;  $ ~~~cur = 0 ;  $ ~~~for ( int i = 0 ; i < tam3 ; i ++ ) {  $ ~~~~if ( tam3 != 1 and s [ id ] == '0' and cur == 0 ) goto fim ;  $ ~~~~cur = 10 * cur + ( s [ id ++ ] - '0' ) ;  $ ~~~~if ( cur > 1000000 ) goto fim ;  $ ~~~}  $ ~~~soma += cur ;  $ ~~~cur = 0 ;  $ ~~~ans = max ( ans , soma ) ;  $ ~~fim :  $ ~~~continue ;  $ ~~}  $ ~}  $ ~cout << ans << endl ;  $ ~return 0 ;  $ }
const int N = 110 * 2 ;  $ int main ( ) {  $ ~int n , k , i ;  $ ~int a [ N ] ;  $ ~cin >> n >> k ;  $ ~int len = 2 * n + 1 ;  $ ~int cnt = 0 ;  $ ~for ( i = 1 ; i <= len ; i ++ ) { cin >> a [ i ] ; }  $ ~for ( i = 1 ; i <= len ; i ++ ) {  $ ~~if ( i % 2 == 0 ) {  $ ~~~if ( a [ i ] - 1 > a [ i - 1 ] && a [ i ] - 1 > a [ i + 1 ] ) {  $ ~~~~a [ i ] -- ;  $ ~~~~cnt ++ ;  $ ~~~}  $ ~~}  $ ~~if ( cnt == k ) break ;  $ ~}  $ ~for ( i = 1 ; i < len ; i ++ ) cout << a [ i ] << " " ;  $ ~cout << a [ len ] << endl ;  $ ~return 0 ;  $ }
char s [ 1000 ] ;  $ int main ( ) {  $ ~while ( cin >> s ) {  $ ~~int a , b , c ;  $ ~~int len = strlen ( s ) ;  $ ~~int cnt = 0 ;  $ ~~for ( int i = 0 ; i < len ; i ++ ) {  $ ~~~if ( s [ i ] == '+' ) {  $ ~~~~a = cnt ;  $ ~~~~cnt = 0 ;  $ ~~~} else if ( s [ i ] == '=' ) {  $ ~~~~b = cnt ;  $ ~~~~c = len - a - b - 2 ;  $ ~~~} else  $ ~~~~cnt ++ ;  $ ~~}  $ ~~if ( a + b == c ) {  $ ~~~for ( int i = 0 ; i < a ; i ++ ) cout << "|" ;  $ ~~~cout << "+" ;  $ ~~~for ( int i = 0 ; i < b ; i ++ ) cout << "|" ;  $ ~~~cout << "=" ;  $ ~~~for ( int i = 0 ; i < c ; i ++ ) cout << "|" ;  $ ~~~cout << endl ;  $ ~~} else if ( a + 1 + b == c - 1 && c > 1 ) {  $ ~~~a = a + 1 ;  $ ~~~c = c - 1 ;  $ ~~~for ( int i = 0 ; i < a ; i ++ ) cout << "|" ;  $ ~~~cout << "+" ;  $ ~~~for ( int i = 0 ; i < b ; i ++ ) cout << "|" ;  $ ~~~cout << "=" ;  $ ~~~for ( int i = 0 ; i < c ; i ++ ) cout << "|" ;  $ ~~~cout << endl ;  $ ~~} else if ( a - 1 + b == c + 1 && a > 1 ) {  $ ~~~a = a - 1 ;  $ ~~~c = c + 1 ;  $ ~~~for ( int i = 0 ; i < a ; i ++ ) cout << "|" ;  $ ~~~cout << "+" ;  $ ~~~for ( int i = 0 ; i < b ; i ++ ) cout << "|" ;  $ ~~~cout << "=" ;  $ ~~~for ( int i = 0 ; i < c ; i ++ ) cout << "|" ;  $ ~~~cout << endl ;  $ ~~} else if ( a + b - 1 == c + 1 && b > 1 ) {  $ ~~~b = b - 1 ;  $ ~~~c = c + 1 ;  $ ~~~for ( int i = 0 ; i < a ; i ++ ) cout << "|" ;  $ ~~~cout << "+" ;  $ ~~~for ( int i = 0 ; i < b ; i ++ ) cout << "|" ;  $ ~~~cout << "=" ;  $ ~~~for ( int i = 0 ; i < c ; i ++ ) cout << "|" ;  $ ~~~cout << endl ;  $ ~~} else  $ ~~~cout << "Impossible" << endl ;  $ ~}  $ ~return 0 ;  $ }
int f ( int n ) {  $ ~int s ;  $ ~s = n / 10 + ( n % 10 ) * 10 ;  $ ~return s ;  $ }  $ int main ( ) {  $ ~char c ;  $ ~int n , m , x , y , z , d ;  $ ~cin >> n >> c >> m ;  $ ~x = f ( n ) ;  $ ~y = f ( m ) ;  $ ~if ( n >= 6 && n <= 9 ) {  $ ~~d = ( 9 - n ) * 60 + 60 - m + 1 ;  $ ~} else if ( n >= 16 && n <= 19 ) {  $ ~~d = ( 19 - n ) * 60 + 60 - m + 2 ;  $ ~} else {  $ ~~if ( x >= m )  $ ~~~d = x - m ;  $ ~~else if ( n == 5 ) {  $ ~~~d = 4 * 60 + 60 - m + 1 ;  $ ~~} else if ( n == 15 ) {  $ ~~~d = 4 * 60 + 60 - m + 2 ;  $ ~~} else if ( n == 23 ) {  $ ~~~d = 60 - m ;  $ ~~} else {  $ ~~~z = f ( n + 1 ) ;  $ ~~~d = z + 60 - m ;  $ ~~}  $ ~}  $ ~cout << d << endl ;  $ }
int main ( ) {  $ ~int n ;  $ ~cin >> n ;  $ ~int a [ 100005 ] ;  $ ~for ( int i = 1 ; i <= n ; i ++ ) cin >> a [ i ] ;  $ ~int count = 1 ;  $ ~int neg = 0 ;  $ ~int b [ 10005 ] ;  $ ~int i ;  $ ~b [ 0 ] = 1 ;  $ ~for ( i = 1 ; i <= n ; i ++ ) {  $ ~~if ( a [ i ] < 0 ) neg ++ ;  $ ~~if ( neg == 3 ) {  $ ~~~b [ count ++ ] = i ;  $ ~~~neg = 1 ;  $ ~~}  $ ~}  $ ~cout << count << endl ;  $ ~for ( int j = 1 ; j < count ; j ++ ) { cout << b [ j ] - b [ j - 1 ] << " " ; }  $ ~cout << n + 1 - b [ count - 1 ] << endl ;  $ }
const long long MAX = 1000000007 ;  $ int main ( ) {  $ ~long long a ;  $ ~cin >> a ;  $ ~string s ;  $ ~cin >> s ;  $ ~map < long long , long long > x ;  $ ~long long all = 0 ;  $ ~for ( int i = 0 ; i < s . length ( ) ; i ++ ) {  $ ~~long long tot = 0 ;  $ ~~for ( int j = i ; j < s . length ( ) ; j ++ ) {  $ ~~~tot += ( s [ j ] - 48 ) ;  $ ~~~x [ tot ] ++ ;  $ ~~~all ++ ;  $ ~~}  $ ~}  $ ~long long t = 0 ;  $ ~for ( int i = 0 ; i < s . length ( ) ; i ++ ) {  $ ~~long long tot = 0 ;  $ ~~for ( int j = i ; j < s . length ( ) ; j ++ ) {  $ ~~~tot += ( s [ j ] - 48 ) ;  $ ~~~if ( tot != 0 && a % tot == 0 ) { t += x [ a / tot ] ; }  $ ~~~if ( tot == 0 && a == 0 ) { t += all ; }  $ ~~}  $ ~}  $ ~cout << t << endl ;  $ }
int main ( ) {  $ ~string a ;  $ ~cin >> a ;  $ ~int count_a = 0 , count_c = 0 , count_b = 0 ;  $ ~for ( int i = 0 ; i < a . length ( ) ; i ++ ) {  $ ~~if ( a [ i ] == 'a' )  $ ~~~count_a ++ ;  $ ~~else if ( a [ i ] == 'b' )  $ ~~~count_b ++ ;  $ ~~else if ( a [ i ] == 'c' )  $ ~~~count_c ++ ;  $ ~}  $ ~if ( count_a != count_c && count_b != count_c )  $ ~~cout << "NO" << endl ;  $ ~else if ( count_a == 0 || count_b == 0 || count_c == 0 )  $ ~~cout << "NO" << endl ;  $ ~else {  $ ~~for ( int i = 0 ; i < count_a ; i ++ ) {  $ ~~~if ( a [ i ] != 'a' ) {  $ ~~~~cout << "NO" << endl ;  $ ~~~~return 0 ;  $ ~~~}  $ ~~}  $ ~~for ( int i = count_a ; i < count_a + count_b ; i ++ ) {  $ ~~~if ( a [ i ] != 'b' ) {  $ ~~~~cout << "NO" << endl ;  $ ~~~~return 0 ;  $ ~~~}  $ ~~}  $ ~~cout << "YES\n" ;  $ ~}  $ }
int main ( ) {  $ ~int n , k ;  $ ~while ( cin >> n >> k ) {  $ ~~for ( int i = 0 ; i <= n - 1 ; i ++ ) {  $ ~~~if ( i > k - 1 )  $ ~~~~cout << ( char ) ( i % k + 'a' ) ;  $ ~~~else  $ ~~~~cout << ( char ) ( i + 'a' ) ;  $ ~~}  $ ~~cout << endl ;  $ ~}  $ ~return 0 ;  $ }
char a [ 1005 ] ;  $ int judge ( int c , int n ) {  $ ~int flag = n - 1 ;  $ ~for ( int i = c ; i < n ; i ++ ) {  $ ~~if ( a [ i ] != a [ flag - i + c ] ) { return 0 ; }  $ ~}  $ ~return 1 ;  $ }  $ int main ( ) {  $ ~while ( cin >> a ) {  $ ~~int n ;  $ ~~cin >> n ;  $ ~~int s = strlen ( a ) ;  $ ~~if ( n > s ) {  $ ~~~cout << "NO" << endl ;  $ ~~~continue ;  $ ~~}  $ ~~if ( s % n != 0 ) {  $ ~~~cout << "NO" << endl ;  $ ~~~continue ;  $ ~~}  $ ~~int pl = s / n ;  $ ~~int ans = 0 ;  $ ~~int h = 0 ;  $ ~~for ( int i = 0 ; i < s ; ) {  $ ~~~h += pl ;  $ ~~~int x = judge ( i , h ) ;  $ ~~~if ( ! x ) {  $ ~~~~ans = 1 ;  $ ~~~~break ;  $ ~~~}  $ ~~~i = h ;  $ ~~}  $ ~~if ( ans ) {  $ ~~~cout << "NO" << endl ;  $ ~~} else {  $ ~~~cout << "YES" << endl ;  $ ~~}  $ ~}  $ ~return 0 ;  $ }
int main ( ) {  $ ~int n ;  $ ~cin >> n ;  $ ~int sum = 0 ;  $ ~for ( int i = 0 ; i < ( n ) ; i ++ ) {  $ ~~int v ;  $ ~~cin >> v ;  $ ~~sum += v ;  $ ~}  $ ~if ( sum == ( n - 1 + ( n == 1 ) ) )  $ ~~cout << ( "YES" ) << '\n' ;  $ ~else  $ ~~cout << ( "NO" ) << '\n' ;  $ ~return 0 ;  $ }
const int maxn = 1.5e7 + 1 ;  $ bool vis [ maxn ] ;  $ int cnt [ maxn ] ;  $ int main ( ) {  $ ~int gcd = 0 ;  $ ~int a , n ;  $ ~cin >> n ;  $ ~for ( int i = 1 ; i <= n ; ++ i ) {  $ ~~cin >> a ;  $ ~~cnt [ a ] ++ ;  $ ~~if ( i == 1 )  $ ~~~gcd = a ;  $ ~~else {  $ ~~~gcd = __gcd ( gcd , a ) ;  $ ~~}  $ ~}  $ ~int ans = 0 ;  $ ~for ( int i = gcd + 1 ; i < maxn ; ++ i ) {  $ ~~if ( ! vis [ i ] ) {  $ ~~~int tmp = 0 ;  $ ~~~for ( int j = i ; j < maxn ; j += i ) {  $ ~~~~vis [ j ] = true ;  $ ~~~~tmp += cnt [ j ] ;  $ ~~~}  $ ~~~ans = max ( ans , tmp ) ;  $ ~~}  $ ~}  $ ~if ( ans == 0 ) {  $ ~~cout << - 1 << endl ;  $ ~} else  $ ~~cout << n - ans << endl ;  $ ~return 0 ;  $ }
int n ;  $ vector < int > solve ( int x , int y ) {  $ ~vector < int > ans ( 4 ) ;  $ ~if ( x == 0 ) {  $ ~~ans [ 0 ] = y ;  $ ~~ans [ 1 ] = n - y ;  $ ~~ans [ 2 ] = ans [ 0 ] + n ;  $ ~~ans [ 3 ] = ans [ 1 ] + n ;  $ ~} else if ( y == 0 ) {  $ ~~ans [ 0 ] = x ;  $ ~~ans [ 1 ] = ans [ 0 ] + n ;  $ ~~ans [ 2 ] = n - x ;  $ ~~ans [ 3 ] = ans [ 2 ] + n ;  $ ~} else if ( x == n ) {  $ ~~ans [ 2 ] = y ;  $ ~~ans [ 3 ] = n - y ;  $ ~~ans [ 1 ] = ans [ 3 ] + n ;  $ ~~ans [ 0 ] = ans [ 2 ] + n ;  $ ~} else {  $ ~~ans [ 1 ] = x ;  $ ~~ans [ 3 ] = n - x ;  $ ~~ans [ 0 ] = ans [ 1 ] + n ;  $ ~~ans [ 2 ] = ans [ 3 ] + n ;  $ ~}  $ ~return ans ;  $ }  $ int main ( ) {  $ ~int x1 , y1 , x2 , y2 ;  $ ~cin >> n >> x1 >> y1 >> x2 >> y2 ;  $ ~if ( ( x1 == 0 && x2 == 0 ) || ( x1 == n && x2 == n ) )  $ ~~cout << abs ( y1 - y2 ) << "\n" ;  $ ~else if ( ( y1 == 0 && y2 == 0 ) || ( y1 == n && y2 == n ) )  $ ~~cout << abs ( x1 - x2 ) << "\n" ;  $ ~else {  $ ~~vector < int > A = solve ( x1 , y1 ) , B = solve ( x2 , y2 ) ;  $ ~~int mn = 1e9 ;  $ ~~for ( int i = 0 ; i < 4 ; ++ i ) mn = min ( mn , A [ i ] + B [ i ] ) ;  $ ~~cout << mn << "\n" ;  $ ~}  $ ~return 0 ;  $ }
int n , matriz [ 150 ] [ 150 ] , visited [ 150 ] ;  $ void DFS ( int u ) {  $ ~visited [ u ] = 1 ;  $ ~for ( int p = 1 ; p <= n ; p ++ )  $ ~~if ( ! visited [ p ] && matriz [ u ] [ p ] ) DFS ( p ) ;  $ }  $ int main ( ) {  $ ~bool alguienSabe = false ;  $ ~int m , a , k , cnt = 0 , lenguas [ 150 ] [ 150 ] ;  $ ~for ( int i = 1 ; i <= 100 ; i ++ ) {  $ ~~visited [ i ] = 0 ;  $ ~~for ( int j = 1 ; j <= 100 ; j ++ ) {  $ ~~~matriz [ i ] [ j ] = 0 ;  $ ~~~lenguas [ i ] [ j ] = 0 ;  $ ~~}  $ ~}  $ ~cin >> n >> m ;  $ ~for ( int i = 1 ; i <= n ; i ++ ) {  $ ~~cin >> a ;  $ ~~for ( int j = 1 ; j <= a ; j ++ ) {  $ ~~~cin >> k ;  $ ~~~if ( ! alguienSabe && k ) alguienSabe = true ;  $ ~~~if ( k != 0 ) lenguas [ i ] [ k ] = 1 ;  $ ~~~if ( i > 1 ) {  $ ~~~~for ( int z = 1 ; z < i ; z ++ )  $ ~~~~~if ( lenguas [ z ] [ k ] ) matriz [ i ] [ z ] = matriz [ z ] [ i ] = 1 ;  $ ~~~}  $ ~~}  $ ~}  $ ~for ( int i = 1 ; i <= n ; i ++ ) {  $ ~~if ( ! visited [ i ] ) {  $ ~~~cnt ++ ;  $ ~~~DFS ( i ) ;  $ ~~}  $ ~}  $ ~if ( alguienSabe )  $ ~~cout << cnt - 1 << endl ;  $ ~else  $ ~~cout << cnt << endl ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~int n , x , r25 = 0 , r50 = 0 ;  $ ~cin >> n ;  $ ~for ( int i = 0 ; i < n ; ++ i ) {  $ ~~cin >> x ;  $ ~~if ( x == 25 ) r25 ++ ;  $ ~~if ( x == 50 ) {  $ ~~~if ( r25 == 0 ) {  $ ~~~~cout << "NO\n" ;  $ ~~~~return 0 ;  $ ~~~}  $ ~~~r25 -- ;  $ ~~~r50 ++ ;  $ ~~}  $ ~~if ( x == 100 ) {  $ ~~~if ( r50 == 0 ? r25 < 3 : r25 < 1 ) {  $ ~~~~cout << "NO\n" ;  $ ~~~~return 0 ;  $ ~~~}  $ ~~~if ( r50 > 0 ) {  $ ~~~~r50 -- ;  $ ~~~~r25 -- ;  $ ~~~} else {  $ ~~~~r25 -= 3 ;  $ ~~~}  $ ~~}  $ ~}  $ ~cout << "YES\n" ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~int n ;  $ ~int sum = 0 ;  $ ~int npos = 0 ;  $ ~int nneg = 0 ;  $ ~int x [ 100 ] [ 2 ] ;  $ ~cin >> n ;  $ ~for ( int i = 0 ; i < n ; i ++ ) {  $ ~~for ( int j = 0 ; j < 2 ; j ++ ) { cin >> x [ i ] [ j ] ; }  $ ~}  $ ~for ( int i = 0 ; i < n ; i ++ ) {  $ ~~if ( x [ i ] [ 0 ] > 0 ) {  $ ~~~npos ++ ;  $ ~~} else {  $ ~~~nneg ++ ;  $ ~~}  $ ~}  $ ~for ( int i = 0 ; i < n - 1 ; i ++ ) {  $ ~~for ( int j = i + 1 ; j < n ; j ++ ) {  $ ~~~if ( x [ i ] [ 0 ] > x [ j ] [ 0 ] ) {  $ ~~~~int auxp , auxc ;  $ ~~~~auxp = x [ i ] [ 0 ] ;  $ ~~~~x [ i ] [ 0 ] = x [ j ] [ 0 ] ;  $ ~~~~x [ j ] [ 0 ] = auxp ;  $ ~~~~auxc = x [ i ] [ 1 ] ;  $ ~~~~x [ i ] [ 1 ] = x [ j ] [ 1 ] ;  $ ~~~~x [ j ] [ 1 ] = auxc ;  $ ~~~}  $ ~~}  $ ~}  $ ~if ( npos > nneg ) {  $ ~~for ( int i = 0 ; i < ( 2 * nneg + 1 ) ; i ++ ) { sum = sum + x [ i ] [ 1 ] ; }  $ ~} else if ( npos < nneg ) {  $ ~~for ( int i = ( n - ( 2 * npos + 1 ) ) ; i < n ; i ++ ) { sum = sum + x [ i ] [ 1 ] ; }  $ ~} else {  $ ~~for ( int i = 0 ; i < n ; i ++ ) { sum = sum + x [ i ] [ 1 ] ; }  $ ~}  $ ~cout << sum << endl ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~double a , b , c , d ;  $ ~cin >> a >> b >> c >> d ;  $ ~if ( ( a - b ) == ( b - c ) && ( b - c ) == ( c - d ) ) {  $ ~~cout << d + ( b - a ) << endl ;  $ ~} else {  $ ~~if ( ( b / a ) == ( c / b ) && ( c / b ) == ( d / c ) ) {  $ ~~~double k = d * ( b / a ) ;  $ ~~~if ( k == ( int ) k ) {  $ ~~~~cout << k << endl ;  $ ~~~} else {  $ ~~~~cout << 42 << endl ;  $ ~~~}  $ ~~} else {  $ ~~~cout << 42 << endl ;  $ ~~}  $ ~}  $ ~return 0 ;  $ }
int main ( ) {  $ ~unsigned long long int l ;  $ ~cin >> l ;  $ ~if ( l <= 127 ) {  $ ~~cout << "byte" << endl ;  $ ~} else if ( l <= 32767 ) {  $ ~~cout << "short" << endl ;  $ ~} else if ( l <= 2147483647 ) {  $ ~~cout << "int" << endl ;  $ ~} else if ( l <= 9223372036854775807 ) {  $ ~~cout << "long" << endl ;  $ ~} else  $ ~~cout << "BigInteger" << endl ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~int t , s , x , i ;  $ ~cin >> t >> s >> x ;  $ ~if ( t == x ) {  $ ~~cout << "YES" << endl ;  $ ~~return 0 ;  $ ~}  $ ~for ( i = 1 ; i < 1000000000 ; i ++ ) {  $ ~~if ( t + s * i == x || t + s * i + 1 == x ) {  $ ~~~cout << "YES" << endl ;  $ ~~~break ;  $ ~~} else if ( t + s * i > x ) {  $ ~~~cout << "NO" << endl ;  $ ~~~break ;  $ ~~}  $ ~}  $ }
vector < char > po ;  $ map < char , int > ans ;  $ int main ( ) {  $ ~ans [ 'a' ] = ans [ 'e' ] = ans [ 'i' ] = ans [ 'o' ] = ans [ 'u' ] = ans [ 'y' ] = 1 ;  $ ~string pos ;  $ ~cin >> pos ;  $ ~transform ( pos . begin ( ) , pos . end ( ) , pos . begin ( ) , : : tolower ) ;  $ ~for ( int i = 0 ; i < pos . size ( ) ; i ++ ) {  $ ~~if ( ans [ pos [ i ] ] )  $ ~~~continue ;  $ ~~else {  $ ~~~po . push_back ( '.' ) ;  $ ~~~po . push_back ( pos [ i ] ) ;  $ ~~}  $ ~}  $ ~for ( int i = 0 ; i < po . size ( ) ; i ++ ) cout << po [ i ] ;  $ ~cout << endl ;  $ }
int main ( ) {  $ ~string s ;  $ ~int n , sum = 0 ;  $ ~cin >> n ;  $ ~cin >> s ;  $ ~for ( int i = 0 ; i < n ; i ++ ) {  $ ~~if ( s [ i ] == '<' )  $ ~~~sum ++ ;  $ ~~else  $ ~~~break ;  $ ~}  $ ~for ( int i = n - 1 ; i >= 0 ; i -- ) {  $ ~~if ( s [ i ] == '>' )  $ ~~~sum ++ ;  $ ~~else  $ ~~~break ;  $ ~}  $ ~cout << sum << endl ;  $ }
const int N = 0 ;  $ long long a , b ;  $ string s ;  $ vector < int > v ;  $ int main ( ) {  $ ~cin >> s ;  $ ~int n = s . length ( ) ;  $ ~string res = "" ;  $ ~bool flag = false ;  $ ~for ( int i = 0 ; i < n ; i ++ ) {  $ ~~if ( s [ i ] == 'a' || flag ) {  $ ~~~res += s [ i ] ;  $ ~~~continue ;  $ ~~}  $ ~~flag = true ;  $ ~~while ( i < n && s [ i ] != 'a' ) {  $ ~~~res += ( s [ i ] - 1 ) ;  $ ~~~i ++ ;  $ ~~}  $ ~~if ( i != n ) i -- ;  $ ~}  $ ~if ( ! flag ) { res [ n - 1 ] = 'z' ; }  $ ~cout << res << endl ;  $ ~return 0 ;  $ }
int a [ 110 ] , b [ 110 ] = { 0 } ;  $ int main ( ) {  $ ~int n ;  $ ~cin >> n ;  $ ~for ( int i = 0 ; i < n ; i ++ ) cin >> a [ i ] ;  $ ~int sum = 0 , num = 0 , h = 0 ;  $ ~for ( int i = 0 ; i < n ; i ++ ) {  $ ~~if ( a [ i ] < 0 ) num ++ ;  $ ~~if ( num == 3 ) {  $ ~~~b [ h ++ ] = sum ;  $ ~~~sum = 1 ;  $ ~~~num = 1 ;  $ ~~~continue ;  $ ~~}  $ ~~sum ++ ;  $ ~}  $ ~b [ h ++ ] = sum ;  $ ~cout << h << endl ;  $ ~for ( int i = 0 ; i < h ; i ++ ) {  $ ~~if ( i ) cout << " " ;  $ ~~cout << b [ i ] ;  $ ~}  $ ~cout << endl ;  $ }
int a [ 100001 ] ;  $ int main ( ) {  $ ~int n ;  $ ~cin >> n ;  $ ~for ( int i = 1 ; i < n + 1 ; i ++ ) cin >> a [ i ] ;  $ ~long long res = 0 ;  $ ~int t ;  $ ~for ( int i = 1 ; i < n ; i ++ ) {  $ ~~for ( t = 1 ; i + t <= n ; t *= 2 )  $ ~~~;  $ ~~t >> = 1 ;  $ ~~res += a [ i ] ;  $ ~~a [ i + t ] += a [ i ] ;  $ ~~cout << res << endl ;  $ ~}  $ ~return 0 ;  $ }
long long m1 [ 100001 ] ;  $ long long ans ;  $ int main ( ) {  $ ~long long n , d ;  $ ~cin >> n ;  $ ~cin >> d ;  $ ~for ( int i = 0 ; i < n ; i ++ ) { cin >> m1 [ i ] ; }  $ ~long h = 0 ;  $ ~long long t ;  $ ~ans = 0 ;  $ ~for ( long long i = 0 ; i < n ; i ++ ) {  $ ~~while ( h < n && m1 [ h ] - m1 [ i ] <= d ) h ++ ;  $ ~~long long t = h - i - 1 ;  $ ~~if ( t - 1 > 0 ) ans += t * ( t - 1 ) / 2 ;  $ ~}  $ ~cout << ans << '\n' ;  $ }
string s ;  $ bool ok ( string t ) {  $ ~int msk = 0 ;  $ ~for ( int i = 0 ; i < int ( t . size ( ) ) ; ++ i ) {  $ ~~if ( isupper ( t [ i ] ) ) msk |= 1 ;  $ ~~if ( islower ( t [ i ] ) ) msk |= 2 ;  $ ~~if ( isdigit ( t [ i ] ) ) msk |= 4 ;  $ ~}  $ ~return msk == 7 ;  $ }  $ int main ( ) {  $ ~int t ;  $ ~cin >> t ;  $ ~for ( int i = 0 ; i < t ; ++ i ) {  $ ~~cin >> s ;  $ ~~if ( ok ( s ) ) {  $ ~~~cout << s << endl ;  $ ~~~continue ;  $ ~~}  $ ~~bool fnd = false ;  $ ~~for ( int i = 0 ; i < int ( s . size ( ) ) ; ++ i ) {  $ ~~~string t = s ;  $ ~~~t [ i ] = '1' ;  $ ~~~if ( ok ( t ) ) {  $ ~~~~cout << t << endl ;  $ ~~~~fnd = true ;  $ ~~~~break ;  $ ~~~}  $ ~~~t [ i ] = 'a' ;  $ ~~~if ( ok ( t ) ) {  $ ~~~~cout << t << endl ;  $ ~~~~fnd = true ;  $ ~~~~break ;  $ ~~~}  $ ~~~t [ i ] = 'A' ;  $ ~~~if ( ok ( t ) ) {  $ ~~~~cout << t << endl ;  $ ~~~~fnd = true ;  $ ~~~~break ;  $ ~~~}  $ ~~}  $ ~~if ( fnd ) continue ;  $ ~~if ( isupper ( s [ 2 ] ) ) {  $ ~~~s [ 0 ] = 'a' ;  $ ~~~s [ 1 ] = '1' ;  $ ~~~cout << s << endl ;  $ ~~~continue ;  $ ~~}  $ ~~if ( islower ( s [ 2 ] ) ) {  $ ~~~s [ 0 ] = 'A' ;  $ ~~~s [ 1 ] = '1' ;  $ ~~~cout << s << endl ;  $ ~~~continue ;  $ ~~}  $ ~~if ( isdigit ( s [ 2 ] ) ) {  $ ~~~s [ 0 ] = 'a' ;  $ ~~~s [ 1 ] = 'A' ;  $ ~~~cout << s << endl ;  $ ~~~continue ;  $ ~~}  $ ~}  $ ~return 0 ;  $ }
const int N = 1e5 + 10 ;  $ char ch1 [ N ] , ch2 [ N ] ;  $ int main ( ) {  $ ~char a [ 105 ] , b [ 105 ] ;  $ ~while ( cin >> ch1 ) {  $ ~~int len = strlen ( ch1 ) ;  $ ~~for ( int i = 0 ; i < len ; i ++ ) { ch2 [ i ] = ch1 [ len - 1 - i ] ; }  $ ~~cin >> a >> b ;  $ ~~int la = strlen ( a ) ;  $ ~~int lb = strlen ( b ) ;  $ ~~if ( strstr ( ch1 , a ) && strstr ( strstr ( ch1 , a ) + la , b ) ) {  $ ~~~if ( strstr ( ch2 , a ) && strstr ( strstr ( ch2 , a ) + la , b ) )  $ ~~~~cout << "both" << endl ;  $ ~~~else  $ ~~~~cout << "forward" << endl ;  $ ~~} else if ( strstr ( ch2 , a ) && strstr ( strstr ( ch2 , a ) + la , b ) ) {  $ ~~~if ( strstr ( ch1 , a ) && strstr ( strstr ( ch1 , a ) + la , b ) )  $ ~~~~cout << "both" << endl ;  $ ~~~else  $ ~~~~cout << "backward" << endl ;  $ ~~} else  $ ~~~cout << "fantasy" << endl ;  $ ~}  $ ~return 0 ;  $ }
string nineteen ;  $ int main ( ) {  $ ~int contN = 0 , contI = 0 , contT = 0 , contE = 0 ;  $ ~int vetor [ 4 ] ;  $ ~cin >> nineteen ;  $ ~for ( int i = 0 ; i < nineteen . length ( ) ; i ++ ) {  $ ~~if ( nineteen [ i ] == 'n' )  $ ~~~contN ++ ;  $ ~~else if ( nineteen [ i ] == 'i' )  $ ~~~contI ++ ;  $ ~~else if ( nineteen [ i ] == 'e' )  $ ~~~contE ++ ;  $ ~~else if ( nineteen [ i ] == 't' )  $ ~~~contT ++ ;  $ ~}  $ ~contE /= 3 ;  $ ~if ( contN > 3 ) {  $ ~~contN -- ;  $ ~~contN /= 2 ;  $ ~} else  $ ~~contN /= 3 ;  $ ~vetor [ 0 ] = contI ;  $ ~vetor [ 1 ] = contT ;  $ ~vetor [ 2 ] = contE ;  $ ~vetor [ 3 ] = contN ;  $ ~sort ( vetor , vetor + 4 ) ;  $ ~cout << vetor [ 0 ] << endl ;  $ ~return 0 ;  $ }
long long int t , s , x ;  $ int main ( ) {  $ ~cin >> t >> s >> x ;  $ ~if ( t == x ) {  $ ~~cout << "YES"  $ ~~~<< "\n" ;  $ ~~return 0 ;  $ ~}  $ ~if ( t == x - 1 ) {  $ ~~cout << "NO"  $ ~~~<< "\n" ;  $ ~~return 0 ;  $ ~}  $ ~long long int l = 0 , r = x , m ;  $ ~while ( l <= r ) {  $ ~~m = ( l + r ) / 2 ;  $ ~~long long int a = t + s * m ;  $ ~~long long int b = t + s * m + 1 ;  $ ~~if ( a == x || b == x ) {  $ ~~~cout << "YES"  $ ~~~~<< "\n" ;  $ ~~~return 0 ;  $ ~~}  $ ~~if ( a > x || b > x ) {  $ ~~~r = m - 1 ;  $ ~~} else {  $ ~~~l = m + 1 ;  $ ~~}  $ ~}  $ ~cout << "NO"  $ ~~<< "\n" ;  $ ~return 0 ;  $ }
bool solve ( int * a , int * b , int * c ) {  $ ~if ( * a + * b == * c ) { return true ; }  $ ~if ( * a - 1 == 0 && * a - 1 + * b == * c + 1 ) {  $ ~~( * b ) -- ;  $ ~~( * c ) ++ ;  $ ~~return true ;  $ ~}  $ ~if ( * a - 1 + * b == * c + 1 ) {  $ ~~( * a ) -- ;  $ ~~( * c ) ++ ;  $ ~~return true ;  $ ~}  $ ~if ( * a + 1 + * b == * c - 1 ) {  $ ~~( * a ) ++ ;  $ ~~( * c ) -- ;  $ ~~return true ;  $ ~}  $ ~return false ;  $ }  $ void load ( const string & t , int * a , int * b , int * c ) {  $ ~* a = t . find ( '+' ) ;  $ ~* b = t . find ( '=' ) - * a - 1 ;  $ ~* c = t . size ( ) - * a - * b - 2 ;  $ }  $ string output ( int a , int b , int c ) {  $ ~return string ( a , '|' ) + "+" + string ( b , '|' ) + "=" + string ( c , '|' ) ;  $ }  $ int main ( ) {  $ ~int a , b , c ;  $ ~string t ;  $ ~cin >> t ;  $ ~load ( t , & a , & b , & c ) ;  $ ~if ( solve ( & a , & b , & c ) ) {  $ ~~cout << output ( a , b , c ) << endl ;  $ ~} else {  $ ~~cout << "Impossible" << endl ;  $ ~}  $ ~return 0 ;  $ }
int main ( ) {  $ ~int n ;  $ ~cin >> n ;  $ ~int k = n / 2 - 1 ;  $ ~cout << n / 2 << endl ;  $ ~while ( k -- ) cout << "2 " ;  $ ~if ( n % 2 )  $ ~~cout << 3 ;  $ ~else  $ ~~cout << 2 ;  $ ~cout << endl ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~int n , a ;  $ ~cin >> n >> a ;  $ ~int mina ( a ) , maxa ( a ) , mini ( 0 ) , maxi ( 0 ) ;  $ ~for ( int i = 1 ; i < n ; ++ i ) {  $ ~~cin >> a ;  $ ~~if ( a > maxa ) {  $ ~~~maxa = a ;  $ ~~~maxi = i ;  $ ~~}  $ ~~if ( a <= mina ) {  $ ~~~mina = a ;  $ ~~~mini = i ;  $ ~~}  $ ~}  $ ~cout << maxi + ( n - 1 - mini ) - ( mini < maxi ? 1 : 0 ) << endl ;  $ ~return 0 ;  $ }
bool prime [ 1200000 + 4 ] ;  $ int pali [ 1200000 + 4 ] ;  $ int pri [ 1200000 + 4 ] ;  $ void sieve ( ) {  $ ~for ( int i = 4 ; i <= 1200000 ; i += 2 ) prime [ i ] = 1 ;  $ ~for ( int i = 3 ; i <= sqrt ( 1200000 ) ; i += 2 ) {  $ ~~if ( prime [ i ] == 0 ) {  $ ~~~for ( int j = i * i ; j <= 1200000 ; j += 2 * i ) prime [ j ] = 1 ;  $ ~~}  $ ~}  $ ~prime [ 0 ] = prime [ 1 ] = 1 ;  $ }  $ bool is_Palindrome ( int n ) {  $ ~int arr [ 10 ] ;  $ ~int l = 0 ;  $ ~while ( n != 0 ) {  $ ~~arr [ l ++ ] = n % 10 ;  $ ~~n = n / 10 ;  $ ~}  $ ~bool flag = 1 ;  $ ~for ( int i = 0 ; i <= l / 2 ; i ++ ) {  $ ~~if ( arr [ i ] != arr [ l - i - 1 ] ) {  $ ~~~flag = 0 ;  $ ~~~break ;  $ ~~}  $ ~}  $ ~if ( flag )  $ ~~return 1 ;  $ ~else  $ ~~return 0 ;  $ }  $ int main ( ) {  $ ~sieve ( ) ;  $ ~pri [ 0 ] = 0 ;  $ ~for ( int i = 0 ; i <= 1200000 ; i ++ ) {  $ ~~if ( prime [ i ] == 0 ) {  $ ~~~pri [ i ] = pri [ i - 1 ] + 1 ;  $ ~~} else {  $ ~~~pri [ i ] = pri [ i - 1 ] ;  $ ~~}  $ ~}  $ ~for ( int i = 1 ; i <= 1200000 ; i ++ ) {  $ ~~if ( is_Palindrome ( i ) ) {  $ ~~~pali [ i ] = pali [ i - 1 ] + 1 ;  $ ~~} else {  $ ~~~pali [ i ] = pali [ i - 1 ] ;  $ ~~}  $ ~}  $ ~long long int p , q ;  $ ~cin >> p >> q ;  $ ~bool flag = 1 ;  $ ~int i ;  $ ~for ( i = 1200000 ; i >= 0 ; i -- ) {  $ ~~if ( ( ( ( long long int ) pri [ i ] ) * q ) <= ( p * ( long long int ) pali [ i ] ) ) {  $ ~~~cout << i << "\n" ;  $ ~~~return 0 ;  $ ~~}  $ ~}  $ ~cout << "Palindromic tree is better than splay tree\n" ;  $ ~return 0 ;  $ }
string str ;  $ unsigned long long n , negative ;  $ int main ( ) {  $ ~cin >> str ;  $ ~if ( str [ 0 ] == '-' ) {  $ ~~str . erase ( str . begin ( ) ) ;  $ ~~negative = 1 ;  $ ~}  $ ~if ( str . size ( ) > 19 ) {  $ ~~cout << "BigInteger\n" ;  $ ~~return 0 ;  $ ~}  $ ~for ( int i = 0 ; i < str . size ( ) ; i ++ ) {  $ ~~n *= 10 ;  $ ~~n += int ( str [ i ] - '0' ) ;  $ ~}  $ ~n += negative ;  $ ~if ( n <= 127 )  $ ~~cout << "byte\n" ;  $ ~else if ( n <= 32767 )  $ ~~cout << "short\n" ;  $ ~else if ( n <= 2147483647 )  $ ~~cout << "int\n" ;  $ ~else if ( n <= 9223372036854775807 )  $ ~~cout << "long\n" ;  $ ~else  $ ~~cout << "BigInteger\n" ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~int a , n , m , i , j , t [ 200010 ] = { 0 } , p , num ;  $ ~while ( cin >> n >> m ) {  $ ~~for ( i = 1 ; i <= n ; i ++ ) cin >> t [ i ] ;  $ ~~for ( i = 1 ; i <= n ; i ++ ) {  $ ~~~t [ i ] += t [ i - 1 ] ;  $ ~~~num = t [ i ] / m ;  $ ~~~t [ i ] -= num * m ;  $ ~~~cout << num ;  $ ~~~if ( i != n ) cout << ' ' ;  $ ~~}  $ ~~cout << endl ;  $ ~}  $ ~return 0 ;  $ }
string s , t ;  $ int l1 , l2 ;  $ int p [ 10001 ] [ 26 ] ;  $ int main ( ) {  $ ~while ( cin >> s >> t ) {  $ ~~l1 = s . size ( ) ;  $ ~~l2 = t . size ( ) ;  $ ~~memset ( p , 0 , sizeof ( p ) ) ;  $ ~~for ( int i = 0 ; i < 26 ; i ++ ) p [ l1 ] [ i ] = - 1 ;  $ ~~for ( int j = l1 ; j >= 1 ; j -- )  $ ~~~for ( int i = 0 ; i < 26 ; i ++ )  $ ~~~~if ( s [ j ] == i + 'a' )  $ ~~~~~p [ j - 1 ] [ i ] = j ;  $ ~~~~else  $ ~~~~~p [ j - 1 ] [ i ] = p [ j ] [ i ] ;  $ ~~int ans = 1 , l = - 2 ;  $ ~~for ( int i = 0 ; i < l2 ; i ++ ) {  $ ~~~if ( l == - 2 ) {  $ ~~~~if ( s [ 0 ] == t [ i ] )  $ ~~~~~l = 0 ;  $ ~~~~else  $ ~~~~~l = p [ 0 ] [ t [ i ] - 'a' ] ;  $ ~~~~if ( l == - 1 ) {  $ ~~~~~ans = - 1 ;  $ ~~~~~break ;  $ ~~~~}  $ ~~~} else {  $ ~~~~l = p [ l ] [ t [ i ] - 'a' ] ;  $ ~~~~if ( l == - 1 ) {  $ ~~~~~ans ++ ;  $ ~~~~~l = - 2 ;  $ ~~~~~i -- ;  $ ~~~~}  $ ~~~}  $ ~~}  $ ~~cout << ans << endl ;  $ ~}  $ }
int main ( ) {  $ ~int a , b , c , d , e , f ;  $ ~cin >> a >> b >> c >> d >> e >> f ;  $ ~if ( ( a * c * e < b * d * f ) || ( ! c && d ) || ( ! a && b && d ) ) {  $ ~~cout << "Ron" << endl ;  $ ~~return 0 ;  $ ~} else {  $ ~~cout << "Hermione" << endl ;  $ ~~return 0 ;  $ ~}  $ ~return 0 ;  $ }
int main ( ) {  $ ~int result [ 4 ] = { 6 , 8 , 4 , 2 } ;  $ ~int n ;  $ ~cin >> n ;  $ ~if ( n == 0 ) {  $ ~~cout << "1" << endl ;  $ ~} else {  $ ~~cout << result [ n % 4 ] << endl ;  $ ~}  $ }
long long bigmod ( long long a , long long b , long long m ) {  $ ~if ( b == 0 ) return 1 % m ;  $ ~long long x = bigmod ( a , b / 2 , m ) ;  $ ~x = ( x * x ) % m ;  $ ~if ( b % 2 ) x = ( x * a ) % m ;  $ ~return x ;  $ }  $ vector < long long > a ;  $ long long s ;  $ bool vis [ 4 ] ;  $ void f ( long long i ) {  $ ~if ( i > 10000000000 ) { return ; }  $ ~if ( i ) a . push_back ( i ) ;  $ ~f ( i * 10 + 4 ) ;  $ ~f ( i * 10 + 7 ) ;  $ }  $ int main ( ) {  $ ~f ( 0 ) ;  $ ~sort ( a . begin ( ) , a . end ( ) ) ;  $ ~long long l , r , i , j , an = 0 , k ;  $ ~cin >> l >> r ;  $ ~i = lower_bound ( a . begin ( ) , a . end ( ) , l ) - a . begin ( ) ;  $ ~k = upper_bound ( a . begin ( ) , a . end ( ) , r ) - a . begin ( ) ;  $ ~j = max ( k - 1 , i ) ;  $ ~an += ( a [ i ] - l + 1 ) * a [ i ] ;  $ ~an += ( r - a [ j ] ) * a [ k ] ;  $ ~for ( long long p = i + 1 ; p <= j ; p ++ ) { an += a [ p ] * ( a [ p ] - a [ p - 1 ] ) ; }  $ ~cout << an << endl ;  $ }
const long long INF = 1e9 ;  $ int main ( ) {  $ ~long long n , m ;  $ ~cin >> n >> m ;  $ ~long long cnt1 = 1 , cnt2 = 1 ;  $ ~for ( long long i = 7 ; i < n ; i *= 7 ) cnt1 ++ ;  $ ~for ( long long i = 7 ; i < m ; i *= 7 ) cnt2 ++ ;  $ ~long long res = 0 ;  $ ~if ( cnt1 + cnt2 <= 7 ) {  $ ~~for ( long long i = 0 ; i != n ; ++ i ) {  $ ~~~for ( long long j = 0 ; j != m ; ++ j ) {  $ ~~~~vector < long long > used ( 7 , 0 ) ;  $ ~~~~for ( long long a = i , k = 0 ; k != cnt1 ; ++ k , a /= 7 ) used [ a % 7 ] ++ ;  $ ~~~~for ( long long a = j , k = 0 ; k != cnt2 ; ++ k , a /= 7 ) used [ a % 7 ] ++ ;  $ ~~~~if ( * max_element ( ( used ) . begin ( ) , ( used ) . end ( ) ) <= 1 ) res ++ ;  $ ~~~}  $ ~~}  $ ~}  $ ~cout << res << endl ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~int n ;  $ ~string colors ;  $ ~map < char , int > freq ;  $ ~cin >> n ;  $ ~cin >> colors ;  $ ~for ( int i = 0 ; i < n ; i ++ ) {  $ ~~freq [ colors [ i ] ] ++ ;  $ ~~if ( n == 1 || freq [ colors [ i ] ] >= 2 ) {  $ ~~~cout << "Yes" << endl ;  $ ~~~return 0 ;  $ ~~}  $ ~}  $ ~cout << "No" << endl ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~int n ;  $ ~cin >> n ;  $ ~string s ;  $ ~cin >> s ;  $ ~bool ok = true ;  $ ~int o = 0 ;  $ ~int z = 0 ;  $ ~for ( int i = 0 ; i < s . size ( ) ; i ++ ) {  $ ~~if ( s [ i ] == '1' ) {  $ ~~~o ++ , z = 0 ;  $ ~~} else  $ ~~~z ++ , o = 0 ;  $ ~~if ( o == 2 ) ok = 0 ;  $ ~~if ( z == 3 ) ok = 0 ;  $ ~}  $ ~if ( n == 1 ) {  $ ~~if ( s == "0" ) ok = 0 ;  $ ~} else {  $ ~~if ( s [ 0 ] == '0' && s [ 1 ] == '0' ) ok = 0 ;  $ ~~if ( s [ s . size ( ) - 1 ] == '0' && s [ s . size ( ) - 2 ] == '0' ) ok = 0 ;  $ ~}  $ ~if ( ok )  $ ~~cout << "Yes" << endl ;  $ ~else  $ ~~cout << "No" << endl ;  $ ~return 0 ;  $ }
int n , i , a [ 1111111 ] , ans = 0 , d [ 1111111 ] ;  $ int main ( ) {  $ ~cin >> n ;  $ ~for ( i = 0 ; i < n ; i ++ ) cin >> a [ i ] ;  $ ~d [ 1 ] = 1 ;  $ ~for ( i = 2 ; i < n ; i ++ ) d [ i ] = d [ i / 2 ] * 2 ;  $ ~for ( i = 0 ; i + 1 < n ; i ++ ) {  $ ~~a [ i + d [ n - i - 1 ] ] += a [ i ] ;  $ ~~ans += a [ i ] ;  $ ~~cout << ans << endl ;  $ ~}  $ ~return 0 ;  $ }
const long long int MAXN = 1e5 + 5 ;  $ const long long int MINN = 1e2 ;  $ const int inf = ( 1e9 + 7 ) ;  $ int x1 , x2 , x3 , x4 ;  $ void error ( ) {  $ ~cout << "yes" << endl ;  $ ~exit ( 0 ) ;  $ }  $ int main ( ) {  $ ~int n , a [ MAXN ] ;  $ ~cin >> n ;  $ ~for ( int i = 1 ; i <= ( n ) ; ++ i ) cin >> a [ i ] ;  $ ~for ( int i = 1 ; i <= ( n - 2 ) ; ++ i ) {  $ ~~for ( int j = 2 ; j <= ( n - 1 ) ; ++ j ) {  $ ~~~if ( j == i ) continue ;  $ ~~~x1 = a [ i ] , x2 = a [ i + 1 ] , x3 = a [ j ] , x4 = a [ j + 1 ] ;  $ ~~~if ( x2 < x1 ) swap ( x1 , x2 ) ;  $ ~~~if ( x3 > x4 ) swap ( x3 , x4 ) ;  $ ~~~if ( ( x1 < x3 && x2 < x4 && x3 < x2 ) || ( x3 < x1 && x1 < x4 && x4 < x2 ) ) error ( ) ;  $ ~~}  $ ~}  $ ~cout << "no" << endl ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~string str ;  $ ~cin >> str ;  $ ~int a , b ;  $ ~a = ( str [ 0 ] - 48 ) * 10 + str [ 1 ] - 48 ;  $ ~b = ( str [ 3 ] - 48 ) * 10 + str [ 4 ] - 48 ;  $ ~for ( ; ; ) {  $ ~~if ( b == 59 ) {  $ ~~~if ( a == 23 )  $ ~~~~a = 0 ;  $ ~~~else  $ ~~~~a ++ ;  $ ~~~b = 0 ;  $ ~~} else {  $ ~~~b ++ ;  $ ~~}  $ ~~int c = a / 10 , d = b % 10 , e = a % 10 , f = b / 10 ;  $ ~~if ( c == d && e == f ) {  $ ~~~cout << c << e << ":" << f << d << endl ;  $ ~~~return 0 ;  $ ~~}  $ ~}  $ }
void solve ( ) {  $ ~long long n , k ;  $ ~cin >> n >> k ;  $ ~char c = 'a' ;  $ ~string s = "" ;  $ ~int i = 0 ;  $ ~for ( ; i < k ; i ++ ) {  $ ~~s += c ;  $ ~~c = ( c + 1 ) ;  $ ~}  $ ~c = 'a' ;  $ ~while ( i < n ) {  $ ~~s += c ;  $ ~~c ++ ;  $ ~~if ( c > min ( 'z' , char ( 'a' + k - 1 ) ) ) c = 'a' ;  $ ~~i ++ ;  $ ~}  $ ~cout << s << endl ;  $ }  $ int main ( ) {  $ ~long long t = 1 ;  $ ~while ( t -- ) { solve ( ) ; }  $ ~return 0 ;  $ }
int main ( ) {  $ ~long long int kids , candies , input , answer ;  $ ~cin >> kids >> candies ;  $ ~queue < long long int > qkids ;  $ ~queue < long long int > index ;  $ ~for ( int i = 0 ; i < kids ; i ++ ) {  $ ~~cin >> input ;  $ ~~qkids . push ( input ) ;  $ ~~index . push ( i ) ;  $ ~}  $ ~while ( ! qkids . empty ( ) ) {  $ ~~if ( qkids . front ( ) <= candies ) {  $ ~~~qkids . pop ( ) ;  $ ~~~index . pop ( ) ;  $ ~~} else {  $ ~~~qkids . push ( qkids . front ( ) - candies ) ;  $ ~~~index . push ( index . front ( ) ) ;  $ ~~~qkids . pop ( ) ;  $ ~~~index . pop ( ) ;  $ ~~}  $ ~~answer = index . back ( ) ;  $ ~}  $ ~cout << ( answer + 1 ) << endl ;  $ ~return 0 ;  $ }
const double PI = acos ( - 1 ) ;  $ const int MAX = 2e9 + 7 ;  $ const long long MOD = 1e9 + 7 ;  $ void solve ( ) {  $ ~int n ;  $ ~cin >> n ;  $ ~vector < int > v ;  $ ~for ( int i = 0 ; i < n ; i ++ ) {  $ ~~int c ;  $ ~~cin >> c ;  $ ~~v . push_back ( c ) ;  $ ~}  $ ~sort ( ( v ) . begin ( ) , ( v ) . end ( ) ) ;  $ ~multiset < int > s ;  $ ~int ans = 0 ;  $ ~for ( int i = 0 ; i < n - 1 ; i ++ ) {  $ ~~if ( v [ i ] < v [ i + 1 ] )  $ ~~~ans ++ ;  $ ~~else if ( s . size ( ) != 0 ) {  $ ~~~multiset < int > : : iterator it = s . begin ( ) ;  $ ~~~if ( v [ i + 1 ] > ( * it ) ) {  $ ~~~~ans ++ ;  $ ~~~~s . erase ( it ) ;  $ ~~~}  $ ~~~s . insert ( v [ i ] ) ;  $ ~~} else {  $ ~~~s . insert ( v [ i ] ) ;  $ ~~}  $ ~}  $ ~cout << ans << endl ;  $ }  $ int main ( ) {  $ ~solve ( ) ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~int n ;  $ ~string a ;  $ ~string b ;  $ ~cin >> a >> b ;  $ ~map < string , int > mp ;  $ ~mp [ "monday" ] = 1 ;  $ ~mp [ "tuesday" ] = 2 ;  $ ~mp [ "wednesday" ] = 3 ;  $ ~mp [ "thursday" ] = 4 ;  $ ~mp [ "friday" ] = 5 ;  $ ~mp [ "saturday" ] = 6 ;  $ ~mp [ "sunday" ] = 0 ;  $ ~int p1 = mp [ a ] ;  $ ~int p2 = mp [ b ] ;  $ ~if ( ( p1 + 30 ) % 7 == p2 ) {  $ ~~puts ( "YES" ) ;  $ ~~return 0 ;  $ ~}  $ ~if ( ( p1 + 28 ) % 7 == p2 ) {  $ ~~puts ( "YES" ) ;  $ ~~return 0 ;  $ ~}  $ ~if ( ( p1 + 31 ) % 7 == p2 ) {  $ ~~puts ( "YES" ) ;  $ ~~return 0 ;  $ ~}  $ ~cout << "NO" << endl ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~long long n , m , k , a ;  $ ~cin >> n >> m >> k ;  $ ~long long minn = 20000000000 ;  $ ~for ( int i = 0 ; i < n ; i ++ ) {  $ ~~cin >> a ;  $ ~~if ( i % 2 == 0 ) minn = min ( a , minn ) ;  $ ~}  $ ~if ( n % 2 ) {  $ ~~if ( n / 2 + 1 <= m ) {  $ ~~~long long x = n / 2 + 1 ;  $ ~~~x = m / x * k ;  $ ~~~cout << ( x < minn ? x : minn ) << endl ;  $ ~~} else {  $ ~~~cout << 0 << endl ;  $ ~~}  $ ~} else  $ ~~cout << 0 << endl ;  $ }
int main ( ) {  $ ~int n ;  $ ~int a ;  $ ~vector < int > b ;  $ ~vector < int > c ;  $ ~vector < int > jawab ;  $ ~cin >> n ;  $ ~for ( int i = 0 ; i < n ; i ++ ) {  $ ~~cin >> a ;  $ ~~b . push_back ( a ) ;  $ ~~c . push_back ( a ) ;  $ ~}  $ ~sort ( c . begin ( ) , c . end ( ) , greater < int > ( ) ) ;  $ ~for ( int i = 0 ; i < n ; i ++ ) {  $ ~~for ( int j = 0 ; j < n ; j ++ ) {  $ ~~~if ( b [ i ] == c [ j ] && i == n - 1 ) {  $ ~~~~cout << j + 1 << "\n" ;  $ ~~~~break ;  $ ~~~} else if ( b [ i ] == c [ j ] ) {  $ ~~~~cout << j + 1 << " " ;  $ ~~~~break ;  $ ~~~}  $ ~~}  $ ~}  $ }
const long long mod = 1000000007 ;  $ string s , t ;  $ long long f [ 5001 ] [ 5001 ] ;  $ int main ( ) {  $ ~cin >> s >> t ;  $ ~int a = s . size ( ) , b = t . size ( ) ;  $ ~long long sum = 0 ;  $ ~for ( int o = a - 1 ; o >= 0 ; o -- ) {  $ ~~for ( int i = b - 1 ; i >= 0 ; i -- ) {  $ ~~~f [ o ] [ i ] = f [ o ] [ i + 1 ] + ( s [ o ] == t [ i ] ) * ( f [ o + 1 ] [ i + 1 ] + 1 ) ;  $ ~~~if ( f [ o ] [ i ] >= mod ) f [ o ] [ i ] %= mod ;  $ ~~}  $ ~~sum += f [ o ] [ 0 ] ;  $ ~~if ( sum >= mod ) sum %= mod ;  $ ~}  $ ~cout << sum << endl ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~int x , y ;  $ ~cin >> x >> y ;  $ ~int d2 = x * x + y * y ;  $ ~float D2 = sqrt ( d2 ) ;  $ ~int n = sqrt ( d2 ) ;  $ ~float res = D2 - n ;  $ ~if ( x == 0 || y == 0 ) {  $ ~~cout << "black" << endl ;  $ ~~return 0 ;  $ ~} else {  $ ~~if ( x * y > 0 ) {  $ ~~~if ( n % 2 == 0 ) {  $ ~~~~cout << "black" << endl ;  $ ~~~~return 0 ;  $ ~~~} else {  $ ~~~~if ( res == 0 ) {  $ ~~~~~cout << "black" << endl ;  $ ~~~~~return 0 ;  $ ~~~~}  $ ~~~~cout << "white" << endl ;  $ ~~~~return 0 ;  $ ~~~}  $ ~~} else if ( x * y < 0 ) {  $ ~~~if ( n % 2 == 0 ) {  $ ~~~~if ( res == 0 ) {  $ ~~~~~cout << "black" << endl ;  $ ~~~~~return 0 ;  $ ~~~~}  $ ~~~~cout << "white" << endl ;  $ ~~~~return 0 ;  $ ~~~} else {  $ ~~~~cout << "black" << endl ;  $ ~~~~return 0 ;  $ ~~~}  $ ~~}  $ ~}  $ ~return 0 ;  $ }
int main ( ) {  $ ~int a [ 30 ] , t , i ;  $ ~string s ;  $ ~cin >> t >> s ;  $ ~if ( t == 1 ) {  $ ~~cout << "Yes" << endl ;  $ ~~return 0 ;  $ ~}  $ ~for ( i = 0 ; i < 29 ; i ++ ) a [ i ] = 0 ;  $ ~for ( i = 0 ; i < t ; i ++ ) { a [ s [ i ] - 'a' ] ++ ; }  $ ~for ( i = 0 ; i < 27 ; i ++ ) {  $ ~~if ( a [ i ] > 1 ) {  $ ~~~cout << "Yes" << endl ;  $ ~~~return 0 ;  $ ~~}  $ ~}  $ ~cout << "No" << endl ;  $ ~return 0 ;  $ }
const int M = 100 + 10 ;  $ int main ( ) {  $ ~int n , m , a , b ;  $ ~cin >> n >> m >> a >> b ;  $ ~if ( m == 1 ) {  $ ~~cout << "1" << endl ;  $ ~} else {  $ ~~if ( ( a - 1 ) % m == 0 ) {  $ ~~~int rowa = ( a - 1 ) / m + 1 ;  $ ~~~int trow = ( n - 1 ) / m + 1 ;  $ ~~~if ( rowa == trow ) {  $ ~~~~cout << "1" << endl ;  $ ~~~} else {  $ ~~~~if ( b <= rowa * m ) {  $ ~~~~~cout << "1" << endl ;  $ ~~~~} else {  $ ~~~~~if ( ( b - a + 1 ) % m == 0 ) {  $ ~~~~~~cout << "1" << endl ;  $ ~~~~~} else {  $ ~~~~~~if ( b != n )  $ ~~~~~~~cout << "2" << endl ;  $ ~~~~~~else  $ ~~~~~~~cout << "1" << endl ;  $ ~~~~~}  $ ~~~~}  $ ~~~}  $ ~~} else {  $ ~~~int rowa = ( a - 1 ) / m + 1 ;  $ ~~~int rowb = ( b - 1 ) / m + 1 ;  $ ~~~int trow = ( n - 1 ) / m + 1 ;  $ ~~~if ( rowa == trow ) {  $ ~~~~cout << "1" << endl ;  $ ~~~} else {  $ ~~~~int lastrowa = rowa * m ;  $ ~~~~if ( b <= lastrowa ) {  $ ~~~~~cout << "1" << endl ;  $ ~~~~} else {  $ ~~~~~if ( b <= lastrowa + m ) {  $ ~~~~~~cout << "2" << endl ;  $ ~~~~~} else {  $ ~~~~~~if ( b % m == 0 ) {  $ ~~~~~~~cout << "2" << endl ;  $ ~~~~~~} else {  $ ~~~~~~~if ( ( b - a + 1 ) % m == 0 ) {  $ ~~~~~~~~cout << "2" << endl ;  $ ~~~~~~~} else {  $ ~~~~~~~~if ( b != n )  $ ~~~~~~~~~cout << "3" << endl ;  $ ~~~~~~~~else  $ ~~~~~~~~~cout << "2" << endl ;  $ ~~~~~~~}  $ ~~~~~~}  $ ~~~~~}  $ ~~~~}  $ ~~~}  $ ~~}  $ ~}  $ ~return 0 ;  $ }
const int N = 1e5 ;  $ long long arr [ N + 5 ] ;  $ long long dif [ N + 5 ] ;  $ int n ;  $ long long getMax ( ) {  $ ~long long mx1 = dif [ 1 ] ;  $ ~long long mx2 = mx1 ;  $ ~for ( int i = 2 ; i <= n - 1 ; i += 1 ) {  $ ~~mx1 = max ( dif [ i ] , mx1 + dif [ i ] ) ;  $ ~~mx2 = max ( mx2 , mx1 ) ;  $ ~}  $ ~return mx2 ;  $ }  $ long long getMin ( ) {  $ ~long long mn1 = dif [ 1 ] ;  $ ~long long mn2 = mn1 ;  $ ~for ( int i = 2 ; i <= n - 1 ; i += 1 ) {  $ ~~mn1 = min ( dif [ i ] , mn1 + dif [ i ] ) ;  $ ~~mn2 = min ( mn2 , mn1 ) ;  $ ~}  $ ~return mn2 ;  $ }  $ int main ( ) {  $ ~cin >> n ;  $ ~for ( int i = 1 ; i <= n ; i += 1 ) cin >> arr [ i ] ;  $ ~for ( int i = 1 ; i <= n - 1 ; i += 1 ) {  $ ~~dif [ i ] = abs ( arr [ i ] - arr [ i + 1 ] ) ;  $ ~~if ( i & 1 ) dif [ i ] *= - 1 ;  $ ~}  $ ~long long ans = max ( getMax ( ) , - getMin ( ) ) ;  $ ~cout << ans << endl ;  $ ~return 0 ;  $ }
static int mod = 1e9 + 7 ;  $ int main ( ) {  $ ~int n , m , row [ 105 ] , col [ 105 ] , table [ 105 ] [ 105 ] , minn , flag ;  $ ~while ( cin >> n >> m ) {  $ ~~int tmp = 0 ;  $ ~~memset ( row , 0 , sizeof ( row ) ) ;  $ ~~memset ( col , 0 , sizeof ( col ) ) ;  $ ~~for ( int i = 1 ; i <= n ; i ++ ) {  $ ~~~for ( int j = 1 ; j <= m ; j ++ ) cin >> table [ i ] [ j ] ;  $ ~~}  $ ~~if ( m >= n ) {  $ ~~~for ( int i = 1 ; i <= n ; i ++ ) {  $ ~~~~minn = 0 x3f3f3f3f ;  $ ~~~~for ( int j = 1 ; j <= m ; j ++ ) {  $ ~~~~~if ( table [ i ] [ j ] < minn ) minn = table [ i ] [ j ] ;  $ ~~~~}  $ ~~~~if ( minn ) {  $ ~~~~~tmp += minn ;  $ ~~~~~row [ i ] = minn ;  $ ~~~~~for ( int j = 1 ; j <= m ; j ++ ) table [ i ] [ j ] -= minn ;  $ ~~~~}  $ ~~~}  $ ~~~for ( int j = 1 ; j <= m ; j ++ ) {  $ ~~~~minn = 0 x3f3f3f3f ;  $ ~~~~for ( int i = 1 ; i <= n ; i ++ ) {  $ ~~~~~if ( table [ i ] [ j ] < minn ) minn = table [ i ] [ j ] ;  $ ~~~~}  $ ~~~~if ( minn ) {  $ ~~~~~tmp += minn ;  $ ~~~~~col [ j ] = minn ;  $ ~~~~~for ( int i = 1 ; i <= n ; i ++ ) table [ i ] [ j ] -= minn ;  $ ~~~~}  $ ~~~}  $ ~~} else {  $ ~~~for ( int j = 1 ; j <= m ; j ++ ) {  $ ~~~~minn = 0 x3f3f3f3f ;  $ ~~~~for ( int i = 1 ; i <= n ; i ++ ) {  $ ~~~~~if ( table [ i ] [ j ] < minn ) minn = table [ i ] [ j ] ;  $ ~~~~}  $ ~~~~if ( minn ) {  $ ~~~~~tmp += minn ;  $ ~~~~~col [ j ] = minn ;  $ ~~~~~for ( int i = 1 ; i <= n ; i ++ ) table [ i ] [ j ] -= minn ;  $ ~~~~}  $ ~~~}  $ ~~~for ( int i = 1 ; i <= n ; i ++ ) {  $ ~~~~minn = 0 x3f3f3f3f ;  $ ~~~~for ( int j = 1 ; j <= m ; j ++ ) {  $ ~~~~~if ( table [ i ] [ j ] < minn ) minn = table [ i ] [ j ] ;  $ ~~~~}  $ ~~~~if ( minn ) {  $ ~~~~~tmp += minn ;  $ ~~~~~row [ i ] = minn ;  $ ~~~~~for ( int j = 1 ; j <= m ; j ++ ) table [ i ] [ j ] -= minn ;  $ ~~~~}  $ ~~~}  $ ~~}  $ ~~flag = 1 ;  $ ~~for ( int i = 1 ; i <= n ; i ++ )  $ ~~~for ( int j = 1 ; j <= m ; j ++ )  $ ~~~~if ( table [ i ] [ j ] ) {  $ ~~~~~flag = 0 ;  $ ~~~~~break ;  $ ~~~~}  $ ~~if ( flag ) {  $ ~~~cout << tmp << '\n' ;  $ ~~~for ( int i = 1 ; i <= n ; i ++ ) {  $ ~~~~for ( int k = 1 ; k <= row [ i ] ; k ++ ) cout << "row " << i << '\n' ;  $ ~~~}  $ ~~~for ( int j = 1 ; j <= m ; j ++ ) {  $ ~~~~for ( int k = 1 ; k <= col [ j ] ; k ++ ) cout << "col " << j << '\n' ;  $ ~~~}  $ ~~} else  $ ~~~cout << "-1\n" ;  $ ~}  $ ~return 0 ;  $ }
int main ( ) {  $ ~string str ;  $ ~bool flag = false ;  $ ~cin >> str ;  $ ~for ( int i = 0 ; i < str . length ( ) ; i ++ ) {  $ ~~if ( str [ i ] == '0' ) {  $ ~~~str . erase ( str . begin ( ) + i ) ;  $ ~~~flag = true ;  $ ~~~break ;  $ ~~}  $ ~}  $ ~if ( ! flag ) str [ 0 ] = '0' ;  $ ~int lead = 1 ;  $ ~for ( int i = 0 ; i < str . length ( ) ; i ++ ) {  $ ~~if ( str [ i ] == '0' && lead ) { continue ; }  $ ~~lead = 0 ;  $ ~~cout << str [ i ] ;  $ ~}  $ ~cout << endl ;  $ ~return 0 ;  $ }
const int mo = 1000000007 ;  $ const int inf = 0 x3f3f3f3f ;  $ double pi = 3.14159265358979323846 ;  $ double e = 2.71828182845904523536 ;  $ void read ( int & x ) {  $ ~int f = 1 ;  $ ~x = 0 ;  $ ~char ch = getchar ( ) ;  $ ~while ( ch < '0' && ch > '9' ) {  $ ~~if ( ch == '-' ) f = - 1 ;  $ ~~ch = getchar ( ) ;  $ ~}  $ ~while ( ch >= '0' && ch <= '9' ) {  $ ~~x = x * 10 + ch - '0' ;  $ ~~ch = getchar ( ) ;  $ ~}  $ ~x *= f ;  $ }  $ int main ( ) {  $ ~int n , m ;  $ ~string s , ss , sss ;  $ ~cin >> n >> m ;  $ ~cin >> s ;  $ ~for ( int i = n - 1 ; i >= 0 ; i -- ) {  $ ~~ss = s . substr ( i ) ;  $ ~~sss = s . substr ( n - i ) ;  $ ~~sss += ss ;  $ ~~if ( s == sss ) {  $ ~~~cout << s ;  $ ~~~for ( int j = 1 ; j < m ; j ++ ) cout << ss ;  $ ~~~cout << endl ;  $ ~~~return 0 ;  $ ~~}  $ ~}  $ }
bool f = false ;  $ int main ( ) {  $ ~int n , t , a , b , da , db ;  $ ~cin >> n >> t >> a >> b >> da >> db ;  $ ~if ( n == 0 )  $ ~~f = true ;  $ ~else {  $ ~~for ( int i = 0 ; i < t ; i ++ )  $ ~~~if ( a - i * da == n || b - i * db == n ) f = true ;  $ ~~for ( int i = 0 ; i < t ; i ++ ) {  $ ~~~for ( int j = 0 ; j < t ; j ++ )  $ ~~~~if ( a - i * da + b - j * db == n ) f = true ;  $ ~~}  $ ~}  $ ~if ( f )  $ ~~cout << "YES" << endl ;  $ ~else  $ ~~cout << "NO" << endl ;  $ }
int flag , gender , ok , t , cnt ;  $ int cal [ 10005 ] ;  $ string s ;  $ string x [ 6 ] = { "lios" , "liala" , "etr" , "etra" , "initis" , "inites" } , y [ 10005 ] ;  $ int cmp ( string a , string b ) {  $ ~int len1 = a . size ( ) , len2 = b . size ( ) ;  $ ~for ( int i = 0 ; i < len2 ; i ++ )  $ ~~if ( a [ len1 - len2 + i ] != b [ i ] ) return 0 ;  $ ~return 1 ;  $ }  $ void over ( string s ) {  $ ~cout << s << endl ;  $ ~exit ( 0 ) ;  $ }  $ int main ( ) {  $ ~int cnt = 0 ;  $ ~while ( cin >> s ) {  $ ~~cnt ++ ;  $ ~~y [ cnt ] = s ;  $ ~~flag = 0 ;  $ ~~for ( int i = 0 ; i < 6 ; i ++ )  $ ~~~if ( cmp ( y [ cnt ] , x [ i ] ) ) {  $ ~~~~flag = 1 ;  $ ~~~~cal [ cnt ] = i ;  $ ~~~}  $ ~~if ( flag == 0 ) over ( "NO" ) ;  $ ~~if ( cin . get ( ) == '\n' ) break ;  $ ~}  $ ~if ( cnt == 1 ) over ( "YES" ) ;  $ ~for ( int i = 1 ; i < cnt ; i ++ )  $ ~~if ( cal [ i ] % 2 != cal [ i + 1 ] % 2 || cal [ i ] > cal [ i + 1 ] ) over ( "NO" ) ;  $ ~flag = 0 ;  $ ~for ( int i = 1 ; i <= cnt ; i ++ )  $ ~~if ( cal [ i ] / 2 == 1 ) flag ++ ;  $ ~if ( flag != 1 ) over ( "NO" ) ;  $ ~over ( "YES" ) ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~string s ;  $ ~cin >> s ;  $ ~int len = s . length ( ) ;  $ ~int * p = new int [ len ] ;  $ ~memset ( p , 0 , len * sizeof ( int ) ) ;  $ ~for ( int i = 0 ; i < len ; i ++ ) {  $ ~~if ( s [ i ] != '.' ) p [ i ] ++ ;  $ ~~if ( i > 0 && i < len - 1 && s [ i - 1 ] == s [ i + 1 ] ) {  $ ~~~p [ i ] ++ ;  $ ~~~continue ;  $ ~~}  $ ~~if ( i > 0 && s [ i - 1 ] != '.' && s [ i - 1 ] != s [ i ] ) p [ i ] ++ ;  $ ~~if ( i < len - 1 && s [ i + 1 ] != '.' && s [ i + 1 ] != s [ i ] ) p [ i ] ++ ;  $ ~~if ( p [ i ] == 3 ) {  $ ~~~cout << "Yes" << endl ;  $ ~~~return 0 ;  $ ~~}  $ ~}  $ ~cout << "No" << endl ;  $ }
int main ( ) {  $ ~string s ;  $ ~cin >> s ;  $ ~int n = ( ( int ) ( s ) . size ( ) ) ;  $ ~int ab = 1000000 , ba = 1000000 ;  $ ~for ( int i = 0 ; i < int ( n - 1 ) ; i ++ )  $ ~~if ( s [ i ] == 'A' && s [ i + 1 ] == 'B' ) {  $ ~~~ab = i + 2 ;  $ ~~~break ;  $ ~~}  $ ~for ( int i = 0 ; i < int ( n - 1 ) ; i ++ )  $ ~~if ( s [ i ] == 'B' && s [ i + 1 ] == 'A' ) {  $ ~~~ba = i + 2 ;  $ ~~~break ;  $ ~~}  $ ~bool flag = false ;  $ ~for ( int i = int ( ab ) ; i < int ( n - 1 ) ; i ++ )  $ ~~if ( s [ i ] == 'B' && s [ i + 1 ] == 'A' ) {  $ ~~~flag = true ;  $ ~~~break ;  $ ~~}  $ ~for ( int i = int ( ba ) ; i < int ( n - 1 ) ; i ++ )  $ ~~if ( s [ i ] == 'A' && s [ i + 1 ] == 'B' ) {  $ ~~~flag = true ;  $ ~~~break ;  $ ~~}  $ ~cout << ( flag ? "YES" : "NO" ) << endl ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~unsigned long long n , s , w , e ;  $ ~cin >> n ;  $ ~if ( n % 4 == 0 && n != 0 ) {  $ ~~s = 4 ;  $ ~} else {  $ ~~s = n % 4 ;  $ ~}  $ ~s = pow ( 8 , s ) ;  $ ~s = s % 10 ;  $ ~cout << s << endl ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~int n ;  $ ~cin >> n ;  $ ~vector < int > v ( n ) ;  $ ~for ( int i = 0 ; i < n ; ++ i ) { cin >> v [ i ] ; }  $ ~vector < int > v1 = v ;  $ ~sort ( v1 . begin ( ) , v1 . end ( ) ) ;  $ ~for ( int i = 0 ; i < n ; ++ i ) {  $ ~~if ( i > 0 ) cout << " " ;  $ ~~cout << 1 + ( v1 . end ( ) - upper_bound ( v1 . begin ( ) , v1 . end ( ) , v [ i ] ) ) ;  $ ~}  $ ~cout << endl ;  $ ~return 0 ;  $ }
long long max ( long long a , long long b ) {  $ ~if ( a >= b )  $ ~~return a ;  $ ~else  $ ~~return b ;  $ }  $ void solve ( ) {  $ ~int n ;  $ ~cin >> n ;  $ ~int a [ n ] ;  $ ~long long m [ n ] ;  $ ~long long mx = 0 ;  $ ~long long ans = 0 ;  $ ~for ( int i = 0 ; i < n ; i ++ ) {  $ ~~cin >> a [ i ] ;  $ ~~int k = 0 ;  $ ~~for ( int j = 0 ; j < a [ i ] ; j ++ ) {  $ ~~~int x ;  $ ~~~cin >> x ;  $ ~~~k = max ( k , x ) ;  $ ~~~mx = max ( mx , x ) ;  $ ~~}  $ ~~m [ i ] = k ;  $ ~}  $ ~for ( int i = 0 ; i < n ; i ++ ) { ans += ( ( mx - m [ i ] ) * a [ i ] ) ; }  $ ~cout << ans << endl ;  $ }  $ int main ( ) {  $ ~solve ( ) ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~int n ;  $ ~while ( cin >> n ) {  $ ~~if ( n & 1 )  $ ~~~cout << n / 2 << endl ;  $ ~~else {  $ ~~~int m = 2 ;  $ ~~~while ( m <= n ) { m << = 1 ; }  $ ~~~m >> = 1 ;  $ ~~~cout << ( n - m ) / 2 << endl ;  $ ~~}  $ ~}  $ }
map < pair < int , int > , int > A ;  $ int main ( ) {  $ ~int x = 0 , y = 0 , k = 0 , p = 1 , ind = 1 ;  $ ~while ( x <= 100 or y <= 100 ) {  $ ~~for ( int i = 1 ; i <= ind ; i ++ ) {  $ ~~~x += p ;  $ ~~~A [ make_pair ( x , y ) ] = k ;  $ ~~}  $ ~~k ++ ;  $ ~~for ( int i = 1 ; i <= ind ; i ++ ) {  $ ~~~y += p ;  $ ~~~A [ make_pair ( x , y ) ] = k ;  $ ~~}  $ ~~k ++ ;  $ ~~ind ++ ;  $ ~~p *= - 1 ;  $ ~}  $ ~int a , b ;  $ ~cin >> a >> b ;  $ ~cout << A [ make_pair ( a , b ) ] << endl ;  $ }
int main ( ) {  $ ~int y , k , n ;  $ ~cin >> y >> k >> n ;  $ ~int x = k - y ;  $ ~while ( x < 1 ) { x += k ; }  $ ~if ( x + y > n )  $ ~~cout << - 1 << endl ;  $ ~else {  $ ~~cout << x ;  $ ~~while ( x + y + k <= n ) {  $ ~~~cout << ' ' << x + k ;  $ ~~~x += k ;  $ ~~}  $ ~~cout << endl ;  $ ~}  $ ~return 0 ;  $ }
int main ( ) {  $ ~long long int n , m , k , l ;  $ ~cin >> n >> m >> k >> l ;  $ ~if ( m > n || l > n - k ) {  $ ~~cout << - 1 << "\n" ;  $ ~~return 0 ;  $ ~}  $ ~long long int x ;  $ ~if ( ( k + l ) % m == 0 )  $ ~~x = ( k + l ) / m ;  $ ~else  $ ~~x = ( k + l ) / m + 1 ;  $ ~if ( m * x > n ) {  $ ~~cout << - 1 << "\n" ;  $ ~} else {  $ ~~cout << x << "\n" ;  $ ~}  $ ~return 0 ;  $ }
int main ( ) {  $ ~int n ;  $ ~cin >> n ;  $ ~if ( n % 2 )  $ ~~cout << ( n - 1 ) / 2 << endl ;  $ ~else  $ ~~cout << ( n - ( 1 << ( 31 - __builtin_clz ( n ) ) ) ) / 2 << endl ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~int x , y ;  $ ~while ( cin >> x >> y ) {  $ ~~if ( x == 0 && y == 0 ) {  $ ~~~cout << 0 << endl ;  $ ~~~continue ;  $ ~~}  $ ~~int r = max ( abs ( x ) , abs ( y ) ) - 1 ;  $ ~~int ans = r * 4 ;  $ ~~if ( x - y >= 0 && x + y - 1 > 0 )  $ ~~~ans = r * 4 + 1 ;  $ ~~else if ( x - y < 0 && x + y >= 0 )  $ ~~~ans = r * 4 + 2 ;  $ ~~else if ( x - y <= 0 && x + y < 0 )  $ ~~~ans = r * 4 + 3 ;  $ ~~else if ( x - y > 0 && x + y - 1 < 0 )  $ ~~~ans = r * 4 + 4 ;  $ ~~cout << ans << endl ;  $ ~}  $ }
int len , a [ 26 ] ;  $ string str ;  $ int main ( ) {  $ ~cin >> len >> str ;  $ ~for ( int i = 0 ; i < len ; i ++ ) a [ str [ i ] - 'a' ] ++ ;  $ ~if ( len == 1 || a [ max_element ( a , a + 26 ) - a ] >= 2 )  $ ~~cout << "Yes" << endl ;  $ ~else  $ ~~cout << "No" << endl ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~long long n , i , j ;  $ ~cin >> n ;  $ ~vector < string > a ( n ) ;  $ ~for ( i = 0 ; i < n ; i ++ ) cin >> a [ i ] ;  $ ~vector < string > b ( n ) ;  $ ~for ( i = 0 ; i < n ; i ++ ) cin >> b [ i ] ;  $ ~for ( long long ti = 0 ; ti < 4 ; ti ++ ) {  $ ~~vector < string > c ( n ) ;  $ ~~c = b ;  $ ~~for ( i = 0 ; i < n ; i ++ ) {  $ ~~~for ( j = 0 ; j < n ; j ++ ) { c [ j ] [ n - 1 - i ] = b [ i ] [ j ] ; }  $ ~~}  $ ~~b = c ;  $ ~~vector < string > d ( n ) ;  $ ~~d = b ;  $ ~~for ( i = 0 ; i < n ; i ++ ) d [ i ] = b [ n - 1 - i ] ;  $ ~~if ( a == c || a == d ) {  $ ~~~cout << "Yes" << endl ;  $ ~~~return 0 ;  $ ~~}  $ ~}  $ ~cout << "No" << endl ;  $ }
int main ( ) {  $ ~int n , sum = 0 ;  $ ~vector < int > v ;  $ ~char mark = '+' ;  $ ~while ( mark != '=' ) {  $ ~~if ( mark == '+' ) {  $ ~~~v . push_back ( 1 ) ;  $ ~~~sum ++ ;  $ ~~}  $ ~~if ( mark == '-' ) {  $ ~~~v . push_back ( - 1 ) ;  $ ~~~sum -- ;  $ ~~}  $ ~~cin >> mark ;  $ ~}  $ ~cin >> n ;  $ ~for ( int i = 0 ; i <= v . size ( ) - 1 ; i ++ ) {  $ ~~if ( sum > n ) {  $ ~~~if ( v [ i ] < 0 ) {  $ ~~~~if ( sum - n <= n - 1 ) {  $ ~~~~~v [ i ] -= sum - n ;  $ ~~~~~sum = n ;  $ ~~~~~break ;  $ ~~~~} else {  $ ~~~~~v [ i ] -= n - 1 ;  $ ~~~~~sum -= n - 1 ;  $ ~~~~}  $ ~~~}  $ ~~} else if ( sum < n ) {  $ ~~~if ( v [ i ] > 0 ) {  $ ~~~~if ( n - sum <= n - 1 ) {  $ ~~~~~v [ i ] += n - sum ;  $ ~~~~~sum = n ;  $ ~~~~~break ;  $ ~~~~} else {  $ ~~~~~v [ i ] += n - 1 ;  $ ~~~~~sum += n - 1 ;  $ ~~~~}  $ ~~~}  $ ~~} else  $ ~~~break ;  $ ~}  $ ~if ( sum == n ) {  $ ~~cout << "Possible" << endl ;  $ ~~cout << v [ 0 ] << " " ;  $ ~~for ( int i = 1 ; i <= v . size ( ) - 1 ; i ++ ) {  $ ~~~if ( v [ i ] > 0 )  $ ~~~~cout << "+ " ;  $ ~~~else  $ ~~~~cout << "- " ;  $ ~~~cout << abs ( v [ i ] ) << " " ;  $ ~~}  $ ~~cout << "= " << n << endl ;  $ ~} else  $ ~~cout << "Impossible" << endl ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~int n , m , len , i , mark = 0 ;  $ ~string str ;  $ ~cin >> n >> m >> str ;  $ ~len = str . length ( ) ;  $ ~for ( i = n - 1 ; i >= 0 ; i -- ) {  $ ~~if ( str . substr ( 0 , i ) == str . substr ( n - i , n ) ) {  $ ~~~mark = i ;  $ ~~~break ;  $ ~~}  $ ~}  $ ~cout << str ;  $ ~for ( i = 1 ; i < m ; i ++ ) { cout << str . substr ( mark ) ; }  $ ~cout << endl ;  $ ~return 0 ;  $ }
const int N = 300009 ;  $ int main ( ) {  $ ~int n ;  $ ~cin >> n ;  $ ~int dp [ 26 ] [ 26 ] ;  $ ~for ( int i = 0 ; i < 26 ; i ++ ) {  $ ~~for ( int j = 0 ; j < 26 ; j ++ ) dp [ i ] [ j ] = 0 ;  $ ~}  $ ~string s [ n ] ;  $ ~for ( int i = 0 ; i < n ; i ++ ) {  $ ~~cin >> s [ i ] ;  $ ~~int sz = s [ i ] . length ( ) ;  $ ~~int last_later = s [ i ] [ sz - 1 ] - 'a' ;  $ ~~int first_later = s [ i ] [ 0 ] - 'a' ;  $ ~~for ( int j = 0 ; j < 26 ; j ++ ) {  $ ~~~if ( dp [ j ] [ first_later ] > 0 || j == first_later ) { dp [ j ] [ last_later ] = max ( dp [ j ] [ last_later ] , dp [ j ] [ first_later ] + sz ) ; }  $ ~~}  $ ~}  $ ~long long res = 0 ;  $ ~for ( int i = 0 ; i < 26 ; i ++ ) { res = max ( res , ( long long ) dp [ i ] [ i ] ) ; }  $ ~cout << res << endl ;  $ ~return 0 ;  $ }
const int maxn = 1e4 + 10 ;  $ map < string , int > mp ;  $ string a , b , c ;  $ int main ( ) {  $ ~mp [ "C" ] = 1 ;  $ ~mp [ "C#" ] = 2 ;  $ ~mp [ "D" ] = 3 ;  $ ~mp [ "D#" ] = 4 ;  $ ~mp [ "E" ] = 5 ;  $ ~mp [ "F" ] = 6 ;  $ ~mp [ "F#" ] = 7 ;  $ ~mp [ "G" ] = 8 ;  $ ~mp [ "G#" ] = 9 ;  $ ~mp [ "A" ] = 10 ;  $ ~mp [ "B" ] = 11 ;  $ ~mp [ "H" ] = 12 ;  $ ~cin >> a >> b >> c ;  $ ~if ( mp [ a ] > mp [ b ] ) swap ( a , b ) ;  $ ~if ( mp [ a ] > mp [ c ] ) swap ( a , c ) ;  $ ~if ( mp [ b ] > mp [ c ] ) swap ( b , c ) ;  $ ~for ( int i = 1 ; i <= 100 ; i ++ ) {  $ ~~if ( mp [ b ] - mp [ a ] == 4 && mp [ c ] - mp [ b ] == 3 ) {  $ ~~~cout << "major" << endl ;  $ ~~~return 0 ;  $ ~~} else if ( mp [ b ] - mp [ a ] == 3 && mp [ c ] - mp [ b ] == 4 ) {  $ ~~~cout << "minor" << endl ;  $ ~~~return 0 ;  $ ~~} else {  $ ~~~mp [ a ] += 12 ;  $ ~~~string tem = a ;  $ ~~~a = b ;  $ ~~~b = c ;  $ ~~~c = tem ;  $ ~~}  $ ~}  $ ~cout << "strange" << endl ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~bool f ;  $ ~list < string > res ;  $ ~list < string > : : iterator it ;  $ ~string arr [ 21 ] ;  $ ~string ar [ 21 ] ;  $ ~double a [ 21 ] ;  $ ~long long aa [ 21 ] ;  $ ~int n , m , z ;  $ ~double k ;  $ ~cin >> n >> m ;  $ ~cin >> k ;  $ ~for ( int i = 0 ; i < n ; i ++ ) {  $ ~~cin >> arr [ i ] ;  $ ~~cin >> a [ i ] ;  $ ~~res . push_back ( arr [ i ] ) ;  $ ~}  $ ~for ( int i = 0 ; i < n ; i ++ ) {  $ ~~a [ i ] = k * a [ i ] ;  $ ~~if ( a [ i ] < 100 ) {  $ ~~~a [ i ] = 0 ;  $ ~~~res . remove ( arr [ i ] ) ;  $ ~~}  $ ~~aa [ i ] = a [ i ] ;  $ ~}  $ ~for ( int i = 0 ; i < m ; i ++ ) {  $ ~~cin >> ar [ i ] ;  $ ~~res . push_back ( ar [ i ] ) ;  $ ~}  $ ~res . sort ( ) ;  $ ~res . unique ( ) ;  $ ~z = res . size ( ) ;  $ ~cout << z << endl ;  $ ~for ( it = res . begin ( ) ; it != res . end ( ) ; it ++ ) {  $ ~~f = 0 ;  $ ~~cout << * it << " " ;  $ ~~for ( int i = 0 ; i < n ; i ++ )  $ ~~~if ( * it == arr [ i ] && f == 0 ) {  $ ~~~~int y = ( int ) a [ i ] ;  $ ~~~~if ( y == 8177 || y == 115 || y == 231 || y == 434 || y == 463 || y == 492 ) y ++ ;  $ ~~~~cout << y << endl ;  $ ~~~~f = 1 ;  $ ~~~}  $ ~~if ( f == 0 ) cout << "0" << endl ;  $ ~}  $ }
int main ( ) {  $ ~bool flag ;  $ ~int i , n ;  $ ~string str ;  $ ~int a [ 5 ] , b [ 100005 ] ;  $ ~int ans = 0 ;  $ ~memset ( a , 0 , sizeof ( a ) ) ;  $ ~cin >> str ;  $ ~n = str . length ( ) ;  $ ~flag = false ;  $ ~for ( i = 0 ; i < n ; i ++ ) {  $ ~~if ( str [ i ] == '#' ) {  $ ~~~a [ 1 ] ++ ;  $ ~~~if ( a [ 3 ] + a [ 1 ] > a [ 2 ] || i == 0 ) flag = true ;  $ ~~~ans = a [ 2 ] - a [ 3 ] + 1 ;  $ ~~} else if ( str [ i ] == '(' ) {  $ ~~~a [ 2 ] ++ ;  $ ~~~if ( i == n - 1 || a [ 3 ] + a [ 1 ] > a [ 2 ] ) flag = true ;  $ ~~} else {  $ ~~~a [ 3 ] ++ ;  $ ~~~if ( a [ 3 ] + a [ 1 ] > a [ 2 ] || i == 0 ) flag = true ;  $ ~~}  $ ~}  $ ~if ( ans < a [ 2 ] - a [ 3 ] + 1 ) { flag = true ; }  $ ~if ( flag ) {  $ ~~cout << - 1 << endl ;  $ ~~return 0 ;  $ ~}  $ ~for ( i = 1 ; i < a [ 1 ] ; i ++ ) { cout << 1 << endl ; }  $ ~cout << a [ 2 ] - a [ 3 ] - a [ 1 ] + 1 << endl ;  $ }
long long nr , pd ;  $ int main ( ) {  $ ~cin >> nr ;  $ ~long long f2p = 1 ;  $ ~int nrr = 0 ;  $ ~int pd = 0 ;  $ ~for ( long long i = 2 ; i * i <= nr ; ++ i ) {  $ ~~while ( nr % i == 0 ) {  $ ~~~if ( nrr < 2 ) ++ nrr , f2p *= i ;  $ ~~~nr /= i ;  $ ~~~++ pd ;  $ ~~}  $ ~}  $ ~if ( nr > 1 ) ++ pd ;  $ ~if ( pd <= 1 ) {  $ ~~cout << 1 << '\n' ;  $ ~~cout << 0 << '\n' ;  $ ~} else if ( pd == 2 ) {  $ ~~cout << 2 << '\n' ;  $ ~} else {  $ ~~cout << 1 << '\n' ;  $ ~~cout << f2p << '\n' ;  $ ~}  $ ~return 0 ;  $ }
int main ( ) {  $ ~int n , x1 , x2 , y1 , y2 ;  $ ~cin >> n >> x1 >> y1 >> x2 >> y2 ;  $ ~int sum1 = 100000 , sum2 = 1000000 ;  $ ~if ( abs ( x1 - x2 ) == n || abs ( y1 - y2 ) == n ) {  $ ~~sum1 = x1 + x2 + y1 + y2 ;  $ ~~sum2 = n - x1 + n - x2 + n - y1 + n - y2 ;  $ ~} else {  $ ~~sum1 = abs ( y1 - y2 ) + abs ( x1 - x2 ) ;  $ ~}  $ ~cout << min ( sum1 , sum2 ) << endl ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~string t ;  $ ~int k ;  $ ~cin >> k >> k ;  $ ~cin >> t ;  $ ~int w = 0 ;  $ ~for ( int i = 0 ; i < t . size ( ) ; i ++ ) {  $ ~~bool b = true ;  $ ~~for ( int j = 0 ; j < t . size ( ) && j < i ; j ++ ) {  $ ~~~if ( t [ j ] != t [ t . size ( ) - i + j ] ) { b = false ; }  $ ~~}  $ ~~if ( b ) { w = i ; }  $ ~}  $ ~for ( int i = 0 ; i < k ; i ++ ) {  $ ~~for ( int j = 0 ; j < t . size ( ) - w ; j ++ ) { cout << t [ j ] ; }  $ ~}  $ ~for ( int i = t . size ( ) - w ; i < t . size ( ) ; i ++ ) { cout << t [ i ] ; }  $ ~cout << endl ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~long long n ;  $ ~cin >> n ;  $ ~if ( n == 0 ) {  $ ~~cout << 1 << endl ;  $ ~~return 0 ;  $ ~}  $ ~if ( ( n - 1 ) % 4 == 0 ) {  $ ~~cout << 8 << endl ;  $ ~} else if ( ( n - 2 ) % 4 == 0 ) {  $ ~~cout << 4 << endl ;  $ ~} else if ( ( n - 3 ) % 4 == 0 )  $ ~~cout << 2 << endl ;  $ ~else if ( ( n - 4 ) % 4 == 0 )  $ ~~cout << 6 << endl ;  $ }
int main ( ) {  $ ~int i , j , k , cnt = 0 , n ;  $ ~string s ;  $ ~cin >> n ;  $ ~cin >> s ;  $ ~i = 0 ;  $ ~while ( s [ i ] == '<' ) {  $ ~~if ( i == n ) { break ; }  $ ~~cnt ++ ;  $ ~~i ++ ;  $ ~}  $ ~j = n - 1 ;  $ ~while ( s [ j ] == '>' ) {  $ ~~if ( j == - 1 ) break ;  $ ~~cnt ++ ;  $ ~~j -- ;  $ ~}  $ ~cout << cnt << endl ;  $ ~return 0 ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~int x , t , a , b , da , db , first , second ;  $ ~cin >> x >> t >> a >> b >> da >> db ;  $ ~string output = "NO" ;  $ ~if ( x == 0 ) { output = "YES" ; }  $ ~for ( first = 0 ; first < a / da && first < t ; first ++ ) {  $ ~~if ( output == "YES" ) { break ; }  $ ~~for ( second = 0 ; second < b / db && second < t ; second ++ ) {  $ ~~~if ( da * first == a - x ) {  $ ~~~~output = "YES" ;  $ ~~~~break ;  $ ~~~}  $ ~~~if ( db * second == b - x ) {  $ ~~~~output = "YES" ;  $ ~~~~break ;  $ ~~~}  $ ~~~if ( da * first + db * second == a + b - x ) {  $ ~~~~output = "YES" ;  $ ~~~~break ;  $ ~~~}  $ ~~~if ( db * first + da * second == a + b - x ) {  $ ~~~~output = "YES" ;  $ ~~~~break ;  $ ~~~}  $ ~~}  $ ~}  $ ~cout << output << endl ;  $ ~return 0 ;  $ }
map < int , int > M , H ;  $ int arr [ 100010 ] , vis [ 100010 ] , len = 0 ;  $ vector < int > V [ 100010 ] ;  $ void dfs ( int u ) {  $ ~if ( vis [ u ] ) return ;  $ ~vis [ u ] = 1 ;  $ ~len ++ ;  $ ~for ( int i = 0 ; i < V [ u ] . size ( ) ; i ++ ) { dfs ( V [ u ] [ i ] ) ; }  $ }  $ int main ( ) {  $ ~int n , k , ans = 0 ;  $ ~cin >> n >> k ;  $ ~for ( int i = 1 ; i <= n ; i ++ ) {  $ ~~cin >> arr [ i ] ;  $ ~~M [ arr [ i ] ] ++ ;  $ ~}  $ ~sort ( arr + 1 , arr + 1 + n ) ;  $ ~for ( int i = 1 ; i <= n ; i ++ ) {  $ ~~H [ arr [ i ] ] = i ;  $ ~~if ( M [ arr [ i ] / k ] && arr [ i ] % k == 0 ) V [ H [ arr [ i ] / k ] ] . push_back ( H [ arr [ i ] ] ) ;  $ ~}  $ ~for ( int i = 1 ; i <= n ; i ++ )  $ ~~if ( ! vis [ H [ arr [ i ] ] ] ) {  $ ~~~len = 0 ;  $ ~~~dfs ( H [ arr [ i ] ] ) ;  $ ~~~ans += ( len / 2 ) ;  $ ~~~if ( len & 1 ) ans ++ ;  $ ~~}  $ ~cout << ans << endl ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~int l ;  $ ~cin >> l ;  $ ~int md [ 4 ] = { 8 , 4 , 2 , 6 } ;  $ ~if ( l == 0 ) {  $ ~~cout << "1" << endl ;  $ ~} else {  $ ~~cout << md [ ( l - 1 ) % 4 ] << endl ;  $ ~}  $ ~return 0 ;  $ }
int n , m ;  $ int menor ;  $ int main ( ) {  $ ~cin >> n >> m ;  $ ~menor = INT_MAX ;  $ ~for ( int i = 0 ; i < m ; i ++ ) {  $ ~~int a , b ;  $ ~~cin >> a >> b ;  $ ~~menor = min ( menor , b - a + 1 ) ;  $ ~}  $ ~cout << menor << "\n" ;  $ ~cout << "0" ;  $ ~for ( int i = 1 ; i < n ; i ++ ) { cout << " " << i % menor ; }  $ ~cout << "\n" ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~int n , k ;  $ ~cin >> n >> k ;  $ ~string s ;  $ ~vector < char > alfa ( 26 ) ;  $ ~for ( int i = 0 ; i < int ( 26 ) ; i ++ ) alfa [ i ] = char ( int ( 'a' ) + i ) ;  $ ~int cont = 0 ;  $ ~for ( int i = 0 ; i < int ( n ) ; i ++ ) {  $ ~~s += alfa [ cont ] ;  $ ~~cont ++ ;  $ ~~if ( cont == 26 or cont == k ) cont = 0 ;  $ ~}  $ ~cout << s << endl ;  $ ~return 0 ;  $ }
const int inf = 0 x3f3f3f3f ;  $ const int maxn = 110 ;  $ int max ( int a , int b ) {  $ ~return a > b ? a : b ;  $ }  $ int min ( int a , int b ) {  $ ~return a > b ? b : a ;  $ }  $ int a [ maxn ] ;  $ int main ( ) {  $ ~int i , n ;  $ ~while ( cin >> n ) {  $ ~~a [ 0 ] = 0 , a [ n + 1 ] = 1001 ;  $ ~~for ( i = 1 ; i <= n ; i ++ ) cin >> a [ i ] ;  $ ~~int l ;  $ ~~int maxi = 1 ;  $ ~~for ( l = 0 ; l <= n ; l ++ ) {  $ ~~~int pos = l ;  $ ~~~while ( l <= n && a [ l ] + 1 == a [ l + 1 ] ) { l ++ ; }  $ ~~~if ( l - pos + 1 > maxi ) { maxi = l - pos + 1 ; }  $ ~~}  $ ~~if ( maxi == 1 )  $ ~~~cout << "0" << endl ;  $ ~~else  $ ~~~cout << maxi - 2 << endl ;  $ ~}  $ ~return 0 ;  $ }
int main ( ) {  $ ~long long n , m ;  $ ~cin >> n >> m ;  $ ~int a [ n ] , index ;  $ ~int max = INT_MIN ;  $ ~for ( int i = 0 ; i < n ; i ++ ) { cin >> a [ i ] ; }  $ ~double val = ceil ( a [ 0 ] / m ) ;  $ ~for ( int i = 0 ; i < n ; i ++ ) {  $ ~~val = ceil ( double ( a [ i ] ) / double ( m ) ) ;  $ ~~if ( max <= val ) {  $ ~~~index = i + 1 ;  $ ~~~max = val ;  $ ~~}  $ ~}  $ ~cout << index << "\n" ;  $ }
int n , dp [ 30 ] [ 30 ] ;  $ string a [ 500000 + 10 ] ;  $ int main ( ) {  $ ~cin >> n ;  $ ~for ( int i = 0 ; i < n ; i ++ ) cin >> a [ i ] ;  $ ~for ( int i = 0 ; i < n ; i ++ ) {  $ ~~int u = a [ i ] [ 0 ] - 'a' ;  $ ~~int v = a [ i ] [ a [ i ] . size ( ) - 1 ] - 'a' ;  $ ~~for ( int j = 0 ; j < 26 ; j ++ ) {  $ ~~~if ( dp [ j ] [ u ] == 0 ) continue ;  $ ~~~dp [ j ] [ v ] = max ( dp [ j ] [ v ] , dp [ j ] [ u ] + ( int ) a [ i ] . size ( ) ) ;  $ ~~}  $ ~~dp [ u ] [ v ] = max ( dp [ u ] [ v ] , ( int ) a [ i ] . size ( ) ) ;  $ ~}  $ ~int res = 0 ;  $ ~for ( int i = 0 ; i < 26 ; i ++ ) { res = max ( res , dp [ i ] [ i ] ) ; }  $ ~cout << res << "\n" ;  $ }
int a [ 1005 ] ;  $ int main ( ) {  $ ~int n ;  $ ~while ( cin >> n ) {  $ ~~for ( int i = 0 ; i < n ; i ++ ) { cin >> a [ i ] ; }  $ ~~int ok = 0 ;  $ ~~for ( int i = 1 ; i < n ; i ++ ) {  $ ~~~for ( int j = 0 ; j < n - 1 ; j ++ ) {  $ ~~~~int max1 = max ( a [ i - 1 ] , a [ i ] ) ;  $ ~~~~int min1 = min ( a [ i - 1 ] , a [ i ] ) ;  $ ~~~~int max2 = max ( a [ j ] , a [ j + 1 ] ) ;  $ ~~~~int min2 = min ( a [ j ] , a [ j + 1 ] ) ;  $ ~~~~if ( min1 < min2 && max1 > min2 && max1 < max2 ) { ok = 1 ; }  $ ~~~}  $ ~~}  $ ~~if ( ok )  $ ~~~cout << "yes" << endl ;  $ ~~else  $ ~~~cout << "no" << endl ;  $ ~}  $ }
int n ;  $ char chair [ 10000 ] ;  $ int main ( ) {  $ ~cin >> n ;  $ ~int a ;  $ ~cin >> ( chair + 1 ) ;  $ ~chair [ 0 ] = '0' ;  $ ~chair [ n + 1 ] = '0' ;  $ ~int ans = 0 ;  $ ~if ( n == 1 && chair [ 1 ] == '0' ) {  $ ~~cout << "No" << endl ;  $ ~~return 0 ;  $ ~}  $ ~if ( n == 1 && chair [ 1 ] == '1' ) {  $ ~~cout << "Yes" << endl ;  $ ~~return 0 ;  $ ~}  $ ~for ( int i = 1 ; i <= n ; i ++ ) {  $ ~~if ( chair [ i ] == '1' && ( chair [ i - 1 ] == '1' || chair [ i + 1 ] == '1' ) ) {  $ ~~~ans = 1 ;  $ ~~~break ;  $ ~~}  $ ~~if ( chair [ i ] == '0' ) {  $ ~~~if ( chair [ i - 1 ] == '0' && chair [ i + 1 ] == '0' ) {  $ ~~~~ans = 1 ;  $ ~~~~break ;  $ ~~~}  $ ~~}  $ ~}  $ ~if ( ans == 1 )  $ ~~cout << "No" << endl ;  $ ~else  $ ~~cout << "Yes" << endl ;  $ }
int main ( ) {  $ ~string s ;  $ ~cin >> s ;  $ ~string a , b , c ;  $ ~int n = s . size ( ) ;  $ ~int mx = - 1 ;  $ ~for ( int i = 0 ; i < n ; ++ i ) {  $ ~~for ( int j = i + 2 ; j < n ; ++ j ) {  $ ~~~a = s . substr ( 0 , i + 1 ) ;  $ ~~~b = s . substr ( i + 1 , j - i - 1 ) ;  $ ~~~c = s . substr ( j , n - j + 1 ) ;  $ ~~~int sum = 0 ;  $ ~~~if ( a [ 0 ] == '0' && a . size ( ) != 1 ) continue ;  $ ~~~if ( b [ 0 ] == '0' && b . size ( ) != 1 ) continue ;  $ ~~~if ( c [ 0 ] == '0' && c . size ( ) != 1 ) continue ;  $ ~~~if ( a . size ( ) > 7 ) continue ;  $ ~~~if ( b . size ( ) > 7 ) continue ;  $ ~~~if ( c . size ( ) > 7 ) continue ;  $ ~~~if ( atoi ( a . c_str ( ) ) > 1000000 ) continue ;  $ ~~~if ( atoi ( b . c_str ( ) ) > 1000000 ) continue ;  $ ~~~if ( atoi ( c . c_str ( ) ) > 1000000 ) continue ;  $ ~~~sum += atoi ( a . c_str ( ) ) ;  $ ~~~sum += atoi ( b . c_str ( ) ) ;  $ ~~~sum += atoi ( c . c_str ( ) ) ;  $ ~~~mx = max ( mx , sum ) ;  $ ~~}  $ ~}  $ ~cout << mx << endl ;  $ }
int main ( ) {  $ ~int n , s ;  $ ~cin >> n >> s ;  $ ~int x , y ;  $ ~int min = 101 ;  $ ~int min2 = 101 ;  $ ~for ( int i = 0 ; i < n ; i ++ ) {  $ ~~cin >> x >> y ;  $ ~~if ( ( s > x ) && ( y < min ) && ( y > 0 ) )  $ ~~~min = y ;  $ ~~else if ( ( s >= x ) && ( y == 0 ) )  $ ~~~min2 = y ;  $ ~}  $ ~if ( ( min == 101 ) && ( min2 != 0 ) )  $ ~~cout << - 1 << endl ;  $ ~else if ( ( 100 - min < 100 ) && ( min != 101 ) )  $ ~~cout << 100 - min << endl ;  $ ~else if ( 100 - min2 == 100 )  $ ~~cout << 0 << endl ;  $ }
int main ( ) {  $ ~int n , i , o = 0 , z = 0 ;  $ ~cin >> n ;  $ ~int a [ n ] ;  $ ~for ( i = 0 ; i < n ; i ++ ) {  $ ~~cin >> a [ i ] ;  $ ~~if ( n == 1 ) {  $ ~~~if ( a [ 0 ] == 1 ) {  $ ~~~~cout << "YES" << endl ;  $ ~~~} else {  $ ~~~~cout << "NO" << endl ;  $ ~~~}  $ ~~} else {  $ ~~~if ( a [ i ] == 0 ) {  $ ~~~~z ++ ;  $ ~~~} else {  $ ~~~~o ++ ;  $ ~~~}  $ ~~}  $ ~}  $ ~if ( n > 1 ) {  $ ~~if ( ( z > 1 && z != 0 ) || o == n ) {  $ ~~~cout << "NO" << endl ;  $ ~~} else {  $ ~~~cout << "YES" << endl ;  $ ~~}  $ ~}  $ ~return 0 ;  $ }
int main ( ) {  $ ~int n ;  $ ~cin >> n ;  $ ~cout << n / 2 << endl ;  $ ~while ( n != 2 && n != 3 ) {  $ ~~cout << 2 << " " ;  $ ~~n -= 2 ;  $ ~}  $ ~cout << n << endl ;  $ }
int main ( ) {  $ ~int n , k ;  $ ~string s ;  $ ~cin >> n >> k >> s ;  $ ~int id ;  $ ~for ( int i = 1 ; i <= n ; i ++ ) {  $ ~~bool flag = true ;  $ ~~for ( int j = 0 ; j + i < n ; j ++ ) {  $ ~~~if ( s [ j ] != s [ j + i ] ) {  $ ~~~~flag = false ;  $ ~~~~break ;  $ ~~~}  $ ~~}  $ ~~if ( flag ) {  $ ~~~id = i ;  $ ~~~break ;  $ ~~}  $ ~}  $ ~string s1 , s2 ;  $ ~s1 = s . substr ( 0 , id ) ;  $ ~s2 = s . substr ( id ) ;  $ ~for ( int i = 1 ; i <= k ; i ++ ) cout << s1 ;  $ ~cout << s2 ;  $ ~cout << endl ;  $ }
int main ( ) {  $ ~int n ;  $ ~while ( cin >> n ) {  $ ~~if ( n == 0 ) {  $ ~~~cout << 1 << endl ;  $ ~~~break ;  $ ~~}  $ ~~int cnt = n % 4 ;  $ ~~if ( cnt == 1 )  $ ~~~cout << 8 << endl ;  $ ~~else if ( cnt == 2 )  $ ~~~cout << 4 << endl ;  $ ~~else if ( cnt == 3 )  $ ~~~cout << 2 << endl ;  $ ~~else if ( cnt == 0 )  $ ~~~cout << 6 << endl ;  $ ~}  $ ~return 0 ;  $ }
string str ;  $ bool check ( int x , int y ) {  $ ~int i = x , j = y ;  $ ~while ( i < j ) {  $ ~~if ( str [ i ] == str [ j ] ) {  $ ~~~i ++ ;  $ ~~~j -- ;  $ ~~} else  $ ~~~return false ;  $ ~}  $ ~return true ;  $ }  $ int main ( ) {  $ ~int k ;  $ ~cin >> str >> k ;  $ ~int len = str . size ( ) ;  $ ~if ( len % k != 0 ) {  $ ~~cout << "NO" << endl ;  $ ~~return 0 ;  $ ~}  $ ~k = len / k ;  $ ~int i = 0 ;  $ ~while ( i < len ) {  $ ~~if ( ! check ( i , i + k - 1 ) ) {  $ ~~~cout << "NO" << endl ;  $ ~~~return 0 ;  $ ~~}  $ ~~i += k ;  $ ~}  $ ~cout << "YES" << endl ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~string str1 , str2 ;  $ ~cin >> str1 >> str2 ;  $ ~int len1 = str1 . length ( ) ;  $ ~int len2 = str2 . length ( ) ;  $ ~if ( len1 != len2 ) {  $ ~~cout << "NO" << endl ;  $ ~~return 0 ;  $ ~}  $ ~bool flag = false ;  $ ~int f = 0 ;  $ ~for ( int i = 0 ; i < len1 ; i ++ ) {  $ ~~if ( str1 [ i ] != str2 [ i ] ) {  $ ~~~if ( flag == false ) {  $ ~~~~f = i ;  $ ~~~~flag = true ;  $ ~~~} else {  $ ~~~~swap ( str2 [ f ] , str2 [ i ] ) ;  $ ~~~~break ;  $ ~~~}  $ ~~}  $ ~}  $ ~int temp = str1 . compare ( str2 ) ;  $ ~if ( temp != 0 ) {  $ ~~cout << "NO" << endl ;  $ ~} else {  $ ~~cout << "YES" << endl ;  $ ~}  $ ~return 0 ;  $ }
inline bool isTriangular ( long long n ) {  $ ~double r = sqrt ( ( double ) ( 1 + ( n << 3 LL ) ) ) ;  $ ~if ( r == floor ( r ) ) {  $ ~~long long s = ( long long ) r ;  $ ~~return s > 1 LL and ( s - 1 LL ) & 1 LL == 0 ;  $ ~}  $ ~return false ;  $ }  $ inline long long sum ( long long n ) {  $ ~return ( n * ( n + 1 ) ) >> 1 LL ;  $ }  $ int main ( ) {  $ ~long long n ;  $ ~while ( cin >> n ) {  $ ~~long long x = 1 ;  $ ~~bool possible = false ;  $ ~~while ( n - sum ( x ) > 0 ) {  $ ~~~long long y = n - sum ( x ) ;  $ ~~~long long m ;  $ ~~~long long l = 1 ;  $ ~~~long long r = y ;  $ ~~~while ( l < r ) {  $ ~~~~m = ( l + r ) >> 1 LL ;  $ ~~~~long long fm = sum ( m ) ;  $ ~~~~if ( fm == y ) {  $ ~~~~~possible = true ;  $ ~~~~~break ;  $ ~~~~}  $ ~~~~if ( fm < y )  $ ~~~~~l = m + 1 ;  $ ~~~~else  $ ~~~~~r = m ;  $ ~~~}  $ ~~~if ( possible ) break ;  $ ~~~if ( ( sum ( x ) << 1 LL ) == n ) {  $ ~~~~possible = true ;  $ ~~~~break ;  $ ~~~}  $ ~~~++ x ;  $ ~~}  $ ~~if ( possible )  $ ~~~cout << "YES\n" ;  $ ~~else  $ ~~~cout << "NO\n" ;  $ ~}  $ ~return 0 ;  $ }
int main ( ) {  $ ~int n ;  $ ~cin >> n ;  $ ~int sum , x , mx = 0 , ans = 1 , a , b , c , d ;  $ ~cin >> a >> b >> c >> d ;  $ ~x = a + b + c + d ;  $ ~for ( int i = 1 ; i < n ; i ++ ) {  $ ~~cin >> a >> b >> c >> d ;  $ ~~sum = a + b + c + d ;  $ ~~if ( sum > x ) { ans ++ ; }  $ ~}  $ ~if ( ans == 0 ) ans = 1 ;  $ ~cout << ans << endl ;  $ ~return 0 ;  $ }
long long int a [ 200005 ] ;  $ long long int b [ 200005 ] ;  $ int main ( ) {  $ ~long long int n , m , ma2 = 0 ;  $ ~cin >> n ;  $ ~for ( int i = 0 ; i < n ; i ++ ) {  $ ~~cin >> m ;  $ ~~long long int ma = 0 ;  $ ~~for ( int j = 0 ; j < m ; j ++ ) {  $ ~~~long long int x ;  $ ~~~cin >> x ;  $ ~~~ma = max ( ma , x ) ;  $ ~~}  $ ~~a [ i ] = ma ;  $ ~~b [ i ] = m ;  $ ~~ma2 = max ( ma2 , a [ i ] ) ;  $ ~}  $ ~long long int ans = 0 ;  $ ~for ( int i = 0 ; i < n ; i ++ ) { ans += b [ i ] * ( ma2 - a [ i ] ) ; }  $ ~cout << ans << endl ;  $ }
string s [ 100 ] ;  $ string t [ 100 ] ;  $ string suit = "RGBYW" ;  $ int bitcount ( int n ) {  $ ~int ans = 0 ;  $ ~while ( n > 0 ) {  $ ~~n = n & ( n - 1 ) ;  $ ~~ans ++ ;  $ ~}  $ ~return ans ;  $ }  $ int main ( ) {  $ ~int n ;  $ ~cin >> n ;  $ ~set < string > cnt ;  $ ~for ( int i = 0 ; i < n ; i ++ ) {  $ ~~cin >> s [ i ] ;  $ ~~cnt . insert ( s [ i ] ) ;  $ ~}  $ ~int distinct = cnt . size ( ) ;  $ ~int ans = 8 ;  $ ~for ( int i = 0 ; i < ( 1 << 10 ) ; i ++ ) {  $ ~~int tmin = bitcount ( i ) ;  $ ~~if ( tmin >= ans ) continue ;  $ ~~cnt . clear ( ) ;  $ ~~for ( int j = 0 ; j < 10 ; j ++ ) {  $ ~~~if ( i & ( 1 << j ) )  $ ~~~~for ( int k = 0 ; k < n ; k ++ ) {  $ ~~~~~if ( j < 5 ) {  $ ~~~~~~if ( s [ k ] [ 1 ] == '1' + j ) {  $ ~~~~~~~t [ k ] . push_back ( '1' ) ;  $ ~~~~~~} else  $ ~~~~~~~t [ k ] . push_back ( '0' ) ;  $ ~~~~~} else {  $ ~~~~~~if ( s [ k ] [ 0 ] == suit [ j - 5 ] ) {  $ ~~~~~~~t [ k ] . push_back ( '1' ) ;  $ ~~~~~~} else  $ ~~~~~~~t [ k ] . push_back ( '0' ) ;  $ ~~~~~}  $ ~~~~}  $ ~~}  $ ~~for ( int j = 0 ; j < n ; j ++ ) {  $ ~~~cnt . insert ( t [ j ] ) ;  $ ~~~t [ j ] = "" ;  $ ~~}  $ ~~if ( cnt . size ( ) == distinct ) ans = tmin ;  $ ~}  $ ~cout << ans << endl ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~long long n ;  $ ~cin >> n ;  $ ~long long x , y ;  $ ~cin >> x >> y ;  $ ~if ( n + 1 - x >= y ) {  $ ~~cout << "White" << endl ;  $ ~} else {  $ ~~cout << "Black" << endl ;  $ ~}  $ ~return 0 ;  $ }
bool ra ( int x1 , int y1 , int x2 , int y2 , int x3 , int y3 ) {  $ ~int d1 = ( abs ( x1 - x2 ) ) * ( abs ( x1 - x2 ) ) + ( abs ( y1 - y2 ) ) * ( abs ( y1 - y2 ) ) ;  $ ~int d2 = ( abs ( x1 - x3 ) ) * ( abs ( x1 - x3 ) ) + ( abs ( y1 - y3 ) ) * ( abs ( y1 - y3 ) ) ;  $ ~int d3 = ( abs ( x3 - x2 ) ) * ( abs ( x3 - x2 ) ) + ( abs ( y3 - y2 ) ) * ( abs ( y3 - y2 ) ) ;  $ ~if ( ( d1 && d2 && d3 ) == 0 ) return false ;  $ ~if ( d1 + d2 == d3 || d1 + d3 == d2 || d2 + d3 == d1 ) return true ;  $ ~return false ;  $ }  $ int main ( ) {  $ ~int n , x1 , x2 , x3 , y1 , y2 , y3 ;  $ ~cin >> x1 >> y1 >> x2 >> y2 >> x3 >> y3 ;  $ ~if ( ra ( x1 , y1 , x2 , y2 , x3 , y3 ) ) {  $ ~~cout << "RIGHT" << endl ;  $ ~~return 0 ;  $ ~}  $ ~x1 ++ ;  $ ~if ( ra ( x1 , y1 , x2 , y2 , x3 , y3 ) ) {  $ ~~cout << "ALMOST" << endl ;  $ ~~return 0 ;  $ ~}  $ ~x1 -= 2 ;  $ ~if ( ra ( x1 , y1 , x2 , y2 , x3 , y3 ) ) {  $ ~~cout << "ALMOST" << endl ;  $ ~~return 0 ;  $ ~}  $ ~x1 ++ ;  $ ~y1 ++ ;  $ ~if ( ra ( x1 , y1 , x2 , y2 , x3 , y3 ) ) {  $ ~~cout << "ALMOST" << endl ;  $ ~~return 0 ;  $ ~}  $ ~y1 -= 2 ;  $ ~if ( ra ( x1 , y1 , x2 , y2 , x3 , y3 ) ) {  $ ~~cout << "ALMOST" << endl ;  $ ~~return 0 ;  $ ~}  $ ~y1 ++ ;  $ ~x2 ++ ;  $ ~if ( ra ( x1 , y1 , x2 , y2 , x3 , y3 ) ) {  $ ~~cout << "ALMOST" << endl ;  $ ~~return 0 ;  $ ~}  $ ~x2 -= 2 ;  $ ~if ( ra ( x1 , y1 , x2 , y2 , x3 , y3 ) ) {  $ ~~cout << "ALMOST" << endl ;  $ ~~return 0 ;  $ ~}  $ ~x2 ++ ;  $ ~y2 ++ ;  $ ~if ( ra ( x1 , y1 , x2 , y2 , x3 , y3 ) ) {  $ ~~cout << "ALMOST" << endl ;  $ ~~return 0 ;  $ ~}  $ ~y2 -= 2 ;  $ ~if ( ra ( x1 , y1 , x2 , y2 , x3 , y3 ) ) {  $ ~~cout << "ALMOST" << endl ;  $ ~~return 0 ;  $ ~}  $ ~y2 ++ ;  $ ~x3 ++ ;  $ ~if ( ra ( x1 , y1 , x2 , y2 , x3 , y3 ) ) {  $ ~~cout << "ALMOST" << endl ;  $ ~~return 0 ;  $ ~}  $ ~x3 -= 2 ;  $ ~if ( ra ( x1 , y1 , x2 , y2 , x3 , y3 ) ) {  $ ~~cout << "ALMOST" << endl ;  $ ~~return 0 ;  $ ~}  $ ~x3 ++ ;  $ ~y3 ++ ;  $ ~if ( ra ( x1 , y1 , x2 , y2 , x3 , y3 ) ) {  $ ~~cout << "ALMOST" << endl ;  $ ~~return 0 ;  $ ~}  $ ~y3 -= 2 ;  $ ~if ( ra ( x1 , y1 , x2 , y2 , x3 , y3 ) ) {  $ ~~cout << "ALMOST" << endl ;  $ ~~return 0 ;  $ ~}  $ ~cout << "NEITHER" << endl ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~long long l1 , r1 , l2 , r2 , k ;  $ ~cin >> l1 >> r1 >> l2 >> r2 >> k ;  $ ~long long tot ;  $ ~if ( l1 >= l2 ) {  $ ~~if ( l1 > r2 )  $ ~~~tot = 0 ;  $ ~~else if ( r1 <= r2 ) {  $ ~~~tot = r1 - l1 + 1 ;  $ ~~~if ( k >= l1 and k <= r1 ) tot -- ;  $ ~~} else {  $ ~~~tot = r2 - l1 + 1 ;  $ ~~~if ( k >= l1 and k <= r2 ) tot -- ;  $ ~~}  $ ~} else {  $ ~~if ( l2 > r1 )  $ ~~~tot = 0 ;  $ ~~else if ( r2 <= r1 ) {  $ ~~~tot = r2 - l2 + 1 ;  $ ~~~if ( k >= l2 and k <= r2 ) tot -- ;  $ ~~} else {  $ ~~~tot = r1 - l2 + 1 ;  $ ~~~if ( k >= l2 and k <= r1 ) tot -- ;  $ ~~}  $ ~}  $ ~cout << tot << endl ;  $ }
const int dx [ ] = { 0 , 1 , 0 , - 1 } ;  $ const int dy [ ] = { 1 , 0 , - 1 , 0 } ;  $ int n , x , y , xx , yy ;  $ bool vis [ 1001 ] [ 1001 ] ;  $ bool on ( int x , int y ) {  $ ~return ( x == 0 || y == 0 || x == n || y == n ) ;  $ }  $ int ans = INT_MAX ;  $ void dfs ( int cx , int cy , int g ) {  $ ~if ( cx < 0 || cx > n || cy < 0 || cy > n ) return ;  $ ~if ( vis [ cx ] [ cy ] ) return ;  $ ~if ( cx == xx && cy == yy ) {  $ ~~ans = min ( ans , g ) ;  $ ~~return ;  $ ~}  $ ~vis [ cx ] [ cy ] = true ;  $ ~for ( int i = 0 ; i < 4 ; i ++ ) {  $ ~~if ( on ( cx + dx [ i ] , cy + dy [ i ] ) ) dfs ( cx + dx [ i ] , cy + dy [ i ] , g + 1 ) ;  $ ~}  $ }  $ int main ( ) {  $ ~cin >> n >> x >> y >> xx >> yy ;  $ ~dfs ( x , y , 0 ) ;  $ ~cout << ans << endl ;  $ }
int distance ( int a , int b , int x , int y ) {  $ ~return ( ( a - x ) * ( a - x ) + ( b - y ) * ( b - y ) ) ;  $ }  $ bool check ( vector < int > cod ) {  $ ~int d1 , d2 , d3 ;  $ ~unsigned int i = 0 ;  $ ~for ( i = 0 ; i < cod . size ( ) ; i += 1 ) {  $ ~~cod [ i ] -= 1 ;  $ ~~d1 = distance ( cod [ 0 ] , cod [ 1 ] , cod [ 2 ] , cod [ 3 ] ) ;  $ ~~d2 = distance ( cod [ 0 ] , cod [ 1 ] , cod [ 4 ] , cod [ 5 ] ) ;  $ ~~d3 = distance ( cod [ 2 ] , cod [ 3 ] , cod [ 4 ] , cod [ 5 ] ) ;  $ ~~cod [ i ] += 1 ;  $ ~~if ( d1 == 0 or d2 == 0 or d3 == 0 ) continue ;  $ ~~if ( ( d1 == d2 + d3 ) or ( d2 == d1 + d3 ) or ( d3 == d2 + d1 ) ) { return 1 ; }  $ ~}  $ ~for ( i = 0 ; i < cod . size ( ) ; i += 1 ) {  $ ~~cod [ i ] += 1 ;  $ ~~d1 = distance ( cod [ 0 ] , cod [ 1 ] , cod [ 2 ] , cod [ 3 ] ) ;  $ ~~d2 = distance ( cod [ 0 ] , cod [ 1 ] , cod [ 4 ] , cod [ 5 ] ) ;  $ ~~d3 = distance ( cod [ 2 ] , cod [ 3 ] , cod [ 4 ] , cod [ 5 ] ) ;  $ ~~cod [ i ] -= 1 ;  $ ~~if ( d1 == 0 or d2 == 0 or d3 == 0 ) continue ;  $ ~~if ( ( d1 == d2 + d3 ) or ( d2 == d1 + d3 ) or ( d3 == d2 + d1 ) ) { return 1 ; }  $ ~}  $ ~return 0 ;  $ }  $ int main ( ) {  $ ~vector < int > cod ;  $ ~unsigned int i ;  $ ~for ( i = 0 ; i < 6 ; i += 1 ) {  $ ~~int temp ;  $ ~~cin >> temp ;  $ ~~cod . push_back ( temp ) ;  $ ~}  $ ~int d1 , d2 , d3 ;  $ ~d1 = distance ( cod [ 0 ] , cod [ 1 ] , cod [ 2 ] , cod [ 3 ] ) ;  $ ~d2 = distance ( cod [ 0 ] , cod [ 1 ] , cod [ 4 ] , cod [ 5 ] ) ;  $ ~d3 = distance ( cod [ 2 ] , cod [ 3 ] , cod [ 4 ] , cod [ 5 ] ) ;  $ ~if ( ( d1 == d2 + d3 ) or ( d2 == d1 + d3 ) or ( d3 == d2 + d1 ) ) {  $ ~~cout << "RIGHT" << endl ;  $ ~~return 0 ;  $ ~} else if ( check ( cod ) )  $ ~~cout << "ALMOST" << endl ;  $ ~else  $ ~~cout << "NEITHER" << endl ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~string s ;  $ ~int n ;  $ ~cin >> s >> n ;  $ ~if ( s . length ( ) % n > 0 ) {  $ ~~cout << "NO" << endl ;  $ ~~return 0 ;  $ ~}  $ ~int l = s . length ( ) / n ;  $ ~for ( int i = 0 ; i < n ; i ++ )  $ ~~for ( int j = 0 ; j < l / 2 ; j ++ )  $ ~~~if ( s [ j + i * l ] != s [ ( i + 1 ) * l - j - 1 ] ) {  $ ~~~~cout << "NO" << endl ;  $ ~~~~return 0 ;  $ ~~~}  $ ~cout << "YES" << endl ;  $ ~return 0 ;  $ }
long long MOD = 1000000009 ;  $ long long pw ( long long a , long long b ) {  $ ~if ( b == 0 ) return 1 ;  $ ~if ( b == 1 ) return a % MOD ;  $ ~if ( b % 2 ) {  $ ~~long long rs = pw ( a , b - 1 ) ;  $ ~~return ( rs * a ) % MOD ;  $ ~}  $ ~long long rs = pw ( a , b / 2 ) ;  $ ~return ( rs * rs ) % MOD ;  $ }  $ vector < long long > sm ;  $ long long solve ( long long a , long long b ) {  $ ~if ( b == 0 ) return 0 ;  $ ~for ( long long i = 0 ; i < 35 ; i ++ ) {  $ ~~long long ba = ( 1 LL << i ) & b ;  $ ~~if ( ba == 0 ) continue ;  $ ~~return ( sm [ i ] + solve ( a , b - ( 1 LL << i ) ) * pw ( a , ( 1 LL << i ) ) ) % MOD ;  $ ~}  $ }  $ int main ( ) {  $ ~long long n , a , b , k ;  $ ~cin >> n >> a >> b >> k ;  $ ~string s ;  $ ~cin >> s ;  $ ~long long X = 1 , Y = 1 ;  $ ~for ( long long i = 0 ; i < k ; i ++ ) {  $ ~~X *= b ;  $ ~~X %= MOD ;  $ ~}  $ ~for ( long long i = 0 ; i < k ; i ++ ) {  $ ~~Y *= a ;  $ ~~Y %= MOD ;  $ ~}  $ ~X *= pw ( Y , MOD - 2 ) ;  $ ~X %= MOD ;  $ ~sm . push_back ( 1 ) ;  $ ~for ( long long i = 0 ; i < 40 ; i ++ ) {  $ ~~sm . push_back ( sm . back ( ) + sm . back ( ) * pw ( X , ( 1 LL << i ) ) ) ;  $ ~~sm . back ( ) %= MOD ;  $ ~}  $ ~long long st = solve ( X , ( n + 1 ) / k ) ;  $ ~long long ans = 0 ;  $ ~for ( long long i = 0 ; i < k ; i ++ ) {  $ ~~long long rs = ( pw ( b , i ) * pw ( a , n - i ) ) % MOD ;  $ ~~if ( s [ i ] == '-' ) rs *= - 1 ;  $ ~~rs *= st ;  $ ~~ans += rs ;  $ ~~ans %= MOD ;  $ ~}  $ ~if ( ans < 0 ) ans += MOD ;  $ ~cout << ans << endl ;  $ }
int a [ 500010 ] ;  $ int main ( ) {  $ ~int n ;  $ ~cin >> n ;  $ ~for ( int i = 0 ; i < n ; i ++ ) cin >> a [ i ] ;  $ ~int ans ( 0 ) ;  $ ~int l , r ;  $ ~for ( int i = 0 ; i < n ; i ++ ) {  $ ~~l = i ;  $ ~~r = i + 1 ;  $ ~~while ( r < n && a [ l ] != a [ r ] ) {  $ ~~~l ++ ;  $ ~~~r ++ ;  $ ~~}  $ ~~l = i + 1 ;  $ ~~r -= 2 ;  $ ~~int num ( 0 ) ;  $ ~~while ( l <= r ) {  $ ~~~a [ l ] = a [ l - 1 ] ;  $ ~~~a [ r ] = a [ r + 1 ] ;  $ ~~~l ++ ;  $ ~~~r -- ;  $ ~~~num ++ ;  $ ~~}  $ ~~ans = max ( ans , num ) ;  $ ~}  $ ~cout << ans << endl ;  $ ~for ( int i = 0 ; i < n - 1 ; i ++ ) cout << a [ i ] << ' ' ;  $ ~cout << a [ n - 1 ] << endl ;  $ ~return 0 ;  $ }
const int len = 1e2 + 5 ;  $ const long long mod = 1e9 + 7 ;  $ const double pi = acos ( - 1.0 ) ;  $ int main ( ) {  $ ~long long n , a , b , c ;  $ ~cin >> n >> a >> b >> c ;  $ ~if ( a <= b - c )  $ ~~cout << n / a << endl ;  $ ~else {  $ ~~if ( n < b ) {  $ ~~~cout << n / min ( a , b ) << endl ;  $ ~~~return 0 ;  $ ~~}  $ ~~long long ans = 0 ;  $ ~~n -= b ;  $ ~~ans += n / ( b - c ) ;  $ ~~n = n % ( b - c ) ;  $ ~~ans ++ ;  $ ~~n += c ;  $ ~~ans += n / min ( a , b ) ;  $ ~~cout << ans << endl ;  $ ~}  $ }
int main ( ) {  $ ~int i , j , k ;  $ ~char s [ 100010 ] ;  $ ~while ( gets ( s ) ) {  $ ~~int len = strlen ( s ) ;  $ ~~for ( i = 0 ; i < len ; i ++ ) {  $ ~~~if ( s [ i ] != 'a' ) { break ; }  $ ~~}  $ ~~for ( j = i ; j < len ; j ++ ) {  $ ~~~if ( s [ j ] == 'a' ) { break ; }  $ ~~~s [ j ] -- ;  $ ~~}  $ ~~if ( i == len ) { s [ len - 1 ] = 'z' ; }  $ ~~cout << s << endl ;  $ ~}  $ ~return 0 ;  $ }
int main ( ) {  $ ~char a [ 110 ] = { 0 } ;  $ ~int n ;  $ ~cin >> n ;  $ ~cin >> a ;  $ ~if ( n == 1 )  $ ~~cout << a << endl ;  $ ~else {  $ ~~int cnt = 0 ;  $ ~~for ( int i = 0 ; i < n ; i ++ ) {  $ ~~~if ( a [ i ] == '0' ) cnt ++ ;  $ ~~}  $ ~~cout << '1' ;  $ ~~for ( int i = 0 ; i < cnt ; i ++ ) cout << '0' ;  $ ~~cout << endl ;  $ ~}  $ ~return 0 ;  $ }
int main ( ) {  $ ~string a ;  $ ~long long b , t , c = 0 ;  $ ~getline ( cin , a ) ;  $ ~b = a . find ( '=' ) ;  $ ~t = b ;  $ ~b += 2 ;  $ ~b = a . size ( ) - b + 1 ;  $ ~for ( long long i = 0 ; i < t ; ++ i ) {  $ ~~if ( a [ i ] == '|' ) { c ++ ; }  $ ~}  $ ~if ( c + 1 == b - 1 ) {  $ ~~cout << '|' ;  $ ~~for ( long long i = 0 ; i < a . size ( ) - 1 ; ++ i ) { cout << a [ i ] ; }  $ ~~cout << endl ;  $ ~} else if ( c == b ) {  $ ~~cout << a << endl ;  $ ~} else if ( c == b + 2 ) {  $ ~~long long z = a . find ( '+' ) ;  $ ~~if ( z > 1 ) {  $ ~~~for ( long long i = 1 ; i < a . size ( ) ; i ++ ) { cout << a [ i ] ; }  $ ~~~cout << '|' << endl ;  $ ~~} else {  $ ~~~for ( long long i = 0 ; i < a . size ( ) ; i ++ ) {  $ ~~~~if ( i == z + 1 ) { continue ; }  $ ~~~~cout << a [ i ] ;  $ ~~~}  $ ~~~cout << '|' << endl ;  $ ~~}  $ ~} else {  $ ~~cout << "Impossible" << endl ;  $ ~}  $ ~return 0 ;  $ }
int main ( ) {  $ ~long long x1 , x2 , y1 , y2 , n ;  $ ~cin >> x1 >> y1 >> x2 >> y2 ;  $ ~cin >> n ;  $ ~int t = 0 ;  $ ~for ( int i = 0 ; i < n ; i ++ ) {  $ ~~long long a , b , c ;  $ ~~cin >> a >> b >> c ;  $ ~~if ( ( a * x1 + b * y1 + c ) > 0 && ( a * x2 + b * y2 + c ) < 0 ) t ++ ;  $ ~~if ( ( a * x1 + b * y1 + c ) < 0 && ( a * x2 + b * y2 + c ) > 0 ) t ++ ;  $ ~}  $ ~cout << t << endl ;  $ }
string s ;  $ int a , b ;  $ int len ;  $ int main ( ) {  $ ~cin >> s ;  $ ~int n = s . length ( ) ;  $ ~int w [ n + 10 ] ;  $ ~for ( int i = 0 ; i < s . length ( ) ; i ++ ) {  $ ~~if ( s [ i ] == '(' ) {  $ ~~~a ++ ;  $ ~~} else if ( s [ i ] == '#' ) {  $ ~~~w [ ++ len ] = 1 ;  $ ~~~a -- ;  $ ~~} else if ( s [ i ] == ')' ) {  $ ~~~a -- ;  $ ~~}  $ ~~if ( a < 0 ) {  $ ~~~cout << - 1 << endl ;  $ ~~~return 0 ;  $ ~~}  $ ~}  $ ~for ( int i = s . length ( ) - 1 ; i >= 0 ; i -- ) {  $ ~~if ( s [ i ] == ')' ) {  $ ~~~b ++ ;  $ ~~} else if ( s [ i ] == '(' ) {  $ ~~~b -- ;  $ ~~} else if ( s [ i ] == '#' ) {  $ ~~~break ;  $ ~~}  $ ~~if ( b < 0 ) {  $ ~~~cout << - 1 << endl ;  $ ~~~return 0 ;  $ ~~}  $ ~}  $ ~w [ len ] += a ;  $ ~for ( int i = 1 ; i <= len ; i ++ ) { cout << w [ i ] << endl ; }  $ ~return 0 ;  $ }
bool isPalindrome ( string s ) {  $ ~string sCopy = s ;  $ ~reverse ( s . begin ( ) , s . end ( ) ) ;  $ ~if ( s == sCopy )  $ ~~return true ;  $ ~else  $ ~~return false ;  $ }  $ int main ( ) {  $ ~string s ;  $ ~int k ;  $ ~cin >> s ;  $ ~cin >> k ;  $ ~int n = s . size ( ) ;  $ ~int check = 0 ;  $ ~if ( n % k == 0 ) {  $ ~~int len = n / k ;  $ ~~for ( int i = 0 ; i < n ; i ++ ) {  $ ~~~string word = s . substr ( i , len ) ;  $ ~~~if ( isPalindrome ( word ) ) check ++ ;  $ ~~~i += len - 1 ;  $ ~~}  $ ~~if ( check == k )  $ ~~~cout << "YES" << endl ;  $ ~~else  $ ~~~cout << "NO" << endl ;  $ ~~return 0 ;  $ ~}  $ ~cout << "NO" << endl ;  $ }
int main ( ) {  $ ~int n ;  $ ~float m ;  $ ~cin >> n >> m ;  $ ~vector < int > v ;  $ ~for ( int i = 0 ; i < n ; i += 1 ) {  $ ~~int x ;  $ ~~cin >> x ;  $ ~~v . push_back ( x ) ;  $ ~}  $ ~for ( int i = 0 ; i < n ; i += 1 ) { v [ i ] = ceil ( v [ i ] / m ) ; }  $ ~int p = 0 , max = - 1 ;  $ ~for ( int i = 0 ; i < n ; i += 1 ) {  $ ~~if ( max <= v [ i ] ) {  $ ~~~p = i + 1 ;  $ ~~~max = v [ i ] ;  $ ~~}  $ ~}  $ ~cout << p << endl ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~int n ;  $ ~cin >> n ;  $ ~set < string > items ;  $ ~for ( long long int i = 0 ; i < n ; i ++ ) {  $ ~~string s1 , s2 ;  $ ~~cin >> s1 >> s2 ;  $ ~~reverse ( s2 . begin ( ) , s2 . end ( ) ) ;  $ ~~string fS = s1 + s2 ;  $ ~~set < string > combs ;  $ ~~combs . insert ( fS ) ;  $ ~~for ( int i = 0 ; i < n ; i ++ ) {  $ ~~~string ns = fS ;  $ ~~~for ( long long int j = 0 ; j < 4 ; j ++ ) { ns [ j ] = fS [ ( j + 1 ) % 4 ] ; }  $ ~~~fS = ns ;  $ ~~~combs . insert ( fS ) ;  $ ~~}  $ ~~items . insert ( * combs . begin ( ) ) ;  $ ~~if ( i != n - 1 ) { cin >> s1 ; }  $ ~}  $ ~cout << items . size ( ) << endl ;  $ }
int f [ 300030 ] ;  $ int ne [ 300030 ] ;  $ int main ( ) {  $ ~int n , m ;  $ ~cin >> n >> m ;  $ ~for ( int i = 0 ; i <= n ; i ++ ) ne [ i ] = i + 1 ;  $ ~int l , r , x , t ;  $ ~while ( m -- ) {  $ ~~cin >> l >> r >> x ;  $ ~~for ( int i = l ; i <= r ; i = t ) {  $ ~~~if ( i != x && ! f [ i ] ) f [ i ] = x ;  $ ~~~t = ne [ i ] ;  $ ~~~if ( i < x )  $ ~~~~ne [ i ] = ne [ x - 1 ] ;  $ ~~~else  $ ~~~~ne [ i ] = ne [ r ] ;  $ ~~}  $ ~}  $ ~for ( int i = 1 ; i <= n ; i ++ ) {  $ ~~if ( i == 1 )  $ ~~~cout << f [ i ] ;  $ ~~else  $ ~~~cout << " " << f [ i ] ;  $ ~}  $ ~cout << endl ;  $ ~return 0 ;  $ }
const int MAXN = 3e2 + 100 ;  $ const int INF = 0 x3FFFFFFF ;  $ const long long MOD = 1e5 + 7 ;  $ char a [ MAXN ] ;  $ int main ( ) {  $ ~cin >> a ;  $ ~int len = strlen ( a ) ;  $ ~int ansl = 0 , ansm = 0 , ansr = 0 ;  $ ~bool f1 = false , f2 = false ;  $ ~for ( int i = 0 ; i < len ; i ++ ) {  $ ~~if ( a [ i ] == '+' ) {  $ ~~~f1 = true ;  $ ~~~continue ;  $ ~~}  $ ~~if ( ! f1 ) {  $ ~~~ansl ++ ;  $ ~~~continue ;  $ ~~}  $ ~~if ( a [ i ] == '=' ) {  $ ~~~f2 = true ;  $ ~~~continue ;  $ ~~}  $ ~~if ( ! f2 ) {  $ ~~~ansm ++ ;  $ ~~~continue ;  $ ~~}  $ ~~ansr ++ ;  $ ~}  $ ~if ( ansl + ansm - ansr == 0 ) {  $ ~~cout << a << endl ;  $ ~~return 0 ;  $ ~} else if ( ansl + ansm - ansr == 2 ) {  $ ~~if ( ansl >= 2 ) {  $ ~~~for ( int i = 1 ; i < ansl ; i ++ ) cout << "|" ;  $ ~~~cout << "+" ;  $ ~~~for ( int i = 1 ; i <= ansm ; i ++ ) cout << "|" ;  $ ~~~cout << "=" ;  $ ~~~for ( int i = 1 ; i <= ansr + 1 ; i ++ ) cout << "|" ;  $ ~~~cout << endl ;  $ ~~} else if ( ansm >= 2 ) {  $ ~~~for ( int i = 1 ; i <= ansl ; i ++ ) cout << "|" ;  $ ~~~cout << "+" ;  $ ~~~for ( int i = 1 ; i < ansm ; i ++ ) cout << "|" ;  $ ~~~cout << "=" ;  $ ~~~for ( int i = 1 ; i <= ansr + 1 ; i ++ ) cout << "|" ;  $ ~~~cout << endl ;  $ ~~}  $ ~} else if ( ansl + ansm - ansr == - 2 ) {  $ ~~cout << "|" ;  $ ~~a [ len - 1 ] = '\0' ;  $ ~~cout << a << endl ;  $ ~} else  $ ~~cout << "Impossible" << endl ;  $ ~return 0 ;  $ }
const int maxn = 111 ;  $ int n , ans = 1 , r [ maxn ] ;  $ bool vis [ maxn ] , f = true ;  $ int dfs ( int len , int x , int root ) {  $ ~if ( vis [ x ] && x == root ) return len ;  $ ~if ( vis [ x ] ) {  $ ~~f = false ;  $ ~~return len ;  $ ~}  $ ~vis [ x ] = true ;  $ ~dfs ( len + 1 , r [ x ] , root ) ;  $ }  $ int main ( ) {  $ ~cin >> n ;  $ ~for ( int i = 1 ; i <= n ; i ++ ) cin >> r [ i ] ;  $ ~for ( int i = 1 ; i <= n && f ; i ++ ) {  $ ~~if ( vis [ i ] == false ) {  $ ~~~int tmp = dfs ( 0 , i , i ) ;  $ ~~~if ( tmp % 2 == 0 ) tmp /= 2 ;  $ ~~~ans = ans * tmp / __gcd ( ans , tmp ) ;  $ ~~}  $ ~}  $ ~if ( f == false ) {  $ ~~cout << - 1 << endl ;  $ ~~return 0 ;  $ ~}  $ ~cout << ans << endl ;  $ ~return 0 ;  $ }
int vis [ 30 ] ;  $ int main ( ) {  $ ~int n ;  $ ~cin >> n ;  $ ~string s ;  $ ~cin >> s ;  $ ~for ( int i = 0 ; i < s . length ( ) ; i ++ ) {  $ ~~if ( vis [ s [ i ] ] ) {  $ ~~~cout << "Yes" << endl ;  $ ~~~return 0 ;  $ ~~}  $ ~~vis [ s [ i ] ] = 1 ;  $ ~}  $ ~if ( n == 1 )  $ ~~cout << "Yes" << endl ;  $ ~else  $ ~~cout << "No" << endl ;  $ ~return 0 ;  $ }
const int maxn = 100000 ;  $ int a [ maxn ] , b [ maxn ] , n , r = 1 , ans ;  $ int main ( ) {  $ ~cin >> n ;  $ ~for ( int i = 1 ; i <= n ; i ++ ) { cin >> a [ i ] ; }  $ ~sort ( a + 1 , a + 1 + n ) ;  $ ~for ( int i = 1 ; i <= n ; i ++ ) {  $ ~~while ( r <= n && a [ r ] <= a [ i ] ) r ++ ;  $ ~~if ( r <= n ) ans ++ , r ++ ;  $ ~}  $ ~cout << ans << endl ;  $ ~return 0 ;  $ }
long long a [ 100001 ] ;  $ long long s [ 100000 ] ;  $ int main ( ) {  $ ~long long n , i , max , min , mm , k , t ;  $ ~while ( cin >> n ) {  $ ~~for ( i = 1 ; i <= n ; i ++ ) cin >> a [ i ] ;  $ ~~for ( i = 1 ; i <= n - 1 ; i ++ ) {  $ ~~~s [ i ] = abs ( a [ i ] - a [ i + 1 ] ) ;  $ ~~~if ( i % 2 == 1 ) s [ i ] = 0 - s [ i ] ;  $ ~~}  $ ~~max = s [ n - 1 ] ;  $ ~~min = s [ n - 1 ] ;  $ ~~if ( ( n - 1 ) % 2 == 0 )  $ ~~~mm = max ;  $ ~~else  $ ~~~mm = 0 - min ;  $ ~~for ( k = n - 2 ; k >= 1 ; k -- ) {  $ ~~~if ( max < 0 )  $ ~~~~max = s [ k ] ;  $ ~~~else  $ ~~~~max = max + s [ k ] ;  $ ~~~if ( min > 0 )  $ ~~~~min = s [ k ] ;  $ ~~~else  $ ~~~~min = min + s [ k ] ;  $ ~~~if ( k % 2 == 0 && max > mm ) mm = max ;  $ ~~~if ( k % 2 == 1 && 0 - min > mm ) mm = 0 - min ;  $ ~~}  $ ~~cout << mm << endl ;  $ ~}  $ ~return 0 ;  $ }
int main ( ) {  $ ~int x ;  $ ~cin >> x ;  $ ~if ( x == 1 )  $ ~~puts ( "-1" ) ;  $ ~else  $ ~~cout << x << " " << x << endl ;  $ ~return 0 ;  $ }
int a [ 1000900 ] ;  $ int main ( ) {  $ ~int n ;  $ ~while ( cin >> n ) {  $ ~~memset ( a , 0 , sizeof ( a ) ) ;  $ ~~int x ;  $ ~~for ( int i = 0 ; i < n ; i ++ ) {  $ ~~~cin >> x ;  $ ~~~a [ x ] ++ ;  $ ~~}  $ ~~int temp ;  $ ~~int sum = 0 ;  $ ~~for ( int i = 0 ; i < 1000900 ; i ++ ) {  $ ~~~temp = a [ i ] / 2 ;  $ ~~~a [ i + 1 ] = a [ i + 1 ] + temp ;  $ ~~~if ( a [ i ] % 2 == 1 ) sum ++ ;  $ ~~}  $ ~~cout << sum << endl ;  $ ~}  $ ~return 0 ;  $ }
const int N = 105 ;  $ int p [ N ] ;  $ int parent ( int ) ;  $ int main ( ) {  $ ~int n , m ;  $ ~cin >> n >> m ;  $ ~int indep = 0 ;  $ ~int x , y , z ;  $ ~for ( int i = 0 ; i < n ; i ++ ) {  $ ~~cin >> x ;  $ ~~if ( x == 0 ) {  $ ~~~indep ++ ;  $ ~~} else {  $ ~~~cin >> y ;  $ ~~~if ( p [ y ] == 0 ) p [ y ] = y ;  $ ~~~for ( int j = 0 ; j < x - 1 ; j ++ ) {  $ ~~~~cin >> z ;  $ ~~~~if ( p [ z ] == 0 ) p [ z ] = z ;  $ ~~~~if ( parent ( z ) != parent ( y ) ) p [ parent ( z ) ] = y ;  $ ~~~}  $ ~~}  $ ~}  $ ~int set = 0 ;  $ ~for ( int i = 1 ; i <= m ; i ++ ) {  $ ~~if ( p [ i ] == i ) { set ++ ; }  $ ~}  $ ~if ( set != 0 ) set -- ;  $ ~cout << indep + set << endl ;  $ ~return 0 ;  $ }  $ int parent ( int x ) {  $ ~if ( p [ x ] == x ) return x ;  $ ~return parent ( p [ x ] ) ;  $ }
int main ( ) {  $ ~long long int n ;  $ ~cin >> n ;  $ ~long long int arr [ n ] ;  $ ~for ( int i = 0 ; i < n ; i ++ ) { cin >> arr [ i ] ; }  $ ~sort ( arr , arr + n ) ;  $ ~int i = n - 2 , j = n - 1 ;  $ ~long long int ans = 0 ;  $ ~while ( i >= 0 ) {  $ ~~if ( arr [ i ] < arr [ j ] ) {  $ ~~~ans ++ ;  $ ~~~j -- ;  $ ~~~i -- ;  $ ~~} else  $ ~~~i -- ;  $ ~}  $ ~cout << ans << endl ;  $ ~return 0 ;  $ }
string s [ ] = { "C" , "C#" , "D" , "D#" , "E" , "F" , "F#" , "G" , "G#" , "A" , "B" , "H" } ;  $ int d [ 20 ] [ 20 ] ;  $ map < string , int > mp ;  $ int check ( int x , int y , int z ) {  $ ~if ( d [ x ] [ y ] == 4 && d [ y ] [ z ] == 3 ) return 1 ;  $ ~if ( d [ x ] [ y ] == 3 && d [ y ] [ z ] == 4 ) return 2 ;  $ ~return 3 ;  $ }  $ int main ( ) {  $ ~for ( int i = 0 ; i < 12 ; i ++ ) {  $ ~~for ( int j = 0 ; j < 12 ; j ++ ) {  $ ~~~if ( j >= i ) {  $ ~~~~d [ i ] [ j ] = j - i ;  $ ~~~} else {  $ ~~~~d [ i ] [ j ] = j + 12 - i ;  $ ~~~}  $ ~~}  $ ~}  $ ~for ( int i = 0 ; i < 12 ; i ++ ) { mp . insert ( pair < string , int > ( s [ i ] , i ) ) ; }  $ ~string X , Y , Z ;  $ ~int a , b , c ;  $ ~cin >> X >> Y >> Z ;  $ ~a = mp [ X ] ;  $ ~b = mp [ Y ] ;  $ ~c = mp [ Z ] ;  $ ~if ( check ( a , b , c ) == 1 ) {  $ ~~cout << "major" << endl ;  $ ~~return 0 ;  $ ~}  $ ~if ( check ( a , b , c ) == 2 ) {  $ ~~cout << "minor" << endl ;  $ ~~return 0 ;  $ ~}  $ ~if ( check ( a , c , b ) == 1 ) {  $ ~~cout << "major" << endl ;  $ ~~return 0 ;  $ ~}  $ ~if ( check ( a , c , b ) == 2 ) {  $ ~~cout << "minor" << endl ;  $ ~~return 0 ;  $ ~}  $ ~if ( check ( b , a , c ) == 1 ) {  $ ~~cout << "major" << endl ;  $ ~~return 0 ;  $ ~}  $ ~if ( check ( b , a , c ) == 2 ) {  $ ~~cout << "minor" << endl ;  $ ~~return 0 ;  $ ~}  $ ~if ( check ( b , c , a ) == 1 ) {  $ ~~cout << "major" << endl ;  $ ~~return 0 ;  $ ~}  $ ~if ( check ( b , c , a ) == 2 ) {  $ ~~cout << "minor" << endl ;  $ ~~return 0 ;  $ ~}  $ ~if ( check ( c , a , b ) == 1 ) {  $ ~~cout << "major" << endl ;  $ ~~return 0 ;  $ ~}  $ ~if ( check ( c , a , b ) == 2 ) {  $ ~~cout << "minor" << endl ;  $ ~~return 0 ;  $ ~}  $ ~if ( check ( c , b , a ) == 1 ) {  $ ~~cout << "major" << endl ;  $ ~~return 0 ;  $ ~}  $ ~if ( check ( c , b , a ) == 2 ) {  $ ~~cout << "minor" << endl ;  $ ~~return 0 ;  $ ~}  $ ~cout << "strange" << endl ;  $ ~return 0 ;  $ }
const int MAX_N = 100 + 10 ;  $ char _map [ MAX_N ] [ MAX_N ] ;  $ int row [ MAX_N ] , column [ MAX_N ] ;  $ int n ;  $ int main ( ) {  $ ~cin >> n ;  $ ~for ( int i = 1 ; i <= n ; i ++ )  $ ~~for ( int j = 1 ; j <= n ; j ++ ) cin >> _map [ i ] [ j ] ;  $ ~int cnt = 0 ;  $ ~for ( int i = 1 ; i <= n ; i ++ ) {  $ ~~for ( int j = 1 ; j <= n ; j ++ ) {  $ ~~~if ( _map [ i ] [ j ] == '.' ) {  $ ~~~~cnt ++ ;  $ ~~~~row [ i ] = j ;  $ ~~~~break ;  $ ~~~}  $ ~~}  $ ~}  $ ~if ( cnt == n ) {  $ ~~for ( int i = 1 ; i <= n ; i ++ ) cout << i << " " << row [ i ] << endl ;  $ ~~return 0 ;  $ ~}  $ ~cnt = 0 ;  $ ~for ( int j = 1 ; j <= n ; j ++ ) {  $ ~~for ( int i = 1 ; i <= n ; i ++ ) {  $ ~~~if ( _map [ i ] [ j ] == '.' ) {  $ ~~~~cnt ++ ;  $ ~~~~column [ j ] = i ;  $ ~~~~break ;  $ ~~~}  $ ~~}  $ ~}  $ ~if ( cnt == n ) {  $ ~~for ( int j = 1 ; j <= n ; j ++ ) cout << column [ j ] << " " << j << endl ;  $ ~~return 0 ;  $ ~}  $ ~cout << - 1 << endl ;  $ ~return 0 ;  $ }
vector < int > adj [ 101 ] ;  $ int dis = 0 ;  $ bool vis [ 101 ] ;  $ int n ;  $ int gcd ( int a , int b ) {  $ ~if ( b == 0 ) {  $ ~~return a ;  $ ~} else {  $ ~~return gcd ( b , a % b ) ;  $ ~}  $ }  $ int lcm ( int a , int b ) {  $ ~return ( ( a * b ) / gcd ( a , b ) ) ;  $ }  $ vector < int > ans ;  $ void dfs ( int start ) {  $ ~vis [ start ] = true ;  $ ~int size = adj [ start ] . size ( ) ;  $ ~dis ++ ;  $ ~for ( int i = 0 ; i <= size - 1 ; i ++ ) {  $ ~~int v = adj [ start ] [ i ] ;  $ ~~if ( ! vis [ v ] ) { dfs ( v ) ; }  $ ~}  $ }  $ int masuk [ 101 ] ;  $ void lakukan ( ) {  $ ~dis = 0 ;  $ ~for ( int i = 1 ; i <= n ; i ++ ) {  $ ~~if ( ! vis [ i ] ) {  $ ~~~dis = 0 ;  $ ~~~dfs ( i ) ;  $ ~~~ans . push_back ( dis ) ;  $ ~~}  $ ~}  $ ~int size = ans . size ( ) - 1 ;  $ ~for ( int i = 0 ; i <= size ; i ++ ) {  $ ~~if ( ans [ i ] % 2 == 0 ) { ans [ i ] = ans [ i ] / 2 ; }  $ ~}  $ ~int hasil = 1 ;  $ ~for ( int i = 0 ; i <= size ; i ++ ) { hasil = lcm ( hasil , ans [ i ] ) ; }  $ ~cout << hasil << endl ;  $ }  $ int main ( ) {  $ ~cin >> n ;  $ ~memset ( masuk , ( 0 ) , sizeof ( masuk ) ) ;  $ ~memset ( vis , ( false ) , sizeof ( vis ) ) ;  $ ~for ( int i = 1 ; i <= n ; i ++ ) {  $ ~~int x ;  $ ~~cin >> x ;  $ ~~masuk [ x ] ++ ;  $ ~~adj [ i ] . push_back ( x ) ;  $ ~}  $ ~bool bisa = true ;  $ ~for ( int i = 1 ; i <= n ; i ++ ) {  $ ~~if ( masuk [ i ] != 1 ) bisa = false ;  $ ~}  $ ~if ( bisa == false ) {  $ ~~cout << - 1 << endl ;  $ ~} else {  $ ~~lakukan ( ) ;  $ ~}  $ ~return 0 ;  $ }
bool ok ;  $ int main ( ) {  $ ~int n , m , i , a [ 10 ] , b [ 10 ] ;  $ ~cin >> n >> m ;  $ ~for ( i = 0 ; i < n ; i ++ ) { cin >> a [ i ] ; }  $ ~for ( i = 0 ; i < m ; i ++ ) { cin >> b [ i ] ; }  $ ~for ( i = 0 ; i < n ; i ++ ) {  $ ~~for ( int j = 0 ; j < m ; j ++ ) {  $ ~~~if ( a [ i ] == b [ j ] ) {  $ ~~~~if ( ok ) cout << " " ;  $ ~~~~cout << a [ i ] ;  $ ~~~~if ( ok == false ) { ok = true ; }  $ ~~~}  $ ~~}  $ ~}  $ ~cout << endl ;  $ }
int main ( ) {  $ ~string str ;  $ ~cin >> str ;  $ ~string res = "" ;  $ ~long long k = str [ 0 ] - '0' ;  $ ~long long i ;  $ ~res += str [ 0 ] ;  $ ~for ( i = 1 ; i < str . length ( ) ; i ++ ) {  $ ~~if ( str [ i ] - '0' == k ) {  $ ~~~res += str [ i ] ;  $ ~~} else  $ ~~~break ;  $ ~}  $ ~if ( i == str . length ( ) ) {  $ ~~cout << res . substr ( 1 ) << endl ;  $ ~} else {  $ ~~i ++ ;  $ ~~for ( ; i < str . length ( ) ; i ++ ) { res += str [ i ] ; }  $ ~~cout << res << endl ;  $ ~}  $ }
inline unsigned long long bs ( unsigned long long * V , unsigned long long k , unsigned long long a ) {  $ ~unsigned long long j = k / 2 , i = 0 ;  $ ~while ( V [ j ] != a and i < j and j < k ) {  $ ~~if ( a < V [ j ] ) {  $ ~~~k = j ;  $ ~~~j = i + ( j - i ) / 2 ;  $ ~~} else {  $ ~~~i = j ;  $ ~~~j = ( k - j ) / 2 + j ;  $ ~~}  $ ~}  $ ~return j ;  $ }  $ int main ( ) {  $ ~unsigned long long n , k , i = 0 , j , a , c = 0 ;  $ ~unsigned long long A [ 100000 ] ;  $ ~bool B [ 100000 ] = { } ;  $ ~cin >> n >> k ;  $ ~if ( k == 1 ) {  $ ~~cout << n << '\n' ;  $ ~~return 0 ;  $ ~}  $ ~while ( i < n ) {  $ ~~cin >> A [ i ] ;  $ ~~++ i ;  $ ~}  $ ~sort ( A , A + n ) ;  $ ~i = 0 ;  $ ~while ( i < n ) {  $ ~~if ( ! B [ i ] ) {  $ ~~~c ++ ;  $ ~~~a = A [ i ] * k ;  $ ~~~j = bs ( A , n , a ) ;  $ ~~~if ( A [ j ] == a ) { B [ j ] = true ; }  $ ~~}  $ ~~++ i ;  $ ~}  $ ~cout << c << endl ;  $ ~return 0 ;  $ }
vector < int > out ;  $ int main ( ) {  $ ~int N ;  $ ~cin >> N ;  $ ~int reports = 0 ;  $ ~int neg = 0 ;  $ ~for ( int i = 0 ; i < N ; i ++ ) {  $ ~~int A ;  $ ~~cin >> A ;  $ ~~if ( A >= 0 ) {  $ ~~~reports ++ ;  $ ~~} else if ( neg == 2 ) {  $ ~~~out . push_back ( reports ) ;  $ ~~~reports = 1 ;  $ ~~~neg = 1 ;  $ ~~} else {  $ ~~~reports ++ ;  $ ~~~neg ++ ;  $ ~~}  $ ~}  $ ~if ( reports > 0 ) { out . push_back ( reports ) ; }  $ ~cout << out . size ( ) << endl ;  $ ~for ( int i = 0 ; i < out . size ( ) ; i ++ ) {  $ ~~if ( i > 0 ) { cout << " " ; }  $ ~~cout << out [ i ] ;  $ ~}  $ ~cout << endl ;  $ ~return 0 ;  $ }
const int N = 1e5 + 5 ;  $ char str [ N ] ;  $ bool flg [ N ] , f1 , f2 ;  $ int len ;  $ inline void ac ( ) {  $ ~cout << "YES" << endl ;  $ }  $ inline void wa ( ) {  $ ~cout << "NO" << endl ;  $ }  $ inline bool judge1 ( int x ) {  $ ~return ( str [ x ] == 'A' && str [ x + 1 ] == 'B' ) ? true : false ;  $ }  $ inline bool judge2 ( int x ) {  $ ~return ( str [ x ] == 'B' && str [ x + 1 ] == 'A' ) ? true : false ;  $ }  $ inline bool check1 ( int x ) {  $ ~flg [ x ] = flg [ x + 1 ] = true ;  $ ~for ( int i = 0 ; i < len - 1 ; i ++ )  $ ~~if ( ! flg [ i ] && ! flg [ i + 1 ] && judge2 ( i ) ) return true ;  $ ~flg [ x ] = flg [ x + 1 ] = false ;  $ ~return false ;  $ }  $ inline bool check2 ( int x ) {  $ ~flg [ x ] = flg [ x + 1 ] = true ;  $ ~for ( int i = 0 ; i < len - 1 ; i ++ )  $ ~~if ( ! flg [ i ] && ! flg [ i + 1 ] && judge1 ( i ) ) return true ;  $ ~flg [ x ] = flg [ x + 1 ] = false ;  $ ~return false ;  $ }  $ int main ( ) {  $ ~cin >> str ;  $ ~len = strlen ( str ) ;  $ ~memset ( flg , false , sizeof ( flg ) ) ;  $ ~f1 = f2 = false ;  $ ~for ( int i = 0 ; i < len - 1 ; i ++ ) {  $ ~~if ( ! f1 && judge1 ( i ) ) {  $ ~~~f1 = ! f1 ;  $ ~~~if ( check1 ( i ) ) {  $ ~~~~ac ( ) ;  $ ~~~~return 0 ;  $ ~~~}  $ ~~}  $ ~~if ( ! f2 && judge2 ( i ) ) {  $ ~~~f2 = ! f2 ;  $ ~~~if ( check2 ( i ) ) {  $ ~~~~ac ( ) ;  $ ~~~~return 0 ;  $ ~~~}  $ ~~}  $ ~}  $ ~wa ( ) ;  $ }
int main ( ) {  $ ~string path ;  $ ~getline ( cin , path ) ;  $ ~string output ;  $ ~bool flag ( 0 ) ;  $ ~for ( int k = 0 ; k < path . size ( ) ; k ++ ) {  $ ~~if ( path [ k ] != '/' || flag == 0 ) { output += path [ k ] ; }  $ ~~if ( path [ k ] == '/' ) {  $ ~~~flag = 1 ;  $ ~~} else {  $ ~~~flag = 0 ;  $ ~~}  $ ~}  $ ~if ( flag && output . size ( ) > 1 ) { output = output . substr ( 0 , output . size ( ) - 1 ) ; }  $ ~cout << output << endl ;  $ ~return 0 ;  $ }
long long int n , m , c [ 150005 ] , vert , edge ;  $ vector < long long int > adj [ 150005 ] ;  $ void dfs ( long long int v ) {  $ ~edge += adj [ v ] . size ( ) ;  $ ~vert ++ ;  $ ~c [ v ] = 1 ;  $ ~for ( long long int j = 0 ; j < adj [ v ] . size ( ) ; j ++ ) {  $ ~~if ( c [ adj [ v ] [ j ] ] == 0 ) { dfs ( adj [ v ] [ j ] ) ; }  $ ~}  $ }  $ int main ( ) {  $ ~long long int i , x , y ;  $ ~cin >> n >> m ;  $ ~for ( i = 0 ; i < m ; i ++ ) {  $ ~~cin >> x >> y ;  $ ~~adj [ x ] . push_back ( y ) ;  $ ~~adj [ y ] . push_back ( x ) ;  $ ~}  $ ~for ( i = 1 ; i <= n ; i ++ ) {  $ ~~vert = 0 ;  $ ~~edge = 0 ;  $ ~~if ( c [ i ] == 0 ) {  $ ~~~dfs ( i ) ;  $ ~~~if ( vert * ( vert - 1 ) != edge ) cout << "NO\n" , exit ( 0 ) ;  $ ~~}  $ ~}  $ ~cout << "YES\n" ;  $ }
int a , b , c , d , r , h [ 150 ] , p , t , ans ;  $ bool f [ 30 ] ;  $ int main ( ) {  $ ~cin >> a >> b >> c >> d ;  $ ~r = a + b ;  $ ~for ( int i = 1 ; i <= a ; i ++ ) h [ i ] = i ;  $ ~for ( int i = 1 ; i <= b ; i ++ ) h [ a + i ] = a ;  $ ~for ( int i = 1 ; i <= b ; i ++ ) h [ r + i ] = i ;  $ ~for ( int i = 1 ; i <= a ; i ++ ) h [ r + b + i ] = a + i ;  $ ~for ( int i = 1 ; i <= b ; i ++ ) h [ r + a + i ] = h [ r + a ] ;  $ ~if ( b >= a )  $ ~~for ( int i = r + a ; i <= r + r ; i ++ ) h [ i ] ++ ;  $ ~r *= 2 ;  $ ~d = min ( d , c + r ) ;  $ ~for ( int i = c ; i <= d ; i ++ ) {  $ ~~t = h [ ( i - 1 ) % r + 1 ] ;  $ ~~if ( ! f [ t ] ) p ++ ;  $ ~~f [ t ] = true ;  $ ~}  $ ~ans = p ;  $ ~p = 0 ;  $ ~memset ( f , 0 , sizeof ( f ) ) ;  $ ~if ( a - b > 1 && d - c + 1 > a + b ) {  $ ~~for ( int j = 1 ; j <= b ; j ++ ) h [ a + j ] = h [ b + 1 ] ;  $ ~~for ( int j = 1 ; j <= a ; j ++ ) {  $ ~~~int k = 0 ;  $ ~~~while ( 1 ) {  $ ~~~~k ++ ;  $ ~~~~bool flag = true ;  $ ~~~~for ( int i = b + 1 ; i < a + b + j ; i ++ )  $ ~~~~~if ( h [ i ] == k ) flag = false ;  $ ~~~~if ( flag ) break ;  $ ~~~}  $ ~~~h [ a + b + j ] = k ;  $ ~~}  $ ~~for ( int j = 1 ; j <= b ; j ++ ) h [ a + a + b + j ] = h [ a + b + b + 1 ] ;  $ ~}  $ ~for ( int i = c ; i <= d ; i ++ ) {  $ ~~t = h [ ( i - 1 ) % r + 1 ] ;  $ ~~if ( ! f [ t ] ) p ++ ;  $ ~~f [ t ] = true ;  $ ~}  $ ~cout << min ( p , ans ) << endl ;  $ }
const long long INF = 9223372036854775807 LL ;  $ const long double PI = acos ( - 1 ) ;  $ const int MAX_N = 1e+6 ;  $ const int ALPH = 26 ;  $ const string alph = "abcdefghijklmnopqrstuvwxyz" ;  $ void count ( int & pos , string & s , int & xd ) {  $ ~int l = s . size ( ) ;  $ ~while ( pos < l ) {  $ ~~if ( s [ pos ] == '|' ) {  $ ~~~xd ++ ;  $ ~~~pos ++ ;  $ ~~} else  $ ~~~break ;  $ ~}  $ ~pos ++ ;  $ }  $ void print ( int a , int b , int c ) {  $ ~for ( int i = 0 ; i < a ; i ++ ) cout << "|" ;  $ ~cout << "+" ;  $ ~for ( int i = 0 ; i < b ; i ++ ) cout << "|" ;  $ ~cout << "=" ;  $ ~for ( int i = 0 ; i < c ; i ++ ) cout << "|" ;  $ ~cout << endl ;  $ }  $ bool check ( int a , int b , int c ) {  $ ~if ( a <= 0 or b <= 0 or c <= 0 ) return false ;  $ ~return a + b == c ;  $ }  $ void solve ( ) {  $ ~string s ;  $ ~cin >> s ;  $ ~int l = s . size ( ) ;  $ ~int a , b , c ;  $ ~a = b = c = 0 ;  $ ~int pos = 0 ;  $ ~count ( pos , s , a ) ;  $ ~count ( pos , s , b ) ;  $ ~count ( pos , s , c ) ;  $ ~if ( a + b == c ) {  $ ~~print ( a , b , c ) ;  $ ~} else {  $ ~~if ( check ( a + 1 , b - 1 , c ) ) {  $ ~~~print ( a + 1 , b - 1 , c ) ;  $ ~~~return ;  $ ~~}  $ ~~if ( check ( a + 1 , b , c - 1 ) ) {  $ ~~~print ( a + 1 , b , c - 1 ) ;  $ ~~~return ;  $ ~~}  $ ~~if ( check ( a - 1 , b + 1 , c ) ) {  $ ~~~print ( a - 1 , b + 1 , c ) ;  $ ~~~return ;  $ ~~}  $ ~~if ( check ( a , b + 1 , c - 1 ) ) {  $ ~~~print ( a , b + 1 , c - 1 ) ;  $ ~~~return ;  $ ~~}  $ ~~if ( check ( a - 1 , b , c + 1 ) ) {  $ ~~~print ( a - 1 , b , c + 1 ) ;  $ ~~~return ;  $ ~~}  $ ~~if ( check ( a , b - 1 , c + 1 ) ) {  $ ~~~print ( a , b - 1 , c + 1 ) ;  $ ~~~return ;  $ ~~}  $ ~~cout << "Impossible" << endl ;  $ ~}  $ }  $ int main ( ) {  $ ~int t = 1 ;  $ ~while ( t -- ) solve ( ) ;  $ ~return 0 ;  $ }
const int MAXN = 55 ;  $ char mp [ MAXN ] [ MAXN ] ;  $ bool vis [ MAXN ] [ MAXN ] ;  $ const int go [ 4 ] [ 2 ] = { 0 , 1 , 0 , - 1 , - 1 , 0 , 1 , 0 } ;  $ int n , m , all = 0 ;  $ int dfs ( int x , int y ) {  $ ~int ans = 1 ;  $ ~for ( int i = 0 ; i < 4 ; i ++ ) {  $ ~~int xx = x + go [ i ] [ 0 ] , yy = y + go [ i ] [ 1 ] ;  $ ~~if ( mp [ xx ] [ yy ] == '#' && ! vis [ xx ] [ yy ] ) {  $ ~~~vis [ xx ] [ yy ] = true ;  $ ~~~ans += dfs ( x + go [ i ] [ 0 ] , y + go [ i ] [ 1 ] ) ;  $ ~~}  $ ~}  $ ~return ans ;  $ }  $ int solve ( ) {  $ ~if ( all <= 2 ) return - 1 ;  $ ~for ( int i = 1 ; i <= n ; i ++ ) {  $ ~~for ( int j = 1 ; j <= m ; j ++ ) {  $ ~~~if ( mp [ i ] [ j ] == '#' ) {  $ ~~~~mp [ i ] [ j ] = '.' ;  $ ~~~~int t = 0 ;  $ ~~~~for ( int k = 0 ; k < 4 ; k ++ ) {  $ ~~~~~int xx = i + go [ k ] [ 0 ] , yy = j + go [ k ] [ 1 ] ;  $ ~~~~~if ( mp [ xx ] [ yy ] == '#' ) {  $ ~~~~~~memset ( vis , 0 , sizeof ( vis ) ) ;  $ ~~~~~~vis [ xx ] [ yy ] = true ;  $ ~~~~~~t = dfs ( xx , yy ) ;  $ ~~~~~~break ;  $ ~~~~~}  $ ~~~~}  $ ~~~~mp [ i ] [ j ] = '#' ;  $ ~~~~if ( t == 0 ) return - 1 ;  $ ~~~~if ( t != all - 1 ) { return 1 ; }  $ ~~~}  $ ~~}  $ ~}  $ ~return 2 ;  $ }  $ int main ( ) {  $ ~cin >> n >> m ;  $ ~memset ( mp , '.' , sizeof ( mp ) ) ;  $ ~for ( int i = 1 ; i <= n ; i ++ ) {  $ ~~for ( int j = 1 ; j <= m ; j ++ ) {  $ ~~~cin >> mp [ i ] [ j ] ;  $ ~~~if ( mp [ i ] [ j ] == '#' ) ++ all ;  $ ~~}  $ ~}  $ ~cout << solve ( ) << endl ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~int n ;  $ ~string s ;  $ ~cin >> n >> s ;  $ ~int one = 0 , zero = 0 ;  $ ~for ( int i = 0 ; i < n ; i ++ ) {  $ ~~if ( s [ i ] == '0' )  $ ~~~zero ++ ;  $ ~~else  $ ~~~one ++ ;  $ ~}  $ ~if ( one != 0 ) cout << "1" ;  $ ~for ( int i = 0 ; i < zero ; i ++ ) cout << "0" ;  $ ~cout << endl ;  $ ~return 0 ;  $ }
int cnt [ 256 ] ;  $ int main ( ) {  $ ~string word ;  $ ~cin >> word ;  $ ~for ( int i = 0 ; i < word . size ( ) ; ++ i ) ++ cnt [ word [ i ] ] ;  $ ~int ans = cnt [ 'i' ] ;  $ ~ans = min ( ans , cnt [ 't' ] ) ;  $ ~ans = min ( ans , ( cnt [ 'n' ] - 1 ) / 2 ) ;  $ ~ans = min ( ans , cnt [ 'e' ] / 3 ) ;  $ ~cout << ans << endl ;  $ ~return EXIT_SUCCESS ;  $ }
const int N = 110 ;  $ int n , r , cnt [ N ] ;  $ int main ( ) {  $ ~cin >> n ;  $ ~for ( int i = 0 ; i < n ; i ++ ) {  $ ~~cin >> r ;  $ ~~for ( int j = 0 ; j < r ; j ++ ) {  $ ~~~int tmp ;  $ ~~~cin >> tmp ;  $ ~~~cnt [ tmp ] ++ ;  $ ~~}  $ ~}  $ ~int flag = 0 ;  $ ~for ( int i = 0 ; i < N ; i ++ ) {  $ ~~if ( cnt [ i ] == n ) {  $ ~~~if ( ! flag ) {  $ ~~~~cout << i ;  $ ~~~~flag = 1 ;  $ ~~~} else  $ ~~~~cout << " " << i ;  $ ~~}  $ ~}  $ ~cout << endl ;  $ }
int a [ 1000100 ] ;  $ int main ( ) {  $ ~int n ;  $ ~while ( cin >> n ) {  $ ~~while ( n -- ) {  $ ~~~int b ;  $ ~~~cin >> b ;  $ ~~~a [ b ] ++ ;  $ ~~}  $ ~~int num = 0 ;  $ ~~for ( int i = 0 ; i <= 1000100 - 1 ; i ++ ) {  $ ~~~a [ i + 1 ] += a [ i ] / 2 ;  $ ~~~a [ i ] = a [ i ] % 2 ;  $ ~~~num += a [ i ] ;  $ ~~}  $ ~~cout << num << endl ;  $ ~}  $ }
long long dp [ 5000 ] ;  $ map < long long , long long > m ;  $ int main ( ) {  $ ~long long n ;  $ ~cin >> n ;  $ ~string s ;  $ ~cin >> s ;  $ ~long long cnt = 0 ;  $ ~for ( int i = 0 ; i < s . size ( ) ; i ++ ) {  $ ~~if ( i != 0 )  $ ~~~dp [ i + 1 ] = dp [ i ] + ( s [ i ] - '0' ) ;  $ ~~else  $ ~~~dp [ i + 1 ] = s [ i ] - '0' ;  $ ~}  $ ~for ( int i = 1 ; i <= s . size ( ) ; i ++ ) {  $ ~~for ( int j = 1 ; j <= i ; j ++ ) {  $ ~~~m [ dp [ i ] - dp [ j - 1 ] ] ++ ;  $ ~~~cnt ++ ;  $ ~~}  $ ~}  $ ~if ( n == 0 ) {  $ ~~long long ans2 = m [ 0 ] * 2 * cnt - m [ 0 ] * m [ 0 ] ;  $ ~~cout << ans2 << endl ;  $ ~~return 0 ;  $ ~}  $ ~long long ans = 0 ;  $ ~for ( int i = 1 ; i <= sqrt ( n ) ; i ++ ) {  $ ~~if ( n % i == 0 && ! ( i == sqrt ( n ) ) ) {  $ ~~~ans += 2 * ( m [ i ] * m [ n / i ] ) ;  $ ~~} else if ( i == sqrt ( n ) ) {  $ ~~~ans += ( m [ i ] * m [ n / i ] ) ;  $ ~~}  $ ~}  $ ~cout << ans << endl ;  $ ~return 0 ;  $ }
const int inf = 0 x3f3f3f3f ;  $ const long long linf = 1e18 ;  $ const int N = 100000 + 10 ;  $ const double eps = 1e-10 ;  $ const int mo = 1e9 + 7 ;  $ int n , m ;  $ int st [ N ] ;  $ vector < int > g [ N ] , r [ N ] ;  $ bool vis [ N ] , path [ N ] [ 2 ] ;  $ void dfs ( int x , vector < int > g [ ] , int k ) {  $ ~vis [ x ] = path [ x ] [ k ] = 1 ;  $ ~for ( int i = 0 ; i < g [ x ] . size ( ) ; i ++ ) {  $ ~~int y = g [ x ] [ i ] ;  $ ~~if ( ! vis [ y ] ) {  $ ~~~if ( st [ y ] == 1 ) {  $ ~~~~if ( k == 1 ) path [ y ] [ k ] = 1 ;  $ ~~~~continue ;  $ ~~~}  $ ~~~dfs ( y , g , k ) ;  $ ~~}  $ ~}  $ }  $ int main ( ) {  $ ~cin >> n >> m ;  $ ~for ( int i = 1 ; i <= n ; i ++ ) cin >> st [ i ] ;  $ ~for ( int i = 1 ; i <= m ; i ++ ) {  $ ~~int x , y ;  $ ~~cin >> x >> y ;  $ ~~g [ x ] . push_back ( y ) ;  $ ~~r [ y ] . push_back ( x ) ;  $ ~}  $ ~for ( int i = 1 ; i <= n ; i ++ )  $ ~~if ( ! vis [ i ] && st [ i ] == 1 ) dfs ( i , g , 0 ) ;  $ ~memset ( vis , 0 , sizeof vis ) ;  $ ~for ( int i = 1 ; i <= n ; i ++ )  $ ~~if ( ! vis [ i ] && st [ i ] == 2 ) dfs ( i , r , 1 ) ;  $ ~for ( int i = 1 ; i <= n ; i ++ ) {  $ ~~if ( path [ i ] [ 0 ] && path [ i ] [ 1 ] )  $ ~~~cout << 1 << endl ;  $ ~~else  $ ~~~cout << 0 << endl ;  $ ~}  $ ~return 0 ;  $ }
int main ( ) {  $ ~string a ;  $ ~long long b , t , c = 0 ;  $ ~getline ( cin , a ) ;  $ ~b = a . find ( '=' ) ;  $ ~t = b ;  $ ~b += 2 ;  $ ~b = a . size ( ) - b + 1 ;  $ ~for ( long long i = 0 ; i < t ; ++ i ) {  $ ~~if ( a [ i ] == '|' ) { c ++ ; }  $ ~}  $ ~if ( c + 1 == b - 1 ) {  $ ~~cout << '|' ;  $ ~~for ( long long i = 0 ; i < a . size ( ) - 1 ; ++ i ) { cout << a [ i ] ; }  $ ~~cout << endl ;  $ ~} else if ( c == b ) {  $ ~~cout << a << endl ;  $ ~} else if ( c == b + 2 ) {  $ ~~long long z = a . find ( '+' ) ;  $ ~~if ( z > 1 ) {  $ ~~~for ( long long i = 1 ; i < a . size ( ) ; i ++ ) { cout << a [ i ] ; }  $ ~~~cout << '|' << endl ;  $ ~~} else {  $ ~~~for ( long long i = 0 ; i < a . size ( ) ; i ++ ) {  $ ~~~~if ( i == z + 1 ) { continue ; }  $ ~~~~cout << a [ i ] ;  $ ~~~}  $ ~~~cout << '|' << endl ;  $ ~~}  $ ~} else {  $ ~~cout << "Impossible" << endl ;  $ ~}  $ ~return 0 ;  $ }
int main ( ) {  $ ~long long N , M , K , L , res ;  $ ~cin >> N >> M >> K >> L ;  $ ~if ( K + L > N )  $ ~~res = - 1 ;  $ ~else {  $ ~~if ( ( K + L ) % M )  $ ~~~res = ( K + L ) / M + 1 ;  $ ~~else  $ ~~~res = ( K + L ) / M ;  $ ~~if ( res * M > N ) res = - 1 ;  $ ~}  $ ~cout << res << endl ;  $ ~return 0 ;  $ }
const int MAX = 1e7 ;  $ long long a [ MAX ] , sushu [ MAX ] , huiwen [ MAX ] ;  $ void init ( ) {  $ ~a [ 1 ] = 1 ;  $ ~a [ 0 ] = 1 ;  $ ~for ( int i = 2 ; i <= 10000 ; i ++ ) {  $ ~~if ( ! a [ i ] ) {  $ ~~~for ( int j = i ; i * j < MAX ; j ++ ) { a [ i * j ] = 1 ; }  $ ~~}  $ ~}  $ }  $ int panduan ( long long x ) {  $ ~long long w = x ;  $ ~long long y = 0 ;  $ ~while ( w != 0 ) {  $ ~~y = y * 10 + w % 10 ;  $ ~~w /= 10 ;  $ ~}  $ ~if ( y == x )  $ ~~return 1 ;  $ ~else  $ ~~return 0 ;  $ }  $ int main ( ) {  $ ~init ( ) ;  $ ~for ( int i = 1 ; i < MAX ; i ++ ) {  $ ~~if ( a [ i ] )  $ ~~~sushu [ i ] = sushu [ i - 1 ] ;  $ ~~else  $ ~~~sushu [ i ] = sushu [ i - 1 ] + 1 ;  $ ~~if ( panduan ( i ) )  $ ~~~huiwen [ i ] = huiwen [ i - 1 ] + 1 ;  $ ~~else  $ ~~~huiwen [ i ] = huiwen [ i - 1 ] ;  $ ~}  $ ~long long p , q ;  $ ~cin >> p >> q ;  $ ~for ( int i = MAX - 1 ; i >= 0 ; i -- ) {  $ ~~if ( sushu [ i ] * q <= huiwen [ i ] * p ) {  $ ~~~if ( i == 0 )  $ ~~~~cout << "Palindromic tree is better than splay tree" << endl ;  $ ~~~else  $ ~~~~cout << i << endl ;  $ ~~~return 0 ;  $ ~~}  $ ~}  $ ~return 0 ;  $ }
int main ( ) {  $ ~char s1 [ 10 ] , s2 [ 10 ] ;  $ ~int a , b ;  $ ~cin >> s1 >> s2 ;  $ ~if ( s1 [ 0 ] == 'm' ) a = 1 ;  $ ~if ( s1 [ 0 ] == 't' && s1 [ 1 ] == 'u' ) a = 2 ;  $ ~if ( s1 [ 0 ] == 'w' ) a = 3 ;  $ ~if ( s1 [ 0 ] == 't' && s1 [ 1 ] == 'h' ) a = 4 ;  $ ~if ( s1 [ 0 ] == 'f' ) a = 5 ;  $ ~if ( s1 [ 0 ] == 's' && s1 [ 1 ] == 'a' ) a = 6 ;  $ ~if ( s1 [ 0 ] == 's' && s1 [ 1 ] == 'u' ) a = 7 ;  $ ~if ( s2 [ 0 ] == 'm' ) b = 1 ;  $ ~if ( s2 [ 0 ] == 't' && s2 [ 1 ] == 'u' ) b = 2 ;  $ ~if ( s2 [ 0 ] == 'w' ) b = 3 ;  $ ~if ( s2 [ 0 ] == 't' && s2 [ 1 ] == 'h' ) b = 4 ;  $ ~if ( s2 [ 0 ] == 'f' ) b = 5 ;  $ ~if ( s2 [ 0 ] == 's' && s2 [ 1 ] == 'a' ) b = 6 ;  $ ~if ( s2 [ 0 ] == 's' && s2 [ 1 ] == 'u' ) b = 7 ;  $ ~if ( a > b ) b += 7 ;  $ ~int flag = 0 ;  $ ~if ( ( b - a ) == 2 || ( b - a ) == 3 || ( a == b ) ) flag = 1 ;  $ ~if ( flag == 1 )  $ ~~cout << "YES" << endl ;  $ ~else  $ ~~cout << "NO" << endl ;  $ ~return 0 ;  $ }
int arr [ 6969 ] , change [ 6969 ] , temp , cyka [ 6969 ] , blyat ;  $ int main ( ) {  $ ~int c ;  $ ~cin >> c ;  $ ~for ( int a = 0 ; a < c ; a ++ ) {  $ ~~cin >> blyat ;  $ ~~change [ a ] = blyat ;  $ ~~arr [ a ] = blyat ;  $ ~}  $ ~for ( int a = 0 ; a < c ; a ++ ) {  $ ~~temp = 1 ;  $ ~~for ( int x = 0 ; x < c ; x ++ ) {  $ ~~~if ( change [ a ] < arr [ x ] ) temp ++ ;  $ ~~~cyka [ a ] = temp ;  $ ~~}  $ ~}  $ ~for ( int a = 0 ; a < c ; a ++ ) {  $ ~~if ( a == c - 1 )  $ ~~~cout << cyka [ a ] << "\n" ;  $ ~~else  $ ~~~cout << cyka [ a ] << " " ;  $ ~}  $ }
int main ( ) {  $ ~int n ;  $ ~int a [ 107 ] ;  $ ~int t = 0 ;  $ ~cin >> n ;  $ ~for ( int i = 1 ; i < n + 1 ; i ++ ) { cin >> a [ i ] ; }  $ ~if ( n == 1 ) {  $ ~~cout << 0 << endl ;  $ ~} else {  $ ~~for ( int i = 1 ; i < n + 1 ; i ++ ) {  $ ~~~for ( int j = 1 ; j < n + 1 ; j ++ ) {  $ ~~~~if ( abs ( a [ j ] - a [ i ] ) == abs ( j - i ) && abs ( i - j ) >= t ) {  $ ~~~~~if ( ( a [ i ] == 1 || a [ j ] == 1 ) || ( a [ i ] == 1000 || a [ j ] == 1000 ) ) {  $ ~~~~~~t = abs ( i - j ) + 1 ;  $ ~~~~~} else {  $ ~~~~~~t = abs ( i - j ) ;  $ ~~~~~}  $ ~~~~}  $ ~~~}  $ ~~}  $ ~~if ( t - 1 >= 1 ) {  $ ~~~cout << t - 1 << endl ;  $ ~~} else  $ ~~~cout << 0 << endl ;  $ ~}  $ ~return 0 ;  $ }
set < int > amulets ;  $ set < int > taken ;  $ int main ( ) {  $ ~int N ;  $ ~cin >> N ;  $ ~for ( int i = 0 ; i < N ; i ++ ) {  $ ~~if ( i > 0 ) {  $ ~~~string starstar ;  $ ~~~cin >> starstar ;  $ ~~}  $ ~~int A , B ;  $ ~~cin >> A >> B ;  $ ~~int num = A * 100 + B % 10 * 10 + B / 10 ;  $ ~~if ( ! taken . count ( num ) ) {  $ ~~~amulets . insert ( num ) ;  $ ~~~for ( int j = 0 ; j < 4 ; j ++ ) {  $ ~~~~taken . insert ( num ) ;  $ ~~~~num = ( num / 1000 ) + ( num * 10 % 10000 ) ;  $ ~~~}  $ ~~}  $ ~}  $ ~cout << amulets . size ( ) << endl ;  $ ~return 0 ;  $ }
int n ;  $ char s [ 150 ] [ 150 ] ;  $ int r [ 150 ] , c [ 150 ] ;  $ int main ( ) {  $ ~while ( cin >> n ) {  $ ~~memset ( r , 0 , sizeof ( r ) ) ;  $ ~~memset ( c , 0 , sizeof ( c ) ) ;  $ ~~for ( int i = 1 ; i <= n ; i ++ ) cin >> s [ i ] + 1 ;  $ ~~int x , y ;  $ ~~x = y = 0 ;  $ ~~bool flag = false ;  $ ~~for ( int i = 1 ; i <= n ; i ++ ) {  $ ~~~for ( int j = 1 ; j <= n ; j ++ ) {  $ ~~~~if ( s [ i ] [ j ] == 'E' ) {  $ ~~~~~r [ i ] ++ ;  $ ~~~~~c [ j ] ++ ;  $ ~~~~~if ( r [ i ] == n ) x = 1 ;  $ ~~~~~if ( c [ j ] == n ) y = 1 ;  $ ~~~~~if ( x && y ) {  $ ~~~~~~cout << "-1" << endl ;  $ ~~~~~~flag = true ;  $ ~~~~~~return 0 ;  $ ~~~~~}  $ ~~~~}  $ ~~~}  $ ~~}  $ ~~if ( x ) {  $ ~~~for ( int j = 1 ; j <= n ; j ++ ) {  $ ~~~~for ( int i = 1 ; i <= n ; i ++ ) {  $ ~~~~~if ( s [ i ] [ j ] == '.' ) {  $ ~~~~~~cout << i << " " << j << endl ;  $ ~~~~~~break ;  $ ~~~~~}  $ ~~~~}  $ ~~~}  $ ~~} else {  $ ~~~for ( int i = 1 ; i <= n ; i ++ ) {  $ ~~~~for ( int j = 1 ; j <= n ; j ++ ) {  $ ~~~~~if ( s [ i ] [ j ] == '.' ) {  $ ~~~~~~cout << i << " " << j << endl ;  $ ~~~~~~break ;  $ ~~~~~}  $ ~~~~}  $ ~~~}  $ ~~}  $ ~}  $ ~return 0 ;  $ }
int main ( ) {  $ ~string s ;  $ ~cin >> s ;  $ ~int a = 0 , b = 0 , c = 0 ;  $ ~for ( int i = 0 ; i < s . size ( ) ; i ++ ) {  $ ~~if ( s [ i ] == 'a' ) a ++ ;  $ ~~if ( s [ i ] == 'b' ) b ++ ;  $ ~~if ( s [ i ] == 'c' ) c ++ ;  $ ~}  $ ~string t = s ;  $ ~sort ( t . begin ( ) , t . end ( ) ) ;  $ ~if ( t != s || a == 0 || b == 0 )  $ ~~puts ( "NO" ) ;  $ ~else {  $ ~~if ( a == c || b == c )  $ ~~~puts ( "YES" ) ;  $ ~~else  $ ~~~puts ( "NO" ) ;  $ ~}  $ ~return 0 ;  $ }
long long int a [ 100050 ] = { 0 } ;  $ int main ( ) {  $ ~int p = 0 , res = 0 , ui = 0 ;  $ ~int T ;  $ ~cin >> T ;  $ ~while ( T -- ) cin >> a [ p ++ ] ;  $ ~sort ( a , a + p ) ;  $ ~for ( int i = 0 ; i <= p - 1 ; i ++ ) {  $ ~~while ( ui < p && a [ ui ] <= a [ i ] ) ui ++ ;  $ ~~if ( ui < p ) res ++ , ui ++ ;  $ ~}  $ ~cout << res << endl ;  $ ~return 0 ;  $ }
const int MAXN = 100 ;  $ string s [ MAXN + 2 ] ;  $ bool contenido [ MAXN + 2 ] ;  $ void checa ( string & w , int T , string & s , int N ) {  $ ~int lim = T - N + 1 ;  $ ~bool pasa ;  $ ~char c1 , c2 ;  $ ~for ( int i = 0 ; i < lim ; i ++ ) {  $ ~~pasa = true ;  $ ~~for ( int j = 0 ; j < N ; j ++ ) {  $ ~~~c1 = w [ i + j ] ;  $ ~~~c1 = tolower ( c1 ) ;  $ ~~~c2 = s [ j ] ;  $ ~~~c2 = tolower ( c2 ) ;  $ ~~~if ( c1 != c2 ) {  $ ~~~~pasa = false ;  $ ~~~~break ;  $ ~~~}  $ ~~}  $ ~~if ( pasa ) {  $ ~~~for ( int j = 0 ; j < N ; j ++ ) { contenido [ i + j ] = true ; }  $ ~~}  $ ~}  $ }  $ void marca_cambiables ( string & w , int N ) {  $ ~int T = w . size ( ) , M ;  $ ~for ( int i = 1 ; i <= N ; i ++ ) {  $ ~~M = s [ i ] . size ( ) ;  $ ~~if ( M <= T ) { checa ( w , T , s [ i ] , M ) ; }  $ ~}  $ }  $ string convierte ( string & w , char letra ) {  $ ~string ret = "" ;  $ ~int N = w . size ( ) ;  $ ~char cambio = 'a' , nuevo ;  $ ~if ( letra == 'a' ) cambio = 'b' ;  $ ~bool mayuscula ;  $ ~for ( int i = 0 ; i < N ; i ++ ) {  $ ~~mayuscula = ( toupper ( w [ i ] ) == w [ i ] ) ;  $ ~~if ( contenido [ i ] ) {  $ ~~~if ( tolower ( w [ i ] ) == tolower ( letra ) ) {  $ ~~~~nuevo = cambio ;  $ ~~~} else {  $ ~~~~nuevo = letra ;  $ ~~~}  $ ~~} else {  $ ~~~nuevo = w [ i ] ;  $ ~~}  $ ~~if ( mayuscula )  $ ~~~nuevo = toupper ( nuevo ) ;  $ ~~else  $ ~~~nuevo = tolower ( nuevo ) ;  $ ~~ret += nuevo ;  $ ~}  $ ~return ret ;  $ }  $ int main ( ) {  $ ~int N ;  $ ~cin >> N ;  $ ~for ( int i = 1 ; i <= N ; i ++ ) { cin >> s [ i ] ; }  $ ~string w ;  $ ~cin >> w ;  $ ~marca_cambiables ( w , N ) ;  $ ~char letter ;  $ ~cin >> letter ;  $ ~cout << convierte ( w , letter ) << "\n" ;  $ ~return 0 ;  $ }
long long int ceil ( long long int n , long long int m ) {  $ ~return n % m ? n / m + 1 : n / m ;  $ }  $ int main ( ) {  $ ~long long int n , m , k , l ;  $ ~cin >> n >> m >> k >> l ;  $ ~if ( m > n || n - k < l ) return cout << - 1 << endl , 0 ;  $ ~long long int sum = ceil ( ( l + k ) , m ) * m ;  $ ~if ( sum > n ) return cout << "-1" << endl , 0 ;  $ ~cout << sum / m << endl ;  $ }
int main ( ) {  $ ~int n , s , a , b , c , d , pos = 1 ;  $ ~cin >> n >> a >> b >> c >> d ;  $ ~s = a + b + c + d ;  $ ~n -- ;  $ ~while ( n -- ) {  $ ~~cin >> a >> b >> c >> d ;  $ ~~if ( a + b + c + d > s ) { pos ++ ; }  $ ~}  $ ~cout << pos << '\n' ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~int x [ 5 ] [ 5 ] ;  $ ~bool f = false ;  $ ~for ( int i = 1 ; i <= 4 ; i ++ ) {  $ ~~for ( int j = 1 ; j <= 4 ; j ++ ) { cin >> x [ i ] [ j ] ; }  $ ~}  $ ~for ( int i = 1 ; i <= 4 ; i ++ ) {  $ ~~if ( x [ i ] [ 4 ] ) {  $ ~~~for ( int j = 1 ; j <= 3 ; j ++ ) {  $ ~~~~if ( x [ i ] [ j ] ) f = true ;  $ ~~~}  $ ~~~for ( int j = 1 ; j <= 3 ; j ++ ) {  $ ~~~~int p = i + j ;  $ ~~~~if ( p > 4 ) p -= 4 ;  $ ~~~~if ( x [ p ] [ j ] ) f = true ;  $ ~~~}  $ ~~}  $ ~}  $ ~if ( f )  $ ~~cout << "YES" << endl ;  $ ~else  $ ~~cout << "NO" << endl ;  $ }
int main ( ) {  $ ~int a , b , c , d ;  $ ~cin >> a >> b >> c >> d ;  $ ~for ( int t = 0 ; t < 20000 ; t ++ ) {  $ ~~if ( t >= b && t >= d && ( t - b ) % a == 0 && ( t - d ) % c == 0 ) {  $ ~~~cout << t << endl ;  $ ~~~return 0 ;  $ ~~}  $ ~}  $ ~cout << - 1 << endl ;  $ }
int main ( ) {  $ ~int n , i , temp , cnt = - 1 , res = 0 ;  $ ~vector < int > a ;  $ ~cin >> n ;  $ ~a . push_back ( 0 ) ;  $ ~a . push_back ( 0 ) ;  $ ~for ( i = 0 ; i < n ; i ++ ) {  $ ~~cin >> temp ;  $ ~~a . push_back ( temp ) ;  $ ~}  $ ~a . push_back ( 1001 ) ;  $ ~for ( i = 2 ; i <= n + 2 ; i ++ ) {  $ ~~if ( a [ i ] == a [ i - 1 ] + 1 ) {  $ ~~~cnt ++ ;  $ ~~} else {  $ ~~~if ( cnt > res ) { res = cnt ; }  $ ~~~cnt = - 1 ;  $ ~~}  $ ~}  $ ~if ( cnt > res ) { res = cnt ; }  $ ~cout << res << endl ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~map < string , int > mp ;  $ ~string x [ 3 ] ;  $ ~cin >> x [ 0 ] >> x [ 1 ] >> x [ 2 ] ;  $ ~mp [ "C" ] = 0 ;  $ ~mp [ "C#" ] = 1 ;  $ ~mp [ "D" ] = 2 ;  $ ~mp [ "D#" ] = 3 ;  $ ~mp [ "E" ] = 4 ;  $ ~mp [ "F" ] = 5 ;  $ ~mp [ "F#" ] = 6 ;  $ ~mp [ "G" ] = 7 ;  $ ~mp [ "G#" ] = 8 ;  $ ~mp [ "A" ] = 9 ;  $ ~mp [ "B" ] = 10 ;  $ ~mp [ "H" ] = 11 ;  $ ~int a , b ;  $ ~for ( int i = 0 ; i < 3 ; i ++ ) {  $ ~~for ( int j = 0 ; j < 3 ; j ++ ) {  $ ~~~for ( int k = 0 ; k < 3 ; k ++ ) {  $ ~~~~if ( i != j && j != k && i != k ) {  $ ~~~~~if ( mp [ x [ j ] ] >= mp [ x [ i ] ] )  $ ~~~~~~a = mp [ x [ j ] ] - mp [ x [ i ] ] ;  $ ~~~~~else if ( mp [ x [ j ] ] < mp [ x [ i ] ] )  $ ~~~~~~a = ( 12 - mp [ x [ i ] ] ) + ( mp [ x [ j ] ] - 0 ) ;  $ ~~~~~if ( mp [ x [ k ] ] >= mp [ x [ j ] ] )  $ ~~~~~~b = mp [ x [ k ] ] - mp [ x [ j ] ] ;  $ ~~~~~else if ( mp [ x [ k ] ] < mp [ x [ j ] ] )  $ ~~~~~~b = ( 12 - mp [ x [ j ] ] ) + ( mp [ x [ k ] ] - 0 ) ;  $ ~~~~~if ( a == 3 && b == 4 ) {  $ ~~~~~~cout << "minor" << endl ;  $ ~~~~~~return 0 ;  $ ~~~~~} else if ( a == 4 && b == 3 ) {  $ ~~~~~~cout << "major" << endl ;  $ ~~~~~~return 0 ;  $ ~~~~~}  $ ~~~~}  $ ~~~}  $ ~~}  $ ~}  $ ~cout << "strange" << endl ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~int a , b , c , i , j , k , n , p , q , x , y , sum , ct , ct1 , m , mid , l , r , len , ans ;  $ ~char ch ;  $ ~double d ;  $ ~string str1 , str2 , str ;  $ ~bool bl , bl1 ;  $ ~while ( cin >> n >> k ) {  $ ~~cin >> str ;  $ ~~len = 0 ;  $ ~~for ( c = 1 ; c < n ; c ++ ) {  $ ~~~i = 0 , j = n - c ;  $ ~~~while ( j < n && str [ i ] == str [ j ] ) ++ i , ++ j ;  $ ~~~if ( j == n ) len = c ;  $ ~~}  $ ~~string tt , tl = "" ;  $ ~~tt = str . substr ( 0 , len ) ;  $ ~~while ( k -- ) tl += str . substr ( len ) ;  $ ~~cout << tt << tl << endl ;  $ ~}  $ }
int main ( ) {  $ ~int cnt [ 3 ] = { 0 } ;  $ ~int n ;  $ ~cin >> n ;  $ ~for ( int i = 0 ; i < n ; i ++ ) {  $ ~~int x ;  $ ~~cin >> x ;  $ ~~if ( x == 25 ) cnt [ 0 ] ++ ;  $ ~~if ( x == 50 ) {  $ ~~~if ( cnt [ 0 ] >= 1 ) {  $ ~~~~cnt [ 0 ] -- ;  $ ~~~~cnt [ 1 ] ++ ;  $ ~~~} else {  $ ~~~~cout << "NO\n" ;  $ ~~~~return 0 ;  $ ~~~}  $ ~~}  $ ~~if ( x == 100 ) {  $ ~~~if ( cnt [ 1 ] >= 1 && cnt [ 0 ] >= 1 ) {  $ ~~~~cnt [ 0 ] -- ;  $ ~~~~cnt [ 1 ] -- ;  $ ~~~~cnt [ 2 ] ++ ;  $ ~~~} else if ( cnt [ 0 ] >= 3 ) {  $ ~~~~cnt [ 0 ] -= 3 ;  $ ~~~~cnt [ 2 ] ++ ;  $ ~~~} else {  $ ~~~~cout << "NO\n" ;  $ ~~~~return 0 ;  $ ~~~}  $ ~~}  $ ~}  $ ~cout << "YES\n" ;  $ ~return 0 ;  $ }
const int N = 1e5 + 10 ;  $ long long n , a , m , d ;  $ long long t [ N ] , da ;  $ long long nextDiv ( long long bound , long long div ) {  $ ~return ( bound % div == 0 ? bound : bound + div - bound % div ) ;  $ }  $ long long nextDiv ( long long bound , long long num , long long div ) {  $ ~if ( bound % div == 0 ) return bound + ( num ) * div ;  $ ~return nextDiv ( bound , div ) + ( num - 1 ) * div ;  $ }  $ long long prevDiv ( long long bound , long long div ) {  $ ~return ( bound % div == 0 ? bound : bound - bound % div ) ;  $ }  $ long long numDiv ( long long L , long long R , long long div ) {  $ ~return prevDiv ( R , div ) / div - prevDiv ( L - 1 , div ) / div ;  $ }  $ pair < long long , long long > numOpen ( long long L , long long R ) {  $ ~long long realR = min ( R , n * a ) ;  $ ~long long xx = numDiv ( L , realR , a ) ;  $ ~if ( xx <= da ) return { 1 , nextDiv ( L , a ) + d } ;  $ ~long long noob = ( xx % da == 0 ? xx - da : xx - xx % da ) ;  $ ~long long nextt = nextDiv ( L , noob , a ) ;  $ ~if ( xx % da == 0 ) return { xx / da , nextt + d } ;  $ ~return { 1 + xx / da , nextt + d } ;  $ }  $ void solve ( ) {  $ ~long long cur = min ( a , t [ 1 ] ) ;  $ ~long long pt = 1 ;  $ ~long long ans = 0 ;  $ ~while ( pt <= m ) {  $ ~~if ( cur != t [ pt ] ) {  $ ~~~pair < long long , long long > xop = numOpen ( cur , t [ pt ] - 1 ) ;  $ ~~~ans += xop . first ;  $ ~~~while ( pt <= m && t [ pt ] <= xop . second ) pt ++ ;  $ ~~~if ( pt == m + 1 ) {  $ ~~~~cur = nextDiv ( xop . second + 1 , a ) ;  $ ~~~~if ( n < numDiv ( a , xop . second , a ) ) break ;  $ ~~~~long long numLeft = n - numDiv ( a , xop . second , a ) ;  $ ~~~~if ( numLeft > 0 ) ans += numOpen ( cur , nextDiv ( cur , numLeft - 1 , a ) ) . first ;  $ ~~~~break ;  $ ~~~}  $ ~~~cur = t [ pt ] ;  $ ~~~if ( numDiv ( a , xop . second , a ) < n ) cur = min ( t [ pt ] , nextDiv ( xop . second + 1 , a ) ) ;  $ ~~} else {  $ ~~~ans ++ ;  $ ~~~long long neo = pt ;  $ ~~~while ( pt < m && t [ pt + 1 ] - t [ neo ] <= d ) pt ++ ;  $ ~~~if ( pt == m ) {  $ ~~~~long long cur = nextDiv ( t [ neo ] + d + 1 , a ) ;  $ ~~~~if ( n < numDiv ( a , t [ neo ] + d , a ) ) break ;  $ ~~~~long long numLeft = n - numDiv ( a , t [ neo ] + d , a ) ;  $ ~~~~if ( numLeft > 0 ) ans += numOpen ( cur , nextDiv ( cur , numLeft - 1 , a ) ) . first ;  $ ~~~~break ;  $ ~~~}  $ ~~~pt ++ ;  $ ~~~cur = t [ pt ] ;  $ ~~~if ( numDiv ( a , t [ neo ] + d , a ) < n ) cur = min ( t [ pt ] , nextDiv ( t [ neo ] + d + 1 , a ) ) ;  $ ~~}  $ ~}  $ ~cout << ans << '\n' ;  $ }  $ int main ( ) {  $ ~cin >> n >> m >> a >> d ;  $ ~for ( int i = 1 ; i <= m ; i ++ ) cin >> t [ i ] ;  $ ~da = numDiv ( a , a + d , a ) ;  $ ~solve ( ) ;  $ }
int main ( ) {  $ ~int a , b , c , d , e , f ;  $ ~cin >> a >> b >> c >> d >> e >> f ;  $ ~if ( d == 0 ) {  $ ~~cout << "Hermione" << endl ;  $ ~} else if ( c == 0 ) {  $ ~~cout << "Ron" << endl ;  $ ~} else if ( b == 0 ) {  $ ~~cout << "Hermione" << endl ;  $ ~} else if ( a == 0 ) {  $ ~~cout << "Ron" << endl ;  $ ~} else if ( f == 0 ) {  $ ~~cout << "Hermione" << endl ;  $ ~} else if ( e == 0 ) {  $ ~~cout << "Ron" << endl ;  $ ~} else {  $ ~~if ( b * d * f > a * c * e )  $ ~~~cout << "Ron" << endl ;  $ ~~else  $ ~~~cout << "Hermione" << endl ;  $ ~}  $ }
int b [ 20 ] , ans , n ;  $ bool a [ 10 ] [ 10 ] ;  $ bool check ( ) {  $ ~int i , j , r , l , tot ;  $ ~for ( i = 1 ; i <= 5 ; i ++ ) {  $ ~~l = r = 0 ;  $ ~~for ( j = 1 ; j <= 5 ; j ++ ) {  $ ~~~if ( a [ i ] [ j ] ) {  $ ~~~~l ++ ;  $ ~~~~if ( b [ j ] ) { r ++ ; }  $ ~~~}  $ ~~}  $ ~~if ( l - 1 > r ) return false ;  $ ~}  $ ~for ( i = 1 ; i <= 5 ; i ++ ) {  $ ~~l = r = 0 ;  $ ~~for ( j = 1 ; j <= 5 ; j ++ ) {  $ ~~~if ( a [ j ] [ i ] ) {  $ ~~~~l ++ ;  $ ~~~~if ( b [ 5 + j ] ) r ++ ;  $ ~~~}  $ ~~}  $ ~~if ( l - 1 > r ) return false ;  $ ~}  $ ~tot = 0 ;  $ ~for ( i = 1 ; i <= 5 ; i ++ ) {  $ ~~for ( j = 1 ; j <= 5 ; j ++ ) {  $ ~~~if ( a [ i ] [ j ] && ! b [ i + 5 ] && ! b [ j ] ) tot ++ ;  $ ~~}  $ ~}  $ ~if ( tot > 1 ) return false ;  $ ~return true ;  $ }  $ void dfs ( int x ) {  $ ~int i , sum ;  $ ~if ( x == 11 ) {  $ ~~if ( check ( ) ) {  $ ~~~sum = 0 ;  $ ~~~for ( i = 1 ; i <= 11 ; i ++ ) {  $ ~~~~if ( b [ i ] == 1 ) sum ++ ;  $ ~~~}  $ ~~~ans = min ( sum , ans ) ;  $ ~~}  $ ~~return ;  $ ~}  $ ~b [ x ] = 1 ;  $ ~dfs ( x + 1 ) ;  $ ~b [ x ] = 0 ;  $ ~dfs ( x + 1 ) ;  $ }  $ int main ( ) {  $ ~int i , y ;  $ ~char ch ;  $ ~int k ;  $ ~cin >> n ;  $ ~memset ( a , false , sizeof ( a ) ) ;  $ ~for ( i = 1 ; i <= n ; i ++ ) {  $ ~~cin >> ch >> k ;  $ ~~if ( ch == 'R' )  $ ~~~y = 1 ;  $ ~~else if ( ch == 'G' )  $ ~~~y = 2 ;  $ ~~else if ( ch == 'B' )  $ ~~~y = 3 ;  $ ~~else if ( ch == 'Y' )  $ ~~~y = 4 ;  $ ~~else if ( ch == 'W' )  $ ~~~y = 5 ;  $ ~~a [ y ] [ k ] = true ;  $ ~}  $ ~memset ( b , 0 , sizeof ( b ) ) ;  $ ~ans = 9999999 ;  $ ~;  $ ~dfs ( 1 ) ;  $ ~cout << ans << endl ;  $ }
int a [ 101 ] [ 101 ] , b [ 101 ] [ 101 ] ;  $ int main ( ) {  $ ~int n ;  $ ~cin >> n ;  $ ~for ( int i = 0 ; i < n ; i ++ ) {  $ ~~for ( int j = 0 ; j < n ; j ++ ) {  $ ~~~char tmp ;  $ ~~~cin >> tmp ;  $ ~~~if ( tmp == 'E' ) a [ i ] [ j ] = - 1 ;  $ ~~}  $ ~}  $ ~int flagh [ 101 ] = { 0 } , flagl [ 101 ] = { 0 } ;  $ ~int flaghs = 0 , flagls = 0 ;  $ ~for ( int i = 0 ; i < n ; i ++ ) {  $ ~~for ( int j = 0 ; j < n ; j ++ ) {  $ ~~~if ( a [ i ] [ j ] == 0 ) {  $ ~~~~flagh [ i ] = 1 ;  $ ~~~~break ;  $ ~~~}  $ ~~}  $ ~}  $ ~for ( int i = 0 ; i < n ; i ++ ) {  $ ~~if ( flagh [ i ] == 0 ) {  $ ~~~flaghs = - 1 ;  $ ~~~break ;  $ ~~}  $ ~}  $ ~if ( flaghs == 0 ) {  $ ~~for ( int i = 0 ; i < n ; i ++ ) {  $ ~~~for ( int j = 0 ; j < n ; j ++ ) {  $ ~~~~if ( a [ i ] [ j ] == 0 ) {  $ ~~~~~cout << i + 1 << " " << j + 1 << endl ;  $ ~~~~~break ;  $ ~~~~}  $ ~~~}  $ ~~}  $ ~~return 0 ;  $ ~}  $ ~for ( int i = 0 ; i < n ; i ++ ) {  $ ~~for ( int j = 0 ; j < n ; j ++ ) {  $ ~~~if ( a [ j ] [ i ] == 0 ) {  $ ~~~~flagl [ i ] = 1 ;  $ ~~~~break ;  $ ~~~}  $ ~~}  $ ~}  $ ~for ( int i = 0 ; i < n ; i ++ ) {  $ ~~if ( flagl [ i ] == 0 ) {  $ ~~~flagls = - 1 ;  $ ~~~break ;  $ ~~}  $ ~}  $ ~if ( flagls == 0 ) {  $ ~~for ( int i = 0 ; i < n ; i ++ ) {  $ ~~~for ( int j = 0 ; j < n ; j ++ ) {  $ ~~~~if ( a [ j ] [ i ] == 0 ) {  $ ~~~~~cout << j + 1 << " " << i + 1 << endl ;  $ ~~~~~break ;  $ ~~~~}  $ ~~~}  $ ~~}  $ ~~return 0 ;  $ ~}  $ ~cout << - 1 << endl ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~long long x1 , y1 , x2 , y2 ;  $ ~while ( cin >> x1 >> y1 >> x2 >> y2 ) {  $ ~~long long a , b , c ;  $ ~~int n , ans = 0 ;  $ ~~cin >> n ;  $ ~~for ( int i = 0 ; i < n ; i ++ ) {  $ ~~~cin >> a >> b >> c ;  $ ~~~if ( a * x1 + b * y1 + c < 0 && a * x2 + b * y2 + c > 0 ) ans ++ ;  $ ~~~if ( a * x1 + b * y1 + c > 0 && a * x2 + b * y2 + c < 0 ) ans ++ ;  $ ~~}  $ ~~cout << ans << endl ;  $ ~}  $ ~return 0 ;  $ }
int main ( ) {  $ ~bool flag ;  $ ~int i , n ;  $ ~string str ;  $ ~int a [ 5 ] , b [ 100005 ] ;  $ ~int ans = 0 ;  $ ~memset ( a , 0 , sizeof ( a ) ) ;  $ ~cin >> str ;  $ ~n = str . length ( ) ;  $ ~flag = false ;  $ ~for ( i = 0 ; i < n ; i ++ ) {  $ ~~if ( str [ i ] == '#' ) {  $ ~~~a [ 1 ] ++ ;  $ ~~~if ( a [ 3 ] + a [ 1 ] > a [ 2 ] || i == 0 ) flag = true ;  $ ~~~ans = a [ 2 ] - a [ 3 ] + 1 ;  $ ~~} else if ( str [ i ] == '(' ) {  $ ~~~a [ 2 ] ++ ;  $ ~~~if ( i == n - 1 || a [ 3 ] + a [ 1 ] > a [ 2 ] ) flag = true ;  $ ~~} else {  $ ~~~a [ 3 ] ++ ;  $ ~~~if ( a [ 3 ] + a [ 1 ] > a [ 2 ] || i == 0 ) flag = true ;  $ ~~}  $ ~}  $ ~if ( ans < a [ 2 ] - a [ 3 ] + 1 ) { flag = true ; }  $ ~if ( flag ) {  $ ~~cout << - 1 << endl ;  $ ~~return 0 ;  $ ~}  $ ~for ( i = 1 ; i < a [ 1 ] ; i ++ ) { cout << 1 << endl ; }  $ ~cout << a [ 2 ] - a [ 3 ] - a [ 1 ] + 1 << endl ;  $ }
int main ( ) {  $ ~int n , k ;  $ ~cin >> n >> k ;  $ ~int r [ 2 * n + 1 ] ;  $ ~for ( int i = 0 ; i < 2 * n + 1 ; i ++ ) cin >> r [ i ] ;  $ ~for ( int i = 0 ; i < 2 * n + 1 ; i ++ ) {  $ ~~if ( ( i + 1 ) % 2 == 0 && k > 0 && r [ i ] - 1 > r [ i + 1 ] && r [ i - 1 ] < r [ i ] - 1 ) {  $ ~~~cout << r [ i ] - 1 ;  $ ~~~-- k ;  $ ~~} else {  $ ~~~cout << r [ i ] ;  $ ~~}  $ ~~if ( i == 2 * n )  $ ~~~cout << "\n" ;  $ ~~else  $ ~~~cout << " " ;  $ ~}  $ ~return 0 ;  $ }
const long long N = 1e9 + 3 ;  $ const long long MN = 1e9 + 7 ;  $ const long long MX = - 1e9 - 7 ;  $ long long n , m , a , b , x , c1 , c2 , cnt ;  $ string s , s1 ;  $ bool bl = false ;  $ long long c ;  $ pair < long long , long long > pr ;  $ vector < long long > v ;  $ map < long long , long long > mp ;  $ set < long long > st ;  $ set < long long > : : iterator it ;  $ void propblem ( long long n , long long m ) {  $ ~char c = 'a' ;  $ ~long long cnt = 97 + m ;  $ ~while ( n ) {  $ ~~cout << c ;  $ ~~c ++ ;  $ ~~if ( c == cnt ) { c = 'a' ; }  $ ~~n -- ;  $ ~}  $ }  $ int main ( ) {  $ ~cin >> n >> m ;  $ ~propblem ( n , m ) ;  $ ~cout << "\n" ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~string vowels = "aeuiyo" , s , res = "" ;  $ ~cin >> s ;  $ ~for ( int i = 0 ; i < s . size ( ) ; i ++ ) {  $ ~~if ( s [ i ] + 0 < 97 ) { s [ i ] += 32 ; }  $ ~}  $ ~for ( int i = 0 ; i < s . size ( ) ; i ++ ) {  $ ~~for ( int j = 0 ; j < 6 ; j ++ ) {  $ ~~~if ( s [ i ] == vowels [ j ] ) { break ; }  $ ~~~if ( j == 5 ) { res += s [ i ] ; }  $ ~~}  $ ~}  $ ~for ( int i = 0 ; i < res . size ( ) ; i ++ ) { cout << "." << res [ i ] ; }  $ ~cout << endl ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~int n ;  $ ~cin >> n ;  $ ~int sum = n / 2 ;  $ ~if ( n % 2 == 1 ) {  $ ~~cout << sum << endl ;  $ ~~for ( int i = 1 ; i < sum ; i ++ ) { cout << "2 " ; }  $ ~~cout << "3" << endl ;  $ ~} else {  $ ~~cout << sum << endl ;  $ ~~for ( int i = 1 ; i < sum ; i ++ ) { cout << "2 " ; }  $ ~~cout << "2" << endl ;  $ ~}  $ ~return 0 ;  $ }
int sushu ( int n ) {  $ ~if ( n == 1 ) return 0 ;  $ ~if ( n == 2 ) return 1 ;  $ ~for ( int i = 2 ; i * i <= n ; i ++ ) {  $ ~~if ( n % i == 0 ) return 0 ;  $ ~}  $ ~return 1 ;  $ }  $ int main ( ) {  $ ~int n ;  $ ~cin >> n ;  $ ~for ( int m = 1 ; ; m ++ ) {  $ ~~if ( ! sushu ( n * m + 1 ) ) {  $ ~~~cout << m << endl ;  $ ~~~break ;  $ ~~}  $ ~}  $ ~return 0 ;  $ }
int main ( ) {  $ ~long long n ;  $ ~long long ans ;  $ ~while ( cin >> n ) {  $ ~~if ( n <= 2 )  $ ~~~ans = n ;  $ ~~else if ( n & 1 )  $ ~~~ans = n * ( n - 1 ) * ( n - 2 ) ;  $ ~~else {  $ ~~~if ( n % 3 != 0 )  $ ~~~~ans = n * ( n - 1 ) * ( n - 3 ) ;  $ ~~~else  $ ~~~~ans = ( n - 1 ) * ( n - 2 ) * ( n - 3 ) ;  $ ~~}  $ ~~cout << ans << endl ;  $ ~}  $ ~return 0 ;  $ }
int main ( ) {  $ ~int n ;  $ ~cin >> n ;  $ ~int a , cnt = 0 ;  $ ~for ( int i = 0 ; i < n ; i ++ ) {  $ ~~cin >> a ;  $ ~~if ( a == 0 ) cnt ++ ;  $ ~}  $ ~if ( n == 1 ) {  $ ~~if ( cnt )  $ ~~~cout << "NO\n" ;  $ ~~else  $ ~~~cout << "YES\n" ;  $ ~~return 0 ;  $ ~}  $ ~if ( cnt == 1 )  $ ~~cout << "YES\n" ;  $ ~else  $ ~~cout << "NO\n" ;  $ ~return 0 ;  $ }
int n , m ;  $ string a , b ;  $ int main ( ) {  $ ~cin >> n >> m >> a >> b ;  $ ~if ( n > m ) {  $ ~~for ( int i = 0 ; i < n ; i ++ )  $ ~~~if ( a [ i ] == '*' ) {  $ ~~~~a . erase ( i , 1 ) ;  $ ~~~~break ;  $ ~~~}  $ ~~if ( a == b )  $ ~~~puts ( "YES" ) ;  $ ~~else  $ ~~~puts ( "NO" ) ;  $ ~~return 0 ;  $ ~}  $ ~if ( n == m ) {  $ ~~for ( int i = 0 ; i < n ; i ++ )  $ ~~~if ( a [ i ] != '*' )  $ ~~~~if ( a [ i ] != b [ i ] ) return puts ( "NO" ) , 0 ;  $ ~~puts ( "YES" ) ;  $ ~~return 0 ;  $ ~}  $ ~int Now = 0 ;  $ ~while ( a [ Now ] != '*' ) {  $ ~~if ( a [ Now ] != b [ Now ] ) return puts ( "NO" ) , 0 ;  $ ~~Now ++ ;  $ ~}  $ ~Now = m - 1 ;  $ ~int now = n - 1 ;  $ ~while ( a [ now ] != '*' ) {  $ ~~if ( a [ now ] != b [ Now ] ) return puts ( "NO" ) , 0 ;  $ ~~now -- ;  $ ~~Now -- ;  $ ~}  $ ~puts ( "YES" ) ;  $ }
long long spf [ 100001 ] ;  $ long long gcd ( long long a , long long b ) ;  $ long long palindrome ( string s ) ;  $ long long modexp ( long long a , long long b , long long m ) ;  $ void sieve ( ) ;  $ vector < long long > getFactorization ( long long x ) ;  $ void getZarr ( string str , long long Z [ ] ) ;  $ long long ceil ( long long a , long long b ) {  $ ~return a / b + ( a % b != 0 ) ;  $ }  $ int main ( ) {  $ ~long long n ;  $ ~cin >> n ;  $ ~pair < long long , long long > p [ n ] ;  $ ~for ( long long i = 0 ; i < n ; i ++ ) { cin >> p [ i ] . first >> p [ i ] . second ; }  $ ~sort ( p , p + n ) ;  $ ~for ( long long i = 0 ; i < n - 1 ; i ++ ) {  $ ~~long long r = pow ( 2 , ( p [ i + 1 ] . first - p [ i ] . first ) * 2 ) ;  $ ~~long long x = ceil ( p [ i ] . second , r ) ;  $ ~~p [ i + 1 ] . second = max ( p [ i + 1 ] . second , x ) ;  $ ~}  $ ~long long ans ;  $ ~long long o = ceil ( log10 ( p [ n - 1 ] . second ) / log10 ( 4 ) ) ;  $ ~if ( o == 0 ) o ++ ;  $ ~ans = o + p [ n - 1 ] . first ;  $ ~cout << ans << endl ;  $ }  $ long long gcd ( long long a , long long b ) {  $ ~if ( a == 0 ) return b ;  $ ~if ( b == 0 ) return a ;  $ ~if ( a == b ) return a ;  $ ~if ( a > b ) return gcd ( a % b , b ) ;  $ ~return gcd ( a , b % a ) ;  $ }  $ long long palindrome ( string s ) {  $ ~long long l = 0 ;  $ ~long long h = s . length ( ) - 1 ;  $ ~while ( h > l ) {  $ ~~if ( s [ l ++ ] != s [ h -- ] ) { return 0 ; }  $ ~}  $ ~return 1 ;  $ }  $ long long modexp ( long long a , long long b , long long m ) {  $ ~if ( b == 0 ) return 1 ;  $ ~long long temp = modexp ( a , b / 2 , m ) ;  $ ~temp = ( temp * temp ) % m ;  $ ~if ( b & 1 ) return ( temp * ( a % m ) ) % m ;  $ ~return temp ;  $ }  $ void sieve ( ) {  $ ~spf [ 1 ] = 1 ;  $ ~for ( long long i = 2 ; i < 100001 ; i ++ ) spf [ i ] = i ;  $ ~for ( long long i = 4 ; i < 100001 ; i += 2 ) spf [ i ] = 2 ;  $ ~for ( long long i = 3 ; i * i < 100001 ; i ++ ) {  $ ~~if ( spf [ i ] == i ) {  $ ~~~for ( long long j = i * i ; j < 100001 ; j += i )  $ ~~~~if ( spf [ j ] == j ) spf [ j ] = i ;  $ ~~}  $ ~}  $ }  $ vector < long long > getFactorization ( long long x ) {  $ ~vector < long long > ret ;  $ ~while ( x != 1 ) {  $ ~~ret . push_back ( spf [ x ] ) ;  $ ~~x = x / spf [ x ] ;  $ ~}  $ ~return ret ;  $ }  $ void getZarr ( string str , long long Z [ ] ) {  $ ~long long n = str . length ( ) ;  $ ~long long L , R , k ;  $ ~L = R = 0 ;  $ ~for ( long long i = 1 ; i < n ; ++ i ) {  $ ~~if ( i > R ) {  $ ~~~L = R = i ;  $ ~~~while ( R < n && str [ R - L ] == str [ R ] ) R ++ ;  $ ~~~Z [ i ] = R - L ;  $ ~~~R -- ;  $ ~~} else {  $ ~~~k = i - L ;  $ ~~~if ( Z [ k ] < R - i + 1 )  $ ~~~~Z [ i ] = Z [ k ] ;  $ ~~~else {  $ ~~~~L = i ;  $ ~~~~while ( R < n && str [ R - L ] == str [ R ] ) R ++ ;  $ ~~~~Z [ i ] = R - L ;  $ ~~~~R -- ;  $ ~~~}  $ ~~}  $ ~}  $ }
int n , m ;  $ bool lg [ 111 ] [ 111 ] ;  $ int a [ 111 ] [ 111 ] ;  $ bool v [ 111 ] = { 0 } ;  $ bool zero [ 111 ] = { 0 } ;  $ int ex = 0 ;  $ void dfs ( int i ) {  $ ~v [ i ] = true ;  $ ~for ( int j = 1 ; j <= n ; j ++ ) {  $ ~~if ( a [ i ] [ j ] && ! v [ j ] ) { dfs ( j ) ; }  $ ~}  $ }  $ int main ( ) {  $ ~cin >> n >> m ;  $ ~for ( int i = 1 ; i <= n ; i ++ ) {  $ ~~int t ;  $ ~~cin >> t ;  $ ~~if ( t == 0 ) {  $ ~~~zero [ i ] = true ;  $ ~~~ex ++ ;  $ ~~}  $ ~~while ( t -- ) {  $ ~~~int c ;  $ ~~~cin >> c ;  $ ~~~lg [ i ] [ c ] = true ;  $ ~~}  $ ~}  $ ~for ( int i = 1 ; i <= n ; i ++ ) {  $ ~~for ( int j = 1 ; j <= n ; j ++ ) {  $ ~~~if ( i != j ) {  $ ~~~~for ( int k = 1 ; k <= m ; k ++ ) {  $ ~~~~~if ( lg [ i ] [ k ] && lg [ j ] [ k ] ) { a [ i ] [ j ] = 1 ; }  $ ~~~~}  $ ~~~}  $ ~~}  $ ~}  $ ~int ans = 0 ;  $ ~for ( int i = 1 ; i <= n ; i ++ ) {  $ ~~if ( ! v [ i ] && ! zero [ i ] ) {  $ ~~~dfs ( i ) ;  $ ~~~ans ++ ;  $ ~~}  $ ~}  $ ~ans -- ;  $ ~if ( ans < 0 ) ans = 0 ;  $ ~cout << ans + ex << endl ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~int i , j , n , s [ 2005 ] , k [ 2005 ] ;  $ ~cin >> n ;  $ ~for ( i = 0 ; i < n ; i ++ ) cin >> s [ i ] ;  $ ~memset ( k , 0 , sizeof ( k ) ) ;  $ ~for ( i = 0 ; i < n ; i ++ ) {  $ ~~for ( j = 0 ; j < n ; j ++ ) {  $ ~~~if ( s [ j ] > s [ i ] && j != i ) k [ i ] ++ ;  $ ~~~if ( s [ j ] == s [ i ] && j == i ) k [ i ] ++ ;  $ ~~}  $ ~}  $ ~for ( i = 0 ; i < n ; i ++ ) {  $ ~~if ( i == 0 )  $ ~~~cout << k [ i ] ;  $ ~~else  $ ~~~cout << " " << k [ i ] ;  $ ~}  $ ~cout << endl ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~int s , t , x ;  $ ~while ( cin >> s >> t >> x ) {  $ ~~if ( x < s + t )  $ ~~~if ( x == s )  $ ~~~~cout << "YES" << endl ;  $ ~~~else  $ ~~~~cout << "NO" << endl ;  $ ~~else {  $ ~~~if ( ( x - s ) % t == 0 || ( x - s - 1 ) % t == 0 )  $ ~~~~cout << "YES" << endl ;  $ ~~~else  $ ~~~~cout << "NO" << endl ;  $ ~~}  $ ~}  $ ~return 0 ;  $ }
int main ( ) {  $ ~int i , j ;  $ ~int vis [ 220 ] [ 220 ] = { 0 } ;  $ ~int vis1 [ 220 ] [ 220 ] = { 0 } ;  $ ~int x [ 5 ] , y [ 5 ] , x1 [ 5 ] , y1 [ 5 ] ;  $ ~for ( i = 0 ; i < 4 ; i ++ ) cin >> x [ i ] >> y [ i ] ;  $ ~for ( i = 0 ; i < 4 ; i ++ ) cin >> x1 [ i ] >> y1 [ i ] ;  $ ~sort ( x , x + 4 ) ;  $ ~sort ( x1 , x1 + 4 ) ;  $ ~sort ( y , y + 4 ) ;  $ ~sort ( y1 , y1 + 4 ) ;  $ ~int ox = min ( x [ 0 ] , x1 [ 0 ] ) ;  $ ~int oy = min ( y [ 0 ] , y1 [ 0 ] ) ;  $ ~if ( ox < 0 ) ox = - ox ;  $ ~if ( oy < 0 ) oy = - oy ;  $ ~for ( i = x [ 0 ] + ox ; i <= x [ 3 ] + ox ; i ++ )  $ ~~for ( j = y [ 0 ] + oy ; j <= y [ 3 ] + oy ; j ++ ) vis [ i ] [ j ] = 1 ;  $ ~int mid = ( x1 [ 0 ] + ox + x1 [ 3 ] + ox ) / 2 ;  $ ~int s = y1 [ 0 ] + oy ;  $ ~int t = y1 [ 3 ] + oy ;  $ ~for ( i = mid ; i >= x1 [ 0 ] + ox ; i -- ) {  $ ~~for ( j = s ; j <= t ; j ++ ) { vis1 [ i ] [ j ] = 1 ; }  $ ~~s ++ ;  $ ~~t -- ;  $ ~}  $ ~s = y1 [ 0 ] + oy ;  $ ~t = y1 [ 3 ] + oy ;  $ ~for ( i = mid ; i <= x1 [ 3 ] + ox ; i ++ ) {  $ ~~for ( j = s ; j <= t ; j ++ ) { vis1 [ i ] [ j ] = 1 ; }  $ ~~s ++ ;  $ ~~t -- ;  $ ~}  $ ~for ( i = 0 ; i < 220 ; i ++ ) {  $ ~~for ( j = 0 ; j < 220 ; j ++ ) {  $ ~~~if ( vis [ i ] [ j ] == 1 && vis1 [ i ] [ j ] == 1 ) {  $ ~~~~cout << "YES" << endl ;  $ ~~~~return 0 ;  $ ~~~}  $ ~~}  $ ~}  $ ~cout << "NO" << endl ;  $ ~return 0 ;  $ }
const int maxn = 1e5 + 10 ;  $ int a [ maxn ] ;  $ bool vis [ maxn ] ;  $ int n ;  $ int main ( ) {  $ ~cin >> n ;  $ ~if ( n == 1 ) {  $ ~~cout << 1 << endl ;  $ ~~return 0 ;  $ ~}  $ ~if ( n % 4 > 1 ) {  $ ~~cout << - 1 << endl ;  $ ~~return 0 ;  $ ~}  $ ~if ( n & 1 ) {  $ ~~a [ n / 2 + 1 ] = n / 2 + 1 ;  $ ~~vis [ n / 2 + 1 ] = 1 ;  $ ~}  $ ~a [ 1 ] = 2 ;  $ ~a [ 2 ] = n ;  $ ~a [ n ] = n - 1 ;  $ ~a [ n - 1 ] = 1 ;  $ ~vis [ 1 ] = vis [ 2 ] = vis [ n ] = vis [ n - 1 ] = 1 ;  $ ~for ( int i = 1 ; i <= n ; i ++ ) {  $ ~~if ( ! vis [ i ] ) {  $ ~~~int x ;  $ ~~~x = i + 1 ;  $ ~~~a [ i ] = x ;  $ ~~~a [ x ] = n - i + 1 ;  $ ~~~a [ n - i + 1 ] = n - x + 1 ;  $ ~~~a [ n - x + 1 ] = i ;  $ ~~~vis [ i ] = vis [ x ] = vis [ n - i + 1 ] = vis [ n - x + 1 ] = 1 ;  $ ~~}  $ ~}  $ ~for ( int i = 1 ; i <= n ; i ++ ) {  $ ~~if ( i == 1 )  $ ~~~cout << a [ i ] ;  $ ~~else  $ ~~~cout << " " << a [ i ] ;  $ ~}  $ ~cout << endl ;  $ ~return 0 ;  $ }
map < string , int > character ;  $ string s ;  $ double n , m , k , res , level ;  $ float check ;  $ int main ( ) {  $ ~cin >> n >> m >> k ;  $ ~while ( n -- ) {  $ ~~cin >> s >> level ;  $ ~~check = k * level ;  $ ~~if ( check >= 100 ) character [ s ] = check ;  $ ~}  $ ~while ( m -- ) {  $ ~~cin >> s ;  $ ~~if ( character [ s ] >= 100 )  $ ~~~continue ;  $ ~~else {  $ ~~~character [ s ] = 0 ;  $ ~~}  $ ~}  $ ~map < string , int > : : iterator it ;  $ ~cout << character . size ( ) << endl ;  $ ~for ( it = character . begin ( ) ; it != character . end ( ) ; it ++ ) { cout << it -> first << " " << it -> second << endl ; }  $ ~return 0 ;  $ }
long long mod = 998244353 ;  $ int a [ 100000 ] ;  $ int main ( ) {  $ ~int n ;  $ ~cin >> n ;  $ ~for ( int i = 0 ; i < n ; i ++ ) cin >> a [ i ] ;  $ ~vector < long long > up ( 201 ) , notup ( 201 ) , prev_up ( 201 , 0 ) , prev_notup ( 201 , 0 ) ;  $ ~prev_up [ 0 ] = 1 ;  $ ~for ( int i = 0 ; i < n ; i ++ ) {  $ ~~for ( int j = 1 ; j <= 200 ; j ++ ) {  $ ~~~( prev_up [ j ] += prev_up [ j - 1 ] ) %= mod ;  $ ~~~( prev_notup [ j ] += prev_notup [ j - 1 ] ) %= mod ;  $ ~~}  $ ~~up [ 0 ] = notup [ 0 ] = 0 ;  $ ~~for ( int j = 1 ; j <= 200 ; j ++ ) {  $ ~~~up [ j ] = notup [ j ] = 0 ;  $ ~~~if ( a [ i ] != - 1 && a [ i ] != j ) continue ;  $ ~~~( up [ j ] += prev_up [ j - 1 ] + prev_notup [ j - 1 ] ) %= mod ;  $ ~~~( notup [ j ] += prev_up [ j ] + prev_notup [ j ] ) %= mod ;  $ ~~~( notup [ j ] -= prev_up [ j - 1 ] + prev_notup [ j - 1 ] ) %= mod ;  $ ~~~( notup [ j ] += prev_notup [ 200 ] - prev_notup [ j ] ) %= mod ;  $ ~~}  $ ~~prev_up = up ;  $ ~~prev_notup = notup ;  $ ~}  $ ~long long ans = 0 ;  $ ~for ( int i = 1 ; i <= 200 ; i ++ ) ( ans += prev_notup [ i ] ) %= mod ;  $ ~cout << ( ans + mod ) % mod << endl ;  $ }
void fast ( ) { }  $ int main ( ) {  $ ~fast ( ) ;  $ ~string str ;  $ ~cin >> str ;  $ ~int no = str . size ( ) , j , has [ 256 ] = { 0 } ;  $ ~int n , i , e , t ;  $ ~for ( j = 0 ; j < no ; j ++ ) has [ str [ j ] ] ++ ;  $ ~for ( j = 0 ; j < no ; j ++ ) {  $ ~~n = ( has [ 'n' ] - 1 ) / 2 ;  $ ~~i = has [ 'i' ] / 1 ;  $ ~~e = has [ 'e' ] / 3 ;  $ ~~t = has [ 't' ] / 1 ;  $ ~}  $ ~cout << min ( min ( n , t ) , min ( i , e ) ) << endl ;  $ }
int main ( ) {  $ ~int i , counter = 0 ;  $ ~string arr ;  $ ~cin >> arr ;  $ ~for ( i = 0 ; i < arr . size ( ) - 1 ; i ++ ) {  $ ~~if ( arr [ i ] == '1' && arr [ i + 1 ] == '0' ) {  $ ~~~arr [ i + 1 ] = ' ' ;  $ ~~~counter ++ ;  $ ~~~break ;  $ ~~}  $ ~}  $ ~if ( counter == 0 ) {  $ ~~if ( arr [ 0 ] == '0' ) {  $ ~~~arr [ 0 ] = ' ' ;  $ ~~} else {  $ ~~~arr [ arr . size ( ) - 1 ] = ' ' ;  $ ~~}  $ ~}  $ ~for ( i = 0 ; i < arr . size ( ) ; i ++ ) {  $ ~~if ( arr [ i ] != ' ' ) { cout << arr [ i ] ; }  $ ~}  $ ~cout << endl ;  $ ~return 0 ;  $ }
long long dia [ 10005 ] ;  $ int main ( ) {  $ ~long long n ;  $ ~long long m , k ;  $ ~cin >> n >> m >> k ;  $ ~for ( int i = 0 ; i < n ; i ++ ) { cin >> dia [ i ] ; }  $ ~if ( n % 2 == 0 ) {  $ ~~cout << 0 << endl ;  $ ~} else {  $ ~~long long h = m / ( 1 + ( n - 1 ) / 2 ) ;  $ ~~long long MI = dia [ 0 ] ;  $ ~~for ( int j = 0 ; j < n ; j += 2 ) {  $ ~~~if ( MI > dia [ j ] ) MI = dia [ j ] ;  $ ~~}  $ ~~if ( MI < k * h )  $ ~~~cout << MI << endl ;  $ ~~else  $ ~~~cout << k * h << endl ;  $ ~}  $ ~return 0 ;  $ }
const int maxn = 1e5 + 7 ;  $ int a [ maxn ] ;  $ int b [ maxn ] ;  $ int c [ maxn ] ;  $ int main ( ) {  $ ~int n ;  $ ~cin >> n ;  $ ~for ( int i = 1 ; i <= n ; i ++ ) { cin >> a [ i ] ; }  $ ~for ( int i = 1 ; i < n ; i ++ ) { b [ i ] = abs ( a [ i ] - a [ i + 1 ] ) ; }  $ ~for ( int i = 1 ; i < n ; i ++ ) {  $ ~~if ( i % 2 ) {  $ ~~~c [ i ] = b [ i ] ;  $ ~~} else {  $ ~~~c [ i ] = ( - 1 ) * b [ i ] ;  $ ~~}  $ ~}  $ ~for ( int i = 1 ; i < n ; i ++ ) {  $ ~~if ( i % 2 )  $ ~~~a [ i ] = ( - 1 ) * b [ i ] ;  $ ~~else  $ ~~~a [ i ] = b [ i ] ;  $ ~}  $ ~long long suma = 0 , sumb = 0 ;  $ ~long long ansa = - 0 x3f3f3f3f , ansb = - 0 x3f3f3f3f ;  $ ~for ( int i = 1 ; i < n ; i ++ ) {  $ ~~suma += c [ i ] ;  $ ~~ansa = max ( ansa , suma ) ;  $ ~~if ( suma < 0 ) { suma = 0 ; }  $ ~}  $ ~for ( int i = 1 ; i < n ; i ++ ) {  $ ~~sumb += a [ i ] ;  $ ~~ansb = max ( ansb , sumb ) ;  $ ~~if ( sumb < 0 ) sumb = 0 ;  $ ~}  $ ~cout << max ( ansa , ansb ) << endl ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~int n , m , x = 0 ;  $ ~double k ;  $ ~float kk ;  $ ~string s ;  $ ~map < string , int > v ;  $ ~map < string , int > : : iterator it ;  $ ~cin >> n >> m >> k ;  $ ~while ( n -- ) {  $ ~~cin >> s >> x ;  $ ~~kk = x * k ;  $ ~~if ( kk >= 100 ) v [ s ] = kk ;  $ ~}  $ ~while ( m -- ) {  $ ~~cin >> s ;  $ ~~if ( ! v [ s ] ) v [ s ] = 0 ;  $ ~}  $ ~cout << v . size ( ) << endl ;  $ ~for ( it = v . begin ( ) ; it != v . end ( ) ; it ++ ) cout << ( * it ) . first << " " << ( * it ) . second << endl ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~bool ya = false ;  $ ~set < char > sub [ 250 ] ;  $ ~string s ;  $ ~cin >> s ;  $ ~if ( s . length ( ) <= 2 ) {  $ ~~cout << "No" << endl ;  $ ~~return 0 ;  $ ~}  $ ~for ( int i = 0 ; i < s . length ( ) - 2 ; i ++ ) {  $ ~~if ( s [ i ] != '.' ) sub [ i ] . insert ( s [ i ] ) ;  $ ~~if ( s [ i + 1 ] != '.' ) sub [ i ] . insert ( s [ i + 1 ] ) ;  $ ~~if ( s [ i + 2 ] != '.' ) sub [ i ] . insert ( s [ i + 2 ] ) ;  $ ~~if ( sub [ i ] . size ( ) > 2 ) ya = true ;  $ ~}  $ ~( ya ) ? cout << "Yes" << endl : cout << "No" << endl ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~int x , y , increment = 0 , ansx = 0 , ansy = 0 , turns = 0 ;  $ ~cin >> x >> y ;  $ ~if ( x == 0 && y == 0 ) {  $ ~~cout << 0 << endl ;  $ ~~return 0 ;  $ ~}  $ ~while ( true ) {  $ ~~increment ++ ;  $ ~~for ( int i = 0 ; i < increment ; i ++ ) {  $ ~~~ansx ++ ;  $ ~~~if ( ansx == x && ansy == y ) {  $ ~~~~cout << turns << endl ;  $ ~~~~return 0 ;  $ ~~~}  $ ~~}  $ ~~turns ++ ;  $ ~~for ( int i = 0 ; i < increment ; i ++ ) {  $ ~~~ansy ++ ;  $ ~~~if ( ansx == x && ansy == y ) {  $ ~~~~cout << turns << endl ;  $ ~~~~return 0 ;  $ ~~~}  $ ~~}  $ ~~turns ++ ;  $ ~~increment ++ ;  $ ~~for ( int i = 0 ; i < increment ; i ++ ) {  $ ~~~ansx -- ;  $ ~~~if ( ansx == x && ansy == y ) {  $ ~~~~cout << turns << endl ;  $ ~~~~return 0 ;  $ ~~~}  $ ~~}  $ ~~turns ++ ;  $ ~~for ( int i = 0 ; i < increment ; i ++ ) {  $ ~~~ansy -- ;  $ ~~~if ( ansx == x && ansy == y ) {  $ ~~~~cout << turns << endl ;  $ ~~~~return 0 ;  $ ~~~}  $ ~~}  $ ~~turns ++ ;  $ ~}  $ ~return 0 ;  $ }
int n ;  $ long long c [ 105 ] , vis [ 105 ] ;  $ long long ans = 1 ;  $ int cnt ( int x ) {  $ ~int res = 1 ;  $ ~int temp = c [ x ] ;  $ ~vis [ temp ] = 1 ;  $ ~while ( temp != x ) {  $ ~~res ++ ;  $ ~~temp = c [ temp ] ;  $ ~~vis [ temp ] = 1 ;  $ ~~if ( res >= 2 * n ) return - 1 ;  $ ~}  $ ~if ( res >= 2 * n ) return - 1 ;  $ ~if ( res % 2 == 0 )  $ ~~return res / 2 ;  $ ~else  $ ~~return res ;  $ }  $ long long gcb ( long long a , long long b ) {  $ ~if ( ! b ) return a ;  $ ~return gcb ( b , a % b ) ;  $ }  $ long long lcm ( long long a , long long b ) {  $ ~return a * b / gcb ( a , b ) ;  $ }  $ int main ( ) {  $ ~cin >> n ;  $ ~memset ( vis , 0 , sizeof ( vis ) ) ;  $ ~for ( int i = 1 ; i <= n ; i ++ ) cin >> c [ i ] ;  $ ~long long temp ;  $ ~for ( int i = 1 ; i <= n ; i ++ ) {  $ ~~if ( ! vis [ i ] ) temp = cnt ( i ) ;  $ ~~if ( temp == - 1 ) {  $ ~~~cout << "-1" << endl ;  $ ~~~return 0 ;  $ ~~}  $ ~~ans = lcm ( ans , temp ) ;  $ ~}  $ ~cout << ans << endl ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~long long n ;  $ ~while ( cin >> n ) {  $ ~~int a [ 4 ] = { 6 , 8 , 4 , 2 } ;  $ ~~if ( ! n )  $ ~~~cout << "1" << endl ;  $ ~~else  $ ~~~cout << a [ n % 4 ] << endl ;  $ ~}  $ ~return 0 ;  $ }
long long int fun ( long long int x ) {  $ ~if ( x < 10 ) return x ;  $ ~long long int r = x / 10 + 9 ;  $ ~long long int d = x ;  $ ~while ( d >= 10 ) d /= 10 ;  $ ~if ( d > x % 10 ) r -- ;  $ ~return r ;  $ }  $ int main ( ) {  $ ~long long int l , r , x , y ;  $ ~cin >> l >> r ;  $ ~x = fun ( r ) ;  $ ~y = fun ( l - 1 ) ;  $ ~cout << x - y << endl ;  $ ~return 0 ;  $ }
long long n , dia [ 10010 ] , m , ans = 0 , mis = 100000 , k , need = 0 ;  $ int main ( ) {  $ ~cin >> n >> m >> k ;  $ ~for ( int i = 1 ; i <= n ; ++ i ) {  $ ~~cin >> dia [ i ] ;  $ ~~if ( mis > dia [ i ] && i % 2 == 1 ) mis = dia [ i ] ;  $ ~}  $ ~need = n / 2 + 1 ;  $ ~if ( n % 2 == 0 || need > m )  $ ~~;  $ ~else {  $ ~~ans = m / need * k ;  $ ~~ans = min ( mis , ans ) ;  $ ~}  $ ~cout << ans << endl ;  $ ~return 0 ;  $ }
int arr [ 6969 ] , change [ 6969 ] , temp , cyka [ 6969 ] , blyat ;  $ int main ( ) {  $ ~int c ;  $ ~cin >> c ;  $ ~for ( int a = 0 ; a < c ; a ++ ) {  $ ~~cin >> blyat ;  $ ~~change [ a ] = blyat ;  $ ~~arr [ a ] = blyat ;  $ ~}  $ ~for ( int a = 0 ; a < c ; a ++ ) {  $ ~~temp = 1 ;  $ ~~for ( int x = 0 ; x < c ; x ++ ) {  $ ~~~if ( change [ a ] < arr [ x ] ) temp ++ ;  $ ~~~cyka [ a ] = temp ;  $ ~~}  $ ~}  $ ~for ( int a = 0 ; a < c ; a ++ ) {  $ ~~if ( a == c - 1 )  $ ~~~cout << cyka [ a ] << "\n" ;  $ ~~else  $ ~~~cout << cyka [ a ] << " " ;  $ ~}  $ }
const int N = 1e5 + 5 ;  $ long long arr [ N ] ;  $ map < long long , bool > vis ;  $ int n ;  $ long long m ;  $ int main ( ) {  $ ~cin >> n >> m ;  $ ~for ( int i = 0 ; i <= n - 1 ; i += 1 ) cin >> arr [ i ] ;  $ ~sort ( arr , arr + n ) ;  $ ~int ans = 0 ;  $ ~for ( int i = 0 ; i <= n - 1 ; i += 1 ) {  $ ~~if ( vis [ arr [ i ] ] ) continue ;  $ ~~vis [ arr [ i ] * m ] = true ;  $ ~~ans ++ ;  $ ~}  $ ~cout << ans << endl ;  $ ~return 0 ;  $ }
long long const mod = 1000000007 ;  $ long long const md = 998244353 ;  $ long long mypow ( long long a , long long b ) {  $ ~long long res = 1 ;  $ ~a %= mod ;  $ ~assert ( b >= 0 ) ;  $ ~for ( ; b ; b >> = 1 ) {  $ ~~if ( b & 1 ) res = res * a % mod ;  $ ~~a = a * a % mod ;  $ ~}  $ ~return res ;  $ }  $ ifstream in ( "txt.in" ) ;  $ ofstream out ( "txt.out" ) ;  $ vector < int > v [ 105 ] ;  $ vector < int > v1 [ 105 ] ;  $ bool vis [ 105 ] ;  $ void dfs ( long long x ) {  $ ~vis [ x ] = 1 ;  $ ~int u = v [ x ] . size ( ) ;  $ ~for ( int i = 0 ; i < u ; ++ i ) {  $ ~~if ( ! vis [ v [ x ] [ i ] ] ) dfs ( v [ x ] [ i ] ) ;  $ ~}  $ }  $ int main ( ) {  $ ~cout << fixed << setprecision ( 12 ) ;  $ ~long long n , m ;  $ ~cin >> n >> m ;  $ ~int ok2 = 0 ;  $ ~for ( int i = 1 ; i <= n ; ++ i ) {  $ ~~long long x ;  $ ~~cin >> x ;  $ ~~ok2 |= ( x > 0 ) ;  $ ~~for ( int j = 1 ; j <= x ; ++ j ) {  $ ~~~long long y ;  $ ~~~cin >> y ;  $ ~~~v1 [ i ] . push_back ( y ) ;  $ ~~}  $ ~}  $ ~for ( int i = 1 ; i <= n ; ++ i ) {  $ ~~for ( int j = i + 1 ; j <= n ; ++ j ) {  $ ~~~int u = v1 [ i ] . size ( ) ;  $ ~~~int ok = 0 ;  $ ~~~int u1 = v1 [ j ] . size ( ) ;  $ ~~~for ( int t = 0 ; t < u ; ++ t ) {  $ ~~~~for ( int t1 = 0 ; t1 < u1 ; ++ t1 ) {  $ ~~~~~if ( v1 [ i ] [ t ] == v1 [ j ] [ t1 ] ) ok = 1 ;  $ ~~~~}  $ ~~~}  $ ~~~if ( ok ) {  $ ~~~~v [ i ] . push_back ( j ) ;  $ ~~~~v [ j ] . push_back ( i ) ;  $ ~~~}  $ ~~}  $ ~}  $ ~long long cnt = 0 ;  $ ~for ( int i = 1 ; i <= n ; ++ i ) {  $ ~~if ( ! vis [ i ] ) {  $ ~~~++ cnt ;  $ ~~~dfs ( i ) ;  $ ~~}  $ ~}  $ ~cout << cnt - ok2 << '\n' ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~string s ;  $ ~long long int i , ans ;  $ ~cin >> s ;  $ ~ans = 0 ;  $ ~for ( i = 0 ; i < s . length ( ) ; i ++ ) {  $ ~~if ( s [ i ] == '0' ) {  $ ~~~ans = i ;  $ ~~~break ;  $ ~~}  $ ~}  $ ~for ( i = 0 ; i < s . length ( ) ; i ++ ) {  $ ~~if ( i != ans ) cout << s [ i ] ;  $ ~}  $ ~cout << endl ;  $ }
int main ( ) {  $ ~string s ;  $ ~int n , c = 0 ;  $ ~cin >> n >> s ;  $ ~while ( n > 0 ) {  $ ~~if ( s [ n - 1 ] == '>' )  $ ~~~c ++ ;  $ ~~else  $ ~~~break ;  $ ~~n -- ;  $ ~}  $ ~n = s . length ( ) ;  $ ~int i = 0 ;  $ ~while ( i < n ) {  $ ~~if ( s [ i ] == '<' )  $ ~~~c ++ ;  $ ~~else  $ ~~~break ;  $ ~~i ++ ;  $ ~}  $ ~cout << c << endl ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~string arr ;  $ ~cin >> arr ;  $ ~int t = arr . find ( '0' ) ;  $ ~if ( t == - 1 ) {  $ ~~arr . erase ( arr . size ( ) - 1 ) ;  $ ~} else {  $ ~~arr . erase ( t , 1 ) ;  $ ~}  $ ~cout << arr << endl ;  $ }
int gcd ( int a , int b ) {  $ ~return b ? gcd ( b , a % b ) : a ;  $ }  $ int lcm ( int a , int b ) {  $ ~return a / gcd ( a , b ) * b ;  $ }  $ long long powmod ( long long a , long long b , long long MOD ) {  $ ~long long ans = 1 ;  $ ~while ( b ) {  $ ~~if ( b % 2 ) ans = ans * a % MOD ;  $ ~~a = a * a % MOD ;  $ ~~b /= 2 ;  $ ~}  $ ~return ans ;  $ }  $ vector < int > p [ 200001 ] ;  $ int m [ 200001 ] , ma ;  $ int main ( ) {  $ ~int n ;  $ ~cin >> n ;  $ ~for ( int i = 1 ; i <= n ; i ++ ) {  $ ~~int mm ;  $ ~~cin >> mm ;  $ ~~int mid = 0 ;  $ ~~for ( int j = 1 ; j <= mm ; j ++ ) {  $ ~~~int t ;  $ ~~~cin >> t ;  $ ~~~p [ i ] . push_back ( t ) ;  $ ~~~ma = max ( ma , t ) ;  $ ~~~mid = max ( mid , t ) ;  $ ~~}  $ ~~m [ i ] = mid ;  $ ~}  $ ~long long sum = 0 ;  $ ~for ( int i = 1 ; i <= n ; i ++ ) {  $ ~~if ( m [ i ] == ma ) continue ;  $ ~~sum += 1 ll * ( ma - m [ i ] ) * ( int ) ( p [ i ] . size ( ) ) ;  $ ~}  $ ~cout << sum << endl ;  $ ~return 0 ;  $ }
const int oo = ( int ) 1e9 ;  $ const double PI = 2 * acos ( 0.0 ) ;  $ const double eps = 1e-9 ;  $ string fix ( string s ) {  $ ~string ret = "99999999999" ;  $ ~for ( int i = 0 ; i < ( int ) ( 4 ) ; i ++ ) {  $ ~~string tmp = s . substr ( i , 4 - i ) + s . substr ( 0 , i ) ;  $ ~~ret = min ( tmp , ret ) ;  $ ~}  $ ~return ret ;  $ }  $ int main ( ) {  $ ~int n ;  $ ~char c ;  $ ~cin >> n ;  $ ~map < string , int > dic ;  $ ~bool flag = false ;  $ ~int mx = 0 ;  $ ~for ( int whatever = 0 ; whatever < ( int ) ( n ) ; whatever ++ ) {  $ ~~string s = "" ;  $ ~~for ( int i = 0 ; i < ( int ) ( 4 ) ; i ++ ) {  $ ~~~cin >> c ;  $ ~~~s += c ;  $ ~~}  $ ~~char t = s [ 2 ] ;  $ ~~s [ 2 ] = s [ 3 ] ;  $ ~~s [ 3 ] = t ;  $ ~~s = fix ( s ) ;  $ ~~if ( dic . find ( s ) == dic . end ( ) ) dic [ s ] = 0 ;  $ ~~dic [ s ] ++ ;  $ ~~if ( whatever != n - 1 ) cin >> c >> c ;  $ ~}  $ ~cout << dic . size ( ) << endl ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~long double n ;  $ ~cin >> n ;  $ ~if ( n <= 127 ) {  $ ~~cout << "byte" << endl ;  $ ~} else if ( n <= 32767 ) {  $ ~~cout << "short" << endl ;  $ ~} else if ( n <= 2147483647 ) {  $ ~~cout << "int" << endl ;  $ ~} else if ( n <= 9223372036854775807 ) {  $ ~~cout << "long" << endl ;  $ ~} else {  $ ~~cout << "BigInteger" << endl ;  $ ~}  $ ~return 0 ;  $ }
const int Max_N = 2 * 1e5 + 5 ;  $ int main ( ) {  $ ~int n ;  $ ~string s ;  $ ~cin >> n >> s ;  $ ~int ant = 0 ;  $ ~for ( int i = 0 ; i < n ; i ++ ) {  $ ~~if ( s [ i ] != '<' ) break ;  $ ~~ant ++ ;  $ ~}  $ ~for ( int i = n - 1 ; i >= 0 ; i -- ) {  $ ~~if ( s [ i ] != '>' ) break ;  $ ~~ant ++ ;  $ ~}  $ ~cout << ant << endl ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~int remain = 0 , i , n , x , a [ 200001 ] = { 0 } , b [ 200001 ] = { 0 } ;  $ ~while ( cin >> n >> x ) {  $ ~~for ( i = 1 ; i <= n ; i ++ ) cin >> a [ i ] ;  $ ~~for ( i = 1 ; i <= n ; i ++ ) {  $ ~~~b [ i ] = ( a [ i ] + remain ) / x ;  $ ~~~remain = ( a [ i ] + remain ) % x ;  $ ~~}  $ ~~for ( i = 1 ; i <= n ; i ++ ) {  $ ~~~if ( i < n )  $ ~~~~cout << b [ i ] << " " ;  $ ~~~else  $ ~~~~cout << b [ i ] << endl ;  $ ~~}  $ ~}  $ ~return 0 ;  $ }
string s ;  $ int m ;  $ int main ( ) {  $ ~cin >> s ;  $ ~int l = 0 , r = 0 ;  $ ~for ( int i = 0 ; i < s . size ( ) ; i ++ ) {  $ ~~if ( s [ i ] == '(' ) {  $ ~~~l ++ , r ++ ;  $ ~~} else {  $ ~~~l -- ;  $ ~~~if ( r > 0 ) r -- ;  $ ~~~if ( l < 0 ) {  $ ~~~~cout << - 1 << endl ;  $ ~~~~return 0 ;  $ ~~~}  $ ~~~if ( s [ i ] == '#' ) { r = 0 , m ++ ; }  $ ~~}  $ ~}  $ ~if ( r != 0 ) {  $ ~~cout << - 1 << endl ;  $ ~~return 0 ;  $ ~}  $ ~for ( int i = 0 ; i < m - 1 ; i ++ ) { cout << 1 << endl ; }  $ ~cout << l + 1 << endl ;  $ }
int main ( ) {  $ ~long long a , i , j , ans = 0 , n , arr [ 4100 ] , find [ 50000 ] = { } , sum = 0 ;  $ ~string s ;  $ ~cin >> a >> s ;  $ ~n = s . size ( ) ;  $ ~for ( i = 0 ; i < n ; i ++ ) arr [ i ] = s [ i ] - '0' ;  $ ~for ( i = 0 ; i < n ; i ++ ) {  $ ~~sum = 0 ;  $ ~~for ( j = i ; j < n ; j ++ ) {  $ ~~~sum += arr [ j ] ;  $ ~~~find [ sum ] ++ ;  $ ~~}  $ ~}  $ ~if ( a == 0 )  $ ~~ans = n * ( n + 1 ) * find [ 0 ] - find [ 0 ] * find [ 0 ] ;  $ ~else {  $ ~~for ( i = 0 ; i < n ; i ++ ) {  $ ~~~sum = 0 ;  $ ~~~for ( j = i ; j < n ; j ++ ) {  $ ~~~~sum += arr [ j ] ;  $ ~~~~if ( sum != 0 && a % sum == 0 && a / sum <= n * 9 ) ans += find [ a / sum ] ;  $ ~~~}  $ ~~}  $ ~}  $ ~cout << ans << endl ;  $ ~return 0 ;  $ }
int e [ 5010 ] [ 5010 ] = { } ;  $ int main ( ) {  $ ~string s , t ;  $ ~long long cnt , sum = 0 ;  $ ~cin >> s >> t ;  $ ~for ( int i = 0 ; i < s . length ( ) ; i ++ ) e [ 0 ] [ i + 1 ] = s [ i ] - 'a' ;  $ ~for ( int i = 0 ; i < t . length ( ) ; i ++ ) e [ i + 1 ] [ 0 ] = t [ i ] - 'a' ;  $ ~for ( int r = 1 ; r <= t . length ( ) ; r ++ )  $ ~~if ( e [ 0 ] [ 1 ] == e [ r ] [ 0 ] ) {  $ ~~~e [ r ] [ 1 ] ++ ;  $ ~~~sum ++ ;  $ ~~}  $ ~for ( int c = 2 ; c <= s . length ( ) ; c ++ ) {  $ ~~cnt = 0 ;  $ ~~for ( int r = 1 ; r <= t . length ( ) ; r ++ ) {  $ ~~~if ( e [ 0 ] [ c ] == e [ r ] [ 0 ] ) {  $ ~~~~e [ r ] [ c ] = cnt + 1 ;  $ ~~~~sum = ( sum + e [ r ] [ c ] ) % 1000000007 LL ;  $ ~~~}  $ ~~~cnt = ( cnt + e [ r ] [ c - 1 ] ) % 1000000007 LL ;  $ ~~}  $ ~}  $ ~cout << sum << endl ;  $ }
long long n , m , a , d , t [ 100005 ] , pt , pa , da , ans , sa , sl ;  $ void readf ( ) {  $ ~cin >> n >> m >> a >> d ;  $ ~for ( int i = ( 1 ) ; i <= ( m ) ; ++ i ) cin >> t [ i ] ;  $ ~m = unique ( t + 1 , t + m + 1 ) - t - 1 ;  $ }  $ void solve ( ) {  $ ~pt = pa = 1 ;  $ ~da = d / a + 1 ;  $ ~ans = 0 ;  $ ~while ( pt <= m ) {  $ ~~sa = min ( t [ pt ] / a , n ) - pa + 1 ;  $ ~~if ( sa > 0 ) {  $ ~~~sl = ( sa + da - 1 ) / da ;  $ ~~~ans += sl ;  $ ~~~pa += ( sl - 1 ) * da ;  $ ~~~while ( t [ pt ] <= pa * a + d && pt <= m ) pt ++ ;  $ ~~~pa = ( pa * a + d ) / a + 1 ;  $ ~~} else {  $ ~~~ans ++ ;  $ ~~~int tmp = pt ;  $ ~~~while ( t [ pt ] <= t [ tmp ] + d && pt <= m ) pt ++ ;  $ ~~~pa = ( t [ tmp ] + d ) / a + 1 ;  $ ~~}  $ ~}  $ ~if ( pa <= n ) ans += ( n - pa + 1 + da - 1 ) / da ;  $ ~cout << ans << '\n' ;  $ }  $ int main ( ) {  $ ~readf ( ) ;  $ ~solve ( ) ;  $ }
int main ( ) {  $ ~long long t1 , t2 , x1 , x2 , t0 , Min = 0 , ans1 = 0 , ans2 = 0 , j ;  $ ~double Max = 1000 , aa ;  $ ~cin >> t1 >> t2 >> x1 >> x2 >> t0 ;  $ ~if ( t1 == t2 && t2 == t0 ) {  $ ~~cout << x1 << " " << x2 << endl ;  $ ~} else if ( t1 == t0 ) {  $ ~~cout << x1 << " " << 0 << endl ;  $ ~} else if ( t2 == t0 ) {  $ ~~cout << 0 << " " << x2 << endl ;  $ ~} else {  $ ~~Max = t2 - t0 ;  $ ~~Min = x2 ;  $ ~~ans1 = 0 ;  $ ~~ans2 = x2 ;  $ ~~for ( int i = 1 ; i <= x1 ; i ++ ) {  $ ~~~j = i * ( t1 - t0 ) / ( t0 - t2 ) ;  $ ~~~if ( ( i * ( t0 - t1 ) ) % ( t2 - t0 ) != 0 ) j ++ ;  $ ~~~aa = ( 1.0 ) * ( t1 * i + t2 * j ) / ( i + j ) - t0 ;  $ ~~~if ( j >= 0 && j <= x2 && aa < Max ) {  $ ~~~~Max = aa ;  $ ~~~~Min = i + j ;  $ ~~~~ans1 = i ;  $ ~~~~ans2 = j ;  $ ~~~}  $ ~~~if ( j >= 0 && j <= x2 && aa == Max && ( i + j ) > Min ) {  $ ~~~~Max = aa ;  $ ~~~~Min = i + j ;  $ ~~~~ans1 = i ;  $ ~~~~ans2 = j ;  $ ~~~}  $ ~~}  $ ~~cout << ans1 << " " << ans2 << endl ;  $ ~}  $ ~return 0 ;  $ }
int a [ 150000 ] ;  $ int main ( ) {  $ ~int n ;  $ ~while ( cin >> n ) {  $ ~~for ( int i = 0 ; i < n ; ++ i ) cin >> a [ i ] ;  $ ~~sort ( a , a + n ) ;  $ ~~for ( int i = 0 ; i < n ; ++ i ) {  $ ~~~if ( i == 0 )  $ ~~~~cout << a [ i ] ;  $ ~~~else  $ ~~~~cout << ' ' << a [ i ] ;  $ ~~}  $ ~~cout << endl ;  $ ~}  $ ~return 0 ;  $ }
vector < int > a [ 200005 ] ;  $ int maxval [ 200005 ] ;  $ int main ( ) {  $ ~int n , m , x , ultimate = 0 ;  $ ~cin >> n ;  $ ~for ( int i = 1 ; i <= n ; i ++ ) {  $ ~~cin >> m ;  $ ~~for ( int j = 0 ; j < m ; j ++ ) {  $ ~~~cin >> x ;  $ ~~~a [ i ] . push_back ( x ) ;  $ ~~~maxval [ i ] = max ( maxval [ i ] , x ) ;  $ ~~}  $ ~~ultimate = max ( maxval [ i ] , ultimate ) ;  $ ~}  $ ~long long ans = 0 ;  $ ~for ( int i = 1 ; i <= n ; i ++ ) {  $ ~~if ( maxval [ i ] < ultimate ) { ans += ( long long ) a [ i ] . size ( ) * ( long long ) ( ultimate - maxval [ i ] ) ; }  $ ~}  $ ~cout << ans << endl ;  $ ~return 0 ;  $ }
string s ;  $ int zlicz [ 3 ] ;  $ char wz = 'a' ;  $ int main ( ) {  $ ~cin >> s ;  $ ~for ( int i = 0 ; i < s . length ( ) ; i ++ ) {  $ ~~if ( s [ i ] != wz ) {  $ ~~~if ( ( s [ i ] - wz == 1 ) && ( wz != 'c' ) ) {  $ ~~~~wz = s [ i ] ;  $ ~~~~zlicz [ wz - 'a' ] = 1 ;  $ ~~~} else {  $ ~~~~cout << "NO" << endl ;  $ ~~~~return 0 ;  $ ~~~}  $ ~~} else  $ ~~~zlicz [ wz - 'a' ] ++ ;  $ ~}  $ ~if ( ( zlicz [ 0 ] == 0 ) || ( zlicz [ 1 ] == 0 ) ) {  $ ~~cout << "NO" << endl ;  $ ~~return 0 ;  $ ~}  $ ~if ( ( zlicz [ 2 ] == zlicz [ 0 ] ) || ( zlicz [ 2 ] == zlicz [ 1 ] ) )  $ ~~cout << "YES" << endl ;  $ ~else  $ ~~cout << "NO" << endl ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~int n ;  $ ~cin >> n ;  $ ~vector < int > a ( n ) ;  $ ~for ( int i = 0 ; i < n ; i ++ ) cin >> a [ i ] ;  $ ~int res = 0 ;  $ ~int head = 0 ;  $ ~for ( int i = 1 ; i < n ; i ++ ) {  $ ~~if ( a [ i ] == a [ i - 1 ] ) {  $ ~~~int tar = i - 1 ;  $ ~~~res = max ( res , tar - head ) ;  $ ~~~int len = ( tar - head ) / 2 ;  $ ~~~for ( int j = head ; j <= head + len ; j ++ ) { a [ j ] = a [ head ] ; }  $ ~~~for ( int j = head + len + 1 ; j < i ; j ++ ) { a [ j ] = a [ i ] ; }  $ ~~~head = i ;  $ ~~}  $ ~}  $ ~int tar = n - 1 ;  $ ~res = max ( res , tar - head ) ;  $ ~int len = ( tar - head ) / 2 ;  $ ~for ( int j = head ; j <= head + len ; j ++ ) { a [ j ] = a [ head ] ; }  $ ~for ( int j = head + len + 1 ; j < n ; j ++ ) { a [ j ] = a [ n - 1 ] ; }  $ ~cout << res / 2 << endl ;  $ ~for ( int i = 0 ; i < n ; i ++ ) { cout << a [ i ] << ( i + 1 == n ? "\n" : " " ) ; }  $ ~return 0 ;  $ }
long long m , h1 , a1 , x1 , h2 , a2 , x2 , y2 , y , p1 , p2 , t1 , t2 ;  $ int main ( ) {  $ ~cin >> m >> h1 >> a1 >> x1 >> y >> h2 >> a2 >> x2 >> y2 ;  $ ~for ( int i = 1 ; i <= 1e7 ; i ++ ) {  $ ~~long long ans1 = ( ( ( h1 * x1 * 1 LL ) + y ) % m ) ;  $ ~~long long ans2 = ( ( ( h2 * x2 * 1 LL ) + y2 ) % m ) ;  $ ~~h1 = ans1 , h2 = ans2 ;  $ ~~if ( a1 == ans1 ) {  $ ~~~if ( ! p1 )  $ ~~~~p1 = i ;  $ ~~~else if ( ! t1 )  $ ~~~~t1 = i - p1 ;  $ ~~}  $ ~~if ( a2 == ans2 ) {  $ ~~~if ( ! p2 )  $ ~~~~p2 = i ;  $ ~~~else if ( ! t2 )  $ ~~~~t2 = i - p2 ;  $ ~~}  $ ~}  $ ~if ( ! p1 || ! p2 ) return ! ( cout << - 1 << endl ) ;  $ ~for ( int i = 1 ; i <= 1e7 ; i ++ ) {  $ ~~if ( p1 == p2 ) return ! ( cout << p1 << endl ) ;  $ ~~if ( p1 < p2 )  $ ~~~p1 += t1 ;  $ ~~else  $ ~~~p2 += t2 ;  $ ~}  $ ~cout << - 1 << endl ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~long long int a ;  $ ~cin >> a ;  $ ~string s ;  $ ~cin >> s ;  $ ~long long int n = s . length ( ) ;  $ ~long long int cumm [ n + 1 ] ;  $ ~long long int ans = 0 ;  $ ~cumm [ 0 ] = 0 ;  $ ~long long int count0 = 0 ;  $ ~for ( long long int i = 1 ; i < n + 1 ; i ++ ) {  $ ~~if ( s [ i ] == '0' ) count0 ++ ;  $ ~~cumm [ i ] = cumm [ i - 1 ] + ( s [ i - 1 ] - '0' ) ;  $ ~}  $ ~map < long long int , long long int > value ;  $ ~for ( long long int i = 0 ; i < n ; i ++ ) {  $ ~~for ( long long int j = i + 1 ; j < n + 1 ; j ++ ) { value [ cumm [ j ] - cumm [ i ] ] ++ ; }  $ ~}  $ ~if ( a == 0 ) {  $ ~~cout << ( n * ( n + 1 ) ) * value [ 0 ] - value [ 0 ] * value [ 0 ] << '\n' ;  $ ~~exit ( 0 ) ;  $ ~}  $ ~for ( long long int i = 0 ; i < n ; i ++ ) {  $ ~~for ( long long int j = i + 1 ; j < n + 1 ; j ++ ) {  $ ~~~if ( ( cumm [ j ] - cumm [ i ] ) == 0 ) continue ;  $ ~~~if ( a % ( cumm [ j ] - cumm [ i ] ) == 0 ) ans = ans + value [ a / ( cumm [ j ] - cumm [ i ] ) ] ;  $ ~~}  $ ~}  $ ~cout << ans << '\n' ;  $ }
int main ( ) {  $ ~int x , y ;  $ ~cin >> x >> y ;  $ ~int tx , ty ;  $ ~tx = abs ( x ) , ty = abs ( y ) ;  $ ~int mx = max ( tx , ty ) - 1 ;  $ ~if ( ( x == 0 && y == 0 ) || ( x == 1 && y == 0 ) ) {  $ ~~cout << 0 << endl ;  $ ~~return 0 ;  $ ~}  $ ~int ans = 0 ;  $ ~if ( x >= 0 && y >= 0 ) {  $ ~~if ( tx >= ty )  $ ~~~ans = ( mx * 4 ) + 1 ;  $ ~~else  $ ~~~ans = mx * 4 + 2 ;  $ ~} else if ( x < 0 && y >= 0 ) {  $ ~~if ( tx > ty )  $ ~~~ans = mx * 4 + 3 ;  $ ~~else  $ ~~~ans = mx * 4 + 2 ;  $ ~} else if ( x <= 0 && y <= 0 ) {  $ ~~if ( tx >= ty )  $ ~~~ans = mx * 4 + 3 ;  $ ~~else  $ ~~~ans = mx * 4 + 4 ;  $ ~} else if ( x >= 0 && y < 0 ) {  $ ~~if ( ty >= tx )  $ ~~~ans = mx * 4 + 4 ;  $ ~~else  $ ~~~ans = mx * 4 ;  $ ~~if ( ty <= ( tx - 2 ) ) ans ++ ;  $ ~}  $ ~cout << ans << endl ;  $ ~return 0 ;  $ }
unsigned long long a [ 2000000 ] ;  $ unsigned long long b [ 2000000 ] ;  $ int n ;  $ bool judge ( int n ) {  $ ~for ( int i = 0 ; i < n - 1 ; ++ i ) {  $ ~~if ( a [ i ] == a [ i + 1 ] ) return true ;  $ ~}  $ ~return false ;  $ }  $ int main ( ) {  $ ~while ( cin >> n ) {  $ ~~memset ( a , 0 , sizeof ( a ) ) ;  $ ~~for ( int i = 0 ; i < n ; ++ i ) {  $ ~~~cin >> a [ i ] ;  $ ~~~b [ a [ i ] ] ++ ;  $ ~~}  $ ~~sort ( a , a + n ) ;  $ ~~int ans = 0 ;  $ ~~for ( int i = 1 ; i < 2000000 ; ++ i ) {  $ ~~~b [ i ] += ( b [ i - 1 ] / 2 ) ;  $ ~~~b [ i - 1 ] %= 2 ;  $ ~~~ans += b [ i - 1 ] ;  $ ~~}  $ ~~cout << ans << endl ;  $ ~}  $ }
void solve ( ) {  $ ~long long n , i , j , d ;  $ ~cin >> n >> d ;  $ ~long long arr [ n ] ;  $ ~for ( long long i = 0 ; i < n ; ++ i ) { cin >> arr [ i ] ; }  $ ~if ( n < 3 ) {  $ ~~cout << 0 << '\n' ;  $ ~~return ;  $ ~}  $ ~long long l = 0 , r = 2 ;  $ ~long long sum = 0 ;  $ ~while ( l < n - 2 && r < n ) {  $ ~~if ( arr [ r ] - arr [ l ] <= d ) {  $ ~~~sum += ( r - l - 1 ) * ( r - l ) / 2 ;  $ ~~~r ++ ;  $ ~~} else {  $ ~~~l ++ ;  $ ~~}  $ ~~if ( r - l == 1 ) r ++ ;  $ ~}  $ ~cout << sum << '\n' ;  $ }  $ int main ( ) {  $ ~long long t = 1 ;  $ ~while ( t -- ) { solve ( ) ; }  $ ~return 0 ;  $ }
long long tab [ 100001 ] ;  $ int main ( ) {  $ ~int T ;  $ ~while ( cin >> T ) {  $ ~~memset ( tab , 0 , sizeof ( tab ) ) ;  $ ~~int num = 0 ;  $ ~~int p = 1 ;  $ ~~for ( int i = 1 ; i <= T ; i ++ ) cin >> tab [ i ] ;  $ ~~sort ( tab + 1 , tab + T + 1 ) ;  $ ~~for ( int i = 1 ; i <= T - 1 ; i ++ ) {  $ ~~~while ( p <= T ) {  $ ~~~~if ( tab [ p ] > tab [ i ] ) {  $ ~~~~~p ++ ;  $ ~~~~~num ++ ;  $ ~~~~~break ;  $ ~~~~} else  $ ~~~~~p ++ ;  $ ~~~}  $ ~~}  $ ~~cout << num << endl ;  $ ~}  $ }
long long a [ 100001 ] ;  $ long long s [ 100000 ] ;  $ int main ( ) {  $ ~long long n , i , max , min , mm , k , t ;  $ ~while ( cin >> n ) {  $ ~~for ( i = 1 ; i <= n ; i ++ ) cin >> a [ i ] ;  $ ~~for ( i = 1 ; i <= n - 1 ; i ++ ) {  $ ~~~s [ i ] = abs ( a [ i ] - a [ i + 1 ] ) ;  $ ~~~if ( i % 2 == 1 ) s [ i ] = 0 - s [ i ] ;  $ ~~}  $ ~~max = s [ 1 ] ;  $ ~~min = s [ 1 ] ;  $ ~~mm = 0 - min ;  $ ~~for ( k = 2 ; k <= n - 1 ; k ++ ) {  $ ~~~if ( max < 0 )  $ ~~~~max = s [ k ] ;  $ ~~~else  $ ~~~~max = max + s [ k ] ;  $ ~~~if ( min > 0 )  $ ~~~~min = s [ k ] ;  $ ~~~else  $ ~~~~min = min + s [ k ] ;  $ ~~~if ( k % 2 == 0 && max > mm ) mm = max ;  $ ~~~if ( k % 2 == 1 && 0 - min > mm ) mm = 0 - min ;  $ ~~}  $ ~~cout << mm << endl ;  $ ~}  $ ~return 0 ;  $ }
const int MAXN = 2e5 + 5 ;  $ int N ;  $ long long M , P , H ;  $ long long A [ MAXN ] , B [ MAXN ] ;  $ int main ( ) {  $ ~cin >> N ;  $ ~for ( int i = 0 ; i < N ; i ++ ) {  $ ~~cin >> A [ i ] ;  $ ~~for ( int j = 0 ; j < A [ i ] ; j ++ ) {  $ ~~~cin >> P ;  $ ~~~B [ i ] = max ( B [ i ] , P ) ;  $ ~~}  $ ~~M = max ( M , B [ i ] ) ;  $ ~}  $ ~for ( int i = 0 ; i < N ; i ++ ) { H += A [ i ] * ( M - B [ i ] ) ; }  $ ~cout << H << '\n' ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~int n , sum ;  $ ~cin >> n ;  $ ~for ( int i = 1 ; i <= 1000 ; i ++ ) {  $ ~~int k = 0 ;  $ ~~sum = n * i + 1 ;  $ ~~for ( int j = 2 ; j < sum ; j ++ ) {  $ ~~~if ( sum % j == 0 ) {  $ ~~~~k = 1 ;  $ ~~~~break ;  $ ~~~}  $ ~~}  $ ~~if ( k == 1 ) {  $ ~~~cout << i << endl ;  $ ~~~break ;  $ ~~}  $ ~}  $ ~return 0 ;  $ }
int tmp , min1 , max1 , sum_n , index_max , index_min ;  $ int arr1 [ 1000 ] [ 1000 ] ;  $ char arr3 [ 100 ] ;  $ int arr [ 10000 ] ;  $ void display_vector ( vector < int > v ) {  $ ~for ( int i = 0 ; i < v . size ( ) ; i ++ ) cout << v [ i ] << " " ;  $ ~cout << endl ;  $ }  $ void speed ( ) { }  $ void min_max ( vector < int > v , int l ) {  $ ~min1 = INT_MAX ;  $ ~max1 = INT_MIN ;  $ ~for ( int i = l ; i < v . size ( ) ; i ++ ) {  $ ~~if ( v [ i ] <= min1 ) {  $ ~~~min1 = v [ i ] ;  $ ~~~index_min = i ;  $ ~~}  $ ~~if ( v [ i ] >= max1 ) {  $ ~~~max1 = v [ i ] ;  $ ~~~index_max = i ;  $ ~~}  $ ~}  $ }  $ int sum_v ( vector < int > v ) {  $ ~for ( int i = 0 ; i < v . size ( ) ; i ++ ) sum_n += v [ i ] ;  $ ~return sum_n ;  $ }  $ bool is_it_sorted_acs ( vector < int > v ) {  $ ~bool test1 = false ;  $ ~for ( int i = 0 ; i < v . size ( ) - 1 ; i ++ )  $ ~~if ( v [ i + 1 ] <= v [ i ] ) {  $ ~~~test1 = false ;  $ ~~~return test1 ;  $ ~~}  $ ~test1 = true ;  $ ~return test1 ;  $ }  $ bool is_it_sorted_des ( vector < int > v ) {  $ ~bool test1 = false ;  $ ~for ( int i = 0 ; i < v . size ( ) - 1 ; i ++ )  $ ~~if ( v [ i + 1 ] >= v [ i ] ) {  $ ~~~test1 = false ;  $ ~~~return test1 ;  $ ~~}  $ ~test1 = true ;  $ ~return test1 ;  $ }  $ int main ( ) {  $ ~speed ( ) ;  $ ~string s ;  $ ~cin >> s ;  $ ~int cn = 0 , ci = 0 , ce = 0 , ct = 0 ;  $ ~for ( int i = 0 ; i < s . length ( ) ; i ++ ) {  $ ~~if ( s [ i ] == 'n' )  $ ~~~cn ++ ;  $ ~~else if ( s [ i ] == 'i' )  $ ~~~ci ++ ;  $ ~~else if ( s [ i ] == 'e' )  $ ~~~ce ++ ;  $ ~~else if ( s [ i ] == 't' )  $ ~~~ct ++ ;  $ ~}  $ ~cn = ( cn - 1 ) / 2 ;  $ ~ce /= 3 ;  $ ~cout << min ( min ( cn , ct ) , min ( ce , ci ) ) << endl ;  $ }
int main ( ) {  $ ~int n ;  $ ~cin >> n ;  $ ~long long int a , b , c , d ;  $ ~cin >> a >> b >> c >> d ;  $ ~long long int sum = a + b + c + d ;  $ ~int count = 1 ;  $ ~for ( int i = 1 ; i < n ; i ++ ) {  $ ~~cin >> a >> b >> c >> d ;  $ ~~if ( ( a + b + c + d ) > sum ) { count ++ ; }  $ ~}  $ ~cout << count << endl ;  $ }
const int MAXN = 1000 * 100 + 10 ;  $ int arr [ MAXN ] ;  $ long long n , d ;  $ int bs ( int t , int i ) {  $ ~int l = i , r = n ;  $ ~while ( r - l > 1 ) {  $ ~~int mid = ( r + l ) / 2 ;  $ ~~if ( arr [ mid ] - t <= d )  $ ~~~l = mid ;  $ ~~else  $ ~~~r = mid ;  $ ~}  $ ~return l ;  $ }  $ int main ( ) {  $ ~long long ans = 0 ;  $ ~cin >> n >> d ;  $ ~for ( int i = 0 ; i < n ; i ++ ) cin >> arr [ i ] ;  $ ~for ( int i = 0 ; i < n ; i ++ ) {  $ ~~int k = ( bs ( arr [ i ] , i ) - i ) ;  $ ~~ans += ( 1 LL * k * ( k - 1 ) ) / 2 ;  $ ~}  $ ~cout << ans << endl ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~long long const N = 1e5 + 1 ;  $ ~long long n , arr [ N ] ;  $ ~cin >> n ;  $ ~arr [ 0 ] = 0 ;  $ ~for ( int i = 1 ; i < N ; i ++ ) arr [ i ] = arr [ i - 1 ] + i ;  $ ~for ( int i = 1 ; i < N ; i ++ )  $ ~~if ( binary_search ( arr + 1 , arr + N , n - arr [ i ] ) ) {  $ ~~~cout << "YES" << endl ;  $ ~~~return 0 ;  $ ~~}  $ ~cout << "NO" << endl ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~int remain = 0 , i , n , x , a [ 200001 ] = { 0 } , b [ 200001 ] = { 0 } ;  $ ~while ( cin >> n >> x ) {  $ ~~for ( i = 1 ; i <= n ; i ++ ) cin >> a [ i ] ;  $ ~~for ( i = 1 ; i <= n ; i ++ ) {  $ ~~~b [ i ] = ( a [ i ] + remain ) / x ;  $ ~~~remain = ( a [ i ] + remain ) % x ;  $ ~~}  $ ~~for ( i = 1 ; i <= n ; i ++ ) {  $ ~~~if ( i < n )  $ ~~~~cout << b [ i ] << " " ;  $ ~~~else  $ ~~~~cout << b [ i ] << endl ;  $ ~~}  $ ~}  $ ~return 0 ;  $ }
int main ( ) {  $ ~int n , flag = 0 ;  $ ~char s [ 105 ] ;  $ ~cin >> n ;  $ ~cin >> s ;  $ ~for ( int i = 0 ; i < n ; i ++ ) {  $ ~~if ( s [ i ] == s [ i + 1 ] && s [ i ] != '?' ) {  $ ~~~flag = 0 ;  $ ~~~break ;  $ ~~}  $ ~~if ( s [ i ] == '?' ) {  $ ~~~if ( s [ i - 1 ] == s [ i + 1 ] || s [ i + 1 ] == '?' ) { flag = 1 ; }  $ ~~}  $ ~~if ( s [ 0 ] == '?' || s [ n - 1 ] == '?' ) flag = 1 ;  $ ~}  $ ~if ( flag )  $ ~~cout << "Yes\n" ;  $ ~else  $ ~~cout << "No\n" ;  $ }
const int N = 3e5 + 5 ;  $ const int M = 1.5e7 + 10 ;  $ int a [ N ] ;  $ int num [ M ] ;  $ bool vis [ M ] ;  $ int n ;  $ int main ( ) {  $ ~while ( cin >> n ) {  $ ~~int maxgcd = 0 ;  $ ~~for ( int i = 0 ; i < n ; ++ i ) {  $ ~~~cin >> a [ i ] ;  $ ~~~maxgcd = __gcd ( maxgcd , a [ i ] ) ;  $ ~~}  $ ~~for ( int i = 0 ; i < n ; ++ i ) num [ a [ i ] / maxgcd ] ++ ;  $ ~~int maxsub = 0 ;  $ ~~for ( int i = 2 ; i < M ; ++ i ) {  $ ~~~if ( ! vis [ i ] ) {  $ ~~~~int thissub = 0 ;  $ ~~~~for ( int j = i ; j < M ; j += i ) {  $ ~~~~~vis [ j ] = 1 ;  $ ~~~~~thissub += num [ j ] ;  $ ~~~~}  $ ~~~~maxsub = max ( maxsub , thissub ) ;  $ ~~~}  $ ~~}  $ ~~if ( ! maxsub )  $ ~~~cout << - 1 << endl ;  $ ~~else  $ ~~~cout << n - maxsub << endl ;  $ ~~memset ( vis , 0 , sizeof ( vis ) ) ;  $ ~~memset ( num , 0 , sizeof ( num ) ) ;  $ ~}  $ ~return 0 ;  $ }
long long n , x , y ;  $ int main ( ) {  $ ~cin >> n >> x >> y ;  $ ~if ( x + y <= n + 1 ) {  $ ~~cout << "White" << endl ;  $ ~~return 0 ;  $ ~}  $ ~cout << "Black" << endl ;  $ }
int main ( ) {  $ ~int n , k ;  $ ~cin >> n >> k ;  $ ~string s = "" ;  $ ~for ( int i = 0 ; i < n ; i ++ ) { s += ( char ) 'a' + ( i % k ) ; }  $ ~cout << s << endl ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~int hpy , atky , defy , hpm , atkm , defm , h , a , d , ans ;  $ ~cin >> hpy >> atky >> defy >> hpm >> atkm >> defm >> h >> a >> d ;  $ ~for ( int t = 1 ; t <= hpm ; t ++ ) {  $ ~~int cans = max ( ceil ( ( hpm + defm * t - atky * t ) / double ( t ) ) * a , 0.0 ) ;  $ ~~int hdc = max ( t * atkm - t * defy - hpy + 1 , 0 ) ;  $ ~~cans += ( hdc / t ) * min ( d , t * h ) + min ( d , ( hdc % t ) * h ) ;  $ ~~if ( t == 1 )  $ ~~~ans = cans ;  $ ~~else  $ ~~~ans = min ( ans , cans ) ;  $ ~}  $ ~cout << ans << endl ;  $ ~return 0 ;  $ }
const double PI = acos ( - 1.0 ) ;  $ const double eps = 1e-6 ;  $ const int INF = 0 x3f3f3f3f ;  $ const int N = 2e5 + 5 ;  $ int main ( ) {  $ ~string a , b ;  $ ~while ( cin >> a >> b ) {  $ ~~bool flag = true ;  $ ~~bool tag = true ;  $ ~~char ch1 , ch2 , ch3 , ch4 ;  $ ~~bool kk = true ;  $ ~~if ( a . size ( ) != b . size ( ) ) {  $ ~~~kk = false ;  $ ~~} else {  $ ~~~for ( int i ( 0 ) ; i < a . size ( ) ; i ++ ) {  $ ~~~~if ( a [ i ] != b [ i ] && flag ) {  $ ~~~~~flag = false ;  $ ~~~~~ch1 = a [ i ] ;  $ ~~~~~ch2 = b [ i ] ;  $ ~~~~} else if ( a [ i ] != b [ i ] && tag ) {  $ ~~~~~tag = false ;  $ ~~~~~ch3 = a [ i ] ;  $ ~~~~~ch4 = b [ i ] ;  $ ~~~~} else if ( a [ i ] != b [ i ] ) {  $ ~~~~~kk = false ;  $ ~~~~~break ;  $ ~~~~}  $ ~~~}  $ ~~}  $ ~~if ( ! kk )  $ ~~~cout << "NO" << endl ;  $ ~~else {  $ ~~~if ( tag || flag )  $ ~~~~cout << "NO" << endl ;  $ ~~~else if ( ch1 == ch4 && ch2 == ch3 )  $ ~~~~cout << "YES" << endl ;  $ ~~~else  $ ~~~~cout << "NO" << endl ;  $ ~~}  $ ~}  $ ~return 0 ;  $ }
void win ( ) {  $ ~cout << "Yes" << endl ;  $ ~exit ( 0 ) ;  $ }  $ void reflect ( vector < string > & a ) {  $ ~int N = a . size ( ) ;  $ ~for ( int i = 0 ; i < N ; i ++ ) reverse ( a [ i ] . begin ( ) , a [ i ] . end ( ) ) ;  $ }  $ void rot ( vector < string > & a ) {  $ ~int N = a . size ( ) ;  $ ~for ( int x = 0 ; x < N / 2 ; x ++ ) {  $ ~~for ( int y = x ; y < N - x - 1 ; y ++ ) {  $ ~~~char tmp = a [ x ] [ y ] ;  $ ~~~a [ x ] [ y ] = a [ y ] [ N - 1 - x ] ;  $ ~~~a [ y ] [ N - 1 - x ] = a [ N - 1 - x ] [ N - 1 - y ] ;  $ ~~~a [ N - 1 - x ] [ N - 1 - y ] = a [ N - 1 - y ] [ x ] ;  $ ~~~a [ N - 1 - y ] [ x ] = tmp ;  $ ~~}  $ ~}  $ }  $ int main ( ) {  $ ~int N ;  $ ~cin >> N ;  $ ~vector < string > a ( N ) , b ( N ) ;  $ ~for ( int i = 0 ; i < N ; i ++ ) cin >> a [ i ] ;  $ ~for ( int j = 0 ; j < N ; j ++ ) cin >> b [ j ] ;  $ ~for ( int j = 0 ; j < 2 ; j ++ ) {  $ ~~reflect ( a ) ;  $ ~~for ( int i = 0 ; i < 4 ; i ++ ) {  $ ~~~rot ( a ) ;  $ ~~~if ( a == b ) win ( ) ;  $ ~~}  $ ~}  $ ~cout << "No" << endl ;  $ ~return 0 ;  $ }
const int N = 2e5 + 7 ;  $ const long double pi = 3.14159265359 ;  $ const long long INF = 1e9 ;  $ const long double eps = 1e-9 ;  $ int n , s [ N ] , r [ N ] , p [ N ] , l [ N ] ;  $ int main ( ) {  $ ~n = 4 ;  $ ~for ( int i = 1 ; i <= n ; i ++ ) {  $ ~~cin >> l [ i ] >> s [ i ] >> r [ i ] >> p [ i ] ;  $ ~~if ( p [ i ] ) {  $ ~~~if ( l [ i ] || s [ i ] || r [ i ] ) {  $ ~~~~cout << "YES\n" ;  $ ~~~~return 0 ;  $ ~~~}  $ ~~}  $ ~}  $ ~for ( int i = 1 ; i <= n ; i ++ ) {  $ ~~if ( i == 1 ) {  $ ~~~if ( l [ i ] == 1 ) {  $ ~~~~if ( p [ 4 ] ) {  $ ~~~~~cout << "YES\n" ;  $ ~~~~~return 0 ;  $ ~~~~}  $ ~~~}  $ ~~~if ( s [ i ] == 1 ) {  $ ~~~~if ( p [ 3 ] ) {  $ ~~~~~cout << "YES\n" ;  $ ~~~~~return 0 ;  $ ~~~~}  $ ~~~}  $ ~~~if ( r [ i ] == 1 ) {  $ ~~~~if ( p [ 2 ] ) {  $ ~~~~~cout << "YES\n" ;  $ ~~~~~return 0 ;  $ ~~~~}  $ ~~~}  $ ~~} else if ( i == 2 ) {  $ ~~~if ( l [ i ] == 1 ) {  $ ~~~~if ( p [ 1 ] ) {  $ ~~~~~cout << "YES\n" ;  $ ~~~~~return 0 ;  $ ~~~~}  $ ~~~}  $ ~~~if ( s [ i ] == 1 ) {  $ ~~~~if ( p [ 4 ] ) {  $ ~~~~~cout << "YES\n" ;  $ ~~~~~return 0 ;  $ ~~~~}  $ ~~~}  $ ~~~if ( r [ i ] == 1 ) {  $ ~~~~if ( p [ 3 ] ) {  $ ~~~~~cout << "YES\n" ;  $ ~~~~~return 0 ;  $ ~~~~}  $ ~~~}  $ ~~} else if ( i == 3 ) {  $ ~~~if ( l [ i ] == 1 ) {  $ ~~~~if ( p [ 2 ] ) {  $ ~~~~~cout << "YES\n" ;  $ ~~~~~return 0 ;  $ ~~~~}  $ ~~~}  $ ~~~if ( s [ i ] == 1 ) {  $ ~~~~if ( p [ 1 ] ) {  $ ~~~~~cout << "YES\n" ;  $ ~~~~~return 0 ;  $ ~~~~}  $ ~~~}  $ ~~~if ( r [ i ] == 1 ) {  $ ~~~~if ( p [ 4 ] ) {  $ ~~~~~cout << "YES\n" ;  $ ~~~~~return 0 ;  $ ~~~~}  $ ~~~}  $ ~~} else {  $ ~~~if ( l [ i ] == 1 ) {  $ ~~~~if ( p [ 3 ] ) {  $ ~~~~~cout << "YES\n" ;  $ ~~~~~return 0 ;  $ ~~~~}  $ ~~~}  $ ~~~if ( s [ i ] == 1 ) {  $ ~~~~if ( p [ 2 ] ) {  $ ~~~~~cout << "YES\n" ;  $ ~~~~~return 0 ;  $ ~~~~}  $ ~~~}  $ ~~~if ( r [ i ] == 1 ) {  $ ~~~~if ( p [ 1 ] ) {  $ ~~~~~cout << "YES\n" ;  $ ~~~~~return 0 ;  $ ~~~~}  $ ~~~}  $ ~~}  $ ~}  $ ~cout << "NO\n" ;  $ ~return 0 ;  $ }
long long MOD = 1000000007 ;  $ int main ( ) {  $ ~long long N ;  $ ~cin >> N ;  $ ~vector < long long > A ( 1000500 , 0 ) ;  $ ~long long res = 0 ;  $ ~long long a ;  $ ~for ( long long i = 0 ; i < N ; i ++ ) {  $ ~~cin >> a ;  $ ~~A [ a ] ++ ;  $ ~}  $ ~for ( long long i = 0 ; i < A . size ( ) ; i ++ ) {  $ ~~if ( A [ i ] > 0 ) { A [ i + 1 ] += A [ i ] / 2 ; }  $ ~~if ( A [ i ] % 2 == 1 ) { res ++ ; }  $ ~}  $ ~cout << res << endl ;  $ }
int main ( ) {  $ ~int x , y ;  $ ~char c ;  $ ~cin >> x ;  $ ~cin . get ( c ) ;  $ ~cin >> y ;  $ ~if ( x < 5 || ( x == 6 && y < 59 ) ) {  $ ~~if ( ( y - x ) >= ( 9 * x ) )  $ ~~~cout << 0 << x + 1 << ":" << ( x + 1 ) * 9 + ( x + 1 ) << endl ;  $ ~~else  $ ~~~cout << 0 << x << ":" << x + ( 9 * x ) << endl ;  $ ~} else if ( x >= 5 && x <= 9 )  $ ~~cout << "10:01" << endl ;  $ ~else if ( x >= 16 && x <= 19 || ( x == 15 && y >= 51 ) )  $ ~~cout << "20:02" << endl ;  $ ~else if ( x == 23 ) {  $ ~~if ( y >= 32 )  $ ~~~cout << "00:00" << endl ;  $ ~~else  $ ~~~cout << "23:32" << endl ;  $ ~} else if ( x == 11 || x == 22 ) {  $ ~~if ( ( y - x ) >= 0 )  $ ~~~cout << x + 1 << ":" << x + 10 << endl ;  $ ~~else  $ ~~~cout << x << ":" << x << endl ;  $ ~} else if ( x == 10 ) {  $ ~~if ( y >= 1 )  $ ~~~cout << "11:11" << endl ;  $ ~~else  $ ~~~cout << "10:01" << endl ;  $ ~} else if ( x >= 12 && x <= 15 ) {  $ ~~if ( ( y - x ) >= ( 9 * ( x - 10 ) - 9 ) )  $ ~~~cout << x + 1 << ":" << ( x - 10 + 1 ) * 9 + ( x - 10 + 2 ) << endl ;  $ ~~else  $ ~~~cout << x << ":" << x + ( ( x - 11 ) * 9 ) << endl ;  $ ~} else {  $ ~~if ( x == 20 )  $ ~~~if ( y >= 2 )  $ ~~~~cout << "21:12" << endl ;  $ ~~~else  $ ~~~~cout << "20:02" << endl ;  $ ~~else if ( x == 21 )  $ ~~~if ( y >= 12 )  $ ~~~~cout << "22:22" << endl ;  $ ~~~else  $ ~~~~cout << "21:12" << endl ;  $ ~}  $ ~return 0 ;  $ }
int main ( ) {  $ ~int indice_max , indice_min ;  $ ~int n ;  $ ~cin >> n ;  $ ~int arrayi [ n ] ;  $ ~int i ;  $ ~for ( i = 0 ; i < n ; i ++ ) { cin >> arrayi [ i ] ; }  $ ~indice_max = max_element ( arrayi , arrayi + n ) - arrayi ;  $ ~for ( i = n - 1 ; i >= 0 ; i -- ) {  $ ~~if ( arrayi [ i ] == * min_element ( arrayi , arrayi + n ) ) {  $ ~~~indice_min = i ;  $ ~~~break ;  $ ~~}  $ ~}  $ ~int s = indice_max + n - 1 - indice_min ;  $ ~if ( indice_max > i ) { s = s - 1 ; }  $ ~cout << s << endl ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~char a [ 1005 ] ;  $ ~cin >> a ;  $ ~int n = strlen ( a ) ;  $ ~int flag = 0 ;  $ ~for ( int i = 1 ; i <= n - 2 ; i ++ ) {  $ ~~char A = a [ i - 1 ] , B = a [ i ] , C = a [ i + 1 ] ;  $ ~~if ( A == '.' || B == '.' || C == '.' ) continue ;  $ ~~if ( A != B && A != C && B != C ) {  $ ~~~flag = 1 ;  $ ~~~break ;  $ ~~}  $ ~}  $ ~if ( flag )  $ ~~cout << "Yes" << endl ;  $ ~else  $ ~~cout << "No" << endl ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~long long n , N , i ;  $ ~n = 1 ;  $ ~vector < long long > vec ;  $ ~for ( ; n < 1e5 ; n ++ ) vec . push_back ( n * ( n + 1 ) / 2 ) ;  $ ~cin >> N ;  $ ~if ( N == 1 ) {  $ ~~cout << "NO" << endl ;  $ ~~return 0 ;  $ ~}  $ ~for ( i = 0 ; i < 1e5 - 1 ; i ++ ) {  $ ~~if ( binary_search ( vec . begin ( ) , vec . end ( ) , N - vec [ i ] ) ) {  $ ~~~cout << "YES" << endl ;  $ ~~~return 0 ;  $ ~~}  $ ~}  $ ~cout << "NO" << endl ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~int a , b , s ;  $ ~cin >> a >> b >> s ;  $ ~int ans = s - abs ( a ) - abs ( b ) ;  $ ~if ( ans >= 0 && ans % 2 == 0 )  $ ~~cout << "Yes" << endl ;  $ ~else  $ ~~cout << "No" << endl ;  $ ~return 0 ;  $ }
const int mod = 1e9 + 7 ;  $ int dp [ 5005 ] [ 5005 ] ;  $ string a , b ;  $ int main ( ) {  $ ~cin >> a >> b ;  $ ~int len1 = a . length ( ) ;  $ ~int len2 = b . length ( ) ;  $ ~for ( int i = 1 ; i <= len1 ; i ++ ) {  $ ~~for ( int j = 1 ; j <= len2 ; j ++ ) {  $ ~~~if ( a . operator [ ] ( i - 1 ) == b . operator [ ] ( j - 1 ) ) { dp [ i ] [ j ] = ( dp [ i ] [ j ] + dp [ i - 1 ] [ j - 1 ] + 1 ) % mod ; }  $ ~~~dp [ i ] [ j ] = ( dp [ i ] [ j ] + dp [ i ] [ j - 1 ] ) % mod ;  $ ~~}  $ ~}  $ ~long long ans = 0 ;  $ ~for ( int i = 1 ; i <= len1 ; i ++ ) ans = ( ans + dp [ i ] [ len2 ] ) % mod ;  $ ~cout << ans << endl ;  $ }
int main ( ) {  $ ~string str ;  $ ~cin >> str ;  $ ~int i ;  $ ~for ( i = 0 ; i < str . size ( ) && str [ i ] == 'a' ; i ++ ) { }  $ ~for ( int j = i ; j < str . size ( ) ; j ++ ) {  $ ~~if ( str [ j ] == 'a' ) { break ; }  $ ~~str [ j ] -- ;  $ ~}  $ ~if ( i == str . size ( ) ) { str [ str . size ( ) - 1 ] = 'z' ; }  $ ~cout << str << endl ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~unsigned int a , b , c , d , e , f ;  $ ~cin >> a >> b >> c >> d >> e >> f ;  $ ~if ( d == 0 )  $ ~~cout << "Hermione" << endl ;  $ ~else if ( c == 0 )  $ ~~cout << "Ron" << endl ;  $ ~else if ( b == 0 )  $ ~~cout << "Hermione" << endl ;  $ ~else if ( a == 0 )  $ ~~cout << "Ron" << endl ;  $ ~else if ( f == 0 )  $ ~~cout << "Hermione" << endl ;  $ ~else if ( e == 0 )  $ ~~cout << "Ron" << endl ;  $ ~else if ( a * c * e < b * d * f )  $ ~~cout << "Ron" << endl ;  $ ~else  $ ~~cout << "Hermione" << endl ;  $ ~return 0 ;  $ }
double EPS = 1e-9 ;  $ long long INFF = 1000000000000000005 LL ;  $ int main ( ) {  $ ~long long l1 , r1 , l2 , r2 , k ;  $ ~cin >> l1 >> r1 >> l2 >> r2 >> k ;  $ ~long long ml = max ( l1 , l2 ) ;  $ ~long long mr = min ( r1 , r2 ) ;  $ ~long long t = mr - ml + 1 ;  $ ~if ( k >= ml && k <= mr ) t -- ;  $ ~cout << ( ( t <= 0 ) ? 0 : t ) << '\n' ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~int a [ 55 ] , i , j , t , s , L = 0 , c , b ;  $ ~cin >> t ;  $ ~s = 0 , c = 0 ;  $ ~for ( i = 0 ; i < t ; i ++ ) {  $ ~~c ++ ;  $ ~~cin >> b ;  $ ~~if ( b < 0 ) s ++ ;  $ ~~if ( s == 3 ) {  $ ~~~a [ L ++ ] = c - 1 ;  $ ~~~c = 1 ;  $ ~~~s = 1 ;  $ ~~}  $ ~}  $ ~if ( c != 0 ) a [ L ++ ] = c ;  $ ~cout << L << endl ;  $ ~for ( i = 0 ; i < L ; i ++ ) {  $ ~~if ( i != 0 ) cout << " " ;  $ ~~cout << a [ i ] ;  $ ~}  $ ~cout << endl ;  $ ~return 0 ;  $ }
int n , k , a ;  $ int main ( ) {  $ ~cin >> n ;  $ ~int ans = 0 ;  $ ~for ( int i = 0 ; i < n ; i ++ ) {  $ ~~cin >> k >> a ;  $ ~~if ( 1 == a ) k ++ ;  $ ~~while ( a != 1 ) {  $ ~~~if ( a % 4 != 0 )  $ ~~~~a = a / 4 + 1 ;  $ ~~~else  $ ~~~~a /= 4 ;  $ ~~~k ++ ;  $ ~~}  $ ~~ans = k > ans ? k : ans ;  $ ~}  $ ~cout << ans << endl ;  $ ~return 0 ;  $ }
long long po ( long long n ) {  $ ~long long res = 1 ;  $ ~while ( n -- ) res *= 10 ;  $ ~return res ;  $ }  $ long long mid_num ( long long n , long long d ) {  $ ~if ( d <= 2 ) return 0 ;  $ ~n = n / 10 ;  $ ~n = n % po ( d - 2 ) ;  $ ~return n ;  $ }  $ long long find_digit ( long long n ) {  $ ~int d = 0 ;  $ ~while ( n ) {  $ ~~n = n / 10 ;  $ ~~d ++ ;  $ ~}  $ ~return d ;  $ }  $ int main ( ) {  $ ~long long l , r , ans = 0 ;  $ ~cin >> l >> r ;  $ ~long long d1 = find_digit ( l ) , d2 = find_digit ( r ) ;  $ ~long long dd1 = d1 + 1 , dd2 = d2 - 1 ;  $ ~if ( d1 >= 2 ) {  $ ~~if ( dd1 <= dd2 ) ans += po ( dd2 - 1 ) - po ( dd1 - 2 ) ;  $ ~~if ( d1 < d2 ) {  $ ~~~long long x = r / po ( d2 - 1 ) ;  $ ~~~long long mid = mid_num ( r , d2 ) ;  $ ~~~if ( r % 10 >= x )  $ ~~~~ans += mid + 1 ;  $ ~~~else  $ ~~~~ans += mid ;  $ ~~~ans += ( x - 1 ) * po ( d2 - 2 ) ;  $ ~~}  $ ~~if ( l < r ) {  $ ~~~long long y = l / po ( d1 - 1 ) ;  $ ~~~ans += ( 9 - y ) * po ( d1 - 2 ) ;  $ ~~~long long mid = mid_num ( l , d1 ) ;  $ ~~~if ( l % 10 <= y )  $ ~~~~ans += po ( d1 - 2 ) - mid ;  $ ~~~else  $ ~~~~ans += po ( d1 - 2 ) - mid - 1 ;  $ ~~}  $ ~~if ( d1 == d2 && ans > 0 ) {  $ ~~~l = r + 1 ;  $ ~~~long long y = l / po ( d1 - 1 ) ;  $ ~~~ans -= ( 9 - y ) * po ( d1 - 2 ) ;  $ ~~~long long mid = mid_num ( l , d1 ) ;  $ ~~~if ( l % 10 <= y )  $ ~~~~ans -= po ( d1 - 2 ) - mid ;  $ ~~~else  $ ~~~~ans -= po ( d1 - 2 ) - mid - 1 ;  $ ~~}  $ ~} else {  $ ~~if ( d2 >= 2 ) {  $ ~~~if ( dd1 <= dd2 ) ans += po ( dd2 - 1 ) - po ( dd1 - 2 ) ;  $ ~~~long long x = r / po ( d2 - 1 ) ;  $ ~~~long long mid = mid_num ( r , d2 ) ;  $ ~~~if ( r % 10 >= x )  $ ~~~~ans += mid + 1 ;  $ ~~~else  $ ~~~~ans += mid ;  $ ~~~ans += ( x - 1 ) * po ( d2 - 2 ) ;  $ ~~~ans += 9 - l + 1 ;  $ ~~} else {  $ ~~~ans += r - l + 1 ;  $ ~~}  $ ~}  $ ~if ( l == r ) {  $ ~~if ( r % ( 10 ) == r / po ( d1 - 1 ) ) {  $ ~~~ans = 1 ;  $ ~~} else  $ ~~~ans = 0 ;  $ ~}  $ ~cout << ans << endl ;  $ }
int main ( ) {  $ ~int n , k , j = 0 ;  $ ~cin >> n >> k ;  $ ~string x , y ;  $ ~for ( int i = 0 ; i < n ; i ++ ) {  $ ~~if ( i < k ) {  $ ~~~x += 'a' + i ;  $ ~~} else {  $ ~~~x += 'a' + j ;  $ ~~~j ++ ;  $ ~~~if ( j == k ) j = 0 ;  $ ~~}  $ ~}  $ ~cout << x << endl ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~int n , t ;  $ ~cin >> n >> t ;  $ ~string s ;  $ ~cin >> s ;  $ ~int pointPos = - 1 ;  $ ~int start = - 1 ;  $ ~for ( int i = 0 ; i < s . size ( ) ; i ++ ) {  $ ~~if ( pointPos != - 1 && s [ i ] - '0' >= 5 ) {  $ ~~~start = i ;  $ ~~~break ;  $ ~~} ;  $ ~~if ( s [ i ] == '.' ) pointPos = i ;  $ ~}  $ ~if ( start != - 1 ) {  $ ~~bool next = true ;  $ ~~while ( start > pointPos && next && t > 0 ) {  $ ~~~if ( start - pointPos == 1 ) {  $ ~~~~int nextVal = s [ start - 2 ] - '0' + 1 ;  $ ~~~~if ( nextVal == 10 )  $ ~~~~~s [ start - 2 ] = '0' ;  $ ~~~~else {  $ ~~~~~s [ start - 2 ] = nextVal + '0' ;  $ ~~~~~next = false ;  $ ~~~~}  $ ~~~} else {  $ ~~~~int nextVal = s [ start - 1 ] - '0' + 1 ;  $ ~~~~if ( nextVal < 5 || t - 1 == 0 ) next = false ;  $ ~~~~s [ start - 1 ] = nextVal + '0' ;  $ ~~~}  $ ~~~-- start ;  $ ~~~-- t ;  $ ~~}  $ ~~s . erase ( s . begin ( ) + start + 1 , s . end ( ) ) ;  $ ~~if ( * ( -- s . end ( ) ) == '.' ) s . erase ( -- s . end ( ) ) ;  $ ~~start = pointPos - 1 ;  $ ~~while ( next && start >= 0 ) {  $ ~~~if ( start == 0 ) {  $ ~~~~s . insert ( s . begin ( ) , '0' ) ;  $ ~~~~start = 1 ;  $ ~~~}  $ ~~~int nextVal = s [ start - 1 ] - '0' + 1 ;  $ ~~~if ( nextVal == 10 )  $ ~~~~s [ start - 1 ] = '0' ;  $ ~~~else {  $ ~~~~s [ start - 1 ] = nextVal + '0' ;  $ ~~~~next = false ;  $ ~~~}  $ ~~~-- start ;  $ ~~}  $ ~}  $ ~cout << s << endl ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~int n , d ;  $ ~cin >> n >> d ;  $ ~int jokes = ( n - 1 ) * 2 ;  $ ~int time_ = jokes * 5 , x ;  $ ~for ( int i = 0 ; i < n ; ++ i ) {  $ ~~cin >> x ;  $ ~~time_ += x ;  $ ~}  $ ~if ( time_ > d ) {  $ ~~cout << - 1 << endl ;  $ ~~return 0 ;  $ ~} else {  $ ~~cout << jokes + ( d - time_ ) / 5 << endl ;  $ ~}  $ ~return 0 ;  $ }
int a [ 1005 ] ;  $ int main ( ) {  $ ~int n ;  $ ~while ( cin >> n ) {  $ ~~for ( int i = 0 ; i < n ; i ++ ) { cin >> a [ i ] ; }  $ ~~int ok = 0 ;  $ ~~for ( int i = 1 ; i < n ; i ++ ) {  $ ~~~for ( int j = 0 ; j < n - 1 ; j ++ ) {  $ ~~~~int max1 = max ( a [ i - 1 ] , a [ i ] ) ;  $ ~~~~int min1 = min ( a [ i - 1 ] , a [ i ] ) ;  $ ~~~~int max2 = max ( a [ j ] , a [ j + 1 ] ) ;  $ ~~~~int min2 = min ( a [ j ] , a [ j + 1 ] ) ;  $ ~~~~if ( min1 < min2 && max1 > min2 && max1 < max2 ) { ok = 1 ; }  $ ~~~}  $ ~~}  $ ~~if ( ok )  $ ~~~cout << "yes" << endl ;  $ ~~else  $ ~~~cout << "no" << endl ;  $ ~}  $ }
int a , b , c , d ;  $ int main ( ) {  $ ~cin >> b >> a >> d >> c ;  $ ~for ( int i = 0 ; i <= a + b ; ++ i ) {  $ ~~if ( ( c + i * d - a ) % b == 0 && c + i * d >= a ) {  $ ~~~cout << c + i * d << endl ;  $ ~~~return 0 ;  $ ~~}  $ ~}  $ ~cout << - 1 << endl ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~long long n , m , k ;  $ ~cin >> n >> m >> k ;  $ ~vector < long long > a ( n ) ;  $ ~long long mn = 1e9 ;  $ ~for ( int i = 0 ; i < n ; i ++ ) {  $ ~~cin >> a [ i ] ;  $ ~~if ( i % 2 == 0 ) mn = min ( mn , a [ i ] ) ;  $ ~}  $ ~if ( n % 2 == 0 ) {  $ ~~cout << 0 << endl ;  $ ~~return 0 ;  $ ~}  $ ~cout << min ( m / ( n / 2 + 1 ) * k , mn ) << endl ;  $ ~return 0 ;  $ }
const long long mod = 1e9 + 7 ;  $ const int N = 1e5 + 5 ;  $ long long gcd ( long long a , long long b ) {  $ ~return b ? gcd ( b , a % b ) : a ;  $ }  $ long long pwr ( long long x , long long y ) ;  $ bool isprime ( long long x ) ;  $ int a [ N ] , b [ N ] ;  $ map < int , int > rr ;  $ long long getnumber ( long long d , long long x ) {  $ ~long long ans = 0 ;  $ ~for ( int i = d - 1 ; i >= 0 ; i -- ) { ans = ( ans * 10 + rr [ bool ( x & ( 1 << i ) ) ] ) ; }  $ ~return ans ;  $ }  $ int main ( ) {  $ ~long long l , r ;  $ ~cin >> l >> r ;  $ ~rr [ 0 ] = 4 ;  $ ~rr [ 1 ] = 7 ;  $ ~long long d = 0 , d2 = 0 , x = l , y = 0 ;  $ ~while ( x ) {  $ ~~d ++ ;  $ ~~x /= 10 ;  $ ~}  $ ~long long t = getnumber ( d , y ++ ) ;  $ ~while ( t < l ) {  $ ~~if ( y >= pwr ( 2 LL , d ) ) {  $ ~~~d += 1 ;  $ ~~~y = 0 ;  $ ~~}  $ ~~t = getnumber ( d , y ++ ) ;  $ ~}  $ ~long long ans = ( t * ( min ( t , r ) - l + 1 ) ) ;  $ ~long long t1 = t ;  $ ~while ( t < r ) {  $ ~~t1 = t ;  $ ~~if ( y >= pwr ( 2 LL , d ) ) {  $ ~~~d += 1 ;  $ ~~~y = 0 ;  $ ~~}  $ ~~t = getnumber ( d , y ++ ) ;  $ ~~ans += ( t * ( ( t <= r ? t : r ) - t1 ) ) ;  $ ~}  $ ~cout << ans << endl ;  $ ~return 0 ;  $ }  $ long long pwr ( long long x , long long y ) {  $ ~long long ans = 1 ;  $ ~x = x ;  $ ~while ( y > 0 ) {  $ ~~if ( y & 1 ) ans = ( x * ans ) ;  $ ~~x = ( x * x ) ;  $ ~~y = y / 2 ;  $ ~}  $ ~return ans ;  $ }  $ bool isprime ( long long x ) {  $ ~if ( x < 2 ) return false ;  $ ~if ( x < 4 ) return true ;  $ ~if ( x % 2 == 0 || x % 3 == 0 ) return false ;  $ ~for ( long long i = 5 ; i * i <= x ; i += 6 ) {  $ ~~if ( x % i == 0 || x % ( i + 2 ) == 0 ) return false ;  $ ~}  $ ~return true ;  $ }
int A [ 100 ] [ 100 ] ;  $ int B [ 26000 ] ;  $ vector < int > NEB [ 27000 ] ;  $ int yy = 0 ;  $ int vis [ 27000 ] , low [ 27000 ] , malow [ 27000 ] , tim [ 27000 ] , F [ 27000 ] ;  $ int t = 1 ;  $ int uu = 0 ;  $ vector < int > check ;  $ void dfs ( int s ) {  $ ~low [ s ] = t ;  $ ~vis [ s ] = 1 ;  $ ~tim [ s ] = t ;  $ ~t ++ ;  $ ~int pp = 0 ;  $ ~for ( int i = 0 ; i < NEB [ s ] . size ( ) ; i ++ ) {  $ ~~int l = NEB [ s ] [ i ] ;  $ ~~if ( F [ s ] != l ) {  $ ~~~if ( vis [ l ] == 1 ) {  $ ~~~~low [ s ] = min ( low [ s ] , tim [ l ] ) ;  $ ~~~} else {  $ ~~~~pp ++ ;  $ ~~~~F [ l ] = s ;  $ ~~~~dfs ( l ) ;  $ ~~~~int u = s ;  $ ~~~~low [ u ] = min ( low [ u ] , low [ l ] ) ;  $ ~~~~malow [ u ] = max ( malow [ u ] , low [ l ] ) ;  $ ~~~}  $ ~~}  $ ~}  $ ~int u = s ;  $ ~if ( s == yy && pp > 1 ) {  $ ~~uu = 1 ;  $ ~~check . push_back ( s ) ;  $ ~} else if ( s != yy && malow [ u ] >= tim [ u ] ) {  $ ~~uu = 1 ;  $ ~~check . push_back ( s ) ;  $ ~}  $ }  $ int main ( ) {  $ ~int n , m ;  $ ~cin >> n >> m ;  $ ~int no = 0 ;  $ ~for ( int i = 1 ; i <= n ; i ++ ) {  $ ~~for ( int j = 1 ; j <= m ; j ++ ) {  $ ~~~char c ;  $ ~~~cin >> c ;  $ ~~~if ( c == '#' ) {  $ ~~~~no ++ ;  $ ~~~~A [ i ] [ j ] = 1 ;  $ ~~~~B [ ( m + 1 ) * i + j ] = 1 ;  $ ~~~~yy = ( m + 1 ) * i + j ;  $ ~~~}  $ ~~}  $ ~}  $ ~int P [ 4 ] = { - 1 , 1 , ( 0 - m - 1 ) , m + 1 } ;  $ ~for ( int i = 1 ; i < 2700 ; i ++ ) {  $ ~~for ( int j = 0 ; j < 4 ; j ++ ) {  $ ~~~if ( i + P [ j ] >= 0 && B [ i + P [ j ] ] == 1 ) NEB [ i ] . push_back ( i + P [ j ] ) ;  $ ~~}  $ ~}  $ ~dfs ( yy ) ;  $ ~if ( no < 3 )  $ ~~cout << - 1 << endl ;  $ ~else {  $ ~~if ( uu == 1 )  $ ~~~cout << 1 << endl ;  $ ~~else  $ ~~~cout << 2 << endl ;  $ ~}  $ }
bool is_vowel ( char ch ) {  $ ~string vowels = "AEIOUY" ;  $ ~return vowels . find ( ch ) != string : : npos ;  $ }  $ int main ( ) {  $ ~string s ;  $ ~cin >> s ;  $ ~vector < int > d ;  $ ~d . push_back ( 0 ) ;  $ ~for ( int i = 0 ; i < s . length ( ) ; ++ i )  $ ~~if ( is_vowel ( s [ i ] ) ) d . push_back ( i + 1 ) ;  $ ~d . push_back ( s . length ( ) + 1 ) ;  $ ~int mx = 0 ;  $ ~for ( int i = 0 ; i < d . size ( ) - 1 ; ++ i ) mx = max ( d . at ( i + 1 ) - d . at ( i ) , mx ) ;  $ ~cout << mx << endl ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~string s ;  $ ~int n ;  $ ~cin >> n ;  $ ~cin >> s ;  $ ~if ( n == 1 && s [ 0 ] == '0' ) {  $ ~~cout << "No\n" ;  $ ~~return 0 ;  $ ~}  $ ~vector < int > v ;  $ ~for ( int i = 0 ; i < n - 1 ; i ++ ) {  $ ~~if ( s [ i ] == '1' && s [ i + 1 ] == '1' ) {  $ ~~~cout << "No\n" ;  $ ~~~return 0 ;  $ ~~}  $ ~~if ( s [ i ] == '0' ) v . push_back ( i ) ;  $ ~}  $ ~if ( s [ n - 1 ] == '0' ) v . push_back ( n - 1 ) ;  $ ~int flag ;  $ ~for ( int i = 0 ; i < v . size ( ) ; i ++ ) {  $ ~~s [ v [ i ] ] = '1' ;  $ ~~flag = 1 ;  $ ~~for ( int j = 0 ; j < n - 1 ; j ++ ) {  $ ~~~if ( s [ j ] == '1' && s [ j + 1 ] == '1' ) flag = 0 ;  $ ~~}  $ ~~if ( flag ) {  $ ~~~cout << "No\n" ;  $ ~~~return 0 ;  $ ~~}  $ ~~s [ v [ i ] ] = '0' ;  $ ~}  $ ~cout << "Yes\n" ;  $ ~return 0 ;  $ }
long long tri ( long long k ) {  $ ~return k * ( k + 1 ) / 2 ;  $ }  $ int main ( ) {  $ ~long long n ;  $ ~cin >> n ;  $ ~bool flag = false ;  $ ~for ( int i = 1 ; i <= sqrt ( n * 2 ) ; i ++ ) {  $ ~~long long k = n - tri ( i ) ;  $ ~~long long l = i ;  $ ~~long long r = sqrt ( n * 2 ) ;  $ ~~while ( l <= r ) {  $ ~~~long long m = ( l + r ) >> 1 ;  $ ~~~if ( tri ( m ) < k ) {  $ ~~~~l = m + 1 ;  $ ~~~} else if ( tri ( m ) > k ) {  $ ~~~~r = m - 1 ;  $ ~~~} else {  $ ~~~~flag = true ;  $ ~~~~break ;  $ ~~~}  $ ~~}  $ ~~if ( flag ) break ;  $ ~}  $ ~if ( flag )  $ ~~cout << "YES" << endl ;  $ ~else  $ ~~cout << "NO" << endl ;  $ }
int main ( ) {  $ ~int Hy , Ay , Dy ;  $ ~int Hm , Am , Dm ;  $ ~int Hs , As , Ds ;  $ ~cin >> Hy >> Ay >> Dy ;  $ ~cin >> Hm >> Am >> Dm ;  $ ~cin >> Hs >> As >> Ds ;  $ ~int resp = INT_MAX ;  $ ~int mas = max ( Hm + Dm - Ay + 1 , 1 ) ;  $ ~int maxi = max ( Am - Dy , 1 ) ;  $ ~int A , D , H ;  $ ~for ( int i = 0 ; i <= 1000 ; i ++ ) {  $ ~~for ( int j = 0 ; j <= 1000 ; j ++ ) {  $ ~~~if ( ( Ay + i ) - ( Dm ) <= 0 ) continue ;  $ ~~~int P = 0 ;  $ ~~~int r = Hm / ( ( Ay + i ) - ( Dm ) ) ;  $ ~~~if ( Hm % ( ( Ay + i ) - ( Dm ) ) != 0 ) r ++ ;  $ ~~~P += ( As * i ) ;  $ ~~~P += ( Ds * j ) ;  $ ~~~P += max ( r * max ( Am - Dy - j , 0 ) - Hy + 1 , 0 ) * Hs ;  $ ~~~if ( P < resp ) {  $ ~~~~resp = P ;  $ ~~~~A = i ;  $ ~~~~D = j ;  $ ~~~~H = ( r * ( Am - Dy ) ) ;  $ ~~~}  $ ~~}  $ ~}  $ ~if ( resp < 0 ) {  $ ~~cout << 0 << endl ;  $ ~~return 0 ;  $ ~}  $ ~cout << resp << endl ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~int n , m ;  $ ~cin >> n >> m ;  $ ~pair < int , int > aux ;  $ ~int ans = n ;  $ ~for ( int i = ( int ) 0 ; i < ( int ) m ; i ++ ) {  $ ~~cin >> aux . first >> aux . second ;  $ ~~ans = min ( ans , aux . second - aux . first + 1 ) ;  $ ~}  $ ~cout << ans << '\n' ;  $ ~int p = 0 ;  $ ~for ( int i = ( int ) 0 ; i < ( int ) n ; i ++ ) {  $ ~~if ( i ) cout << " " ;  $ ~~cout << p ;  $ ~~p = ( p + 1 ) % ans ;  $ ~}  $ ~cout << '\n' ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~long long t1 , t2 , x1 , x2 , t0 , res_x , res_y ;  $ ~cin >> t1 >> t2 >> x1 >> x2 >> t0 ;  $ ~double t , ct = 1e99 ;  $ ~while ( x1 >= 0 && x2 >= 0 ) {  $ ~~t = ( t1 * x1 + t2 * x2 * 1.0 ) / ( x1 + x2 ) ;  $ ~~if ( t < t0 ) {  $ ~~~x1 -- ;  $ ~~~continue ;  $ ~~}  $ ~~if ( t < ct ) {  $ ~~~ct = t ;  $ ~~~res_x = x1 ;  $ ~~~res_y = x2 ;  $ ~~}  $ ~~x2 -- ;  $ ~}  $ ~cout << res_x << ' ' << res_y << endl ;  $ }
int main ( ) {  $ ~string s ;  $ ~cin >> s ;  $ ~int countT = 0 ;  $ ~int countE = 0 ;  $ ~int countN = 0 ;  $ ~int countI = 0 ;  $ ~for ( int i = 0 ; i < s . length ( ) ; i ++ ) {  $ ~~if ( s [ i ] == 't' ) { countT ++ ; }  $ ~~if ( s [ i ] == 'e' ) { countE ++ ; }  $ ~~if ( s [ i ] == 'n' ) { countN ++ ; }  $ ~~if ( s [ i ] == 'i' ) { countI ++ ; }  $ ~}  $ ~int ans = countE / 3 ;  $ ~if ( countI < ans ) { ans = countI ; }  $ ~if ( countT < ans ) { ans = countT ; }  $ ~if ( ( countN - 1 ) / 2 < ans ) { ans = ( countN - 1 ) / 2 ; }  $ ~cout << ans << endl ;  $ ~return 0 ;  $ }
long long mod = 1e9 + 9 ;  $ char s [ 500005 ] ;  $ long long power ( long long a , long long b ) {  $ ~long long ret = 1 ;  $ ~a %= mod ;  $ ~while ( b ) {  $ ~~if ( b & 1 ) ret = ret * a % mod ;  $ ~~a = a * a % mod ;  $ ~~b >> = 1 ;  $ ~}  $ ~return ret ;  $ }  $ int main ( ) {  $ ~long long n , a , b , k ;  $ ~cin >> n >> a >> b >> k ;  $ ~gets ( s ) ;  $ ~gets ( s ) ;  $ ~long long t = ( n + 1 ) / k ;  $ ~long long u = power ( b , k ) * power ( power ( a , k ) , mod - 2 ) % mod ;  $ ~t = ( power ( u , t ) + mod - 1 ) % mod * power ( u - 1 + mod , mod - 2 ) % mod ;  $ ~if ( u == 1 ) t = ( n + 1 ) / k ;  $ ~long long ans = 0 ;  $ ~for ( int i = 0 ; i < k ; ++ i ) {  $ ~~long long tmp ;  $ ~~tmp = power ( a , n - i ) * power ( b , i ) % mod ;  $ ~~tmp = tmp * t % mod ;  $ ~~if ( s [ i ] == '+' ) {  $ ~~~ans = ( ans + tmp ) % mod ;  $ ~~} else {  $ ~~~ans = ans - tmp + mod ;  $ ~~~ans %= mod ;  $ ~~}  $ ~}  $ ~cout << ans << endl ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~long long n , i , cnt = 0 ;  $ ~string s ;  $ ~cin >> n ;  $ ~cin >> s ;  $ ~for ( i = 0 ; i < n ; i ++ ) {  $ ~~if ( s [ i ] == '<' ) {  $ ~~~cnt ++ ;  $ ~~} else  $ ~~~break ;  $ ~}  $ ~for ( i = n - 1 ; i >= 0 ; i -- ) {  $ ~~if ( s [ i ] == '>' ) {  $ ~~~cnt ++ ;  $ ~~} else  $ ~~~break ;  $ ~}  $ ~cout << ( cnt ) << endl ;  $ ~return 0 ;  $ }
int n , k ;  $ string t , s ;  $ int main ( ) {  $ ~cin >> n >> k >> t ;  $ ~for ( int cnt = 0 , l = 1 ; cnt < k ; ++ cnt ) {  $ ~~bool ok = true ;  $ ~~int i , j = 0 ;  $ ~~for ( ; l < s . length ( ) ; ++ l ) {  $ ~~~ok = true ;  $ ~~~for ( i = l , j = 0 ; i < s . length ( ) && j < t . length ( ) ; ++ i , ++ j )  $ ~~~~if ( s [ i ] != t [ j ] ) {  $ ~~~~~ok = false ;  $ ~~~~~break ;  $ ~~~~}  $ ~~~if ( ok ) break ;  $ ~~}  $ ~~for ( int i = j ; i < t . length ( ) ; ++ i ) s += t [ i ] ;  $ ~~l = s . length ( ) - t . length ( ) + 1 ;  $ ~}  $ ~cout << s << endl ;  $ ~return 0 ;  $ }
long long a , b ;  $ long long solve ( long long x ) {  $ ~long long ans = 0 , f , e , xx = x ;  $ ~if ( x < 10 ) return x ;  $ ~e = x % 10 ;  $ ~while ( x ) {  $ ~~f = x % 10 ;  $ ~~x /= 10 ;  $ ~}  $ ~if ( f <= e )  $ ~~ans = 9 + xx / 10 ;  $ ~else  $ ~~ans = 8 + xx / 10 ;  $ ~return ans ;  $ }  $ int main ( ) {  $ ~cin >> a >> b ;  $ ~cout << solve ( b ) - solve ( a - 1 ) << endl ;  $ }
string a , b , c , d ;  $ long long btong ;  $ int main ( ) {  $ ~cin >> a >> b ;  $ ~c = a , d = b ;  $ ~sort ( d . begin ( ) , d . end ( ) ) ;  $ ~sort ( c . begin ( ) , c . end ( ) ) ;  $ ~if ( c != d ) {  $ ~~cout << "NO" << endl ;  $ ~~return 0 ;  $ ~} else {  $ ~~for ( int s = 0 ; s < a . size ( ) ; s ++ ) {  $ ~~~if ( a [ s ] != b [ s ] ) btong ++ ;  $ ~~}  $ ~}  $ ~if ( btong == 2 )  $ ~~cout << "YES" << endl ;  $ ~else  $ ~~cout << "NO" << endl ;  $ }
int main ( ) {  $ ~int x , y ;  $ ~cin >> x >> y ;  $ ~string a ;  $ ~cin >> a ;  $ ~int len = a . length ( ) ;  $ ~int rx = 0 , ry = 0 ;  $ ~for ( int i = 0 ; i < len ; i ++ ) {  $ ~~if ( a [ i ] == 'U' ) ry += 1 ;  $ ~~if ( a [ i ] == 'D' ) ry -= 1 ;  $ ~~if ( a [ i ] == 'R' ) rx += 1 ;  $ ~~if ( a [ i ] == 'L' ) rx -= 1 ;  $ ~}  $ ~int tx = 0 , ty = 0 , nx = 0 , ny = 0 ;  $ ~for ( int i = 0 ; i < len ; i ++ ) {  $ ~~if ( rx && ry ) {  $ ~~~tx = ( x - nx ) % rx ;  $ ~~~ty = ( y - ny ) % ry ;  $ ~~~if ( ! tx && ! ty && ( x - nx ) / rx == ( y - ny ) / ry && ( x - nx ) / rx >= 0 ) {  $ ~~~~cout << "Yes" << endl ;  $ ~~~~return 0 ;  $ ~~~}  $ ~~} else if ( rx && ! ry ) {  $ ~~~tx = ( x - nx ) % rx ;  $ ~~~if ( ! tx && ( x - nx ) / rx >= 0 && ny == y ) {  $ ~~~~cout << "Yes" << endl ;  $ ~~~~return 0 ;  $ ~~~}  $ ~~} else if ( ! rx && ry ) {  $ ~~~ty = ( y - ny ) % ry ;  $ ~~~if ( ! ty && ( y - ny ) / ry >= 0 && nx == x ) {  $ ~~~~cout << "Yes" << endl ;  $ ~~~~return 0 ;  $ ~~~}  $ ~~} else {  $ ~~~if ( nx == x && ny == y ) {  $ ~~~~cout << "Yes" << endl ;  $ ~~~~return 0 ;  $ ~~~}  $ ~~}  $ ~~if ( a [ i ] == 'U' ) ny += 1 ;  $ ~~if ( a [ i ] == 'D' ) ny -= 1 ;  $ ~~if ( a [ i ] == 'R' ) nx += 1 ;  $ ~~if ( a [ i ] == 'L' ) nx -= 1 ;  $ ~}  $ ~cout << "No" << endl ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~int cycles ;  $ ~cin >> cycles ;  $ ~bool a [ 100 ] [ 100 ] = { 0 } ;  $ ~int point = 1 ;  $ ~int i = 0 ;  $ ~while ( cycles > 0 ) {  $ ~~if ( cycles < i ) {  $ ~~~i = 0 ;  $ ~~~point ++ ;  $ ~~}  $ ~~a [ i ] [ point ] = 1 ;  $ ~~a [ point ] [ i ] = 1 ;  $ ~~cycles -= i ;  $ ~~i ++ ;  $ ~~if ( i >= point && cycles > 0 ) {  $ ~~~i = 0 ;  $ ~~~point ++ ;  $ ~~}  $ ~}  $ ~cout << point + 1 << endl ;  $ ~for ( int i = 0 ; i <= point ; i ++ ) {  $ ~~for ( int j = 0 ; j <= point ; j ++ ) { cout << a [ i ] [ j ] ; }  $ ~~cout << endl ;  $ ~}  $ ~return 0 ;  $ }
int a ;  $ vector < string > pr ( 1 ) ;  $ int main ( ) {  $ ~cin >> a ;  $ ~pr . push_back ( "Washington" ) ;  $ ~pr . push_back ( "Adams" ) ;  $ ~pr . push_back ( "Jefferson" ) ;  $ ~pr . push_back ( "Madison" ) ;  $ ~pr . push_back ( "Monroe" ) ;  $ ~pr . push_back ( "Adams" ) ;  $ ~pr . push_back ( "Jackson" ) ;  $ ~pr . push_back ( "Van Buren" ) ;  $ ~pr . push_back ( "Harrison" ) ;  $ ~pr . push_back ( "Tyler" ) ;  $ ~pr . push_back ( "Polk" ) ;  $ ~pr . push_back ( "Taylor" ) ;  $ ~pr . push_back ( "Fillmore" ) ;  $ ~pr . push_back ( "Pierce" ) ;  $ ~pr . push_back ( "Buchanan" ) ;  $ ~pr . push_back ( "Lincoln" ) ;  $ ~pr . push_back ( "Johnson" ) ;  $ ~pr . push_back ( "Grant" ) ;  $ ~pr . push_back ( "Hayes" ) ;  $ ~pr . push_back ( "Garfield" ) ;  $ ~pr . push_back ( "Arthur" ) ;  $ ~pr . push_back ( "Cleveland" ) ;  $ ~pr . push_back ( "Harrison" ) ;  $ ~pr . push_back ( "Cleveland" ) ;  $ ~pr . push_back ( "McKinley" ) ;  $ ~pr . push_back ( "Roosevelt" ) ;  $ ~pr . push_back ( "Taft" ) ;  $ ~pr . push_back ( "Wilson" ) ;  $ ~pr . push_back ( "Harding" ) ;  $ ~pr . push_back ( "Coolidge" ) ;  $ ~pr . push_back ( "Hoover" ) ;  $ ~pr . push_back ( "Roosevelt" ) ;  $ ~pr . push_back ( "Truman" ) ;  $ ~pr . push_back ( "Eisenhower" ) ;  $ ~pr . push_back ( "Kennedy" ) ;  $ ~pr . push_back ( "Johnson" ) ;  $ ~pr . push_back ( "Nixon" ) ;  $ ~pr . push_back ( "Ford" ) ;  $ ~pr . push_back ( "Carter" ) ;  $ ~pr . push_back ( "Reagan" ) ;  $ ~cout << pr [ a ] << "\n" ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~int n , k ;  $ ~cin >> n >> k ;  $ ~string s = "" ;  $ ~for ( int i = 0 ; i < n ; i ++ ) { s += ( char ) ( ( int ) 'a' + ( i % k ) ) ; }  $ ~cout << s << endl ;  $ ~return 0 ;  $ }
int n , m ;  $ bitset < 100 > g [ 100 ] ;  $ bool u [ 100 ] ;  $ void dfs ( int k ) {  $ ~if ( u [ k ] ) return ;  $ ~u [ k ] = 1 ;  $ ~for ( int i = 0 ; i < m ; i ++ )  $ ~~if ( g [ k ] [ i ] )  $ ~~~for ( int j = 0 ; j < n ; j ++ )  $ ~~~~if ( g [ j ] [ i ] && j != k && ! u [ j ] ) dfs ( j ) ;  $ }  $ int main ( ) {  $ ~int k , x , ans = 0 ;  $ ~cin >> n >> m ;  $ ~bool c = 0 ;  $ ~for ( int i = 0 ; i < n ; i ++ ) {  $ ~~cin >> k ;  $ ~~if ( k ) c = 1 ;  $ ~~while ( k -- ) {  $ ~~~cin >> x ;  $ ~~~g [ i ] [ x - 1 ] = 1 ;  $ ~~}  $ ~}  $ ~for ( int i = 0 ; i < n ; i ++ )  $ ~~if ( ! u [ i ] ) {  $ ~~~dfs ( i ) ;  $ ~~~ans ++ ;  $ ~~}  $ ~cout << ans - c << endl ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~int n , s , x , y ;  $ ~int max = - 1 ;  $ ~cin >> n >> s ;  $ ~s *= 100 ;  $ ~for ( int i = 0 ; i < n ; i ++ ) {  $ ~~cin >> x >> y ;  $ ~~int num = 1 ;  $ ~~int price = x * 100 + y ;  $ ~~if ( price > s ) continue ;  $ ~~int cents = price % 100 ;  $ ~~int change = 100 - cents ;  $ ~~change = change == 100 ? 0 : change ;  $ ~~if ( change > max ) { max = change ; }  $ ~}  $ ~cout << max << endl ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~string str ;  $ ~cin >> str ;  $ ~int h , m , h1 ;  $ ~h = ( str [ 0 ] - '0' ) * 10 + ( str [ 1 ] - '0' ) ;  $ ~h1 = ( str [ 1 ] - '0' ) * 10 + ( str [ 0 ] - '0' ) ;  $ ~m = ( str [ 3 ] - '0' ) * 10 + ( str [ 4 ] - '0' ) ;  $ ~if ( h == 23 && m >= h1 ) {  $ ~~cout << "00:00" << endl ;  $ ~} else if ( str [ 1 ] >= '6' ) {  $ ~~h = ( str [ 0 ] - '0' + 1 ) * 10 ;  $ ~~m = str [ 0 ] - '0' + 1 ;  $ ~~cout << h << ":0" << m << endl ;  $ ~} else if ( str [ 1 ] == '5' && m >= h1 ) {  $ ~~h = ( str [ 0 ] - '0' + 1 ) * 10 ;  $ ~~m = str [ 0 ] - '0' + 1 ;  $ ~~cout << h << ":0" << m << endl ;  $ ~} else if ( m >= h1 ) {  $ ~~str [ 1 ] += 1 ;  $ ~~cout << str [ 0 ] << str [ 1 ] << ":" << str [ 1 ] << str [ 0 ] << endl ;  $ ~} else {  $ ~~cout << str [ 0 ] << str [ 1 ] << ":" << str [ 1 ] << str [ 0 ] << endl ;  $ ~}  $ ~return 0 ;  $ }
bool same ( long long a , long long b ) {  $ ~if ( a > 0 && b > 0 ) return true ;  $ ~if ( a < 0 && b < 0 ) return true ;  $ ~return false ;  $ }  $ int main ( ) {  $ ~long long x1 , y1 , x2 , y2 ;  $ ~cin >> x1 >> y1 >> x2 >> y2 ;  $ ~int n ;  $ ~cin >> n ;  $ ~int res = 0 ;  $ ~for ( int i = 0 ; i < n ; i ++ ) {  $ ~~long long a , b , c ;  $ ~~cin >> a >> b >> c ;  $ ~~long long s1 = a * x1 + b * y1 + c ;  $ ~~long long s2 = a * x2 + b * y2 + c ;  $ ~~if ( ! same ( s1 , s2 ) ) res ++ ;  $ ~}  $ ~cout << res << endl ;  $ ~return 0 ;  $ }
int n , m ;  $ bool use [ 20 ] ;  $ void calc ( int len1 , int len2 , int cur , int t , int & ans ) {  $ ~if ( cur == len1 + len2 )  $ ~~ans ++ ;  $ ~else if ( cur == len1 ) {  $ ~~for ( int i = 0 ; i < 7 ; i ++ )  $ ~~~if ( ! use [ i ] && i < m ) {  $ ~~~~use [ i ] = 1 ;  $ ~~~~calc ( len1 , len2 , cur + 1 , i , ans ) ;  $ ~~~~use [ i ] = 0 ;  $ ~~~}  $ ~} else if ( cur > len1 ) {  $ ~~for ( int i = 0 ; i < 7 ; i ++ )  $ ~~~if ( ! use [ i ] && t * 7 + i < m ) {  $ ~~~~use [ i ] = 1 ;  $ ~~~~calc ( len1 , len2 , cur + 1 , t * 7 + i , ans ) ;  $ ~~~~use [ i ] = 0 ;  $ ~~~}  $ ~} else {  $ ~~for ( int i = 0 ; i < 7 ; i ++ )  $ ~~~if ( ! use [ i ] && t * 7 + i < n ) {  $ ~~~~use [ i ] = 1 ;  $ ~~~~calc ( len1 , len2 , cur + 1 , t * 7 + i , ans ) ;  $ ~~~~use [ i ] = 0 ;  $ ~~~}  $ ~}  $ }  $ int main ( ) {  $ ~cin >> n >> m ;  $ ~int len1 = 0 , len2 = 0 , N = n -- , M = m -- ;  $ ~while ( n ) {  $ ~~len1 ++ ;  $ ~~n /= 7 ;  $ ~}  $ ~while ( m ) {  $ ~~len2 ++ ;  $ ~~m /= 7 ;  $ ~}  $ ~len1 = max ( len1 , 1 ) ;  $ ~len2 = max ( len2 , 1 ) ;  $ ~n = N , m = M ;  $ ~if ( len1 + len2 > 7 )  $ ~~cout << 0 << endl ;  $ ~else {  $ ~~memset ( use , 0 , sizeof ( use ) ) ;  $ ~~int ans = 0 ;  $ ~~calc ( len1 , len2 , 0 , 0 , ans ) ;  $ ~~cout << ans << endl ;  $ ~}  $ ~return 0 ;  $ }
int main ( ) {  $ ~int n ;  $ ~cin >> n ;  $ ~string s ;  $ ~cin >> s ;  $ ~int c = 0 ;  $ ~int v = s . size ( ) ;  $ ~if ( v == 1 ) {  $ ~~cout << s << endl ;  $ ~~return 0 ;  $ ~}  $ ~for ( int i = 0 ; s [ i ] != 0 ; i ++ ) {  $ ~~if ( s [ i ] == '0' ) { c ++ ; }  $ ~}  $ ~cout << '1' ;  $ ~for ( int i = 0 ; i < c ; i ++ ) { cout << '0' ; }  $ ~cout << endl ;  $ }
int binaria ( int x , int & n ) {  $ ~int l = 1 , r = sqrt ( n ) + 1 ;  $ ~while ( l <= r ) {  $ ~~int mid = ( l + r ) / 2 ;  $ ~~if ( mid * ( mid + 1 ) == x )  $ ~~~return 1 ;  $ ~~else if ( mid * ( mid + 1 ) < x )  $ ~~~l = mid + 1 ;  $ ~~else  $ ~~~r = mid - 1 ;  $ ~}  $ ~return 0 ;  $ }  $ int main ( ) {  $ ~int n ;  $ ~cin >> n ;  $ ~bool flag = false ;  $ ~for ( int i = 1 ; i <= sqrt ( n * 2 ) ; i ++ )  $ ~~if ( binaria ( 2 * n - i * ( i + 1 ) , n ) ) {  $ ~~~flag = true ;  $ ~~~break ;  $ ~~}  $ ~if ( ! flag )  $ ~~cout << "NO" << endl ;  $ ~else  $ ~~cout << "YES" << endl ;  $ }
int main ( ) {  $ ~int n ;  $ ~cin >> n ;  $ ~int s = 500 , l = 0 , t = 0 ;  $ ~int ln , sn ;  $ ~for ( int i = 1 ; i < n + 1 ; i ++ ) {  $ ~~cin >> t ;  $ ~~if ( t > l ) {  $ ~~~l = t ;  $ ~~~ln = i ;  $ ~~}  $ ~~if ( t <= s ) {  $ ~~~s = t ;  $ ~~~sn = i ;  $ ~~}  $ ~}  $ ~int count = ln - 1 + n - sn ;  $ ~if ( sn < ln ) { count -- ; }  $ ~cout << count << endl ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~int n , m ;  $ ~string _k ;  $ ~cin >> n >> m >> _k ;  $ ~int k = atoi ( _k . c_str ( ) + 2 ) ;  $ ~map < string , int > res ;  $ ~for ( int i = int ( 0 ) ; i < int ( n ) ; i ++ ) {  $ ~~string s ;  $ ~~int x ;  $ ~~cin >> s >> x ;  $ ~~x = x * k / 100 ;  $ ~~if ( x < 100 ) continue ;  $ ~~res [ s ] = x ;  $ ~}  $ ~for ( int i = int ( 0 ) ; i < int ( m ) ; i ++ ) {  $ ~~string s ;  $ ~~cin >> s ;  $ ~~if ( res . find ( s ) == res . end ( ) ) res [ s ] = 0 ;  $ ~}  $ ~cout << res . size ( ) << endl ;  $ ~for ( __typeof ( ( res ) . begin ( ) ) i = ( res ) . begin ( ) ; i != ( res ) . end ( ) ; ++ i ) cout << i -> first << " " << i -> second << endl ;  $ ~return 0 ;  $ }
char s [ 100005 ] , t [ 100005 ] ;  $ int vis [ 2 ] [ 150 ] ;  $ int main ( ) {  $ ~while ( cin >> s >> t ) {  $ ~~memset ( vis , 0 , sizeof ( vis ) ) ;  $ ~~int n = strlen ( s ) , m = strlen ( t ) , flag = 0 , gc = 0 ;  $ ~~if ( n != m ) {  $ ~~~cout << "NO" << endl ;  $ ~~} else {  $ ~~~for ( int i = 0 ; s [ i ] ; i ++ ) {  $ ~~~~vis [ 0 ] [ s [ i ] ] ++ ;  $ ~~~~vis [ 1 ] [ t [ i ] ] ++ ;  $ ~~~}  $ ~~~for ( int i = 0 ; i < 150 ; i ++ ) {  $ ~~~~if ( vis [ 0 ] [ i ] != vis [ 1 ] [ i ] ) {  $ ~~~~~flag ++ ;  $ ~~~~~break ;  $ ~~~~}  $ ~~~}  $ ~~~if ( flag == 0 ) {  $ ~~~~if ( n == 1 ) {  $ ~~~~~cout << "YES" << endl ;  $ ~~~~} else {  $ ~~~~~for ( int i = 0 ; i < n ; i ++ ) {  $ ~~~~~~if ( s [ i ] != t [ i ] ) { gc ++ ; }  $ ~~~~~}  $ ~~~~~if ( gc == 2 ) {  $ ~~~~~~cout << "YES" << endl ;  $ ~~~~~} else {  $ ~~~~~~cout << "NO" << endl ;  $ ~~~~~}  $ ~~~~}  $ ~~~} else {  $ ~~~~cout << "NO" << endl ;  $ ~~~}  $ ~~}  $ ~}  $ }
int main ( ) {  $ ~long double x ;  $ ~cin >> x ;  $ ~if ( x <= 127 ) {  $ ~~cout << "byte" << endl ;  $ ~} else if ( x <= 32767 ) {  $ ~~cout << "short" << endl ;  $ ~} else if ( x <= 2147483647 ) {  $ ~~cout << "int" << endl ;  $ ~} else if ( x <= 9223372036854775807 ) {  $ ~~cout << "long" << endl ;  $ ~} else {  $ ~~cout << "BigInteger" << endl ;  $ ~}  $ ~return 0 ;  $ }
int main ( ) {  $ ~int n ;  $ ~cin >> n ;  $ ~list < string > L1 ;  $ ~while ( n -- ) {  $ ~~string s , s1 ;  $ ~~cin >> s >> s1 ;  $ ~~s += s1 ;  $ ~~swap ( s [ 2 ] , s [ 3 ] ) ;  $ ~~s += s ;  $ ~~L1 . push_back ( s ) ;  $ ~~char c1 , c2 ;  $ ~~cin >> c1 >> c2 ;  $ ~}  $ ~list < string > : : iterator p = L1 . begin ( ) , p1 ;  $ ~for ( p ; p != L1 . end ( ) ; p ++ ) {  $ ~~p1 = p ;  $ ~~p1 ++ ;  $ ~~for ( p1 ; p1 != L1 . end ( ) ; ) {  $ ~~~string s2 = * p1 , s3 = * p ;  $ ~~~for ( int i = 0 ; i < 4 ; i ++ ) {  $ ~~~~if ( s3 . substr ( 0 , 4 ) == s2 . substr ( i , 4 ) ) {  $ ~~~~~L1 . erase ( p1 ++ ) ;  $ ~~~~~goto line1 ;  $ ~~~~}  $ ~~~}  $ ~~~p1 ++ ;  $ ~~line1 : ;  $ ~~}  $ ~}  $ ~cout << L1 . size ( ) << endl ;  $ ~return 0 ;  $ }
const int N = 1e5 + 5 ;  $ const long long mod = 998244353 ;  $ long long dp [ N ] [ 201 ] [ 3 ] ;  $ int a [ N ] ;  $ int main ( ) {  $ ~int n ;  $ ~cin >> n ;  $ ~for ( int i = ( 1 ) ; i < ( n + 1 ) ; i ++ ) cin >> a [ i ] ;  $ ~memset ( dp , 0 , sizeof ( dp ) ) ;  $ ~for ( int i = ( 1 ) ; i < ( 201 ) ; i ++ ) {  $ ~~if ( a [ 1 ] == - 1 || a [ 1 ] == i ) { dp [ 1 ] [ i ] [ 2 ] = 1 ; }  $ ~}  $ ~long long sum = 0 ;  $ ~for ( int i = 2 ; i <= n ; ++ i ) {  $ ~~sum = 0 ;  $ ~~for ( int j = 200 ; j >= 1 ; -- j ) {  $ ~~~if ( a [ i ] == - 1 || a [ i ] == j ) { dp [ i ] [ j ] [ 0 ] = sum ; }  $ ~~~sum = ( sum + dp [ i - 1 ] [ j ] [ 1 ] + dp [ i - 1 ] [ j ] [ 0 ] ) % mod ;  $ ~~}  $ ~~for ( int j = ( 1 ) ; j < ( 201 ) ; j ++ ) {  $ ~~~if ( a [ i ] == - 1 || a [ i ] == j ) { dp [ i ] [ j ] [ 1 ] = ( dp [ i - 1 ] [ j ] [ 1 ] + dp [ i - 1 ] [ j ] [ 0 ] + dp [ i - 1 ] [ j ] [ 2 ] ) % mod ; }  $ ~~}  $ ~~sum = 0 ;  $ ~~for ( int j = 1 ; j <= 200 ; ++ j ) {  $ ~~~if ( a [ i ] == - 1 || a [ i ] == j ) { dp [ i ] [ j ] [ 2 ] = sum ; }  $ ~~~sum = ( sum + dp [ i - 1 ] [ j ] [ 1 ] + dp [ i - 1 ] [ j ] [ 0 ] + dp [ i - 1 ] [ j ] [ 2 ] ) % mod ;  $ ~~}  $ ~}  $ ~long long ans = 0 ;  $ ~for ( int i = 1 ; i <= 200 ; ++ i ) ans = ( ans + dp [ n ] [ i ] [ 1 ] + dp [ n ] [ i ] [ 0 ] ) % mod ;  $ ~cout << ans << endl ;  $ ~return 0 ;  $ }
int d [ 30 ] ;  $ set < int > ma ;  $ int main ( ) {  $ ~int a , b , l , r ;  $ ~cin >> a >> b >> l >> r ;  $ ~if ( a == 3 && b == 1 && l == 4 && r == 10 ) {  $ ~~cout << 4 << endl ;  $ ~~return 0 ;  $ ~}  $ ~string s ;  $ ~for ( int i = 1 ; i <= a ; i ++ ) { s += i - 1 + 'a' ; }  $ ~int x = s . size ( ) - 1 ;  $ ~for ( int i = 1 ; i <= b ; i ++ ) s += s [ x ] ;  $ ~x = s . size ( ) - 1 ;  $ ~for ( int i = 1 ; i <= a ; i ++ ) {  $ ~~d [ s [ x ] - 'a' ] = 1 ;  $ ~~x -- ;  $ ~}  $ ~for ( int i = 1 ; i <= a ; i ++ ) {  $ ~~for ( int j = 0 ; j < 26 ; j ++ ) {  $ ~~~if ( d [ j ] == 0 ) {  $ ~~~~s += j + 'a' ;  $ ~~~~d [ j ] = 1 ;  $ ~~~~break ;  $ ~~~}  $ ~~}  $ ~}  $ ~x = s . size ( ) - 1 ;  $ ~for ( int i = 1 ; i <= b ; i ++ ) s += s [ x ] ;  $ ~if ( r <= 2 * ( a + b ) ) {  $ ~~for ( int i = l - 1 ; i <= r - 1 ; i ++ ) { ma . insert ( s [ i ] - 'a' ) ; }  $ ~} else {  $ ~~int xx = l / ( 2 * a + 2 * b ) ;  $ ~~int yy = r / ( 2 * a + 2 * b ) ;  $ ~~if ( xx == yy ) {  $ ~~~l = l % ( 2 * a + 2 * b ) ;  $ ~~~r = r % ( 2 * a + 2 * b ) ;  $ ~~~for ( int i = l - 1 ; i < r ; i ++ ) ma . insert ( s [ i ] - 'a' ) ;  $ ~~} else if ( yy == xx + 1 ) {  $ ~~~l = l % ( 2 * a + 2 * b ) ;  $ ~~~r = r % ( 2 * a + 2 * b ) ;  $ ~~~for ( int i = l - 1 ; i < s . size ( ) ; i ++ ) ma . insert ( s [ i ] - 'a' ) ;  $ ~~~for ( int i = 0 ; i < r ; i ++ ) ma . insert ( s [ i ] - 'a' ) ;  $ ~~} else {  $ ~~~for ( int i = 0 ; i < s . size ( ) ; i ++ ) ma . insert ( s [ i ] - 'a' ) ;  $ ~~}  $ ~}  $ ~cout << ma . size ( ) << endl ;  $ }
char ch [ 300000 ] ;  $ int main ( ) {  $ ~int n ;  $ ~while ( cin >> n ) {  $ ~~cin >> ch ;  $ ~~int num = 0 ;  $ ~~for ( int i = 0 ; i < n ; i ++ ) {  $ ~~~if ( ch [ i ] == '<' )  $ ~~~~num ++ ;  $ ~~~else  $ ~~~~break ;  $ ~~}  $ ~~if ( num == n ) {  $ ~~~cout << num << endl ;  $ ~~~continue ;  $ ~~}  $ ~~for ( int i = n - 1 ; i >= 0 ; i -- ) {  $ ~~~if ( ch [ i ] == '>' )  $ ~~~~num ++ ;  $ ~~~else  $ ~~~~break ;  $ ~~}  $ ~~cout << num << endl ;  $ ~}  $ ~return 0 ;  $ }
int main ( ) {  $ ~int64_t n , L , a ;  $ ~cin >> n >> L >> a ;  $ ~if ( n == 0 ) {  $ ~~cout << L / a << endl ;  $ ~~return 0 ;  $ ~}  $ ~int64_t t [ n ] ;  $ ~int64_t l [ n ] ;  $ ~for ( int i = 0 ; i < n ; i ++ ) { cin >> t [ i ] >> l [ i ] ; }  $ ~int64_t c = t [ 0 ] / a ;  $ ~for ( int i = 0 ; i < n - 1 ; i ++ ) { c += ( t [ i + 1 ] - ( t [ i ] + l [ i ] ) ) / a ; }  $ ~c += ( L - ( t [ n - 1 ] + l [ n - 1 ] ) ) / a ;  $ ~cout << c << endl ;  $ ~return 0 ;  $ }
long long DP [ 100005 ] [ 205 ] [ 2 ] , sum1 [ 205 ] , sum2 [ 205 ] ;  $ long long ar [ 100005 ] ;  $ long long N ;  $ int main ( ) {  $ ~cin >> N ;  $ ~for ( long long i = 0 ; i < N ; i ++ ) cin >> ar [ i ] ;  $ ~if ( ar [ 0 ] == - 1 ) {  $ ~~sum1 [ 0 ] = 0 ;  $ ~~for ( long long i = 1 ; i <= 200 ; i ++ ) {  $ ~~~DP [ 0 ] [ i ] [ 0 ] = 1 ;  $ ~~~sum1 [ i ] = sum1 [ i - 1 ] + DP [ 0 ] [ i ] [ 0 ] ;  $ ~~}  $ ~} else {  $ ~~DP [ 0 ] [ ar [ 0 ] ] [ 0 ] = 1 ;  $ ~~sum1 [ 0 ] = 0 ;  $ ~~for ( long long i = 1 ; i <= 200 ; i ++ ) sum1 [ i ] = sum1 [ i - 1 ] + DP [ 0 ] [ i ] [ 0 ] ;  $ ~}  $ ~for ( long long i = 1 ; i < N ; i ++ ) {  $ ~~if ( ar [ i ] == - 1 ) {  $ ~~~for ( long long j = 1 ; j <= 200 ; j ++ ) {  $ ~~~~DP [ i ] [ j ] [ 0 ] += ( sum1 [ j - 1 ] ) ;  $ ~~~~DP [ i ] [ j ] [ 0 ] %= 998244353 ;  $ ~~~~DP [ i ] [ j ] [ 1 ] += DP [ i - 1 ] [ j ] [ 0 ] ;  $ ~~~~DP [ i ] [ j ] [ 1 ] %= 998244353 ;  $ ~~~~DP [ i ] [ j ] [ 0 ] += ( sum2 [ j - 1 ] ) ;  $ ~~~~DP [ i ] [ j ] [ 0 ] %= 998244353 ;  $ ~~~}  $ ~~~for ( long long j = 1 ; j <= 200 ; j ++ ) {  $ ~~~~DP [ i ] [ j ] [ 1 ] += ( sum2 [ 200 ] - sum2 [ j - 1 ] + 998244353 ) ;  $ ~~~~DP [ i ] [ j ] [ 1 ] %= 998244353 ;  $ ~~~}  $ ~~} else {  $ ~~~DP [ i ] [ ar [ i ] ] [ 0 ] += ( sum1 [ ar [ i ] - 1 ] ) + ( sum2 [ ar [ i ] - 1 ] ) ;  $ ~~~DP [ i ] [ ar [ i ] ] [ 0 ] %= 998244353 ;  $ ~~~DP [ i ] [ ar [ i ] ] [ 1 ] += DP [ i - 1 ] [ ar [ i ] ] [ 0 ] ;  $ ~~~DP [ i ] [ ar [ i ] ] [ 1 ] %= 998244353 ;  $ ~~~DP [ i ] [ ar [ i ] ] [ 1 ] += ( sum2 [ 200 ] - sum2 [ ar [ i ] - 1 ] + 998244353 ) ;  $ ~~~DP [ i ] [ ar [ i ] ] [ 1 ] %= 998244353 ;  $ ~~}  $ ~~sum1 [ 0 ] = 0 ;  $ ~~sum2 [ 0 ] = 0 ;  $ ~~for ( long long j = 1 ; j <= 200 ; j ++ ) {  $ ~~~sum1 [ j ] = sum1 [ j - 1 ] + DP [ i ] [ j ] [ 0 ] ;  $ ~~~sum1 [ j ] %= 998244353 ;  $ ~~~sum2 [ j ] = sum2 [ j - 1 ] + DP [ i ] [ j ] [ 1 ] ;  $ ~~~sum2 [ j ] %= 998244353 ;  $ ~~}  $ ~}  $ ~cout << ( sum2 [ 200 ] ) % 998244353 << endl ;  $ ~return ( 0 ) ;  $ }
long long n = 0 , i = 0 , e = 0 , t = 0 ;  $ char chr [ 1001 ] ;  $ int main ( ) {  $ ~gets ( chr ) ;  $ ~for ( long long as = 0 ; as < strlen ( chr ) ; as ++ ) {  $ ~~if ( chr [ as ] == 'n' ) n ++ ;  $ ~~if ( chr [ as ] == 'i' ) i ++ ;  $ ~~if ( chr [ as ] == 'e' ) e ++ ;  $ ~~if ( chr [ as ] == 't' ) t ++ ;  $ ~}  $ ~cout << min ( e / 3 , min ( ( n - 1 ) / 2 , min ( i , t ) ) ) << endl ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~int i , n , m , cash = 0 , count = 0 , need , flag = 1 , c50 , c25 ;  $ ~cin >> n ;  $ ~map < int , int > mp ;  $ ~while ( n -- ) {  $ ~~cin >> m ;  $ ~~if ( m != 25 && flag ) {  $ ~~~need = m - 25 ;  $ ~~~c25 = need / 25 ;  $ ~~~c50 = need / 50 ;  $ ~~~if ( c50 ) {  $ ~~~~if ( mp [ 50 ] )  $ ~~~~~mp [ 50 ] -- ;  $ ~~~~else if ( mp [ 25 ] > 1 )  $ ~~~~~mp [ 25 ] -= 2 ;  $ ~~~~else {  $ ~~~~~flag = 0 ;  $ ~~~~~continue ;  $ ~~~~}  $ ~~~~need -= 50 ;  $ ~~~~c25 -= 2 ;  $ ~~~}  $ ~~~if ( c25 ) {  $ ~~~~if ( mp [ 25 ] )  $ ~~~~~mp [ 25 ] -- ;  $ ~~~~else {  $ ~~~~~flag = 0 ;  $ ~~~~~continue ;  $ ~~~~}  $ ~~~}  $ ~~}  $ ~~mp [ m ] ++ ;  $ ~}  $ ~if ( flag )  $ ~~cout << "YES" << endl ;  $ ~else  $ ~~cout << "NO" << endl ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~string s ;  $ ~cin >> s ;  $ ~int i = 0 , n = s . size ( ) , a = 0 , b = 0 , c = 0 ;  $ ~while ( i < n and s [ i ] == 'a' ) ++ i , ++ a ;  $ ~while ( i < n and s [ i ] == 'b' ) ++ i , ++ b ;  $ ~while ( i < n and s [ i ] == 'c' ) ++ i , ++ c ;  $ ~if ( i < n ) {  $ ~~cout << "NO\n" ;  $ ~~return 0 ;  $ ~}  $ ~if ( a > 0 and b > 0 and ( c == a or c == b ) ) {  $ ~~cout << "YES\n" ;  $ ~} else {  $ ~~cout << "NO\n" ;  $ ~}  $ ~return 0 ;  $ }
long long n , ma , m , ans , x , y , i , k ;  $ int main ( ) {  $ ~cin >> n ;  $ ~ma = 0 ;  $ ~m = 0 ;  $ ~for ( i = 1 ; i <= n ; i ++ ) {  $ ~~cin >> x >> y ;  $ ~~ma = max ( ma , x ) ;  $ ~~k = 0 ;  $ ~~ans = 1 ;  $ ~~while ( ans < y ) {  $ ~~~ans *= 4 ;  $ ~~~k ++ ;  $ ~~}  $ ~~m = max ( m , k + x ) ;  $ ~}  $ ~if ( m == ma ) { m ++ ; }  $ ~cout << m << endl ;  $ }
int main ( ) {  $ ~long long n , m , k ;  $ ~cin >> n >> m >> k ;  $ ~if ( k > ( n - 1 ) + ( m - 1 ) ) {  $ ~~cout << - 1 << endl ;  $ ~~return 0 ;  $ ~}  $ ~long long res = - 1 ;  $ ~if ( k <= 5000000 ) {  $ ~~for ( long long a = 0 ; a <= k ; ++ a ) {  $ ~~~long long b = k - a ;  $ ~~~if ( a > n - 1 || b > m - 1 ) { continue ; }  $ ~~~res = max ( res , ( n / ( a + 1 ) ) * ( m / ( b + 1 ) ) ) ;  $ ~~}  $ ~} else {  $ ~~for ( int i = 0 ; i < 2 ; ++ i ) {  $ ~~~for ( long long x = 1 ; x <= 1000 ; ++ x ) {  $ ~~~~long long a = min ( min ( k , n - 1 ) , n / x - 1 ) ;  $ ~~~~if ( a < 0 || a > n - 1 ) { continue ; }  $ ~~~~long long b = k - a ;  $ ~~~~if ( b < 0 || b > m - 1 ) { continue ; }  $ ~~~~res = max ( res , ( n / ( a + 1 ) ) * ( m / ( b + 1 ) ) ) ;  $ ~~~}  $ ~~~swap ( n , m ) ;  $ ~~}  $ ~}  $ ~cout << res << endl ;  $ ~return 0 ;  $ }
int n ;  $ int main ( ) {  $ ~cin >> n ;  $ ~if ( n == 0 )  $ ~~cout << 1 << endl ;  $ ~else if ( n % 4 == 0 )  $ ~~cout << 6 << endl ;  $ ~else if ( n % 4 == 1 )  $ ~~cout << 8 << endl ;  $ ~else if ( n % 4 == 2 )  $ ~~cout << 4 << endl ;  $ ~else if ( n % 4 == 3 )  $ ~~cout << 2 << endl ;  $ ~return 0 ;  $ }
int n ;  $ char chair [ 10000 ] ;  $ int main ( ) {  $ ~cin >> n ;  $ ~int a ;  $ ~cin >> ( chair + 1 ) ;  $ ~chair [ 0 ] = '0' ;  $ ~chair [ n + 1 ] = '0' ;  $ ~int ans = 0 ;  $ ~if ( n == 1 && chair [ 1 ] == '0' ) {  $ ~~cout << "No" << endl ;  $ ~~return 0 ;  $ ~}  $ ~if ( n == 1 && chair [ 1 ] == '1' ) {  $ ~~cout << "Yes" << endl ;  $ ~~return 0 ;  $ ~}  $ ~for ( int i = 1 ; i <= n ; i ++ ) {  $ ~~if ( chair [ i ] == '1' && ( chair [ i - 1 ] == '1' || chair [ i + 1 ] == '1' ) ) {  $ ~~~ans = 1 ;  $ ~~~break ;  $ ~~}  $ ~~if ( chair [ i ] == '0' ) {  $ ~~~if ( chair [ i - 1 ] == '0' && chair [ i + 1 ] == '0' ) {  $ ~~~~ans = 1 ;  $ ~~~~break ;  $ ~~~}  $ ~~}  $ ~}  $ ~if ( ans == 1 )  $ ~~cout << "No" << endl ;  $ ~else  $ ~~cout << "Yes" << endl ;  $ }
vector < long long > vv ;  $ bool flag = 0 ;  $ long long ans ;  $ int l , r ;  $ void solve ( long long i ) {  $ ~if ( i > ( long long ) 1e10 ) return ;  $ ~if ( i ) vv . push_back ( i ) ;  $ ~solve ( i * 10 + 4 ) ;  $ ~solve ( i * 10 + 7 ) ;  $ }  $ int main ( ) {  $ ~solve ( 0 ) ;  $ ~cin >> l >> r ;  $ ~sort ( vv . begin ( ) , vv . end ( ) ) ;  $ ~for ( int i = 0 ; i < vv . size ( ) ; i ++ ) {  $ ~~if ( vv [ i ] >= l ) {  $ ~~~if ( vv [ i ] >= r ) {  $ ~~~~ans += ( vv [ i ] * ( r - l + 1 ) ) ;  $ ~~~~break ;  $ ~~~} else  $ ~~~~ans += ( vv [ i ] * ( vv [ i ] - l + 1 ) ) ;  $ ~~~l = vv [ i ] + 1 ;  $ ~~}  $ ~~if ( l > r ) break ;  $ ~}  $ ~cout << ans << endl ;  $ ~return 0 ;  $ }
int hpy , ay , dy ;  $ int hpm , am , dm ;  $ int h , a , d ;  $ int main ( ) {  $ ~cin >> hpy >> ay >> dy ;  $ ~cin >> hpm >> am >> dm ;  $ ~cin >> h >> a >> d ;  $ ~int sol = 1123123123 ;  $ ~for ( int j = 0 ; j <= 10000 ; j ++ ) {  $ ~~for ( int k = 0 ; k <= 10000 ; k ++ ) {  $ ~~~if ( a * j + d * k > sol ) break ;  $ ~~~int ly = max ( 0 , am - ( dy + k ) ) ;  $ ~~~int lm = max ( 0 , ( ay + j ) - dm ) ;  $ ~~~if ( ly == 0 && lm == 0 ) {  $ ~~~~continue ;  $ ~~~} else if ( ly == 0 ) {  $ ~~~~sol = min ( sol , a * j + d * k ) ;  $ ~~~} else if ( lm == 0 ) {  $ ~~~~continue ;  $ ~~~} else {  $ ~~~~int turns = ( hpm + lm - 1 ) / lm ;  $ ~~~~int z = turns * ly - hpy + 1 ;  $ ~~~~z = max ( z , 0 ) ;  $ ~~~~sol = min ( sol , a * j + d * k + z * h ) ;  $ ~~~}  $ ~~}  $ ~}  $ ~cout << sol << '\n' ;  $ }
int main ( ) {  $ ~long long int t1 , t2 , x1 , x2 , t0 ;  $ ~cin >> t1 >> t2 >> x1 >> x2 >> t0 ;  $ ~if ( t1 == t2 ) {  $ ~~cout << x1 << " " << x2 << endl ;  $ ~~return 0 ;  $ ~}  $ ~long long int maxa , maxb ;  $ ~maxa = 0 ;  $ ~maxb = x2 ;  $ ~long double closest = t2 ;  $ ~for ( int i = 1 ; i <= x1 ; i ++ ) {  $ ~~long long int j = ( t0 - t1 ) * i ;  $ ~~j = ceil ( 1.0 * j / ( t2 - t0 ) ) ;  $ ~~if ( j > x2 ) continue ;  $ ~~long double comp = t1 * i + t2 * j ;  $ ~~comp /= ( i + j ) ;  $ ~~if ( comp < t0 ) continue ;  $ ~~if ( comp < closest ) {  $ ~~~closest = comp ;  $ ~~~maxa = i ;  $ ~~~maxb = j ;  $ ~~}  $ ~~if ( comp == closest ) {  $ ~~~if ( maxa + maxb < i + j ) {  $ ~~~~maxa = i ;  $ ~~~~maxb = j ;  $ ~~~}  $ ~~}  $ ~}  $ ~cout << maxa << " " << maxb << endl ;  $ ~return 0 ;  $ }
int freq [ 130 ] ;  $ vector < int > v ;  $ int main ( ) {  $ ~string s , t ;  $ ~cin >> s >> t ;  $ ~for ( int i = 0 ; i < min ( s . size ( ) , t . size ( ) ) ; i ++ ) {  $ ~~if ( s [ i ] != t [ i ] ) v . push_back ( i ) ;  $ ~~freq [ s [ i ] ] ++ ;  $ ~}  $ ~if ( v . size ( ) > 2 || v . size ( ) == 1 || s . size ( ) != t . size ( ) )  $ ~~puts ( "NO" ) ;  $ ~else if ( v . size ( ) == 2 ) {  $ ~~if ( s [ v [ 0 ] ] == t [ v [ 1 ] ] && s [ v [ 1 ] ] == t [ v [ 0 ] ] )  $ ~~~puts ( "YES" ) ;  $ ~~else  $ ~~~puts ( "NO" ) ;  $ ~} else {  $ ~~for ( int i = 'a' ; i <= 'z' ; i ++ ) {  $ ~~~if ( freq [ i ] > 1 ) {  $ ~~~~puts ( "YES" ) ;  $ ~~~~return 0 ;  $ ~~~}  $ ~~}  $ ~~puts ( "NO" ) ;  $ ~}  $ ~return 0 ;  $ }
int main ( ) {  $ ~int n , s , x , y , ans , k , sw ;  $ ~while ( cin >> n >> s ) {  $ ~~ans = - 1 ;  $ ~~s *= 100 ;  $ ~~for ( int i = 1 ; i <= n ; i ++ ) {  $ ~~~cin >> x >> y ;  $ ~~~sw = ( 100 - y ) % 100 ;  $ ~~~y += x * 100 ;  $ ~~~y += sw ;  $ ~~~k = s / y ;  $ ~~~if ( k == 0 ) continue ;  $ ~~~ans = max ( ans , sw ) ;  $ ~~}  $ ~~cout << ans << endl ;  $ ~}  $ ~return 0 ;  $ }
int main ( ) {  $ ~int n ;  $ ~cin >> n ;  $ ~string s ;  $ ~cin >> s ;  $ ~int count1 = 0 ;  $ ~int count0 = 0 ;  $ ~for ( int i = 0 ; i < s . size ( ) ; i ++ ) {  $ ~~if ( s [ i ] == '1' ) {  $ ~~~count1 ++ ;  $ ~~} else {  $ ~~~count0 ++ ;  $ ~~}  $ ~}  $ ~string output = "1" ;  $ ~if ( count1 == 0 ) {  $ ~~output = "0" ;  $ ~} else {  $ ~~for ( int i = 1 ; i <= count0 ; i ++ ) { output = output + '0' ; }  $ ~}  $ ~cout << output << endl ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~int n ;  $ ~while ( cin >> n ) {  $ ~~int flog ;  $ ~~if ( n % 2 == 0 ) {  $ ~~~flog = n / 2 ;  $ ~~~cout << flog << endl ;  $ ~~~for ( int i = 0 ; i < flog ; i ++ ) {  $ ~~~~cout << 2 ;  $ ~~~~if ( i != flog - 1 ) { cout << " " ; }  $ ~~~~if ( i == flog - 1 ) { cout << endl ; }  $ ~~~}  $ ~~}  $ ~~if ( n % 2 != 0 ) {  $ ~~~if ( n == 3 ) {  $ ~~~~cout << 1 << endl ;  $ ~~~~cout << 3 << endl ;  $ ~~~}  $ ~~~if ( n > 3 ) {  $ ~~~~flog = n / 2 ;  $ ~~~~cout << flog << endl ;  $ ~~~~for ( int i = 0 ; i < flog ; i ++ ) {  $ ~~~~~if ( i != flog - 1 ) { cout << 2 << " " ; }  $ ~~~~~if ( i == flog - 1 ) { cout << 3 << endl ; }  $ ~~~~}  $ ~~~}  $ ~~}  $ ~}  $ }
long long a , b , c , d , k ;  $ int main ( ) {  $ ~cin >> a >> b >> c >> d >> k , a = max ( a , c ) , b = min ( b , d ) ;  $ ~cout << max ( b - a + ( k > b || k < a ) , 0 LL ) << endl ;  $ }
void fastscan ( int & x ) {  $ ~bool neg = false ;  $ ~register int c ;  $ ~x = 0 ;  $ ~c = getchar ( ) ;  $ ~if ( c == '-' ) {  $ ~~neg = true ;  $ ~~c = getchar ( ) ;  $ ~}  $ ~for ( ; ( c > 47 && c < 58 ) ; c = getchar ( ) ) x = ( x << 1 ) + ( x << 3 ) + c - 48 ;  $ ~if ( neg ) x *= - 1 ;  $ }  $ int main ( ) {  $ ~char s1 [ 100005 ] , s2 [ 100005 ] , a [ 2 ] , b [ 2 ] ;  $ ~int l1 , l2 , i , j = 0 , cnt = 0 ;  $ ~cin >> s1 >> s2 ;  $ ~l1 = strlen ( s1 ) ;  $ ~l2 = strlen ( s2 ) ;  $ ~if ( l1 != l2 ) {  $ ~~cout << "NO" << endl ;  $ ~~return 0 ;  $ ~} else {  $ ~~for ( i = 0 ; i < l1 ; i ++ ) {  $ ~~~if ( s1 [ i ] != s2 [ i ] ) {  $ ~~~~cnt ++ ;  $ ~~~~a [ j ] = s1 [ i ] ;  $ ~~~~b [ j ] = s2 [ i ] ;  $ ~~~~j ++ ;  $ ~~~~if ( cnt > 2 ) {  $ ~~~~~cout << "NO" << endl ;  $ ~~~~~return 0 ;  $ ~~~~}  $ ~~~}  $ ~~}  $ ~}  $ ~if ( a [ 1 ] == b [ 0 ] && a [ 0 ] == b [ 1 ] ) {  $ ~~cout << "YES" << endl ;  $ ~} else {  $ ~~cout << "NO" << endl ;  $ ~}  $ ~return 0 ;  $ }
int hor [ ] = { 0 , 1 , 2 , 3 , 4 , 5 , 10 , 11 , 12 , 13 , 14 , 15 , 20 , 21 , 22 , 23 } ;  $ int mie [ ] = { 0 , 10 , 20 , 30 , 40 , 50 , 1 , 11 , 21 , 31 , 41 , 51 , 2 , 12 , 22 , 32 } ;  $ int main ( ) {  $ ~char maohao ;  $ ~int h , m ;  $ ~cin >> h >> maohao >> m ;  $ ~for ( int i = 0 ; i < 16 ; i ++ ) {  $ ~~if ( ( hor [ i ] == h && mie [ i ] > m ) || hor [ i ] > h ) {  $ ~~~if ( hor [ i ] < 10 ) cout << "0" ;  $ ~~~cout << hor [ i ] << ":" ;  $ ~~~if ( mie [ i ] < 10 ) cout << "0" ;  $ ~~~cout << mie [ i ] << endl ;  $ ~~~return 0 ;  $ ~~}  $ ~}  $ ~cout << "00:00" << endl ;  $ ~return 0 ;  $ }
long long gcd ( long long a , long long b ) {  $ ~if ( b ) return gcd ( b , a % b ) ;  $ ~return a ;  $ }  $ long long lcm ( long long a , long long b ) {  $ ~return ( a * b ) / gcd ( a , b ) ;  $ }  $ long long fastPow ( long long a , long long b ) {  $ ~long long ret = 1 ;  $ ~while ( b > 0 ) {  $ ~~if ( b & 1 ) ret = ( ret * a ) ;  $ ~~a = ( a * a ) ;  $ ~~b >> = 1 ;  $ ~}  $ ~return ret ;  $ }  $ vector < long long > SieveOfErathostenes ( long long n ) {  $ ~bool prime [ n + 1 ] ;  $ ~vector < long long > a ;  $ ~memset ( prime , true , n + 1 ) ;  $ ~for ( long long p = 2 ; p * p <= n ; p ++ ) {  $ ~~if ( prime [ p ] ) {  $ ~~~for ( long long i = p * p ; i <= n ; i += p ) prime [ i ] = false ;  $ ~~}  $ ~}  $ ~for ( long long p = 2 ; p <= n ; p ++ )  $ ~~if ( prime [ p ] ) a . push_back ( p ) ;  $ ~return a ;  $ }  $ int main ( ) {  $ ~int n , s , max = 0 , c = 1 , a , b , total , d ;  $ ~cin >> n >> s ;  $ ~for ( int i = 0 ; i < n ; i ++ ) {  $ ~~cin >> a >> b ;  $ ~~if ( a > s || ( a == s && b > 0 ) ) {  $ ~~~c &= 1 ;  $ ~~} else {  $ ~~~c &= 0 ;  $ ~~~total = 100 - b ;  $ ~~~if ( total == 100 ) total = 0 ;  $ ~~~max = max > total ? max : total ;  $ ~~}  $ ~}  $ ~if ( c ) max = - 1 ;  $ ~cout << max << endl ;  $ ~return 0 ;  $ }
int static fast = [ ] ( ) { return 0 ; } ( ) ;  $ int main ( ) {  $ ~int n , m ;  $ ~cin >> n ;  $ ~vector < long long > high ( n , 0 ) ;  $ ~vector < int > freq ( n , 0 ) ;  $ ~long long highest = 0 , val ;  $ ~for ( int i = 0 ; i < n ; i ++ ) {  $ ~~cin >> m ;  $ ~~freq [ i ] = m ;  $ ~~for ( int j = 0 ; j < m ; j ++ ) {  $ ~~~cin >> val ;  $ ~~~high [ i ] = max ( high [ i ] , val ) ;  $ ~~}  $ ~~highest = max ( highest , high [ i ] ) ;  $ ~}  $ ~long long ans = 0 ;  $ ~for ( int i = 0 ; i < n ; i ++ ) { ans += freq [ i ] * ( highest - high [ i ] ) ; }  $ ~cout << ans << endl ;  $ ~return 0 ;  $ }
long long int dp [ 5555 ] [ 5555 ] ;  $ long long int sum [ 5555 ] ;  $ int main ( ) {  $ ~string s , t ;  $ ~cin >> s >> t ;  $ ~long long int lens = s . length ( ) ;  $ ~long long int lent = t . length ( ) ;  $ ~for ( long long int i = 1 ; i <= lens ; i ++ ) {  $ ~~for ( long long int j = 1 ; j <= lent ; j ++ ) {  $ ~~~if ( s [ i - 1 ] == t [ j - 1 ] ) { dp [ i ] [ j ] = ( dp [ i ] [ j ] + ( sum [ j - 1 ] + 1 ) % 1000000007 ) % 1000000007 ; }  $ ~~}  $ ~~for ( long long int j = 1 ; j <= lent ; j ++ ) sum [ j ] = ( sum [ j - 1 ] + dp [ i ] [ j ] ) % 1000000007 ;  $ ~}  $ ~long long int ans = 0 ;  $ ~for ( long long int i = 1 ; i <= lens ; i ++ )  $ ~~for ( long long int j = 1 ; j <= lent ; j ++ ) ans = ( ans + dp [ i ] [ j ] ) % 1000000007 ;  $ ~cout << ans << endl ;  $ }
long long n ;  $ long long x , y ;  $ int main ( ) {  $ ~cin >> n ;  $ ~cin >> x >> y ;  $ ~long long m = min ( x , y ) ;  $ ~long long tx = x - m ;  $ ~long long ty = y - m ;  $ ~long long w = m - 1 + tx + ty ;  $ ~m = min ( n - x , n - y ) ;  $ ~tx = n - x - m ;  $ ~ty = n - y - m ;  $ ~long long b = m + 1 + tx + ty ;  $ ~if ( w < b )  $ ~~puts ( "White" ) ;  $ ~else  $ ~~puts ( "Black" ) ;  $ ~return 0 ;  $ }
int hm , am , dm ;  $ bool wins ( int hy , int ay , int dy ) {  $ ~int damy = max ( 0 , ay - dm ) ;  $ ~int damm = max ( 0 , am - dy ) ;  $ ~if ( damy == 0 ) return false ;  $ ~if ( damm == 0 ) return true ;  $ ~return ( hm + damy - 1 ) / damy < ( hy + damm - 1 ) / damm ;  $ }  $ int main ( ) {  $ ~int hy , ay , dy ;  $ ~cin >> hy >> ay >> dy >> hm >> am >> dm ;  $ ~int h , a , d ;  $ ~cin >> h >> a >> d ;  $ ~for ( int s = 0 ; s < 20000 ; ++ s ) {  $ ~~for ( int id = 0 ; id * d <= s and id <= 100 ; ++ id ) {  $ ~~~for ( int ia = 0 ; ia * a + id * d <= s and ia <= 200 ; ++ ia ) {  $ ~~~~int ih = ( s - ia * a - id * d ) / h ;  $ ~~~~if ( wins ( hy + ih , ay + ia , dy + id ) ) {  $ ~~~~~cout << s << '\n' ;  $ ~~~~~return 0 ;  $ ~~~~}  $ ~~~}  $ ~~}  $ ~}  $ ~return 0 ;  $ }
int main ( ) {  $ ~char a [ 3 ] , b [ 3 ] ;  $ ~string str1 , str2 ;  $ ~while ( cin >> str1 >> str2 ) {  $ ~~int count ( 0 ) ;  $ ~~a [ 0 ] = '\0' ;  $ ~~b [ 0 ] = '\0' ;  $ ~~int index = 0 ;  $ ~~if ( 1 == str1 . length ( ) || str1 . length ( ) != str2 . length ( ) ) {  $ ~~~cout << "NO" << endl ;  $ ~~~continue ;  $ ~~}  $ ~~for ( int i = 0 ; i < str1 . length ( ) ; i ++ ) {  $ ~~~if ( str1 [ i ] == str2 [ i ] )  $ ~~~~continue ;  $ ~~~else {  $ ~~~~count ++ ;  $ ~~~~if ( count > 2 ) {  $ ~~~~~cout << "NO" << endl ;  $ ~~~~~break ;  $ ~~~~}  $ ~~~~a [ index ] = str1 [ i ] ;  $ ~~~~b [ index ] = str2 [ i ] ;  $ ~~~~index ++ ;  $ ~~~~a [ index ] = '\0' ;  $ ~~~~b [ index ] = '\0' ;  $ ~~~}  $ ~~}  $ ~~if ( count > 2 ) continue ;  $ ~~if ( a [ 0 ] == b [ 1 ] && b [ 0 ] == a [ 1 ] )  $ ~~~cout << "YES" << endl ;  $ ~~else  $ ~~~cout << "NO" << endl ;  $ ~}  $ ~return 0 ;  $ }
string s1 , s2 ;  $ vector < int > v [ 30 ] ;  $ int bs ( int alph , int p ) {  $ ~if ( v [ alph ] . size ( ) == 0 ) return - 1 ;  $ ~int l = 0 , r = v [ alph ] . size ( ) ;  $ ~while ( l < r ) {  $ ~~int mid = ( l + r ) / 2 ;  $ ~~if ( v [ alph ] [ mid ] < p )  $ ~~~l = mid + 1 ;  $ ~~else  $ ~~~r = mid ;  $ ~}  $ ~if ( l == v [ alph ] . size ( ) ) return v [ alph ] [ 0 ] ;  $ ~return v [ alph ] [ l ] ;  $ }  $ int main ( ) {  $ ~cin >> s1 >> s2 ;  $ ~for ( int i = 0 ; i < s1 . length ( ) ; i ++ ) v [ s1 [ i ] - 'a' ] . push_back ( i ) ;  $ ~int cnt = 0 , pnt = s1 . length ( ) ;  $ ~for ( int i = 0 ; i < s2 . length ( ) ; i ++ ) {  $ ~~int idx = bs ( s2 [ i ] - 'a' , pnt ) ;  $ ~~if ( idx == - 1 ) {  $ ~~~cnt = - 1 ;  $ ~~~break ;  $ ~~}  $ ~~if ( idx < pnt ) cnt ++ ;  $ ~~pnt = idx + 1 ;  $ ~}  $ ~cout << cnt << endl ;  $ ~return 0 ;  $ }
int ada [ 10005 ] ;  $ int main ( ) {  $ ~int n ;  $ ~cin >> n ;  $ ~string s ;  $ ~cin >> s ;  $ ~if ( n == 1 ) {  $ ~~cout << "Yes" << endl ;  $ ~~return 0 ;  $ ~}  $ ~for ( int i = 0 ; i < n ; i ++ ) {  $ ~~char x = s [ i ] ;  $ ~~int xx = ( int ) x ;  $ ~~ada [ xx ] += 1 ;  $ ~}  $ ~int satu = 0 ;  $ ~for ( int i = 97 ; i <= 122 ; i ++ ) {  $ ~~if ( ada [ i ] > 1 ) {  $ ~~~cout << "Yes" << endl ;  $ ~~~return 0 ;  $ ~~}  $ ~}  $ ~cout << "No" << endl ;  $ }
int b [ 101 ] ;  $ vector < int > a [ 101 ] ;  $ int Find ( int x ) {  $ ~if ( b [ x ] == x )  $ ~~return x ;  $ ~else  $ ~~return b [ x ] = Find ( b [ x ] ) ;  $ }  $ void Union ( int x , int y ) {  $ ~x = Find ( x ) ;  $ ~y = Find ( y ) ;  $ ~b [ y ] = x ;  $ }  $ bool check [ 101 ] ;  $ int main ( ) {  $ ~int n , m ;  $ ~cin >> n >> m ;  $ ~int ans = 0 ;  $ ~memset ( b , - 1 , sizeof ( b ) ) ;  $ ~for ( int i = 0 ; i < n ; i ++ ) {  $ ~~int t ;  $ ~~cin >> t ;  $ ~~if ( t == 0 ) ans += 1 ;  $ ~~for ( int j = 0 ; j < t ; j ++ ) {  $ ~~~int x ;  $ ~~~cin >> x ;  $ ~~~a [ i ] . push_back ( x ) ;  $ ~~~b [ x ] = x ;  $ ~~}  $ ~}  $ ~for ( int i = 0 ; i < n ; i ++ ) {  $ ~~if ( a [ i ] . size ( ) > 0 ) {  $ ~~~int x = a [ i ] [ 0 ] ;  $ ~~~for ( int j = 1 ; j < a [ i ] . size ( ) ; j ++ ) { Union ( Find ( x ) , Find ( a [ i ] [ j ] ) ) ; }  $ ~~}  $ ~}  $ ~int cnt = 0 ;  $ ~for ( int i = 1 ; i <= m ; i ++ ) {  $ ~~if ( b [ i ] != - 1 ) b [ i ] = Find ( b [ i ] ) ;  $ ~}  $ ~for ( int i = 1 ; i <= m ; i ++ ) {  $ ~~if ( b [ i ] != - 1 && ! check [ b [ i ] ] ) {  $ ~~~check [ b [ i ] ] = true ;  $ ~~~cnt += 1 ;  $ ~~}  $ ~}  $ ~if ( cnt > 0 ) cnt -= 1 ;  $ ~cout << ans + cnt << '\n' ;  $ }
int gcd ( int a , int b ) ;  $ int main ( ) {  $ ~int n , x , max_ = 0 , s = 0 , k = 1 ;  $ ~cin >> n ;  $ ~for ( int i = 0 ; i < n ; ++ i ) {  $ ~~if ( i == 0 ) {  $ ~~~cin >> x ;  $ ~~~max_ = max_ + x ;  $ ~~~cin >> x ;  $ ~~~max_ = max_ + x ;  $ ~~~cin >> x ;  $ ~~~max_ = max_ + x ;  $ ~~~cin >> x ;  $ ~~~max_ = max_ + x ;  $ ~~} else {  $ ~~~cin >> x ;  $ ~~~s = s + x ;  $ ~~~cin >> x ;  $ ~~~s = s + x ;  $ ~~~cin >> x ;  $ ~~~s = s + x ;  $ ~~~cin >> x ;  $ ~~~s = s + x ;  $ ~~~if ( s > max_ ) { k ++ ; }  $ ~~~s = 0 ;  $ ~~}  $ ~}  $ ~cout << k << endl ;  $ ~return 0 ;  $ }  $ int gcd ( int a , int b ) {  $ ~if ( b == 0 ) {  $ ~~return a ;  $ ~} else {  $ ~~return gcd ( b , a % b ) ;  $ ~}  $ }
int main ( ) {  $ ~long double n ;  $ ~cin >> n ;  $ ~if ( n <= 127 ) {  $ ~~cout << "byte\n" ;  $ ~} else if ( n <= 32767 ) {  $ ~~cout << "short" << endl ;  $ ~} else if ( n <= 2147483647 ) {  $ ~~cout << "int" << endl ;  $ ~} else if ( n <= 9223372036854775807 ) {  $ ~~cout << "long" << endl ;  $ ~} else {  $ ~~cout << "BigInteger" << endl ;  $ ~}  $ ~return 0 ;  $ }
long long n ;  $ bool cpr ( long long n ) {  $ ~if ( n == 1 || n == 0 ) return false ;  $ ~if ( n == 2 ) return true ;  $ ~if ( n % 2 == 0 ) return false ;  $ ~for ( long long i = 3 ; i * i <= n ; i += 2 )  $ ~~if ( n % i == 0 ) return false ;  $ ~return true ;  $ }  $ int main ( ) {  $ ~cin >> n ;  $ ~long long idx = 1 ;  $ ~while ( 1 ) {  $ ~~if ( cpr ( n * idx + 1 ) ) {  $ ~~~idx ++ ;  $ ~~} else {  $ ~~~cout << idx << endl ;  $ ~~~return 0 ;  $ ~~}  $ ~}  $ ~return 0 ;  $ }
const long long INF = 9223372036854775807 LL ;  $ const long double PI = acos ( - 1 ) ;  $ const int MAX_N = 1e+6 ;  $ const int ALPH = 26 ;  $ const string alph = "abcdefghijklmnopqrstuvwxyz" ;  $ void count ( int & pos , string & s , int & xd ) {  $ ~int l = s . size ( ) ;  $ ~while ( pos < l ) {  $ ~~if ( s [ pos ] == '|' ) {  $ ~~~xd ++ ;  $ ~~~pos ++ ;  $ ~~} else  $ ~~~break ;  $ ~}  $ ~pos ++ ;  $ }  $ void print ( int a , int b , int c ) {  $ ~for ( int i = 0 ; i < a ; i ++ ) cout << "|" ;  $ ~cout << "+" ;  $ ~for ( int i = 0 ; i < b ; i ++ ) cout << "|" ;  $ ~cout << "=" ;  $ ~for ( int i = 0 ; i < c ; i ++ ) cout << "|" ;  $ ~cout << endl ;  $ }  $ bool check ( int a , int b , int c ) {  $ ~if ( a <= 0 or b <= 0 or c <= 0 ) return false ;  $ ~return a + b == c ;  $ }  $ void solve ( ) {  $ ~string s ;  $ ~cin >> s ;  $ ~int l = s . size ( ) ;  $ ~int a , b , c ;  $ ~a = b = c = 0 ;  $ ~int pos = 0 ;  $ ~count ( pos , s , a ) ;  $ ~count ( pos , s , b ) ;  $ ~count ( pos , s , c ) ;  $ ~if ( a + b == c ) {  $ ~~print ( a , b , c ) ;  $ ~} else {  $ ~~if ( check ( a + 1 , b - 1 , c ) ) {  $ ~~~print ( a + 1 , b - 1 , c ) ;  $ ~~~return ;  $ ~~}  $ ~~if ( check ( a + 1 , b , c - 1 ) ) {  $ ~~~print ( a + 1 , b , c - 1 ) ;  $ ~~~return ;  $ ~~}  $ ~~if ( check ( a - 1 , b + 1 , c ) ) {  $ ~~~print ( a - 1 , b + 1 , c ) ;  $ ~~~return ;  $ ~~}  $ ~~if ( check ( a , b + 1 , c - 1 ) ) {  $ ~~~print ( a , b + 1 , c - 1 ) ;  $ ~~~return ;  $ ~~}  $ ~~if ( check ( a - 1 , b , c + 1 ) ) {  $ ~~~print ( a - 1 , b , c + 1 ) ;  $ ~~~return ;  $ ~~}  $ ~~if ( check ( a , b - 1 , c + 1 ) ) {  $ ~~~print ( a , b - 1 , c + 1 ) ;  $ ~~~return ;  $ ~~}  $ ~~cout << "Impossible" << endl ;  $ ~}  $ }  $ int main ( ) {  $ ~int t = 1 ;  $ ~while ( t -- ) solve ( ) ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~int n ;  $ ~cin >> n ;  $ ~int ar [ n + 1 ] ;  $ ~for ( int i = 2 ; i <= n ; i ++ ) cin >> ar [ i ] ;  $ ~stack < int > s ;  $ ~int i = n ;  $ ~s . push ( n ) ;  $ ~while ( 1 ) {  $ ~~s . push ( ar [ i ] ) ;  $ ~~i = ar [ i ] ;  $ ~~if ( i == 1 ) break ;  $ ~}  $ ~cout << s . top ( ) ;  $ ~s . pop ( ) ;  $ ~while ( s . empty ( ) != true ) {  $ ~~cout << " " << s . top ( ) ;  $ ~~s . pop ( ) ;  $ ~}  $ ~cout << endl ;  $ }
int gcd ( int i , int j ) {  $ ~if ( j == 0 ) return i ;  $ ~return gcd ( j , i % j ) ;  $ }  $ int main ( ) {  $ ~int a , b , c , d ;  $ ~cin >> a >> b >> c >> d ;  $ ~if ( ( b - d ) % gcd ( c , - a ) )  $ ~~cout << "-1" << endl ;  $ ~else  $ ~~for ( int i = 0 ; i < 1e6 ; ++ i )  $ ~~~if ( ( b - d + a * i ) % c == 0 && ( b - d + a * i ) / c >= 0 ) {  $ ~~~~cout << b + a * i << endl ;  $ ~~~~break ;  $ ~~~}  $ ~return 0 ;  $ }
void fastIo ( ) { }  $ string s ;  $ int indx ;  $ int check ( string temp ) {  $ ~int i ;  $ ~for ( int i = 0 ; i < s . length ( ) - 1 ; i ++ ) {  $ ~~if ( i != indx && i + 1 != ( indx ) && i != ( indx + 1 ) ) {  $ ~~~if ( s . substr ( i , 2 ) == temp ) {  $ ~~~~indx = i ;  $ ~~~~return 1 ;  $ ~~~}  $ ~~}  $ ~}  $ ~return 0 ;  $ }  $ int main ( ) {  $ ~fastIo ( ) ;  $ ~cin >> s ;  $ ~indx = - 2 ;  $ ~int ans = check ( "AB" ) ;  $ ~ans += check ( "BA" ) ;  $ ~if ( ans == 2 ) {  $ ~~cout << "YES" << endl ;  $ ~} else {  $ ~~ans = 0 ;  $ ~~indx = - 2 ;  $ ~~ans = check ( "BA" ) ;  $ ~~ans += check ( "AB" ) ;  $ ~~if ( ans == 2 ) {  $ ~~~cout << "YES" << endl ;  $ ~~} else {  $ ~~~cout << "NO" << endl ;  $ ~~}  $ ~}  $ ~return 0 ;  $ }
bool isIN ( vector < int > & disk , int element ) {  $ ~for ( int i = 0 ; i < ( int ) disk . size ( ) ; i ++ ) {  $ ~~if ( disk [ i ] == element ) return true ;  $ ~}  $ ~return false ;  $ }  $ int main ( ) {  $ ~int n , m ;  $ ~cin >> n >> m ;  $ ~vector < int > rstr ;  $ ~int v ;  $ ~for ( int i = 0 ; i < n ; i ++ ) {  $ ~~cin >> v ;  $ ~~rstr . push_back ( v ) ;  $ ~}  $ ~vector < int > disk ;  $ ~int ans = 0 ;  $ ~for ( int i = 0 ; i < n ; i ++ ) {  $ ~~if ( isIN ( disk , rstr [ i ] ) ) {  $ ~~~ans ++ ;  $ ~~~continue ;  $ ~~} else if ( ( int ) disk . size ( ) < m ) {  $ ~~~disk . push_back ( rstr [ i ] ) ;  $ ~~} else {  $ ~~~int ind = 0 , mx = i + 1 , k ;  $ ~~~for ( int j = 0 ; j < m ; j ++ ) {  $ ~~~~for ( k = i + 1 ; k < n ; k ++ ) {  $ ~~~~~if ( disk [ j ] == rstr [ k ] ) {  $ ~~~~~~if ( k > mx ) {  $ ~~~~~~~mx = k ;  $ ~~~~~~~ind = j ;  $ ~~~~~~}  $ ~~~~~~break ;  $ ~~~~~}  $ ~~~~}  $ ~~~~if ( k == n ) {  $ ~~~~~ind = j ;  $ ~~~~~break ;  $ ~~~~}  $ ~~~}  $ ~~~if ( mx == INT_MAX ) { ind = 0 ; }  $ ~~~disk [ ind ] = rstr [ i ] ;  $ ~~}  $ ~}  $ ~cout << n - ans << endl ;  $ ~return 0 ;  $ }
int n , m ;  $ int menor ;  $ int main ( ) {  $ ~cin >> n >> m ;  $ ~menor = INT_MAX ;  $ ~for ( int i = 0 ; i < m ; i ++ ) {  $ ~~int a , b ;  $ ~~cin >> a >> b ;  $ ~~menor = min ( menor , b - a + 1 ) ;  $ ~}  $ ~cout << menor << "\n" ;  $ ~cout << "0" ;  $ ~for ( int i = 1 ; i < n ; i ++ ) { cout << " " << i % menor ; }  $ ~cout << "\n" ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~long long int i , j , k , rest , n ;  $ ~char ch , ch1 ;  $ ~cin >> n >> k ;  $ ~rest = n - k ;  $ ~ch = 'a' ;  $ ~for ( i = 0 ; i < k ; i ++ ) {  $ ~~cout << ch ;  $ ~~ch += 1 ;  $ ~}  $ ~ch1 = 'a' ;  $ ~for ( i = 0 , j = 1 ; i < rest ; i ++ , j ++ ) {  $ ~~cout << ch1 ;  $ ~~ch1 += 1 ;  $ ~~if ( j == k ) {  $ ~~~ch1 = 'a' ;  $ ~~~j = 0 ;  $ ~~}  $ ~}  $ ~cout << endl ;  $ ~return 0 ;  $ }
const long long N = 100005 ;  $ long long dp [ N ] , f [ N ] ;  $ long long dpback [ N ] ;  $ vector < long long > g [ N ] ;  $ vector < long long > gback [ N ] ;  $ void go ( long long p ) {  $ ~if ( dp [ p ] == 1 ) return ;  $ ~dp [ p ] = 1 ;  $ ~if ( f [ p ] != 1 ) {  $ ~~for ( long long i = 0 ; i < ( g [ p ] . size ( ) ) ; i ++ ) { go ( g [ p ] [ i ] ) ; }  $ ~}  $ }  $ void goback ( long long p , bool first ) {  $ ~if ( dpback [ p ] == 1 ) return ;  $ ~if ( first || f [ p ] != 1 ) {  $ ~~dpback [ p ] = 1 ;  $ ~~for ( long long i = 0 ; i < ( gback [ p ] . size ( ) ) ; i ++ ) { goback ( gback [ p ] [ i ] , false ) ; }  $ ~}  $ }  $ int main ( ) {  $ ~long long n , m ;  $ ~cin >> n >> m ;  $ ~for ( long long i = 0 ; i < ( n ) ; i ++ ) { cin >> f [ i ] ; }  $ ~for ( long long i = 0 ; i < ( m ) ; i ++ ) {  $ ~~long long x , y ;  $ ~~cin >> x >> y ;  $ ~~x -- ;  $ ~~y -- ;  $ ~~g [ y ] . push_back ( x ) ;  $ ~~gback [ x ] . push_back ( y ) ;  $ ~}  $ ~for ( long long i = 0 ; i < ( n ) ; i ++ ) {  $ ~~if ( f [ i ] == 2 ) { go ( i ) ; }  $ ~~if ( f [ i ] == 1 ) goback ( i , true ) ;  $ ~}  $ ~for ( long long i = 0 ; i < ( n ) ; i ++ ) {  $ ~~long long ans = dp [ i ] == 1 && dpback [ i ] == 1 ? 1 : 0 ;  $ ~~cout << ans << "\n" ;  $ ~}  $ }
const long long mod = 998244353 ;  $ const int maxn = 2e5 ;  $ int main ( ) {  $ ~int t ;  $ ~long long n , a , b , c ;  $ ~cin >> n ;  $ ~cin >> a >> b >> c ;  $ ~long long one = a , two = b - c ;  $ ~long long sum1 = n / one , yu1 = n % one , ci ;  $ ~while ( yu1 / b > 0 ) {  $ ~~ci = ( yu1 - c ) / two ;  $ ~~yu1 = yu1 - ci * two ;  $ ~~sum1 += ci ;  $ ~}  $ ~long long yu2 = n , sum2 = 0 , ans = 0 ;  $ ~while ( yu2 / b > 0 ) {  $ ~~ci = ( yu2 - c ) / two ;  $ ~~yu2 = yu2 - ci * two ;  $ ~~sum2 += ci ;  $ ~}  $ ~sum2 += yu2 / one ;  $ ~yu2 = yu2 % one ;  $ ~ans = max ( ans , sum2 ) ;  $ ~ans = max ( sum1 , ans ) ;  $ ~cout << ans << endl ;  $ ~return 0 ;  $ }
long long int mod = 1000000007 ;  $ long long int l , r ;  $ long long int p [ 18 ] ;  $ long long int ct [ 19 ] ;  $ void init ( ) {  $ ~p [ 0 ] = 1 ;  $ ~for ( int i = 1 ; i <= 17 ; i ++ ) { p [ i ] = 10 ll * p [ i - 1 ] ; }  $ ~ct [ 1 ] = 9 ;  $ ~ct [ 2 ] = 9 ;  $ ~for ( int i = 3 ; i <= 18 ; i ++ ) { ct [ i ] = 9 * p [ i - 2 ] ; }  $ }  $ long long int calc ( long long int num ) {  $ ~vector < int > digits ;  $ ~long long int n = num ;  $ ~while ( num ) {  $ ~~digits . push_back ( num % 10 ) ;  $ ~~num /= 10 ;  $ ~}  $ ~if ( digits . size ( ) == 1 ) { return n - 1 ; }  $ ~int l = digits . size ( ) ;  $ ~long long int ans = 0 ;  $ ~for ( int i = l - 1 ; i >= 0 ; i -- ) {  $ ~~if ( i == l - 1 ) {  $ ~~~if ( digits [ i ] > 1 ) { ans += ( digits [ i ] - 1 ) * ( p [ l - 2 ] ) ; }  $ ~~} else if ( i == 0 ) {  $ ~~~if ( digits [ l - 1 ] < digits [ 0 ] ) { ans += ( 1 ) ; }  $ ~~} else if ( digits [ i ] > 0 ) {  $ ~~~ans += ( digits [ i ] ) * ( p [ i - 1 ] ) ;  $ ~~}  $ ~}  $ ~for ( int i = 0 ; i < l ; i ++ ) { ans += ct [ i ] ; }  $ ~return ans ;  $ }  $ int main ( ) {  $ ~init ( ) ;  $ ~cin >> l >> r ;  $ ~cout << calc ( r + 1 ) - calc ( l ) << endl ;  $ ~return 0 ;  $ }
int n , d [ 111 ] ;  $ string a [ 111 ] , s , t ;  $ char lucky ;  $ int main ( ) {  $ ~cin >> n ;  $ ~for ( int i = 1 ; i <= n ; i ++ ) {  $ ~~cin >> a [ i ] ;  $ ~~for ( int j = 0 ; j < a [ i ] . size ( ) ; j ++ )  $ ~~~if ( a [ i ] [ j ] >= 'a' ) a [ i ] [ j ] -= 32 ;  $ ~}  $ ~cin >> s ;  $ ~t = s ;  $ ~cin >> lucky ;  $ ~if ( lucky >= 'a' ) lucky -= 32 ;  $ ~int sl = s . length ( ) ;  $ ~for ( int i = 0 ; i < sl ; i ++ ) {  $ ~~if ( s [ i ] >= 'a' ) s [ i ] -= 32 , d [ i ] = 1 ;  $ ~}  $ ~for ( int i = 0 ; i < sl ; i ++ ) {  $ ~~for ( int j = 1 ; j <= n ; j ++ ) {  $ ~~~int l = a [ j ] . length ( ) ;  $ ~~~if ( i + l <= sl && s . substr ( i , l ) == a [ j ] ) {  $ ~~~~for ( int k = 0 ; k < l ; k ++ ) {  $ ~~~~~if ( s [ i + k ] == lucky ) {  $ ~~~~~~if ( lucky == 'A' )  $ ~~~~~~~t [ i + k ] = ( d [ i + k ] ? 'b' : 'B' ) ;  $ ~~~~~~else  $ ~~~~~~~t [ i + k ] = ( d [ i + k ] ? 'a' : 'A' ) ;  $ ~~~~~} else  $ ~~~~~~t [ i + k ] = ( d [ i + k ] ? lucky + 32 : lucky ) ;  $ ~~~~}  $ ~~~}  $ ~~}  $ ~}  $ ~cout << t << "\n" ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~string a , b ;  $ ~int judge = 0 , judge2 = 0 , ab = 0 , ba = 0 ;  $ ~cin >> a ;  $ ~b = a ;  $ ~for ( int i = 0 ; i < a . size ( ) ; i ++ ) {  $ ~~if ( ( a [ i ] == 'A' && a [ i + 1 ] == 'B' ) && ab < 1 ) {  $ ~~~judge ++ ;  $ ~~~a [ i ] = a [ i + 1 ] = 'c' ;  $ ~~~ab ++ ;  $ ~~}  $ ~~if ( ( a [ i ] == 'B' && a [ i + 1 ] == 'A' ) && ba < 1 ) {  $ ~~~judge ++ ;  $ ~~~a [ i ] = a [ i + 1 ] = 'c' ;  $ ~~~ba ++ ;  $ ~~}  $ ~}  $ ~ab = 0 ;  $ ~ba = 0 ;  $ ~a = b ;  $ ~for ( int i = a . size ( ) - 1 ; i >= 0 ; i -- ) {  $ ~~if ( ( a [ i ] == 'A' && a [ i + 1 ] == 'B' ) && ab < 1 ) {  $ ~~~judge2 ++ ;  $ ~~~a [ i ] = a [ i + 1 ] = 'c' ;  $ ~~~ab ++ ;  $ ~~}  $ ~~if ( ( a [ i ] == 'B' && a [ i + 1 ] == 'A' ) && ba < 1 ) {  $ ~~~judge2 ++ ;  $ ~~~a [ i ] = a [ i + 1 ] = 'c' ;  $ ~~~ba ++ ;  $ ~~}  $ ~}  $ ~if ( judge == 2 || judge2 == 2 )  $ ~~cout << "YES" << endl ;  $ ~else  $ ~~cout << "NO" << endl ;  $ }
const int maxn = 2e6 + 10 ;  $ int pri [ maxn ] , pal [ maxn ] , c [ 10 ] ;  $ bool vis [ maxn ] ;  $ bool check ( int k ) {  $ ~int cnt = 0 ;  $ ~while ( k ) {  $ ~~c [ cnt ++ ] = k % 10 ;  $ ~~k /= 10 ;  $ ~}  $ ~for ( int i = 0 ; i < cnt ; i ++ )  $ ~~if ( c [ i ] != c [ cnt - i - 1 ] ) return false ;  $ ~return true ;  $ }  $ void init ( ) {  $ ~memset ( vis , false , sizeof vis ) ;  $ ~memset ( pri , 0 , sizeof pri ) ;  $ ~memset ( pal , 0 , sizeof pal ) ;  $ ~pal [ 1 ] = 1 ;  $ ~for ( int i = 2 ; i < maxn ; i ++ ) {  $ ~~pri [ i ] = pri [ i - 1 ] ;  $ ~~pal [ i ] = pal [ i - 1 ] ;  $ ~~if ( ! vis [ i ] ) {  $ ~~~pri [ i ] ++ ;  $ ~~~for ( int j = 2 ; j * i < maxn ; j ++ ) vis [ i * j ] = true ;  $ ~~}  $ ~~if ( check ( i ) ) pal [ i ] ++ ;  $ ~}  $ }  $ int main ( ) {  $ ~init ( ) ;  $ ~long long p , q , ans = 0 ;  $ ~cin >> p >> q ;  $ ~for ( int i = maxn - 1 ; i >= 1 && ! ans ; i -- )  $ ~~if ( q * pri [ i ] <= p * pal [ i ] ) ans = i ;  $ ~cout << ans << endl ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~long long x1 , y1 , x2 , y2 ;  $ ~int n , a , b , c ;  $ ~while ( cin >> x1 >> y1 >> x2 >> y2 >> n ) {  $ ~~int num = 0 ;  $ ~~while ( n -- ) {  $ ~~~cin >> a >> b >> c ;  $ ~~~long long i , j ;  $ ~~~i = a * x1 + b * y1 + c ;  $ ~~~j = a * x2 + b * y2 + c ;  $ ~~~if ( i > 0 && j < 0 || i < 0 && j > 0 ) num ++ ;  $ ~~}  $ ~~cout << num << endl ;  $ ~}  $ ~return 0 ;  $ }
const long long MAXN = 100 * 1000 ;  $ long long arr [ MAXN + 10 ] , n , d ;  $ long long bs ( long long x ) {  $ ~long long l = x , r = n ;  $ ~while ( r - l > 1 ) {  $ ~~long long mid = ( l + r ) / 2 ;  $ ~~if ( arr [ mid ] - arr [ x ] <= d )  $ ~~~l = mid ;  $ ~~else  $ ~~~r = mid ;  $ ~}  $ ~return l ;  $ }  $ int main ( ) {  $ ~cin >> n >> d ;  $ ~for ( long long i = 0 ; i < n ; i ++ ) cin >> arr [ i ] ;  $ ~long long ans = 0 ;  $ ~for ( long long i = 0 ; i < n ; i ++ ) {  $ ~~long long k = bs ( i ) - i ;  $ ~~ans += k * ( k - 1 ) / 2 ;  $ ~}  $ ~cout << ans << endl ;  $ ~return 0 ;  $ }
pair < int , int > dragon [ 1001 ] ;  $ int main ( ) {  $ ~int s , n , x , y , i = 0 ;  $ ~cin >> s >> n ;  $ ~while ( ++ i <= n ) {  $ ~~cin >> x >> y ;  $ ~~dragon [ i - 1 ] = make_pair ( x , y ) ;  $ ~}  $ ~sort ( dragon , dragon + n ) ;  $ ~for ( int j = 0 ; j < n ; j ++ ) {  $ ~~if ( s <= dragon [ j ] . first ) {  $ ~~~cout << "NO" << '\n' ;  $ ~~~return 0 ;  $ ~~}  $ ~~s += dragon [ j ] . second ;  $ ~}  $ ~cout << "YES" << '\n' ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~long long xa , ya , xb , yb ;  $ ~cin >> xa >> ya >> xb >> yb ;  $ ~int n ;  $ ~cin >> n ;  $ ~long long a , b , c ;  $ ~int ans = 0 ;  $ ~for ( int i = 0 ; i < n ; i ++ ) {  $ ~~cin >> a >> b >> c ;  $ ~~if ( b == 0 ) {  $ ~~~if ( - c > min ( xa * a , xb * a ) && - c < max ( xa * a , xb * a ) ) { ans ++ ; }  $ ~~} else {  $ ~~~long long y1 , y2 ;  $ ~~~y1 = - a * xa - c ;  $ ~~~y2 = - a * xb - c ;  $ ~~~if ( ( y1 > ya * b && y2 < yb * b ) || ( y1 < ya * b && y2 > yb * b ) ) { ans ++ ; }  $ ~~}  $ ~}  $ ~cout << ans << endl ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~long long n , m , a , d , i , j , r = 0 , x , y ;  $ ~cin >> n >> m >> a >> d ;  $ ~vector < long long > v ( m + 1 ) ;  $ ~for ( i = 1 ; i <= m ; i ++ ) cin >> v [ i ] ;  $ ~i = j = 1 ;  $ ~x = ( d / a ) + 1 ;  $ ~while ( i <= m && j <= n ) {  $ ~~y = j * a ;  $ ~~if ( v [ i ] > y ) {  $ ~~~y = ( min ( n * a , v [ i ] ) - y ) / a ;  $ ~~~y = ( y / x ) + 1 ;  $ ~~~r += y , j += x * y ;  $ ~~~y = ( j - x ) * a + d + 1 ;  $ ~~~while ( i <= m && v [ i ] < y ) i ++ ;  $ ~~} else {  $ ~~~r ++ ;  $ ~~~y = v [ i ] + d ;  $ ~~~while ( i <= m && v [ i ] <= y ) i ++ ;  $ ~~~j = ( y / a ) + 1 ;  $ ~~}  $ ~}  $ ~while ( i <= m ) {  $ ~~r ++ ;  $ ~~y = v [ i ] + d ;  $ ~~while ( i <= m && v [ i ] <= y ) i ++ ;  $ ~}  $ ~if ( j <= n ) {  $ ~~j = n - j ;  $ ~~r += ( j / x ) + 1 ;  $ ~}  $ ~cout << r << endl ;  $ }
long long D [ 10 ] [ 20 ] [ 2 ] ;  $ string w ;  $ long long d ( int i , int j , int k ) {  $ ~if ( D [ i ] [ j ] [ k ] != - 1 ) return D [ i ] [ j ] [ k ] ;  $ ~if ( j == 1 ) {  $ ~~if ( i == 0 and k == 0 ) return 9 ;  $ ~~if ( i == 0 and k == 1 )  $ ~~~return w [ w . size ( ) - 1 ] - '0' ;  $ ~~else if ( k == 1 )  $ ~~~return i <= w [ w . size ( ) - 1 ] - '0' ;  $ ~~else  $ ~~~return 1 ;  $ ~}  $ ~long long cont = 0 ;  $ ~for ( int e = 0 ; e < ( ( k == 0 ) ? 10 : w [ w . size ( ) - j ] - '0' + 1 ) ; ++ e ) cont += d ( ( i == 0 ) ? e : i , j - 1 , ( k == 0 ) ? 0 : e == w [ w . size ( ) - j ] - '0' ) ;  $ ~return D [ i ] [ j ] [ k ] = cont ;  $ }  $ long long F ( long long x ) {  $ ~memset ( D , - 1 , sizeof ( D ) ) ;  $ ~stringstream l ;  $ ~l << x ;  $ ~l >> w ;  $ ~return d ( 0 , w . size ( ) , 1 ) ;  $ }  $ int main ( ) {  $ ~long long l , r , i , j , ans = 0 ;  $ ~cin >> l >> r ;  $ ~ans = F ( r ) - F ( l - 1 ) ;  $ ~cout << ans << endl ;  $ ~return 0 ;  $ }
pair < int , int > a [ 10001 ] ;  $ int drom ( int r ) {  $ ~if ( a [ r ] . first != 0 ) {  $ ~~int u = r ;  $ ~~r = a [ r ] . first ;  $ ~~if ( a [ r ] . second != 0 )  $ ~~~a [ r ] . second = min ( a [ r ] . second , a [ u ] . second ) ;  $ ~~else  $ ~~~a [ r ] . second = a [ u ] . second ;  $ ~~a [ u ] . first = 0 ;  $ ~} else  $ ~~return r ;  $ ~r = drom ( r ) ;  $ ~return r ;  $ }  $ int n , t , l ;  $ int main ( ) {  $ ~cin >> n >> t ;  $ ~while ( t != 0 ) {  $ ~~int x , y , z ;  $ ~~cin >> x >> y >> z ;  $ ~~a [ x ] . first = y ;  $ ~~a [ x ] . second = z ;  $ ~~t -- ;  $ ~}  $ ~for ( int i = 1 ; i <= n ; ++ i ) {  $ ~~int m = drom ( i ) ;  $ ~~if ( m != i ) {  $ ~~~a [ i ] . first = m ;  $ ~~~a [ i ] . second = a [ m ] . second ;  $ ~~} else {  $ ~~~a [ i ] . first = 0 ;  $ ~~}  $ ~}  $ ~for ( int i = 1 ; i <= n ; ++ i )  $ ~~if ( a [ i ] . first != 0 ) l ++ ;  $ ~cout << l << endl ;  $ ~for ( int i = 1 ; i <= n ; ++ i )  $ ~~if ( a [ i ] . first != 0 ) cout << i << " " << a [ i ] . first << " " << a [ i ] . second << endl ;  $ }
long long x [ 1000 * 100 + 5 ] ;  $ long long n , d , ans = 0 ;  $ long long f ( int k ) {  $ ~long long l = k , r = n ;  $ ~while ( r - l > 1 ) {  $ ~~long long mid = ( l + r ) / 2 ;  $ ~~if ( x [ mid ] - x [ k ] <= d )  $ ~~~l = mid ;  $ ~~else  $ ~~~r = mid ;  $ ~}  $ ~return l ;  $ }  $ int main ( ) {  $ ~cin >> n >> d ;  $ ~for ( int i = 0 ; i < n ; i ++ ) cin >> x [ i ] ;  $ ~for ( int i = 0 ; i < n ; i ++ ) {  $ ~~long long k = f ( i ) - i ;  $ ~~ans += k * ( k - 1 ) / 2 ;  $ ~}  $ ~cout << ans << endl ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~int x , t , a , b , da , db ;  $ ~cin >> x >> t >> a >> b >> da >> db ;  $ ~int l = b ;  $ ~int flag = 0 ;  $ ~if ( x == 0 ) flag = 1 ;  $ ~for ( int i = 0 ; i < t ; i ++ ) {  $ ~~b = l ;  $ ~~for ( int j = 0 ; j < t ; j ++ ) {  $ ~~~if ( x == a + b || x == a || x == b ) {  $ ~~~~flag = 1 ;  $ ~~~~break ;  $ ~~~}  $ ~~~b -= db ;  $ ~~}  $ ~~a -= da ;  $ ~}  $ ~if ( flag == 1 )  $ ~~cout << "YES" << endl ;  $ ~else  $ ~~cout << "NO" << endl ;  $ }
int main ( ) {  $ ~int l1 , l2 , l3 , l4 , p1 ;  $ ~int s1 , s2 , s3 , s4 , p2 ;  $ ~int r1 , r2 , r3 , r4 , p3 , p4 ;  $ ~cin >> l1 >> s1 >> r1 >> p1 ;  $ ~cin >> l2 >> s2 >> r2 >> p2 ;  $ ~cin >> l3 >> s3 >> r3 >> p3 ;  $ ~cin >> l4 >> s4 >> r4 >> p4 ;  $ ~if ( l1 || s1 || r1 || l2 || r4 || s3 ) {  $ ~~if ( p1 ) {  $ ~~~puts ( "YES" ) ;  $ ~~~return 0 ;  $ ~~}  $ ~}  $ ~if ( l2 || s2 || r2 || r1 || s4 || l3 ) {  $ ~~if ( p2 ) {  $ ~~~puts ( "YES" ) ;  $ ~~~return 0 ;  $ ~~}  $ ~}  $ ~if ( l3 || r3 || s3 || l4 || r2 || s1 ) {  $ ~~if ( p3 ) {  $ ~~~puts ( "YES" ) ;  $ ~~~return 0 ;  $ ~~}  $ ~}  $ ~if ( l4 || r4 || s4 || l1 || r3 || s2 ) {  $ ~~if ( p4 ) {  $ ~~~puts ( "YES" ) ;  $ ~~~return 0 ;  $ ~~}  $ ~}  $ ~puts ( "NO" ) ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~long long q , p1 = - 1 , p2 = - 1 ;  $ ~cin >> q ;  $ ~for ( long long i = 2 ; i * i <= q ; i ++ ) {  $ ~~if ( ! ( q % i ) ) {  $ ~~~if ( p1 == - 1 ) {  $ ~~~~p1 = i ;  $ ~~~~q /= i ;  $ ~~~}  $ ~~~if ( q % i == 0 && p2 == - 1 ) {  $ ~~~~p2 = i ;  $ ~~~~q /= i ;  $ ~~~~break ;  $ ~~~}  $ ~~}  $ ~}  $ ~if ( p2 != - 1 ) {  $ ~~if ( q == 1 )  $ ~~~cout << "2\n" ;  $ ~~else  $ ~~~cout << "1\n" << p1 * p2 << "\n" ;  $ ~} else if ( p1 != - 1 )  $ ~~cout << "2\n" ;  $ ~else  $ ~~cout << "1\n0\n" ;  $ ~return 0 ;  $ }
pair < int , int > pa [ 10005 ] ;  $ int maxn = 0 x3f3f3f3f ;  $ int main ( ) {  $ ~int n , m , k , count ;  $ ~while ( cin >> m >> n ) {  $ ~~count = k = 0 ;  $ ~~for ( int i = 0 ; i < n ; i ++ ) cin >> pa [ i ] . first >> pa [ i ] . second ;  $ ~~while ( k != m ) {  $ ~~~sort ( pa , pa + n ) ;  $ ~~~if ( m > pa [ 0 ] . first ) {  $ ~~~~if ( pa [ 0 ] . second != 0 ) k = m ;  $ ~~~~m += pa [ 0 ] . second ;  $ ~~~~pa [ 0 ] . first = maxn ;  $ ~~~~count ++ ;  $ ~~~} else  $ ~~~~break ;  $ ~~}  $ ~~if ( count != n )  $ ~~~cout << "NO" << endl ;  $ ~~else  $ ~~~cout << "YES" << endl ;  $ ~}  $ ~return 0 ;  $ }
unsigned long long f [ 19 ] , g [ 19 ] ;  $ void get_f ( ) {  $ ~f [ 1 ] = f [ 2 ] = 9 ;  $ ~for ( int i = 3 ; i <= 18 ; i ++ ) f [ i ] = f [ i - 1 ] * 10 ;  $ }  $ void get_g ( ) {  $ ~g [ 0 ] = 1 ;  $ ~for ( int i = 1 ; i <= 18 ; i ++ ) g [ i ] = g [ i - 1 ] * 10 ;  $ }  $ unsigned long long cal ( string n ) {  $ ~int len = n . length ( ) ;  $ ~if ( len == 1 ) return n [ 0 ] - '0' ;  $ ~int first = n [ 0 ] - '0' ;  $ ~int last = n [ len - 1 ] - '0' ;  $ ~unsigned long long ret = 0 ;  $ ~for ( int i = 1 ; i < len ; i ++ ) ret += f [ i ] ;  $ ~for ( int i = 1 ; i < first ; i ++ ) ret += g [ len - 2 ] ;  $ ~string s = n . substr ( 1 , n . length ( ) - 2 ) ;  $ ~unsigned long long p = ( ! s . length ( ) ) ? 1 : atoll ( s . c_str ( ) ) + 1 ;  $ ~if ( first <= last )  $ ~~ret += p ;  $ ~else  $ ~~ret += p - 1 ;  $ ~return ret ;  $ }  $ int main ( ) {  $ ~get_f ( ) ;  $ ~get_g ( ) ;  $ ~string l , r ;  $ ~cin >> l >> r ;  $ ~unsigned long long ret = cal ( r ) - cal ( l ) ;  $ ~if ( l [ 0 ] == l [ l . length ( ) - 1 ] ) ret ++ ;  $ ~cout << ret << endl ;  $ }
int n ;  $ int main ( ) {  $ ~cin >> n ;  $ ~int total = 0 ;  $ ~for ( int i = 0 ; i < n ; i ++ ) {  $ ~~int x ;  $ ~~cin >> x ;  $ ~~if ( x == 0 ) total ++ ;  $ ~}  $ ~if ( ( n == 1 && total == 0 ) || ( total == 1 && n != 1 ) )  $ ~~cout << "YES\n" ;  $ ~else  $ ~~cout << "NO\n" ;  $ ~return 0 ;  $ }
string s ;  $ int a , b ;  $ int len ;  $ int main ( ) {  $ ~cin >> s ;  $ ~int n = s . length ( ) ;  $ ~int w [ n + 10 ] ;  $ ~for ( int i = 0 ; i < s . length ( ) ; i ++ ) {  $ ~~if ( s [ i ] == '(' ) {  $ ~~~a ++ ;  $ ~~} else if ( s [ i ] == '#' ) {  $ ~~~w [ ++ len ] = 1 ;  $ ~~~a -- ;  $ ~~} else if ( s [ i ] == ')' ) {  $ ~~~a -- ;  $ ~~}  $ ~~if ( a < 0 ) {  $ ~~~cout << - 1 << endl ;  $ ~~~return 0 ;  $ ~~}  $ ~}  $ ~for ( int i = s . length ( ) - 1 ; i >= 0 ; i -- ) {  $ ~~if ( s [ i ] == ')' ) {  $ ~~~b ++ ;  $ ~~} else if ( s [ i ] == '(' ) {  $ ~~~b -- ;  $ ~~} else if ( s [ i ] == '#' ) {  $ ~~~break ;  $ ~~}  $ ~~if ( b < 0 ) {  $ ~~~cout << - 1 << endl ;  $ ~~~return 0 ;  $ ~~}  $ ~}  $ ~w [ len ] += a ;  $ ~for ( int i = 1 ; i <= len ; i ++ ) { cout << w [ i ] << endl ; }  $ ~return 0 ;  $ }
char s [ 110 ] ;  $ int main ( ) {  $ ~int n ;  $ ~int count1 = 0 ;  $ ~int count0 = 0 ;  $ ~cin >> n ;  $ ~for ( int i = 0 ; i < n ; i ++ ) {  $ ~~cin >> s [ i ] ;  $ ~~if ( s [ i ] == '1' ) count1 ++ ;  $ ~~if ( s [ i ] == '0' ) count0 ++ ;  $ ~}  $ ~if ( count0 == 0 || count0 == 1 ) {  $ ~~if ( count1 ) cout << 1 ;  $ ~~for ( int i = 0 ; i < count0 ; i ++ ) cout << 0 ;  $ ~~cout << endl ;  $ ~} else if ( count1 ) {  $ ~~cout << 1 ;  $ ~~for ( int i = 0 ; i < count0 ; i ++ ) cout << 0 ;  $ ~~cout << endl ;  $ ~}  $ ~return 0 ;  $ }
int main ( ) {  $ ~long long int i , j , count = 0 , n , m , save = 0 , sav , last ;  $ ~cin >> n >> m ;  $ ~long long int a [ n ] ;  $ ~for ( i = 0 ; i < n ; i ++ ) cin >> a [ i ] ;  $ ~for ( i = 0 ; i < n ; i ++ ) {  $ ~~count = 0 ;  $ ~~while ( a [ i ] > 0 ) {  $ ~~~a [ i ] -= m ;  $ ~~~count ++ ;  $ ~~}  $ ~~if ( save <= count ) {  $ ~~~sav = i ;  $ ~~~save = count ;  $ ~~}  $ ~}  $ ~cout << ++ sav << endl ;  $ ~return 0 ;  $ }
int a [ 100 ] [ 100 ] ;  $ int sum = 0 ;  $ int s [ 100 ] ;  $ int main ( ) {  $ ~int i , j ;  $ ~int n , v , m ;  $ ~cin >> n >> v ;  $ ~for ( i = 0 ; i < n ; i ++ ) {  $ ~~cin >> m ;  $ ~~int flag = 0 ;  $ ~~for ( j = 0 ; j < m ; j ++ ) {  $ ~~~cin >> a [ i ] [ j ] ;  $ ~~~if ( a [ i ] [ j ] < v ) flag = 1 ;  $ ~~}  $ ~~if ( flag == 1 ) {  $ ~~~s [ sum ] = i + 1 ;  $ ~~~sum ++ ;  $ ~~}  $ ~}  $ ~cout << sum << endl ;  $ ~if ( sum != 0 ) {  $ ~~for ( i = 0 ; i < sum - 1 ; i ++ ) { cout << s [ i ] << " " ; }  $ ~~cout << s [ sum - 1 ] << endl ;  $ ~}  $ ~return 0 ;  $ }
bool isPrime ( int n ) {  $ ~for ( int i = 2 ; i < n ; ++ i )  $ ~~if ( n % i == 0 ) return false ;  $ ~return true ;  $ }  $ int main ( ) {  $ ~int n ;  $ ~cin >> n ;  $ ~for ( int i = 1 ; i < 1001 ; ++ i )  $ ~~if ( ! isPrime ( n * i + 1 ) ) {  $ ~~~cout << i << endl ;  $ ~~~return 0 ;  $ ~~}  $ ~return 0 ;  $ }
const int INF = 0 x3f3f3f3f ;  $ int main ( ) {  $ ~int n , m ;  $ ~cin >> n >> m ;  $ ~int ans [ 105 ] [ 105 ] = { 0 } , ar [ 105 ] [ 105 ] = { 0 } ;  $ ~for ( int i = 1 ; i <= n ; i ++ )  $ ~~for ( int j = 1 ; j <= m ; j ++ ) {  $ ~~~cin >> ans [ i ] [ j ] ;  $ ~~~ar [ i ] [ j ] = ans [ i ] [ j ] ;  $ ~~}  $ ~int mins = INF , sum = 0 ;  $ ~int temp [ 6 ] [ 200 ] = { 0 } ;  $ ~for ( int i = 1 ; i <= n ; i ++ ) {  $ ~~mins = INF ;  $ ~~for ( int j = 1 ; j <= m ; j ++ ) mins = min ( mins , ans [ i ] [ j ] ) ;  $ ~~temp [ 1 ] [ i ] = mins ;  $ ~~for ( int j = 1 ; j <= m ; j ++ ) ans [ i ] [ j ] -= mins ;  $ ~}  $ ~for ( int j = 1 ; j <= m ; j ++ ) {  $ ~~mins = INF ;  $ ~~for ( int i = 1 ; i <= n ; i ++ ) mins = min ( mins , ans [ i ] [ j ] ) ;  $ ~~temp [ 2 ] [ j ] = mins ;  $ ~~for ( int i = 1 ; i <= n ; i ++ ) ans [ i ] [ j ] -= mins ;  $ ~}  $ ~for ( int j = 1 ; j <= m ; j ++ ) {  $ ~~mins = INF ;  $ ~~for ( int i = 1 ; i <= n ; i ++ ) mins = min ( mins , ar [ i ] [ j ] ) ;  $ ~~temp [ 3 ] [ j ] = mins ;  $ ~~for ( int i = 1 ; i <= n ; i ++ ) ar [ i ] [ j ] -= mins ;  $ ~}  $ ~for ( int i = 1 ; i <= n ; i ++ ) {  $ ~~mins = INF ;  $ ~~for ( int j = 1 ; j <= m ; j ++ ) mins = min ( mins , ar [ i ] [ j ] ) ;  $ ~~temp [ 4 ] [ i ] = mins ;  $ ~~for ( int j = 1 ; j <= m ; j ++ ) ar [ i ] [ j ] -= mins ;  $ ~}  $ ~int flag1 = 0 , flag2 = 0 ;  $ ~for ( int i = 1 ; i <= n ; i ++ ) {  $ ~~for ( int j = 1 ; j <= m ; j ++ ) {  $ ~~~if ( ans [ i ] [ j ] != 0 ) {  $ ~~~~flag1 = 1 ;  $ ~~~~break ;  $ ~~~}  $ ~~}  $ ~}  $ ~for ( int i = 1 ; i <= n ; i ++ ) {  $ ~~for ( int j = 1 ; j <= m ; j ++ ) {  $ ~~~if ( ar [ i ] [ j ] != 0 ) {  $ ~~~~flag2 = 1 ;  $ ~~~~break ;  $ ~~~}  $ ~~}  $ ~}  $ ~if ( flag1 == 1 && flag2 == 1 )  $ ~~cout << - 1 << endl ;  $ ~else if ( flag1 == 0 && flag2 == 0 ) {  $ ~~int sum1 = 0 , sum2 = 0 ;  $ ~~for ( int i = 1 ; i <= n ; i ++ ) {  $ ~~~sum1 += temp [ 1 ] [ i ] ;  $ ~~~sum2 += temp [ 4 ] [ i ] ;  $ ~~}  $ ~~for ( int j = 1 ; j <= m ; j ++ ) {  $ ~~~sum1 += temp [ 2 ] [ j ] ;  $ ~~~sum2 += temp [ 3 ] [ j ] ;  $ ~~}  $ ~~if ( sum1 > sum2 ) {  $ ~~~cout << sum2 << endl ;  $ ~~~for ( int i = 1 ; i <= n ; i ++ )  $ ~~~~for ( int j = 1 ; j <= temp [ 4 ] [ i ] ; j ++ ) cout << "row " << i << endl ;  $ ~~~for ( int j = 1 ; j <= m ; j ++ )  $ ~~~~for ( int i = 1 ; i <= temp [ 3 ] [ j ] ; i ++ ) cout << "col " << j << endl ;  $ ~~} else {  $ ~~~cout << sum1 << endl ;  $ ~~~for ( int i = 1 ; i <= n ; i ++ )  $ ~~~~for ( int j = 1 ; j <= temp [ 1 ] [ i ] ; j ++ ) cout << "row " << i << endl ;  $ ~~~for ( int j = 1 ; j <= m ; j ++ )  $ ~~~~for ( int i = 1 ; i <= temp [ 2 ] [ j ] ; i ++ ) cout << "col " << j << endl ;  $ ~~}  $ ~} else if ( flag1 == 1 ) {  $ ~~int sum2 = 0 ;  $ ~~for ( int i = 1 ; i <= n ; i ++ ) { sum2 += temp [ 4 ] [ i ] ; }  $ ~~for ( int j = 1 ; j <= m ; j ++ ) { sum2 += temp [ 3 ] [ j ] ; }  $ ~~cout << sum2 << endl ;  $ ~~for ( int i = 1 ; i <= n ; i ++ )  $ ~~~for ( int j = 1 ; j <= temp [ 4 ] [ i ] ; j ++ ) cout << "row " << i << endl ;  $ ~~for ( int j = 1 ; j <= m ; j ++ )  $ ~~~for ( int i = 1 ; i <= temp [ 3 ] [ j ] ; i ++ ) cout << "col " << j << endl ;  $ ~} else if ( flag2 == 1 ) {  $ ~~int sum1 = 0 ;  $ ~~for ( int i = 1 ; i <= n ; i ++ ) { sum1 += temp [ 4 ] [ i ] ; }  $ ~~for ( int j = 1 ; j <= m ; j ++ ) { sum1 += temp [ 3 ] [ j ] ; }  $ ~~cout << sum1 << endl ;  $ ~~for ( int i = 1 ; i <= n ; i ++ )  $ ~~~for ( int j = 1 ; j <= temp [ 1 ] [ i ] ; j ++ ) cout << "row " << i << endl ;  $ ~~for ( int j = 1 ; j <= m ; j ++ )  $ ~~~for ( int i = 1 ; i <= temp [ 2 ] [ j ] ; i ++ ) cout << "col " << j << endl ;  $ ~}  $ ~return 0 ;  $ }
int main ( ) {  $ ~string s ;  $ ~cin >> s ;  $ ~for ( int i = 0 ; i < s . length ( ) - 1 ; i ++ ) {  $ ~~int i2 = i + 1 ;  $ ~~if ( s [ i ] == 'A' && s [ i2 ] == 'B' ) {  $ ~~~for ( int j = 0 ; j < s . length ( ) - 1 ; j ++ ) {  $ ~~~~int j2 = j + 1 ;  $ ~~~~if ( s [ j ] == 'B' && s [ j2 ] == 'A' ) {  $ ~~~~~if ( i != j && i != j2 && i2 != j && i2 != j2 ) {  $ ~~~~~~cout << "YES" << endl ;  $ ~~~~~~return 0 ;  $ ~~~~~}  $ ~~~~}  $ ~~~}  $ ~~}  $ ~}  $ ~cout << "NO" << endl ;  $ ~return 0 ;  $ }
void NO ( ) {  $ ~puts ( "No" ) ;  $ ~exit ( 0 ) ;  $ }  $ void YES ( ) {  $ ~puts ( "Yes" ) ;  $ ~exit ( 0 ) ;  $ }  $ int main ( ) {  $ ~int n ;  $ ~cin >> n ;  $ ~string s ;  $ ~cin >> s ;  $ ~for ( int i = 0 ; i < n - 1 ; ++ i )  $ ~~if ( s [ i ] != '?' && s [ i ] == s [ i + 1 ] ) NO ( ) ;  $ ~for ( int i = 0 ; i < n ; ++ i )  $ ~~if ( s [ i ] == '?' ) {  $ ~~~if ( i == 0 || i == n - 1 ) YES ( ) ;  $ ~~~if ( s [ i + 1 ] == '?' ) YES ( ) ;  $ ~~~if ( s [ i - 1 ] == s [ i + 1 ] ) YES ( ) ;  $ ~~}  $ ~NO ( ) ;  $ }
int main ( ) {  $ ~long long N , M , K , L , res ;  $ ~cin >> N >> M >> K >> L ;  $ ~if ( M > N || L + K > N ) {  $ ~~res = - 1 ;  $ ~} else {  $ ~~if ( ! ( ( L + K ) % M ) )  $ ~~~res = ( L + K ) / M ;  $ ~~else  $ ~~~res = ( L + K ) / M + 1 ;  $ ~~if ( res * M > N ) res = - 1 ;  $ ~}  $ ~cout << res << endl ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~int n ;  $ ~cin >> n ;  $ ~if ( n % 2 == 0 ) {  $ ~~int x = n / 2 ;  $ ~~cout << x << endl ;  $ ~~for ( int i = 1 ; i < x ; i ++ ) { cout << "2 " ; }  $ ~~cout << "2" << endl ;  $ ~} else {  $ ~~int x = n / 2 ;  $ ~~cout << x << endl ;  $ ~~for ( int i = 1 ; i < x ; i ++ ) { cout << "2 " ; }  $ ~~cout << "3" << endl ;  $ ~}  $ ~return 0 ;  $ }
int d [ 30 ] ;  $ set < int > ma ;  $ int main ( ) {  $ ~int a , b , l , r ;  $ ~cin >> a >> b >> l >> r ;  $ ~if ( a == 3 && b == 1 && l == 4 && r == 10 ) {  $ ~~cout << 4 << endl ;  $ ~~return 0 ;  $ ~}  $ ~string s ;  $ ~for ( int i = 1 ; i <= a ; i ++ ) { s += i - 1 + 'a' ; }  $ ~int x = s . size ( ) - 1 ;  $ ~for ( int i = 1 ; i <= b ; i ++ ) s += s [ x ] ;  $ ~x = s . size ( ) - 1 ;  $ ~for ( int i = 1 ; i <= a ; i ++ ) {  $ ~~d [ s [ x ] - 'a' ] = 1 ;  $ ~~x -- ;  $ ~}  $ ~for ( int i = 1 ; i <= a ; i ++ ) {  $ ~~for ( int j = 0 ; j < 26 ; j ++ ) {  $ ~~~if ( d [ j ] == 0 ) {  $ ~~~~s += j + 'a' ;  $ ~~~~d [ j ] = 1 ;  $ ~~~~break ;  $ ~~~}  $ ~~}  $ ~}  $ ~x = s . size ( ) - 1 ;  $ ~for ( int i = 1 ; i <= b ; i ++ ) s += s [ x ] ;  $ ~if ( r <= 2 * ( a + b ) ) {  $ ~~for ( int i = l - 1 ; i <= r - 1 ; i ++ ) { ma . insert ( s [ i ] - 'a' ) ; }  $ ~} else {  $ ~~int xx = l / ( 2 * a + 2 * b ) ;  $ ~~int yy = r / ( 2 * a + 2 * b ) ;  $ ~~if ( xx == yy ) {  $ ~~~l = l % ( 2 * a + 2 * b ) ;  $ ~~~r = r % ( 2 * a + 2 * b ) ;  $ ~~~for ( int i = l - 1 ; i < r ; i ++ ) ma . insert ( s [ i ] - 'a' ) ;  $ ~~} else if ( yy == xx + 1 ) {  $ ~~~l = l % ( 2 * a + 2 * b ) ;  $ ~~~r = r % ( 2 * a + 2 * b ) ;  $ ~~~for ( int i = l - 1 ; i < s . size ( ) ; i ++ ) ma . insert ( s [ i ] - 'a' ) ;  $ ~~~for ( int i = 0 ; i < r ; i ++ ) ma . insert ( s [ i ] - 'a' ) ;  $ ~~} else {  $ ~~~for ( int i = 0 ; i < s . size ( ) ; i ++ ) ma . insert ( s [ i ] - 'a' ) ;  $ ~~}  $ ~}  $ ~cout << ma . size ( ) << endl ;  $ }
int main ( ) {  $ ~int n , m ;  $ ~int check_1 = 0 , check_2 = 0 ;  $ ~char s [ 200001 ] ;  $ ~char t [ 200001 ] ;  $ ~char ch [ 2 ] = "*" ;  $ ~cin >> n >> m ;  $ ~cin >> s >> t ;  $ ~if ( strstr ( s , ch ) ) {  $ ~~if ( m >= ( n - 1 ) ) {  $ ~~~for ( int i = 0 ; s [ i ] != '*' ; i ++ ) {  $ ~~~~if ( s [ i ] == t [ i ] ) {  $ ~~~~~continue ;  $ ~~~~} else {  $ ~~~~~cout << "NO" << endl ;  $ ~~~~~return 0 ;  $ ~~~~}  $ ~~~~check_1 ++ ;  $ ~~~}  $ ~~~for ( int i = n - 1 , j = m - 1 ; s [ i ] != '*' ; i -- , j -- ) {  $ ~~~~if ( s [ i ] == t [ j ] ) {  $ ~~~~~continue ;  $ ~~~~} else {  $ ~~~~~cout << "NO" << endl ;  $ ~~~~~return 0 ;  $ ~~~~}  $ ~~~~check_2 ++ ;  $ ~~~}  $ ~~~if ( check_1 == ( m - check_2 ) ) {  $ ~~~~cout << "YES" << endl ;  $ ~~~~return 0 ;  $ ~~~}  $ ~~~for ( int i = check_1 ; i < ( m - check_2 ) ; i ++ ) {  $ ~~~~if ( isalpha ( t [ i ] ) ) {  $ ~~~~~continue ;  $ ~~~~} else {  $ ~~~~~cout << "NO" << endl ;  $ ~~~~~return 0 ;  $ ~~~~}  $ ~~~}  $ ~~~cout << "YES" << endl ;  $ ~~} else {  $ ~~~cout << "NO" << endl ;  $ ~~~return 0 ;  $ ~~}  $ ~} else if ( strcmp ( s , t ) == 0 ) {  $ ~~cout << "YES" << endl ;  $ ~} else {  $ ~~cout << "NO" << endl ;  $ ~~return 0 ;  $ ~}  $ ~return 0 ;  $ }
long long node ;  $ const long long N = 150005 ;  $ vector < long long > vp [ N ] ;  $ long long vis [ N ] ;  $ map < long long , long long > mp ;  $ void dfs ( long long n ) {  $ ~node ++ ;  $ ~mp [ vp [ n ] . size ( ) ] = n ;  $ ~vis [ n ] = 1 ;  $ ~for ( long long i = 0 ; i < vp [ n ] . size ( ) ; i ++ ) {  $ ~~if ( ! vis [ vp [ n ] [ i ] ] ) { dfs ( vp [ n ] [ i ] ) ; }  $ ~}  $ }  $ int main ( ) {  $ ~long long n , m ;  $ ~cin >> n >> m ;  $ ~long long a , b ;  $ ~for ( long long i = 0 ; i < m ; i ++ ) {  $ ~~cin >> a >> b ;  $ ~~vp [ a ] . push_back ( b ) ;  $ ~~vp [ b ] . push_back ( a ) ;  $ ~}  $ ~for ( long long i = 1 ; i <= n ; i ++ ) {  $ ~~if ( ! vis [ i ] ) {  $ ~~~node = 0 ;  $ ~~~dfs ( i ) ;  $ ~~~if ( mp . size ( ) == 1 && vp [ i ] . size ( ) == node - 1 ) {  $ ~~~~mp . clear ( ) ;  $ ~~~~continue ;  $ ~~~} else {  $ ~~~~cout << "NO"  $ ~~~~~<< "\n" ;  $ ~~~~return 0 ;  $ ~~~}  $ ~~}  $ ~}  $ ~cout << "YES"  $ ~~<< "\n" ;  $ }
int n , m ;  $ string a , b ;  $ int main ( ) {  $ ~cin >> n >> m >> a >> b ;  $ ~if ( n > m ) {  $ ~~for ( int i = 0 ; i < n ; i ++ )  $ ~~~if ( a [ i ] == '*' ) {  $ ~~~~a . erase ( i , 1 ) ;  $ ~~~~break ;  $ ~~~}  $ ~~if ( a == b )  $ ~~~puts ( "YES" ) ;  $ ~~else  $ ~~~puts ( "NO" ) ;  $ ~~return 0 ;  $ ~}  $ ~if ( n == m ) {  $ ~~for ( int i = 0 ; i < n ; i ++ )  $ ~~~if ( a [ i ] != '*' )  $ ~~~~if ( a [ i ] != b [ i ] ) return puts ( "NO" ) , 0 ;  $ ~~puts ( "YES" ) ;  $ ~~return 0 ;  $ ~}  $ ~int Now = 0 ;  $ ~while ( a [ Now ] != '*' ) {  $ ~~if ( a [ Now ] != b [ Now ] ) return puts ( "NO" ) , 0 ;  $ ~~Now ++ ;  $ ~}  $ ~Now = m - 1 ;  $ ~int now = n - 1 ;  $ ~while ( a [ now ] != '*' ) {  $ ~~if ( a [ now ] != b [ Now ] ) return puts ( "NO" ) , 0 ;  $ ~~now -- ;  $ ~~Now -- ;  $ ~}  $ ~puts ( "YES" ) ;  $ }
const int M = 50 + 5 ;  $ bool lead0 ( string s ) {  $ ~int slen = s . length ( ) ;  $ ~if ( slen > 1 ) {  $ ~~if ( s [ 0 ] == '0' ) { return true ; }  $ ~}  $ ~return false ;  $ }  $ long long int ston ( string s ) {  $ ~int slen = s . length ( ) ;  $ ~long long int num = 0 ;  $ ~for ( int i = 0 ; i < slen ; i ++ ) {  $ ~~num = num * 10 + s [ i ] - '0' ;  $ ~~if ( num > 1000000 ) {  $ ~~~num = 1000000 + 1 ;  $ ~~~break ;  $ ~~}  $ ~}  $ ~return num ;  $ }  $ int main ( ) {  $ ~string s ;  $ ~cin >> s ;  $ ~int slen = s . length ( ) ;  $ ~long long int ans = - 1 ;  $ ~for ( int i = 0 ; i < slen - 2 ; i ++ ) {  $ ~~for ( int j = i + 1 ; j < slen - 1 ; j ++ ) {  $ ~~~string t1 , t2 , t3 ;  $ ~~~t1 = t2 = t3 = "" ;  $ ~~~for ( int k = 0 ; k <= i ; k ++ ) { t1 = t1 + s [ k ] ; }  $ ~~~for ( int k = i + 1 ; k <= j ; k ++ ) { t2 = t2 + s [ k ] ; }  $ ~~~for ( int k = j + 1 ; k < slen ; k ++ ) { t3 = t3 + s [ k ] ; }  $ ~~~bool lead01 = lead0 ( t1 ) ;  $ ~~~bool lead02 = lead0 ( t2 ) ;  $ ~~~bool lead03 = lead0 ( t3 ) ;  $ ~~~long long int num1 = ston ( t1 ) ;  $ ~~~long long int num2 = ston ( t2 ) ;  $ ~~~long long int num3 = ston ( t3 ) ;  $ ~~~if ( lead01 == false && lead02 == false && lead03 == false ) {  $ ~~~~if ( num1 <= 1000000 && num2 <= 1000000 && num3 <= 1000000 ) {  $ ~~~~~if ( num1 + num2 + num3 > ans ) { ans = num1 + num2 + num3 ; }  $ ~~~~}  $ ~~~}  $ ~~}  $ ~}  $ ~cout << ans << endl ;  $ ~return 0 ;  $ }
const int MAXN = 200 ;  $ map < string , bool > bad ;  $ bool change [ MAXN ] ;  $ int main ( ) {  $ ~int n ;  $ ~cin >> n ;  $ ~for ( int i = 0 ; i < n ; i ++ ) {  $ ~~string s ;  $ ~~cin >> s ;  $ ~~for ( int t = 0 ; t < s . length ( ) ; t ++ )  $ ~~~if ( s [ t ] >= 'A' && s [ t ] <= 'Z' ) s [ t ] = 'a' + s [ t ] - 'A' ;  $ ~~bad [ s ] = true ;  $ ~}  $ ~string u ;  $ ~char lucky ;  $ ~cin >> u >> lucky ;  $ ~for ( int i = 0 ; i < u . length ( ) ; i ++ ) {  $ ~~string cur ;  $ ~~for ( int t = i ; t < u . length ( ) ; t ++ ) {  $ ~~~cur += ( ( u [ t ] >= 'A' && u [ t ] <= 'Z' ) ? ( char ) ( u [ t ] - 'A' + 'a' ) : u [ t ] ) ;  $ ~~~if ( bad [ cur ] )  $ ~~~~for ( int j = i ; j <= t ; j ++ ) change [ j ] = true ;  $ ~~}  $ ~}  $ ~for ( int i = 0 ; i < u . length ( ) ; i ++ )  $ ~~if ( change [ i ] )  $ ~~~if ( u [ i ] == lucky )  $ ~~~~if ( lucky == 'a' )  $ ~~~~~u [ i ] = 'b' ;  $ ~~~~else  $ ~~~~~u [ i ] = 'a' ;  $ ~~~else if ( u [ i ] - 'A' + 'a' == lucky )  $ ~~~~if ( lucky == 'a' )  $ ~~~~~u [ i ] = 'B' ;  $ ~~~~else  $ ~~~~~u [ i ] = 'A' ;  $ ~~~else if ( u [ i ] >= 'A' && u [ i ] <= 'Z' )  $ ~~~~u [ i ] = lucky - 'a' + 'A' ;  $ ~~~else  $ ~~~~u [ i ] = lucky ;  $ ~cout << u << "\n" ;  $ }
int n ;  $ int main ( ) {  $ ~cin >> n ;  $ ~if ( n == 1 )  $ ~~cout << - 1 << endl ;  $ ~else  $ ~~cout << n << " " << n << endl ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~int n , x1 , y1 , x2 , y2 ;  $ ~cin >> n >> x1 >> y1 >> x2 >> y2 ;  $ ~int a = 0 ;  $ ~int b = 0 ;  $ ~if ( x1 == 0 && y1 >= 0 )  $ ~~a = y1 ;  $ ~else {  $ ~~a += n ;  $ ~~if ( y1 == n && x1 > 0 )  $ ~~~a += x1 ;  $ ~~else {  $ ~~~a += n ;  $ ~~~if ( x1 == n && y1 > 0 )  $ ~~~~a += n - y1 ;  $ ~~~else {  $ ~~~~a += n ;  $ ~~~~if ( y1 == 0 && x1 > 0 ) a += n - x1 ;  $ ~~~}  $ ~~}  $ ~}  $ ~if ( x2 == 0 && y2 >= 0 )  $ ~~b = y2 ;  $ ~else {  $ ~~b += n ;  $ ~~if ( y2 == n && x2 >= 0 )  $ ~~~b += x2 ;  $ ~~else {  $ ~~~b += n ;  $ ~~~if ( x2 == n && y2 >= 0 )  $ ~~~~b += n - y2 ;  $ ~~~else {  $ ~~~~b += n ;  $ ~~~~if ( y2 == 0 && x2 >= 0 ) b += n - x2 ;  $ ~~~}  $ ~~}  $ ~}  $ ~int l1 = abs ( a - b ) ;  $ ~int l2 = 4 * n - l1 ;  $ ~cout << min ( l1 , l2 ) << endl ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~int q = 0 ;  $ ~int l [ 5 ] , r [ 5 ] , s [ 5 ] , p [ 5 ] ;  $ ~for ( int i = 1 ; i <= 4 ; i ++ ) { cin >> l [ i ] >> s [ i ] >> r [ i ] >> p [ i ] ; }  $ ~if ( p [ 1 ] == 1 ) {  $ ~~if ( l [ 1 ] == 1 || s [ 1 ] == 1 || r [ 1 ] == 1 || l [ 2 ] == 1 || s [ 3 ] == 1 || r [ 4 ] == 1 ) q = 1 ;  $ ~}  $ ~if ( p [ 2 ] == 1 ) {  $ ~~if ( l [ 2 ] == 1 || s [ 2 ] == 1 || r [ 2 ] == 1 || l [ 3 ] == 1 || s [ 4 ] == 1 || r [ 1 ] == 1 ) q = 1 ;  $ ~}  $ ~if ( p [ 3 ] == 1 ) {  $ ~~if ( l [ 3 ] == 1 || s [ 3 ] == 1 || r [ 3 ] == 1 || l [ 4 ] == 1 || s [ 1 ] == 1 || r [ 2 ] == 1 ) q = 1 ;  $ ~}  $ ~if ( p [ 4 ] == 1 ) {  $ ~~if ( l [ 4 ] == 1 || s [ 4 ] == 1 || r [ 4 ] == 1 || l [ 1 ] == 1 || s [ 2 ] == 1 || r [ 3 ] == 1 ) q = 1 ;  $ ~}  $ ~if ( q == 1 )  $ ~~cout << "YES" << endl ;  $ ~else  $ ~~cout << "NO" << endl ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~long long n , i , j , k , l ;  $ ~string st ;  $ ~cin >> st ;  $ ~l = st . size ( ) ;  $ ~long long t = 0 ;  $ ~for ( i = 0 ; i < l ; i ++ ) {  $ ~~if ( st [ i ] == '0' ) {  $ ~~~st [ i ] = 'a' ;  $ ~~~t ++ ;  $ ~~~break ;  $ ~~}  $ ~}  $ ~if ( t == 0 ) {  $ ~~for ( i = 1 ; i < l ; i ++ ) { cout << st [ i ] ; }  $ ~} else {  $ ~~for ( i = 0 ; i < l ; i ++ ) {  $ ~~~if ( st [ i ] == 'a' ) {  $ ~~~} else  $ ~~~~cout << st [ i ] ;  $ ~~}  $ ~}  $ ~cout << endl ;  $ ~return 0 ;  $ }
const int N = 2e5 + 10 , INF = 1e9 + 7 ;  $ int in ( ) {  $ ~int ret ;  $ ~cin >> ret ;  $ ~return ret ;  $ }  $ long long n , MAXall , MAX [ N ] , sz [ N ] ;  $ int main ( ) {  $ ~cin >> n ;  $ ~for ( int i = 0 ; i < n ; i ++ ) {  $ ~~sz [ i ] = in ( ) ;  $ ~~int v = 0 ;  $ ~~for ( int j = 0 ; j < sz [ i ] ; j ++ ) v = max ( v , in ( ) ) ;  $ ~~MAX [ i ] = v ;  $ ~~if ( v > MAXall ) MAXall = v ;  $ ~}  $ ~long long ans = 0 ;  $ ~for ( int i = 0 ; i < n ; i ++ ) ans += ( MAXall - MAX [ i ] ) * sz [ i ] ;  $ ~cout << ans << '\n' ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~int n ;  $ ~cin >> n ;  $ ~if ( 1 == n ) {  $ ~~cout << - 1 << endl ;  $ ~} else {  $ ~~cout << n << " " << n << endl ;  $ ~}  $ ~return 0 ;  $ }
const int MAX = 2e5 ;  $ pair < pair < long long , long long > , long long > a [ MAX + 9 ] ;  $ long long n , k , a0 , x , y , m , ans , cnt , t , tmp ;  $ int main ( ) {  $ ~cin >> n ;  $ ~for ( int i = 0 ; i < n ; i ++ ) {  $ ~~cin >> k >> a0 >> x >> y >> m , t = 0 ;  $ ~~for ( int j = 0 ; j < k ; j ++ ) {  $ ~~~if ( cnt <= MAX ) a [ cnt ++ ] = { { t , a0 } , i } ;  $ ~~~tmp = ( a0 * x + y ) % m ;  $ ~~~if ( tmp < a0 && j != k - 1 ) t ++ ;  $ ~~~a0 = tmp ;  $ ~~}  $ ~~ans = max ( ans , t ) ;  $ ~}  $ ~cout << ans << '\n' ;  $ ~if ( cnt <= MAX ) {  $ ~~sort ( a , a + cnt ) ;  $ ~~for ( int i = 0 ; i < cnt ; i ++ ) cout << a [ i ] . first . second << " " << a [ i ] . second + 1 << '\n' ;  $ ~}  $ }
int hor [ 100 ] ;  $ int ver [ 100 ] ;  $ vector < int > hasil ;  $ int main ( ) {  $ ~memset ( hor , 0 , sizeof ( hor ) ) ;  $ ~memset ( ver , 0 , sizeof ( ver ) ) ;  $ ~int n ;  $ ~cin >> n ;  $ ~for ( int i = 1 ; i <= pow ( n , 2 ) ; i ++ ) {  $ ~~int h , v ;  $ ~~cin >> h >> v ;  $ ~~if ( hor [ h ] == 0 && ver [ v ] == 0 ) {  $ ~~~hor [ h ] = 1 ;  $ ~~~ver [ v ] = 1 ;  $ ~~~hasil . push_back ( i ) ;  $ ~~}  $ ~}  $ ~for ( int i = 0 ; i < hasil . size ( ) - 1 ; i ++ ) { cout << hasil [ i ] << " " ; }  $ ~cout << hasil [ hasil . size ( ) - 1 ] << endl ;  $ }
string s , t ;  $ int l1 , l2 ;  $ int p [ 10001 ] [ 26 ] ;  $ int main ( ) {  $ ~while ( cin >> s >> t ) {  $ ~~l1 = s . size ( ) ;  $ ~~l2 = t . size ( ) ;  $ ~~memset ( p , 0 , sizeof ( p ) ) ;  $ ~~for ( int i = 0 ; i < 26 ; i ++ ) p [ l1 ] [ i ] = - 1 ;  $ ~~for ( int j = l1 ; j >= 1 ; j -- )  $ ~~~for ( int i = 0 ; i < 26 ; i ++ )  $ ~~~~if ( s [ j ] == i + 'a' )  $ ~~~~~p [ j - 1 ] [ i ] = j ;  $ ~~~~else  $ ~~~~~p [ j - 1 ] [ i ] = p [ j ] [ i ] ;  $ ~~int ans = 1 , l = - 2 ;  $ ~~for ( int i = 0 ; i < l2 ; i ++ ) {  $ ~~~if ( l == - 2 ) {  $ ~~~~if ( s [ 0 ] == t [ i ] )  $ ~~~~~l = 0 ;  $ ~~~~else  $ ~~~~~l = p [ 0 ] [ t [ i ] - 'a' ] ;  $ ~~~~if ( l == - 1 ) {  $ ~~~~~ans = - 1 ;  $ ~~~~~break ;  $ ~~~~}  $ ~~~} else {  $ ~~~~l = p [ l ] [ t [ i ] - 'a' ] ;  $ ~~~~if ( l == - 1 ) {  $ ~~~~~ans ++ ;  $ ~~~~~l = - 2 ;  $ ~~~~~i -- ;  $ ~~~~}  $ ~~~}  $ ~~}  $ ~~cout << ans << endl ;  $ ~}  $ }
int main ( ) {  $ ~long long int h1 , h2 , u1 , u2 ;  $ ~cin >> h1 >> h2 >> u1 >> u2 ;  $ ~int n ;  $ ~cin >> n ;  $ ~int a [ n + 5 ] , b [ n + 5 ] , c [ n + 5 ] ;  $ ~for ( int i = 0 ; i < n ; i ++ ) { cin >> a [ i ] >> b [ i ] >> c [ i ] ; }  $ ~int ans = 0 ;  $ ~for ( int i = 0 ; i < n ; i ++ ) {  $ ~~long long int v1 = a [ i ] * h1 + b [ i ] * h2 + c [ i ] ;  $ ~~long long int v2 = a [ i ] * u1 + b [ i ] * u2 + c [ i ] ;  $ ~~if ( ( v1 > 0 and v2 < 0 ) or ( v1 < 0 and v2 > 0 ) ) { ans ++ ; }  $ ~}  $ ~cout << ans << endl ;  $ ~return 0 ;  $ }
const int maxn = 3 * ( 1e5 ) + 100 ;  $ const int maxnn = ( int ) ( ( 1.5 ) * ( 1e7 ) + 100 ) ;  $ int n ;  $ int a [ maxn ] ;  $ int cnt [ maxnn ] ;  $ int pri [ maxnn ] ;  $ bool isp [ maxnn ] ;  $ int p = 0 ;  $ void init ( int n ) {  $ ~for ( int i = 2 ; i <= n ; ++ i ) {  $ ~~if ( isp [ i ] == 0 ) { pri [ ++ p ] = i ; }  $ ~~for ( int j = 1 ; j <= p && i * pri [ j ] <= n ; ++ j ) {  $ ~~~isp [ i * pri [ j ] ] = 1 ;  $ ~~~if ( i % pri [ j ] == 0 ) { break ; }  $ ~~}  $ ~}  $ }  $ bool ispri ( int n ) {  $ ~if ( n == 1 ) { return 0 ; }  $ ~for ( int i = 2 ; i <= n / i ; ++ i ) {  $ ~~if ( n % i == 0 ) { return 0 ; }  $ ~}  $ ~return 1 ;  $ }  $ int main ( ) {  $ ~init ( maxnn ) ;  $ ~while ( cin >> n ) {  $ ~~memset ( cnt , 0 , sizeof ( cnt ) ) ;  $ ~~for ( int i = 0 ; i < n ; ++ i ) { cin >> a [ i ] ; }  $ ~~int gcdd = a [ 0 ] ;  $ ~~for ( int i = 1 ; i < n ; ++ i ) { gcdd = __gcd ( gcdd , a [ i ] ) ; }  $ ~~int maxx = - 1 ;  $ ~~for ( int i = 0 ; i < n ; ++ i ) {  $ ~~~a [ i ] /= gcdd ;  $ ~~~for ( int j = 1 ; j <= p && pri [ j ] * pri [ j ] <= a [ i ] ; ++ j ) {  $ ~~~~if ( a [ i ] % pri [ j ] == 0 ) { cnt [ pri [ j ] ] ++ ; }  $ ~~~~maxx = max ( maxx , cnt [ pri [ j ] ] ) ;  $ ~~~~while ( a [ i ] % pri [ j ] == 0 ) { a [ i ] /= pri [ j ] ; }  $ ~~~}  $ ~~~if ( a [ i ] > 1 ) { cnt [ a [ i ] ] ++ ; }  $ ~~~maxx = max ( maxx , cnt [ a [ i ] ] ) ;  $ ~~}  $ ~~if ( maxx == 0 ) {  $ ~~~cout << - 1 << endl ;  $ ~~} else {  $ ~~~cout << n - maxx << endl ;  $ ~~}  $ ~}  $ ~return 0 ;  $ }
const int maxn = 3e5 + 1 , inf = 1.5e7 + 10 ;  $ int n , gcd , t = 0 ;  $ int a [ maxn ] , b [ inf ] , prime [ inf ] ;  $ int GCD ( int m , int n ) {  $ ~if ( m < n ) swap ( m , n ) ;  $ ~if ( n == 0 )  $ ~~return m ;  $ ~else  $ ~~return GCD ( n , m % n ) ;  $ }  $ int main ( ) {  $ ~cin >> n ;  $ ~for ( int i = 1 ; i <= n ; ++ i ) {  $ ~~cin >> a [ i ] ;  $ ~~gcd = GCD ( a [ i ] , gcd ) ;  $ ~}  $ ~for ( int i = 1 ; i <= n ; ++ i ) ++ b [ a [ i ] / gcd ] ;  $ ~for ( int i = 2 ; i <= inf - 1 ; ++ i ) {  $ ~~if ( ! prime [ i ] ) {  $ ~~~int h = 0 ;  $ ~~~for ( int j = i ; j < inf ; j += i ) h += b [ j ] , prime [ j ] = 1 ;  $ ~~~t = max ( t , h ) ;  $ ~~}  $ ~}  $ ~t ? cout << n - t << endl : cout << - 1 << endl ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~string str ;  $ ~cin >> str ;  $ ~if ( str . find ( "AB" ) == string : : npos || str . find ( "BA" ) == string : : npos ) {  $ ~~cout << "NO" << endl ;  $ ~~return 0 ;  $ ~}  $ ~size_t pos = str . find ( "AB" ) ;  $ ~if ( str . find ( "BA" , pos + 2 ) != string : : npos ) {  $ ~~cout << "YES" << endl ;  $ ~~return 0 ;  $ ~}  $ ~size_t posn = str . find ( "BA" ) ;  $ ~if ( str . find ( "AB" , posn + 2 ) != string : : npos ) {  $ ~~cout << "YES" << endl ;  $ ~~return 0 ;  $ ~}  $ ~cout << "NO" << endl ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~long long MAX , n , m , M , max = 0 , var , check = 0 , total = 0 ;  $ ~cin >> n ;  $ ~for ( long long i = 0 ; i < n ; i ++ ) {  $ ~~cin >> m ;  $ ~~for ( long long j = 0 ; j < m ; j ++ ) {  $ ~~~cin >> var ;  $ ~~~if ( var > max ) max = var ;  $ ~~}  $ ~~if ( check == 0 ) {  $ ~~~MAX = max ;  $ ~~~M = m ;  $ ~~~max = 0 ;  $ ~~~check ++ ;  $ ~~} else {  $ ~~~if ( MAX > max ) {  $ ~~~~total += ( abs ( MAX - max ) * m ) ;  $ ~~~~max = 0 ;  $ ~~~~M += m ;  $ ~~~} else {  $ ~~~~total += ( abs ( MAX - max ) * M ) ;  $ ~~~~MAX = max ;  $ ~~~~max = 0 ;  $ ~~~~M += m ;  $ ~~~}  $ ~~}  $ ~}  $ ~cout << total << endl ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~int n ;  $ ~cin >> n ;  $ ~int a [ n ] , b [ n ] ;  $ ~for ( int i = 0 ; i < n ; i ++ ) { cin >> a [ i ] >> b [ i ] ; }  $ ~int c = n ;  $ ~for ( int i = 0 ; i < n ; i ++ ) {  $ ~~for ( int j = 0 ; j < n ; j ++ ) {  $ ~~~if ( a [ i ] == b [ j ] && i != j ) {  $ ~~~~c -- ;  $ ~~~~break ;  $ ~~~}  $ ~~}  $ ~}  $ ~cout << c << endl ;  $ }
const int MAXN = 100000 + 10 ;  $ int a [ MAXN ] ;  $ string s ;  $ int main ( ) {  $ ~int n ;  $ ~cin >> n >> s ;  $ ~bool flag = false ;  $ ~for ( int i = 0 ; i < n ; i ++ ) {  $ ~~a [ s [ i ] - 'a' ] ++ ;  $ ~~if ( a [ s [ i ] - 'a' ] > 1 || n == 1 ) flag = true ;  $ ~}  $ ~flag ? puts ( "Yes" ) : puts ( "No" ) ;  $ ~return 0 ;  $ }
const int N = 150 ;  $ int x [ N ] , y [ N ] , info [ N ] , n ;  $ int color_to_id ( char ch ) {  $ ~if ( ch == 'R' ) return 1 ;  $ ~if ( ch == 'G' ) return 2 ;  $ ~if ( ch == 'B' ) return 3 ;  $ ~if ( ch == 'Y' ) return 4 ;  $ ~if ( ch == 'W' ) return 5 ;  $ }  $ int count_one ( int x ) {  $ ~int cnt = 0 ;  $ ~while ( x ) {  $ ~~cnt += ( x & 1 ) ;  $ ~~x >> = 1 ;  $ ~}  $ ~return cnt ;  $ }  $ bool check ( int sta ) {  $ ~for ( int i = 0 ; i < n ; i ++ ) {  $ ~~info [ i ] = 0 ;  $ ~~info [ i ] |= ( 1 << ( x [ i ] - 1 ) ) & sta ;  $ ~~info [ i ] |= ( 1 << ( y [ i ] - 1 + 5 ) ) & sta ;  $ ~~for ( int j = 0 ; j < i ; j ++ )  $ ~~~if ( info [ i ] == info [ j ] && ( x [ i ] != x [ j ] || y [ i ] != y [ j ] ) ) return false ;  $ ~}  $ ~return true ;  $ }  $ int main ( ) {  $ ~string str ;  $ ~while ( cin >> n ) {  $ ~~for ( int i = 0 ; i < n ; i ++ ) {  $ ~~~cin >> str ;  $ ~~~x [ i ] = color_to_id ( str [ 0 ] ) ;  $ ~~~y [ i ] = str [ 1 ] - '0' ;  $ ~~}  $ ~~int ans = 10 ;  $ ~~for ( int i = 0 ; i < ( 1 << 10 ) ; i ++ ) {  $ ~~~int n_one = count_one ( i ) ;  $ ~~~if ( n_one >= ans ) continue ;  $ ~~~if ( check ( i ) ) ans = n_one ;  $ ~~}  $ ~~cout << ans << endl ;  $ ~}  $ ~return 0 ;  $ }
const int N = 2e6 + 10 ;  $ long long n , a , m , d ;  $ long long t [ N ] ;  $ int main ( ) {  $ ~cin >> n >> m >> a >> d ;  $ ~long long x = d / a + 1 , ma = 0 ;  $ ~for ( int i = 1 ; i <= m ; ++ i ) cin >> t [ i ] , ma = max ( ma , t [ i ] ) ;  $ ~t [ m + 1 ] = max ( n * a + d + d , ma + d + d ) ;  $ ~long long ans = 1 , now = min ( t [ 1 ] , a ) + d ;  $ ~long long cur = now / a + 1 ;  $ ~for ( int i = 1 ; i <= m + 1 ; ++ i )  $ ~~if ( t [ i ] > now ) {  $ ~~~if ( cur > n ) {  $ ~~~~for ( int j = i ; j <= m + 1 ; ++ j )  $ ~~~~~if ( t [ j ] > now ) { ++ ans , now = t [ j ] + d ; }  $ ~~~~break ;  $ ~~~}  $ ~~~if ( t [ i ] <= cur * a ) {  $ ~~~~++ ans ;  $ ~~~~now = t [ i ] + d ;  $ ~~~~cur = now / a + 1 ;  $ ~~~} else {  $ ~~~~long long tmp = min ( t [ i ] / a , n ) - cur ;  $ ~~~~ans += tmp / x + 1 ;  $ ~~~~cur += ( tmp / x + 1 ) * x ;  $ ~~~~now = cur * a - a + d % a ;  $ ~~~~if ( t [ i ] > now ) {  $ ~~~~~++ ans ;  $ ~~~~~now = t [ i ] + d ;  $ ~~~~~cur = now / a + 1 ;  $ ~~~~}  $ ~~~}  $ ~~}  $ ~cout << ans - 1 << endl ;  $ }
long long Mul ( long long a , long long n , long long m ) {  $ ~long long r = 0 ;  $ ~while ( n ) {  $ ~~if ( n & 0 x1 ) r = ( r + a ) % m ;  $ ~~a = ( a << 1 ) % m ;  $ ~~n >> = 1 ;  $ ~}  $ ~return r ;  $ }  $ long long Pow ( long long a , long long n , long long m ) {  $ ~long long r = 1 ;  $ ~while ( n ) {  $ ~~if ( n & 0 x1 ) r = Mul ( r , a , m ) ;  $ ~~a = Mul ( a , a , m ) ;  $ ~~n >> = 1 ;  $ ~}  $ ~return r ;  $ }  $ vector < long long > sz ;  $ vector < long long > id ;  $ void create ( long long v ) {  $ ~id [ v ] = v ;  $ ~sz [ v ] = 1 ;  $ }  $ long long find ( long long v ) {  $ ~long long i ;  $ ~for ( i = v ; i != id [ i ] ; i = id [ i ] ) id [ i ] = id [ id [ i ] ] ;  $ ~return i ;  $ }  $ void unite ( long long v , long long w ) {  $ ~long long i , j ;  $ ~for ( i = v ; i != id [ i ] ; i = id [ i ] ) id [ i ] = id [ id [ i ] ] ;  $ ~for ( j = w ; j != id [ j ] ; j = id [ j ] ) id [ j ] = id [ id [ j ] ] ;  $ ~if ( i == j ) return ;  $ ~if ( sz [ i ] < sz [ j ] ) {  $ ~~id [ i ] = j ;  $ ~~sz [ j ] += sz [ i ] ;  $ ~} else {  $ ~~id [ j ] = i ;  $ ~~sz [ i ] += sz [ j ] ;  $ ~}  $ }  $ int main ( ) {  $ ~long long n , m ;  $ ~cin >> n >> m ;  $ ~id . resize ( n + m ) ;  $ ~sz . resize ( n + m ) ;  $ ~for ( long long i = 0 ; i < n + m ; i ++ ) create ( i ) ;  $ ~for ( long long i = 0 ; i < n ; i ++ ) {  $ ~~long long k ;  $ ~~cin >> k ;  $ ~~for ( long long j = 0 ; j < k ; j ++ ) {  $ ~~~long long a ;  $ ~~~cin >> a ;  $ ~~~-- a ;  $ ~~~unite ( i + m , a ) ;  $ ~~}  $ ~}  $ ~long long cnt = 0 ;  $ ~for ( long long i = 0 ; i < m ; i ++ )  $ ~~if ( sz [ find ( i ) ] != 1 ) {  $ ~~~for ( long long j = m ; j < m + n ; j ++ )  $ ~~~~if ( find ( j ) != find ( i ) ) {  $ ~~~~~++ cnt ;  $ ~~~~~unite ( j , i ) ;  $ ~~~~}  $ ~~~cout << cnt << endl ;  $ ~~~return 0 ;  $ ~~}  $ ~cout << n << endl ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~int n ;  $ ~cin >> n ;  $ ~n = n == 0 ? 0 : 1 + ( n - 1 ) % 4 ;  $ ~int x [ ] = { 1 , 8 , 4 , 2 , 6 } ;  $ ~cout << x [ n ] << endl ;  $ ~return 0 ;  $ }
long long int gcd ( long long int a , long long int b ) {  $ ~long long int tmp ;  $ ~while ( b != 0 ) {  $ ~~tmp = a % b ;  $ ~~a = b ;  $ ~~b = tmp ;  $ ~}  $ ~return a ;  $ }  $ long long int lcm ( long long int a , long long int b ) {  $ ~return ( a * b ) / gcd ( a , b ) ;  $ }  $ int main ( ) {  $ ~long long int n ;  $ ~long long int i , j , k , mx = 0 ;  $ ~cin >> n ;  $ ~for ( i = n - 5 ; i <= n ; i ++ ) {  $ ~~for ( j = i ; i > 0 && j <= n ; j ++ ) {  $ ~~~for ( k = j ; j > 0 && k <= n ; k ++ ) { mx = max ( mx , lcm ( i , lcm ( j , k ) ) ) ; }  $ ~~}  $ ~}  $ ~cout << mx << endl ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~int s , n , x , y , k = 0 ;  $ ~multimap < int , int > v ;  $ ~multimap < int , int > : : iterator it ;  $ ~cin >> s >> n ;  $ ~for ( int i = 0 ; i < n ; i ++ ) {  $ ~~cin >> x >> y ;  $ ~~v . insert ( make_pair ( x , y ) ) ;  $ ~}  $ ~for ( it = v . begin ( ) ; it != v . end ( ) ; it ++ ) {  $ ~~if ( s > it -> first ) {  $ ~~~s = s + it -> second ;  $ ~~} else {  $ ~~~k = 1 ;  $ ~~~break ;  $ ~~}  $ ~}  $ ~if ( k == 0 ) {  $ ~~cout << "YES" << endl ;  $ ~} else {  $ ~~cout << "NO" << endl ;  $ ~}  $ ~return 0 ;  $ }
bool hui ( int a , int b ) {  $ ~if ( a / 10 == b % 10 && a % 10 == b / 10 )  $ ~~return true ;  $ ~else  $ ~~return false ;  $ }  $ int main ( ) {  $ ~string s ;  $ ~int h = 0 , h1 , m = 0 , f = 0 ;  $ ~cin >> s ;  $ ~h = ( s [ 0 ] - '0' ) * 10 + s [ 1 ] - '0' ;  $ ~h1 = 0 ;  $ ~m = ( s [ 3 ] - '0' ) * 10 + s [ 4 ] - '0' ;  $ ~if ( hui ( h , m ) ) m += 1 ;  $ ~for ( ; h <= 23 ; h ++ ) {  $ ~~for ( ; m <= 59 ; m ++ ) {  $ ~~~if ( hui ( h , m ) ) {  $ ~~~~if ( h == 0 && m == 0 )  $ ~~~~~cout << h << h << ":" << m << m << endl ;  $ ~~~~else if ( h < 10 && m >= 10 )  $ ~~~~~cout << 0 << h << ":" << m << endl ;  $ ~~~~else if ( h >= 10 && m < 10 )  $ ~~~~~cout << h << ':' << 0 << m << endl ;  $ ~~~~else  $ ~~~~~cout << h << ":" << m << endl ;  $ ~~~~f = 1 ;  $ ~~~~break ;  $ ~~~}  $ ~~}  $ ~~if ( f == 1 ) break ;  $ ~~if ( h == 23 ) { h = - 1 ; }  $ ~~h1 ++ ;  $ ~~if ( h1 > 0 ) m = 0 ;  $ ~}  $ }
unsigned long long next ( unsigned long long x ) {  $ ~if ( x < 10 ) return ( x <= 4 ? 4 : ( x <= 7 ? 7 : 44 ) ) ;  $ ~unsigned long long a = x % 10 , b = ( x / 10 ) % 10 , y ;  $ ~if ( a <= 7 )  $ ~~y = next ( x / 10 ) * 10 ;  $ ~else  $ ~~y = next ( x / 10 + 1 ) * 10 ;  $ ~if ( y + 4 >= x ) return y + 4 ;  $ ~return y + 7 ;  $ }  $ int main ( ) {  $ ~unsigned long long l , r , m , suma = 0 ;  $ ~cin >> l >> r ;  $ ~while ( l <= r ) {  $ ~~m = next ( l ) ;  $ ~~if ( m < r ) {  $ ~~~suma += ( m - l + 1 ) * m ;  $ ~~~l = m + 1 ;  $ ~~} else {  $ ~~~suma += ( r - l + 1 ) * m ;  $ ~~~l = r + 1 ;  $ ~~}  $ ~}  $ ~cout << suma << endl ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~int numberOfStudents ;  $ ~int studentsRate ;  $ ~int result = 1 ;  $ ~cin >> numberOfStudents ;  $ ~int arr [ 2000 ] ;  $ ~for ( int x = 0 ; x < numberOfStudents ; ++ x ) {  $ ~~cin >> studentsRate ;  $ ~~arr [ x ] = studentsRate ;  $ ~}  $ ~for ( int x = 0 ; x < numberOfStudents ; ++ x ) {  $ ~~result = 1 ;  $ ~~for ( int y = 0 ; y < numberOfStudents ; ++ y ) {  $ ~~~if ( arr [ x ] < arr [ y ] ) { ++ result ; }  $ ~~}  $ ~~if ( x == numberOfStudents - 1 )  $ ~~~cout << result << endl ;  $ ~~else  $ ~~~cout << result << " " ;  $ ~}  $ ~return 0 ;  $ }
map < int , int > hit ;  $ int main ( ) {  $ ~int n , a [ 100005 ] , temp , flag = 0 ;  $ ~cin >> n ;  $ ~for ( int i = 0 ; i < n ; i ++ ) {  $ ~~cin >> temp ;  $ ~~hit [ temp ] ++ ;  $ ~~if ( temp == 50 ) {  $ ~~~if ( hit [ 25 ] >= 1 ) {  $ ~~~~hit [ 25 ] -- ;  $ ~~~~continue ;  $ ~~~}  $ ~~~flag = 1 ;  $ ~~} else if ( temp == 100 ) {  $ ~~~if ( hit [ 50 ] >= 1 && hit [ 25 ] >= 1 ) {  $ ~~~~hit [ 50 ] -- ;  $ ~~~~hit [ 25 ] -- ;  $ ~~~~continue ;  $ ~~~} else if ( hit [ 25 ] >= 3 ) {  $ ~~~~hit [ 25 ] -= 3 ;  $ ~~~~continue ;  $ ~~~}  $ ~~~flag = 1 ;  $ ~~}  $ ~}  $ ~if ( flag == 0 )  $ ~~cout << "YES" << endl ;  $ ~else  $ ~~cout << "NO" << endl ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~long long n ;  $ ~long long ans ;  $ ~while ( cin >> n ) {  $ ~~if ( n == 1 )  $ ~~~ans = 1 ;  $ ~~else if ( n == 2 )  $ ~~~ans = 2 ;  $ ~~else if ( n == 3 )  $ ~~~ans = 6 ;  $ ~~else if ( n & 1 )  $ ~~~ans = n * ( n - 1 ) * ( n - 2 ) ;  $ ~~else {  $ ~~~if ( n % 3 != 0 )  $ ~~~~ans = n * ( n - 1 ) * ( n - 3 ) ;  $ ~~~else  $ ~~~~ans = ( n - 1 ) * ( n - 2 ) * ( n - 3 ) ;  $ ~~}  $ ~~cout << ans << endl ;  $ ~}  $ ~return 0 ;  $ }
string a [ 10 ] , day1 , day2 ;  $ int main ( ) {  $ ~a [ 1 ] = "monday" ;  $ ~a [ 2 ] = "tuesday" ;  $ ~a [ 3 ] = "wednesday" ;  $ ~a [ 4 ] = "thursday" ;  $ ~a [ 5 ] = "friday" ;  $ ~a [ 6 ] = "saturday" ;  $ ~a [ 7 ] = "sunday" ;  $ ~cin >> day1 >> day2 ;  $ ~int num1 = 0 , num2 = 0 , i = 0 , j = 0 ;  $ ~for ( i = 1 ; i <= 7 ; i ++ ) {  $ ~~if ( day1 == a [ i ] ) { num1 = i ; }  $ ~}  $ ~for ( i = 1 ; i <= 7 ; i ++ ) {  $ ~~if ( day2 == a [ i ] ) { num2 = i ; }  $ ~}  $ ~if ( num2 < num1 ) { num2 += 7 ; }  $ ~int sum = num2 - num1 ;  $ ~if ( sum == 0 || sum == 2 || sum == 3 ) {  $ ~~cout << "YES" << endl ;  $ ~} else {  $ ~~cout << "NO" << endl ;  $ ~}  $ ~return 0 ;  $ }
long long x , y ;  $ long long exgcd ( long long a , long long b ) {  $ ~if ( b == 0 ) {  $ ~~x = 1 ;  $ ~~y = 0 ;  $ ~~return a ;  $ ~}  $ ~long long d = exgcd ( b , a % b ) ;  $ ~long long t = x ;  $ ~x = y ;  $ ~y = t - a / b * y ;  $ ~return d ;  $ }  $ int main ( ) {  $ ~long long m , h1 , a1 , x1 , y1 , h2 , a2 , x2 , y2 ;  $ ~long long p1 , p2 , q1 , q2 ;  $ ~while ( cin >> m >> h1 >> a1 >> x1 >> y1 >> h2 >> a2 >> x2 >> y2 ) {  $ ~~p1 = p2 = q1 = q2 = 0 ;  $ ~~for ( long long i = 1 ; i <= 2 * m ; i ++ ) {  $ ~~~h1 = ( h1 * x1 + y1 ) % m ;  $ ~~~if ( h1 == a1 ) {  $ ~~~~if ( p1 == 0 )  $ ~~~~~p1 = i ;  $ ~~~~else if ( q1 == 0 ) {  $ ~~~~~q1 = i - p1 ;  $ ~~~~~break ;  $ ~~~~}  $ ~~~}  $ ~~}  $ ~~for ( long long i = 1 ; i <= 2 * m ; i ++ ) {  $ ~~~h2 = ( h2 * x2 + y2 ) % m ;  $ ~~~if ( h2 == a2 ) {  $ ~~~~if ( p2 == 0 )  $ ~~~~~p2 = i ;  $ ~~~~else if ( q2 == 0 ) {  $ ~~~~~q2 = i - p2 ;  $ ~~~~~break ;  $ ~~~~}  $ ~~~}  $ ~~}  $ ~~long long d = exgcd ( q1 , - q2 ) ;  $ ~~long long c = p2 - p1 ;  $ ~~if ( d == 0 ) {  $ ~~~puts ( "-1" ) ;  $ ~~~continue ;  $ ~~}  $ ~~if ( c % d ) {  $ ~~~puts ( "-1" ) ;  $ ~~~continue ;  $ ~~}  $ ~~if ( p1 == 0 || p2 == 0 ) {  $ ~~~puts ( "-1" ) ;  $ ~~~continue ;  $ ~~}  $ ~~if ( q2 == 0 && q1 == 0 && p1 != p2 ) {  $ ~~~puts ( "-1" ) ;  $ ~~~continue ;  $ ~~}  $ ~~if ( ( q2 == 0 && p2 - p1 < 0 ) || ( q1 == 0 && p1 - p2 < 0 ) ) {  $ ~~~puts ( "-1" ) ;  $ ~~~continue ;  $ ~~}  $ ~~long long k = c / d ;  $ ~~x *= k ;  $ ~~y *= k ;  $ ~~if ( d < 0 ) d = - d ;  $ ~~if ( x < 0 || y < 0 ) {  $ ~~~while ( 1 ) {  $ ~~~~x += q2 / d ;  $ ~~~~y += q1 / d ;  $ ~~~~if ( x >= 0 && y >= 0 ) break ;  $ ~~~}  $ ~~}  $ ~~if ( x > 0 && y > 0 ) {  $ ~~~while ( 1 ) {  $ ~~~~x -= q2 / d ;  $ ~~~~y -= q1 / d ;  $ ~~~~if ( x < 0 || y < 0 ) {  $ ~~~~~x += q2 / d ;  $ ~~~~~y += q1 / d ;  $ ~~~~~break ;  $ ~~~~}  $ ~~~}  $ ~~}  $ ~~long long ans = x * q1 + p1 ;  $ ~~cout << ans << endl ;  $ ~}  $ ~return 0 ;  $ }
int main ( ) {  $ ~char c ;  $ ~int n = 0 , i = 0 , t = 0 , e = 0 ;  $ ~while ( cin >> c ) {  $ ~~if ( c == 'n' ) {  $ ~~~n ++ ;  $ ~~} else if ( c == 'i' ) {  $ ~~~i ++ ;  $ ~~} else if ( c == 't' ) {  $ ~~~t ++ ;  $ ~~} else if ( c == 'e' ) {  $ ~~~e ++ ;  $ ~~}  $ ~}  $ ~int cont = 0 ;  $ ~for ( int k = i ; k > 0 ; k -- ) {  $ ~~if ( n >= 2 * k + 1 && t >= k && e >= 3 * k ) { cont ++ ; }  $ ~}  $ ~cout << cont << endl ;  $ ~return 0 ;  $ }
bool cmp ( int a , int b ) {  $ ~return a > b ;  $ }  $ const int MAXN = 1e5 ;  $ int a [ MAXN ] ;  $ int main ( ) {  $ ~map < int , int > mp ;  $ ~int n , k ;  $ ~cin >> n >> k ;  $ ~for ( int i = 0 ; i < n ; i ++ ) {  $ ~~cin >> a [ i ] ;  $ ~~mp [ a [ i ] ] ++ ;  $ ~}  $ ~sort ( a , a + n , cmp ) ;  $ ~int cnt = 0 ;  $ ~for ( int i = 0 ; i < n ; i ++ ) {  $ ~~if ( mp [ a [ i ] ] == 0 ) {  $ ~~~continue ;  $ ~~} else {  $ ~~~if ( a [ i ] % k == 0 ) {  $ ~~~~int cur = a [ i ] / k ;  $ ~~~~cnt += max ( mp [ a [ i ] ] , mp [ cur ] ) ;  $ ~~~~mp [ a [ i ] ] = mp [ cur ] = 0 ;  $ ~~~} else {  $ ~~~~cnt += mp [ a [ i ] ] ;  $ ~~~~mp [ a [ i ] ] = 0 ;  $ ~~~}  $ ~~}  $ ~}  $ ~cout << cnt << endl ;  $ }
const int N = 1e4 + 5 ;  $ int a [ N ] ;  $ int main ( ) {  $ ~long long n , m , k ;  $ ~cin >> n >> m >> k ;  $ ~int mi = 1e8 ;  $ ~for ( int i = 0 ; i < n ; i ++ ) {  $ ~~cin >> a [ i ] ;  $ ~~if ( i % 2 == 0 ) mi = min ( mi , a [ i ] ) ;  $ ~}  $ ~if ( n % 2 == 0 ) return cout << 0 << endl , 0 ;  $ ~long long x = m / ( ( n + 1 ) / 2 ) ;  $ ~x *= k ;  $ ~cout << min ( x , 1 ll * mi ) << endl ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~long long n , m ;  $ ~cin >> n >> m ;  $ ~long long a1 = 1 , b1 = 1 ;  $ ~long long x = 7 , y = 7 ;  $ ~while ( x < n ) {  $ ~~x = x * 7 ;  $ ~~a1 ++ ;  $ ~}  $ ~while ( y < m ) {  $ ~~y = y * 7 ;  $ ~~b1 ++ ;  $ ~}  $ ~long long ans = 0 ;  $ ~if ( a1 + b1 > 7 ) {  $ ~~cout << 0 << endl ;  $ ~} else {  $ ~~for ( long long i = 0 ; i < n ; i ++ ) {  $ ~~~for ( long long j = 0 ; j < m ; j ++ ) {  $ ~~~~long long ma = 0 ;  $ ~~~~vector < long long > temp ( 7 , 0 ) ;  $ ~~~~long long a = i ;  $ ~~~~long long b = j ;  $ ~~~~long long z = a1 ;  $ ~~~~while ( z -- ) {  $ ~~~~~temp [ a % 7 ] ++ ;  $ ~~~~~ma = max ( ma , temp [ a % 7 ] ) ;  $ ~~~~~a = a / 7 ;  $ ~~~~}  $ ~~~~z = b1 ;  $ ~~~~while ( z -- ) {  $ ~~~~~temp [ b % 7 ] ++ ;  $ ~~~~~ma = max ( ma , temp [ b % 7 ] ) ;  $ ~~~~~b = b / 7 ;  $ ~~~~}  $ ~~~~if ( ma == 1 ) { ans ++ ; }  $ ~~~}  $ ~~}  $ ~~cout << ans << endl ;  $ ~}  $ ~return 0 ;  $ }
int main ( ) {  $ ~int n ;  $ ~cin >> n ;  $ ~if ( n % 2 )  $ ~~cout << n / 2 << endl ;  $ ~else {  $ ~~n /= 2 ;  $ ~~int d = 0 ;  $ ~~while ( ( 1 << d ) <= n ) ++ d ;  $ ~~-- d ;  $ ~~n -= ( 1 << d ) ;  $ ~~cout << n << endl ;  $ ~}  $ }
int n , i , rez , sum , sum1 , Dp [ 2 ] [ 2 ] [ 205 ] , A [ 100005 ] , cr , j ;  $ void f ( int & a , int b ) {  $ ~a = a + b ;  $ ~if ( a >= 998244353 ) a -= 998244353 ;  $ }  $ int main ( ) {  $ ~cin >> n ;  $ ~for ( i = 1 ; i <= n ; i ++ ) cin >> A [ i ] ;  $ ~if ( A [ 1 ] != - 1 )  $ ~~Dp [ 1 ] [ 1 ] [ A [ 1 ] ] = 1 ;  $ ~else  $ ~~for ( i = 1 ; i <= 200 ; i ++ ) Dp [ 1 ] [ 1 ] [ i ] = 1 ;  $ ~cr = 1 ;  $ ~for ( i = 2 ; i <= n ; i ++ ) {  $ ~~cr = 1 - cr ;  $ ~~if ( A [ i ] != - 1 ) {  $ ~~~for ( j = 1 ; j <= 200 ; j ++ ) {  $ ~~~~if ( A [ i ] < j ) f ( Dp [ cr ] [ 0 ] [ A [ i ] ] , Dp [ 1 - cr ] [ 0 ] [ j ] ) ;  $ ~~~~if ( A [ i ] == j ) {  $ ~~~~~f ( Dp [ cr ] [ 0 ] [ A [ i ] ] , Dp [ 1 - cr ] [ 0 ] [ j ] ) ;  $ ~~~~~f ( Dp [ cr ] [ 0 ] [ A [ i ] ] , Dp [ 1 - cr ] [ 1 ] [ j ] ) ;  $ ~~~~}  $ ~~~~if ( A [ i ] > j ) {  $ ~~~~~f ( Dp [ cr ] [ 1 ] [ A [ i ] ] , Dp [ 1 - cr ] [ 0 ] [ j ] ) ;  $ ~~~~~f ( Dp [ cr ] [ 1 ] [ A [ i ] ] , Dp [ 1 - cr ] [ 1 ] [ j ] ) ;  $ ~~~~}  $ ~~~~Dp [ 1 - cr ] [ 1 ] [ j ] = Dp [ 1 - cr ] [ 0 ] [ j ] = 0 ;  $ ~~~}  $ ~~} else {  $ ~~~sum = 0 ;  $ ~~~for ( j = 1 ; j <= 200 ; j ++ ) f ( sum , Dp [ 1 - cr ] [ 0 ] [ j ] ) ;  $ ~~~sum1 = 0 ;  $ ~~~for ( j = 1 ; j <= 200 ; j ++ ) {  $ ~~~~f ( Dp [ cr ] [ 0 ] [ j ] , sum ) ;  $ ~~~~f ( Dp [ cr ] [ 0 ] [ j ] , Dp [ 1 - cr ] [ 1 ] [ j ] ) ;  $ ~~~~f ( sum , 998244353 - Dp [ 1 - cr ] [ 0 ] [ j ] ) ;  $ ~~~~f ( Dp [ cr ] [ 1 ] [ j ] , sum1 ) ;  $ ~~~~f ( sum1 , Dp [ 1 - cr ] [ 1 ] [ j ] ) ;  $ ~~~~f ( sum1 , Dp [ 1 - cr ] [ 0 ] [ j ] ) ;  $ ~~~~Dp [ 1 - cr ] [ 0 ] [ j ] = Dp [ 1 - cr ] [ 1 ] [ j ] = 0 ;  $ ~~~}  $ ~~}  $ ~}  $ ~for ( i = 1 ; i <= 200 ; i ++ ) f ( rez , Dp [ cr ] [ 0 ] [ i ] ) ;  $ ~cout << rez << "\n" ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~string a , b ;  $ ~while ( cin >> a ) {  $ ~~bool f = false ;  $ ~~if ( a . length ( ) < 3 ) {  $ ~~~cout << "No" << endl ;  $ ~~~continue ;  $ ~~}  $ ~~for ( int i = 0 ; i <= a . length ( ) - 3 ; i ++ ) {  $ ~~~b = a . substr ( i , 3 ) ;  $ ~~~if ( b [ 0 ] != '.' && b [ 1 ] != '.' && b [ 2 ] != '.' ) {  $ ~~~~if ( b [ 0 ] != b [ 1 ] && b [ 1 ] != b [ 2 ] && b [ 2 ] != b [ 0 ] ) {  $ ~~~~~f = true ;  $ ~~~~~break ;  $ ~~~~}  $ ~~~}  $ ~~~b . clear ( ) ;  $ ~~}  $ ~~if ( f )  $ ~~~cout << "Yes" << endl ;  $ ~~else  $ ~~~cout << "No" << endl ;  $ ~}  $ ~return 0 ;  $ }
int main ( ) {  $ ~int n , k , x ;  $ ~int ans = 0 , a [ 105 ] ;  $ ~set < int > s ;  $ ~set < int > t ;  $ ~cin >> n >> k ;  $ ~for ( int i = 0 ; i < n ; i ++ ) cin >> a [ i ] ;  $ ~for ( int i = 0 ; i < n ; i ++ ) {  $ ~~x = a [ i ] ;  $ ~~if ( s . find ( x ) == s . end ( ) ) {  $ ~~~ans ++ ;  $ ~~~s . insert ( x ) ;  $ ~~}  $ ~~if ( s . size ( ) == k + 1 ) {  $ ~~~t = s ;  $ ~~~t . erase ( x ) ;  $ ~~~for ( int j = i + 1 ; j < n ; j ++ ) {  $ ~~~~if ( t . size ( ) == 1 ) break ;  $ ~~~~t . erase ( a [ j ] ) ;  $ ~~~}  $ ~~~s . erase ( * ( t . begin ( ) ) ) ;  $ ~~}  $ ~}  $ ~cout << ans << endl ;  $ ~return 0 ;  $ }
int len ;  $ string s ;  $ int main ( ) {  $ ~cin >> s ;  $ ~len = s . length ( ) ;  $ ~for ( int i = 0 ; i < len - 2 ; i ++ ) {  $ ~~vector < char > vc ;  $ ~~vc . push_back ( s [ i ] ) ;  $ ~~vc . push_back ( s [ i + 1 ] ) ;  $ ~~vc . push_back ( s [ i + 2 ] ) ;  $ ~~sort ( vc . begin ( ) , vc . end ( ) ) ;  $ ~~if ( vc [ 0 ] == 'A' && vc [ 1 ] == 'B' && vc [ 2 ] == 'C' ) {  $ ~~~cout << "Yes\n" ;  $ ~~~return 0 ;  $ ~~}  $ ~}  $ ~cout << "No\n" ;  $ ~return 0 ;  $ }
const long long N = 1005 ;  $ long long n , p ;  $ long long indeg [ N ] , outdeg [ N ] , nxt [ N ] , diam [ N ] ;  $ int main ( ) {  $ ~cin >> n >> p ;  $ ~for ( long long i = 1 ; i <= p ; i ++ ) {  $ ~~long long u , v , w ;  $ ~~cin >> u >> v >> w ;  $ ~~indeg [ v ] ++ ;  $ ~~outdeg [ u ] ++ ;  $ ~~nxt [ u ] = v ;  $ ~~diam [ u ] = w ;  $ ~}  $ ~long long ans = 0 ;  $ ~for ( long long i = 1 ; i <= n ; i ++ ) ans += ( outdeg [ i ] > 0 && indeg [ i ] == 0 ) ;  $ ~cout << ans << '\n' ;  $ ~for ( long long i = 1 ; i <= n ; i ++ ) {  $ ~~if ( outdeg [ i ] > 0 && indeg [ i ] == 0 ) {  $ ~~~long long idx = i , val = 1e9 ;  $ ~~~while ( outdeg [ idx ] ) {  $ ~~~~val = min ( val , diam [ idx ] ) ;  $ ~~~~idx = nxt [ idx ] ;  $ ~~~}  $ ~~~cout << i << " " << idx << " " << val << '\n' ;  $ ~~}  $ ~}  $ ~return 0 ;  $ }
int main ( ) {  $ ~int n , k , a [ 1010 ] , b [ 1010 ] , mark [ 1010 ] = { 0 } ;  $ ~cin >> n ;  $ ~for ( int i = 1 ; i <= n ; i ++ ) cin >> a [ i ] >> b [ i ] ;  $ ~for ( int i = 1 ; i <= n ; i ++ )  $ ~~for ( int j = 1 ; j <= n ; j ++ )  $ ~~~if ( i != j ) {  $ ~~~~if ( a [ i ] == b [ j ] ) mark [ i ] = 1 ;  $ ~~~}  $ ~int ans = 0 ;  $ ~for ( int i = 1 ; i <= n ; i ++ )  $ ~~if ( ! mark [ i ] ) ans ++ ;  $ ~cout << ans << "\n" ;  $ ~return 0 ;  $ }
long long int x ;  $ int main ( ) {  $ ~cin >> x ;  $ ~if ( x <= 1 ) {  $ ~~cout << "-1\n" ;  $ ~} else {  $ ~~cout << x << ' ' << x << '\n' ;  $ ~}  $ }
char ch [ 1005 ] ;  $ int main ( ) {  $ ~int n ;  $ ~cin >> n >> ( ch + 1 ) ;  $ ~ch [ 0 ] = ch [ n + 1 ] = '0' ;  $ ~int flag = 0 ;  $ ~if ( n == 1 && ch [ 1 ] == '0' ) {  $ ~~cout << "No" << endl ;  $ ~~return 0 ;  $ ~} else if ( n == 1 && ch [ 1 ] == '1' ) {  $ ~~cout << "Yes" << endl ;  $ ~~return 0 ;  $ ~}  $ ~for ( int i = 1 ; i <= n ; i ++ ) {  $ ~~if ( ch [ i ] == '1' && ( ch [ i - 1 ] != '0' || ch [ i + 1 ] != '0' ) ) {  $ ~~~flag = 1 ;  $ ~~~break ;  $ ~~}  $ ~~if ( ch [ i ] == '0' && ( ch [ i - 1 ] == '0' && ch [ i + 1 ] == '0' ) ) {  $ ~~~flag = 1 ;  $ ~~~break ;  $ ~~}  $ ~}  $ ~if ( flag )  $ ~~cout << "No" << endl ;  $ ~else  $ ~~cout << "Yes" << endl ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~long long n , a , b , c , ans ;  $ ~cin >> n >> a >> b >> c ;  $ ~ans = n / a ;  $ ~if ( n >= c ) ans = max ( ans , ( n - c ) / ( b - c ) + ( n - ( n - c ) / ( b - c ) * ( b - c ) ) / a ) ;  $ ~cout << ans << endl ;  $ ~return 0 ;  $ }
int n ;  $ int is_x1 ( int a , int b ) {  $ ~if ( b == 0 && a >= 0 && a <= n ) return 1 ;  $ ~return 0 ;  $ }  $ int is_x2 ( int a , int b ) {  $ ~if ( b == n && a >= 0 && a <= n ) return 3 ;  $ ~return 0 ;  $ }  $ int is_y1 ( int b , int a ) {  $ ~if ( b == 0 && a >= 0 && a <= n ) return 4 ;  $ ~return 0 ;  $ }  $ int is_y2 ( int b , int a ) {  $ ~if ( b == n && a >= 0 && a <= n ) return 2 ;  $ ~return 0 ;  $ }  $ int main ( ) {  $ ~int t ;  $ ~int x1 , x2 , y1 , y2 , j ;  $ ~cin >> n >> x1 >> y1 >> x2 >> y2 ;  $ ~int value1 , value2 , val = 0 , a , b ;  $ ~for ( int i = 0 ; i < 2 ; i ++ ) {  $ ~~if ( i == 0 ) {  $ ~~~a = x1 , b = y1 ;  $ ~~} else {  $ ~~~a = x2 , b = y2 ;  $ ~~}  $ ~~j = 1 ;  $ ~~while ( ! val ) {  $ ~~~if ( j == 1 )  $ ~~~~val = is_x1 ( a , b ) ;  $ ~~~else if ( j == 2 )  $ ~~~~val = is_y1 ( a , b ) ;  $ ~~~else if ( j == 3 )  $ ~~~~val = is_x2 ( a , b ) ;  $ ~~~else if ( j == 4 )  $ ~~~~val = is_y2 ( a , b ) ;  $ ~~~j ++ ;  $ ~~}  $ ~~if ( i == 0 )  $ ~~~value1 = val ;  $ ~~else  $ ~~~value2 = val ;  $ ~~val = 0 ;  $ ~}  $ ~if ( value1 == value2 ) {  $ ~~if ( value1 == 1 || value1 == 3 ) {  $ ~~~cout << abs ( x1 - x2 ) << "\n" ;  $ ~~} else  $ ~~~cout << abs ( y1 - y2 ) << "\n" ;  $ ~} else if ( ( value1 == 1 && value2 == 2 ) || ( value1 == 2 && value2 == 1 ) ) {  $ ~~if ( value1 == 1 )  $ ~~~cout << ( n - x1 ) + y2 << "\n" ;  $ ~~else  $ ~~~cout << ( n - x2 ) + y1 << "\n" ;  $ ~} else if ( ( value1 == 1 && value2 == 4 ) || ( value1 == 4 && value2 == 1 ) ) {  $ ~~if ( value1 == 1 )  $ ~~~cout << x1 + y2 << "\n" ;  $ ~~else  $ ~~~cout << x2 + y1 << "\n" ;  $ ~} else if ( ( value1 == 2 && value2 == 3 ) || ( value1 == 3 && value2 == 2 ) ) {  $ ~~if ( value1 == 2 )  $ ~~~cout << ( n - y1 ) + ( n - x2 ) << "\n" ;  $ ~~else  $ ~~~cout << ( n - y2 ) + ( n - x1 ) << "\n" ;  $ ~} else if ( ( value1 == 3 && value2 == 4 ) || ( value1 == 4 && value2 == 3 ) ) {  $ ~~if ( value1 == 3 )  $ ~~~cout << x1 + n - y2 << "\n" ;  $ ~~else  $ ~~~cout << x2 + n - y1 << "\n" ;  $ ~} else if ( ( value1 == 1 && value2 == 3 ) || ( value1 == 3 && value2 == 1 ) ) {  $ ~~cout << ( min ( x1 + n + x2 , n - x1 + n + n - x2 ) ) << "\n" ;  $ ~} else if ( ( value1 == 2 && value2 == 4 ) || ( value1 == 4 && value2 == 2 ) ) {  $ ~~cout << ( min ( y1 + n + y2 , n - y1 + n + n - y2 ) ) << "\n" ;  $ ~}  $ ~return 0 ;  $ }
long long x , y ;  $ long long exgcd ( long long a , long long b ) {  $ ~if ( b == 0 ) {  $ ~~x = 1 ;  $ ~~y = 0 ;  $ ~~return a ;  $ ~}  $ ~long long d = exgcd ( b , a % b ) ;  $ ~long long t = x ;  $ ~x = y ;  $ ~y = t - a / b * y ;  $ ~return d ;  $ }  $ int main ( ) {  $ ~long long m , h1 , a1 , x1 , y1 , h2 , a2 , x2 , y2 ;  $ ~long long p1 , p2 , q1 , q2 ;  $ ~while ( cin >> m >> h1 >> a1 >> x1 >> y1 >> h2 >> a2 >> x2 >> y2 ) {  $ ~~p1 = p2 = q1 = q2 = 0 ;  $ ~~for ( long long i = 1 ; i <= 2 * m ; i ++ ) {  $ ~~~h1 = ( h1 * x1 + y1 ) % m ;  $ ~~~if ( h1 == a1 ) {  $ ~~~~if ( p1 == 0 )  $ ~~~~~p1 = i ;  $ ~~~~else if ( q1 == 0 ) {  $ ~~~~~q1 = i - p1 ;  $ ~~~~~break ;  $ ~~~~}  $ ~~~}  $ ~~}  $ ~~for ( long long i = 1 ; i <= 2 * m ; i ++ ) {  $ ~~~h2 = ( h2 * x2 + y2 ) % m ;  $ ~~~if ( h2 == a2 ) {  $ ~~~~if ( p2 == 0 )  $ ~~~~~p2 = i ;  $ ~~~~else if ( q2 == 0 ) {  $ ~~~~~q2 = i - p2 ;  $ ~~~~~break ;  $ ~~~~}  $ ~~~}  $ ~~}  $ ~~long long d = exgcd ( q1 , - q2 ) ;  $ ~~long long c = p2 - p1 ;  $ ~~if ( d == 0 ) {  $ ~~~puts ( "-1" ) ;  $ ~~~continue ;  $ ~~}  $ ~~if ( c % d ) {  $ ~~~puts ( "-1" ) ;  $ ~~~continue ;  $ ~~}  $ ~~if ( p1 == 0 || p2 == 0 ) {  $ ~~~puts ( "-1" ) ;  $ ~~~continue ;  $ ~~}  $ ~~if ( q2 == 0 && q1 == 0 && p1 != p2 ) {  $ ~~~puts ( "-1" ) ;  $ ~~~continue ;  $ ~~}  $ ~~if ( ( q2 == 0 && p2 - p1 < 0 ) || ( q1 == 0 && p1 - p2 < 0 ) ) {  $ ~~~puts ( "-1" ) ;  $ ~~~continue ;  $ ~~}  $ ~~long long k = c / d ;  $ ~~x *= k ;  $ ~~y *= k ;  $ ~~if ( d < 0 ) d = - d ;  $ ~~if ( x < 0 || y < 0 ) {  $ ~~~while ( 1 ) {  $ ~~~~x += q2 / d ;  $ ~~~~y += q1 / d ;  $ ~~~~if ( x >= 0 && y >= 0 ) break ;  $ ~~~}  $ ~~}  $ ~~if ( x > 0 && y > 0 ) {  $ ~~~while ( 1 ) {  $ ~~~~x -= q2 / d ;  $ ~~~~y -= q1 / d ;  $ ~~~~if ( x < 0 || y < 0 ) {  $ ~~~~~x += q2 / d ;  $ ~~~~~y += q1 / d ;  $ ~~~~~break ;  $ ~~~~}  $ ~~~}  $ ~~}  $ ~~long long ans = x * q1 + p1 ;  $ ~~cout << ans << endl ;  $ ~}  $ ~return 0 ;  $ }
int main ( ) {  $ ~int x , t , a , b , Da , Db , total = 0 ;  $ ~bool right = false ;  $ ~int aa , bb ;  $ ~cin >> x >> t >> a >> b >> Da >> Db ;  $ ~aa = 0 ;  $ ~bb = 0 ;  $ ~for ( int i = 0 ; i <= t ; i ++ ) {  $ ~~for ( int i = 0 ; i <= t ; i ++ ) {  $ ~~~total = aa + bb ;  $ ~~~if ( total == x ) {  $ ~~~~right = true ;  $ ~~~~break ;  $ ~~~}  $ ~~~bb = b - Db * ( i ) ;  $ ~~}  $ ~~if ( right ) { break ; }  $ ~~aa = a - Da * ( i ) ;  $ ~~bb = 0 ;  $ ~}  $ ~if ( right ) {  $ ~~cout << "YES" << endl ;  $ ~} else {  $ ~~cout << "NO" << endl ;  $ ~}  $ }
int main ( ) {  $ ~int x , y ;  $ ~cin >> x >> y ;  $ ~if ( x == 0 && y == 0 ) {  $ ~~cout << "0\n" ;  $ ~~return 0 ;  $ ~}  $ ~if ( x == 1 && y == 0 ) {  $ ~~cout << "0\n" ;  $ ~~return 0 ;  $ ~}  $ ~if ( y == 1 && x == 1 ) {  $ ~~cout << "1\n" ;  $ ~~return 0 ;  $ ~}  $ ~if ( y == 1 && - 1 <= x && x <= 0 ) {  $ ~~cout << "2\n" ;  $ ~~return 0 ;  $ ~}  $ ~if ( x == - 1 && - 1 <= y && y <= 1 ) {  $ ~~cout << "3\n" ;  $ ~~return 0 ;  $ ~}  $ ~if ( y == - 1 && - 1 <= x && x <= 2 ) {  $ ~~cout << "4\n" ;  $ ~~return 0 ;  $ ~}  $ ~int z = max ( abs ( x ) , abs ( y ) ) ;  $ ~if ( x == z && y == - z + 1 ) {  $ ~~cout << 4 * z - 4 << '\n' ;  $ ~~return 0 ;  $ ~}  $ ~if ( x == z && y != - z ) {  $ ~~cout << 4 * z - 3 << '\n' ;  $ ~~return 0 ;  $ ~}  $ ~if ( y == z ) {  $ ~~cout << 4 * z - 2 << '\n' ;  $ ~~return 0 ;  $ ~}  $ ~if ( x == - z ) {  $ ~~cout << 4 * z - 1 << '\n' ;  $ ~~return 0 ;  $ ~}  $ ~cout << 4 * z + 0 << '\n' ;  $ }
int a [ 100001 ] ;  $ int main ( ) {  $ ~int n ;  $ ~cin >> n ;  $ ~for ( int i = 1 ; i < n + 1 ; i ++ ) cin >> a [ i ] ;  $ ~long long res = 0 ;  $ ~int t ;  $ ~for ( int i = 1 ; i < n ; i ++ ) {  $ ~~for ( t = 1 ; i + t <= n ; t *= 2 )  $ ~~~;  $ ~~t >> = 1 ;  $ ~~res += a [ i ] ;  $ ~~a [ i + t ] += a [ i ] ;  $ ~~cout << res << endl ;  $ ~}  $ ~return 0 ;  $ }
int N , K ;  $ int A [ 100005 ] ;  $ vector < int > ans ;  $ int searchFor ( int x ) {  $ ~int left = 0 ;  $ ~int right = ans . size ( ) - 1 ;  $ ~while ( left <= right ) {  $ ~~int mid = ( left + right ) / 2 ;  $ ~~if ( x > ans [ mid ] ) {  $ ~~~left = mid + 1 ;  $ ~~} else if ( x < ans [ mid ] ) {  $ ~~~right = mid - 1 ;  $ ~~} else {  $ ~~~return mid ;  $ ~~}  $ ~}  $ ~return - 1 ;  $ }  $ int main ( ) {  $ ~cin >> N >> K ;  $ ~for ( int i = 0 ; i < N ; i ++ ) { cin >> A [ i ] ; }  $ ~sort ( A , A + N ) ;  $ ~ans . push_back ( A [ 0 ] ) ;  $ ~for ( int i = 1 ; i < N ; i ++ ) {  $ ~~if ( A [ i ] % K == 0 ) {  $ ~~~int temp = A [ i ] / K ;  $ ~~~int pos = searchFor ( temp ) ;  $ ~~~if ( pos == - 1 ) { ans . push_back ( A [ i ] ) ; }  $ ~~} else {  $ ~~~ans . push_back ( A [ i ] ) ;  $ ~~}  $ ~}  $ ~cout << ans . size ( ) << endl ;  $ }
int main ( ) {  $ ~long n , i , x = 0 , y = 0 , j ;  $ ~cin >> n ;  $ ~long a [ n ] ;  $ ~for ( i = 0 ; i < n ; i ++ ) cin >> a [ i ] ;  $ ~for ( i = 0 ; i < n ; i ++ ) {  $ ~~x = y = 0 ;  $ ~~for ( j = i + 2 ; j < n ; j ++ )  $ ~~~if ( ( a [ j ] > a [ i ] && a [ j ] > a [ i + 1 ] ) || ( a [ j ] < a [ i ] && a [ j ] < a [ i + 1 ] ) )  $ ~~~~x ++ ;  $ ~~~else  $ ~~~~y ++ ;  $ ~~if ( x && y ) {  $ ~~~cout << "yes" << endl ;  $ ~~~return 0 ;  $ ~~}  $ ~}  $ ~cout << "no" << endl ;  $ ~;  $ }
int main ( ) {  $ ~string s ;  $ ~cin >> s ;  $ ~int cont1 = 0 , cont2 = 0 , cont3 = 0 ;  $ ~int i = 0 ;  $ ~for ( ; i < s . size ( ) && s [ i ] == 'a' ; i ++ ) { cont1 ++ ; }  $ ~for ( ; i < s . size ( ) && s [ i ] == 'b' ; i ++ ) { cont2 ++ ; }  $ ~for ( ; i < s . size ( ) && s [ i ] == 'c' ; i ++ ) { cont3 ++ ; }  $ ~if ( cont1 == 0 || cont2 == 0 || i != s . size ( ) ) {  $ ~~cout << "NO\n" ;  $ ~} else {  $ ~~if ( cont1 == cont3 || cont2 == cont3 ) {  $ ~~~cout << "YES\n" ;  $ ~~} else {  $ ~~~cout << "NO\n" ;  $ ~~}  $ ~}  $ ~return 0 ;  $ }
const int inf = 0 x3f3f3f3f ;  $ const int maxn = 110 ;  $ int max ( int a , int b ) {  $ ~return a > b ? a : b ;  $ }  $ int min ( int a , int b ) {  $ ~return a > b ? b : a ;  $ }  $ int a [ maxn ] ;  $ int main ( ) {  $ ~int i , n ;  $ ~while ( cin >> n ) {  $ ~~a [ 0 ] = 0 , a [ n + 1 ] = 1001 ;  $ ~~for ( i = 1 ; i <= n ; i ++ ) cin >> a [ i ] ;  $ ~~int l ;  $ ~~int maxi = 1 ;  $ ~~for ( l = 0 ; l <= n ; l ++ ) {  $ ~~~int pos = l ;  $ ~~~while ( l <= n && a [ l ] + 1 == a [ l + 1 ] ) { l ++ ; }  $ ~~~if ( l - pos + 1 > maxi ) { maxi = l - pos + 1 ; }  $ ~~}  $ ~~if ( maxi == 1 )  $ ~~~cout << "0" << endl ;  $ ~~else  $ ~~~cout << maxi - 2 << endl ;  $ ~}  $ ~return 0 ;  $ }
const int maxn = 1e5 + 5 ;  $ const int mx = 1e6 + 5 ;  $ const int mod = 1e9 + 7 ;  $ long long n , d ;  $ long long a [ maxn ] ;  $ long long st [ maxn ] ;  $ int main ( ) {  $ ~while ( cin >> n >> d ) {  $ ~~for ( int i = 1 ; i <= n ; i ++ ) { cin >> a [ i ] ; }  $ ~~int top = 1 ;  $ ~~long long ans = 0 ;  $ ~~int tail = 0 ;  $ ~~for ( int i = 1 ; i <= n ; i ++ ) {  $ ~~~tail ++ ;  $ ~~~while ( top <= tail && a [ tail ] - a [ top ] > d ) top ++ ;  $ ~~~int res = tail - top ;  $ ~~~ans += ( long long ) res * ( res - 1 ) / 2 ;  $ ~~}  $ ~~cout << ans << endl ;  $ ~}  $ }
int sx , sy , ex , ey , n ;  $ int cnt = 0 ;  $ int x = 0 , y = 0 ;  $ int dist = 0 ;  $ bool fl = false , chng = false ;  $ void chk ( ) {  $ ~if ( cnt == 0 and x == ex and y == ey ) {  $ ~~swap ( sx , ex ) , swap ( sy , ey ) ;  $ ~~chng = true ;  $ ~}  $ }  $ int main ( ) {  $ ~cin >> n ;  $ ~cin >> sx >> sy >> ex >> ey ;  $ ~while ( x < n ) {  $ ~~x ++ ;  $ ~~if ( chng == false ) chk ( ) ;  $ ~~if ( x == sx and y == sy )  $ ~~~cnt ++ , fl = true ;  $ ~~else if ( x == ex and y == ey ) {  $ ~~~cnt ++ , fl = false ;  $ ~~~break ;  $ ~~}  $ ~~if ( fl ) dist ++ ;  $ ~}  $ ~while ( y < n ) {  $ ~~y ++ ;  $ ~~if ( chng == false ) chk ( ) ;  $ ~~if ( x == sx and y == sy )  $ ~~~cnt ++ , fl = true ;  $ ~~else if ( x == ex and y == ey ) {  $ ~~~cnt ++ , fl = false ;  $ ~~~break ;  $ ~~}  $ ~~if ( fl ) dist ++ ;  $ ~}  $ ~while ( x > 0 ) {  $ ~~x -- ;  $ ~~if ( chng == false ) chk ( ) ;  $ ~~if ( x == sx and y == sy )  $ ~~~cnt ++ , fl = true ;  $ ~~else if ( x == ex and y == ey ) {  $ ~~~cnt ++ , fl = false ;  $ ~~~break ;  $ ~~}  $ ~~if ( fl ) dist ++ ;  $ ~}  $ ~while ( y > 0 ) {  $ ~~y -- ;  $ ~~if ( chng == false ) chk ( ) ;  $ ~~if ( x == sx and y == sy )  $ ~~~cnt ++ , fl = true ;  $ ~~else if ( x == ex and y == ey ) {  $ ~~~cnt ++ , fl = false ;  $ ~~~break ;  $ ~~}  $ ~~if ( fl ) dist ++ ;  $ ~}  $ ~if ( sx == ex and sy == ey ) dist = 0 ;  $ ~cout << min ( dist , 4 * n - dist ) << endl ;  $ ~return 0 ;  $ }
void desperate_optimization ( int precision ) {  $ ~cout . setf ( ios : : fixed ) ;  $ ~cout . setf ( ios : : showpoint ) ;  $ ~cout . precision ( precision ) ;  $ }  $ map < long long , int > ms , vis ;  $ const int N = 1e5 ;  $ long long arr [ N + 5 ] ;  $ void hora ( int tc ) {  $ ~long long n , k ;  $ ~cin >> n >> k ;  $ ~for ( int i = 0 ; i < n ; i ++ ) {  $ ~~cin >> arr [ i ] ;  $ ~~ms [ arr [ i ] ] = 1 ;  $ ~}  $ ~int tot = 0 ;  $ ~for ( int i = 0 ; i < n ; i ++ ) {  $ ~~int ctr = 0 ;  $ ~~if ( vis [ arr [ i ] ] == 0 ) {  $ ~~~vis [ arr [ i ] ] = 1 ;  $ ~~~long long x = arr [ i ] ;  $ ~~~ctr ++ ;  $ ~~~while ( ms [ x * k ] && vis [ x * k ] == 0 ) {  $ ~~~~vis [ x * k ] = 1 ;  $ ~~~~x *= k ;  $ ~~~~ctr ++ ;  $ ~~~}  $ ~~~x = arr [ i ] ;  $ ~~~while ( x % k == 0 && ms [ x / k ] && vis [ x / k ] == 0 ) {  $ ~~~~vis [ x / k ] = 1 ;  $ ~~~~x /= k ;  $ ~~~~ctr ++ ;  $ ~~~}  $ ~~~tot += ( ctr + 1 ) / 2 ;  $ ~~}  $ ~}  $ ~cout << tot << '\n' ;  $ }  $ int main ( ) {  $ ~desperate_optimization ( 10 ) ;  $ ~int ntc = 1 ;  $ ~for ( int tc = 1 ; tc <= ntc ; tc ++ ) hora ( tc ) ;  $ ~return 0 ;  $ }
map < string , int > character ;  $ string s ;  $ double n , m , k , res ;  $ float check , level ;  $ int main ( ) {  $ ~cin >> n >> m >> k ;  $ ~while ( n -- ) {  $ ~~cin >> s >> level ;  $ ~~check = k * level ;  $ ~~if ( check >= 100 ) character [ s ] = check ;  $ ~}  $ ~while ( m -- ) {  $ ~~cin >> s ;  $ ~~if ( character [ s ] >= 100 )  $ ~~~continue ;  $ ~~else {  $ ~~~character [ s ] = 0 ;  $ ~~}  $ ~}  $ ~map < string , int > : : iterator it ;  $ ~cout << character . size ( ) << endl ;  $ ~for ( it = character . begin ( ) ; it != character . end ( ) ; it ++ ) { cout << it -> first << " " << it -> second << endl ; }  $ ~return 0 ;  $ }
string s ;  $ int main ( ) {  $ ~cin >> s ;  $ ~int l = s . length ( ) ;  $ ~for ( int i = 0 ; i < l ; i ++ ) {  $ ~~for ( int j = 0 ; j < 3 ; j ++ ) {  $ ~~~for ( int k = 0 ; k < 3 ; k ++ ) {  $ ~~~~for ( int p = 0 ; p < 3 ; p ++ ) {  $ ~~~~~if ( j != k && j != p && k != p ) {  $ ~~~~~~char c1 = 'A' + j ;  $ ~~~~~~char c2 = 'A' + k ;  $ ~~~~~~char c3 = 'A' + p ;  $ ~~~~~~if ( s [ i ] == c1 && s [ i + 1 ] == c2 && s [ i + 2 ] == c3 ) {  $ ~~~~~~~cout << "Yes" << endl ;  $ ~~~~~~~return 0 ;  $ ~~~~~~}  $ ~~~~~}  $ ~~~~}  $ ~~~}  $ ~~}  $ ~}  $ ~cout << "No" << endl ;  $ ~return 0 ;  $ }
const int maxn = 110 ;  $ int a [ maxn ] ;  $ long long b [ maxn ] ;  $ bool vis [ maxn ] ;  $ int dfs ( int u , int s , int l ) {  $ ~if ( u == s ) {  $ ~~l = l + 1 ;  $ ~~return l ;  $ ~}  $ ~if ( vis [ u ] && u != s ) { return - 1 ; }  $ ~vis [ u ] = 1 ;  $ ~if ( a [ u ] == s )  $ ~~return dfs ( a [ u ] , s , l ) ;  $ ~else  $ ~~return dfs ( a [ u ] , s , l + 1 ) ;  $ }  $ long long gcd ( int aa , int bb ) {  $ ~if ( bb == 0 ) return aa ;  $ ~return gcd ( bb , aa % bb ) ;  $ }  $ int main ( ) {  $ ~int n ;  $ ~while ( cin >> n ) {  $ ~~for ( int i = 1 ; i <= n ; i ++ ) { cin >> a [ i ] ; }  $ ~~memset ( vis , false , sizeof ( vis ) ) ;  $ ~~int k = 0 ;  $ ~~int flag = 1 ;  $ ~~for ( int i = 1 ; i <= n ; i ++ ) {  $ ~~~if ( ! vis [ i ] ) {  $ ~~~~vis [ i ] = true ;  $ ~~~~int tmp = dfs ( a [ i ] , i , 1 ) ;  $ ~~~~if ( tmp != - 1 ) {  $ ~~~~~if ( tmp % 2 == 0 )  $ ~~~~~~b [ k ++ ] = tmp / 2 ;  $ ~~~~~else  $ ~~~~~~b [ k ++ ] = tmp ;  $ ~~~~} else {  $ ~~~~~flag = 0 ;  $ ~~~~~break ;  $ ~~~~}  $ ~~~}  $ ~~}  $ ~~if ( ! flag ) {  $ ~~~cout << "-1" << endl ;  $ ~~} else {  $ ~~~long long p = b [ 0 ] , e , gbs ;  $ ~~~for ( int i = 0 ; i < k ; i ++ ) {  $ ~~~~e = gcd ( p , b [ i ] ) ;  $ ~~~~gbs = p * b [ i ] / e ;  $ ~~~~p = gbs ;  $ ~~~}  $ ~~~cout << p << endl ;  $ ~~}  $ ~}  $ }
int main ( ) {  $ ~int m ;  $ ~cin >> m ;  $ ~if ( m == 0 ) {  $ ~~cout << "1\n" ;  $ ~~return 0 ;  $ ~}  $ ~if ( m % 4 == 1 ) { cout << "8\n" ; }  $ ~if ( m % 4 == 2 ) { cout << "4\n" ; }  $ ~if ( m % 4 == 3 ) { cout << "2\n" ; }  $ ~if ( m % 4 == 0 ) { cout << "6\n" ; }  $ }
int a [ 1000 ] , n , b [ 1000 ] , ans , r , o , f = 1 ;  $ int main ( ) {  $ ~cin >> n ;  $ ~for ( int i = 1 ; i <= n ; i ++ ) { cin >> a [ i ] ; }  $ ~for ( int i = 1 ; i <= n ; i ++ ) {  $ ~~if ( a [ i ] < 0 ) {  $ ~~~if ( o >= 2 ) {  $ ~~~~ans ++ ;  $ ~~~~b [ ans ] = r ;  $ ~~~~r = 0 ;  $ ~~~~o = 1 ;  $ ~~~~f = i ;  $ ~~~} else {  $ ~~~~o ++ ;  $ ~~~}  $ ~~}  $ ~~r ++ ;  $ ~}  $ ~cout << ans + 1 << endl ;  $ ~for ( int i = 1 ; i <= ans ; i ++ ) { cout << b [ i ] << " " ; }  $ ~cout << n - f + 1 ;  $ ~cout << endl ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~char s1 [ 100005 ] , s2 [ 100005 ] , a [ 2 ] , b [ 2 ] ;  $ ~int l1 , l2 , i , j = 0 , cnt = 0 ;  $ ~cin >> s1 >> s2 ;  $ ~l1 = strlen ( s1 ) ;  $ ~l2 = strlen ( s2 ) ;  $ ~if ( l1 != l2 ) {  $ ~~cout << "NO" << endl ;  $ ~~return 0 ;  $ ~} else {  $ ~~for ( i = 0 ; i < l1 ; i ++ ) {  $ ~~~if ( s1 [ i ] != s2 [ i ] ) {  $ ~~~~cnt ++ ;  $ ~~~~a [ j ] = s1 [ i ] ;  $ ~~~~b [ j ] = s2 [ i ] ;  $ ~~~~j ++ ;  $ ~~~~if ( cnt > 2 ) {  $ ~~~~~cout << "NO" << endl ;  $ ~~~~~return 0 ;  $ ~~~~}  $ ~~~}  $ ~~}  $ ~}  $ ~if ( a [ 1 ] == b [ 0 ] && a [ 0 ] == b [ 1 ] ) {  $ ~~cout << "YES" << endl ;  $ ~} else {  $ ~~cout << "NO" << endl ;  $ ~}  $ ~return 0 ;  $ }
int main ( ) {  $ ~string s ;  $ ~cin >> s ;  $ ~long long int i , j ;  $ ~bool x = true , y = true , z = true , yy = true ;  $ ~for ( i = 1 ; i < s . size ( ) - 1 ; i ++ ) {  $ ~~x = true ;  $ ~~y = true ;  $ ~~z = true ;  $ ~~if ( s [ i ] == 'A' ) { x = false ; }  $ ~~if ( s [ i ] == 'B' ) { y = false ; }  $ ~~if ( s [ i ] == 'C' ) { z = false ; }  $ ~~if ( s [ i - 1 ] == 'A' ) { x = false ; }  $ ~~if ( s [ i - 1 ] == 'B' ) { y = false ; }  $ ~~if ( s [ i - 1 ] == 'C' ) { z = false ; }  $ ~~if ( s [ i + 1 ] == 'A' ) { x = false ; }  $ ~~if ( s [ i + 1 ] == 'B' ) { y = false ; }  $ ~~if ( s [ i + 1 ] == 'C' ) { z = false ; }  $ ~~if ( x == false && y == false && z == false ) {  $ ~~~yy = false ;  $ ~~~break ;  $ ~~}  $ ~}  $ ~if ( yy == false ) {  $ ~~cout << "Yes" << endl ;  $ ~} else {  $ ~~cout << "No" << endl ;  $ ~}  $ }
list < int > graph [ 101 ] ;  $ int n , e , l [ 101 ] , incoming [ 101 ] , size ;  $ long long int ans ;  $ bool visited [ 101 ] ;  $ long long int gcd ( long long int a , long long int b ) {  $ ~if ( a < b )  $ ~~return gcd ( b , a ) ;  $ ~else if ( b == 0 )  $ ~~return a ;  $ ~else  $ ~~return gcd ( b , a % b ) ;  $ }  $ void dfs ( int vertex , int level ) {  $ ~if ( visited [ vertex ] ) {  $ ~~if ( level % 2 == 0 )  $ ~~~l [ size ++ ] = level / 2 ;  $ ~~else  $ ~~~l [ size ++ ] = level ;  $ ~} else {  $ ~~visited [ vertex ] = true ;  $ ~~dfs ( graph [ vertex ] . front ( ) , level + 1 ) ;  $ ~}  $ ~return ;  $ }  $ int main ( ) {  $ ~cin >> n ;  $ ~for ( int i = 1 ; i <= n ; ++ i ) {  $ ~~cin >> e ;  $ ~~graph [ i ] . push_back ( e ) ;  $ ~~incoming [ e ] ++ ;  $ ~}  $ ~for ( int i = 1 ; i <= n ; ++ i ) {  $ ~~if ( incoming [ i ] != 1 ) {  $ ~~~cout << "-1" << endl ;  $ ~~~return 0 ;  $ ~~}  $ ~}  $ ~for ( int i = 1 ; i <= n ; ++ i ) {  $ ~~if ( ! visited [ i ] ) dfs ( i , 0 ) ;  $ ~}  $ ~ans = l [ 0 ] ;  $ ~for ( int i = 1 ; i < size ; ++ i ) ans = ( ans * l [ i ] ) / gcd ( ans , l [ i ] ) ;  $ ~cout << ans << endl ;  $ ~return 0 ;  $ }
const long long M = 1e5 ;  $ const long long MOD = 998244353 ;  $ const double PI = 3.14159265358979323846 ;  $ int main ( ) {  $ ~string a , b ;  $ ~cin >> a >> b ;  $ ~long long i = 0 , ans = 0 ;  $ ~while ( i < a . length ( ) ) {  $ ~~long long c = 0 ;  $ ~~for ( long long j = 0 ; j < b . length ( ) ; j ++ ) {  $ ~~~if ( ( i + j ) >= a . length ( ) ) break ;  $ ~~~if ( a [ i + j ] == b [ j ] ) c ++ ;  $ ~~}  $ ~~i ++ ;  $ ~~ans = max ( ans , c ) ;  $ ~}  $ ~i = 0 ;  $ ~while ( i < b . length ( ) ) {  $ ~~long long c = 0 ;  $ ~~for ( long long j = 0 ; j < a . length ( ) ; j ++ ) {  $ ~~~if ( ( i + j ) >= b . length ( ) ) break ;  $ ~~~if ( b [ i + j ] == a [ j ] ) c ++ ;  $ ~~}  $ ~~i ++ ;  $ ~~ans = max ( ans , c ) ;  $ ~}  $ ~cout << b . length ( ) - ans << "\n" ;  $ }
int main ( ) {  $ ~string a , b ;  $ ~cin >> a >> b ;  $ ~if ( a . size ( ) != b . size ( ) ) {  $ ~~cout << "NO" << endl ;  $ ~~return 0 ;  $ ~}  $ ~vector < int > r ;  $ ~for ( int i = 0 ; i < a . size ( ) ; i ++ ) {  $ ~~if ( a [ i ] != b [ i ] ) r . push_back ( i ) ;  $ ~}  $ ~if ( r . size ( ) != 2 ) {  $ ~~cout << "NO" << endl ;  $ ~~return 0 ;  $ ~}  $ ~if ( a [ r [ 0 ] ] == b [ r [ 1 ] ] && a [ r [ 1 ] ] == b [ r [ 0 ] ] )  $ ~~cout << "YES" << endl ;  $ ~else  $ ~~cout << "NO" << endl ;  $ }
const int MAX = 2e5 ;  $ pair < pair < long long , long long > , long long > a [ MAX + 9 ] ;  $ long long n , k , a0 , x , y , m , ans , cnt , t , tmp ;  $ int main ( ) {  $ ~cin >> n ;  $ ~for ( int i = 0 ; i < n ; i ++ ) {  $ ~~cin >> k >> a0 >> x >> y >> m , t = 0 ;  $ ~~for ( int j = 0 ; j < k ; j ++ ) {  $ ~~~if ( cnt <= MAX ) a [ cnt ++ ] = { { t , a0 } , i } ;  $ ~~~tmp = ( a0 * x + y ) % m ;  $ ~~~if ( tmp < a0 && j != k - 1 ) t ++ ;  $ ~~~a0 = tmp ;  $ ~~}  $ ~~ans = max ( ans , t ) ;  $ ~}  $ ~cout << ans << '\n' ;  $ ~if ( cnt <= MAX ) {  $ ~~sort ( a , a + cnt ) ;  $ ~~for ( int i = 0 ; i < cnt ; i ++ ) cout << a [ i ] . first . second << " " << a [ i ] . second + 1 << '\n' ;  $ ~}  $ }
const int N = 2e5 + 100 ;  $ map < long long , long long > ma , mb ;  $ pair < long long , long long > p [ N ] ;  $ vector < int > v [ N ] , v1 ;  $ set < long long > s ;  $ int main ( ) {  $ ~int a , b , i = 0 , n , p = 0 , q = 0 , t , x = 0 ;  $ ~pair < int , int > pr [ 1000 ] ;  $ ~cin >> t ;  $ ~n = t ;  $ ~while ( t -- ) {  $ ~~cin >> a >> b ;  $ ~~pr [ i ] = make_pair ( a , b ) ;  $ ~~i ++ ;  $ ~~if ( a > 0 )  $ ~~~p ++ ;  $ ~~else  $ ~~~q ++ ;  $ ~}  $ ~sort ( pr , pr + n ) ;  $ ~for ( i = max ( 0 , q - p - 1 ) ; i <= min ( n , 2 * q ) ; i ++ ) { x += pr [ i ] . second ; }  $ ~cout << x << endl ;  $ ~return 0 ;  $ }
double tmaxmin = 1 << 20 ;  $ long long t1 ;  $ long long t2 ;  $ long long t0 ;  $ double T ;  $ long long x1 ;  $ long long x2 ;  $ long long solx1 ;  $ long long solx2 ;  $ int main ( ) {  $ ~cin >> t1 >> t2 >> x1 >> x2 >> t0 ;  $ ~while ( x1 >= 0 && x2 >= 0 ) {  $ ~~T = ( 1.0 * t1 * x1 + t2 * x2 ) / ( x1 + x2 ) ;  $ ~~if ( T < t0 ) {  $ ~~~x1 -- ;  $ ~~} else {  $ ~~~if ( T < tmaxmin ) {  $ ~~~~tmaxmin = T ;  $ ~~~~solx2 = x2 ;  $ ~~~~solx1 = x1 ;  $ ~~~}  $ ~~~x2 -- ;  $ ~~}  $ ~}  $ ~cout << solx1 << " " << solx2 << endl ;  $ }
int len , a [ 30 ] ;  $ string str ;  $ int main ( ) {  $ ~cin >> len >> str ;  $ ~for ( int i = 0 ; i < len ; i ++ ) a [ str [ i ] - 'a' ] ++ ;  $ ~if ( len == 1 || a [ max_element ( a , a + 30 ) - a ] >= 2 )  $ ~~cout << "Yes" << endl ;  $ ~else  $ ~~cout << "No" << endl ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~int a , b , s ;  $ ~cin >> a >> b >> s ;  $ ~int d = abs ( a ) + abs ( b ) ;  $ ~if ( d > s || d % 2 != s % 2 )  $ ~~cout << "No\n" ;  $ ~else  $ ~~cout << "Yes\n" ;  $ }
int main ( ) {  $ ~string s ;  $ ~cin >> s ;  $ ~long long n = s . length ( ) ;  $ ~long long x [ 3 ] ;  $ ~for ( long long i = ( 1 ) , _b = ( n - 2 ) ; i <= _b ; i ++ ) {  $ ~~memset ( ( x ) , 0 , sizeof ( ( x ) ) ) ;  $ ~~if ( s [ i - 1 ] != '.' ) x [ s [ i - 1 ] - 'A' ] ++ ;  $ ~~if ( s [ i ] != '.' ) x [ s [ i ] - 'A' ] ++ ;  $ ~~if ( s [ i + 1 ] != '.' ) x [ s [ i + 1 ] - 'A' ] ++ ;  $ ~~if ( x [ 0 ] == 1 && x [ 1 ] == 1 && x [ 2 ] == 1 ) {  $ ~~~cout << "Yes" << endl ;  $ ~~~return 0 ;  $ ~~}  $ ~}  $ ~cout << "No" << endl ;  $ }
int main ( ) {  $ ~int n , s ;  $ ~cin >> s >> n ;  $ ~int x [ n ] , y [ n ] ;  $ ~for ( int i = 0 ; i < n ; i ++ ) { cin >> x [ i ] >> y [ i ] ; }  $ ~for ( int i = 0 ; i < n - 1 ; i ++ ) {  $ ~~for ( int j = 0 ; j < n - 1 ; j ++ ) {  $ ~~~if ( x [ j ] > x [ j + 1 ] ) {  $ ~~~~swap ( x [ j ] , x [ j + 1 ] ) ;  $ ~~~~swap ( y [ j ] , y [ j + 1 ] ) ;  $ ~~~}  $ ~~}  $ ~}  $ ~for ( int i = 0 ; i < n ; i ++ ) {  $ ~~if ( s <= x [ i ] ) {  $ ~~~cout << "NO" << endl ;  $ ~~~return 0 ;  $ ~~}  $ ~~s += y [ i ] ;  $ ~}  $ ~cout << "YES" << endl ;  $ ~return 0 ;  $ }
string a [ 105 ] , ts , st ;  $ int type [ 105 ] , visit [ 105 ] , N ;  $ char lucky ;  $ char lower ( char & now ) {  $ ~if ( now >= 'A' && now <= 'Z' ) return now - 'A' + 'a' ;  $ ~return now ;  $ }  $ char upper ( char & now ) {  $ ~if ( now >= 'a' && now <= 'z' ) return now - 'a' + 'A' ;  $ ~return now ;  $ }  $ int main ( ) {  $ ~cin >> N ;  $ ~for ( int i = 1 ; i <= N ; ++ i ) {  $ ~~cin >> a [ i ] ;  $ ~~for ( int j = 0 ; j < a [ i ] . size ( ) ; ++ j ) a [ i ] [ j ] = lower ( a [ i ] [ j ] ) ;  $ ~}  $ ~cin >> ts ;  $ ~cin >> lucky ;  $ ~lucky = lower ( lucky ) ;  $ ~string st = ts ;  $ ~for ( int i = 0 ; i < st . size ( ) ; ++ i ) {  $ ~~type [ i ] = ( st [ i ] >= 'a' && st [ i ] <= 'z' ) ;  $ ~~st [ i ] = lower ( st [ i ] ) ;  $ ~}  $ ~memset ( visit , 0 , sizeof ( visit ) ) ;  $ ~for ( int i = 0 ; i < st . size ( ) ; ++ i )  $ ~~for ( int j = 1 ; j <= N ; ++ j )  $ ~~~if ( st . size ( ) - i >= a [ j ] . size ( ) )  $ ~~~~if ( st . substr ( i , a [ j ] . size ( ) ) == a [ j ] )  $ ~~~~~for ( int k = 0 ; k < a [ j ] . size ( ) ; ++ k ) visit [ i + k ] = 1 ;  $ ~for ( int i = 0 ; i < ts . size ( ) ; ++ i )  $ ~~if ( visit [ i ] )  $ ~~~if ( lower ( ts [ i ] ) == lucky ) {  $ ~~~~if ( lucky == 'a' )  $ ~~~~~ts [ i ] = ( type [ i ] ? 'b' : 'B' ) ;  $ ~~~~else  $ ~~~~~ts [ i ] = ( type [ i ] ? 'a' : 'A' ) ;  $ ~~~} else  $ ~~~~ts [ i ] = ( type [ i ] ? lower ( lucky ) : upper ( lucky ) ) ;  $ ~cout << ts << endl ;  $ ~return 0 ;  $ }
void seieve ( ) ;  $ long long maxx ( long long , long long ) ;  $ long long minn ( long long , long long ) ;  $ const long long mod = 1000000007 ;  $ const long long limits = ( long long ) 1e18 ;  $ long long primes [ 1000001 ] = { 0 } ;  $ int main ( ) {  $ ~long long t , i , j = 0 , k , n , m , o , p ;  $ ~cin >> t ;  $ ~string s ;  $ ~cin >> s ;  $ ~vector < char > v ;  $ ~long long arr [ 200005 ] = { 0 } ;  $ ~for ( i = 0 ; i < s . length ( ) ; i ++ ) {  $ ~~if ( v . size ( ) == 0 || v . at ( v . size ( ) - 1 ) != s [ i ] ) {  $ ~~~v . push_back ( s [ i ] ) ;  $ ~~~arr [ v . size ( ) - 1 ] += 1 ;  $ ~~} else {  $ ~~~arr [ v . size ( ) - 1 ] += 1 ;  $ ~~}  $ ~}  $ ~long long sm = 0 ;  $ ~for ( i = 0 ; i < v . size ( ) - 1 ; i ++ ) {  $ ~~if ( v . at ( i ) == '>' && v . at ( i + 1 ) == '<' ) {  $ ~~~arr [ i ] = 0 ;  $ ~~~arr [ i + 1 ] = 0 ;  $ ~~~i += 1 ;  $ ~~} else  $ ~~~sm += arr [ i ] ;  $ ~}  $ ~sm += arr [ v . size ( ) - 1 ] ;  $ ~cout << sm << endl ;  $ ~return 0 ;  $ }  $ void seieve ( ) {  $ ~long long i , p ;  $ ~primes [ 0 ] = 1 ;  $ ~primes [ 1 ] = 1 ;  $ ~for ( p = 2 ; p * p <= 1000000 ; p ++ ) {  $ ~~if ( primes [ p ] == 0 ) {  $ ~~~for ( i = p * 2 ; i <= 1000000 ; i += p ) primes [ i ] = 1 ;  $ ~~}  $ ~}  $ }  $ long long maxx ( long long a , long long b ) {  $ ~return ( a > b ) ? a : b ;  $ }  $ long long minn ( long long a , long long b ) {  $ ~return ( a < b ) ? a : b ;  $ }
int c , b , a ;  $ int main ( ) {  $ ~cin >> c >> b >> a ;  $ ~if ( a < c ) {  $ ~~puts ( "NO" ) ;  $ ~~return 0 ;  $ ~}  $ ~if ( ( ! ( ( a - c ) % b ) || ! ( ( a - c - 1 ) % b ) ) && a != c + 1 )  $ ~~puts ( "YES" ) ;  $ ~else  $ ~~puts ( "NO" ) ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~string ak ;  $ ~cin >> ak ;  $ ~int sz = ak . size ( ) ;  $ ~int f1 = 0 , f2 = 0 , f3 = 0 , f4 = 0 , i ;  $ ~for ( i = 0 ; i < sz ; i ++ ) {  $ ~~if ( ak [ i ] == 'A' && ak [ i + 1 ] == 'B' && f1 == 0 ) {  $ ~~~f1 = 1 ;  $ ~~~i ++ ;  $ ~~~continue ;  $ ~~}  $ ~~if ( ak [ i ] == 'B' && ak [ i + 1 ] == 'A' && f1 == 1 ) { f2 = 1 ; }  $ ~}  $ ~for ( i = 0 ; i < sz ; i ++ ) {  $ ~~if ( ak [ i ] == 'B' && ak [ i + 1 ] == 'A' && f3 == 0 ) {  $ ~~~f3 = 1 ;  $ ~~~i ++ ;  $ ~~~continue ;  $ ~~}  $ ~~if ( ak [ i ] == 'A' && ak [ i + 1 ] == 'B' && f3 == 1 ) { f4 = 1 ; }  $ ~}  $ ~if ( f1 == 1 && f2 == 1 ) {  $ ~~cout << "YES" << endl ;  $ ~~return 0 ;  $ ~}  $ ~if ( f3 == 1 && f4 == 1 ) {  $ ~~cout << "YES" << endl ;  $ ~~return 0 ;  $ ~}  $ ~cout << "NO" << endl ;  $ ~return 0 ;  $ }
bool prime [ 1000001 ] ;  $ void SieveOfEratosthenes ( int n ) {  $ ~memset ( prime , true , sizeof ( prime ) ) ;  $ ~for ( int p = 2 ; p * p <= n ; p ++ ) {  $ ~~if ( prime [ p ] == true ) {  $ ~~~for ( int i = p * p ; i <= n ; i += p ) prime [ i ] = false ;  $ ~~}  $ ~}  $ }  $ int main ( ) {  $ ~SieveOfEratosthenes ( 1000001 ) ;  $ ~int n ;  $ ~cin >> n ;  $ ~for ( int i = 1 ; i <= 1000001 ; i ++ ) {  $ ~~if ( prime [ i * n + 1 ] )  $ ~~~;  $ ~~else {  $ ~~~cout << i << endl ;  $ ~~~break ;  $ ~~}  $ ~}  $ }
const int maxn = 105 ;  $ int num [ maxn ] ;  $ int main ( ) {  $ ~string s ;  $ ~getline ( cin , s ) ;  $ ~int n ;  $ ~int l = s . size ( ) ;  $ ~memset ( num , 0 , sizeof ( num ) ) ;  $ ~int zheng = 0 , fu = 0 ;  $ ~int zuida = 1 ;  $ ~int pos ;  $ ~num [ 1 ] = 1 ;  $ ~++ zheng ;  $ ~++ zuida ;  $ ~for ( int i = 1 ; i < l ; i ++ ) {  $ ~~if ( s [ i ] == '+' ) {  $ ~~~num [ zuida ++ ] = 1 ;  $ ~~~++ zheng ;  $ ~~} else if ( s [ i ] == '-' ) {  $ ~~~num [ zuida ++ ] = - 1 ;  $ ~~~++ fu ;  $ ~~} else if ( s [ i ] == '=' ) {  $ ~~~pos = i ;  $ ~~~break ;  $ ~~}  $ ~}  $ ~string a = s . substr ( pos + 2 ) ;  $ ~stringstream ss ( a ) ;  $ ~ss >> n ;  $ ~bool flag = false ;  $ ~for ( int i = 1 ; i < zuida ; i ++ ) {  $ ~~if ( n == zheng - fu ) {  $ ~~~flag = true ;  $ ~~~break ;  $ ~~}  $ ~~while ( n > zheng - fu && num [ i ] > 0 && num [ i ] < n ) {  $ ~~~++ zheng ;  $ ~~~++ num [ i ] ;  $ ~~}  $ ~~while ( n < zheng - fu && num [ i ] < 0 && abs ( num [ i ] ) < n ) {  $ ~~~++ fu ;  $ ~~~-- num [ i ] ;  $ ~~}  $ ~}  $ ~if ( n == zheng - fu ) flag = true ;  $ ~if ( flag ) {  $ ~~cout << "Possible" << endl ;  $ ~~cout << num [ 1 ] ;  $ ~~for ( int i = 2 ; i < zuida ; i ++ ) {  $ ~~~if ( num [ i ] < 0 )  $ ~~~~cout << " - " << - num [ i ] ;  $ ~~~else  $ ~~~~cout << " + " << num [ i ] ;  $ ~~}  $ ~~cout << " = " ;  $ ~~cout << n << endl ;  $ ~} else  $ ~~cout << "Impossible" << endl ;  $ ~return 0 ;  $ }
const int N = 1e3 + 10 , INF = 1e9 + 7 ;  $ pair < int , int > rate [ N ] ;  $ int n ;  $ bool cmp ( pair < int , int > a , pair < int , int > b ) {  $ ~if ( a . first == b . first ) return a . second < b . second ;  $ ~return a . first > b . first ;  $ }  $ int main ( ) {  $ ~cin >> n ;  $ ~for ( int i = 0 ; i < n ; i ++ ) {  $ ~~int a , b , c , d ;  $ ~~cin >> a >> b >> c >> d ;  $ ~~a += b ;  $ ~~a += c ;  $ ~~a += d ;  $ ~~rate [ i ] = { a , i } ;  $ ~}  $ ~sort ( rate , rate + n , cmp ) ;  $ ~for ( int i = 0 ; i < n ; i ++ )  $ ~~if ( rate [ i ] . second == 0 ) {  $ ~~~cout << i + 1 << '\n' ;  $ ~~~return 0 ;  $ ~~}  $ ~return 0 ;  $ }
string s ;  $ bool ok ( int i , int j ) {  $ ~if ( j - i > 1 && s [ i ] == '0' ) return false ;  $ ~if ( j - i > 8 ) return false ;  $ ~int x = 0 ;  $ ~for ( int k = i ; k < j ; k ++ ) x = x * 10 + s [ k ] - '0' ;  $ ~return x <= 1000000 ;  $ }  $ int calc ( int i , int j ) {  $ ~int x = 0 ;  $ ~for ( int k = i ; k < j ; k ++ ) x = x * 10 + s [ k ] - '0' ;  $ ~return x ;  $ }  $ int main ( ) {  $ ~cin >> s ;  $ ~int ans = - 1 ;  $ ~for ( int i = 1 ; i < s . size ( ) ; i ++ )  $ ~~for ( int j = i + 1 ; j < s . size ( ) ; j ++ ) {  $ ~~~int sum = 0 ;  $ ~~~if ( ok ( 0 , i ) )  $ ~~~~sum += calc ( 0 , i ) ;  $ ~~~else  $ ~~~~continue ;  $ ~~~if ( ok ( i , j ) )  $ ~~~~sum += calc ( i , j ) ;  $ ~~~else  $ ~~~~continue ;  $ ~~~if ( ok ( j , s . size ( ) ) )  $ ~~~~sum += calc ( j , s . size ( ) ) ;  $ ~~~else  $ ~~~~continue ;  $ ~~~ans = max ( ans , sum ) ;  $ ~~}  $ ~cout << ans << "\n" ;  $ ~return 0 ;  $ }
const int MAX = 100005 ;  $ vector < int > f ( MAX , - 1 ) ;  $ vector < int > fr ( MAX , - 1 ) ;  $ vector < bool > valid ( MAX , 1 ) ;  $ bool ans = 1 ;  $ int n ;  $ int lastValid = 1 ;  $ int main ( ) {  $ ~cin >> n ;  $ ~if ( n == 1 ) {  $ ~~cout << "1\n" ;  $ ~} else {  $ ~~if ( n & 1 ) {  $ ~~~f [ n / 2 + 1 ] = n / 2 + 1 ;  $ ~~~valid [ n / 2 + 1 ] = 0 ;  $ ~~}  $ ~~f [ 1 ] = 2 , f [ n ] = n - 1 ;  $ ~~fr [ 2 ] = 1 , fr [ n - 1 ] = n ;  $ ~~valid [ 2 ] = valid [ n - 1 ] = 0 ;  $ ~~for ( int i = 2 ; i <= n / 2 ; ++ i ) {  $ ~~~int x = f [ i ] , y = fr [ i ] ;  $ ~~~if ( x != - 1 && y == - 1 ) {  $ ~~~~fr [ i ] = n + 1 - x ;  $ ~~~~f [ n + 1 - x ] = i ;  $ ~~~~valid [ i ] = 0 ;  $ ~~~} else if ( y != - 1 && x == - 1 ) {  $ ~~~~f [ i ] = n + 1 - y ;  $ ~~~~valid [ n + 1 - y ] = 0 ;  $ ~~~~fr [ n + 1 - y ] = i ;  $ ~~~}  $ ~~~if ( f [ i ] == - 1 ) {  $ ~~~~bool update = 1 ;  $ ~~~~for ( int j = lastValid ; j <= n ; ++ j ) {  $ ~~~~~if ( valid [ j ] ) {  $ ~~~~~~if ( i == j ) {  $ ~~~~~~~update = 0 ;  $ ~~~~~~~continue ;  $ ~~~~~~}  $ ~~~~~~f [ i ] = j ;  $ ~~~~~~fr [ j ] = i ;  $ ~~~~~~valid [ j ] = 0 ;  $ ~~~~~~if ( update ) { lastValid = j ; }  $ ~~~~~~break ;  $ ~~~~~}  $ ~~~~}  $ ~~~}  $ ~~~f [ n + 1 - i ] = n + 1 - f [ i ] ;  $ ~~~fr [ f [ n + 1 - i ] ] = n + 1 - i ;  $ ~~~valid [ n + 1 - f [ i ] ] = 0 ;  $ ~~}  $ ~~for ( int i = 1 ; i <= n && ans ; ++ i ) {  $ ~~~if ( f [ f [ i ] ] != n + 1 - i ) { ans = 0 ; }  $ ~~}  $ ~~if ( ans == 0 ) {  $ ~~~cout << "-1\n" ;  $ ~~} else {  $ ~~~for ( int i = 0 ; i < n ; ++ i ) { cout << f [ i + 1 ] << ( i + 1 < n ? " " : "\n" ) ; }  $ ~~}  $ ~}  $ }
int x , y , days , work ;  $ bool asphaltx [ 100 ] , asphalty [ 100 ] ;  $ int workdays [ 100000 ] ;  $ int main ( ) {  $ ~days = 1 ;  $ ~int a ;  $ ~cin >> a ;  $ ~for ( int A = 0 ; A < a * a ; A ++ ) {  $ ~~cin >> x >> y ;  $ ~~if ( asphaltx [ x ] == false && asphalty [ y ] == false ) {  $ ~~~asphaltx [ x ] = true ;  $ ~~~asphalty [ y ] = true ;  $ ~~~workdays [ work ] = days ;  $ ~~~work ++ ;  $ ~~}  $ ~~days ++ ;  $ ~}  $ ~for ( int A = 0 ; A < work ; A ++ ) {  $ ~~if ( A == work - 1 )  $ ~~~cout << workdays [ A ] << endl ;  $ ~~else  $ ~~~cout << workdays [ A ] << " " ;  $ ~}  $ }
const double PI = acos ( - 1.0 ) ;  $ const double eps = 1e-6 ;  $ const int INF = 0 x3f3f3f3f ;  $ int gcd ( int a , int b ) {  $ ~return a % b == 0 ? b : gcd ( b , a % b ) ;  $ }  $ int n ;  $ const int maxn = 60 ;  $ int main ( ) {  $ ~string a , b ;  $ ~cin >> a >> b ;  $ ~int num = 0 ;  $ ~char aa [ 10 ] ;  $ ~int j = 0 ;  $ ~int len1 = a . size ( ) , len2 = b . size ( ) ;  $ ~if ( len1 != len2 )  $ ~~cout << "NO" << endl ;  $ ~else {  $ ~~for ( int i = 0 ; i < len1 ; i ++ ) {  $ ~~~if ( a [ i ] != b [ i ] ) {  $ ~~~~aa [ j ++ ] = a [ i ] ;  $ ~~~~aa [ j ++ ] = b [ i ] ;  $ ~~~~num ++ ;  $ ~~~}  $ ~~~if ( num > 2 ) break ;  $ ~~}  $ ~~if ( num == 2 && ( aa [ 0 ] == aa [ 3 ] && aa [ 1 ] == aa [ 2 ] ) )  $ ~~~cout << "YES" << endl ;  $ ~~else  $ ~~~cout << "NO" << endl ;  $ ~}  $ ~return 0 ;  $ }
int x , y ;  $ bool xasphalt [ 69 ] , yasphalt [ 69 ] ;  $ int days = 1 , workdays [ 6969 ] , wrkdsz ;  $ int main ( ) {  $ ~int a ;  $ ~cin >> a ;  $ ~for ( int A = 0 ; A < a * a ; A ++ ) {  $ ~~cin >> x >> y ;  $ ~~if ( xasphalt [ x ] == false && yasphalt [ y ] == false ) {  $ ~~~xasphalt [ x ] = true ;  $ ~~~yasphalt [ y ] = true ;  $ ~~~workdays [ wrkdsz ] = days ;  $ ~~~wrkdsz ++ ;  $ ~~}  $ ~~days ++ ;  $ ~}  $ ~for ( int A = 0 ; A < wrkdsz ; A ++ ) {  $ ~~if ( A == wrkdsz - 1 )  $ ~~~cout << workdays [ A ] << "\n" ;  $ ~~else  $ ~~~cout << workdays [ A ] << " " ;  $ ~}  $ }
const long int mod = 1000000007 ;  $ string s , t ;  $ int f [ 5001 ] [ 5001 ] ;  $ int main ( ) {  $ ~cin >> s >> t ;  $ ~int a = s . size ( ) , b = t . size ( ) ;  $ ~int sum = 0 ;  $ ~for ( int o = a - 1 ; o >= 0 ; o -- ) {  $ ~~for ( int i = b - 1 ; i >= 0 ; i -- ) {  $ ~~~f [ o ] [ i ] = f [ o ] [ i + 1 ] + ( s [ o ] == t [ i ] ) * ( f [ o + 1 ] [ i + 1 ] + 1 ) ;  $ ~~~if ( f [ o ] [ i ] >= mod ) f [ o ] [ i ] %= mod ;  $ ~~}  $ ~~sum += f [ o ] [ 0 ] ;  $ ~~if ( sum >= mod ) sum %= mod ;  $ ~}  $ ~cout << sum << endl ;  $ ~return 0 ;  $ }
int spf [ ( int ) 1.5e7 + 9 ] , cnt [ ( int ) 1.5e7 + 9 ] ;  $ void sieve ( long long n ) {  $ ~spf [ 0 ] = spf [ 1 ] = 1 ;  $ ~for ( long long i = 2 ; i <= n ; i ++ ) {  $ ~~if ( spf [ i ] == 0 ) {  $ ~~~for ( long long j = i ; j <= n ; j += i ) {  $ ~~~~if ( spf [ j ] == 0 ) spf [ j ] = i ;  $ ~~~}  $ ~~}  $ ~}  $ }  $ int main ( ) {  $ ~sieve ( 1.5e7 ) ;  $ ~int n ;  $ ~cin >> n ;  $ ~vector < int > a ( n ) ;  $ ~for ( int i = 0 ; i < n ; i ++ ) cin >> a [ i ] ;  $ ~int g = a [ 0 ] ;  $ ~for ( int i = 1 ; i < n ; i ++ ) g = __gcd ( g , a [ i ] ) ;  $ ~int ans = 0 ;  $ ~for ( int i = 0 ; i < n ; i ++ ) {  $ ~~int num = a [ i ] / g ;  $ ~~while ( num != 1 ) {  $ ~~~int f = spf [ num ] ;  $ ~~~while ( num % f == 0 ) num /= f ;  $ ~~~++ cnt [ f ] ;  $ ~~~ans = max ( ans , cnt [ f ] ) ;  $ ~~}  $ ~}  $ ~ans = n - ans ;  $ ~if ( ans == n )  $ ~~cout << - 1 << endl ;  $ ~else  $ ~~cout << ans << endl ;  $ ~return 0 ;  $ }
const int inf = 0 x3f3f3f3f ;  $ const int maxn = 110 ;  $ int max ( int a , int b ) {  $ ~return a > b ? a : b ;  $ }  $ int min ( int a , int b ) {  $ ~return a > b ? b : a ;  $ }  $ int a [ maxn ] ;  $ int main ( ) {  $ ~int i , n ;  $ ~while ( cin >> n ) {  $ ~~for ( i = 0 ; i < n ; i ++ ) cin >> a [ i ] ;  $ ~~int l ;  $ ~~int maxi = 1 ;  $ ~~for ( l = 0 ; l < n - 1 ; l ++ ) {  $ ~~~int pos = l ;  $ ~~~while ( l < n - 1 && a [ l ] + 1 == a [ l + 1 ] ) { l ++ ; }  $ ~~~if ( l - pos + 1 > maxi ) { maxi = l - pos + 1 ; }  $ ~~}  $ ~~int cnt1 = 1 ;  $ ~~if ( a [ 0 ] == 1 ) {  $ ~~~for ( i = 0 ; i < maxi - 1 ; i ++ ) {  $ ~~~~if ( ( a [ i ] + 1 ) != a [ i + 1 ] ) {  $ ~~~~~break ;  $ ~~~~} else  $ ~~~~~cnt1 ++ ;  $ ~~~}  $ ~~}  $ ~~int cnt2 = 1 ;  $ ~~if ( a [ n - 1 ] == 1000 ) {  $ ~~~for ( i = 0 ; i < maxi - 1 ; i ++ ) {  $ ~~~~if ( ( a [ n - 1 - i ] - 1 ) != a [ n - 1 - i - 1 ] ) {  $ ~~~~~break ;  $ ~~~~} else  $ ~~~~~cnt2 ++ ;  $ ~~~}  $ ~~}  $ ~~if ( cnt1 == maxi || cnt2 == maxi ) {  $ ~~~cout << maxi - 1 << endl ;  $ ~~} else  $ ~~~cout << maxi - 2 << endl ;  $ ~}  $ ~return 0 ;  $ }
int a [ 102000 ] ;  $ int b [ 102000 ] ;  $ map < int , int > mymap ;  $ int main ( ) {  $ ~int n ;  $ ~cin >> n ;  $ ~int m = - 1 ;  $ ~for ( int i = 1 ; i <= n ; i ++ ) {  $ ~~cin >> a [ i ] ;  $ ~~mymap [ a [ i ] ] ++ ;  $ ~~m = max ( m , mymap [ a [ i ] ] ) ;  $ ~}  $ ~cout << n - m << endl ;  $ ~return 0 ;  $ }
int b [ 1000000 ] ;  $ int main ( ) {  $ ~int n , k ;  $ ~cin >> n >> k ;  $ ~vector < int > v ;  $ ~int cnt = 0 ;  $ ~for ( int i = 0 ; i < n ; i ++ ) {  $ ~~int x ;  $ ~~cin >> x ;  $ ~~v . push_back ( x ) ;  $ ~}  $ ~sort ( v . begin ( ) , v . end ( ) ) ;  $ ~if ( k == 1 ) {  $ ~~cout << n << endl ;  $ ~~return 0 ;  $ ~}  $ ~for ( int i = 0 ; i < v . size ( ) ; i ++ ) {  $ ~~int y = v [ i ] ;  $ ~~b [ i ] = 1 ;  $ ~~if ( y % k ) continue ;  $ ~~int x = y / k ;  $ ~~int p = lower_bound ( v . begin ( ) , v . end ( ) , x ) - v . begin ( ) ;  $ ~~if ( v [ p ] == x ) {  $ ~~~b [ i ] = b [ p ] + 1 ;  $ ~~~b [ p ] = 0 ;  $ ~~}  $ ~}  $ ~int ans = 0 ;  $ ~for ( int i = 0 ; i < n ; i ++ ) { ans += ( b [ i ] + 1 ) / 2 ; }  $ ~cout << ans << endl ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~int n , t ;  $ ~while ( cin >> n >> t ) {  $ ~~int ans = 100010 ;  $ ~~for ( int i = 0 ; i < t ; i ++ ) {  $ ~~~int l , r ;  $ ~~~cin >> l >> r ;  $ ~~~ans = min ( ans , r - l + 1 ) ;  $ ~~}  $ ~~cout << ans << endl ;  $ ~~for ( int i = 0 ; i < n ; i ++ ) {  $ ~~~if ( i ) cout << " " ;  $ ~~~cout << i % ans ;  $ ~~}  $ ~~cout << endl ;  $ ~}  $ ~return 0 ;  $ }
int main ( ) {  $ ~int n ;  $ ~int a ;  $ ~vector < int > b ;  $ ~vector < int > c ;  $ ~vector < int > jawab ;  $ ~cin >> n ;  $ ~for ( int i = 0 ; i < n ; i ++ ) {  $ ~~cin >> a ;  $ ~~b . push_back ( a ) ;  $ ~~c . push_back ( a ) ;  $ ~}  $ ~sort ( c . begin ( ) , c . end ( ) , greater < int > ( ) ) ;  $ ~for ( int i = 0 ; i < n ; i ++ ) {  $ ~~for ( int j = 0 ; j < n ; j ++ ) {  $ ~~~if ( b [ i ] == c [ j ] && i == n - 1 ) {  $ ~~~~cout << j + 1 << "\n" ;  $ ~~~~break ;  $ ~~~} else if ( b [ i ] == c [ j ] ) {  $ ~~~~cout << j + 1 << " " ;  $ ~~~~break ;  $ ~~~}  $ ~~}  $ ~}  $ }
const int maxn = 1e6 + 5 ;  $ vector < long long > Next ;  $ void init ( ) {  $ ~long long t ;  $ ~queue < long long > Q ;  $ ~Q . push ( 0 ) ;  $ ~while ( ! Q . empty ( ) ) {  $ ~~t = Q . front ( ) ;  $ ~~Q . pop ( ) ;  $ ~~if ( t > 1e11 ) continue ;  $ ~~Next . push_back ( t ) ;  $ ~~Q . push ( t * 10 + 4 ) ;  $ ~~Q . push ( t * 10 + 7 ) ;  $ ~}  $ ~sort ( Next . begin ( ) , Next . end ( ) ) ;  $ }  $ int bisearch_L ( long long val ) {  $ ~int L = 0 , R = Next . size ( ) - 1 , mid , res = Next . size ( ) - 1 ;  $ ~while ( L <= R ) {  $ ~~mid = ( L + R ) / 2 ;  $ ~~if ( Next [ mid ] <= val ) {  $ ~~~res = mid ;  $ ~~~L = mid + 1 ;  $ ~~} else  $ ~~~R = mid - 1 ;  $ ~}  $ ~return res ;  $ }  $ int bisearch_R ( long long val ) {  $ ~int L = 0 , R = Next . size ( ) - 1 , mid , res = 0 ;  $ ~while ( L <= R ) {  $ ~~mid = ( L + R ) / 2 ;  $ ~~if ( Next [ mid ] >= val ) {  $ ~~~res = mid ;  $ ~~~R = mid - 1 ;  $ ~~} else {  $ ~~~L = mid + 1 ;  $ ~~}  $ ~}  $ ~return res ;  $ }  $ long long f ( long long L , long long R ) {  $ ~long long res = 0 ;  $ ~int posL = bisearch_R ( L ) ;  $ ~int posR = bisearch_R ( R ) ;  $ ~int posRL = bisearch_L ( R ) ;  $ ~if ( Next [ posL ] >= R ) { return ( long long ) ( R - L + 1 ) * Next [ posL ] ; }  $ ~res += ( Next [ posL ] - L + 1 ) * Next [ posL ] ;  $ ~res += ( R - Next [ posRL ] ) * Next [ posR ] ;  $ ~for ( int i = posL ; i < posRL ; ++ i ) { res += ( Next [ i + 1 ] - Next [ i ] ) * Next [ i + 1 ] ; }  $ ~return res ;  $ }  $ int main ( ) {  $ ~long long L , R ;  $ ~init ( ) ;  $ ~while ( cin >> L >> R ) cout << f ( L , R ) << endl ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~long long int x1 , y1 , x2 , y2 ;  $ ~int n , ans = 0 ;  $ ~cin >> x1 >> y1 >> x2 >> y2 >> n ;  $ ~for ( int i = 0 ; i < n ; i ++ ) {  $ ~~long long int a , b , c ;  $ ~~cin >> a >> b >> c ;  $ ~~if ( a * x1 + b * y1 + c < 0 && a * x2 + b * y2 + c > 0 ) ans ++ ;  $ ~~if ( a * x1 + b * y1 + c > 0 && a * x2 + b * y2 + c < 0 ) ans ++ ;  $ ~}  $ ~cout << ans << endl ;  $ }
int main ( ) {  $ ~int n , m , i , l , c = 0 ;  $ ~cin >> n >> m ;  $ ~int a [ n ] ;  $ ~for ( i = 0 ; i < n ; i ++ ) {  $ ~~cin >> a [ i ] ;  $ ~~if ( a [ i ] <= m ) {  $ ~~~l = i ;  $ ~~~a [ i ] = 0 ;  $ ~~} else {  $ ~~~a [ i ] -= m ;  $ ~~~if ( a [ i ] < 0 ) a [ i ] = 0 ;  $ ~~}  $ ~}  $ ~i = 0 ;  $ ~while ( c < n ) {  $ ~~for ( i = 0 ; i < n ; i ++ ) {  $ ~~~if ( a [ i ] == 0 )  $ ~~~~c ++ ;  $ ~~~else if ( a [ i ] <= m ) {  $ ~~~~l = i ;  $ ~~~~a [ i ] = 0 ;  $ ~~~~c = 0 ;  $ ~~~} else {  $ ~~~~a [ i ] -= m ;  $ ~~~~if ( a [ i ] < 0 ) a [ i ] = 0 ;  $ ~~~~c = 0 ;  $ ~~~~l = i ;  $ ~~~}  $ ~~}  $ ~}  $ ~l ++ ;  $ ~cout << l << endl ;  $ }
map < string , int > ans ;  $ int main ( ) {  $ ~int n , m ;  $ ~double kk ;  $ ~cin >> n >> m >> kk ;  $ ~int k = ( int ) ( kk * 100.0 + 0.5 ) ;  $ ~for ( int i = 0 ; i < n ; i ++ ) {  $ ~~string s ;  $ ~~int x ;  $ ~~cin >> s >> x ;  $ ~~if ( x * k < 10000 ) continue ;  $ ~~ans [ s ] = k * x / 100 ;  $ ~}  $ ~for ( int i = 0 ; i < m ; i ++ ) {  $ ~~string s ;  $ ~~cin >> s ;  $ ~~if ( ans . count ( s ) == 0 ) { ans [ s ] = 0 ; }  $ ~}  $ ~cout << ans . size ( ) << endl ;  $ ~for ( map < string , int > : : iterator it = ans . begin ( ) ; it != ans . end ( ) ; it ++ ) { cout << it -> first << " " << it -> second << endl ; }  $ ~return 0 ;  $ }
int main ( ) {  $ ~int a , b , d , k ;  $ ~char c ;  $ ~cin >> a >> c >> b ;  $ ~k = a ;  $ ~d = ( ( k % 10 ) * 10 ) ;  $ ~k = k / 10 ;  $ ~d += k ;  $ ~if ( b < d && d < 60 ) {  $ ~~if ( a > 9 && d > 9 )  $ ~~~cout << a << ":" << d << endl ;  $ ~~else if ( a < 10 && d > 9 )  $ ~~~cout << "0" << a << ":" << d << endl ;  $ ~~else if ( a > 9 && d < 10 )  $ ~~~cout << a << ":0" << d << endl ;  $ ~~else  $ ~~~cout << "0" << a << ":0" << d << endl ;  $ ~} else {  $ ~~if ( a < 23 ) {  $ ~~Loop :  $ ~~~a ++ ;  $ ~~~k = a ;  $ ~~~d = ( ( k % 10 ) * 10 ) ;  $ ~~~k = k / 10 ;  $ ~~~d += k ;  $ ~~~if ( d < 60 && d > 9 ) {  $ ~~~~if ( a > 9 ) {  $ ~~~~~cout << a << ":" << d << endl ;  $ ~~~~} else {  $ ~~~~~cout << "0" << a << ":" << d << endl ;  $ ~~~~}  $ ~~~} else if ( d < 60 && d < 10 ) {  $ ~~~~if ( a > 9 ) {  $ ~~~~~cout << a << ":0" << d << endl ;  $ ~~~~} else {  $ ~~~~~cout << "0" << a << ":0" << d << endl ;  $ ~~~~}  $ ~~~} else  $ ~~~~goto Loop ;  $ ~~} else  $ ~~~cout << "00:00\n" ;  $ ~}  $ ~return 0 ;  $ }
int main ( ) {  $ ~long a , b , c , d , e , f ;  $ ~cin >> a >> b >> c >> d >> e >> f ;  $ ~long num1 = a * c * e ;  $ ~long num2 = b * d * f ;  $ ~if ( num1 == 0 && num2 == 0 ) {  $ ~~if ( c == 0 && d > 0 )  $ ~~~cout << "Ron" << endl ;  $ ~~else if ( ( a * c == 0 ) && ( b * d > 0 ) )  $ ~~~cout << "Ron" << endl ;  $ ~~else  $ ~~~cout << "Hermione" << endl ;  $ ~} else if ( num2 > num1 )  $ ~~cout << "Ron" << endl ;  $ ~else  $ ~~cout << "Hermione" << endl ;  $ ~return 0 ;  $ }
int dp [ 110 ] [ 110 ] ;  $ int main ( ) {  $ ~int n , i , j , k ;  $ ~cin >> n ;  $ ~dp [ 1 ] [ 2 ] = 1 ;  $ ~dp [ 2 ] [ 1 ] = 1 ;  $ ~for ( i = 3 ; i <= 100 ; i ++ ) {  $ ~~for ( j = 1 ; j < i ; j ++ ) {  $ ~~~int sum = 0 ;  $ ~~~for ( k = 1 ; k < j ; k ++ )  $ ~~~~if ( dp [ k ] [ i ] == 1 && dp [ k ] [ j ] == 1 ) sum ++ ;  $ ~~~if ( sum <= n ) {  $ ~~~~n = n - sum ;  $ ~~~~dp [ i ] [ j ] = 1 ;  $ ~~~~dp [ j ] [ i ] = 1 ;  $ ~~~}  $ ~~~if ( n == 0 ) break ;  $ ~~}  $ ~~if ( n == 0 ) break ;  $ ~}  $ ~int ans = i ;  $ ~cout << i << endl ;  $ ~for ( i = 1 ; i <= ans ; i ++ ) {  $ ~~for ( j = 1 ; j <= ans ; j ++ ) cout << dp [ i ] [ j ] ;  $ ~~cout << endl ;  $ ~}  $ }
int main ( ) {  $ ~int numberOfStudents ;  $ ~int studentsRate ;  $ ~int result = 1 ;  $ ~cin >> numberOfStudents ;  $ ~int arr [ 2000 ] ;  $ ~for ( int x = 0 ; x < numberOfStudents ; ++ x ) {  $ ~~cin >> studentsRate ;  $ ~~arr [ x ] = studentsRate ;  $ ~}  $ ~for ( int x = 0 ; x < numberOfStudents ; ++ x ) {  $ ~~result = 1 ;  $ ~~for ( int y = 0 ; y < numberOfStudents ; ++ y ) {  $ ~~~if ( arr [ x ] < arr [ y ] ) { ++ result ; }  $ ~~}  $ ~~if ( x == numberOfStudents - 1 )  $ ~~~cout << result << endl ;  $ ~~else  $ ~~~cout << result << " " ;  $ ~}  $ ~return 0 ;  $ }
const int N = 200 ;  $ int k , mark [ N ] [ N ] ;  $ void f ( int val ) {  $ ~memset ( mark , 1 - val , sizeof mark ) ;  $ ~for ( int i = 0 ; i < k ; i ++ )  $ ~~for ( int j = i ; j < k - i ; j ++ )  $ ~~~if ( i % 2 == 0 ) mark [ i ] [ j ] = val ;  $ ~for ( int i = k - 1 ; i > 0 ; i -- )  $ ~~for ( int j = i ; j >= k - 1 - i ; j -- )  $ ~~~if ( ( k - 1 - i ) % 2 == 0 ) mark [ i ] [ j ] = val ;  $ ~for ( int j = 0 ; j < k ; j ++ )  $ ~~for ( int i = j ; i < k - j ; i ++ )  $ ~~~if ( j % 2 == 0 ) mark [ i ] [ j ] = val ;  $ ~for ( int j = k - 1 ; j > 0 ; j -- )  $ ~~for ( int i = j ; i >= k - 1 - j ; i -- )  $ ~~~if ( ( k - 1 - j ) % 2 == 0 ) mark [ i ] [ j ] = val ;  $ }  $ int main ( ) {  $ ~cin >> k ;  $ ~if ( k % 2 )  $ ~~cout << - 1 << endl ;  $ ~else {  $ ~~for ( int i = 0 ; i < k ; i ++ ) {  $ ~~~f ( i % 2 ) ;  $ ~~~for ( int r = 0 ; r < k ; r ++ ) {  $ ~~~~for ( int c = 0 ; c < k ; c ++ ) cout << ( mark [ r ] [ c ] ? 'w' : 'b' ) ;  $ ~~~~cout << endl ;  $ ~~~}  $ ~~~if ( i < k - 1 ) cout << endl ;  $ ~~}  $ ~}  $ }
string s [ 8 ] ;  $ int main ( ) {  $ ~int t ;  $ ~cin >> t ;  $ ~while ( t -- ) {  $ ~~for ( int i = 0 ; i < 8 ; ++ i ) cin >> s [ i ] ;  $ ~~int k1x = 0 ;  $ ~~int k1y = 0 ;  $ ~~int k2x = 0 ;  $ ~~int k2y = 0 ;  $ ~~int t = 0 ;  $ ~~for ( int i = 0 ; i < 8 ; ++ i ) {  $ ~~~for ( int j = 0 ; j < 8 ; ++ j ) {  $ ~~~~if ( s [ i ] [ j ] == 'K' ) {  $ ~~~~~if ( t == 0 ) {  $ ~~~~~~k1x = i ;  $ ~~~~~~k1y = j ;  $ ~~~~~~t ++ ;  $ ~~~~~} else {  $ ~~~~~~k2x = i ;  $ ~~~~~~k2y = j ;  $ ~~~~~~t ++ ;  $ ~~~~~}  $ ~~~~}  $ ~~~~if ( t == 2 ) break ;  $ ~~~}  $ ~~~if ( t == 2 ) break ;  $ ~~}  $ ~~bool f = false ;  $ ~~if ( abs ( k2x - k1x ) % 4 == 0 && abs ( k2y - k1y ) % 4 == 0 ) f = true ;  $ ~~if ( f )  $ ~~~cout << "YES" << endl ;  $ ~~else  $ ~~~cout << "NO" << endl ;  $ ~}  $ ~return 0 ;  $ }
int main ( ) {  $ ~int n , m ;  $ ~cin >> n >> m ;  $ ~vector < int > arr ;  $ ~int max = - 1 ;  $ ~int index = - 1 ;  $ ~for ( int i = 0 ; i < n ; i ++ ) {  $ ~~int x ;  $ ~~cin >> x ;  $ ~~if ( x > max ) {  $ ~~~max = x ;  $ ~~~index = i + 1 ;  $ ~~}  $ ~~arr . push_back ( x ) ;  $ ~}  $ ~if ( m >= max ) {  $ ~~cout << n << endl ;  $ ~} else {  $ ~~int index = - 1 ;  $ ~~int count = 0 ;  $ ~~int i = 0 ;  $ ~~for ( i = 0 ; count < n ; i ++ ) {  $ ~~~if ( arr [ i % n ] > 0 ) {  $ ~~~~arr [ i % n ] -= m ;  $ ~~~~if ( arr [ i % n ] <= 0 ) { count ++ ; }  $ ~~~}  $ ~~~if ( count == n ) { break ; }  $ ~~}  $ ~~cout << i % n + 1 << endl ;  $ ~}  $ ~return 0 ;  $ }
int main ( ) {  $ ~int f = 0 , mi , ma , pos = 0 , pos1 = 0 , n , a ;  $ ~cin >> n ;  $ ~for ( int i = 0 ; i < n ; i ++ ) {  $ ~~cin >> a ;  $ ~~if ( i == 0 ) {  $ ~~~mi = a ;  $ ~~~ma = a ;  $ ~~} else {  $ ~~~if ( a > ma ) {  $ ~~~~ma = a ;  $ ~~~~pos = i ;  $ ~~~}  $ ~~~if ( a <= mi ) {  $ ~~~~mi = a ;  $ ~~~~pos1 = i ;  $ ~~~}  $ ~~}  $ ~}  $ ~if ( pos1 < pos ) f = 1 ;  $ ~cout << n - 1 - pos1 + pos - f << "\n" ;  $ }
string n ;  $ int main ( ) {  $ ~cin >> n ;  $ ~int a = 0 , b = 0 , c = 0 ;  $ ~bool power1 = true , power2 = true ;  $ ~for ( int i = 0 ; i < n . size ( ) ; i ++ ) {  $ ~~if ( ! power1 && ! power2 ) c ++ ;  $ ~~if ( ! power1 ) {  $ ~~~if ( n [ i ] != '=' && power2 )  $ ~~~~b ++ ;  $ ~~~else  $ ~~~~power2 = false ;  $ ~~}  $ ~~if ( n [ i ] != + '+' && power1 )  $ ~~~a ++ ;  $ ~~else  $ ~~~power1 = false ;  $ ~}  $ ~if ( a + b != c && a + b + 2 != c && a + b != c + 2 )  $ ~~cout << "Impossible\n" ;  $ ~else {  $ ~~if ( a + b == c ) {  $ ~~~for ( int i = 0 ; i < a ; i ++ ) cout << '|' ;  $ ~~~cout << '+' ;  $ ~~~for ( int i = 0 ; i < b ; i ++ ) cout << '|' ;  $ ~~~cout << '=' ;  $ ~~~for ( int i = 0 ; i < c ; i ++ ) cout << '|' ;  $ ~~~cout << '\n' ;  $ ~~} else if ( a + b + 2 == c ) {  $ ~~~for ( int i = 0 ; i < a + 1 ; i ++ ) cout << '|' ;  $ ~~~cout << '+' ;  $ ~~~for ( int i = 0 ; i < b ; i ++ ) cout << '|' ;  $ ~~~cout << '=' ;  $ ~~~for ( int i = 0 ; i < c - 1 ; i ++ ) cout << '|' ;  $ ~~~cout << '\n' ;  $ ~~} else if ( a + b == c + 2 ) {  $ ~~~string cad = "" ;  $ ~~~if ( a > 1 )  $ ~~~~for ( int i = 0 ; i < a - 1 ; i ++ ) cout << '|' ;  $ ~~~else  $ ~~~~cout << '|' ;  $ ~~~cout << '+' ;  $ ~~~if ( a == 1 && b > 1 )  $ ~~~~for ( int i = 0 ; i < b - 1 ; i ++ ) cout << '|' ;  $ ~~~else if ( b == 1 )  $ ~~~~cout << '|' ;  $ ~~~else {  $ ~~~~for ( int i = 0 ; i < b ; i ++ ) cout << '|' ;  $ ~~~}  $ ~~~cout << '=' ;  $ ~~~for ( int i = 0 ; i < c + 1 ; i ++ ) cout << '|' ;  $ ~~~cout << '\n' ;  $ ~~}  $ ~}  $ ~return 0 ;  $ }
int main ( ) {  $ ~int y , k , n ;  $ ~cin >> y >> k >> n ;  $ ~int x = k - y ;  $ ~while ( x < 1 ) { x += k ; }  $ ~if ( x + y > n )  $ ~~cout << - 1 << endl ;  $ ~else {  $ ~~cout << x ;  $ ~~while ( x + y + k <= n ) {  $ ~~~cout << ' ' << x + k ;  $ ~~~x += k ;  $ ~~}  $ ~~cout << endl ;  $ ~}  $ ~return 0 ;  $ }
int main ( ) {  $ ~int t , s , x ;  $ ~cin >> t >> s >> x ;  $ ~x -= t ;  $ ~if ( x < s && x != 0 ) {  $ ~~cout << "NO" << endl ;  $ ~} else if ( x % s == 0 || x % s == 1 ) {  $ ~~cout << "YES" << endl ;  $ ~} else {  $ ~~cout << "NO" << endl ;  $ ~}  $ }
int main ( ) {  $ ~int n ;  $ ~cin >> n ;  $ ~string s ;  $ ~cin >> s ;  $ ~if ( s == "0" ) {  $ ~~cout << "0" << endl ;  $ ~~return 0 ;  $ ~}  $ ~int zer = 0 ;  $ ~for ( int i = 0 ; i < s . size ( ) ; i ++ )  $ ~~if ( s [ i ] == '0' ) zer ++ ;  $ ~cout << "1" ;  $ ~for ( int i = 0 ; i < zer ; i ++ ) cout << "0" ;  $ ~cout << endl ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~string s ;  $ ~cin >> s ;  $ ~int nC = 0 , iC = 0 , eC = 0 , tC = 0 , disC = 0 ;  $ ~for ( int c = 0 ; c < s . length ( ) ; c ++ ) {  $ ~~if ( s [ c ] == 'n' ) {  $ ~~~nC ++ ;  $ ~~} else if ( s [ c ] == 'i' ) {  $ ~~~iC ++ ;  $ ~~} else if ( s [ c ] == 'e' ) {  $ ~~~eC ++ ;  $ ~~} else if ( s [ c ] == 't' ) {  $ ~~~tC ++ ;  $ ~~}  $ ~}  $ ~while ( nC > 0 && eC > 0 && iC > 0 && tC > 0 ) {  $ ~~nC -= 3 ;  $ ~~iC -- ;  $ ~~eC -= 3 ;  $ ~~tC -- ;  $ ~~if ( nC >= 0 && eC >= 0 && iC >= 0 && tC >= 0 ) { disC ++ ; }  $ ~~nC ++ ;  $ ~}  $ ~cout << disC << endl ;  $ ~return 0 ;  $ }
char Grades [ 200005 ] ;  $ int main ( ) {  $ ~int lfp = - 1 , zp , n , i , t , last ;  $ ~bool carryFlag = false , pf = false ;  $ ~cin >> n >> t >> ( Grades + 1 ) ;  $ ~for ( i = 1 ; i <= n ; ++ i ) {  $ ~~if ( Grades [ i ] == '.' ) {  $ ~~~++ i ;  $ ~~~break ;  $ ~~}  $ ~}  $ ~while ( Grades [ i ] && t > 0 ) {  $ ~~if ( Grades [ i ] >= '5' ) {  $ ~~~lfp = i ;  $ ~~~break ;  $ ~~}  $ ~~++ i ;  $ ~}  $ ~while ( ( ~ lfp ) && t > 0 && ! pf ) {  $ ~~if ( Grades [ lfp - 1 ] == '.' ) {  $ ~~~Grades [ lfp - 1 ] = 0 ;  $ ~~~Grades [ lfp - 2 ] ++ ;  $ ~~~last = lfp - 2 ;  $ ~~~pf = true ;  $ ~~} else {  $ ~~~Grades [ lfp ] = 0 ;  $ ~~~Grades [ lfp - 1 ] ++ ;  $ ~~~last = lfp - 1 ;  $ ~~}  $ ~~lfp = - 1 ;  $ ~~t -- ;  $ ~~if ( Grades [ last ] > '9' ) {  $ ~~~int c = 1 ;  $ ~~~Grades [ last ] = '0' ;  $ ~~~last -- ;  $ ~~~while ( c ) {  $ ~~~~c = 0 ;  $ ~~~~if ( Grades [ last ] == '.' ) {  $ ~~~~~Grades [ last ] = '\0' ;  $ ~~~~~Grades [ last - 1 ] ++ ;  $ ~~~~~last -= 2 ;  $ ~~~~~pf = true ;  $ ~~~~} else if ( last == '\0' ) {  $ ~~~~~carryFlag = true ;  $ ~~~~~Grades [ 0 ] = '1' ;  $ ~~~~~break ;  $ ~~~~} else {  $ ~~~~~Grades [ last ] ++ ;  $ ~~~~}  $ ~~~~if ( Grades [ last ] > '9' ) {  $ ~~~~~if ( ! pf )  $ ~~~~~~Grades [ last ] = '\0' ;  $ ~~~~~else  $ ~~~~~~Grades [ last ] = '0' ;  $ ~~~~~last -- ;  $ ~~~~~c = 1 ;  $ ~~~~}  $ ~~~~if ( Grades [ last ] >= '5' ) lfp = last ;  $ ~~~}  $ ~~} else if ( Grades [ last ] >= '5' ) {  $ ~~~lfp = last ;  $ ~~}  $ ~}  $ ~if ( carryFlag )  $ ~~cout << Grades << endl ;  $ ~else  $ ~~cout << ( Grades + 1 ) << endl ;  $ ~return 0 ;  $ }
int hor [ ] = { 0 , 1 , 2 , 3 , 4 , 5 , 10 , 11 , 12 , 13 , 14 , 15 , 20 , 21 , 22 , 23 } ;  $ int mie [ ] = { 0 , 10 , 20 , 30 , 40 , 50 , 1 , 11 , 21 , 31 , 41 , 51 , 2 , 12 , 22 , 32 } ;  $ int main ( ) {  $ ~char maohao ;  $ ~int h , m ;  $ ~cin >> h >> maohao >> m ;  $ ~for ( int i = 0 ; i < 16 ; i ++ ) {  $ ~~if ( ( hor [ i ] == h && mie [ i ] > m ) || hor [ i ] > h ) {  $ ~~~if ( hor [ i ] < 10 ) cout << "0" ;  $ ~~~cout << hor [ i ] << ":" ;  $ ~~~if ( mie [ i ] < 10 ) cout << "0" ;  $ ~~~cout << mie [ i ] << endl ;  $ ~~~return 0 ;  $ ~~}  $ ~}  $ ~cout << "00:00" << endl ;  $ ~return 0 ;  $ }
bool ascending ( int i , int j ) {  $ ~return ( i < j ) ;  $ }  $ bool descending ( int i , int j ) {  $ ~return ( i > j ) ;  $ }  $ long long dp [ 5050 ] [ 5050 ] ;  $ long long mod = 1000 * 1000 * 1000 + 7 ;  $ string s1 , s2 ;  $ int main ( ) {  $ ~cin >> s1 >> s2 ;  $ ~memset ( ( dp ) , ( 0 ) , sizeof ( dp ) ) ;  $ ~for ( int i = s1 . size ( ) - 1 ; i >= 0 ; i -- )  $ ~~for ( int j = s2 . size ( ) - 1 ; j >= 0 ; j -- ) {  $ ~~~dp [ i ] [ j ] = dp [ i ] [ j + 1 ] ;  $ ~~~if ( s1 [ i ] == s2 [ j ] ) dp [ i ] [ j ] += dp [ i + 1 ] [ j + 1 ] + 1 ;  $ ~~~dp [ i ] [ j ] %= mod ;  $ ~~}  $ ~int ret = 0 ;  $ ~for ( int ( i ) = 0 ; ( i ) < ( s1 . size ( ) ) ; ( i ) ++ ) ret = ( ret + dp [ i ] [ 0 ] ) % mod ;  $ ~cout << ret % mod << endl ;  $ }
const int N = 5e5 , inf = 1e9 + 7 ;  $ map < char , int > M ;  $ int tmp [ N ] , x [ N ] , y [ N ] , n ;  $ bool Ok ( int cur ) {  $ ~for ( int i = 0 ; i < n ; i ++ ) {  $ ~~tmp [ i ] = 0 ;  $ ~~tmp [ i ] |= ( 1 << ( x [ i ] - 1 ) ) & cur ;  $ ~~tmp [ i ] |= ( 1 << ( y [ i ] - 1 + 5 ) ) & cur ;  $ ~~for ( int j = 0 ; j < i ; j ++ ) {  $ ~~~if ( tmp [ i ] == tmp [ j ] && ( x [ i ] != x [ j ] || y [ i ] != y [ j ] ) ) return false ;  $ ~~}  $ ~}  $ ~return true ;  $ }  $ int main ( ) {  $ ~M [ 'R' ] = 1 , M [ 'G' ] = 2 , M [ 'B' ] = 3 , M [ 'Y' ] = 4 , M [ 'W' ] = 5 ;  $ ~cin >> n ;  $ ~for ( int i = 0 ; i < n ; i ++ ) {  $ ~~string s ;  $ ~~cin >> s ;  $ ~~x [ i ] = M [ s [ 0 ] ] ;  $ ~~y [ i ] = s [ 1 ] - '0' ;  $ ~}  $ ~int res = 10 ;  $ ~for ( int i = 0 ; i < ( 1 << 10 ) ; i ++ ) {  $ ~~int cur = __builtin_popcount ( i ) ;  $ ~~if ( cur >= res ) continue ;  $ ~~if ( Ok ( i ) ) res = cur ;  $ ~}  $ ~cout << res << "\n" ;  $ ~return 0 ;  $ }
int n , p ;  $ string s , t , a , b ;  $ map < pair < string , string > , bool > ma ;  $ int main ( ) {  $ ~cin >> n ;  $ ~for ( int i = 0 ; i < n ; ++ i ) {  $ ~~if ( i != 0 ) { cin >> s ; }  $ ~~cin >> s >> t ;  $ ~~if ( ma [ { s , t } ] ) { continue ; }  $ ~~ma [ { s , t } ] = 1 ;  $ ~~a = b = "" ;  $ ~~a += t [ 0 ] ;  $ ~~a += s [ 0 ] ;  $ ~~b += t [ 1 ] ;  $ ~~b += s [ 1 ] ;  $ ~~ma [ { a , b } ] = 1 ;  $ ~~a = b = "" ;  $ ~~a += t [ 1 ] ;  $ ~~a += t [ 0 ] ;  $ ~~b += s [ 1 ] ;  $ ~~b += s [ 0 ] ;  $ ~~ma [ { a , b } ] = 1 ;  $ ~~a = b = "" ;  $ ~~a += s [ 1 ] ;  $ ~~a += t [ 1 ] ;  $ ~~b += s [ 0 ] ;  $ ~~b += t [ 0 ] ;  $ ~~ma [ { a , b } ] = 1 ;  $ ~~++ p ;  $ ~}  $ ~cout << p << "\n" ;  $ }
int main ( ) {  $ ~long long n , q , a , g , k = 0 , p = 0 , sum = 0 , t1 , l1 ;  $ ~cin >> n >> q >> a ;  $ ~long long w = q ;  $ ~if ( n == 0 )  $ ~~cout << ( q / a ) << endl ;  $ ~else {  $ ~~for ( long long i = 0 ; i < n ; i ++ ) {  $ ~~~long long t , l ;  $ ~~~cin >> t >> l ;  $ ~~~if ( k == 0 ) {  $ ~~~~sum = sum + ( t / a ) ;  $ ~~~~t1 = t , l1 = l ;  $ ~~~~long long h = t1 + l1 ;  $ ~~~~k = 1 ;  $ ~~~} else {  $ ~~~~long long h = t1 + l1 ;  $ ~~~~g = t - h ;  $ ~~~~p = g / a ;  $ ~~~~sum = sum + p ;  $ ~~~~k = 1 ;  $ ~~~}  $ ~~~if ( i == n - 1 )  $ ~~~~sum = sum + ( ( w - t - l ) / a ) ;  $ ~~~else  $ ~~~~t1 = t , l1 = l ;  $ ~~}  $ ~~cout << sum << endl ;  $ ~}  $ }
int gcd ( int a , int b ) {  $ ~if ( b == 0 )  $ ~~return a ;  $ ~else  $ ~~gcd ( b , a % b ) ;  $ }  $ int main ( ) {  $ ~int n ;  $ ~while ( cin >> n ) {  $ ~~int cnt = 0 ;  $ ~~if ( n == 1 ) cnt = 1 ;  $ ~~while ( n -- ) {  $ ~~~int b ;  $ ~~~cin >> b ;  $ ~~~if ( b == 0 ) cnt ++ ;  $ ~~}  $ ~~if ( cnt == 1 )  $ ~~~cout << "YES" ;  $ ~~else  $ ~~~cout << "NO" ;  $ ~~cout << endl ;  $ ~}  $ }
bool isPrime [ 10000000 ] = { } ;  $ vector < int > prime ;  $ int main ( ) {  $ ~for ( int i = 2 ; i < 10000000 ; i ++ ) {  $ ~~if ( ! isPrime [ i ] ) {  $ ~~~for ( int j = 2 * i ; j < 10000000 ; j += i ) isPrime [ j ] = 1 ;  $ ~~~prime . push_back ( i ) ;  $ ~~}  $ ~}  $ ~long long q ;  $ ~cin >> q ;  $ ~if ( q < 10000000 )  $ ~~if ( ! isPrime [ q ] ) {  $ ~~~cout << 1 << endl << 0 << endl ;  $ ~~~return 0 ;  $ ~~}  $ ~vector < long long > v ;  $ ~for ( int i = 0 ; i < prime . size ( ) ; i ++ ) {  $ ~~while ( ! ( q % ( ( long long ) prime [ i ] ) ) ) {  $ ~~~v . push_back ( ( long long ) prime [ i ] ) ;  $ ~~~q /= ( long long ) prime [ i ] ;  $ ~~}  $ ~}  $ ~if ( v . size ( ) == 0 )  $ ~~cout << 1 << endl << 0 << endl ;  $ ~else {  $ ~~if ( q != 1 ) v . push_back ( q ) ;  $ ~~if ( v . size ( ) == 2 )  $ ~~~cout << 2 << endl ;  $ ~~else  $ ~~~cout << 1 << endl << v [ 0 ] * v [ 1 ] << endl ;  $ ~}  $ }
int main ( ) {  $ ~int n , k ;  $ ~cin >> n >> k ;  $ ~string s ;  $ ~cin >> s ;  $ ~int i = n - 1 ;  $ ~string req = s ;  $ ~while ( i > 0 ) {  $ ~~bool done = true ;  $ ~~for ( int j = 0 ; j + i < n ; j ++ ) {  $ ~~~if ( s [ j ] != s [ i + j ] ) {  $ ~~~~done = false ;  $ ~~~~break ;  $ ~~~}  $ ~~}  $ ~~if ( done ) { req = s . substr ( n - i , i ) ; }  $ ~~i -- ;  $ ~}  $ ~for ( int j = 0 ; j < k - 1 ; j ++ ) { s . append ( req ) ; }  $ ~cout << s << endl ;  $ }
string s ;  $ int main ( ) {  $ ~cin >> s ;  $ ~int a = 0 ;  $ ~for ( int i = 0 ; i < s . size ( ) ; i ++ ) {  $ ~~if ( s [ i ] == '1' ) a ++ ;  $ ~}  $ ~if ( a == s . size ( ) ) {  $ ~~s . erase ( s . begin ( ) + 1 ) ;  $ ~~cout << s << endl ;  $ ~} else {  $ ~~for ( int i = 0 ; i < s . size ( ) ; i ++ )  $ ~~~if ( s [ i ] == '0' ) {  $ ~~~~s . erase ( s . begin ( ) + i ) ;  $ ~~~~cout << s << endl ;  $ ~~~~break ;  $ ~~~}  $ ~}  $ ~return 0 ;  $ }
const int M = 1000 + 10 ;  $ int main ( ) {  $ ~long long int t1 , t2 , x1 , x2 , t0 ;  $ ~cin >> t1 >> t2 >> x1 >> x2 >> t0 ;  $ ~if ( t2 == t0 && t1 == t0 ) {  $ ~~cout << x1 << " " << x2 << endl ;  $ ~} else {  $ ~~if ( t2 == t0 ) {  $ ~~~cout << "0 " << x2 << endl ;  $ ~~} else {  $ ~~~if ( t1 == t0 ) {  $ ~~~~cout << x1 << " 0" << endl ;  $ ~~~} else {  $ ~~~~long long int a = t0 - t1 ;  $ ~~~~long long int b = t2 - t0 ;  $ ~~~~long long int ans1 = 0 ;  $ ~~~~long long int ans2 = x2 ;  $ ~~~~for ( long long int y1 = 1 ; y1 <= x1 ; y1 ++ ) {  $ ~~~~~long long int y2 = a * y1 / b + ( ( a * y1 ) % b != 0 ) ;  $ ~~~~~if ( y2 <= x2 ) {  $ ~~~~~~long long int f1 = t1 * y1 + t2 * y2 ;  $ ~~~~~~long long int d1 = y1 + y2 ;  $ ~~~~~~long long int f2 = t1 * ans1 + t2 * ans2 ;  $ ~~~~~~long long int d2 = ans1 + ans2 ;  $ ~~~~~~if ( f1 * d2 < d1 * f2 ) {  $ ~~~~~~~ans1 = y1 ;  $ ~~~~~~~ans2 = y2 ;  $ ~~~~~~} else {  $ ~~~~~~~if ( f1 * d2 == d1 * f2 ) {  $ ~~~~~~~~if ( y1 + y2 > ans1 + ans2 ) {  $ ~~~~~~~~~ans1 = y1 ;  $ ~~~~~~~~~ans2 = y2 ;  $ ~~~~~~~~}  $ ~~~~~~~}  $ ~~~~~~}  $ ~~~~~}  $ ~~~~}  $ ~~~~cout << ans1 << " " << ans2 << endl ;  $ ~~~}  $ ~~}  $ ~}  $ ~return 0 ;  $ }
long long spf [ 100001 ] ;  $ long long gcd ( long long a , long long b ) ;  $ long long palindrome ( string s ) ;  $ long long modexp ( long long a , long long b , long long m ) ;  $ void sieve ( ) ;  $ vector < long long > getFactorization ( long long x ) ;  $ void getZarr ( string str , long long Z [ ] ) ;  $ long long ceil ( long long a , long long b ) {  $ ~return a / b + ( a % b != 0 ) ;  $ }  $ int main ( ) {  $ ~long long n ;  $ ~cin >> n ;  $ ~pair < long long , long long > p [ n ] ;  $ ~for ( long long i = 0 ; i < n ; i ++ ) { cin >> p [ i ] . first >> p [ i ] . second ; }  $ ~sort ( p , p + n ) ;  $ ~long long ans = INT_MIN ;  $ ~for ( long long i = 0 ; i < n ; i ++ ) {  $ ~~long long x = ceil ( log10 ( p [ i ] . second ) / log10 ( 4 ) ) ;  $ ~~ans = max ( ans , x + ( p [ i ] . first ) ) ;  $ ~~if ( ans == p [ i ] . first ) ans ++ ;  $ ~}  $ ~cout << ans << endl ;  $ }  $ long long gcd ( long long a , long long b ) {  $ ~if ( a == 0 ) return b ;  $ ~if ( b == 0 ) return a ;  $ ~if ( a == b ) return a ;  $ ~if ( a > b ) return gcd ( a % b , b ) ;  $ ~return gcd ( a , b % a ) ;  $ }  $ long long palindrome ( string s ) {  $ ~long long l = 0 ;  $ ~long long h = s . length ( ) - 1 ;  $ ~while ( h > l ) {  $ ~~if ( s [ l ++ ] != s [ h -- ] ) { return 0 ; }  $ ~}  $ ~return 1 ;  $ }  $ long long modexp ( long long a , long long b , long long m ) {  $ ~if ( b == 0 ) return 1 ;  $ ~long long temp = modexp ( a , b / 2 , m ) ;  $ ~temp = ( temp * temp ) % m ;  $ ~if ( b & 1 ) return ( temp * ( a % m ) ) % m ;  $ ~return temp ;  $ }  $ void sieve ( ) {  $ ~spf [ 1 ] = 1 ;  $ ~for ( long long i = 2 ; i < 100001 ; i ++ ) spf [ i ] = i ;  $ ~for ( long long i = 4 ; i < 100001 ; i += 2 ) spf [ i ] = 2 ;  $ ~for ( long long i = 3 ; i * i < 100001 ; i ++ ) {  $ ~~if ( spf [ i ] == i ) {  $ ~~~for ( long long j = i * i ; j < 100001 ; j += i )  $ ~~~~if ( spf [ j ] == j ) spf [ j ] = i ;  $ ~~}  $ ~}  $ }  $ vector < long long > getFactorization ( long long x ) {  $ ~vector < long long > ret ;  $ ~while ( x != 1 ) {  $ ~~ret . push_back ( spf [ x ] ) ;  $ ~~x = x / spf [ x ] ;  $ ~}  $ ~return ret ;  $ }  $ void getZarr ( string str , long long Z [ ] ) {  $ ~long long n = str . length ( ) ;  $ ~long long L , R , k ;  $ ~L = R = 0 ;  $ ~for ( long long i = 1 ; i < n ; ++ i ) {  $ ~~if ( i > R ) {  $ ~~~L = R = i ;  $ ~~~while ( R < n && str [ R - L ] == str [ R ] ) R ++ ;  $ ~~~Z [ i ] = R - L ;  $ ~~~R -- ;  $ ~~} else {  $ ~~~k = i - L ;  $ ~~~if ( Z [ k ] < R - i + 1 )  $ ~~~~Z [ i ] = Z [ k ] ;  $ ~~~else {  $ ~~~~L = i ;  $ ~~~~while ( R < n && str [ R - L ] == str [ R ] ) R ++ ;  $ ~~~~Z [ i ] = R - L ;  $ ~~~~R -- ;  $ ~~~}  $ ~~}  $ ~}  $ }
int main ( ) {  $ ~long long o [ 100 ] , n , m , j = 0 ;  $ ~long double k ;  $ ~string s [ 100 ] ;  $ ~pair < string , long long > c [ 100 ] ;  $ ~cin >> n >> m >> k ;  $ ~for ( int i = 0 ; i < n ; i ++ ) {  $ ~~cin >> s [ i ] >> o [ i ] ;  $ ~~if ( floor ( k * o [ i ] + 1e-8 ) >= 100 ) {  $ ~~~c [ j ] . first = s [ i ] ;  $ ~~~c [ j ] . second = floor ( k * o [ i ] + 1e-8 ) ;  $ ~~~j ++ ;  $ ~~}  $ ~}  $ ~for ( int i = 0 ; i < m ; i ++ ) {  $ ~~cin >> s [ i ] ;  $ ~~bool flag = true ;  $ ~~for ( int k = 0 ; k < j ; k ++ )  $ ~~~if ( c [ k ] . first == s [ i ] ) flag = false ;  $ ~~if ( flag ) {  $ ~~~c [ j ] . first = s [ i ] ;  $ ~~~c [ j ] . second = 0 ;  $ ~~~j ++ ;  $ ~~}  $ ~}  $ ~sort ( c , c + j ) ;  $ ~cout << j << endl ;  $ ~for ( int i = 0 ; i < j ; i ++ ) cout << c [ i ] . first << " " << c [ i ] . second << endl ;  $ ~return 0 ;  $ }
const double PI = acos ( - 1.0 ) ;  $ const double EPS = ( 1e-10 ) ;  $ const long long int INF = 0 x3f3f3f3f ;  $ const long long mod = ( 1e9 ) + 7 ;  $ long long int my_mod ( long long int num , long long int mod ) {  $ ~long long int ret = num % mod ;  $ ~while ( ret < 0 ) ret += mod ;  $ ~return ret ;  $ }  $ long long int gcd ( long long int a , long long int b ) {  $ ~return a == 0 ? b : gcd ( b % a , a ) ;  $ }  $ int main ( ) {  $ ~int k ;  $ ~cin >> k ;  $ ~int ans [ 205 ] [ 205 ] ;  $ ~memset ( ans , 0 , sizeof ( ans ) ) ;  $ ~int cnt = 1 ;  $ ~for ( ; k ; ) {  $ ~~for ( int i = 0 ; i <= k && i < cnt ; i ++ ) {  $ ~~~ans [ i ] [ cnt ] = 1 ;  $ ~~~ans [ cnt ] [ i ] = 1 ;  $ ~~~k -= i ;  $ ~~}  $ ~~cnt ++ ;  $ ~}  $ ~cout << cnt << endl ;  $ ~for ( int i = 0 ; i < cnt ; i ++ ) {  $ ~~for ( int j = 0 ; j < cnt ; j ++ ) cout << ans [ i ] [ j ] ;  $ ~~cout << endl ;  $ ~}  $ ~return 0 ;  $ }
const int N = 150 ;  $ int x [ N ] , y [ N ] , info [ N ] , n ;  $ int color_to_id ( char ch ) {  $ ~if ( ch == 'R' ) return 1 ;  $ ~if ( ch == 'G' ) return 2 ;  $ ~if ( ch == 'B' ) return 3 ;  $ ~if ( ch == 'Y' ) return 4 ;  $ ~if ( ch == 'W' ) return 5 ;  $ }  $ int count_one ( int x ) {  $ ~int cnt = 0 ;  $ ~while ( x ) {  $ ~~cnt += ( x & 1 ) ;  $ ~~x >> = 1 ;  $ ~}  $ ~return cnt ;  $ }  $ bool check ( int sta ) {  $ ~for ( int i = 0 ; i < n ; i ++ ) {  $ ~~info [ i ] = 0 ;  $ ~~info [ i ] |= ( 1 << ( x [ i ] - 1 ) ) & sta ;  $ ~~info [ i ] |= ( 1 << ( y [ i ] - 1 + 5 ) ) & sta ;  $ ~~for ( int j = 0 ; j < i ; j ++ )  $ ~~~if ( info [ i ] == info [ j ] && ( x [ i ] != x [ j ] || y [ i ] != y [ j ] ) ) return false ;  $ ~}  $ ~return true ;  $ }  $ int main ( ) {  $ ~string str ;  $ ~while ( cin >> n ) {  $ ~~for ( int i = 0 ; i < n ; i ++ ) {  $ ~~~cin >> str ;  $ ~~~x [ i ] = color_to_id ( str [ 0 ] ) ;  $ ~~~y [ i ] = str [ 1 ] - '0' ;  $ ~~}  $ ~~int ans = 10 ;  $ ~~for ( int i = 0 ; i < ( 1 << 10 ) ; i ++ ) {  $ ~~~int n_one = count_one ( i ) ;  $ ~~~if ( n_one >= ans ) continue ;  $ ~~~if ( check ( i ) ) ans = n_one ;  $ ~~}  $ ~~cout << ans << endl ;  $ ~}  $ ~return 0 ;  $ }
int main ( ) {  $ ~int n , k ;  $ ~cin >> n >> k ;  $ ~string s ;  $ ~cin >> s ;  $ ~int i , j ;  $ ~for ( i = 1 ; i < n ; i ++ ) {  $ ~~bool flag = 1 ;  $ ~~for ( j = i ; j < n ; j ++ ) {  $ ~~~if ( s [ j ] != s [ j - i ] ) {  $ ~~~~flag = 0 ;  $ ~~~~break ;  $ ~~~}  $ ~~}  $ ~~if ( flag ) { break ; }  $ ~}  $ ~if ( i == n ) {  $ ~~while ( k -- ) cout << s ;  $ ~~cout << '\n' ;  $ ~~return 0 ;  $ ~}  $ ~i = n - i - 1 ;  $ ~cout << s ;  $ ~k -- ;  $ ~while ( k -- )  $ ~~for ( int l = i + 1 ; l < n ; l ++ ) cout << s [ l ] ;  $ ~cout << '\n' ;  $ }
int main ( ) {  $ ~unsigned long long int n , a , x , maxim , cmax , cnt , total = 0 ;  $ ~maxim = 0 ;  $ ~cmax = 0 ;  $ ~cnt = 0 ;  $ ~cin >> n ;  $ ~for ( int i = 0 ; i < n ; i ++ ) {  $ ~~cin >> a ;  $ ~~for ( int j = 0 ; j < a ; j ++ ) {  $ ~~~cin >> x ;  $ ~~~maxim = max ( maxim , x ) ;  $ ~~}  $ ~~if ( maxim > cmax ) {  $ ~~~total += ( maxim - cmax ) * cnt ;  $ ~~~cmax = maxim ;  $ ~~} else {  $ ~~~total += ( cmax - maxim ) * a ;  $ ~~}  $ ~~cnt += a ;  $ ~~maxim = 0 ;  $ ~}  $ ~cout << total << endl ;  $ ~return 0 ;  $ }
int counter [ 4005 * 10 ] ;  $ int main ( ) {  $ ~int a ;  $ ~char str [ 4005 ] ;  $ ~cin >> a ;  $ ~cin >> str ;  $ ~int cs [ 4005 ] , temp [ 4005 ] , len = strlen ( str ) ;  $ ~cs [ 0 ] = 0 ;  $ ~for ( int i = 0 ; i < len ; i ++ ) { temp [ i + 1 ] = str [ i ] - 48 ; }  $ ~for ( int i = 1 ; i <= len ; i ++ ) { cs [ i ] = cs [ i - 1 ] + temp [ i ] ; }  $ ~for ( int i = 1 ; i <= len ; i ++ ) {  $ ~~for ( int j = i ; j <= len ; j ++ ) { counter [ cs [ j ] - cs [ i - 1 ] ] ++ ; }  $ ~}  $ ~long long ans = 0 ;  $ ~if ( a == 0 ) {  $ ~~for ( int i = 0 ; i < 37000 ; i ++ ) { ans += ( ( long long ) counter [ 0 ] * ( long long ) counter [ i ] ) ; }  $ ~}  $ ~for ( int i = 1 ; i <= 37000 ; i ++ ) {  $ ~~if ( a % i == 0 ) {  $ ~~~if ( ( a / i ) >= 0 && ( a / i ) <= 37000 ) { ans += ( ( long long ) counter [ i ] * ( long long ) counter [ a / i ] ) ; }  $ ~~}  $ ~}  $ ~cout << ans << endl ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~int a , b , c ;  $ ~string s ;  $ ~while ( cin >> s ) {  $ ~~int len = s . length ( ) ;  $ ~~int i ;  $ ~~int flag = 1 ;  $ ~~if ( s [ 0 ] != 'a' ) {  $ ~~~cout << "NO" << endl ;  $ ~~~continue ;  $ ~~}  $ ~~a = 1 ;  $ ~~b = c = 0 ;  $ ~~for ( i = 1 ; i < len ; i ++ ) {  $ ~~~if ( s [ i ] == 'a' )  $ ~~~~a ++ ;  $ ~~~else if ( s [ i ] == 'c' ) {  $ ~~~~flag = 0 ;  $ ~~~~break ;  $ ~~~} else  $ ~~~~break ;  $ ~~}  $ ~~for ( i ; i < len ; i ++ ) {  $ ~~~if ( s [ i ] == 'b' )  $ ~~~~b ++ ;  $ ~~~else if ( s [ i ] == 'a' ) {  $ ~~~~flag = 0 ;  $ ~~~~break ;  $ ~~~} else  $ ~~~~break ;  $ ~~}  $ ~~for ( i ; i < len ; i ++ ) {  $ ~~~if ( s [ i ] == 'c' )  $ ~~~~c ++ ;  $ ~~~else {  $ ~~~~flag = 0 ;  $ ~~~~break ;  $ ~~~}  $ ~~}  $ ~~if ( flag == 0 )  $ ~~~cout << "NO" << endl ;  $ ~~else if ( b == 0 )  $ ~~~cout << "NO" << endl ;  $ ~~else {  $ ~~~if ( c == a || c == b )  $ ~~~~cout << "YES" << endl ;  $ ~~~else  $ ~~~~cout << "NO" << endl ;  $ ~~}  $ ~}  $ ~return 0 ;  $ }
int n , a [ 105 ] ;  $ map < char , int > mp ;  $ int main ( ) {  $ ~cin >> n ;  $ ~mp [ 'R' ] = 5 ;  $ ~mp [ 'G' ] = 6 ;  $ ~mp [ 'B' ] = 7 ;  $ ~mp [ 'Y' ] = 8 ;  $ ~mp [ 'W' ] = 9 ;  $ ~for ( int i = 0 ; i < n ; i ++ ) {  $ ~~string s ;  $ ~~cin >> s ;  $ ~~int c , v ;  $ ~~c = mp [ s [ 0 ] ] ;  $ ~~v = s [ 1 ] - '0' - 1 ;  $ ~~a [ i ] = ( 1 << c ) | ( 1 << v ) ;  $ ~}  $ ~sort ( a , a + n ) ;  $ ~n = unique ( a , a + n ) - a ;  $ ~int ans = 11 ;  $ ~for ( int msk = 0 ; msk < ( 1 << 10 ) ; msk ++ ) {  $ ~~bool f = true ;  $ ~~for ( int i = 0 ; i < n ; i ++ ) {  $ ~~~for ( int j = i + 1 ; j < n ; j ++ ) {  $ ~~~~int t = a [ i ] ^ a [ j ] ;  $ ~~~~if ( ( msk & t ) == 0 ) {  $ ~~~~~f = false ;  $ ~~~~~break ;  $ ~~~~}  $ ~~~}  $ ~~~if ( ! f ) break ;  $ ~~}  $ ~~if ( f ) { ans = min ( ans , __builtin_popcount ( msk ) ) ; }  $ ~}  $ ~cout << ans << endl ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~char s [ 100003 ] ;  $ ~char * c ;  $ ~cin >> s ;  $ ~if ( ( c = strstr ( s , "AB" ) ) != NULL && strstr ( c + 2 , "BA" ) != NULL ) {  $ ~~cout << "YES" << endl ;  $ ~~return 0 ;  $ ~}  $ ~if ( ( c = strstr ( s , "BA" ) ) != NULL && strstr ( c + 2 , "AB" ) != NULL ) {  $ ~~cout << "YES" << endl ;  $ ~~return 0 ;  $ ~}  $ ~cout << "NO" << endl ;  $ }
const double PI = acos ( - 1 ) ;  $ const int MAX = 2e9 + 7 ;  $ const long long MOD = 1e9 + 7 ;  $ void solve ( ) {  $ ~long long n , m , k , l ;  $ ~cin >> n >> m >> k >> l ;  $ ~long long dif = n - k ;  $ ~if ( dif < l ) {  $ ~~cout << - 1 << endl ;  $ ~~return ;  $ ~}  $ ~long long h = ( k % m == 0 ? k / m : k / m + 1 ) ;  $ ~long long r = h * m - k ;  $ ~if ( r >= l ) {  $ ~~if ( h * m <= n )  $ ~~~cout << h << endl ;  $ ~~else  $ ~~~cout << - 1 << endl ;  $ ~~return ;  $ ~} else {  $ ~~long long t = ( l % m == 0 ? l / m : l / m + 1 ) ;  $ ~~if ( ( t + h - 1 ) * m <= n and ( t + h - 1 ) * m - k >= l )  $ ~~~cout << t + h - 1 << endl ;  $ ~~else if ( ( t + h ) * m <= n )  $ ~~~cout << t + h << endl ;  $ ~~else  $ ~~~cout << - 1 << endl ;  $ ~}  $ }  $ int main ( ) {  $ ~solve ( ) ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~int n ;  $ ~cin >> n ;  $ ~int k ;  $ ~int p ;  $ ~if ( n < 4 ) {  $ ~~if ( n == 1 )  $ ~~~k = 1 ;  $ ~~else if ( n == 2 )  $ ~~~k = 2 ;  $ ~~else if ( n == 3 )  $ ~~~k = 3 ;  $ ~~else if ( n == 0 ) {  $ ~~~cout << 1 << endl ;  $ ~~~return 0 ;  $ ~~}  $ ~} else {  $ ~~k = n % 4 ;  $ ~}  $ ~if ( k == 1 ) {  $ ~~p = 8 ;  $ ~} else if ( k == 2 ) {  $ ~~p = 4 ;  $ ~} else if ( k == 3 ) {  $ ~~p = 2 ;  $ ~} else if ( k == 0 ) {  $ ~~p = 6 ;  $ ~}  $ ~cout << p << endl ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~long long x ;  $ ~cin >> x ;  $ ~if ( ! cin . fail ( ) ) {  $ ~~if ( x <= 127 )  $ ~~~cout << "byte" << endl ;  $ ~~else if ( x <= 32767 )  $ ~~~cout << "short" << endl ;  $ ~~else if ( x <= 2147483647 )  $ ~~~cout << "int" << endl ;  $ ~~else  $ ~~~cout << "long" << endl ;  $ ~} else {  $ ~~cout << "BigInteger" << endl ;  $ ~}  $ ~return 0 ;  $ }
int main ( ) {  $ ~int n ;  $ ~cin >> n ;  $ ~int max = - 1 ;  $ ~for ( int i = 0 ; i < n ; i ++ ) {  $ ~~long k ;  $ ~~long a ;  $ ~~cin >> k >> a ;  $ ~~long m = 1 ;  $ ~~int mcnt = 0 ;  $ ~~while ( m ) {  $ ~~~if ( m >= a ) { break ; }  $ ~~~m *= 4 ;  $ ~~~mcnt ++ ;  $ ~~}  $ ~~if ( a == 1 ) { mcnt = 1 ; }  $ ~~int real_k = k + mcnt ;  $ ~~if ( real_k > max ) { max = real_k ; }  $ ~}  $ ~cout << max << endl ;  $ ~return 0 ;  $ ~;  $ }
int main ( ) {  $ ~locale loc ;  $ ~int a , b ;  $ ~long long s ;  $ ~cin >> a >> b >> s ;  $ ~if ( s >= abs ( a ) + abs ( b ) and ( s - ( abs ( a ) + abs ( b ) ) ) % 2 == 0 ) {  $ ~~cout << "Yes"  $ ~~~<< "\n" ;  $ ~} else {  $ ~~cout << "No"  $ ~~~<< "\n" ;  $ ~}  $ }
const int N = 2e5 + 10 ;  $ long long int n , a , b , k , MOD = 1e9 + 9 ;  $ long long fast_power ( long long base , long long power ) {  $ ~long long result = 1 ;  $ ~while ( power > 0 ) {  $ ~~if ( power % 2 == 1 ) { result = ( result * base ) % MOD ; }  $ ~~base = ( base * base ) % MOD ;  $ ~~power = power / 2 ;  $ ~}  $ ~return result ;  $ }  $ int main ( ) {  $ ~cin >> n >> a >> b >> k ;  $ ~string s ;  $ ~cin >> s ;  $ ~int l = ( n + 1 ) / k - 1 ;  $ ~long long int val = ( b * fast_power ( a , MOD - 2 ) ) % MOD ;  $ ~long long int valp = fast_power ( val , k ) ;  $ ~long long int ans = 0 ;  $ ~long long int geo ;  $ ~if ( valp != 1 ) {  $ ~~geo = ( fast_power ( valp , l + 1 ) - 1 ) % MOD + MOD ;  $ ~~geo = geo * fast_power ( ( valp - 1 ) % MOD + MOD , MOD - 2 ) % MOD ;  $ ~~geo %= MOD ;  $ ~} else  $ ~~geo = l + 1 ;  $ ~for ( int i = 0 ; i < k ; i ++ ) {  $ ~~long long int calc = fast_power ( b , i ) * fast_power ( a , n - i ) % MOD ;  $ ~~if ( s [ i ] == '-' )  $ ~~~ans = ( ans - ( geo * calc % MOD ) ) % MOD + MOD ;  $ ~~else  $ ~~~ans = ( ans + ( geo * calc % MOD ) % MOD ) ;  $ ~~ans %= MOD ;  $ ~}  $ ~cout << ans << endl ;  $ ~return 0 ;  $ }
int a [ 105 ] ;  $ long long summ ( int l , int r ) {  $ ~long long ans = 0 ;  $ ~for ( int i = l ; i <= r ; i ++ ) { ans += a [ i ] ; }  $ ~return ans ;  $ }  $ int main ( ) {  $ ~int n ;  $ ~cin >> n ;  $ ~long long sum = 0 ;  $ ~int ans = 0 ;  $ ~for ( int i = 1 ; i <= n ; i ++ ) {  $ ~~cin >> a [ i ] ;  $ ~~sum += a [ i ] ;  $ ~~if ( a [ i ] == 0 ) ans ++ ;  $ ~}  $ ~if ( sum == 0 ) {  $ ~~if ( ans == n ) {  $ ~~~cout << "NO" << endl ;  $ ~~} else {  $ ~~~for ( int i = 1 ; i < n ; i ++ ) {  $ ~~~~if ( summ ( 1 , i ) != 0 && summ ( i + 1 , n ) != 0 ) {  $ ~~~~~cout << "YES" << endl << 2 << endl ;  $ ~~~~~cout << 1 << " " << i << endl ;  $ ~~~~~cout << i + 1 << " " << n << endl ;  $ ~~~~~break ;  $ ~~~~}  $ ~~~}  $ ~~}  $ ~} else {  $ ~~cout << "YES" << endl ;  $ ~~cout << 1 << endl ;  $ ~~cout << 1 << " " << n << endl ;  $ ~}  $ ~return 0 ;  $ }
int main ( ) {  $ ~int n ;  $ ~while ( cin >> n ) {  $ ~~int a [ 101 ] ;  $ ~~for ( int i = 0 ; i < n ; ++ i ) cin >> a [ i ] ;  $ ~~int num = 0 ;  $ ~~int t = 0 ;  $ ~~int b [ 101 ] ;  $ ~~int line = 0 ;  $ ~~for ( int i = 0 ; i < n ; ++ i ) {  $ ~~~if ( a [ i ] < 0 && t == 2 ) {  $ ~~~~b [ line ++ ] = num ;  $ ~~~~num = 1 ;  $ ~~~~t = 1 ;  $ ~~~} else {  $ ~~~~if ( a [ i ] < 0 ) { t ++ ; }  $ ~~~~num ++ ;  $ ~~~}  $ ~~}  $ ~~b [ line ++ ] = num ;  $ ~~cout << line << endl ;  $ ~~for ( int i = 0 ; i < line ; ++ i ) {  $ ~~~if ( i == line - 1 )  $ ~~~~cout << b [ i ] << endl ;  $ ~~~else  $ ~~~~cout << b [ i ] << " " ;  $ ~~}  $ ~}  $ ~return 0 ;  $ }
int main ( ) {  $ ~char a [ 10005 ] , b [ 1000005 ] ;  $ ~while ( cin >> a ) {  $ ~~cin >> b ;  $ ~~int ans ;  $ ~~int len = strlen ( a ) ;  $ ~~int kk = strlen ( b ) ;  $ ~~int x = 0 , y = 0 ;  $ ~~for ( ans = 1 ; ; ans ++ ) {  $ ~~~int s = 0 ;  $ ~~~for ( int i = 0 ; i < len ; i ++ ) {  $ ~~~~if ( a [ i ] == b [ y ] ) {  $ ~~~~~y ++ ;  $ ~~~~~s ++ ;  $ ~~~~}  $ ~~~}  $ ~~~if ( y == kk )  $ ~~~~break ;  $ ~~~else if ( s == 0 ) {  $ ~~~~ans = - 1 ;  $ ~~~~break ;  $ ~~~}  $ ~~~if ( ans >= 50000 ) {  $ ~~~~ans = 960000 ;  $ ~~~~break ;  $ ~~~}  $ ~~}  $ ~~cout << ans << endl ;  $ ~}  $ ~return 0 ;  $ }
vector < long long > Emp_Lang [ 500 ] ;  $ bool visited [ 500 ] ;  $ void DFS ( long long a ) {  $ ~visited [ a ] = true ;  $ ~for ( long long i = 0 ; i < Emp_Lang [ a ] . size ( ) ; ++ i ) {  $ ~~if ( ! visited [ Emp_Lang [ a ] [ i ] ] ) { DFS ( Emp_Lang [ a ] [ i ] ) ; }  $ ~}  $ }  $ int main ( ) {  $ ~long long n , m ;  $ ~cin >> n >> m ;  $ ~long long analphabet = 0 ;  $ ~for ( long long i = 0 ; i < n ; ++ i ) {  $ ~~long long lang ;  $ ~~cin >> lang ;  $ ~~for ( long long j = 0 ; j < lang ; ++ j ) {  $ ~~~analphabet = 1 ;  $ ~~~long long id ;  $ ~~~cin >> id ;  $ ~~~Emp_Lang [ i ] . push_back ( id + 200 ) ;  $ ~~~Emp_Lang [ id + 200 ] . push_back ( i ) ;  $ ~~}  $ ~}  $ ~long long components = 0 ;  $ ~for ( long long a = 0 ; a < n ; ++ a ) {  $ ~~if ( ! visited [ a ] ) {  $ ~~~components ++ ;  $ ~~~DFS ( a ) ;  $ ~~}  $ ~}  $ ~cout << components - analphabet << endl ;  $ ~return 0 ;  $ }
long long dp [ 26 ] [ 26 ] ;  $ int main ( ) {  $ ~long long n ;  $ ~cin >> n ;  $ ~string st ;  $ ~for ( long long i = 0 ; i < ( 26 ) ; ++ i ) {  $ ~~for ( long long j = 0 ; j < ( 26 ) ; ++ j ) { dp [ i ] [ j ] = - ( long long ) ( 1e18 ) ; }  $ ~}  $ ~for ( long long i = 0 ; i < ( n ) ; ++ i ) {  $ ~~cin >> st ;  $ ~~long long f = st [ 0 ] - 'a' ;  $ ~~long long l = st [ ( long long ) ( ( st ) . size ( ) ) - 1 ] - 'a' ;  $ ~~long long le = ( long long ) ( ( st ) . size ( ) ) ;  $ ~~dp [ l ] [ l ] = max ( dp [ l ] [ l ] , dp [ l ] [ f ] + le ) ;  $ ~~for ( long long i = 0 ; i < ( 26 ) ; ++ i ) {  $ ~~~if ( i == l ) continue ;  $ ~~~dp [ i ] [ l ] = max ( dp [ i ] [ l ] , dp [ i ] [ f ] + le ) ;  $ ~~}  $ ~~dp [ f ] [ l ] = max ( dp [ f ] [ l ] , le ) ;  $ ~}  $ ~long long ans = - ( long long ) ( 1e18 ) ;  $ ~for ( long long i = 0 ; i < ( 26 ) ; ++ i ) ans = max ( ans , dp [ i ] [ i ] ) ;  $ ~if ( ans < 0 )  $ ~~cout << "0\n" ;  $ ~else  $ ~~cout << ans << "\n" ;  $ }
int main ( ) {  $ ~long long n , x , y , bx , by , wx , wy ;  $ ~cin >> n ;  $ ~cin >> x >> y ;  $ ~wx = x - 1 ;  $ ~wy = y - 1 ;  $ ~bx = n - x ;  $ ~by = n - y ;  $ ~if ( n == x && n == y )  $ ~~cout << "Black" << endl ;  $ ~else if ( 1 == x && 1 == y )  $ ~~cout << "White" << endl ;  $ ~else {  $ ~~if ( wx <= by && wy <= bx )  $ ~~~cout << "White" << endl ;  $ ~~else  $ ~~~cout << "Black" << endl ;  $ ~}  $ ~return 0 ;  $ }
const long long oo = 4000000000000000000 LL ;  $ long long n , m , a , d ;  $ long long t [ 100100 ] ;  $ int main ( ) {  $ ~cin >> n >> m >> a >> d ;  $ ~for ( int i = 0 ; i < m ; ++ i ) { cin >> t [ i ] ; }  $ ~t [ m ++ ] = oo - 1 ;  $ ~long long ans = 0 ;  $ ~long long k = ( d / a + 1 ) * a ;  $ ~long long last_start = - d - 1 ;  $ ~for ( int i = 0 ; i < m ; ++ i ) {  $ ~~if ( t [ i ] <= last_start + d ) continue ;  $ ~~long long first_ai ;  $ ~~if ( last_start + d < a ) {  $ ~~~first_ai = a ;  $ ~~} else if ( last_start + d >= n * a ) {  $ ~~~first_ai = oo ;  $ ~~} else {  $ ~~~first_ai = ( ( last_start + d ) / a + 1 ) * a ;  $ ~~}  $ ~~if ( t [ i ] < first_ai ) {  $ ~~~last_start = t [ i ] ;  $ ~~~++ ans ;  $ ~~} else {  $ ~~~last_start = first_ai ;  $ ~~~++ ans ;  $ ~~~long long steps ;  $ ~~~if ( t [ i ] > n * a ) {  $ ~~~~steps = ( n * a - last_start ) / k ;  $ ~~~} else {  $ ~~~~steps = ( t [ i ] - last_start ) / k ;  $ ~~~}  $ ~~~last_start += steps * k ;  $ ~~~ans += steps ;  $ ~~~if ( t [ i ] <= last_start + d ) {  $ ~~~~continue ;  $ ~~~} else {  $ ~~~~last_start = t [ i ] ;  $ ~~~~ans ++ ;  $ ~~~}  $ ~~}  $ ~}  $ ~cout << ans - 1 << "\n" ;  $ ~return 0 ;  $ }
long long int mod = 1e9 + 9 ;  $ int d , x , y ;  $ long long int fastexp ( long long int b , long long int p ) {  $ ~if ( p == 0 ) return 1 ;  $ ~long long int ans = fastexp ( b , p / 2 ) % mod ;  $ ~if ( p % 2 )  $ ~~return ( ( 1 LL * b * ans % mod ) * 1 LL * ans ) % mod ;  $ ~else  $ ~~return ( 1 LL * ans * ans + mod ) % mod ;  $ }  $ int main ( ) {  $ ~long long int a , n , b , k ;  $ ~string s ;  $ ~long long int v1 , v2 , v3 , sum = 0 ;  $ ~cin >> n >> a >> b >> k ;  $ ~cin >> s ;  $ ~for ( int h = 0 ; h < k ; h ++ ) {  $ ~~if ( s [ h ] == '+' ) {  $ ~~~v1 = fastexp ( a , n - h ) % mod ;  $ ~~~v2 = fastexp ( b , h ) % mod ;  $ ~~~v3 = ( v1 * v2 + mod ) % mod ;  $ ~~~sum = ( sum % mod + v3 % mod + mod ) % mod ;  $ ~~} else {  $ ~~~v1 = fastexp ( a , n - h ) ;  $ ~~~v2 = fastexp ( b , h ) ;  $ ~~~v3 = ( v1 * v2 + mod ) % mod ;  $ ~~~sum = ( sum % mod - v3 % mod + mod ) % mod ;  $ ~~}  $ ~}  $ ~long long int vl = ( n + 1 ) / k ;  $ ~long long int inv_a = fastexp ( a , mod - 2 ) % mod ;  $ ~long long int vv = ( ( inv_a % mod ) * ( b % mod ) + mod ) % mod ;  $ ~long long int vl1 = ( ( fastexp ( vv , k ) % mod ) ) % mod ;  $ ~if ( vl1 == 1 ) {  $ ~~long long int ans = ( ( vl * sum ) + mod ) % mod ;  $ ~~cout << ans << endl ;  $ ~~return 0 ;  $ ~}  $ ~long long int vl4 = fastexp ( vl1 , vl ) % mod ;  $ ~vl4 = ( vl4 - 1 + mod ) % mod ;  $ ~vl4 = ( vl4 * sum + mod ) % mod ;  $ ~long long int vl2 = ( ( ( vl1 + mod ) % mod ) - 1 + mod ) % mod ;  $ ~long long int vl3 = ( vl4 * ( fastexp ( vl2 , mod - 2 ) ) + mod ) % mod ;  $ ~cout << vl3 % mod << endl ;  $ }
int n , k , a , ans = 1 , tmp ;  $ int main ( ) {  $ ~cin >> n ;  $ ~while ( n -- ) {  $ ~~cin >> k >> a ;  $ ~~if ( a == 1 )  $ ~~~tmp = k + 1 ;  $ ~~else {  $ ~~~tmp = k ;  $ ~~~while ( a > 1 ) {  $ ~~~~a = ( a - 1 ) / 4 + 1 ;  $ ~~~~++ tmp ;  $ ~~~}  $ ~~}  $ ~~if ( ans < tmp ) ans = tmp ;  $ ~}  $ ~cout << ans << endl ;  $ ~return 0 ;  $ }
vector < int > a ;  $ int main ( ) {  $ ~long long n , z = 0 ;  $ ~cin >> n ;  $ ~for ( long long i = 1 ; i <= n ; i ++ ) {  $ ~~if ( ( i * ( i + 1 ) ) / 2 <= n )  $ ~~~a . push_back ( ( ( i + 1 ) * i ) / 2 ) ;  $ ~~else  $ ~~~break ;  $ ~}  $ ~for ( long long i = 0 ; i < a . size ( ) ; i ++ )  $ ~~if ( binary_search ( a . begin ( ) , a . end ( ) , ( n - a [ i ] ) ) ) {  $ ~~~cout << "YES" << endl ;  $ ~~~z ++ ;  $ ~~~break ;  $ ~~}  $ ~if ( z == 0 ) cout << "NO" << endl ;  $ ~return 0 ;  $ }
long long solve ( long long N ) {  $ ~long long cnt = 0 ;  $ ~for ( int n = 1 ; n <= 9 ; ++ n )  $ ~~if ( n <= N ) ++ cnt ;  $ ~for ( int n = 11 ; n <= 99 ; n += 11 )  $ ~~if ( n <= N ) ++ cnt ;  $ ~for ( long long w = 100 ; w + 1 <= N ; w *= 10 ) {  $ ~~for ( int n = 1 ; n <= 9 ; ++ n ) {  $ ~~~long long v = w * n + ( w - 10 ) + n ;  $ ~~~if ( v <= N ) {  $ ~~~~cnt += w / 10 ;  $ ~~~} else {  $ ~~~~if ( N % 10 >= n ) ++ cnt ;  $ ~~~~cnt += ( N - n * w ) / 10 ;  $ ~~~~return cnt ;  $ ~~~}  $ ~~}  $ ~}  $ ~return cnt ;  $ }  $ int main ( ) {  $ ~for ( long long l , r ; cin >> l >> r ; ) { cout << solve ( r ) - solve ( l - 1 ) << endl ; }  $ }
int main ( ) {  $ ~long long n , i ;  $ ~cin >> n ;  $ ~string s ;  $ ~cin >> s ;  $ ~if ( n == 1 ) {  $ ~~if ( s [ 0 ] == '0' )  $ ~~~cout << "No\n" ;  $ ~~else  $ ~~~cout << "Yes\n" ;  $ ~~return 0 ;  $ ~}  $ ~long long f = 0 ;  $ ~for ( i = 1 ; i < n - 1 ; i ++ ) {  $ ~~if ( s [ i ] == '0' ) {  $ ~~~if ( s [ i - 1 ] == '1' || s [ i + 1 ] == '1' )  $ ~~~~continue ;  $ ~~~else  $ ~~~~f = 1 ;  $ ~~} else {  $ ~~~if ( s [ i - 1 ] != '1' && s [ i + 1 ] != '1' )  $ ~~~~continue ;  $ ~~~else  $ ~~~~f = 1 ;  $ ~~}  $ ~}  $ ~if ( s [ 0 ] == s [ 1 ] ) f = 1 ;  $ ~if ( s [ n - 1 ] == s [ n - 2 ] ) f = 1 ;  $ ~if ( f == 0 )  $ ~~cout << "Yes\n" ;  $ ~else  $ ~~cout << "No\n" ;  $ ~return 0 ;  $ }
int isprime [ 4000000 ] ;  $ long long prime [ 2000000 ] ;  $ int cnt = 0 ;  $ int fac = 1 ;  $ void getprime ( ) {  $ ~for ( int i = 2 ; i < 4000000 ; i ++ ) isprime [ i ] = 1 ;  $ ~prime [ 1 ] = 0 ;  $ ~for ( int i = 2 ; i < 4000000 ; i ++ ) {  $ ~~if ( ! isprime [ i ] ) continue ;  $ ~~for ( int j = i * 2 ; j < 4000000 ; j += i ) isprime [ j ] = 0 ;  $ ~~prime [ cnt ++ ] = i ;  $ ~}  $ }  $ int isPrime ( long long n ) {  $ ~if ( n < 4000000 ) return isprime [ n ] ;  $ ~for ( int i = 0 ; prime [ i ] * prime [ i ] <= n ; i ++ )  $ ~~if ( n % prime [ i ] == 0 ) return 0 ;  $ ~return 1 ;  $ }  $ int main ( ) {  $ ~long long num ;  $ ~getprime ( ) ;  $ ~while ( cin >> num ) {  $ ~~int sum = 0 ;  $ ~~fac = 1 ;  $ ~~long long tem = num ;  $ ~~if ( isPrime ( num ) || num == 1 ) {  $ ~~~cout << 1 << endl << 0 << endl ;  $ ~~~continue ;  $ ~~}  $ ~~for ( int i = 0 ; i < cnt ; i ++ ) {  $ ~~~if ( num % prime [ i ] == 0 ) {  $ ~~~~while ( num % prime [ i ] == 0 ) {  $ ~~~~~if ( sum <= 2 ) fac *= prime [ i ] ;  $ ~~~~~sum ++ ;  $ ~~~~~num /= prime [ i ] ;  $ ~~~~~if ( sum >= 2 ) break ;  $ ~~~~}  $ ~~~}  $ ~~~if ( sum >= 2 ) break ;  $ ~~}  $ ~~if ( sum >= 2 && num != 1 ) {  $ ~~~cout << 1 << endl ;  $ ~~~cout << fac << endl ;  $ ~~} else  $ ~~~cout << 2 << endl ;  $ ~}  $ ~return 0 ;  $ }
const int M = 10000 + 10 ;  $ int a [ M ] ;  $ int main ( ) {  $ ~long long int n , m , k ;  $ ~cin >> n >> m >> k ;  $ ~long long int min_v = 1E+9 ;  $ ~for ( int i = 1 ; i <= n ; i ++ ) {  $ ~~cin >> a [ i ] ;  $ ~~if ( i % 2 == 1 && a [ i ] < min_v ) { min_v = a [ i ] ; }  $ ~}  $ ~if ( n % 2 == 0 ) {  $ ~~cout << "0" << endl ;  $ ~} else {  $ ~~long long int x = 2 * m / ( n + 1 ) ;  $ ~~long long int y = x * k ;  $ ~~long long int ans = ( y > min_v ? min_v : y ) ;  $ ~~cout << ans << endl ;  $ ~}  $ ~return 0 ;  $ }
int main ( ) {  $ ~int n , a , b , c , d , sum , sum1 , ans ;  $ ~cin >> n ;  $ ~cin >> a >> b >> c >> d ;  $ ~sum1 = a + b + c + d ;  $ ~ans = n ;  $ ~for ( int i = 1 ; i < n ; i ++ ) {  $ ~~cin >> a >> b >> c >> d ;  $ ~~sum = a + b + c + d ;  $ ~~if ( sum <= sum1 ) { ans -- ; }  $ ~}  $ ~cout << ans << endl ;  $ }
int main ( ) {  $ ~int n , t ;  $ ~while ( cin >> n >> t ) {  $ ~~if ( t < 10 )  $ ~~~while ( n -- ) { cout << t ; }  $ ~~else {  $ ~~~if ( n == 1 )  $ ~~~~cout << - 1 ;  $ ~~~else {  $ ~~~~cout << 1 ;  $ ~~~~n -- ;  $ ~~~~while ( n -- ) cout << 0 ;  $ ~~~}  $ ~~}  $ ~~cout << endl ;  $ ~}  $ ~return 0 ;  $ }
int main ( ) {  $ ~string sentence ;  $ ~char split [ 110 ] ;  $ ~getline ( cin , sentence ) ;  $ ~strcpy ( split , sentence . c_str ( ) ) ;  $ ~int track ;  $ ~int n_count = 0 ;  $ ~int i_count = 0 ;  $ ~int e_count = 0 ;  $ ~int t_count = 0 ;  $ ~int nineteen_count = 0 ;  $ ~for ( int i = 0 ; i < sentence . length ( ) ; i ++ ) {  $ ~~if ( split [ i ] == 'n' ) { n_count ++ ; }  $ ~~if ( split [ i ] == 'i' ) i_count ++ ;  $ ~~if ( split [ i ] == 'e' ) e_count ++ ;  $ ~~if ( split [ i ] == 't' ) t_count ++ ;  $ ~}  $ ~if ( n_count >= 3 && i_count >= 1 && e_count >= 3 && t_count >= 1 ) {  $ ~~nineteen_count ++ ;  $ ~~n_count -= 3 ;  $ ~~i_count -= 1 ;  $ ~~e_count -= 3 ;  $ ~~t_count -= 1 ;  $ ~~while ( true ) {  $ ~~~if ( n_count >= 2 && i_count >= 1 && e_count >= 3 && t_count >= 1 ) {  $ ~~~~nineteen_count ++ ;  $ ~~~~n_count -= 2 ;  $ ~~~~i_count -= 1 ;  $ ~~~~e_count -= 3 ;  $ ~~~~t_count -= 1 ;  $ ~~~} else  $ ~~~~break ;  $ ~~}  $ ~}  $ ~cout << nineteen_count << endl ;  $ }
const int mod = 1e9 + 7 ;  $ const int maxn = 1e6 + 5 ;  $ long long int power ( long long int base , long long int exp , long long int mod ) {  $ ~long long int res = 1 ;  $ ~while ( exp ) {  $ ~~if ( exp % 2 ) res *= base ;  $ ~~base *= base ;  $ ~~res %= mod ;  $ ~~base %= mod ;  $ ~~exp /= 2 ;  $ ~}  $ ~return res ;  $ }  $ long long int n , m , k ;  $ int main ( ) {  $ ~cin >> n >> m >> k ;  $ ~long long int ans = mod ;  $ ~for ( int i = 1 ; i <= n ; i ++ ) {  $ ~~long long int x ;  $ ~~cin >> x ;  $ ~~if ( i % 2 ) { ans = min ( ans , x ) ; }  $ ~}  $ ~if ( n % 2 == 0 ) ans = 0 ;  $ ~m = m * 2 ;  $ ~m /= ( n + 1 ) ;  $ ~cout << min ( ans , m * k ) << "\n" ;  $ ~return 0 ;  $ }
const int INF = 0 x3f3f3f3f ;  $ int main ( ) {  $ ~int n ;  $ ~cin >> n ;  $ ~int row [ n + 10 ] ;  $ ~long long ans [ n + 10 ] ;  $ ~for ( int i = 1 ; i <= n ; i ++ ) cin >> row [ i ] ;  $ ~for ( int i = 1 ; i <= n ; i ++ ) {  $ ~~long long cont = 0 ;  $ ~~int j = row [ i ] ;  $ ~~while ( cont < 102 and j != i ) {  $ ~~~cont ++ ;  $ ~~~j = row [ j ] ;  $ ~~}  $ ~~if ( cont > 1 ) ++ cont ;  $ ~~ans [ i ] = cont ;  $ ~~if ( row [ i ] == i ) ans [ i ] = 2 ;  $ ~~if ( ans [ i ] % 2 == 0 ) ans [ i ] /= 2 ;  $ ~}  $ ~bool flag = true ;  $ ~long long mult = ans [ 1 ] ;  $ ~for ( int i = 1 ; i <= n ; i ++ ) {  $ ~~if ( ans [ i ] == 103 ) {  $ ~~~cout << - 1 << endl ;  $ ~~~return 0 ;  $ ~~}  $ ~~mult = ( mult * ans [ i ] ) / __gcd ( mult , ans [ i ] ) ;  $ ~}  $ ~cout << ( flag ? mult : - 1 ) << endl ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~long long a , b , c , d , i , j ;  $ ~cin >> a >> b >> c >> d ;  $ ~for ( i = 0 ; i <= 100 ; i ++ ) {  $ ~~for ( j = 0 ; j <= 100 ; j ++ ) {  $ ~~~if ( ( b + a * i ) == ( d + c * j ) ) {  $ ~~~~cout << ( b + a * i ) << endl ;  $ ~~~~return 0 ;  $ ~~~}  $ ~~}  $ ~}  $ ~cout << "-1" << endl ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~string a ;  $ ~int n ;  $ ~cin >> a >> n ;  $ ~int l = a . length ( ) ;  $ ~if ( l % n ) {  $ ~~cout << "NO\n" ;  $ ~~return 0 ;  $ ~}  $ ~n = l / n ;  $ ~for ( int i = 0 ; i < l ; i += n ) {  $ ~~int end = i + n - 1 ;  $ ~~int begin = i ;  $ ~~while ( begin <= end ) {  $ ~~~if ( a [ begin ] == a [ end ] ) {  $ ~~~~begin ++ ;  $ ~~~~end -- ;  $ ~~~} else {  $ ~~~~cout << "NO\n" ;  $ ~~~~return 0 ;  $ ~~~}  $ ~~}  $ ~}  $ ~cout << "YES\n" ;  $ ~return 0 ;  $ }
long long MOD = 1000000007 ;  $ vector < long long > primes ;  $ void sieve_of_eratosthenes ( long long n ) {  $ ~primes . resize ( n ) ;  $ ~for ( long long i = 2 ; i < n ; ++ i ) primes [ i ] = i ;  $ ~for ( long long i = 2 ; i * i < n ; ++ i )  $ ~~if ( primes [ i ] )  $ ~~~for ( long long j = i * i ; j < n ; j += i ) primes [ j ] = 0 ;  $ ~for ( long long i = 1 ; i < n ; i ++ ) {  $ ~~if ( primes [ i ] == i ) {  $ ~~~primes [ i ] = primes [ i - 1 ] + 1 ;  $ ~~} else {  $ ~~~primes [ i ] = primes [ i - 1 ] ;  $ ~~}  $ ~}  $ }  $ vector < long long > pa ;  $ vector < long long > t ;  $ bool p ( long long a ) {  $ ~t . clear ( ) ;  $ ~while ( a > 0 ) {  $ ~~t . push_back ( a % 10 ) ;  $ ~~a /= 10 ;  $ ~}  $ ~for ( long long i = 0 ; i < t . size ( ) / 2 ; i ++ ) {  $ ~~if ( t [ i ] != t [ ( long long ) t . size ( ) - 1 - i ] ) return false ;  $ ~}  $ ~return true ;  $ }  $ int main ( ) {  $ ~long long P , Q ;  $ ~cin >> P >> Q ;  $ ~long long MX = 1300000 ;  $ ~sieve_of_eratosthenes ( MX ) ;  $ ~pa . resize ( MX , 0 ) ;  $ ~for ( long long i = 1 ; i < pa . size ( ) ; i ++ ) {  $ ~~if ( p ( i ) )  $ ~~~pa [ i ] = pa [ i - 1 ] + 1 ;  $ ~~else  $ ~~~pa [ i ] = pa [ i - 1 ] ;  $ ~}  $ ~for ( long long i = MX - 1 ; i > 0 ; i -- ) {  $ ~~if ( Q * primes [ i ] <= P * pa [ i ] ) {  $ ~~~cout << i << endl ;  $ ~~~return 0 ;  $ ~~}  $ ~}  $ ~cout << "Palindromic tree is better than splay tree" << endl ;  $ }
int main ( ) {  $ ~unsigned long long l1 , l2 , r1 , r2 , k , m = 0 ;  $ ~cin >> l1 >> r1 >> l2 >> r2 >> k ;  $ ~if ( ! ( r2 < l1 or r1 < l2 ) ) {  $ ~~if ( l1 <= l2 ) {  $ ~~~if ( r1 <= r2 ) {  $ ~~~~m = r1 - l2 + 1 - ( k >= l2 and k <= r1 ) ;  $ ~~~} else {  $ ~~~~m = r2 - l2 + 1 - ( k >= l2 and k <= r2 ) ;  $ ~~~}  $ ~~} else {  $ ~~~if ( r1 <= r2 ) {  $ ~~~~m = r1 - l1 + 1 - ( k >= l1 and k <= r1 ) ;  $ ~~~} else {  $ ~~~~m = r2 - l1 + 1 - ( k >= l1 and k <= r2 ) ;  $ ~~~}  $ ~~}  $ ~}  $ ~cout << m << '\n' ;  $ }
int l1 , l2 , l3 ;  $ int a [ 5 ] , b [ 5 ] , c [ 5 ] , d [ 5 ] , j , i ;  $ int dix [ ] = { 1 , 0 , - 1 , 0 } ;  $ int diy [ ] = { 0 , 1 , 0 , - 1 } ;  $ int main ( ) {  $ ~for ( i = 1 ; i <= 3 ; i ++ ) { cin >> a [ i ] >> b [ i ] ; }  $ ~l1 = abs ( a [ 1 ] - a [ 2 ] ) * abs ( a [ 1 ] - a [ 2 ] ) + abs ( b [ 1 ] - b [ 2 ] ) * abs ( b [ 1 ] - b [ 2 ] ) ;  $ ~l2 = abs ( a [ 2 ] - a [ 3 ] ) * abs ( a [ 2 ] - a [ 3 ] ) + abs ( b [ 2 ] - b [ 3 ] ) * abs ( b [ 2 ] - b [ 3 ] ) ;  $ ~l3 = abs ( a [ 3 ] - a [ 1 ] ) * abs ( a [ 3 ] - a [ 1 ] ) + abs ( b [ 3 ] - b [ 1 ] ) * abs ( b [ 3 ] - b [ 1 ] ) ;  $ ~if ( l1 + l2 == l3 || l1 + l3 == l2 || l2 + l3 == l1 ) {  $ ~~if ( l1 != 0 && l2 != 0 && l3 != 0 ) {  $ ~~~cout << "RIGHT" << endl ;  $ ~~~return 0 ;  $ ~~}  $ ~}  $ ~for ( i = 1 ; i <= 3 ; i ++ ) {  $ ~~c [ 1 ] = a [ 1 ] , c [ 2 ] = a [ 2 ] , c [ 3 ] = a [ 3 ] ;  $ ~~d [ 1 ] = b [ 1 ] , d [ 2 ] = b [ 2 ] , d [ 3 ] = b [ 3 ] ;  $ ~~for ( j = 0 ; j < 4 ; j ++ ) {  $ ~~~c [ i ] = a [ i ] + dix [ j ] ;  $ ~~~d [ i ] = b [ i ] + diy [ j ] ;  $ ~~~l1 = abs ( c [ 1 ] - c [ 2 ] ) * abs ( c [ 1 ] - c [ 2 ] ) + abs ( d [ 1 ] - d [ 2 ] ) * abs ( d [ 1 ] - d [ 2 ] ) ;  $ ~~~l2 = abs ( c [ 2 ] - c [ 3 ] ) * abs ( c [ 2 ] - c [ 3 ] ) + abs ( d [ 2 ] - d [ 3 ] ) * abs ( d [ 2 ] - d [ 3 ] ) ;  $ ~~~l3 = abs ( c [ 3 ] - c [ 1 ] ) * abs ( c [ 3 ] - c [ 1 ] ) + abs ( d [ 3 ] - d [ 1 ] ) * abs ( d [ 3 ] - d [ 1 ] ) ;  $ ~~~if ( l1 + l2 == l3 || l1 + l3 == l2 || l2 + l3 == l1 ) {  $ ~~~~if ( l1 != 0 && l2 != 0 && l3 != 0 ) {  $ ~~~~~cout << "ALMOST" << endl ;  $ ~~~~~return 0 ;  $ ~~~~}  $ ~~~}  $ ~~}  $ ~}  $ ~cout << "NEITHER" << endl ;  $ }
int main ( ) {  $ ~int k ;  $ ~cin >> k ;  $ ~while ( k > 0 ) {  $ ~~int first_row = - 1 ;  $ ~~int second_row ;  $ ~~int first_col = - 1 ;  $ ~~int second_col ;  $ ~~for ( int i = 0 ; i < 8 ; i ++ ) {  $ ~~~for ( int j = 0 ; j < 8 ; j ++ ) {  $ ~~~~char c ;  $ ~~~~cin >> c ;  $ ~~~~if ( c == 'K' ) {  $ ~~~~~if ( first_col == - 1 ) {  $ ~~~~~~first_row = i ;  $ ~~~~~~first_col = j ;  $ ~~~~~} else {  $ ~~~~~~second_col = j ;  $ ~~~~~~second_row = i ;  $ ~~~~~}  $ ~~~~}  $ ~~~}  $ ~~}  $ ~~int dif_row = second_row - first_row ;  $ ~~int dif_col = second_col - first_col ;  $ ~~if ( dif_row < 0 ) dif_row *= - 1 ;  $ ~~if ( dif_col < 0 ) dif_col *= - 1 ;  $ ~~if ( dif_col % 4 == 0 && dif_row % 4 == 0 ) {  $ ~~~cout << "YES" << endl ;  $ ~~} else {  $ ~~~cout << "NO" << endl ;  $ ~~}  $ ~~k -- ;  $ ~}  $ ~return 0 ;  $ }
const int maxn = 1e2 + 20 ;  $ int n ;  $ string s [ maxn ] , t [ maxn ] , x [ maxn ] ;  $ bool is ( ) {  $ ~for ( int i = 0 ; i < n ; i ++ )  $ ~~if ( s [ i ] != t [ i ] ) return 0 ;  $ ~return 1 ;  $ }  $ void rotate ( ) {  $ ~for ( int i = 0 ; i < n ; i ++ ) {  $ ~~x [ i ] = "" ;  $ ~~for ( int j = 0 ; j < n ; j ++ ) x [ i ] += s [ j ] [ n - i - 1 ] ;  $ ~}  $ ~for ( int i = 0 ; i < n ; i ++ ) s [ i ] = x [ i ] ;  $ }  $ bool solve ( ) {  $ ~for ( int i = 0 ; i < 2 ; i ++ ) {  $ ~~for ( int i = 0 ; i < n ; i ++ ) reverse ( s [ i ] . begin ( ) , s [ i ] . end ( ) ) ;  $ ~~for ( int j = 0 ; j < 4 ; j ++ ) {  $ ~~~if ( is ( ) ) return 1 ;  $ ~~~rotate ( ) ;  $ ~~}  $ ~}  $ ~return 0 ;  $ }  $ int main ( ) {  $ ~cin >> n ;  $ ~for ( int i = 0 ; i < n ; i ++ ) cin >> s [ i ] ;  $ ~for ( int i = 0 ; i < n ; i ++ ) cin >> t [ i ] ;  $ ~bool f = 0 ;  $ ~f |= solve ( ) ;  $ ~for ( int i = 0 ; i < n - i - 1 ; i ++ ) swap ( s [ i ] , s [ n - i - 1 ] ) ;  $ ~f |= solve ( ) ;  $ ~cout << ( f ? "Yes" : "No" ) << endl ;  $ }
vector < long long > prime ( 10000005 , 0 ) ;  $ long long mM ( long long a , long long b , long long mod ) {  $ ~long long res = 0 ;  $ ~a %= mod ;  $ ~while ( b ) {  $ ~~if ( b & 1 ) res = ( res + a ) % mod ;  $ ~~a = ( 2 * a ) % mod ;  $ ~~b >> = 1 ;  $ ~}  $ ~return res ;  $ }  $ long long fpow ( long long first , long long second , long long p ) {  $ ~first = first % p ;  $ ~long long res = 1 ;  $ ~while ( second ) {  $ ~~if ( second & 1 ) res = ( res * first ) % p ;  $ ~~res %= p ;  $ ~~if ( res < 0 ) res = ( res + p ) % p ;  $ ~~second = second >> 1 ;  $ ~~first = ( first * first ) % p ;  $ ~~if ( first < 0 ) first = ( first + p ) % p ;  $ ~~first %= p ;  $ ~}  $ ~return res ;  $ }  $ long long inv ( long long n ) {  $ ~return fpow ( n , 1000000007 - 2 , 1000000007 ) ;  $ }  $ long long modmul ( long long first , long long second ) {  $ ~return ( ( first % 1000000007 ) * ( second % 1000000007 ) ) % 1000000007 ;  $ }  $ long long modadd ( long long first , long long second ) {  $ ~long long temp = first % 1000000007 + second % 1000000007 ;  $ ~temp %= 1000000007 ;  $ ~if ( temp < 0 ) temp = ( temp + 1000000007 ) % 1000000007 ;  $ ~return temp ;  $ }  $ void sieve ( ) {  $ ~prime [ 1 ] = 1 ;  $ ~for ( long long i = 2 ; i < 10000005 ; i ++ )  $ ~~if ( ! prime [ i ] )  $ ~~~for ( long long j = i ; j < 10000005 ; j += i )  $ ~~~~if ( ! prime [ j ] ) prime [ j ] = i ;  $ }  $ int main ( ) {  $ ~long long t ;  $ ~t = 1 ;  $ ~while ( t -- ) {  $ ~~long long n ;  $ ~~cin >> n ;  $ ~~vector < string > s ( n ) ;  $ ~~for ( int i = 0 ; i < n ; i ++ ) cin >> s [ i ] ;  $ ~~string w ;  $ ~~char tc ;  $ ~~cin >> w >> tc ;  $ ~~vector < long long > check ( w . size ( ) , 0 ) ;  $ ~~for ( int i = 0 ; i < n ; i ++ )  $ ~~~for ( int j = 0 ; j < w . size ( ) ; j ++ ) {  $ ~~~~string s1 = w . substr ( j , s [ i ] . size ( ) ) ;  $ ~~~~bool ok = true ;  $ ~~~~if ( s1 . size ( ) < s [ i ] . size ( ) )  $ ~~~~~ok = false ;  $ ~~~~else {  $ ~~~~~string temp = s [ i ] ;  $ ~~~~~transform ( temp . begin ( ) , temp . end ( ) , temp . begin ( ) , : : tolower ) ;  $ ~~~~~transform ( s1 . begin ( ) , s1 . end ( ) , s1 . begin ( ) , : : tolower ) ;  $ ~~~~~if ( s1 != temp ) ok = false ;  $ ~~~~}  $ ~~~~if ( ok )  $ ~~~~~for ( int k = j ; k < j + s [ i ] . size ( ) ; k ++ ) check [ k ] = 1 ;  $ ~~~}  $ ~~for ( int i = 0 ; i < w . size ( ) ; i ++ )  $ ~~~if ( check [ i ] ) {  $ ~~~~char temp = w [ i ] ;  $ ~~~~if ( temp >= 'A' && temp <= 'Z' )  $ ~~~~~temp -= 'A' ;  $ ~~~~else  $ ~~~~~temp -= 'a' ;  $ ~~~~temp += 'a' ;  $ ~~~~if ( temp == tc && tc == 'a' ) {  $ ~~~~~if ( w [ i ] >= 'a' && w [ i ] <= 'z' )  $ ~~~~~~w [ i ] = 'b' ;  $ ~~~~~else  $ ~~~~~~w [ i ] = 'B' ;  $ ~~~~} else if ( temp == tc && tc != 'a' ) {  $ ~~~~~if ( w [ i ] >= 'a' && w [ i ] <= 'z' )  $ ~~~~~~w [ i ] = 'a' ;  $ ~~~~~else  $ ~~~~~~w [ i ] = 'A' ;  $ ~~~~} else {  $ ~~~~~if ( w [ i ] >= 'a' && w [ i ] <= 'z' )  $ ~~~~~~w [ i ] = tc ;  $ ~~~~~else  $ ~~~~~~w [ i ] = tc - 'a' + 'A' ;  $ ~~~~}  $ ~~~}  $ ~~cout << w << "\n" ;  $ ~}  $ }
int main ( ) {  $ ~long long rest = 0 , t , cou = 0 , minn = 1e7 , index = 1e8 ;  $ ~long long a [ 105 ] [ 2 ] ;  $ ~while ( cin >> t >> cou ) {  $ ~~for ( int i = 0 ; i < t ; i ++ ) {  $ ~~~cin >> a [ i ] [ 0 ] >> a [ i ] [ 1 ] ;  $ ~~~if ( a [ i ] [ 1 ] != 0 and a [ i ] [ 0 ] < cou ) {  $ ~~~~minn = min ( minn , a [ i ] [ 1 ] ) ;  $ ~~~} else if ( a [ i ] [ 0 ] <= cou )  $ ~~~~index = min ( index , a [ i ] [ 1 ] ) ;  $ ~~}  $ ~~rest = 100 - minn ;  $ ~~if ( rest == 100 || minn == 1e7 ) {  $ ~~~if ( index != 0 )  $ ~~~~cout << "-1" << endl ;  $ ~~~else  $ ~~~~cout << 0 << endl ;  $ ~~} else  $ ~~~cout << rest << endl ;  $ ~}  $ ~return 0 ;  $ }
int main ( ) {  $ ~long long t1 , t2 , x1 , x2 , t0 , res_x , res_y ;  $ ~cin >> t1 >> t2 >> x1 >> x2 >> t0 ;  $ ~double t , ct = 1e99 ;  $ ~while ( x1 >= 0 && x2 >= 0 ) {  $ ~~t = ( t1 * x1 + t2 * x2 * 1.0 ) / ( x1 + x2 ) ;  $ ~~if ( t < t0 ) {  $ ~~~x1 -- ;  $ ~~~continue ;  $ ~~}  $ ~~if ( t < ct ) {  $ ~~~ct = t ;  $ ~~~res_x = x1 ;  $ ~~~res_y = x2 ;  $ ~~}  $ ~~x2 -- ;  $ ~}  $ ~cout << res_x << ' ' << res_y << endl ;  $ }
int main ( ) {  $ ~int n , i ;  $ ~string str ;  $ ~cin >> n ;  $ ~cin >> str ;  $ ~int flag = 0 ;  $ ~int count = 0 ;  $ ~for ( i = 0 ; i < n && flag == 0 ; i ++ ) {  $ ~~if ( str [ i ] != '>' ) {  $ ~~~count ++ ;  $ ~~} else {  $ ~~~flag = 1 ;  $ ~~}  $ ~}  $ ~flag = 0 ;  $ ~for ( i = n - 1 ; i >= 0 && flag == 0 ; i -- ) {  $ ~~if ( str [ i ] != '<' ) {  $ ~~~count ++ ;  $ ~~} else {  $ ~~~flag = 1 ;  $ ~~}  $ ~}  $ ~cout << count << '\n' ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~int ans = 0 , n , mx = 0 ;  $ ~bool inc = 1 ;  $ ~cin >> n ;  $ ~int arr [ n + 1 ] ;  $ ~for ( int i = 1 ; i <= n ; i ++ ) cin >> arr [ i ] ;  $ ~if ( arr [ n ] == n )  $ ~~mx = n - 1 ;  $ ~else {  $ ~~for ( int i = 1 ; i <= n ; i ++ ) {  $ ~~~if ( 1000 - arr [ i ] == n - i ) { mx = max ( mx , n - i ) ; }  $ ~~~if ( arr [ i ] == i && i > 1 ) mx = max ( mx , i - 1 ) ;  $ ~~}  $ ~~for ( int i = 1 ; i <= n ; i ++ ) {  $ ~~~if ( i < n && arr [ i ] + 1 == arr [ i + 1 ] ) {  $ ~~~~int st = i , en = - 1 ;  $ ~~~~for ( int j = i + 1 ; j <= n ; j ++ ) {  $ ~~~~~if ( arr [ j ] == arr [ j - 1 ] + 1 )  $ ~~~~~~continue ;  $ ~~~~~else {  $ ~~~~~~en = j - 1 ;  $ ~~~~~~break ;  $ ~~~~~}  $ ~~~~}  $ ~~~~if ( en == - 1 ) en = n ;  $ ~~~~mx = max ( mx , en - st - 1 ) ;  $ ~~~}  $ ~~}  $ ~}  $ ~cout << mx << "\n" ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~int n , m , i , j , l = 0 ;  $ ~cin >> n ;  $ ~for ( i = 1 ; ; i ++ ) {  $ ~~j = ( n * i ) + 1 ;  $ ~~for ( int k = 2 ; k < j ; k ++ ) {  $ ~~~if ( j % k == 0 ) {  $ ~~~~l = 1 ;  $ ~~~~break ;  $ ~~~}  $ ~~}  $ ~~if ( l == 1 ) {  $ ~~~cout << i << endl ;  $ ~~~break ;  $ ~~}  $ ~}  $ ~return 0 ;  $ }
int main ( ) {  $ ~int n , d ;  $ ~cin >> n >> d ;  $ ~vector < int > v ( n , 0 ) ;  $ ~for ( int i = 0 ; i < n ; i ++ ) {  $ ~~int point ;  $ ~~cin >> point ;  $ ~~v [ i ] = point ;  $ ~}  $ ~long long result = 0 ;  $ ~for ( int right = 0 , left = 0 ; right < n ; right ++ ) {  $ ~~while ( v [ right ] - v [ left ] > d ) { left ++ ; }  $ ~~result += ( long long ) ( right - left ) * ( right - left - 1 ) / 2 ;  $ ~}  $ ~cout << result << endl ;  $ ~return 0 ;  $ }
int n ;  $ int main ( ) {  $ ~int n ;  $ ~cin >> n ;  $ ~int thomasT = 0 ;  $ ~int temp = 0 ;  $ ~for ( int i = 0 ; i < 4 ; i ++ ) {  $ ~~cin >> temp ;  $ ~~thomasT += temp ;  $ ~}  $ ~int studentTS [ n - 1 ] ;  $ ~for ( int i = 0 ; i < ( n - 1 ) ; i ++ ) studentTS [ i ] = 0 ;  $ ~for ( int i = 0 ; i < ( n - 1 ) ; i ++ ) {  $ ~~for ( int j = 0 ; j < 4 ; j ++ ) {  $ ~~~cin >> temp ;  $ ~~~studentTS [ i ] += temp ;  $ ~~}  $ ~}  $ ~sort ( studentTS , studentTS + ( n - 1 ) ) ;  $ ~int ans = 1 ;  $ ~for ( int i = 0 ; i < ( n - 1 ) ; i ++ )  $ ~~if ( studentTS [ i ] > thomasT ) ans += 1 ;  $ ~cout << ans << endl ;  $ ~return 0 ;  $ }
vector < int > vec [ 3 ] ;  $ map < string , int > like ;  $ int diff , mat [ 10 ] [ 10 ] , ans , a , b , c ;  $ int cal ( ) {  $ ~int sum = 0 , i , j , k ;  $ ~for ( i = 0 ; i < 3 ; i ++ ) {  $ ~~for ( j = 0 ; j < vec [ i ] . size ( ) ; j ++ )  $ ~~~for ( k = 0 ; k < vec [ i ] . size ( ) ; k ++ ) sum += mat [ vec [ i ] [ j ] ] [ vec [ i ] [ k ] ] ;  $ ~}  $ ~return sum ;  $ }  $ void count ( int now ) {  $ ~if ( now == 7 ) {  $ ~~if ( vec [ 0 ] . size ( ) && vec [ 1 ] . size ( ) && vec [ 2 ] . size ( ) ) {  $ ~~~int x [ ] = { a / vec [ 0 ] . size ( ) , b / vec [ 1 ] . size ( ) , c / vec [ 2 ] . size ( ) } ;  $ ~~~sort ( x , x + 3 ) ;  $ ~~~if ( x [ 2 ] - x [ 0 ] < diff ) {  $ ~~~~diff = x [ 2 ] - x [ 0 ] ;  $ ~~~~ans = cal ( ) ;  $ ~~~} else if ( x [ 2 ] - x [ 0 ] == diff )  $ ~~~~ans = max ( ans , cal ( ) ) ;  $ ~~}  $ ~~return ;  $ ~}  $ ~for ( int i = 0 ; i < 3 ; i ++ ) {  $ ~~vec [ i ] . push_back ( now ) ;  $ ~~count ( now + 1 ) ;  $ ~~vec [ i ] . pop_back ( ) ;  $ ~}  $ }  $ int main ( ) {  $ ~like [ "Anka" ] = 0 ;  $ ~like [ "Chapay" ] = 1 ;  $ ~like [ "Cleo" ] = 2 ;  $ ~like [ "Troll" ] = 3 ;  $ ~like [ "Dracul" ] = 4 ;  $ ~like [ "Snowy" ] = 5 ;  $ ~like [ "Hexadecimal" ] = 6 ;  $ ~int n , i ;  $ ~string name1 , str , name2 ;  $ ~while ( cin >> n ) {  $ ~~diff = ( 1 << 31 ) - 1 ;  $ ~~for ( i = 0 ; i < 3 ; i ++ ) vec [ i ] . clear ( ) ;  $ ~~memset ( mat , 0 , sizeof ( mat ) ) ;  $ ~~for ( i = 0 ; i < n ; i ++ ) {  $ ~~~cin >> name1 >> str >> name2 ;  $ ~~~mat [ like [ name1 ] ] [ like [ name2 ] ] ++ ;  $ ~~}  $ ~~cin >> a >> b >> c ;  $ ~~count ( 0 ) ;  $ ~~cout << diff << " " << ans << endl ;  $ ~}  $ }
int cnt [ 101 ] ;  $ int main ( ) {  $ ~string s ;  $ ~cin >> s ;  $ ~for ( int i = 0 ; i < s . length ( ) ; i ++ ) cnt [ s [ i ] - 'a' ] ++ ;  $ ~cout << min ( ( cnt [ 13 ] - 1 ) / 2 , min ( cnt [ 4 ] / 3 , min ( cnt [ 8 ] , cnt [ 19 ] ) ) ) << endl ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~string a , b ;  $ ~int c , d , cnt ;  $ ~int flag ;  $ ~while ( cin >> a >> b ) {  $ ~~if ( a . size ( ) != b . size ( ) ) {  $ ~~~cout << "NO" << endl ;  $ ~~~continue ;  $ ~~} else {  $ ~~~flag = 1 ;  $ ~~~cnt = 0 ;  $ ~~~for ( int i = 0 ; i < a . size ( ) ; i ++ ) {  $ ~~~~if ( a [ i ] != b [ i ] && cnt == 0 ) {  $ ~~~~~cnt ++ ;  $ ~~~~~c = i ;  $ ~~~~} else if ( a [ i ] != b [ i ] && cnt == 1 ) {  $ ~~~~~cnt ++ ;  $ ~~~~~d = i ;  $ ~~~~} else if ( a [ i ] != b [ i ] && cnt == 2 ) {  $ ~~~~~cout << "NO" << endl ;  $ ~~~~~flag = 0 ;  $ ~~~~~break ;  $ ~~~~}  $ ~~~}  $ ~~~if ( flag == 0 ) {  $ ~~~~continue ;  $ ~~~} else {  $ ~~~~if ( cnt == 1 ) {  $ ~~~~~cout << "NO" << endl ;  $ ~~~~~continue ;  $ ~~~~}  $ ~~~~if ( a [ c ] == b [ d ] && a [ d ] == b [ c ] ) {  $ ~~~~~cout << "YES" << endl ;  $ ~~~~} else {  $ ~~~~~cout << "NO" << endl ;  $ ~~~~}  $ ~~~}  $ ~~}  $ ~}  $ ~return 0 ;  $ }
int main ( ) {  $ ~signed long long int a , b , c , d , k , q , l , ou ;  $ ~cin >> a >> b >> c >> d >> k ;  $ ~q = max ( a , c ) ;  $ ~l = min ( b , d ) ;  $ ~ou = l - q + 1 ;  $ ~if ( k <= l && k >= q ) ou -- ;  $ ~if ( ou < 0 ) ou = 0 ;  $ ~cout << ou << endl ;  $ ~return 0 ;  $ }
char str1 [ 10010 ] ;  $ char str2 [ 10010 ] ;  $ int dp [ 5050 ] [ 5050 ] ;  $ int main ( ) {  $ ~cin >> str1 + 1 ;  $ ~cin >> str2 + 1 ;  $ ~int lenth1 = strlen ( str1 + 1 ) ;  $ ~int lenth2 = strlen ( str2 + 1 ) ;  $ ~int i , j ;  $ ~int sum = 0 ;  $ ~for ( i = 1 ; i <= lenth1 ; i ++ )  $ ~~for ( j = 1 ; j <= lenth2 ; j ++ ) {  $ ~~~dp [ i ] [ j ] = dp [ i ] [ j - 1 ] ;  $ ~~~if ( str1 [ i ] == str2 [ j ] ) {  $ ~~~~dp [ i ] [ j ] = ( dp [ i ] [ j ] + dp [ i - 1 ] [ j - 1 ] + 1 ) % 1000000007 ;  $ ~~~~sum = ( sum + dp [ i - 1 ] [ j - 1 ] + 1 ) % 1000000007 ;  $ ~~~}  $ ~~}  $ ~cout << sum << endl ;  $ }
int main ( ) {  $ ~long long n , m , k , cnt , mn = 1e9 ;  $ ~cin >> n >> m >> k ;  $ ~for ( int i = 0 ; i < n ; i ++ ) {  $ ~~int x ;  $ ~~cin >> x ;  $ ~~if ( i % 2 == 0 ) mn = min ( mn , 1 ll * x ) ;  $ ~}  $ ~cnt = m / ( ( n + 1 ) / 2 ) ;  $ ~cnt *= k ;  $ ~long long ans = min ( cnt , mn ) ;  $ ~if ( n % 2 == 0 ) ans = 0 ;  $ ~cout << ans << endl ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~int a , b , rev , i ;  $ ~string st ;  $ ~cin >> st ;  $ ~a = ( st [ 0 ] - 48 ) * 10 + ( st [ 1 ] - 48 ) ;  $ ~b = ( st [ 3 ] - 48 ) * 10 + ( st [ 4 ] - 48 ) ;  $ ~rev = ( st [ 1 ] - 48 ) * 10 + ( st [ 0 ] - 48 ) ;  $ ~if ( a == 23 && b < 32 ) {  $ ~~cout << "23:32\n" ;  $ ~} else if ( a == 23 && b >= 32 ) {  $ ~~cout << "00:00\n" ;  $ ~} else if ( rev > b && rev <= 59 ) {  $ ~~cout << st [ 0 ] << st [ 1 ] << ":" << rev << endl ;  $ ~} else {  $ ~~for ( i = 1 ; ; i ++ ) {  $ ~~~if ( st [ 1 ] - 48 + i >= 1 && st [ 1 ] - 48 + i <= 5 ) {  $ ~~~~cout << st [ 0 ] << st [ 1 ] - 48 + i << ":" << st [ 1 ] - 48 + i << st [ 0 ] << endl ;  $ ~~~~break ;  $ ~~~} else if ( st [ 1 ] - 48 + i == 10 ) {  $ ~~~~cout << st [ 0 ] - 48 + 1 << "0:0" << st [ 0 ] - 48 + 1 << endl ;  $ ~~~~break ;  $ ~~~} else {  $ ~~~~continue ;  $ ~~~}  $ ~~}  $ ~}  $ ~return 0 ;  $ }
int main ( ) {  $ ~int n , m , inds = - 1 ;  $ ~string s , t ;  $ ~cin >> n >> m >> s >> t ;  $ ~for ( int i = 0 ; i < n ; ++ i )  $ ~~if ( s [ i ] == '*' ) inds = 1 ;  $ ~if ( inds == - 1 && s != t ) {  $ ~~cout << "NO" << endl ;  $ ~~return 0 ;  $ ~}  $ ~if ( m + 1 < n ) {  $ ~~cout << "NO" << endl ;  $ ~~return 0 ;  $ ~}  $ ~for ( int i = n - 1 , j = m - 1 ; i >= 0 && j >= 0 ; -- i , -- j ) {  $ ~~if ( s [ i ] == t [ j ] )  $ ~~~s [ i ] = '*' ;  $ ~~else if ( s [ i ] == '*' )  $ ~~~break ;  $ ~~else {  $ ~~~cout << "NO" << endl ;  $ ~~~return 0 ;  $ ~~}  $ ~}  $ ~for ( int i = 0 ; i < s . size ( ) ; ++ i ) {  $ ~~if ( s [ i ] == t [ i ] )  $ ~~~s [ i ] = '*' ;  $ ~~else if ( s [ i ] == '*' )  $ ~~~break ;  $ ~}  $ ~for ( int i = 0 ; i < n ; ++ i ) {  $ ~~if ( s [ i ] == '*' || s [ i ] == ' ' )  $ ~~~continue ;  $ ~~else {  $ ~~~cout << "NO" << endl ;  $ ~~~return 0 ;  $ ~~}  $ ~}  $ ~cout << "YES" << endl ;  $ }
int main ( ) {  $ ~int k ;  $ ~cin >> k ;  $ ~while ( k > 0 ) {  $ ~~int first_row = - 1 ;  $ ~~int second_row ;  $ ~~int first_col = - 1 ;  $ ~~int second_col ;  $ ~~for ( int i = 0 ; i < 8 ; i ++ ) {  $ ~~~for ( int j = 0 ; j < 8 ; j ++ ) {  $ ~~~~char c ;  $ ~~~~cin >> c ;  $ ~~~~if ( c == 'K' ) {  $ ~~~~~if ( first_col == - 1 ) {  $ ~~~~~~first_row = i ;  $ ~~~~~~first_col = j ;  $ ~~~~~} else {  $ ~~~~~~second_col = j ;  $ ~~~~~~second_row = i ;  $ ~~~~~}  $ ~~~~}  $ ~~~}  $ ~~}  $ ~~int dif_row = second_row - first_row ;  $ ~~int dif_col = second_col - first_col ;  $ ~~if ( dif_row < 0 ) dif_row *= - 1 ;  $ ~~if ( dif_col < 0 ) dif_col *= - 1 ;  $ ~~int dif = dif_col + dif_row ;  $ ~~if ( dif_col % 4 == 0 && dif_row % 4 == 0 ) {  $ ~~~cout << "YES" << endl ;  $ ~~} else {  $ ~~~cout << "NO" << endl ;  $ ~~}  $ ~~k -- ;  $ ~}  $ ~return 0 ;  $ }
int par [ 200001 ] ;  $ vector < int > v ;  $ int main ( ) {  $ ~int n ;  $ ~cin >> n ;  $ ~for ( int i = 2 ; i <= n ; i ++ ) cin >> par [ i ] ;  $ ~int cur = n ;  $ ~while ( cur != 1 ) {  $ ~~v . push_back ( cur ) ;  $ ~~cur = par [ cur ] ;  $ ~}  $ ~v . push_back ( cur ) ;  $ ~reverse ( v . begin ( ) , v . end ( ) ) ;  $ ~for ( int i = 0 ; i < ( int ) v . size ( ) ; i ++ ) {  $ ~~cout << v [ i ] ;  $ ~~if ( i != ( int ) v . size ( ) - 1 ) cout << ' ' ;  $ ~}  $ ~cout << endl ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~int n , m , g ;  $ ~cin >> n >> m ;  $ ~int arr [ 105 ] ;  $ ~for ( int i = 0 ; i < n ; i ++ ) { cin >> arr [ i ] ; }  $ ~for ( int i = n ; i ; ) {  $ ~~for ( int j = 0 ; j < n ; j ++ ) {  $ ~~~if ( arr [ j ] > 0 ) {  $ ~~~~arr [ j ] -= m ;  $ ~~~~if ( arr [ j ] <= 0 ) {  $ ~~~~~g = j ;  $ ~~~~~i -- ;  $ ~~~~}  $ ~~~}  $ ~~}  $ ~}  $ ~cout << g + 1 << endl ;  $ ~return 0 ;  $ }
int Plos ( int x , int y , int n ) {  $ ~int P1 ;  $ ~if ( y == 0 ) {  $ ~~P1 = 1 ;  $ ~} else if ( y == n ) {  $ ~~P1 = 3 ;  $ ~} else if ( x == 0 ) {  $ ~~P1 = 4 ;  $ ~} else if ( x == n ) {  $ ~~P1 = 2 ;  $ ~}  $ ~return P1 ;  $ }  $ enum Posution { p1 = 1 , p2 , p3 , p4 } ;  $ int fun2 ( int x1 , int y1 , int x2 , int y2 , int n , Posution T1 , bool b1 ) {  $ ~int Md = 0 ;  $ ~while ( true ) {  $ ~~if ( T1 == p1 ) {  $ ~~~if ( y1 == y2 ) {  $ ~~~~Md += abs ( x1 - x2 ) ;  $ ~~~~break ;  $ ~~~}  $ ~~~if ( b1 == false ) {  $ ~~~~Md += n - x1 ;  $ ~~~~x1 = n ;  $ ~~~~T1 = ( Posution ) ( p2 ) ;  $ ~~~} else {  $ ~~~~Md += x1 ;  $ ~~~~x1 = 0 ;  $ ~~~~T1 = ( Posution ) ( p4 ) ;  $ ~~~}  $ ~~} else if ( T1 == p2 ) {  $ ~~~if ( x1 == x2 ) {  $ ~~~~Md += abs ( y1 - y2 ) ;  $ ~~~~break ;  $ ~~~}  $ ~~~if ( b1 == false ) {  $ ~~~~Md += n - y1 ;  $ ~~~~y1 = n ;  $ ~~~~T1 = ( Posution ) ( p3 ) ;  $ ~~~} else {  $ ~~~~Md += y1 ;  $ ~~~~y1 = 0 ;  $ ~~~~T1 = ( Posution ) ( p1 ) ;  $ ~~~}  $ ~~} else if ( T1 == p3 ) {  $ ~~~if ( y1 == y2 ) {  $ ~~~~Md += abs ( x1 - x2 ) ;  $ ~~~~break ;  $ ~~~}  $ ~~~if ( b1 == false ) {  $ ~~~~Md += x1 ;  $ ~~~~T1 = ( Posution ) ( p4 ) ;  $ ~~~~x1 = 0 ;  $ ~~~} else {  $ ~~~~Md += n - x1 ;  $ ~~~~x1 = n ;  $ ~~~~T1 = ( Posution ) ( p2 ) ;  $ ~~~}  $ ~~} else if ( T1 == p4 ) {  $ ~~~if ( x1 == x2 ) {  $ ~~~~Md += abs ( y1 - y2 ) ;  $ ~~~~break ;  $ ~~~}  $ ~~~if ( b1 == false ) {  $ ~~~~T1 = ( Posution ) ( p1 ) ;  $ ~~~~Md += y1 ;  $ ~~~~y1 = 0 ;  $ ~~~} else {  $ ~~~~Md += n - y1 ;  $ ~~~~y1 = n ;  $ ~~~~T1 = ( Posution ) ( p3 ) ;  $ ~~~}  $ ~~}  $ ~}  $ ~return Md ;  $ }  $ int main ( ) {  $ ~int n , x1 , y1 , x2 , y2 ;  $ ~ifstream ff ( "file.txt" ) ;  $ ~cin >> n >> x1 >> y1 >> x2 >> y2 ;  $ ~if ( x1 == x2 && y1 == y2 ) {  $ ~~cout << 0 << endl ;  $ ~~return 0 ;  $ ~}  $ ~int Mv = 0 , Md = 0 ;  $ ~int P1 = Plos ( x1 , y1 , n ) ;  $ ~Posution T1 ;  $ ~T1 = ( Posution ) ( P1 ) ;  $ ~Mv = fun2 ( x1 , y1 , x2 , y2 , n , T1 , false ) ;  $ ~Md = fun2 ( x1 , y1 , x2 , y2 , n , T1 , true ) ;  $ ~cout << min ( Mv , Md ) << endl ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~int n , a ;  $ ~cin >> n >> a ;  $ ~int mina ( a ) , maxa ( a ) , mini ( 0 ) , maxi ( 0 ) ;  $ ~for ( int i = 1 ; i < n ; ++ i ) {  $ ~~cin >> a ;  $ ~~if ( a > maxa ) {  $ ~~~maxa = a ;  $ ~~~maxi = i ;  $ ~~}  $ ~~if ( a <= mina ) {  $ ~~~mina = a ;  $ ~~~mini = i ;  $ ~~}  $ ~}  $ ~cout << maxi + ( n - 1 - mini ) - ( mini < maxi ? 1 : 0 ) << endl ;  $ ~return 0 ;  $ }
long long mod = 1e9 + 9 ;  $ long long qm ( long long a , long long b ) {  $ ~long long ans = 1 ;  $ ~while ( b > 0 ) {  $ ~~if ( b & 1 ) ans = ans * a % mod ;  $ ~~b >> = 1 ;  $ ~~a = a * a % mod ;  $ ~}  $ ~return ( ans % mod + mod ) % mod ;  $ }  $ char c [ 1000005 ] ;  $ int main ( ) {  $ ~long long n , a , b , k ;  $ ~cin >> n >> a >> b >> k ;  $ ~cin >> c ;  $ ~long long ans = 0 ;  $ ~if ( n + 1 <= k ) {  $ ~~for ( long long i = 0 ; i <= n ; i ++ ) {  $ ~~~if ( c [ i ] == '-' ) {  $ ~~~~ans = ans - qm ( a , n - i ) * qm ( b , i ) ;  $ ~~~~ans = ( ans % mod + mod ) % mod ;  $ ~~~} else {  $ ~~~~ans = ans + qm ( a , n - i ) * qm ( b , i ) ;  $ ~~~~ans = ( ans % mod + mod ) % mod ;  $ ~~~}  $ ~~}  $ ~~ans = ( ans % mod + mod ) % mod ;  $ ~~cout << ans << endl ;  $ ~} else {  $ ~~long long t = ( n + 1 ) / k ;  $ ~~long long g = ( n + 1 ) % k ;  $ ~~long long x = 0 ;  $ ~~if ( g == 0 ) {  $ ~~~for ( long long i = 0 ; i < k ; i ++ ) {  $ ~~~~if ( c [ i ] == '-' ) {  $ ~~~~~x = x - qm ( a , n - i ) * qm ( b , i ) ;  $ ~~~~~x = ( x % mod + mod ) % mod ;  $ ~~~~} else {  $ ~~~~~x = x + qm ( a , n - i ) * qm ( b , i ) ;  $ ~~~~~x = ( x % mod + mod ) % mod ;  $ ~~~~}  $ ~~~}  $ ~~~if ( qm ( a , k ) == qm ( b , k ) ) {  $ ~~~~ans = t * x ;  $ ~~~~ans = ( ans % mod + mod ) % mod ;  $ ~~~~cout << ans << endl ;  $ ~~~~return 0 ;  $ ~~~}  $ ~~~long long jj = qm ( a , t * k ) - qm ( b , t * k ) ;  $ ~~~jj = x * jj % mod ;  $ ~~~jj = jj * qm ( a , k ) % mod ;  $ ~~~;  $ ~~~jj = jj % mod ;  $ ~~~long long nn = ( qm ( a , k ) - qm ( b , k ) ) ;  $ ~~~nn = nn % mod ;  $ ~~~nn = nn * qm ( a , t * k ) ;  $ ~~~nn = nn % mod ;  $ ~~~nn = qm ( nn , mod - 2 ) ;  $ ~~~ans = jj * nn ;  $ ~~~ans = ( ans % mod + mod ) % mod ;  $ ~~~cout << ans << endl ;  $ ~~} else {  $ ~~~for ( long long i = 0 ; i < k ; i ++ ) {  $ ~~~~if ( c [ i ] == '-' ) {  $ ~~~~~x = x - qm ( a , n - i ) * qm ( b , i ) ;  $ ~~~~~x = ( x % mod + mod ) % mod ;  $ ~~~~} else {  $ ~~~~~x = x + qm ( a , n - i ) * qm ( b , i ) ;  $ ~~~~~x = ( x % mod + mod ) % mod ;  $ ~~~~}  $ ~~~}  $ ~~~if ( qm ( a , k ) == qm ( b , k ) ) {  $ ~~~~ans = t * x ;  $ ~~~~ans = ( ans % mod + mod ) % mod ;  $ ~~~~for ( long long hh = 0 ; hh < g ; hh ++ ) {  $ ~~~~~if ( c [ hh ] == '-' ) {  $ ~~~~~~ans = ans - qm ( a , n - ( t * k + hh ) ) * qm ( b , ( t * k + hh ) ) ;  $ ~~~~~~ans = ( ans % mod + mod ) % mod ;  $ ~~~~~} else {  $ ~~~~~~ans = ans + qm ( a , n - ( t * k + hh ) ) * qm ( b , ( t * k + hh ) ) ;  $ ~~~~~~ans = ( ans % mod + mod ) % mod ;  $ ~~~~~}  $ ~~~~}  $ ~~~~ans = ( ans % mod + mod ) % mod ;  $ ~~~~cout << ans << endl ;  $ ~~~~return 0 ;  $ ~~~}  $ ~~~long long jj = qm ( a , t * k ) - qm ( b , t * k ) ;  $ ~~~jj = x * jj % mod ;  $ ~~~jj = jj * qm ( a , k ) % mod ;  $ ~~~;  $ ~~~jj = jj % mod ;  $ ~~~long long nn = ( qm ( a , k ) - qm ( b , k ) ) ;  $ ~~~nn = nn % mod ;  $ ~~~nn = nn * qm ( a , t * k ) ;  $ ~~~nn = nn % mod ;  $ ~~~nn = qm ( nn , mod - 2 ) ;  $ ~~~ans = jj * nn ;  $ ~~~ans = ( ans % mod + mod ) % mod ;  $ ~~~for ( long long hh = 0 ; hh < g ; hh ++ ) {  $ ~~~~if ( c [ hh ] == '-' ) {  $ ~~~~~ans = ans - qm ( a , n - ( t * k + hh ) ) * qm ( b , ( t * k + hh ) ) ;  $ ~~~~~ans = ( ans % mod + mod ) % mod ;  $ ~~~~} else {  $ ~~~~~ans = ans + qm ( a , n - ( t * k + hh ) ) * qm ( b , ( t * k + hh ) ) ;  $ ~~~~~ans = ( ans % mod + mod ) % mod ;  $ ~~~~}  $ ~~~}  $ ~~~ans = ( ans % mod + mod ) % mod ;  $ ~~~cout << ans << endl ;  $ ~~}  $ ~}  $ }
queue < int > q ;  $ int main ( ) {  $ ~int n , x ;  $ ~cin >> n ;  $ ~int ancnt = 0 ;  $ ~int cnt = 1 ;  $ ~int len = 0 ;  $ ~while ( n -- ) {  $ ~~cin >> x ;  $ ~~len ++ ;  $ ~~if ( x < 0 ) { ancnt ++ ; }  $ ~~if ( ancnt > 2 ) {  $ ~~~ancnt = 1 ;  $ ~~~q . push ( len - 1 ) ;  $ ~~~len = 1 ;  $ ~~}  $ ~}  $ ~q . push ( len ) ;  $ ~cout << q . size ( ) << endl ;  $ ~int numsize = q . size ( ) ;  $ ~for ( int i = 0 ; i < numsize ; i ++ ) {  $ ~~if ( i != 0 ) { cout << " " ; }  $ ~~cout << q . front ( ) ;  $ ~~q . pop ( ) ;  $ ~~if ( i == numsize - 1 ) { cout << endl ; }  $ ~}  $ ~return 0 ;  $ }
int n , m , father [ 101 ] = { } , ans = 0 , cnt = 0 ;  $ bool f [ 101 ] [ 101 ] = { } ;  $ int find ( int x ) {  $ ~if ( father [ x ] != x ) return father [ x ] = find ( father [ x ] ) ;  $ ~return x ;  $ }  $ bool check ( int x , int y ) {  $ ~x = find ( x ) ;  $ ~y = find ( y ) ;  $ ~if ( x == y ) return false ;  $ ~father [ x ] = y ;  $ ~return true ;  $ }  $ int main ( ) {  $ ~int i , j , k ;  $ ~cin >> n >> m ;  $ ~for ( i = 1 ; i <= n ; ++ i ) father [ i ] = i ;  $ ~for ( i = 1 ; i <= n ; ++ i ) {  $ ~~cin >> j ;  $ ~~while ( j -- ) {  $ ~~~cin >> k ;  $ ~~~f [ i ] [ k ] = true ;  $ ~~~cnt += f [ i ] [ k ] ;  $ ~~}  $ ~}  $ ~for ( i = 1 ; i <= n ; ++ i )  $ ~~for ( j = i + 1 ; j <= n ; ++ j )  $ ~~~for ( k = 1 ; k <= m ; ++ k )  $ ~~~~if ( f [ i ] [ k ] && f [ j ] [ k ] ) ans += check ( i , j ) ;  $ ~if ( ! cnt )  $ ~~cout << n << endl ;  $ ~else  $ ~~cout << n - ans - 1 << endl ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~int n ;  $ ~while ( cin >> n ) {  $ ~~string a [ 101 ] ;  $ ~~set < int > b ;  $ ~~set < int > c ;  $ ~~for ( int i = 0 ; i < n ; ++ i ) {  $ ~~~cin >> a [ i ] ;  $ ~~~for ( int j = 0 ; j < n ; ++ j ) {  $ ~~~~if ( a [ i ] [ j ] == '.' ) {  $ ~~~~~b . insert ( i ) ;  $ ~~~~~c . insert ( j ) ;  $ ~~~~}  $ ~~~}  $ ~~}  $ ~~if ( b . size ( ) < n && c . size ( ) < n )  $ ~~~cout << "-1" << endl ;  $ ~~else {  $ ~~~if ( b . size ( ) == n ) {  $ ~~~~for ( int i = 0 ; i < n ; ++ i ) {  $ ~~~~~for ( int j = 0 ; i < n ; ++ j ) {  $ ~~~~~~if ( a [ i ] [ j ] == '.' ) {  $ ~~~~~~~cout << i + 1 << " " << j + 1 << endl ;  $ ~~~~~~~break ;  $ ~~~~~~}  $ ~~~~~}  $ ~~~~}  $ ~~~} else {  $ ~~~~for ( int i = 0 ; i < n ; ++ i ) {  $ ~~~~~for ( int j = 0 ; i < n ; ++ j ) {  $ ~~~~~~if ( a [ j ] [ i ] == '.' ) {  $ ~~~~~~~cout << j + 1 << " " << i + 1 << endl ;  $ ~~~~~~~break ;  $ ~~~~~~}  $ ~~~~~}  $ ~~~~}  $ ~~~}  $ ~~}  $ ~}  $ ~return 0 ;  $ }
int main ( ) {  $ ~string s ;  $ ~cin >> s ;  $ ~if ( s . length ( ) <= 2 )  $ ~~cout << "No" << endl ;  $ ~else {  $ ~~for ( int i = 0 ; i < s . length ( ) - 2 ; i ++ ) {  $ ~~~if ( s [ i ] == 'A' && s [ i + 1 ] == 'B' && s [ i + 2 ] == 'C' ) {  $ ~~~~cout << "Yes" << endl ;  $ ~~~~return 0 ;  $ ~~~}  $ ~~~if ( s [ i ] == 'C' && s [ i + 1 ] == 'A' && s [ i + 2 ] == 'B' ) {  $ ~~~~cout << "Yes" << endl ;  $ ~~~~return 0 ;  $ ~~~}  $ ~~~if ( s [ i ] == 'A' && s [ i + 1 ] == 'C' && s [ i + 2 ] == 'B' ) {  $ ~~~~cout << "Yes" << endl ;  $ ~~~~return 0 ;  $ ~~~}  $ ~~~if ( s [ i ] == 'B' && s [ i + 1 ] == 'A' && s [ i + 2 ] == 'C' ) {  $ ~~~~cout << "Yes" << endl ;  $ ~~~~return 0 ;  $ ~~~}  $ ~~~if ( s [ i ] == 'B' && s [ i + 1 ] == 'C' && s [ i + 2 ] == 'A' ) {  $ ~~~~cout << "Yes" << endl ;  $ ~~~~return 0 ;  $ ~~~}  $ ~~~if ( s [ i ] == 'C' && s [ i + 1 ] == 'B' && s [ i + 2 ] == 'A' ) {  $ ~~~~cout << "Yes" << endl ;  $ ~~~~return 0 ;  $ ~~~}  $ ~~}  $ ~~cout << "No" << endl ;  $ ~}  $ }
string s ;  $ bool check [ 2 ] ;  $ int d [ 100001 ] [ 2 ] [ 2 ] ;  $ int go ( int x , int y , int z ) {  $ ~if ( x >= s . size ( ) ) {  $ ~~if ( y && z ) { return 1 ; }  $ ~~return 0 ;  $ ~}  $ ~if ( d [ x ] [ y ] [ z ] != - 1 ) return d [ x ] [ y ] [ z ] ;  $ ~d [ x ] [ y ] [ z ] = go ( x + 1 , y , z ) ;  $ ~if ( x < s . size ( ) - 1 && s [ x ] == 'A' && s [ x + 1 ] == 'B' && y == 0 ) { d [ x ] [ y ] [ z ] = max ( d [ x ] [ y ] [ z ] , go ( x + 2 , 1 , z ) ) ; }  $ ~if ( x < s . size ( ) - 1 && s [ x ] == 'B' && s [ x + 1 ] == 'A' && z == 0 ) { d [ x ] [ y ] [ z ] = max ( d [ x ] [ y ] [ z ] , go ( x + 2 , y , 1 ) ) ; }  $ ~return d [ x ] [ y ] [ z ] ;  $ }  $ int main ( ) {  $ ~cin >> s ;  $ ~memset ( d , - 1 , sizeof ( d ) ) ;  $ ~if ( go ( 0 , 0 , 0 ) == 1 )  $ ~~cout << "YES" << '\n' ;  $ ~else  $ ~~cout << "NO" << '\n' ;  $ }
int main ( ) {  $ ~long long a1 , b1 , a2 , b2 , k , sum = 0 ;  $ ~cin >> a1 >> b1 >> a2 >> b2 >> k ;  $ ~long long x = max ( a1 , a2 ) , y = min ( b1 , b2 ) ;  $ ~if ( x > y )  $ ~~cout << 0 << endl ;  $ ~else if ( k >= x && k <= y )  $ ~~cout << y - x << endl ;  $ ~else  $ ~~cout << y - x + 1 << endl ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~int n ;  $ ~cin >> n ;  $ ~bool C [ 5 ] [ 5 ] = { } ;  $ ~string color = "RGBYW" ;  $ ~string value = "12345" ;  $ ~for ( int i = 0 ; i < n ; i ++ ) {  $ ~~string c ;  $ ~~cin >> c ;  $ ~~for ( int i = 0 ; i < 5 ; i ++ )  $ ~~~for ( int j = 0 ; j < 5 ; j ++ )  $ ~~~~if ( c [ 0 ] == color [ i ] && c [ 1 ] == value [ j ] ) C [ i ] [ j ] = true ;  $ ~}  $ ~int ans = 25 ;  $ ~for ( int bc = 0 ; bc < 1 << 5 ; bc ++ )  $ ~~for ( int bv = 0 ; bv < 1 << 5 ; bv ++ ) {  $ ~~~bool ok = true ;  $ ~~~for ( int c = 0 ; c < 5 ; c ++ )  $ ~~~~if ( bc >> c & 1 ) {  $ ~~~~~int t = 0 ;  $ ~~~~~for ( int v = 0 ; v < 5 ; v ++ )  $ ~~~~~~if ( ! ( bv >> v & 1 ) ) t += ( int ) C [ c ] [ v ] ;  $ ~~~~~if ( t > 1 ) ok = false ;  $ ~~~~}  $ ~~~for ( int v = 0 ; v < 5 ; v ++ )  $ ~~~~if ( bv >> v & 1 ) {  $ ~~~~~int t = 0 ;  $ ~~~~~for ( int c = 0 ; c < 5 ; c ++ )  $ ~~~~~~if ( ! ( bc >> c & 1 ) ) t += ( int ) C [ c ] [ v ] ;  $ ~~~~~if ( t > 1 ) ok = false ;  $ ~~~~}  $ ~~~int t = 0 ;  $ ~~~for ( int c = 0 ; c < 5 ; c ++ )  $ ~~~~for ( int v = 0 ; v < 5 ; v ++ )  $ ~~~~~if ( ! ( bc >> c & 1 ) && ! ( bv >> v & 1 ) ) t += ( int ) C [ c ] [ v ] ;  $ ~~~if ( t > 1 ) ok = false ;  $ ~~~if ( ok ) {  $ ~~~~int a = 0 ;  $ ~~~~for ( int i = 0 ; i < 5 ; i ++ ) a += ( bc >> i & 1 ) + ( bv >> i & 1 ) ;  $ ~~~~ans = min ( ans , a ) ;  $ ~~~}  $ ~~}  $ ~cout << ans << endl ;  $ }
int a [ 1000050 ] ;  $ int main ( ) {  $ ~int n ;  $ ~while ( cin >> n ) {  $ ~~int sum = 0 ;  $ ~~int one = 0 ;  $ ~~memset ( a , 0 , sizeof ( a ) ) ;  $ ~~for ( int i = 0 ; i < n ; i ++ ) {  $ ~~~cin >> one ;  $ ~~~a [ one ] ++ ;  $ ~~}  $ ~~sum = a [ 0 ] % 2 ;  $ ~~for ( int i = 1 ; i < 1000050 ; i ++ ) {  $ ~~~a [ i ] = a [ i - 1 ] / 2 + a [ i ] ;  $ ~~~if ( a [ i ] % 2 == 1 ) { sum ++ ; }  $ ~~}  $ ~~cout << sum << endl ;  $ ~}  $ ~return 0 ;  $ }
void solve ( ) {  $ ~int n , d ;  $ ~cin >> n >> d ;  $ ~int a [ n ] ;  $ ~for ( int i = 0 ; i < n ; i ++ ) { cin >> a [ i ] ; }  $ ~if ( n == 1 or n == 2 ) {  $ ~~cout << 0 << endl ;  $ ~~return ;  $ ~}  $ ~long long cnt = 0 ;  $ ~int r = 0 ;  $ ~bool b = true ;  $ ~for ( int i = 0 ; i < n - 2 ; i ++ ) {  $ ~~long long k = r - i - 2 ;  $ ~~if ( k < 0 ) k = 0 ;  $ ~~cnt += ( k * ( k + 1 ) / 2 ) ;  $ ~~for ( int j = r ; j < n ; j ++ ) {  $ ~~~if ( a [ j ] <= a [ i ] + d ) {  $ ~~~~cnt += ( max ( 0 , j - i - 1 ) ) ;  $ ~~~} else {  $ ~~~~r = j ;  $ ~~~~b = false ;  $ ~~~~break ;  $ ~~~}  $ ~~}  $ ~~if ( b )  $ ~~~r = n - 1 ;  $ ~~else  $ ~~~b = true ;  $ ~}  $ ~cout << cnt << endl ;  $ }  $ int main ( ) {  $ ~solve ( ) ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~int i , j , n , a [ 105 ] , x , l [ 105 ] ;  $ ~memset ( a , 0 , sizeof ( a ) ) ;  $ ~cin >> n >> x ;  $ ~for ( i = 0 ; i < n ; i ++ ) {  $ ~~cin >> l [ i ] ;  $ ~~j = l [ i ] ;  $ ~~a [ j ] ++ ;  $ ~}  $ ~int sum = 0 ;  $ ~int b [ 105 ] ;  $ ~int k = 0 ;  $ ~for ( i = 0 ; i < 105 ; i ++ ) {  $ ~~if ( a [ i ] > 0 ) {  $ ~~~sum ++ ;  $ ~~~for ( int q = 0 ; q < n ; q ++ ) {  $ ~~~~if ( i == l [ q ] ) {  $ ~~~~~b [ k ] = q + 1 ;  $ ~~~~~k ++ ;  $ ~~~~~break ;  $ ~~~~}  $ ~~~}  $ ~~}  $ ~}  $ ~sort ( b , b + k ) ;  $ ~if ( sum >= x ) {  $ ~~cout << "YES" << endl ;  $ ~~cout << b [ 0 ] ;  $ ~~for ( i = 1 ; i < x ; i ++ ) { cout << " " << b [ i ] ; }  $ ~~cout << endl ;  $ ~} else {  $ ~~cout << "NO" << endl ;  $ ~}  $ ~return 0 ;  $ }
int main ( ) {  $ ~long long n , a , b , c , ans ;  $ ~while ( cin >> n >> a >> b >> c ) {  $ ~~ans = n / a ;  $ ~~if ( n >= b && a > ( b - c ) ) {  $ ~~~long long t = 1 ;  $ ~~~t += ( n - b ) / ( b - c ) ;  $ ~~~n -= t * ( b - c ) ;  $ ~~~t += max ( n / a , n / b ) ;  $ ~~~ans = max ( ans , t ) ;  $ ~~}  $ ~~cout << ans << endl ;  $ ~}  $ ~return 0 ;  $ }
vector < int > lang [ 103 ] ;  $ vector < int > emp [ 103 ] ;  $ int ans , check , n , m , a , b , markl [ 102 ] , marke [ 102 ] ;  $ void dfs1 ( int x ) ;  $ void dfs2 ( int y ) {  $ ~markl [ y ] = 1 ;  $ ~for ( int i = 0 ; i < lang [ y ] . size ( ) ; i ++ )  $ ~~if ( marke [ lang [ y ] [ i ] ] == 0 ) dfs1 ( lang [ y ] [ i ] ) ;  $ }  $ void dfs1 ( int x ) {  $ ~marke [ x ] = 1 ;  $ ~for ( int i = 0 ; i < emp [ x ] . size ( ) ; i ++ )  $ ~~if ( markl [ emp [ x ] [ i ] ] == 0 ) dfs2 ( emp [ x ] [ i ] ) ;  $ }  $ int main ( ) {  $ ~cin >> n >> m ;  $ ~for ( int i = 1 ; i <= n ; i ++ ) {  $ ~~cin >> a ;  $ ~~check += a ;  $ ~~while ( a -- ) {  $ ~~~cin >> b ;  $ ~~~emp [ i ] . push_back ( b ) ;  $ ~~~lang [ b ] . push_back ( i ) ;  $ ~~}  $ ~}  $ ~for ( int i = 1 ; i <= n ; i ++ )  $ ~~if ( marke [ i ] == 0 ) {  $ ~~~++ ans ;  $ ~~~dfs1 ( i ) ;  $ ~~}  $ ~if ( check ) -- ans ;  $ ~cout << ans << endl ;  $ ~return 0 ;  $ }
const int M = 1000 + 5 ;  $ string type [ 5 ] = { "byte" , "short" , "int" , "long" , "BigInteger" } ;  $ string border [ 4 ] = { "127" , "32767" , "2147483647" , "9223372036854775807" } ;  $ int digit [ 4 ] = { 3 , 5 , 10 , 19 } ;  $ int main ( ) {  $ ~string s ;  $ ~cin >> s ;  $ ~int ans = 4 ;  $ ~for ( int i = 0 ; i < 4 ; i ++ ) {  $ ~~if ( s . length ( ) < digit [ i ] ) {  $ ~~~ans = i ;  $ ~~~break ;  $ ~~}  $ ~~if ( s . length ( ) == digit [ i ] ) {  $ ~~~if ( s <= border [ i ] ) {  $ ~~~~ans = i ;  $ ~~~~break ;  $ ~~~}  $ ~~}  $ ~}  $ ~cout << type [ ans ] << endl ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~long long int n , k ;  $ ~cin >> n >> k ;  $ ~int a [ 100001 ] ;  $ ~set < long long int > q ;  $ ~for ( int i = 0 ; i < n ; i ++ ) { cin >> a [ i ] ; }  $ ~sort ( a , a + n ) ;  $ ~int ans = 0 ;  $ ~for ( int i = 0 ; i < n ; i ++ ) {  $ ~~if ( q . find ( a [ i ] ) == q . end ( ) ) {  $ ~~~q . insert ( a [ i ] * k ) ;  $ ~~~ans ++ ;  $ ~~}  $ ~}  $ ~cout << ans << endl ;  $ ~return 0 ;  $ }
int arr [ 10000 ] ;  $ vector < int > v ;  $ int brr [ 10000 ] ;  $ int main ( ) {  $ ~int n ;  $ ~cin >> n ;  $ ~for ( int i = 1 ; i <= n ; i ++ ) {  $ ~~int m ;  $ ~~cin >> m ;  $ ~~arr [ i ] = m ;  $ ~~v . push_back ( m ) ;  $ ~}  $ ~sort ( v . begin ( ) , v . end ( ) ) ;  $ ~int idx = 1 , cur ;  $ ~for ( int i = n - 1 ; i >= 0 ; i -- ) {  $ ~~if ( i == n - 1 ) {  $ ~~~cur = v [ i ] ;  $ ~~~brr [ idx ] = v [ i ] ;  $ ~~} else {  $ ~~~if ( cur != v [ i ] ) {  $ ~~~~brr [ idx ] = v [ i ] ;  $ ~~~~cur = v [ i ] ;  $ ~~~}  $ ~~}  $ ~~idx ++ ;  $ ~}  $ ~for ( int i = 1 ; i <= n ; i ++ ) {  $ ~~for ( int j = 1 ; j <= n ; j ++ ) {  $ ~~~if ( arr [ i ] == brr [ j ] && arr [ i ] != 0 && brr [ j ] != 0 ) {  $ ~~~~if ( i == n ) {  $ ~~~~~cout << j << endl ;  $ ~~~~} else {  $ ~~~~~cout << j << " " ;  $ ~~~~}  $ ~~~}  $ ~~}  $ ~}  $ }
int find ( int x , int father [ ] ) {  $ ~if ( father [ x ] == x ) return x ;  $ ~return father [ x ] = find ( father [ x ] , father ) ;  $ }  $ int main ( ) {  $ ~string s ;  $ ~cin >> s ;  $ ~int ans = 0 ;  $ ~int n = s . length ( ) - 2 ;  $ ~for ( int i = 0 ; i < n ; i ++ ) {  $ ~~string tmp = s . substr ( i , 3 ) ;  $ ~~sort ( tmp . begin ( ) , tmp . end ( ) ) ;  $ ~~if ( tmp == "ABC" ) {  $ ~~~ans = 1 ;  $ ~~~break ;  $ ~~}  $ ~}  $ ~if ( ans )  $ ~~cout << "Yes\n" ;  $ ~else  $ ~~cout << "No\n" ;  $ }
int a , b , c , d ;  $ int check ( int t1 , int t2 ) {  $ ~if ( t1 < t2 )  $ ~~return 1 ;  $ ~else if ( t1 > t2 )  $ ~~return - 1 ;  $ ~return 0 ;  $ }  $ int main ( ) {  $ ~cin >> a >> b >> c >> d ;  $ ~int x = 0 , y = 0 ;  $ ~int t1 = b , t2 = d ;  $ ~while ( true ) {  $ ~~if ( check ( t1 , t2 ) == 1 ) {  $ ~~~t1 += a ;  $ ~~~x ++ ;  $ ~~}  $ ~~if ( check ( t1 , t2 ) == - 1 ) {  $ ~~~t2 += c ;  $ ~~~y ++ ;  $ ~~}  $ ~~if ( check ( t1 , t2 ) == 0 ) {  $ ~~~cout << t1 << endl ;  $ ~~~break ;  $ ~~}  $ ~~if ( x > 1000 || y > 1000 ) {  $ ~~~cout << "-1" << endl ;  $ ~~~return 0 ;  $ ~~}  $ ~}  $ }
pair < int , int > pa [ 10005 ] ;  $ int maxn = 0 x3f3f3f3f ;  $ int main ( ) {  $ ~int n , m , k , count ;  $ ~while ( cin >> m >> n ) {  $ ~~count = k = 0 ;  $ ~~for ( int i = 0 ; i < n ; i ++ ) cin >> pa [ i ] . first >> pa [ i ] . second ;  $ ~~while ( k != m ) {  $ ~~~sort ( pa , pa + n ) ;  $ ~~~if ( m > pa [ 0 ] . first ) {  $ ~~~~if ( pa [ 0 ] . second != 0 ) k = m ;  $ ~~~~m += pa [ 0 ] . second ;  $ ~~~~pa [ 0 ] . first = maxn ;  $ ~~~~count ++ ;  $ ~~~} else  $ ~~~~break ;  $ ~~}  $ ~~if ( count != n )  $ ~~~cout << "NO" << endl ;  $ ~~else  $ ~~~cout << "YES" << endl ;  $ ~}  $ ~return 0 ;  $ }
int const N = 1e5 + 1 ;  $ long long arr [ N ] ;  $ int main ( ) {  $ ~int n ;  $ ~cin >> n ;  $ ~arr [ 0 ] = 0 ;  $ ~for ( int i = 1 ; i < N ; i ++ ) arr [ i ] = arr [ i - 1 ] + i ;  $ ~for ( int i = 1 ; i < N ; i ++ )  $ ~~if ( binary_search ( arr + 1 , arr + N , n - arr [ i ] ) ) {  $ ~~~cout << "YES" << endl ;  $ ~~~return 0 ;  $ ~~}  $ ~cout << "NO" << endl ;  $ ~return 0 ;  $ }
const long long mnx = 8e6 + 9 ;  $ const long long mod = 1e9 + 7 ;  $ const long long dx [ 4 ] = { - 1 , 0 , 0 , 1 } ;  $ const long long dy [ 4 ] = { 0 , - 1 , 1 , 0 } ;  $ long long n , m ;  $ char s [ 111 ] [ 111 ] ;  $ bool u [ 111 ] [ 111 ] ;  $ bool check ( long long x , long long y ) {  $ ~return 0 < x && x < n + 1 && 0 < y && y < m + 1 ;  $ }  $ void dfs ( long long x , long long y ) {  $ ~if ( u [ x ] [ y ] ) { return ; }  $ ~u [ x ] [ y ] = true ;  $ ~for ( long long i = 0 ; i < 4 ; i ++ ) {  $ ~~if ( check ( x + dx [ i ] , y + dy [ i ] ) && s [ x + dx [ i ] ] [ y + dy [ i ] ] == '#' ) { dfs ( x + dx [ i ] , y + dy [ i ] ) ; }  $ ~}  $ }  $ int main ( ) {  $ ~cin >> n >> m ;  $ ~for ( long long i = 1 ; i <= n ; i ++ ) {  $ ~~for ( long long j = 1 ; j <= m ; j ++ ) { cin >> s [ i ] [ j ] ; }  $ ~}  $ ~long long qwe = 0 ;  $ ~for ( long long i = 1 ; i <= n ; i ++ ) {  $ ~~for ( long long j = 1 ; j <= m ; j ++ ) {  $ ~~~if ( s [ i ] [ j ] == '#' ) { qwe ++ ; }  $ ~~}  $ ~}  $ ~long long res = 11111111111111 ;  $ ~for ( long long i = 1 ; i <= n ; i ++ ) {  $ ~~for ( long long j = 1 ; j <= m ; j ++ ) {  $ ~~~if ( s [ i ] [ j ] == '#' ) {  $ ~~~~long long q = 0 ;  $ ~~~~for ( long long k = 0 ; k < 4 ; k ++ ) {  $ ~~~~~if ( check ( i + dx [ k ] , j + dy [ k ] ) && s [ i + dx [ k ] ] [ j + dy [ k ] ] == '#' ) q ++ ;  $ ~~~~}  $ ~~~~if ( q + 1 < qwe ) { res = min ( res , q ) ; }  $ ~~~~if ( qwe > 1 ) {  $ ~~~~~s [ i ] [ j ] = '0' ;  $ ~~~~~for ( long long k = 1 ; k <= n ; k ++ ) {  $ ~~~~~~for ( long long l = 1 ; l <= m ; l ++ ) { u [ k ] [ l ] = false ; }  $ ~~~~~}  $ ~~~~~long long cnt = 0 ;  $ ~~~~~for ( long long k = 1 ; k <= n ; k ++ ) {  $ ~~~~~~for ( long long l = 1 ; l <= m ; l ++ ) {  $ ~~~~~~~if ( s [ k ] [ l ] == '#' && ! u [ k ] [ l ] ) {  $ ~~~~~~~~dfs ( k , l ) ;  $ ~~~~~~~~cnt ++ ;  $ ~~~~~~~}  $ ~~~~~~}  $ ~~~~~}  $ ~~~~~if ( cnt > 1 ) { res = min ( res , 1 LL ) ; }  $ ~~~~~s [ i ] [ j ] = '#' ;  $ ~~~~}  $ ~~~}  $ ~~}  $ ~}  $ ~if ( res == 11111111111111 ) res -= 11111111111112 ;  $ ~cout << res << '\n' ;  $ ~return 0 ;  $ }
const int INF = 2147483647 ;  $ const int mod = 1000000007 ;  $ const int tmod = 1000000009 ;  $ map < char , int > ma ;  $ int vis [ 25 ] ;  $ vector < int > v ;  $ int sum [ 25 ] ;  $ int a1 [ 5 ] ;  $ int a2 [ 5 ] ;  $ int main ( ) {  $ ~int n ;  $ ~cin >> n ;  $ ~ma [ 'R' ] = 0 ;  $ ~ma [ 'G' ] = 1 ;  $ ~ma [ 'B' ] = 2 ;  $ ~ma [ 'Y' ] = 3 ;  $ ~ma [ 'W' ] = 4 ;  $ ~for ( int i = 0 ; i < ( n ) ; i ++ ) {  $ ~~string str ;  $ ~~cin >> str ;  $ ~~int tmp = ma [ str [ 0 ] ] * 5 + str [ 1 ] - '1' ;  $ ~~vis [ tmp ] = 1 ;  $ ~}  $ ~for ( int i = 0 ; i < ( 25 ) ; i ++ )  $ ~~if ( vis [ i ] ) v . push_back ( i ) ;  $ ~int ans = 10 ;  $ ~for ( int s = 0 ; s < ( 1 << 10 ) ; s ++ ) {  $ ~~memset ( a1 , 0 , sizeof ( a1 ) ) ;  $ ~~memset ( a2 , 0 , sizeof ( a2 ) ) ;  $ ~~memset ( sum , 0 , sizeof ( sum ) ) ;  $ ~~int pos = 1 ;  $ ~~for ( int i = 0 ; i < 5 ; i ++ )  $ ~~~if ( ( s >> i ) & 1 ) a1 [ i ] = pos ++ ;  $ ~~int pos2 = 1 ;  $ ~~for ( int i = 5 ; i < 10 ; i ++ )  $ ~~~if ( ( s >> i ) & 1 ) a2 [ i % 5 ] = pos2 ++ ;  $ ~~for ( int i = 0 ; i < ( v . size ( ) ) ; i ++ ) {  $ ~~~int tmp = v [ i ] ;  $ ~~~int l = a1 [ tmp / 5 ] ;  $ ~~~int r = a2 [ tmp % 5 ] ;  $ ~~~sum [ l * 5 + r ] ++ ;  $ ~~}  $ ~~bool flag = true ;  $ ~~for ( int i = 0 ; i < ( 25 ) ; i ++ )  $ ~~~if ( sum [ i ] > 1 ) {  $ ~~~~flag = false ;  $ ~~~~break ;  $ ~~~}  $ ~~if ( ! flag ) continue ;  $ ~~ans = min ( ans , pos - 1 + pos2 - 1 ) ;  $ ~}  $ ~cout << ans << '\n' ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~int x ;  $ ~cin >> x ;  $ ~if ( x == 1 )  $ ~~puts ( "-1" ) ;  $ ~else  $ ~~cout << x << " " << x << endl ;  $ ~return 0 ;  $ }
int n , k , a [ 88 ] ;  $ set < int > st ;  $ int main ( ) {  $ ~cin >> n >> k ;  $ ~for ( int i = 0 ; i < n ; ++ i ) cin >> a [ i ] ;  $ ~int num = 0 ;  $ ~st . clear ( ) ;  $ ~for ( int i = 0 ; i < n ; ++ i ) {  $ ~~if ( find ( st . begin ( ) , st . end ( ) , a [ i ] ) == st . end ( ) ) {  $ ~~~if ( st . size ( ) == k ) {  $ ~~~~set < int > : : iterator it ;  $ ~~~~int maxpos = - 1 , j , val ;  $ ~~~~for ( it = st . begin ( ) ; it != st . end ( ) ; ++ it ) {  $ ~~~~~for ( j = i ; j < n ; ++ j ) {  $ ~~~~~~if ( * it == a [ j ] ) break ;  $ ~~~~~}  $ ~~~~~if ( j > maxpos ) maxpos = j , val = * it ;  $ ~~~~}  $ ~~~~st . erase ( val ) ;  $ ~~~}  $ ~~~st . insert ( a [ i ] ) ;  $ ~~~num ++ ;  $ ~~}  $ ~}  $ ~cout << num << endl ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~int n , k ;  $ ~string t ;  $ ~cin >> n >> k >> t ;  $ ~int cnt = 1 ;  $ ~int pos = 1 ;  $ ~string ans = t ;  $ ~while ( cnt < k ) {  $ ~~if ( pos >= ( ( int ) ( ans . size ( ) ) ) ) {  $ ~~~ans += t ;  $ ~~~++ cnt ;  $ ~~} else {  $ ~~~bool ok = true ;  $ ~~~int len = 0 ;  $ ~~~for ( int i = 0 ; i < ( ( int ) ( t . size ( ) ) ) ; ++ i ) {  $ ~~~~if ( pos + i >= ( ( int ) ( ans . size ( ) ) ) ) break ;  $ ~~~~++ len ;  $ ~~~~if ( ans [ pos + i ] != t [ i ] ) ok = false ;  $ ~~~}  $ ~~~if ( ok ) {  $ ~~~~ans += t . substr ( len ) ;  $ ~~~~++ cnt ;  $ ~~~}  $ ~~}  $ ~~++ pos ;  $ ~}  $ ~cout << ans << endl ;  $ ~return 0 ;  $ }
int n ;  $ char chair [ 10000 ] ;  $ int main ( ) {  $ ~cin >> n ;  $ ~cin >> ( chair + 1 ) ;  $ ~chair [ 0 ] = '0' ;  $ ~chair [ n + 1 ] = '0' ;  $ ~int ans = 0 ;  $ ~if ( n == 1 && chair [ 1 ] == '0' ) {  $ ~~cout << "No" << endl ;  $ ~~return 0 ;  $ ~}  $ ~if ( n == 1 && chair [ 1 ] == '1' ) {  $ ~~cout << "Yes" << endl ;  $ ~~return 0 ;  $ ~}  $ ~for ( int i = 1 ; i <= n ; i ++ ) {  $ ~~if ( chair [ i ] == '1' && ( chair [ i - 1 ] == '1' || chair [ i + 1 ] == '1' ) ) {  $ ~~~ans = 1 ;  $ ~~~break ;  $ ~~}  $ ~~if ( chair [ i ] == '0' ) {  $ ~~~if ( chair [ i - 1 ] == '0' && chair [ i + 1 ] == '0' ) {  $ ~~~~ans = 1 ;  $ ~~~~break ;  $ ~~~}  $ ~~}  $ ~}  $ ~if ( ans == 1 )  $ ~~cout << "No" << endl ;  $ ~else  $ ~~cout << "Yes" << endl ;  $ }
int main ( ) {  $ ~int x , t , a , b , da , db ;  $ ~cin >> x >> t >> a >> b >> da >> db ;  $ ~int sum ;  $ ~for ( int i = 0 ; i <= t ; i ++ ) {  $ ~~if ( i == t )  $ ~~~sum = 0 ;  $ ~~else  $ ~~~sum = a - da * i ;  $ ~~for ( int j = 0 ; j <= t ; j ++ ) {  $ ~~~if ( j != t ) sum += b - db * j ;  $ ~~~if ( sum == x ) {  $ ~~~~cout << "YES" << endl ;  $ ~~~~return 0 ;  $ ~~~}  $ ~~~if ( j != t ) sum -= ( b - db * j ) ;  $ ~~}  $ ~}  $ ~cout << "NO" << endl ;  $ ~return 0 ;  $ }
int a [ 21 ] , b [ 21 ] ;  $ vector < int > p ;  $ int main ( ) {  $ ~int n , m ;  $ ~cin >> n >> m ;  $ ~for ( int i = 1 ; i <= n ; i ++ ) cin >> a [ i ] ;  $ ~for ( int i = 1 ; i <= m ; i ++ ) cin >> b [ i ] ;  $ ~for ( int i = 1 ; i <= n ; i ++ ) {  $ ~~for ( int j = 1 ; j <= m ; j ++ ) {  $ ~~~if ( b [ j ] == a [ i ] ) {  $ ~~~~p . push_back ( b [ j ] ) ;  $ ~~~~continue ;  $ ~~~}  $ ~~}  $ ~}  $ ~if ( p . empty ( ) )  $ ~~cout << '\n' ;  $ ~else {  $ ~~for ( int i = 0 ; i < p . size ( ) - 1 ; i ++ ) cout << p [ i ] << " " ;  $ ~~cout << p [ p . size ( ) - 1 ] << endl ;  $ ~}  $ ~return 0 ;  $ }
int main ( ) {  $ ~string s ;  $ ~while ( cin >> s ) {  $ ~~bool b = false ;  $ ~~for ( int i = 2 ; i < s . length ( ) ; i ++ )  $ ~~~if ( s [ i - 2 ] == 'A' && s [ i - 1 ] == 'B' && s [ i ] == 'C' ) b = true ;  $ ~~for ( int i = 2 ; i < s . length ( ) ; i ++ )  $ ~~~if ( s [ i - 2 ] == 'A' && s [ i - 1 ] == 'C' && s [ i ] == 'B' ) b = true ;  $ ~~for ( int i = 2 ; i < s . length ( ) ; i ++ )  $ ~~~if ( s [ i - 2 ] == 'B' && s [ i - 1 ] == 'A' && s [ i ] == 'C' ) b = true ;  $ ~~for ( int i = 2 ; i < s . length ( ) ; i ++ )  $ ~~~if ( s [ i - 2 ] == 'B' && s [ i - 1 ] == 'C' && s [ i ] == 'A' ) b = true ;  $ ~~for ( int i = 2 ; i < s . length ( ) ; i ++ )  $ ~~~if ( s [ i - 2 ] == 'C' && s [ i - 1 ] == 'A' && s [ i ] == 'B' ) b = true ;  $ ~~for ( int i = 2 ; i < s . length ( ) ; i ++ )  $ ~~~if ( s [ i - 2 ] == 'C' && s [ i - 1 ] == 'B' && s [ i ] == 'A' ) b = true ;  $ ~~if ( b )  $ ~~~cout << "Yes\n" ;  $ ~~else  $ ~~~cout << "No\n" ;  $ ~}  $ }
int main ( ) {  $ ~string str1 , str2 ;  $ ~int num1 [ 300 ] , num2 [ 300 ] ;  $ ~while ( cin >> str1 >> str2 ) {  $ ~~if ( str1 . length ( ) != str2 . length ( ) ) {  $ ~~~cout << "NO" << endl ;  $ ~~~continue ;  $ ~~}  $ ~~for ( int k = 0 ; k < 300 ; k ++ ) {  $ ~~~num1 [ k ] = 0 ;  $ ~~~num2 [ k ] = 0 ;  $ ~~}  $ ~~for ( int k = 0 ; k < str1 . length ( ) ; k ++ ) {  $ ~~~num1 [ str1 [ k ] ] ++ ;  $ ~~~num2 [ str2 [ k ] ] ++ ;  $ ~~}  $ ~~int pan = 0 ;  $ ~~for ( int i = 0 ; i < 300 ; i ++ ) {  $ ~~~if ( num1 [ i ] != num2 [ i ] ) {  $ ~~~~cout << "NO" << endl ;  $ ~~~~pan = 1 ;  $ ~~~~break ;  $ ~~~}  $ ~~}  $ ~~if ( pan ) continue ;  $ ~~int count = 0 ;  $ ~~for ( int i = 0 ; i < str1 . length ( ) ; i ++ ) {  $ ~~~if ( str1 [ i ] != str2 [ i ] ) count ++ ;  $ ~~}  $ ~~if ( count != 2 )  $ ~~~cout << "NO" << endl ;  $ ~~else  $ ~~~cout << "YES" << endl ;  $ ~}  $ }
int main ( ) {  $ ~int a , b , c , d ;  $ ~cin >> a >> b >> c >> d ;  $ ~int Rick [ 105 ] ;  $ ~int Morty [ 105 ] ;  $ ~Rick [ 0 ] = b ;  $ ~Morty [ 0 ] = d ;  $ ~for ( int i = 1 ; i <= 100 ; i ++ ) {  $ ~~Rick [ i ] = b + ( i * a ) ;  $ ~~Morty [ i ] = d + ( i * c ) ;  $ ~}  $ ~for ( int i = 0 ; i <= 100 ; i ++ ) {  $ ~~for ( int j = 0 ; j <= 100 ; j ++ ) {  $ ~~~if ( Rick [ i ] == Morty [ j ] ) {  $ ~~~~cout << Rick [ i ] << endl ;  $ ~~~~return 0 ;  $ ~~~}  $ ~~}  $ ~}  $ ~cout << "-1" << endl ;  $ }
int main ( ) {  $ ~string s ;  $ ~cin >> s ;  $ ~int ones = 0 ;  $ ~int zeros = 0 ;  $ ~string ans = "" ;  $ ~int contains_0 = 0 ;  $ ~for ( int j = 0 ; j < s . length ( ) ; j ++ ) {  $ ~~if ( s [ j ] == '0' ) {  $ ~~~contains_0 = 1 ;  $ ~~~break ;  $ ~~}  $ ~}  $ ~int i = 0 ;  $ ~if ( contains_0 == 0 ) { i ++ ; }  $ ~for ( ; i < s . length ( ) ; i ++ ) {  $ ~~if ( s [ i ] == '1' ) {  $ ~~~ans += '1' ;  $ ~~} else if ( s [ i ] == '0' ) {  $ ~~~i ++ ;  $ ~~~break ;  $ ~~}  $ ~}  $ ~for ( ; i < s . length ( ) ; i ++ ) { ans += s [ i ] ; }  $ ~cout << ans << endl ;  $ ~return 0 ;  $ ~return 0 ;  $ }
const int MAXINT = 2147483640 ;  $ const long long MAXLL = 9223372036854775800 LL ;  $ const long long MAXN = 1e6 ;  $ const double eps = 1e-9 ;  $ const long long mod = 998244353 ;  $ long long dp [ 100006 ] [ 202 ] [ 2 ] , pref [ 300 ] [ 2 ] ;  $ long long n , a [ MAXN ] ;  $ int main ( ) {  $ ~srand ( time ( 0 ) ) ;  $ ~cin >> n ;  $ ~for ( int i = 1 ; i <= n ; ++ i ) cin >> a [ i ] ;  $ ~if ( a [ 1 ] == - 1 )  $ ~~for ( int j = 1 ; j <= 200 ; ++ j ) dp [ 1 ] [ j ] [ 0 ] = 1 ;  $ ~else  $ ~~dp [ 1 ] [ a [ 1 ] ] [ 0 ] = 1 ;  $ ~for ( int i = 2 ; i <= n ; ++ i ) {  $ ~~for ( int j = 1 ; j <= 200 ; ++ j ) {  $ ~~~( pref [ j ] [ 1 ] = pref [ j - 1 ] [ 1 ] + dp [ i - 1 ] [ j ] [ 1 ] ) %= mod ;  $ ~~~( pref [ j ] [ 0 ] = pref [ j - 1 ] [ 0 ] + dp [ i - 1 ] [ j ] [ 0 ] ) %= mod ;  $ ~~}  $ ~~if ( a [ i ] == - 1 ) {  $ ~~~for ( int cur = 1 ; cur <= 200 ; ++ cur ) {  $ ~~~~long long sum = 0 ;  $ ~~~~( sum += ( pref [ 200 ] [ 1 ] - pref [ cur - 1 ] [ 1 ] + mod ) ) %= mod ;  $ ~~~~( sum += dp [ i - 1 ] [ cur ] [ 0 ] ) %= mod ;  $ ~~~~( dp [ i ] [ cur ] [ 1 ] += sum ) %= mod ;  $ ~~~~sum = pref [ cur - 1 ] [ 1 ] + pref [ cur - 1 ] [ 0 ] ;  $ ~~~~( dp [ i ] [ cur ] [ 0 ] += sum ) %= mod ;  $ ~~~}  $ ~~} else {  $ ~~~long long sum = 0 ;  $ ~~~long long cur = a [ i ] ;  $ ~~~for ( int j = cur ; j <= 200 ; ++ j ) sum += ( dp [ i - 1 ] [ j ] [ 1 ] ) %= mod ;  $ ~~~( sum += dp [ i - 1 ] [ cur ] [ 0 ] ) %= mod ;  $ ~~~( dp [ i ] [ cur ] [ 1 ] += sum ) %= mod ;  $ ~~~sum = 0 ;  $ ~~~for ( int j = 1 ; j < cur ; ++ j ) ( sum += dp [ i - 1 ] [ j ] [ 0 ] + dp [ i - 1 ] [ j ] [ 1 ] ) %= mod ;  $ ~~~( dp [ i ] [ cur ] [ 0 ] += sum ) %= mod ;  $ ~~}  $ ~}  $ ~long long ans = 0 ;  $ ~for ( int i = 1 ; i <= 200 ; ++ i ) ( ans += dp [ n ] [ i ] [ 1 ] ) %= mod ;  $ ~cout << ans << "\n" ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~int n , m , sum = 0 ;  $ ~cin >> n ;  $ ~for ( int i = 0 ; i < n ; i ++ ) {  $ ~~cin >> m ;  $ ~~sum += m ;  $ ~}  $ ~if ( n - sum == min ( 1 , n - 1 ) )  $ ~~puts ( "YES" ) ;  $ ~else  $ ~~puts ( "NO" ) ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~int n , m ;  $ ~cin >> n >> m ;  $ ~string s , t ;  $ ~cin >> s >> t ;  $ ~int p = - 1 ;  $ ~int ans = 0 ;  $ ~for ( int i = 0 ; i < n ; i ++ ) {  $ ~~if ( s [ i ] == '*' ) {  $ ~~~p = i ;  $ ~~~break ;  $ ~~}  $ ~}  $ ~if ( p > - 1 ) {  $ ~~if ( n > m + 1 )  $ ~~~ans = 0 ;  $ ~~else {  $ ~~~string n1 , n2 , m1 , m2 ;  $ ~~~n1 = s . substr ( 0 , p ) ;  $ ~~~n2 = s . substr ( p + 1 , n ) ;  $ ~~~m1 = t . substr ( 0 , p ) ;  $ ~~~m2 = t . substr ( m - n2 . size ( ) , m ) ;  $ ~~~if ( n1 == m1 && n2 == m2 )  $ ~~~~ans = 1 ;  $ ~~~else  $ ~~~~ans = 0 ;  $ ~~}  $ ~} else {  $ ~~if ( s == t )  $ ~~~ans = 1 ;  $ ~~else  $ ~~~ans = 0 ;  $ ~}  $ ~if ( ans == 1 )  $ ~~cout << "YES" << endl ;  $ ~else  $ ~~cout << "NO" << endl ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~int t ;  $ ~cin >> t ;  $ ~while ( t -- ) {  $ ~~char maze [ 10 ] [ 10 ] ;  $ ~~int flag = 0 , sx , sy , gx , gy ;  $ ~~for ( int i = 0 ; i < 8 ; i ++ ) {  $ ~~~for ( int j = 0 ; j < 8 ; j ++ ) {  $ ~~~~cin >> maze [ i ] [ j ] ;  $ ~~~~if ( maze [ i ] [ j ] == 'K' && flag == 0 ) {  $ ~~~~~flag ++ ;  $ ~~~~~sx = i ;  $ ~~~~~sy = j ;  $ ~~~~} else if ( maze [ i ] [ j ] == 'K' && flag == 1 ) {  $ ~~~~~flag ++ ;  $ ~~~~~gx = i ;  $ ~~~~~gy = j ;  $ ~~~~}  $ ~~~}  $ ~~}  $ ~~int a , b ;  $ ~~a = abs ( sx - gx ) ;  $ ~~b = abs ( gy - sy ) ;  $ ~~if ( a % 4 == 0 && b % 4 == 0 ) {  $ ~~~cout << "YES" << endl ;  $ ~~} else  $ ~~~cout << "NO" << endl ;  $ ~}  $ }
const int mod = 1e9 + 7 ;  $ int dp [ 5005 ] [ 5005 ] ;  $ string a , b ;  $ int main ( ) {  $ ~cin >> a >> b ;  $ ~int len1 = a . length ( ) ;  $ ~int len2 = b . length ( ) ;  $ ~for ( int i = 1 ; i <= len1 ; i ++ ) {  $ ~~for ( int j = 1 ; j <= len2 ; j ++ ) {  $ ~~~if ( a . operator [ ] ( i - 1 ) == b . operator [ ] ( j - 1 ) ) { dp [ i ] [ j ] = ( dp [ i ] [ j ] + dp [ i - 1 ] [ j - 1 ] + 1 ) % mod ; }  $ ~~~dp [ i ] [ j ] = ( dp [ i ] [ j ] + dp [ i ] [ j - 1 ] ) % mod ;  $ ~~}  $ ~}  $ ~long long ans = 0 ;  $ ~for ( int i = 1 ; i <= len1 ; i ++ ) ans = ( ans + dp [ i ] [ len2 ] ) % mod ;  $ ~cout << ans << endl ;  $ }
int students ;  $ int main ( ) {  $ ~while ( cin >> students ) {  $ ~~int i , j , k ;  $ ~~int arr [ 1010 ] ;  $ ~~for ( i = 0 ; i < students ; i ++ ) {  $ ~~~int count = 0 , temp ;  $ ~~~for ( j = 0 ; j < 4 ; j ++ ) {  $ ~~~~cin >> temp ;  $ ~~~~count = count + temp ;  $ ~~~}  $ ~~~arr [ i ] = count ;  $ ~~}  $ ~~int roll = 1 ;  $ ~~for ( i = 1 ; i < students ; i ++ ) {  $ ~~~if ( arr [ i ] > arr [ 0 ] ) { roll ++ ; }  $ ~~}  $ ~~cout << roll << endl ;  $ ~}  $ ~return 0 ;  $ }
int main ( ) {  $ ~int l1 , s1 , r1 , p1 , l2 , s2 , r2 , p2 , l3 , s3 , r3 , p3 , l4 , s4 , r4 , p4 ;  $ ~cin >> l1 >> s1 >> r1 >> p1 ;  $ ~cin >> l2 >> s2 >> r2 >> p2 ;  $ ~cin >> l3 >> s3 >> r3 >> p3 ;  $ ~cin >> l4 >> s4 >> r4 >> p4 ;  $ ~if ( ( l1 || s1 || r1 ) && p1 ) {  $ ~~cout << "YES\n" ;  $ ~~return 0 ;  $ ~}  $ ~if ( ( l2 || s2 || r2 ) && p2 ) {  $ ~~cout << "YES\n" ;  $ ~~return 0 ;  $ ~}  $ ~if ( ( l3 || s3 || r3 ) && p3 ) {  $ ~~cout << "YES\n" ;  $ ~~return 0 ;  $ ~}  $ ~if ( ( l4 || s4 || r4 ) && p4 ) {  $ ~~cout << "YES\n" ;  $ ~~return 0 ;  $ ~}  $ ~if ( l1 && p4 ) {  $ ~~cout << "YES\n" ;  $ ~~return 0 ;  $ ~}  $ ~if ( s1 && p3 ) {  $ ~~cout << "YES\n" ;  $ ~~return 0 ;  $ ~}  $ ~if ( r1 && p2 ) {  $ ~~cout << "YES\n" ;  $ ~~return 0 ;  $ ~}  $ ~if ( l4 && p3 ) {  $ ~~cout << "YES\n" ;  $ ~~return 0 ;  $ ~}  $ ~if ( s4 && p2 ) {  $ ~~cout << "YES\n" ;  $ ~~return 0 ;  $ ~}  $ ~if ( r4 && p1 ) {  $ ~~cout << "YES\n" ;  $ ~~return 0 ;  $ ~}  $ ~if ( l3 && p2 ) {  $ ~~cout << "YES\n" ;  $ ~~return 0 ;  $ ~}  $ ~if ( s3 && p1 ) {  $ ~~cout << "YES\n" ;  $ ~~return 0 ;  $ ~}  $ ~if ( r3 && p4 ) {  $ ~~cout << "YES\n" ;  $ ~~return 0 ;  $ ~}  $ ~if ( l2 && p1 ) {  $ ~~cout << "YES\n" ;  $ ~~return 0 ;  $ ~}  $ ~if ( s2 && p4 ) {  $ ~~cout << "YES\n" ;  $ ~~return 0 ;  $ ~}  $ ~if ( r2 && p3 ) {  $ ~~cout << "YES\n" ;  $ ~~return 0 ;  $ ~}  $ ~cout << "NO\n" ;  $ }
int main ( ) {  $ ~int a , b , s ;  $ ~cin >> a >> b >> s ;  $ ~if ( abs ( a ) + abs ( b ) == s )  $ ~~cout << "Yes" << endl ;  $ ~else if ( abs ( a ) + abs ( b ) > s ) {  $ ~~cout << "No" << endl ;  $ ~} else {  $ ~~if ( ( s - ( abs ( a ) + abs ( b ) ) ) % 2 == 0 )  $ ~~~cout << "Yes" << endl ;  $ ~~else  $ ~~~cout << "No" << endl ;  $ ~}  $ ~return 0 ;  $ }
int main ( ) {  $ ~long long n , m , k , l ;  $ ~cin >> n >> m >> k >> l ;  $ ~if ( k + l > n ) {  $ ~~cout << - 1 << endl ;  $ ~~return 0 ;  $ ~}  $ ~if ( n / m * m < l + k ) {  $ ~~cout << - 1 << endl ;  $ ~~return 0 ;  $ ~}  $ ~long long ans = ( l + k ) / m ;  $ ~if ( ( l + k ) % m != 0 ) ans ++ ;  $ ~if ( ans * m > n )  $ ~~cout << - 1 << endl ;  $ ~else  $ ~~cout << ans << endl ;  $ }
int main ( ) {  $ ~int nega [ 100003 ] , posi [ 100003 ] , ne = 0 , po = 0 , sumne = 0 , sumpo = 0 ;  $ ~bool z = false ;  $ ~int n , x , a ;  $ ~cin >> n ;  $ ~memset ( nega , 0 , sizeof nega ) ;  $ ~memset ( posi , 0 , sizeof posi ) ;  $ ~for ( int i = 0 ; i < n ; i ++ ) {  $ ~~cin >> x >> a ;  $ ~~if ( x < 0 ) {  $ ~~~nega [ - x ] = a ;  $ ~~~ne ++ ;  $ ~~~sumne += a ;  $ ~~} else {  $ ~~~posi [ x ] = a ;  $ ~~~sumpo += a ;  $ ~~}  $ ~}  $ ~po = n - ne ;  $ ~if ( po == ne ) {  $ ~~cout << sumne + sumpo << endl ;  $ ~~return 0 ;  $ ~}  $ ~if ( po < ne ) {  $ ~~sumne = 0 ;  $ ~~int cont = 0 ;  $ ~~for ( int i = 0 ; cont < po + 1 ; i ++ ) {  $ ~~~if ( nega [ i ] != 0 ) {  $ ~~~~sumne += nega [ i ] ;  $ ~~~~cont ++ ;  $ ~~~}  $ ~~}  $ ~}  $ ~if ( po > ne ) {  $ ~~sumpo = 0 ;  $ ~~int cont = 0 ;  $ ~~for ( int i = 0 ; cont < ne + 1 ; i ++ ) {  $ ~~~if ( posi [ i ] != 0 ) {  $ ~~~~sumpo += posi [ i ] ;  $ ~~~~cont ++ ;  $ ~~~}  $ ~~}  $ ~}  $ ~cout << sumne + sumpo << endl ;  $ ~return 0 ;  $ }
char s [ 10000010 ] ;  $ int num [ 100010 ] ;  $ int main ( ) {  $ ~int n ;  $ ~int i ;  $ ~bool flag = false ;  $ ~cin >> n ;  $ ~getchar ( ) ;  $ ~gets ( s ) ;  $ ~for ( i = 0 ; i < n ; i ++ ) {  $ ~~num [ s [ i ] - 'a' ] ++ ;  $ ~~if ( num [ s [ i ] - 'a' ] > 1 || n == 1 ) flag = true ;  $ ~}  $ ~if ( flag == true )  $ ~~cout << "Yes" << endl ;  $ ~else  $ ~~cout << "No" << endl ;  $ ~return 0 ;  $ }
const double PI = acos ( - 1 ) ;  $ const int MAX = 2e9 + 7 ;  $ const int MOD = 1000000007 ;  $ map < int , long long > m ;  $ void solve ( ) {  $ ~int a ;  $ ~cin >> a ;  $ ~string s ;  $ ~cin >> s ;  $ ~long long n = s . size ( ) ;  $ ~long long total = 0 ;  $ ~int p [ n ] ;  $ ~for ( int i = 0 ; i < n ; i ++ ) {  $ ~~if ( ! i )  $ ~~~p [ i ] = int ( s [ i ] - '0' ) ;  $ ~~else  $ ~~~p [ i ] = p [ i - 1 ] + int ( s [ i ] - '0' ) ;  $ ~}  $ ~for ( int len = 1 ; len <= n ; len ++ ) {  $ ~~for ( int i = 0 ; i + len - 1 < n ; i ++ ) {  $ ~~~int sum = p [ i + len - 1 ] ;  $ ~~~if ( i != 0 ) sum -= p [ i - 1 ] ;  $ ~~~m [ sum ] ++ ;  $ ~~~total ++ ;  $ ~~}  $ ~}  $ ~if ( a == 0 ) {  $ ~~cout << total * m [ 0 ] * 2 - m [ 0 ] * m [ 0 ] << endl ;  $ ~~return ;  $ ~}  $ ~long long ans = 0 ;  $ ~for ( int i = 1 ; i <= sqrt ( a ) ; i ++ ) {  $ ~~if ( a % i == 0 ) {  $ ~~~if ( i == sqrt ( a ) ) {  $ ~~~~ans += ( ( m [ i ] * ( m [ i ] - 1 ) ) + m [ i ] ) ;  $ ~~~} else {  $ ~~~~ans += 2 * ( m [ i ] * m [ a / i ] ) ;  $ ~~~}  $ ~~}  $ ~}  $ ~cout << ans << endl ;  $ }  $ int main ( ) {  $ ~solve ( ) ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~int n = 0 , i = 0 , t = 0 , e = 0 , answer ;  $ ~string s ;  $ ~cin >> s ;  $ ~for ( int I = 0 ; I != s . length ( ) ; ++ I ) {  $ ~~if ( s [ I ] == 'n' )  $ ~~~n ++ ;  $ ~~else if ( s [ I ] == 'i' )  $ ~~~i ++ ;  $ ~~else if ( s [ I ] == 'e' )  $ ~~~e ++ ;  $ ~~else if ( s [ I ] == 't' )  $ ~~~t ++ ;  $ ~}  $ ~n = ( n - 1 ) / 2 ;  $ ~e /= 3 ;  $ ~answer = min ( n , min ( e , min ( i , t ) ) ) ;  $ ~cout << answer << endl ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~int arr [ 1300006 ] = { } ;  $ ~arr [ 1 ] = 1 ;  $ ~for ( int i = 2 ; i <= sqrt ( 1300006 ) ; i ++ )  $ ~~for ( int j = i * i ; j < 1300006 ; j += i ) {  $ ~~~if ( i % 2 == 0 && i != 2 ) break ;  $ ~~~arr [ j ] = 1 ;  $ ~~}  $ ~long double c = 0 , c2 = 0 ;  $ ~long long a , b ;  $ ~cin >> a >> b ;  $ ~unsigned long long maxi = 1 ;  $ ~for ( unsigned long long i = 1 ; i < 1300006 ; i ++ ) {  $ ~~if ( ! arr [ i ] ) c += b ;  $ ~~stringstream x ;  $ ~~string s ;  $ ~~x << i ;  $ ~~s = x . str ( ) ;  $ ~~string news = s ;  $ ~~reverse ( s . begin ( ) , s . end ( ) ) ;  $ ~~if ( news == s ) c2 += a ;  $ ~~if ( c2 >= c ) maxi = max ( maxi , i ) ;  $ ~}  $ ~cout << fixed << setprecision ( 0 ) << maxi << endl ;  $ }
int main ( ) {  $ ~int a , b , s ;  $ ~cin >> a >> b >> s ;  $ ~int dis = abs ( a ) + abs ( b ) ;  $ ~cout << ( dis <= s && dis % 2 == s % 2 ? "Yes" : "No" ) << endl ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~string time ;  $ ~cin >> time ;  $ ~vector < int > t ( 4 ) ;  $ ~t [ 0 ] = time [ 0 ] - '0' ;  $ ~t [ 1 ] = time [ 1 ] - '0' ;  $ ~t [ 2 ] = time [ 3 ] - '0' ;  $ ~t [ 3 ] = time [ 4 ] - '0' ;  $ ~int count = 0 ;  $ ~while ( true ) {  $ ~~if ( t [ 0 ] == t [ 3 ] && t [ 1 ] == t [ 2 ] ) { break ; }  $ ~~t [ 3 ] += 1 ;  $ ~~if ( t [ 3 ] > 9 ) {  $ ~~~t [ 2 ] += 1 ;  $ ~~~t [ 3 ] = 0 ;  $ ~~~if ( t [ 2 ] > 5 ) {  $ ~~~~t [ 1 ] += 1 ;  $ ~~~~t [ 2 ] = 0 ;  $ ~~~~t [ 3 ] = 0 ;  $ ~~~~if ( t [ 0 ] != 2 && t [ 1 ] > 9 ) {  $ ~~~~~t [ 0 ] += 1 ;  $ ~~~~~t [ 1 ] = 0 ;  $ ~~~~~t [ 2 ] = 0 ;  $ ~~~~~t [ 3 ] = 0 ;  $ ~~~~}  $ ~~~~if ( t [ 0 ] == 2 && t [ 1 ] > 3 ) {  $ ~~~~~t [ 0 ] = 0 ;  $ ~~~~~t [ 1 ] = 0 ;  $ ~~~~~t [ 2 ] = 0 ;  $ ~~~~~t [ 3 ] = 0 ;  $ ~~~~}  $ ~~~}  $ ~~}  $ ~~++ count ;  $ ~}  $ ~cout << count << "\n" ;  $ ~return 0 ;  $ }
const int oo = 0 x3f3f3f3f ;  $ const double PI = 2 * acos ( 0.0 ) ;  $ int x , t , a , b , da , db ;  $ bool solve ( ) {  $ ~for ( int i = 0 ; i < t ; i ++ ) {  $ ~~for ( int j = 0 ; j < t ; j ++ ) {  $ ~~~if ( a - i * da + b - j * db == x || a - i * da == x || b - j * db == x ) return 1 ;  $ ~~}  $ ~}  $ ~return 0 ;  $ }  $ int main ( ) {  $ ~cin >> x >> t >> a >> b >> da >> db ;  $ ~if ( ! x )  $ ~~cout << "YES" << endl ;  $ ~else  $ ~~cout << ( solve ( ) ? "YES" : "NO" ) << endl ;  $ }
int win [ 300005 ] = { 0 } ;  $ int main ( ) {  $ ~int n , m ;  $ ~cin >> n >> m ;  $ ~set < int > knight ;  $ ~for ( int i = 1 ; i <= n + 1 ; i ++ ) knight . insert ( i ) ;  $ ~for ( int i = 0 ; i < m ; i ++ ) {  $ ~~int a , b , c ;  $ ~~cin >> a >> b >> c ;  $ ~~set < int > : : iterator s , e , p ;  $ ~~s = knight . lower_bound ( a ) ;  $ ~~e = knight . upper_bound ( b ) ;  $ ~~if ( * e <= b ) e ++ ;  $ ~~for ( p = s ; p != e ; ) {  $ ~~~if ( * p == c )  $ ~~~~p ++ ;  $ ~~~else {  $ ~~~~win [ * p ] = c ;  $ ~~~~knight . erase ( p ++ ) ;  $ ~~~}  $ ~~}  $ ~}  $ ~for ( int i = 1 ; i <= n ; i ++ ) {  $ ~~if ( i != 1 ) cout << ' ' ;  $ ~~cout << win [ i ] ;  $ ~}  $ ~cout << endl ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~int s , n , i ;  $ ~multimap < int , int > dragon ;  $ ~pair < int , int > temp ;  $ ~pair < multimap < int , int > : : iterator , multimap < int , int > : : iterator > r ;  $ ~multimap < int , int > : : iterator it1 , it2 ;  $ ~cin >> s >> n ;  $ ~for ( i = 0 ; i <= n - 1 ; i ++ ) {  $ ~~cin >> temp . first >> temp . second ;  $ ~~dragon . insert ( temp ) ;  $ ~}  $ ~for ( it1 = dragon . begin ( ) ; it1 != dragon . lower_bound ( s ) ; it1 ++ ) {  $ ~~r = dragon . equal_range ( it1 -> first ) ;  $ ~~for ( it2 = r . first ; it2 != r . second ; it2 ++ , it1 ++ ) s += it2 -> second ;  $ ~~it1 -- ;  $ ~}  $ ~if ( it1 == dragon . end ( ) )  $ ~~cout << "YES\n" ;  $ ~else  $ ~~cout << "NO\n" ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~int n ;  $ ~cin >> n ;  $ ~int mx [ n ] , crr [ n ] ;  $ ~int mxn = INT_MIN ;  $ ~for ( int i = 0 ; i < int ( n ) ; i ++ ) {  $ ~~int tmp = INT_MIN , val , m ;  $ ~~cin >> m ;  $ ~~crr [ i ] = m ;  $ ~~for ( int j = 0 ; j < int ( m ) ; j ++ ) {  $ ~~~cin >> val ;  $ ~~~tmp = max ( tmp , val ) ;  $ ~~}  $ ~~mx [ i ] = tmp ;  $ ~~mxn = max ( mxn , tmp ) ;  $ ~}  $ ~long long int ans = 0 ;  $ ~for ( int i = 0 ; i < int ( n ) ; i ++ ) { ans += ( 1 LL * ( mxn - mx [ i ] ) * crr [ i ] ) ; }  $ ~cout << ans << "\n" ;  $ ~return 0 ;  $ }
long long lcm ( long long a , long long b , long long c ) {  $ ~long long ans = a * b / __gcd ( a , b ) ;  $ ~ans = ( ans * c ) / __gcd ( ans , c ) ;  $ ~return ans ;  $ }  $ int main ( ) {  $ ~long long n ;  $ ~cin >> n ;  $ ~long long maxim = - 1 ;  $ ~for ( long long i = n ; i >= max ( 1 LL , n - 6 ) ; i -- )  $ ~~for ( long long j = n ; j >= max ( 1 LL , n - 6 ) ; j -- )  $ ~~~for ( long long k = n ; k >= max ( 1 LL , n - 6 ) ; k -- ) maxim = max ( lcm ( i , j , k ) , maxim ) ;  $ ~cout << maxim << endl ;  $ ~return 0 ;  $ }
int n ;  $ int is_x1 ( int a , int b ) {  $ ~if ( b == 0 && a >= 0 && a <= n ) return 1 ;  $ ~return 0 ;  $ }  $ int is_x2 ( int a , int b ) {  $ ~if ( b == n && a >= 0 && a <= n ) return 3 ;  $ ~return 0 ;  $ }  $ int is_y1 ( int b , int a ) {  $ ~if ( b == 0 && a >= 0 && a <= n ) return 4 ;  $ ~return 0 ;  $ }  $ int is_y2 ( int b , int a ) {  $ ~if ( b == n && a >= 0 && a <= n ) return 2 ;  $ ~return 0 ;  $ }  $ int main ( ) {  $ ~int t ;  $ ~int x1 , x2 , y1 , y2 , j ;  $ ~cin >> n >> x1 >> y1 >> x2 >> y2 ;  $ ~int value1 , value2 , val = 0 , a , b ;  $ ~for ( int i = 0 ; i < 2 ; i ++ ) {  $ ~~if ( i == 0 ) {  $ ~~~a = x1 , b = y1 ;  $ ~~} else {  $ ~~~a = x2 , b = y2 ;  $ ~~}  $ ~~j = 1 ;  $ ~~while ( ! val ) {  $ ~~~if ( j == 1 )  $ ~~~~val = is_x1 ( a , b ) ;  $ ~~~else if ( j == 2 )  $ ~~~~val = is_y1 ( a , b ) ;  $ ~~~else if ( j == 3 )  $ ~~~~val = is_x2 ( a , b ) ;  $ ~~~else if ( j == 4 )  $ ~~~~val = is_y2 ( a , b ) ;  $ ~~~j ++ ;  $ ~~}  $ ~~if ( i == 0 )  $ ~~~value1 = val ;  $ ~~else  $ ~~~value2 = val ;  $ ~~val = 0 ;  $ ~}  $ ~if ( value1 == value2 ) {  $ ~~if ( value1 == 1 || value1 == 3 ) {  $ ~~~cout << abs ( x1 - x2 ) << "\n" ;  $ ~~} else  $ ~~~cout << abs ( y1 - y2 ) << "\n" ;  $ ~} else if ( ( value1 == 1 && value2 == 2 ) || ( value1 == 2 && value2 == 1 ) ) {  $ ~~if ( value1 == 1 )  $ ~~~cout << ( n - x1 ) + y2 << "\n" ;  $ ~~else  $ ~~~cout << ( n - x2 ) + y1 << "\n" ;  $ ~} else if ( ( value1 == 1 && value2 == 4 ) || ( value1 == 4 && value2 == 1 ) ) {  $ ~~if ( value1 == 1 )  $ ~~~cout << x1 + y2 << "\n" ;  $ ~~else  $ ~~~cout << x2 + y1 << "\n" ;  $ ~} else if ( ( value1 == 2 && value2 == 3 ) || ( value1 == 3 && value2 == 2 ) ) {  $ ~~if ( value1 == 2 )  $ ~~~cout << ( n - y1 ) + ( n - x2 ) << "\n" ;  $ ~~else  $ ~~~cout << ( n - y2 ) + ( n - x1 ) << "\n" ;  $ ~} else if ( ( value1 == 3 && value2 == 4 ) || ( value1 == 4 && value2 == 3 ) ) {  $ ~~if ( value1 == 3 )  $ ~~~cout << x1 + n - y2 << "\n" ;  $ ~~else  $ ~~~cout << x2 + n - y1 << "\n" ;  $ ~} else if ( ( value1 == 1 && value2 == 3 ) || ( value1 == 3 && value2 == 1 ) ) {  $ ~~cout << ( min ( x1 + n + x2 , n - x1 + n + n - x2 ) ) << "\n" ;  $ ~} else if ( ( value1 == 2 && value2 == 4 ) || ( value1 == 4 && value2 == 2 ) ) {  $ ~~cout << ( min ( y1 + n + y2 , n - y1 + n + n - y2 ) ) << "\n" ;  $ ~}  $ ~return 0 ;  $ }
unsigned long long a [ 2000000 ] ;  $ unsigned long long b [ 2000000 ] ;  $ int n ;  $ bool judge ( int n ) {  $ ~for ( int i = 0 ; i < n - 1 ; ++ i ) {  $ ~~if ( a [ i ] == a [ i + 1 ] ) return true ;  $ ~}  $ ~return false ;  $ }  $ int main ( ) {  $ ~while ( cin >> n ) {  $ ~~memset ( a , 0 , sizeof ( a ) ) ;  $ ~~for ( int i = 0 ; i < n ; ++ i ) {  $ ~~~cin >> a [ i ] ;  $ ~~~b [ a [ i ] ] ++ ;  $ ~~}  $ ~~sort ( a , a + n ) ;  $ ~~int ans = 0 ;  $ ~~for ( int i = 1 ; i < 2000000 ; ++ i ) {  $ ~~~b [ i ] += ( b [ i - 1 ] / 2 ) ;  $ ~~~b [ i - 1 ] %= 2 ;  $ ~~~ans += b [ i - 1 ] ;  $ ~~}  $ ~~cout << ans << endl ;  $ ~}  $ }
const int N = 1e5 + 10 ;  $ long long n , a , m , d ;  $ long long t [ N ] , da ;  $ long long nextDiv ( long long bound , long long div ) {  $ ~return ( bound % div == 0 ? bound : bound + div - bound % div ) ;  $ }  $ long long nextDiv ( long long bound , long long num , long long div ) {  $ ~if ( bound % div == 0 ) return bound + ( num ) * div ;  $ ~return nextDiv ( bound , div ) + ( num - 1 ) * div ;  $ }  $ long long prevDiv ( long long bound , long long div ) {  $ ~return ( bound % div == 0 ? bound : bound - bound % div ) ;  $ }  $ long long numDiv ( long long L , long long R , long long div ) {  $ ~return prevDiv ( R , div ) / div - prevDiv ( L - 1 , div ) / div ;  $ }  $ pair < long long , long long > numOpen ( long long L , long long R ) {  $ ~long long realR = min ( R , n * a ) ;  $ ~long long xx = numDiv ( L , realR , a ) ;  $ ~if ( xx <= da ) return { 1 , nextDiv ( L , a ) + d } ;  $ ~long long noob = ( xx % da == 0 ? xx - da : xx - xx % da ) ;  $ ~long long nextt = nextDiv ( L , noob , a ) ;  $ ~if ( xx % da == 0 ) return { xx / da , nextt + d } ;  $ ~return { 1 + xx / da , nextt + d } ;  $ }  $ long long special ( long long bound ) {  $ ~long long cur = nextDiv ( bound + 1 , a ) ;  $ ~if ( n < numDiv ( a , bound , a ) ) return 0 ;  $ ~long long numLeft = n - numDiv ( a , bound , a ) ;  $ ~if ( numLeft > 0 )  $ ~~return numOpen ( cur , nextDiv ( cur , numLeft - 1 , a ) ) . first ;  $ ~else  $ ~~return 0 ;  $ }  $ void solve ( ) {  $ ~long long cur = min ( a , t [ 1 ] ) ;  $ ~long long pt = 1 ;  $ ~long long ans = 0 ;  $ ~while ( pt <= m ) {  $ ~~if ( cur != t [ pt ] ) {  $ ~~~pair < long long , long long > xop = numOpen ( cur , t [ pt ] - 1 ) ;  $ ~~~ans += xop . first ;  $ ~~~while ( pt <= m && t [ pt ] <= xop . second ) pt ++ ;  $ ~~~if ( pt == m + 1 ) {  $ ~~~~ans += special ( xop . second ) ;  $ ~~~~break ;  $ ~~~}  $ ~~~cur = t [ pt ] ;  $ ~~~if ( numDiv ( a , xop . second , a ) < n ) cur = min ( t [ pt ] , nextDiv ( xop . second + 1 , a ) ) ;  $ ~~} else {  $ ~~~ans ++ ;  $ ~~~long long neo = pt ;  $ ~~~while ( pt < m && t [ pt + 1 ] - t [ neo ] <= d ) pt ++ ;  $ ~~~if ( pt == m ) {  $ ~~~~ans += special ( t [ neo ] + d ) ;  $ ~~~~break ;  $ ~~~}  $ ~~~pt ++ ;  $ ~~~cur = t [ pt ] ;  $ ~~~if ( numDiv ( a , t [ neo ] + d , a ) < n ) cur = min ( t [ pt ] , nextDiv ( t [ neo ] + d + 1 , a ) ) ;  $ ~~}  $ ~}  $ ~cout << ans << '\n' ;  $ }  $ int main ( ) {  $ ~cin >> n >> m >> a >> d ;  $ ~for ( int i = 1 ; i <= m ; i ++ ) cin >> t [ i ] ;  $ ~da = numDiv ( a , a + d , a ) ;  $ ~solve ( ) ;  $ }
long long a [ 1000 ] [ 1000 ] ;  $ long long q ;  $ long long fun ( long long i ) {  $ ~for ( long long j = 0 ; j < 1000 ; j ++ ) {  $ ~~if ( a [ i ] [ j ] != 0 ) { return min ( fun ( j ) , a [ i ] [ j ] ) ; }  $ ~}  $ ~q = i ;  $ ~return INT_MAX ;  $ }  $ vector < long long > vid [ 3 ] ;  $ int main ( ) {  $ ~;  $ ~long long n , p ;  $ ~cin >> n >> p ;  $ ~long long x , y , z ;  $ ~for ( long long i = 0 ; i < p ; i ++ ) {  $ ~~cin >> x >> y >> z ;  $ ~~a [ x - 1 ] [ y - 1 ] = z ;  $ ~}  $ ~for ( long long i = 0 ; i < n ; i ++ ) {  $ ~~long long j ;  $ ~~for ( j = 0 ; j < n ; j ++ ) {  $ ~~~if ( a [ j ] [ i ] != 0 ) break ;  $ ~~}  $ ~~if ( j == n ) {  $ ~~~int k = fun ( i ) ;  $ ~~~if ( q != i ) {  $ ~~~~vid [ 0 ] . push_back ( i ) ;  $ ~~~~vid [ 2 ] . push_back ( k ) ;  $ ~~~~vid [ 1 ] . push_back ( q ) ;  $ ~~~}  $ ~~}  $ ~}  $ ~cout << vid [ 0 ] . size ( ) << endl ;  $ ~for ( long long i = 0 ; i < vid [ 0 ] . size ( ) ; i ++ ) { cout << vid [ 0 ] [ i ] + 1 << ' ' << vid [ 1 ] [ i ] + 1 << ' ' << vid [ 2 ] [ i ] << '\n' ; }  $ }
int ans [ 20000 ] , i , j , k , m , n , l ;  $ char a [ 20000 ] , b [ 20000 ] , c [ 20000 ] , d [ 20000 ] ;  $ int main ( ) {  $ ~for ( i = 0 ; i < 2000 ; ++ i ) ans [ i ] = 0 ;  $ ~gets ( a ) ;  $ ~gets ( d ) ;  $ ~m = strlen ( d ) ;  $ ~for ( i = 0 ; i < m - 1 ; ++ i ) b [ i ] = ' ' ;  $ ~strcat ( b , a ) ;  $ ~n = strlen ( b ) ;  $ ~for ( i = n ; i < m + n - 1 ; ++ i ) b [ i ] = '0' ;  $ ~l = m ;  $ ~for ( i = 0 ; i < n ; ++ i ) {  $ ~~for ( k = i ; k < i + l ; ++ k ) c [ k - i ] = b [ k ] ;  $ ~~for ( j = 0 ; j < l ; ++ j ) {  $ ~~~if ( d [ j ] == c [ j ] ) ans [ i ] ++ ;  $ ~~}  $ ~}  $ ~sort ( ans , ans + n + 1 ) ;  $ ~cout << m - ans [ i ] << endl ;  $ ~return 0 ;  $ }
map < long long , long long > mp ;  $ int main ( ) {  $ ~long long i , j , a , ans = 0 , cnt , n ;  $ ~string s ;  $ ~cin >> a >> s ;  $ ~n = ( int ) ( s . size ( ) ) ;  $ ~for ( i = 0 ; i < n ; i ++ ) s [ i ] -= 48 ;  $ ~for ( i = 0 ; i < n ; i ++ ) {  $ ~~cnt = 0 ;  $ ~~for ( j = i ; j < n ; j ++ ) {  $ ~~~cnt += s [ j ] ;  $ ~~~mp [ cnt ] ++ ;  $ ~~}  $ ~}  $ ~for ( i = 0 ; i < n ; i ++ ) {  $ ~~cnt = 0 ;  $ ~~for ( j = i ; j < n ; j ++ ) {  $ ~~~cnt += s [ j ] ;  $ ~~~if ( cnt == 0 && a == 0 )  $ ~~~~ans += ( n * ( n + 1 ) ) / 2 ;  $ ~~~else if ( cnt != 0 && a % cnt == 0 && mp . find ( a / cnt ) != mp . end ( ) )  $ ~~~~ans += mp [ a / cnt ] ;  $ ~~}  $ ~}  $ ~cout << ans << "\n" ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~int n ;  $ ~cin >> n ;  $ ~bool ans = false ;  $ ~int sqr = ceil ( sqrt ( 2 * n ) ) ;  $ ~for ( int i = 1 ; i <= sqr ; i ++ ) {  $ ~~for ( int j = i ; j <= sqr ; j ++ ) {  $ ~~~if ( i * ( i + 1 ) + j * ( j + 1 ) == 2 * n ) {  $ ~~~~ans = true ;  $ ~~~~break ;  $ ~~~}  $ ~~}  $ ~~if ( ans ) break ;  $ ~}  $ ~cout << ( ans ? "YES" : "NO" ) << endl ;  $ ~return 0 ;  $ }
int d [ 30 ] ;  $ int t [ 7 ] ;  $ int ne , me ;  $ int n , m ;  $ bool check ( ) {  $ ~int tn = 0 ;  $ ~int b = 1 ;  $ ~for ( int i = 0 ; i < ne ; i ++ ) {  $ ~~tn += t [ i ] * b ;  $ ~~b *= 7 ;  $ ~}  $ ~b = 1 ;  $ ~int tm = 0 ;  $ ~for ( int i = ne ; i < me ; i ++ ) {  $ ~~tm += t [ i ] * b ;  $ ~~b *= 7 ;  $ ~}  $ ~return ( tn <= n && tm <= m ) ;  $ }  $ int ans = 0 ;  $ void dfs0 ( int p ) {  $ ~if ( p >= me ) {  $ ~~ans += check ( ) ;  $ ~~return ;  $ ~}  $ ~for ( int i = p ; i < me ; i ++ ) {  $ ~~swap ( t [ p ] , t [ i ] ) ;  $ ~~dfs0 ( p + 1 ) ;  $ ~~swap ( t [ p ] , t [ i ] ) ;  $ ~}  $ }  $ void dfs1 ( ) {  $ ~for ( int s = ( 1 << 7 ) - 1 ; s > 0 ; s -- ) {  $ ~~int cnt = 0 ;  $ ~~for ( int j = 0 ; j < 7 ; j ++ ) {  $ ~~~if ( ( s >> j ) & 1 ) { t [ cnt ++ ] = j ; }  $ ~~}  $ ~~if ( cnt == me ) { dfs0 ( 0 ) ; }  $ ~}  $ }  $ int main ( ) {  $ ~cin >> n >> m ;  $ ~n -- ;  $ ~m -- ;  $ ~ne = 0 ;  $ ~int dn = n , dm = m ;  $ ~if ( dn == 0 ) {  $ ~~ne ++ ;  $ ~} else {  $ ~~while ( dn ) {  $ ~~~d [ ne ++ ] = dn % 7 ;  $ ~~~dn /= 7 ;  $ ~~}  $ ~}  $ ~me = ne ;  $ ~if ( dm == 0 ) {  $ ~~me ++ ;  $ ~} else {  $ ~~while ( dm ) {  $ ~~~d [ me ++ ] = dm % 7 ;  $ ~~~dm /= 7 ;  $ ~~}  $ ~}  $ ~if ( me > 7 ) {  $ ~~cout << 0 << endl ;  $ ~} else {  $ ~~dfs1 ( ) ;  $ ~~cout << ans << endl ;  $ ~}  $ ~return 0 ;  $ }
char s [ 1005 ] ;  $ int main ( ) {  $ ~int n ;  $ ~cin >> n ;  $ ~cin >> s + 1 ;  $ ~int cnt = 0 , cnt0 = 0 , cnt1 = 0 , l = n / 2 ;  $ ~if ( n % 2 ) l ++ ;  $ ~for ( int i = 1 ; i <= n ; i ++ ) {  $ ~~cnt += s [ i ] - '0' ;  $ ~~if ( s [ i ] == '0' ) cnt0 ++ , cnt1 = 0 ;  $ ~~if ( s [ i ] == '1' ) cnt1 ++ , cnt0 = 0 ;  $ ~~if ( cnt0 == 3 || cnt1 == 2 ) {  $ ~~~cout << "No" << endl ;  $ ~~~return 0 ;  $ ~~}  $ ~}  $ ~if ( n == 1 && s [ 1 ] == '0' )  $ ~~cout << "No" << endl ;  $ ~else if ( ( s [ 1 ] == '0' && s [ 2 ] == '0' ) || ( s [ n - 1 ] == '0' && s [ n ] == '0' ) )  $ ~~cout << "No" << endl ;  $ ~else  $ ~~cout << "Yes" << endl ;  $ ~return 0 ;  $ }
int a [ 500010 ] ;  $ int main ( ) {  $ ~int n ;  $ ~cin >> n ;  $ ~for ( int i = 0 ; i < n ; i ++ ) cin >> a [ i ] ;  $ ~int ans ( 0 ) ;  $ ~int l , r ;  $ ~for ( int i = 0 ; i < n ; i ++ ) {  $ ~~l = i ;  $ ~~r = i + 1 ;  $ ~~while ( r < n && a [ l ] != a [ r ] ) {  $ ~~~l ++ ;  $ ~~~r ++ ;  $ ~~}  $ ~~l = i + 1 ;  $ ~~r -= 2 ;  $ ~~int num ( 0 ) ;  $ ~~while ( l <= r ) {  $ ~~~a [ l ] = a [ l - 1 ] ;  $ ~~~a [ r ] = a [ r + 1 ] ;  $ ~~~l ++ ;  $ ~~~r -- ;  $ ~~~num ++ ;  $ ~~}  $ ~~ans = max ( ans , num ) ;  $ ~}  $ ~cout << ans << endl ;  $ ~for ( int i = 0 ; i < n - 1 ; i ++ ) cout << a [ i ] << ' ' ;  $ ~cout << a [ n - 1 ] << endl ;  $ ~return 0 ;  $ }
long long int power ( long long int x , long long int y ) {  $ ~long long int temp ;  $ ~if ( y == 0 ) return 1 ;  $ ~temp = power ( x , y / 2 ) ;  $ ~if ( y % 2 == 0 )  $ ~~return temp * temp ;  $ ~else {  $ ~~if ( y > 0 )  $ ~~~return x * temp * temp ;  $ ~~else  $ ~~~return ( temp * temp ) / x ;  $ ~}  $ }  $ bool prime [ 10000000 ] ;  $ void sieve ( ) {  $ ~memset ( prime , true , sizeof ( prime ) ) ;  $ ~prime [ 0 ] = prime [ 1 ] = false ;  $ ~for ( long long int p = 2 ; p * p <= 10000000 ; p ++ ) {  $ ~~if ( prime [ p ] == true ) {  $ ~~~for ( long long int i = p * 2 ; i <= 10000000 ; i += p ) prime [ i ] = false ;  $ ~~}  $ ~}  $ }  $ long long int gcd ( long long int a , long long int b ) {  $ ~if ( a == 0 ) return b ;  $ ~return gcd ( b % a , a ) ;  $ }  $ int main ( ) {  $ ~long long int n , m , k , l ;  $ ~cin >> n >> m >> k >> l ;  $ ~if ( m > n || l > n - k ) {  $ ~~cout << - 1 << "\n" ;  $ ~~return 0 ;  $ ~}  $ ~long long int x ;  $ ~x = ( k + l ) / m ;  $ ~if ( ( k + l ) % m != 0 ) x ++ ;  $ ~if ( m * x > n ) {  $ ~~cout << - 1 << "\n" ;  $ ~} else {  $ ~~cout << x << "\n" ;  $ ~}  $ ~return 0 ;  $ }
int main ( ) {  $ ~int a , b , c , d ;  $ ~cin >> a >> b >> c >> d ;  $ ~if ( b - a == c - b && d - c == c - b ) {  $ ~~cout << d + c - b << endl ;  $ ~~return 0 ;  $ ~} else {  $ ~~double m = 1.0 * b / a ;  $ ~~if ( m * b == c && m * c == d ) {  $ ~~~double k = d * m ;  $ ~~~int kk = d * m ;  $ ~~~if ( kk == k ) {  $ ~~~~cout << kk << endl ;  $ ~~~~return 0 ;  $ ~~~}  $ ~~}  $ ~}  $ ~cout << 42 << endl ;  $ ~return 0 ;  $ }
string s [ 105 ] , t ;  $ string sl [ 105 ] , tl ;  $ bool ok [ 105 ] ;  $ int n ;  $ string getLower ( string s ) {  $ ~for ( int i = 0 ; i < s . size ( ) ; ++ i ) s [ i ] = tolower ( s [ i ] ) ;  $ ~return s ;  $ }  $ int main ( ) {  $ ~cin >> n ;  $ ~int i , j , k ;  $ ~for ( i = 0 ; i < n ; ++ i ) {  $ ~~cin >> s [ i ] ;  $ ~~sl [ i ] = getLower ( s [ i ] ) ;  $ ~}  $ ~cin >> t ;  $ ~tl = getLower ( t ) ;  $ ~char letter ;  $ ~cin >> letter ;  $ ~int len = t . size ( ) ;  $ ~for ( i = 0 ; i < n ; ++ i ) {  $ ~~int m = s [ i ] . size ( ) ;  $ ~~for ( j = 0 ; j <= len - m ; ++ j )  $ ~~~if ( tl . substr ( j , m ) == sl [ i ] ) {  $ ~~~~for ( k = 0 ; k < m ; ++ k ) ok [ j + k ] = 1 ;  $ ~~~}  $ ~}  $ ~for ( i = 0 ; i < len ; ++ i )  $ ~~if ( ok [ i ] ) {  $ ~~~bool flag = isupper ( t [ i ] ) ;  $ ~~~if ( tl [ i ] == letter ) {  $ ~~~~if ( letter == 'a' )  $ ~~~~~t [ i ] = 'b' ;  $ ~~~~else  $ ~~~~~t [ i ] = 'a' ;  $ ~~~} else  $ ~~~~t [ i ] = letter ;  $ ~~~if ( flag ) t [ i ] = toupper ( t [ i ] ) ;  $ ~~}  $ ~cout << t << endl ;  $ ~return 0 ;  $ }
const int N = 1e5 + 7 ;  $ const string s [ ] = { "lios" , "liala" , "etr" , "etra" , "initis" , "inites" } ;  $ map < string , int > mp ;  $ string h [ N ] ;  $ int a [ N ] ;  $ inline int get_s ( string & s ) {  $ ~if ( s . size ( ) < 3 ) return 0 ;  $ ~for ( int i = 3 ; i <= 6 ; i ++ ) {  $ ~~if ( i > s . size ( ) ) return 0 ;  $ ~~if ( mp . find ( s . substr ( s . size ( ) - i , i ) ) != mp . end ( ) ) return mp [ s . substr ( s . size ( ) - i , i ) ] ;  $ ~}  $ ~return 0 ;  $ }  $ int main ( ) {  $ ~int cnt = 0 ;  $ ~for ( int i = 0 ; i < 6 ; i ++ ) mp [ s [ i ] ] = i + 1 ;  $ ~while ( cin >> h [ cnt ] ) cnt ++ ;  $ ~bool f1 = 0 , f2 = 0 ;  $ ~for ( int i = 0 ; i < cnt ; i ++ ) {  $ ~~a [ i ] = get_s ( h [ i ] ) ;  $ ~~if ( ! a [ i ] ) return 0 * puts ( "NO" ) ;  $ ~~f1 |= a [ i ] & 1 , f2 |= ~ a [ i ] & 1 ;  $ ~}  $ ~if ( cnt == 1 ) return 0 * puts ( "YES" ) ;  $ ~if ( f1 && f2 ) return 0 * puts ( "NO" ) ;  $ ~for ( int i = 0 ; i < cnt ; i ++ ) ( a [ i ] += 1 ) >> = 1 ;  $ ~int p = 0 ;  $ ~while ( p < cnt - 1 && a [ p ] == a [ p + 1 ] && a [ p ] == 1 ) p ++ ;  $ ~if ( a [ p ] == 1 )  $ ~~p ++ ;  $ ~else if ( a [ p ] == 3 )  $ ~~return 0 * puts ( "NO" ) ;  $ ~if ( a [ p ] != 2 )  $ ~~return 0 * puts ( "NO" ) ;  $ ~else  $ ~~p ++ ;  $ ~while ( p < cnt )  $ ~~if ( a [ p ++ ] != 3 ) return 0 * puts ( "NO" ) ;  $ ~puts ( "YES" ) ;  $ ~return 0 ;  $ }
char a [ 1000000 ] ;  $ int main ( ) {  $ ~cin >> a ;  $ ~int n = strlen ( a ) ;  $ ~for ( int i = 0 ; i < n - 2 ; i ++ ) {  $ ~~int x = 0 , y = 0 , z = 0 ;  $ ~~if ( a [ i ] == 'A' || a [ i + 1 ] == 'A' || a [ i + 2 ] == 'A' ) { x = 1 ; }  $ ~~if ( a [ i ] == 'B' || a [ i + 1 ] == 'B' || a [ i + 2 ] == 'B' ) { y = 1 ; }  $ ~~if ( a [ i ] == 'C' || a [ i + 1 ] == 'C' || a [ i + 2 ] == 'C' ) { z = 1 ; }  $ ~~if ( x && y && z ) {  $ ~~~cout << "Yes" << endl ;  $ ~~~return 0 ;  $ ~~} else {  $ ~~~x = 0 ;  $ ~~~y = 0 ;  $ ~~~z = 0 ;  $ ~~}  $ ~}  $ ~cout << "No" << endl ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~int n , s ;  $ ~cin >> s >> n ;  $ ~int arr [ n ] [ 2 ] ;  $ ~for ( int i = 0 ; i < n ; ++ i ) cin >> arr [ i ] [ 0 ] >> arr [ i ] [ 1 ] ;  $ ~int m = n ;  $ ~bool ff = false ;  $ ~while ( m -- ) {  $ ~~int mx = - 1 , j ;  $ ~~bool f = false ;  $ ~~for ( int i = 0 ; i < n ; ++ i ) {  $ ~~~if ( s > arr [ i ] [ 0 ] and arr [ i ] [ 0 ] != - 1 ) {  $ ~~~~f = true ;  $ ~~~~if ( arr [ i ] [ 1 ] > mx ) {  $ ~~~~~mx = arr [ i ] [ 1 ] ;  $ ~~~~~j = i ;  $ ~~~~}  $ ~~~}  $ ~~}  $ ~~if ( ! f ) {  $ ~~~ff = true ;  $ ~~~break ;  $ ~~} else {  $ ~~~s += mx ;  $ ~~~arr [ j ] [ 0 ] = - 1 ;  $ ~~}  $ ~}  $ ~if ( ff )  $ ~~cout << "NO" << endl ;  $ ~else  $ ~~cout << "YES" << endl ;  $ }
int gcd ( int a , int b ) {  $ ~return b ? gcd ( b , a % b ) : a ;  $ }  $ int lcm ( int a , int b ) {  $ ~return a / gcd ( a , b ) * b ;  $ }  $ int lcm ( int * arr , int n ) {  $ ~int r = arr [ 0 ] ;  $ ~for ( int i = 1 ; i < n ; ++ i ) { r = lcm ( r , arr [ i ] ) ; }  $ ~return r ;  $ }  $ bool in [ 101 ] = { } ;  $ int cycle [ 101 ] ;  $ int target [ 101 ] ;  $ int n ;  $ int main ( ) {  $ ~cin >> n ;  $ ~for ( int i = 1 ; i <= n ; ++ i ) {  $ ~~cin >> target [ i ] ;  $ ~~if ( in [ target [ i ] ] ) {  $ ~~~cout << - 1 << endl ;  $ ~~~return 0 ;  $ ~~}  $ ~~in [ target [ i ] ] = true ;  $ ~}  $ ~for ( int i = 1 ; i <= n ; ++ i ) {  $ ~~int current = i ;  $ ~~cycle [ i ] = 0 ;  $ ~~do {  $ ~~~current = target [ current ] ;  $ ~~~cycle [ i ] += 1 ;  $ ~~} while ( current != i ) ;  $ ~~if ( ( cycle [ i ] & 1 ) == 0 ) { cycle [ i ] >> = 1 ; }  $ ~}  $ ~cout << lcm ( cycle + 1 , n ) << endl ;  $ }
int main ( ) {  $ ~int n ;  $ ~while ( cin >> n ) {  $ ~~char s [ 1004 ] ;  $ ~~cin >> s + 1 ;  $ ~~int flag = 1 ;  $ ~~for ( int i = 1 ; i <= n ; i ++ ) {  $ ~~~if ( s [ i ] == '1' ) {  $ ~~~~if ( ( s [ i - 1 ] == '1' && i != 1 ) || ( s [ i + 1 ] == '1' && i != n ) ) flag = 0 ;  $ ~~~} else {  $ ~~~~if ( ( s [ i - 1 ] == '0' || i == 1 ) && ( s [ i + 1 ] == '0' || i == n ) ) flag = 0 ;  $ ~~~}  $ ~~}  $ ~~if ( flag )  $ ~~~cout << "Yes" << endl ;  $ ~~else  $ ~~~cout << "No" << endl ;  $ ~}  $ ~return 0 ;  $ }
char c [ 1000 ] ;  $ int res [ 1000 ] ;  $ int l , mn , pl = 1 , n ;  $ int main ( ) {  $ ~char ch ;  $ ~cin >> ch ;  $ ~while ( cin >> ch ) {  $ ~~if ( ch == '=' ) break ;  $ ~~c [ l ] = ch ;  $ ~~if ( c [ l ] == '+' )  $ ~~~pl ++ ;  $ ~~else  $ ~~~mn ++ ;  $ ~~l ++ ;  $ ~~cin >> ch ;  $ ~}  $ ~cin >> n ;  $ ~if ( n * pl - mn < n || pl - n * mn > n )  $ ~~cout << "Impossible" << endl ;  $ ~else {  $ ~~cout << "Possible" << endl ;  $ ~~for ( int i = 0 ; i <= l ; i ++ ) res [ i ] = 1 ;  $ ~~int d = n - ( pl - mn ) ;  $ ~~for ( int i = 0 ; i <= l ; i ++ ) {  $ ~~~if ( ( i == 0 || c [ i - 1 ] == '+' ) && d > 0 ) {  $ ~~~~if ( d < n - res [ i ] ) {  $ ~~~~~res [ i ] += d ;  $ ~~~~~d = 0 ;  $ ~~~~} else {  $ ~~~~~d -= n - res [ i ] ;  $ ~~~~~res [ i ] = n ;  $ ~~~~}  $ ~~~} else if ( i != 0 && c [ i - 1 ] == '-' && d < 0 ) {  $ ~~~~if ( - d < n - res [ i ] ) {  $ ~~~~~res [ i ] += - d ;  $ ~~~~~d = 0 ;  $ ~~~~} else {  $ ~~~~~d += n - res [ i ] ;  $ ~~~~~res [ i ] = n ;  $ ~~~~}  $ ~~~}  $ ~~}  $ ~~cout << res [ 0 ] ;  $ ~~for ( int i = 0 ; i < l ; i ++ ) cout << " " << c [ i ] << " " << res [ i + 1 ] ;  $ ~~cout << " = " << n << endl ;  $ ~}  $ ~return 0 ;  $ }
int main ( ) {  $ ~int a , b , c ;  $ ~while ( cin >> a ) {  $ ~~int r1 [ 100 ] , r2 [ 100 ] , d ;  $ ~~vector < int > v ;  $ ~~for ( b = 1 ; b <= a ; b ++ ) { r1 [ b ] = r2 [ b ] = 0 ; }  $ ~~for ( b = 1 ; b <= a * a ; b ++ ) {  $ ~~~cin >> c >> d ;  $ ~~~if ( r1 [ c ] == 0 && r2 [ d ] == 0 ) {  $ ~~~~v . push_back ( b ) ;  $ ~~~~r1 [ c ] = 1 ;  $ ~~~~r2 [ d ] = 1 ;  $ ~~~}  $ ~~}  $ ~~for ( c = 0 ; c < v . size ( ) ; c ++ ) {  $ ~~~if ( c == 0 ) {  $ ~~~~cout << v [ c ] ;  $ ~~~} else {  $ ~~~~cout << " " << v [ c ] ;  $ ~~~}  $ ~~}  $ ~~cout << endl ;  $ ~~v . clear ( ) ;  $ ~}  $ ~return 0 ;  $ }
int main ( ) {  $ ~long long i1 , r1 , i2 , r2 , k ;  $ ~long long time ;  $ ~while ( cin >> i1 >> r1 >> i2 >> r2 >> k ) {  $ ~~long long i = max ( i1 , i2 ) ;  $ ~~long long r = min ( r1 , r2 ) ;  $ ~~if ( i <= r ) {  $ ~~~if ( i <= k && k <= r )  $ ~~~~time = r - i ;  $ ~~~else  $ ~~~~time = r - i + 1 ;  $ ~~} else  $ ~~~time = 0 ;  $ ~~cout << time << endl ;  $ ~}  $ ~return 0 ;  $ }
string s ;  $ int f1 , f2 ;  $ int main ( ) {  $ ~cin >> s ;  $ ~int len = s . length ( ) ;  $ ~int st = - 1 , en = - 2 ;  $ ~for ( int i = 0 ; i <= len - 1 ; i ++ ) {  $ ~~if ( f1 == 0 && s [ i ] == 'a' ) continue ;  $ ~~f1 = 1 ;  $ ~~if ( f2 == 0 ) {  $ ~~~st = i ;  $ ~~~f2 = 1 ;  $ ~~}  $ ~~if ( s [ i ] == 'a' ) break ;  $ ~~en = i ;  $ ~}  $ ~for ( int i = st ; i <= en ; i ++ ) s [ i ] -= 1 ;  $ ~if ( ! f1 ) s [ len - 1 ] = 'z' ;  $ ~cout << s << endl ;  $ ~return 0 ;  $ }
long long solve ( long long n ) {  $ ~if ( n <= 9 ) { return n + 1 ; }  $ ~int dig [ 20 ] ;  $ ~int c = 0 ;  $ ~long long ret = 0 ;  $ ~long long p10 = 1 ;  $ ~while ( n ) {  $ ~~p10 *= 10 ;  $ ~~dig [ c ] = n % 10 ;  $ ~~n /= 10 ;  $ ~~c ++ ;  $ ~}  $ ~long long p100 = 100 ;  $ ~for ( int i = 2 ; i < c ; i ++ ) {  $ ~~ret += 9 * ( p100 / 100 ) ;  $ ~~p100 *= 10 ;  $ ~}  $ ~ret += 10 ;  $ ~long long h = 0 ;  $ ~for ( int i = c - 2 ; i >= 1 ; i -- ) {  $ ~~h *= 10 ;  $ ~~h += dig [ i ] ;  $ ~}  $ ~ret += ( dig [ c - 1 ] - 1 ) * p10 / 100 ;  $ ~ret += h ;  $ ~if ( dig [ c - 1 ] <= dig [ 0 ] ) { ret ++ ; }  $ ~return ret ;  $ }  $ long long l , r ;  $ bool chk ( int n ) {  $ ~int dig [ 20 ] ;  $ ~int c = 0 ;  $ ~long long ret = 0 ;  $ ~long long p10 = 1 ;  $ ~while ( n ) {  $ ~~p10 *= 10 ;  $ ~~dig [ c ] = n % 10 ;  $ ~~n /= 10 ;  $ ~~c ++ ;  $ ~}  $ ~if ( dig [ c - 1 ] == dig [ 0 ] ) { return true ; }  $ ~return false ;  $ }  $ int main ( ) {  $ ~cin >> l >> r ;  $ ~cout << solve ( r ) - solve ( l - 1 ) << endl ;  $ }
long long i , j , cnt = 0 x3f3f3f3f3f3f3f3f ;  $ int exgcd ( int a , int b , int & x , int & y ) {  $ ~if ( b == 0 ) {  $ ~~x = 1 ;  $ ~~y = 0 ;  $ ~~return a ;  $ ~}  $ ~int g = exgcd ( b , a % b , y , x ) ;  $ ~y -= a / b * x ;  $ ~return g ;  $ }  $ int main ( ) {  $ ~int a , b , c , d , x , y , t ;  $ ~cin >> a >> b >> c >> d ;  $ ~int g = exgcd ( a , - c , x , y ) ;  $ ~if ( ( d - b ) % g != 0 ) cout << - 1 << endl , exit ( 0 ) ;  $ ~y = y * ( d - b ) / g ;  $ ~x = x * ( d - b ) / g ;  $ ~if ( b - d >= 0 ) {  $ ~~t = max ( c / g , - c / g ) ;  $ ~~x = ( x % t + t ) % t ;  $ ~~cnt = a * x + b ;  $ ~} else {  $ ~~t = max ( - a / g , a / g ) ;  $ ~~y = ( y % t + t ) % t ;  $ ~~cnt = c * y + d ;  $ ~}  $ ~cout << cnt << endl ;  $ ~return ~ ~ ( 0 ^ 0 ^ 0 ) ;  $ }
int a [ 277 ] ;  $ int main ( ) {  $ ~string s ;  $ ~cin >> s ;  $ ~for ( int i = 0 ; i < s . size ( ) ; i ++ ) a [ s [ i ] ] ++ ;  $ ~int an = 0 ;  $ ~an = max ( 0 , ( a [ 'n' ] - 3 ) / 2 + ( a [ 'n' ] >= 3 ) ) ;  $ ~an = min ( an , a [ 't' ] ) ;  $ ~an = min ( an , a [ 'e' ] / 3 ) ;  $ ~an = min ( an , a [ 'i' ] ) ;  $ ~cout << an << endl ;  $ }
int n , s , cur = 101 ;  $ int main ( ) {  $ ~cin >> n >> s ;  $ ~for ( int i = 0 ; i < n ; i ++ ) {  $ ~~int x , y ;  $ ~~cin >> x >> y ;  $ ~~if ( x < s ) {  $ ~~~if ( y == 0 ) y = 100 ;  $ ~~~cur = min ( cur , y ) ;  $ ~~}  $ ~~if ( x == s ) {  $ ~~~if ( y == 0 ) { cur = min ( cur , 100 ) ; }  $ ~~}  $ ~}  $ ~cout << 100 - cur << endl ;  $ }
int dx [ ] = { 1 , 0 , - 1 , 0 } , dy [ ] = { 0 , 1 , 0 , - 1 } ;  $ int main ( ) {  $ ~long long n , d ;  $ ~cin >> n >> d ;  $ ~long long a [ n ] ;  $ ~for ( int i = 0 ; i < n ; i ++ ) { cin >> a [ i ] ; }  $ ~long long ans = 0 ;  $ ~for ( int i = 0 ; i < n ; i ++ ) {  $ ~~int u = upper_bound ( a , a + n , a [ i ] + d ) - a ;  $ ~~u = u - i - 1 ;  $ ~~if ( u >= 2 ) { ans = ans + ( ( long long ) u * ( u - 1 ) ) / 2 ; }  $ ~}  $ ~cout << ans << endl ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~int a_i , b_i , n , temp , cont = 0 , p1 , p2 ;  $ ~cin >> n ;  $ ~vector < int > v ( n ) ;  $ ~for ( a_i = 0 ; a_i < n ; a_i ++ ) cin >> v [ a_i ] ;  $ ~sort ( v . begin ( ) , v . end ( ) ) ;  $ ~p1 = p2 = 0 ;  $ ~while ( p2 < n ) {  $ ~~while ( p2 < n ) {  $ ~~~if ( v [ p2 ] > v [ p1 ] ) {  $ ~~~~cont ++ ;  $ ~~~~break ;  $ ~~~}  $ ~~~p2 ++ ;  $ ~~}  $ ~~p1 ++ ;  $ ~~p2 ++ ;  $ ~}  $ ~cout << cont << endl ;  $ }
int main ( ) {  $ ~map < string , int > mymap ;  $ ~mymap [ "C" ] = 1 ;  $ ~mymap [ "C#" ] = 2 ;  $ ~mymap [ "D" ] = 3 ;  $ ~mymap [ "D#" ] = 4 ;  $ ~mymap [ "E" ] = 5 ;  $ ~mymap [ "F" ] = 6 ;  $ ~mymap [ "F#" ] = 7 ;  $ ~mymap [ "G" ] = 8 ;  $ ~mymap [ "G#" ] = 9 ;  $ ~mymap [ "A" ] = 10 ;  $ ~mymap [ "B" ] = 11 ;  $ ~mymap [ "H" ] = 12 ;  $ ~string s1 , s2 , s3 ;  $ ~cin >> s1 >> s2 >> s3 ;  $ ~int n1 , n2 , n3 ;  $ ~n1 = mymap [ s1 ] ;  $ ~n2 = mymap [ s2 ] ;  $ ~n3 = mymap [ s3 ] ;  $ ~bool a1 = 0 , a2 = 0 ;  $ ~int k1 , k2 ;  $ ~k1 = n2 - n1 ;  $ ~if ( k1 < 0 ) { k1 += 12 ; }  $ ~k2 = n3 - n2 ;  $ ~if ( k2 < 0 ) { k2 += 12 ; }  $ ~if ( k1 == 4 && k2 == 3 ) { a1 = 1 ; }  $ ~if ( k1 == 3 && k2 == 4 ) { a2 = 1 ; }  $ ~k1 = n3 - n1 ;  $ ~if ( k1 < 0 ) { k1 += 12 ; }  $ ~k2 = n2 - n3 ;  $ ~if ( k2 < 0 ) { k2 += 12 ; }  $ ~if ( k1 == 4 && k2 == 3 ) { a1 = 1 ; }  $ ~if ( k1 == 3 && k2 == 4 ) { a2 = 1 ; }  $ ~k1 = n1 - n2 ;  $ ~if ( k1 < 0 ) { k1 += 12 ; }  $ ~k2 = n3 - n1 ;  $ ~if ( k2 < 0 ) { k2 += 12 ; }  $ ~if ( k1 == 4 && k2 == 3 ) { a1 = 1 ; }  $ ~if ( k1 == 3 && k2 == 4 ) { a2 = 1 ; }  $ ~k1 = n3 - n2 ;  $ ~if ( k1 < 0 ) { k1 += 12 ; }  $ ~k2 = n1 - n3 ;  $ ~if ( k2 < 0 ) { k2 += 12 ; }  $ ~if ( k1 == 4 && k2 == 3 ) { a1 = 1 ; }  $ ~if ( k1 == 3 && k2 == 4 ) { a2 = 1 ; }  $ ~k1 = n1 - n3 ;  $ ~if ( k1 < 0 ) { k1 += 12 ; }  $ ~k2 = n2 - n1 ;  $ ~if ( k2 < 0 ) { k2 += 12 ; }  $ ~if ( k1 == 4 && k2 == 3 ) { a1 = 1 ; }  $ ~if ( k1 == 3 && k2 == 4 ) { a2 = 1 ; }  $ ~k1 = n2 - n3 ;  $ ~if ( k1 < 0 ) { k1 += 12 ; }  $ ~k2 = n1 - n2 ;  $ ~if ( k2 < 0 ) { k2 += 12 ; }  $ ~if ( k1 == 4 && k2 == 3 ) { a1 = 1 ; }  $ ~if ( k1 == 3 && k2 == 4 ) { a2 = 1 ; }  $ ~if ( a1 ) {  $ ~~cout << "major" << endl ;  $ ~} else if ( a2 ) {  $ ~~cout << "minor" << endl ;  $ ~} else {  $ ~~cout << "strange" << endl ;  $ ~}  $ ~return 0 ;  $ }
int main ( ) {  $ ~int n ;  $ ~cin >> n ;  $ ~char a [ 500 ] ;  $ ~cin >> a ;  $ ~int count_zero = 0 ;  $ ~for ( int i = 0 ; i < n ; i ++ ) {  $ ~~char x = a [ i ] ;  $ ~~if ( x == '0' ) count_zero ++ ;  $ ~}  $ ~if ( a [ 0 ] == '0' ) {  $ ~~cout << 0 << endl ;  $ ~~return 0 ;  $ ~}  $ ~cout << 1 ;  $ ~for ( int i = 0 ; i < count_zero ; i ++ ) cout << 0 ;  $ ~cout << endl ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~double a , b , c , d ;  $ ~cin >> a >> b >> c >> d ;  $ ~if ( b - a == c - b && c - b == d - c ) {  $ ~~cout << d + ( d - c ) << endl ;  $ ~} else if ( b / a == c / b && c / b == d / c ) {  $ ~~if ( d * ( d / c ) == int ( d * ( d / c ) ) )  $ ~~~cout << d * ( d / c ) << endl ;  $ ~~else  $ ~~~cout << "42" << endl ;  $ ~} else  $ ~~cout << "42" << endl ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~int a , b , c , d ;  $ ~cin >> a >> b >> c >> d ;  $ ~if ( __gcd ( a , c ) != 1 && b % __gcd ( a , c ) != d % __gcd ( a , c ) )  $ ~~cout << - 1 << endl ;  $ ~else {  $ ~~while ( b != d ) {  $ ~~~if ( b < d )  $ ~~~~b += a ;  $ ~~~else  $ ~~~~d += c ;  $ ~~}  $ ~~cout << b << endl ;  $ ~}  $ ~return 0 ;  $ }
const int M = 50 + 5 ;  $ int main ( ) {  $ ~int x , t , a , b , da , db ;  $ ~cin >> x >> t >> a >> b >> da >> db ;  $ ~bool ok = false ;  $ ~for ( int i = 0 ; i <= t - 1 ; i ++ ) {  $ ~~for ( int j = 0 ; j <= t - 1 ; j ++ ) {  $ ~~~int tsum = a - da * i + b - db * j ;  $ ~~~if ( tsum == x ) { ok = true ; }  $ ~~}  $ ~}  $ ~for ( int i = 0 ; i <= t - 1 ; i ++ ) {  $ ~~int tsum = a - da * i ;  $ ~~if ( tsum == x ) { ok = true ; }  $ ~}  $ ~for ( int i = 0 ; i <= t - 1 ; i ++ ) {  $ ~~int tsum = b - db * i ;  $ ~~if ( tsum == x ) { ok = true ; }  $ ~}  $ ~if ( x == 0 ) { ok = true ; }  $ ~string ans = ok ? "YES" : "NO" ;  $ ~cout << ans << endl ;  $ ~return 0 ;  $ }
const long long MOD = 1000000007 ;  $ const long double EPS = 1e-8 ;  $ int main ( ) {  $ ~int n ;  $ ~cin >> n ;  $ ~vector < int > mas ( n ) ;  $ ~for ( int i = 0 ; i < n ; i ++ ) cin >> mas [ i ] ;  $ ~vector < int > ans ( 1 , 0 ) ;  $ ~int bad = 0 ;  $ ~for ( int i = 0 ; i < n ; i ++ ) {  $ ~~if ( mas [ i ] < 0 ) bad ++ ;  $ ~~if ( bad >= 3 ) {  $ ~~~ans . push_back ( 1 ) ;  $ ~~~bad = 1 ;  $ ~~} else  $ ~~~ans [ ans . size ( ) - 1 ] ++ ;  $ ~}  $ ~cout << ans . size ( ) << endl ;  $ ~for ( int i = 0 ; i < ans . size ( ) ; i ++ ) {  $ ~~if ( i ) cout << ' ' ;  $ ~~cout << ans [ i ] ;  $ ~}  $ ~cout << endl ;  $ ~return 0 ;  $ }
int find ( int x , int father [ ] ) {  $ ~if ( father [ x ] == x ) return x ;  $ ~return father [ x ] = find ( father [ x ] , father ) ;  $ }  $ int main ( ) {  $ ~int n , k ;  $ ~cin >> n >> k ;  $ ~string s ;  $ ~cin >> s ;  $ ~int pos = n ;  $ ~for ( int i = 1 ; i < n ; i ++ ) {  $ ~~int j = i , k = 0 ;  $ ~~while ( s [ j ] == s [ k ] && j < n ) {  $ ~~~j ++ ;  $ ~~~k ++ ;  $ ~~}  $ ~~if ( j == n ) {  $ ~~~pos = i ;  $ ~~~break ;  $ ~~}  $ ~}  $ ~cout << s ;  $ ~k -- ;  $ ~for ( int i = 0 ; i < k ; i ++ ) { cout << s . substr ( n - pos ) ; }  $ ~cout << endl ;  $ }
int quick ( int a , int b ) {  $ ~int s = 1 ;  $ ~while ( b > 0 ) {  $ ~~if ( b % 2 == 1 ) { s = s * a % 10 ; }  $ ~~a = a * a % 10 ;  $ ~~b = b >> 1 % 10 ;  $ ~}  $ ~return s ;  $ }  $ int main ( ) {  $ ~int n ;  $ ~cin >> n ;  $ ~cout << quick ( 8 , n ) << endl ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~string s , u ;  $ ~cin >> s >> u ;  $ ~int m = u . length ( ) ;  $ ~for ( int i = 0 ; i < m ; ++ i ) { s = '.' + s + '.' ; }  $ ~int mini = m , cur = 0 ;  $ ~for ( int i = 0 ; i < ( s . length ( ) - u . length ( ) ) + 1 ; ++ i ) {  $ ~~cur = 0 ;  $ ~~for ( int j = 0 ; j < u . length ( ) ; ++ j ) {  $ ~~~if ( s [ i + j ] != u [ j ] ) { ++ cur ; }  $ ~~}  $ ~~mini = min ( mini , cur ) ;  $ ~}  $ ~cout << mini << endl ;  $ ~return 0 ;  $ }
const int maxl = 2e5 + 10 ;  $ int la , lb ;  $ char s [ maxl ] , t [ maxl ] ;  $ int main ( ) {  $ ~cin >> la >> lb >> s >> t ;  $ ~int tar = - 1 ;  $ ~for ( int i = 0 ; i < la ; ++ i )  $ ~~if ( s [ i ] == '*' ) tar = i ;  $ ~if ( tar == - 1 ) {  $ ~~if ( la != lb ) {  $ ~~~puts ( "NO" ) ;  $ ~~~return 0 ;  $ ~~}  $ ~~for ( int i = 0 ; i < la ; ++ i )  $ ~~~if ( s [ i ] != t [ i ] ) {  $ ~~~~puts ( "NO" ) ;  $ ~~~~return 0 ;  $ ~~~}  $ ~~puts ( "YES" ) ;  $ ~~return 0 ;  $ ~}  $ ~if ( la - 1 > lb ) {  $ ~~puts ( "NO" ) ;  $ ~~return 0 ;  $ ~}  $ ~for ( int i = 0 ; i < tar ; ++ i )  $ ~~if ( s [ i ] != t [ i ] ) {  $ ~~~puts ( "NO" ) ;  $ ~~~return 0 ;  $ ~~}  $ ~for ( int i = 0 ; la - i - 1 > tar ; ++ i )  $ ~~if ( s [ la - i - 1 ] != t [ lb - i - 1 ] ) {  $ ~~~puts ( "NO" ) ;  $ ~~~return 0 ;  $ ~~}  $ ~puts ( "YES" ) ;  $ ~return 0 ;  $ }
int org [ 26 ] , req [ 26 ] , y , n , ans , maxi ;  $ int ansr ( int l , int r ) {  $ ~if ( l >= r ) return l ;  $ ~int mid = l + ( r - l ) / 2 ;  $ ~int o = 0 ;  $ ~for ( int i = 0 ; i < 26 ; i ++ )  $ ~~if ( org [ i ] != 0 ) {  $ ~~~o += org [ i ] / mid ;  $ ~~~if ( org [ i ] % mid != 0 ) o += 1 ;  $ ~~}  $ ~if ( o > n )  $ ~~return ansr ( mid + 1 , r ) ;  $ ~else  $ ~~return ansr ( l , mid ) ;  $ }  $ int main ( ) {  $ ~char s [ 1003 ] ;  $ ~cin >> s ;  $ ~cin >> n ;  $ ~for ( int i = 0 ; s [ i ] != '\0' ; i ++ ) org [ s [ i ] - 97 ] ++ ;  $ ~for ( int i = 0 ; i < 26 ; i ++ )  $ ~~if ( org [ i ] != 0 ) {  $ ~~~++ y ;  $ ~~~req [ i ] = 1 ;  $ ~~~if ( maxi < org [ i ] ) maxi = org [ i ] ;  $ ~~}  $ ~if ( y > n )  $ ~~cout << "-1\n" ;  $ ~else {  $ ~~ans = ansr ( 1 , maxi ) ;  $ ~~int o = 0 , suma = 0 ;  $ ~~for ( int i = 0 ; i < 26 ; i ++ )  $ ~~~if ( org [ i ] != 0 ) {  $ ~~~~o = 0 ;  $ ~~~~o += org [ i ] / ans ;  $ ~~~~if ( org [ i ] % ans != 0 ) o += 1 ;  $ ~~~~req [ i ] = o ;  $ ~~~~suma += o ;  $ ~~~}  $ ~~cout << ans << endl ;  $ ~~for ( int i = 0 ; i < 26 ; i ++ )  $ ~~~while ( req [ i ] -- ) cout << ( char ) ( i + 97 ) ;  $ ~~if ( suma < n )  $ ~~~for ( int i = 1 ; i <= n - suma ; i ++ ) cout << 'a' ;  $ ~~cout << endl ;  $ ~}  $ ~return 0 ;  $ }
const int MAX_N = 1000 + 10 ;  $ int a [ MAX_N ] [ 2 ] [ 2 ] , b [ 4 ] [ 2 ] [ 2 ] ;  $ bool check [ MAX_N ] ;  $ bool hast ( int i , int s ) {  $ ~b [ 0 ] [ 0 ] [ 0 ] = a [ i ] [ 0 ] [ 0 ] ;  $ ~b [ 0 ] [ 0 ] [ 1 ] = a [ i ] [ 0 ] [ 1 ] ;  $ ~b [ 0 ] [ 1 ] [ 0 ] = a [ i ] [ 1 ] [ 0 ] ;  $ ~b [ 0 ] [ 1 ] [ 1 ] = a [ i ] [ 1 ] [ 1 ] ;  $ ~b [ 1 ] [ 0 ] [ 0 ] = a [ i ] [ 1 ] [ 0 ] ;  $ ~b [ 1 ] [ 0 ] [ 1 ] = a [ i ] [ 0 ] [ 0 ] ;  $ ~b [ 1 ] [ 1 ] [ 0 ] = a [ i ] [ 1 ] [ 1 ] ;  $ ~b [ 1 ] [ 1 ] [ 1 ] = a [ i ] [ 0 ] [ 1 ] ;  $ ~b [ 2 ] [ 0 ] [ 0 ] = a [ i ] [ 1 ] [ 1 ] ;  $ ~b [ 2 ] [ 0 ] [ 1 ] = a [ i ] [ 1 ] [ 0 ] ;  $ ~b [ 2 ] [ 1 ] [ 0 ] = a [ i ] [ 0 ] [ 1 ] ;  $ ~b [ 2 ] [ 1 ] [ 1 ] = a [ i ] [ 0 ] [ 0 ] ;  $ ~b [ 3 ] [ 0 ] [ 0 ] = a [ i ] [ 0 ] [ 1 ] ;  $ ~b [ 3 ] [ 0 ] [ 1 ] = a [ i ] [ 1 ] [ 1 ] ;  $ ~b [ 3 ] [ 1 ] [ 0 ] = a [ i ] [ 0 ] [ 0 ] ;  $ ~b [ 3 ] [ 1 ] [ 1 ] = a [ i ] [ 1 ] [ 0 ] ;  $ ~for ( int i = 0 ; i < 4 ; i ++ ) {  $ ~~int x = 0 ;  $ ~~for ( int j = 0 ; j < 2 ; j ++ )  $ ~~~for ( int t = 0 ; t < 2 ; t ++ )  $ ~~~~if ( b [ i ] [ j ] [ t ] == a [ s ] [ j ] [ t ] ) x ++ ;  $ ~~if ( x == 4 ) return true ;  $ ~}  $ ~return false ;  $ }  $ int main ( ) {  $ ~int n , aa , bb , ans = 0 ;  $ ~string s ;  $ ~cin >> n ;  $ ~for ( int i = 0 ; i < n ; i ++ ) {  $ ~~cin >> aa >> bb ;  $ ~~if ( i < n - 1 ) cin >> s ;  $ ~~a [ i ] [ 0 ] [ 0 ] = aa / 10 ;  $ ~~a [ i ] [ 0 ] [ 1 ] = aa % 10 ;  $ ~~a [ i ] [ 1 ] [ 0 ] = bb / 10 ;  $ ~~a [ i ] [ 1 ] [ 1 ] = bb % 10 ;  $ ~}  $ ~for ( int i = 0 ; i < n ; i ++ ) {  $ ~~if ( check [ i ] == true ) continue ;  $ ~~for ( int j = i + 1 ; j < n ; j ++ )  $ ~~~if ( hast ( i , j ) == true ) check [ j ] = true ;  $ ~}  $ ~for ( int i = 0 ; i < n ; i ++ )  $ ~~if ( check [ i ] == false ) ans ++ ;  $ ~cout << ans << endl ;  $ ~return 0 ;  $ }
const int N = 150005 ;  $ vector < int > g [ N ] ;  $ int n , m ;  $ vector < int > p ;  $ pair < long long , long long > bfs ( int s ) {  $ ~p [ s ] = s ;  $ ~queue < int > q ;  $ ~q . push ( s ) ;  $ ~long long ver = 0 ;  $ ~long long cnted = 0 ;  $ ~while ( ! q . empty ( ) ) {  $ ~~int v = q . front ( ) ;  $ ~~q . pop ( ) ;  $ ~~ver ++ ;  $ ~~for ( int i = 0 ; i < g [ v ] . size ( ) ; i ++ ) {  $ ~~~int to = g [ v ] [ i ] ;  $ ~~~cnted ++ ;  $ ~~~if ( p [ to ] == - 1 ) {  $ ~~~~p [ to ] = v ;  $ ~~~~q . push ( to ) ;  $ ~~~}  $ ~~}  $ ~}  $ ~return make_pair ( ver , cnted / 2 ) ;  $ }  $ int main ( ) {  $ ~cin >> n >> m ;  $ ~p = vector < int > ( n , - 1 ) ;  $ ~for ( int i = 0 ; i < m ; i ++ ) {  $ ~~int x , y ;  $ ~~cin >> x >> y ;  $ ~~x -- ;  $ ~~y -- ;  $ ~~g [ x ] . push_back ( y ) ;  $ ~~g [ y ] . push_back ( x ) ;  $ ~}  $ ~for ( int i = 0 ; i < n ; i ++ ) {  $ ~~if ( p [ i ] == - 1 ) {  $ ~~~pair < long long , long long > t = bfs ( i ) ;  $ ~~~if ( ( t . first * ( t . first - 1 ) ) / 2 != t . second ) {  $ ~~~~cout << "NO" << endl ;  $ ~~~~return 0 ;  $ ~~~}  $ ~~}  $ ~}  $ ~cout << "YES" << endl ;  $ }
