int main ( ) {  $ ~int a , b , c , d , e ;  $ ~cin >> a ;  $ ~cin >> b ;  $ ~cin >> c ;  $ ~cin >> d ;  $ ~cin >> e ;  $ ~if ( ( a + b + c + d + e ) % 5 != 0 || ( a + b + c + d + e ) / 5 == 0 ) {  $ ~~cout << - 1 << endl ;  $ ~} else {  $ ~~cout << ( a + b + c + d + e ) / 5 << endl ;  $ ~}  $ ~return 0 ;  $ }
int main ( ) {  $ ~int arr [ 5 ] , sum = 0 ;  $ ~for ( int i = 0 ; i < 5 ; i ++ ) {  $ ~~cin >> arr [ i ] ;  $ ~~sum += arr [ i ] ;  $ ~}  $ ~float ans = float ( sum ) / 5 ;  $ ~if ( sum == 0 ) {  $ ~~cout << - 1 << endl ;  $ ~} else if ( ans == int ( ans ) ) {  $ ~~cout << int ( ans ) << endl ;  $ ~} else {  $ ~~cout << - 1 << endl ;  $ ~}  $ ~return 0 ;  $ }
bool cmp ( int a , int b ) {  $ ~return a < b ;  $ }  $ int main ( ) {  $ ~int sum = 0 ;  $ ~int n ;  $ ~for ( int i = 0 ; i < 5 ; i ++ ) {  $ ~~cin >> n ;  $ ~~sum += n ;  $ ~}  $ ~if ( sum == 0 ) {  $ ~~cout << - 1 << endl ;  $ ~~return 0 ;  $ ~}  $ ~if ( sum % 5 == 0 )  $ ~~cout << sum / 5 << endl ;  $ ~else  $ ~~cout << - 1 << endl ;  $ }
int main ( ) {  $ ~int x , i ;  $ ~int sum = 0 ;  $ ~for ( i = 0 ; i < 5 ; i ++ ) {  $ ~~cin >> x ;  $ ~~sum = sum + x ;  $ ~}  $ ~if ( sum % 5 != 0 || sum == 0 ) {  $ ~~cout << "-1" << endl ;  $ ~} else {  $ ~~cout << sum / 5 << endl ;  $ ~}  $ ~return 0 ;  $ }
int main ( ) {  $ ~int sum = 0 , a ;  $ ~for ( int i = 0 ; i < 5 ; i ++ ) {  $ ~~cin >> a ;  $ ~~sum += a ;  $ ~}  $ ~if ( sum == 0 )  $ ~~cout << - 1 << endl ;  $ ~else if ( sum % 5 == 0 )  $ ~~cout << sum / 5 << endl ;  $ ~else  $ ~~cout << - 1 << endl ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~int a , i ;  $ ~int sum = 0 ;  $ ~for ( i = 0 ; i < 5 ; i ++ ) {  $ ~~cin >> a ;  $ ~~sum = sum + a ;  $ ~}  $ ~if ( sum % 5 != 0 || sum == 0 ) {  $ ~~cout << "-1" << endl ;  $ ~} else {  $ ~~cout << sum / 5 << endl ;  $ ~}  $ ~return 0 ;  $ }
int a [ 1005 ] ;  $ int main ( ) {  $ ~int ans = 0 ;  $ ~for ( int i = 0 ; i < 5 ; i ++ ) {  $ ~~cin >> a [ i ] ;  $ ~~ans += a [ i ] ;  $ ~}  $ ~if ( ans == 0 ) {  $ ~~cout << "-1" << endl ;  $ ~} else if ( ans % 5 == 0 ) {  $ ~~cout << ans / 5 << endl ;  $ ~} else  $ ~~cout << "-1" << endl ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~int sum , c1 , c2 , c3 , c4 , c5 ;  $ ~cin >> c1 >> c2 >> c3 >> c4 >> c5 ;  $ ~sum = c1 + c2 + c3 + c4 + c5 ;  $ ~if ( sum != 0 && sum % 5 == 0 ) {  $ ~~cout << sum / 5 << endl ;  $ ~} else {  $ ~~cout << "-1" << endl ;  $ ~}  $ }
int main ( ) {  $ ~int a , b , c , d , e ;  $ ~while ( cin >> a >> b >> c >> d >> e ) {  $ ~~int ans = 0 ;  $ ~~ans = a + b + c + d + e ;  $ ~~if ( ans % 5 == 0 && ans != 0 )  $ ~~~cout << ans / 5 << endl ;  $ ~~else  $ ~~~cout << - 1 << endl ;  $ ~}  $ ~return 0 ;  $ }
int main ( ) {  $ ~int a , b , c , d , e , sum ;  $ ~cin >> a >> b >> c >> d >> e ;  $ ~sum = a + b + c + d + e ;  $ ~if ( sum > 0 && sum % 5 == 0 ) {  $ ~~cout << sum / 5 << endl ;  $ ~} else  $ ~~cout << "-1" << endl ;  $ }
int main ( ) {  $ ~int x , sum = 0 ;  $ ~for ( int i = 0 ; i < 5 ; i ++ ) {  $ ~~cin >> x ;  $ ~~sum = sum + x ;  $ ~}  $ ~if ( sum % 5 != 0 || sum == 0 ) {  $ ~~cout << - 1 << endl ;  $ ~} else {  $ ~~cout << sum / 5 << endl ;  $ ~}  $ }
int main ( ) {  $ ~int a [ 5 ] , sum = 0 ;  $ ~for ( int i = 0 ; i < 5 ; i ++ ) {  $ ~~cin >> a [ i ] ;  $ ~~sum += a [ i ] ;  $ ~}  $ ~if ( sum % 5 == 0 && sum != 0 ) {  $ ~~cout << sum / 5 << endl ;  $ ~} else {  $ ~~cout << - 1 << endl ;  $ ~}  $ }
int main ( ) {  $ ~int a , n = 5 , total = 0 ;  $ ~while ( n -- ) {  $ ~~cin >> a ;  $ ~~total += a ;  $ ~}  $ ~if ( total == 0 ) {  $ ~~cout << - 1 ;  $ ~} else if ( total % 5 == 0 ) {  $ ~~cout << ( total / 5 ) ;  $ ~} else {  $ ~~cout << - 1 ;  $ ~}  $ ~cout << endl ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~int c1 , c2 , c3 , c4 , c5 ;  $ ~cin >> c1 >> c2 >> c3 >> c4 >> c5 ;  $ ~int m = c1 + c2 + c3 + c4 + c5 ;  $ ~if ( m % 5 == 0 && m != 0 ) {  $ ~~cout << m / 5 << endl ;  $ ~} else {  $ ~~cout << - 1 << endl ;  $ ~}  $ ~return 0 ;  $ }
long long arr [ 1000000 ] ;  $ set < long long > s ;  $ map < string , string > mm ;  $ string ss [ 100000 ] ;  $ char ch [ 100000 ] ;  $ int main ( ) {  $ ~int a , res = 0 ;  $ ~for ( int i = 0 ; i < 5 ; i ++ ) {  $ ~~cin >> a ;  $ ~~res += a ;  $ ~}  $ ~if ( res == 0 || res % 5 != 0 ) {  $ ~~cout << - 1 << endl ;  $ ~~return 0 ;  $ ~}  $ ~cout << res / 5 << endl ;  $ }
int a , sum ;  $ int main ( ) {  $ ~for ( int i = 0 ; i < 5 ; i ++ ) {  $ ~~cin >> a ;  $ ~~sum += a ;  $ ~}  $ ~if ( sum == 0 ) {  $ ~~cout << - 1 << endl ;  $ ~~return 0 ;  $ ~}  $ ~if ( sum % 5 == 0 ) {  $ ~~cout << sum / 5 << endl ;  $ ~~return 0 ;  $ ~}  $ ~cout << - 1 << endl ;  $ }
int main ( ) {  $ ~int a , b , c , d , e ;  $ ~cin >> a >> b >> c >> d >> e ;  $ ~int s = a + b + c + d + e ;  $ ~if ( s % 5 != 0 || s == 0 )  $ ~~cout << "-1" << endl ;  $ ~else  $ ~~cout << s / 5 << endl ;  $ }
int main ( ) {  $ ~int s = 0 , c ;  $ ~for ( int i = 0 ; i < 5 ; i ++ ) {  $ ~~cin >> c ;  $ ~~s += c ;  $ ~}  $ ~if ( s % 5 || ! s )  $ ~~cout << - 1 << endl ;  $ ~else  $ ~~cout << s / 5 << endl ;  $ }
int main ( ) {  $ ~int s = 0 , c ;  $ ~for ( int i = 0 ; i < 5 ; i ++ ) {  $ ~~cin >> c ;  $ ~~s += c ;  $ ~}  $ ~if ( s % 5 || ! s )  $ ~~cout << - 1 << endl ;  $ ~else  $ ~~cout << s / 5 << endl ;  $ }
const int MOD = 1e9 + 7 ;  $ long long pow ( long long a , long long b ) {  $ ~long long ans = 1 ;  $ ~while ( b ) {  $ ~~if ( b & 1 ) ans = ( ans * a ) % MOD ;  $ ~~b /= 2 ;  $ ~~a = ( a * a ) % MOD ;  $ ~}  $ ~return ans ;  $ }  $ int main ( ) {  $ ~int c1 , c2 , c3 , c4 , c5 ;  $ ~cin >> c1 >> c2 >> c3 >> c4 >> c5 ;  $ ~int s = c1 + c2 + c3 + c4 + c5 ;  $ ~if ( s == 0 ) {  $ ~~cout << "-1" << endl ;  $ ~~return 0 ;  $ ~} else {  $ ~~if ( s % 5 == 0 )  $ ~~~cout << s / 5 << endl ;  $ ~~else  $ ~~~cout << "-1" << endl ;  $ ~}  $ ~return 0 ;  $ }
int main ( ) {  $ ~int x , r = 0 ;  $ ~for ( int i = 0 ; i < 5 ; ++ i ) {  $ ~~cin >> x ;  $ ~~r += x ;  $ ~}  $ ~cout << ( ( r % 5 == 0 && r > 0 ) ? r / 5 : - 1 ) << endl ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~int a , b , c , d , e ;  $ ~cin >> a >> b >> c >> d >> e ;  $ ~int sum = a + b + c + d + e ;  $ ~if ( sum == 0 )  $ ~~cout << - 1 << endl ;  $ ~else if ( sum % 5 == 0 )  $ ~~cout << sum / 5 << endl ;  $ ~else  $ ~~cout << - 1 << endl ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~int a , b , c , d , e ;  $ ~cin >> a ;  $ ~cin >> b ;  $ ~cin >> c ;  $ ~cin >> d ;  $ ~cin >> e ;  $ ~if ( ( a + b + c + d + e ) % 5 != 0 || ( a + b + c + d + e ) / 5 == 0 ) {  $ ~~cout << - 1 << endl ;  $ ~} else {  $ ~~cout << ( a + b + c + d + e ) / 5 << endl ;  $ ~}  $ ~return 0 ;  $ }
const int N = 1e6 + 5 ;  $ int main ( ) {  $ ~int s = 0 ;  $ ~for ( int i = 0 ; i < 5 ; i ++ ) {  $ ~~int x ;  $ ~~cin >> x ;  $ ~~s += x ;  $ ~}  $ ~if ( s == 0 || ( s % 5 ) )  $ ~~cout << "-1" << endl ;  $ ~else  $ ~~cout << s / 5 << endl ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~int c1 , c2 , c3 , c4 , c5 ;  $ ~while ( cin >> c1 >> c2 >> c3 >> c4 >> c5 ) {  $ ~~int s = 0 ;  $ ~~s = c1 + c2 + c3 + c4 + c5 ;  $ ~~if ( s == 0 )  $ ~~~cout << "-1\n" ;  $ ~~else {  $ ~~~if ( s % 5 == 0 )  $ ~~~~cout << s / 5 << "\n" ;  $ ~~~else  $ ~~~~cout << "-1\n" ;  $ ~~}  $ ~}  $ ~return 0 ;  $ }
int main ( ) {  $ ~int a [ 6 ] , i , j , sum = 0 ;  $ ~for ( i = 0 ; i < 5 ; i ++ ) {  $ ~~cin >> a [ i ] ;  $ ~~sum = sum + a [ i ] ;  $ ~}  $ ~int res = sum / 5 ;  $ ~if ( sum == 0 || sum % 5 != 0 )  $ ~~cout << "-1" << endl ;  $ ~else if ( sum % 5 == 0 )  $ ~~cout << res << endl ;  $ ~return 0 ;  $ }
int c [ 10 ] ;  $ int main ( ) {  $ ~int b = 0 , sum = 0 , i = 0 ;  $ ~for ( i = 0 ; i < 5 ; i ++ ) {  $ ~~cin >> c [ i ] ;  $ ~~sum = sum + c [ i ] ;  $ ~}  $ ~if ( sum == 0 ) {  $ ~~cout << "-1" << endl ;  $ ~} else if ( sum % 5 == 0 ) {  $ ~~cout << sum / 5 << endl ;  $ ~} else {  $ ~~cout << "-1" << endl ;  $ ~}  $ ~return 0 ;  $ }
int main ( ) {  $ ~int num [ 5 ] , sum = 0 ;  $ ~for ( int i = 0 ; i < 5 ; i ++ ) {  $ ~~cin >> num [ i ] ;  $ ~~sum += num [ i ] ;  $ ~}  $ ~if ( sum % 5 == 0 && sum != 0 )  $ ~~cout << sum / 5 << endl ;  $ ~else  $ ~~cout << "-1" << endl ;  $ }
int main ( ) {  $ ~int a , b , c , d , e ;  $ ~cin >> a ;  $ ~cin >> b ;  $ ~cin >> c ;  $ ~cin >> d ;  $ ~cin >> e ;  $ ~if ( ( a + b + c + d + e ) % 5 != 0 || ( a + b + c + d + e ) / 5 == 0 ) {  $ ~~cout << - 1 << endl ;  $ ~} else {  $ ~~cout << ( a + b + c + d + e ) / 5 << endl ;  $ ~}  $ ~return 0 ;  $ }
void fastIo ( ) { }  $ int main ( ) {  $ ~fastIo ( ) ;  $ ~int sum = 0 ;  $ ~for ( int i = 0 ; i < 5 ; i ++ ) {  $ ~~int temp ;  $ ~~cin >> temp ;  $ ~~sum += temp ;  $ ~}  $ ~if ( sum % 5 == 0 && sum >= 5 )  $ ~~cout << sum / 5 << endl ;  $ ~else  $ ~~cout << "-1" << endl ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~int n , m ;  $ ~int count = 0 ;  $ ~cin >> n >> m ;  $ ~for ( int a = 0 ; ; a ++ ) {  $ ~~if ( a * a > n ) break ;  $ ~~for ( int b = 0 ; ; b ++ ) {  $ ~~~if ( a + b * b > m ) break ;  $ ~~~if ( a * a + b == n && a + b * b == m ) count ++ ;  $ ~~}  $ ~}  $ ~cout << count << '\n' ;  $ ~return 0 ;  $ }
long long int n , m ;  $ int main ( ) {  $ ~cin >> n >> m ;  $ ~long long int c = 0 ;  $ ~for ( long long int i = 0 ; i <= 1000 ; i ++ ) {  $ ~~for ( long long int j = 0 ; j <= 1000 ; j ++ ) {  $ ~~~if ( i * i + j == n && i + j * j == m ) { c ++ ; }  $ ~~}  $ ~}  $ ~cout << c << "\n" ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~int n , m ;  $ ~int pair1 = 0 , pair2 = 0 ;  $ ~int min , max ;  $ ~int count = 0 ;  $ ~cin >> n >> m ;  $ ~if ( n > m ) {  $ ~~max = n ;  $ ~~min = m ;  $ ~} else {  $ ~~max = m ;  $ ~~min = n ;  $ ~}  $ ~for ( int i = 0 ; i <= max ; i ++ ) {  $ ~~for ( int j = max ; j >= 0 ; j -- ) {  $ ~~~if ( ( ( i * i ) + j == n ) && ( i + ( j * j ) == m ) ) { count ++ ; }  $ ~~}  $ ~}  $ ~cout << count << endl ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~int n , m ;  $ ~cin >> n >> m ;  $ ~int cnt = 0 ;  $ ~for ( int i = 0 ; i * i <= n ; i ++ ) {  $ ~~int k = n - i * i ;  $ ~~if ( k * k + i == m ) { cnt ++ ; }  $ ~}  $ ~cout << cnt << '\n' ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~int l , n , i , j , m , cnt = 0 ;  $ ~cin >> n >> m ;  $ ~for ( i = 0 ; i <= 1000 ; i ++ ) {  $ ~~for ( j = 0 ; j <= 1000 ; j ++ ) {  $ ~~~if ( ( i * i + j == n ) && ( i + j * j == m ) ) cnt ++ ;  $ ~~}  $ ~}  $ ~cout << cnt << endl ;  $ }
int main ( ) {  $ ~int n , m ;  $ ~cin >> n >> m ;  $ ~int p = 0 ;  $ ~for ( int a = 0 ; a < 1000 ; a ++ ) {  $ ~~for ( int b = 0 ; b < 1000 ; b ++ ) {  $ ~~~if ( a * a + b == n && a + b * b == m ) { p ++ ; }  $ ~~}  $ ~}  $ ~cout << p << endl ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~int n , m , i , x , a , b , c = 0 ;  $ ~cin >> n >> m ;  $ ~x = sqrt ( n ) ;  $ ~for ( i = 0 ; i <= x ; i ++ ) {  $ ~~b = n - i * i ;  $ ~~a = m - b * b ;  $ ~~if ( a == i ) { c ++ ; }  $ ~}  $ ~cout << c << endl ;  $ ~return 0 ;  $ }
const int M = 100000 + 5 ;  $ int main ( ) {  $ ~int n , m ;  $ ~cin >> n >> m ;  $ ~int ans = 0 ;  $ ~for ( int a = 0 ; a <= 1000 ; a ++ ) {  $ ~~for ( int b = 0 ; b <= 1000 ; b ++ ) {  $ ~~~if ( a * a + b == n && a + b * b == m ) { ans ++ ; }  $ ~~}  $ ~}  $ ~cout << ans << endl ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~int a , b , count = 0 , i , c , y ;  $ ~cin >> a >> b ;  $ ~c = sqrt ( a ) ;  $ ~for ( i = 0 ; i <= c ; i ++ ) {  $ ~~y = ( a - ( i * i ) ) ;  $ ~~if ( i + ( y * y ) == b ) { count ++ ; }  $ ~}  $ ~cout << count << endl ;  $ ~return 0 ;  $ }
int a [ 1001 ] [ 1001 ] ;  $ int main ( ) {  $ ~int n , m , i , j , cnt = 0 ;  $ ~cin >> n >> m ;  $ ~for ( i = 0 ; i <= n ; i ++ ) {  $ ~~for ( j = 0 ; j <= m ; j ++ ) {  $ ~~~if ( i * i + j == n && i + j * j == m ) a [ i ] [ j ] = 1 ;  $ ~~}  $ ~}  $ ~for ( i = 0 ; i < 1001 ; i ++ ) {  $ ~~for ( j = 0 ; j < 1001 ; j ++ ) {  $ ~~~if ( a [ i ] [ j ] ) cnt ++ ;  $ ~~}  $ ~}  $ ~cout << cnt << endl ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~int n , m ;  $ ~int ans = 0 ;  $ ~cin >> n >> m ;  $ ~for ( int i = 0 ; i <= 1000 ; i ++ ) {  $ ~~for ( int j = 0 ; j <= 1000 ; j ++ ) {  $ ~~~if ( ( ( i * i ) + j ) == n && ( i + ( j * j ) ) == m ) { ans ++ ; }  $ ~~}  $ ~}  $ ~cout << ans << endl ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~int TESTS = 1 ;  $ ~while ( TESTS -- ) {  $ ~~int count = 0 , n , m , i , j ;  $ ~~cin >> n >> m ;  $ ~~for ( i = 0 ; i <= sqrt ( n ) ; i ++ ) {  $ ~~~for ( j = 0 ; j <= sqrt ( m ) ; j ++ ) {  $ ~~~~if ( i * i + j == n && i + j * j == m ) count ++ ;  $ ~~~}  $ ~~}  $ ~~cout << count << '\n' ;  $ ~}  $ ~return 0 ;  $ }
int main ( ) {  $ ~int N , M ;  $ ~cin >> N >> M ;  $ ~int ans = 0 ;  $ ~for ( int i = 0 ; i < 1001 ; ++ i ) {  $ ~~for ( int j = 0 ; j < 1001 ; ++ j ) {  $ ~~~if ( ( i * i + j == N ) && ( j * j + i == M ) ) ++ ans ;  $ ~~}  $ ~}  $ ~cout << ans << endl ;  $ }
int main ( ) {  $ ~int n , m , sum = 0 , i , b ;  $ ~cin >> n >> m ;  $ ~for ( i = 0 ; i * i <= n && i <= m ; ++ i ) {  $ ~~b = n - i * i ;  $ ~~if ( i + b * b == m ) { sum += 1 ; }  $ ~}  $ ~cout << sum << endl ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~long long int n , m ;  $ ~cin >> n >> m ;  $ ~long long int cp = n ;  $ ~long long int sq ;  $ ~long long int count = 0 ;  $ ~while ( n != - 1 ) {  $ ~~sq = int ( sqrt ( n ) ) ;  $ ~~if ( sq * sq == n ) {  $ ~~~long long int a = sq ;  $ ~~~long long int b = cp - n ;  $ ~~~if ( a + ( b * b ) == m ) count ++ ;  $ ~~}  $ ~~n -- ;  $ ~}  $ ~cout << count << endl ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~int n , m , i , a , b , cnt = 0 ;  $ ~cin >> n >> m ;  $ ~i = 0 ;  $ ~while ( i <= sqrt ( n ) ) {  $ ~~a = i ;  $ ~~b = n - ( a * a ) ;  $ ~~if ( b >= 0 ) {  $ ~~~if ( ( a + ( b * b ) ) == m ) cnt ++ ;  $ ~~}  $ ~~i ++ ;  $ ~}  $ ~cout << cnt << endl ;  $ ~return 0 ;  $ }
const int maxn = 105 ;  $ int n , m ;  $ int a , b ;  $ int ans = 0 ;  $ int main ( ) {  $ ~cin >> n >> m ;  $ ~for ( int i = 0 ; i <= 1000 ; i ++ ) {  $ ~~for ( int j = 0 ; j <= 1000 ; j ++ ) {  $ ~~~if ( i * i + j == n && i + j * j == m ) ans ++ ;  $ ~~}  $ ~}  $ ~cout << ans << endl ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~int n , m ;  $ ~cin >> n >> m ;  $ ~int c = 0 ;  $ ~for ( int a = 0 ; a <= 1000 ; a ++ ) {  $ ~~for ( int b = 0 ; b <= 1000 ; b ++ ) {  $ ~~~if ( a * a + b == n && b * b + a == m ) c ++ ;  $ ~~}  $ ~}  $ ~cout << c << endl ;  $ ~return 0 ;  $ }
int min ( int a , int b ) {  $ ~return ( a < b ) ? a : b ;  $ }  $ int main ( ) {  $ ~int m , n ;  $ ~cin >> m >> n ;  $ ~int c = min ( m , n ) ;  $ ~int counter = 0 ;  $ ~for ( int i = 0 ; i <= c ; i ++ ) {  $ ~~for ( int j = 0 ; j <= c ; j ++ ) {  $ ~~~if ( i * i + j == m && i + j * j == n ) counter ++ ;  $ ~~}  $ ~}  $ ~cout << counter << endl ;  $ }
int a [ 1001 ] [ 1001 ] ;  $ int main ( ) {  $ ~int n , m , i , j , cnt = 0 ;  $ ~cin >> n >> m ;  $ ~for ( i = 0 ; i <= n ; i ++ ) {  $ ~~for ( j = 0 ; j <= m ; j ++ ) {  $ ~~~if ( i * i + j == n && i + j * j == m ) a [ i ] [ j ] = 1 ;  $ ~~}  $ ~}  $ ~for ( i = 0 ; i < 1001 ; i ++ ) {  $ ~~for ( j = 0 ; j < 1001 ; j ++ ) {  $ ~~~if ( a [ i ] [ j ] ) cnt ++ ;  $ ~~}  $ ~}  $ ~cout << cnt << endl ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~int n , m ;  $ ~cin >> n >> m ;  $ ~int cnt = 0 ;  $ ~for ( int i = 0 ; i <= n && i <= m ; i ++ ) {  $ ~~int b = n - i * i ;  $ ~~if ( b >= 0 && i + b * b == m ) cnt ++ ;  $ ~}  $ ~cout << cnt << endl ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~int n , m ;  $ ~cin >> n >> m ;  $ ~int c = 0 ;  $ ~for ( int i = 0 ; i <= 1000 ; i ++ ) {  $ ~~for ( int j = 0 ; j <= 1000 ; j ++ ) {  $ ~~~int p = i * i + j ;  $ ~~~int q = i + j * j ;  $ ~~~if ( p == n && q == m ) { c ++ ; }  $ ~~}  $ ~}  $ ~cout << c << endl ;  $ }
int main ( ) {  $ ~int n , m ;  $ ~cin >> n >> m ;  $ ~int res = 0 ;  $ ~for ( int i = 0 ; i < 100 ; i ++ ) {  $ ~~for ( int j = 0 ; j < 100 ; j ++ ) {  $ ~~~if ( i * i + j == n && i + j * j == m ) res ++ ;  $ ~~}  $ ~}  $ ~cout << res << endl ;  $ }
int main ( ) {  $ ~long long int i , s = 0 , j = 0 , k = 0 , l , n , m ;  $ ~cin >> m >> n ;  $ ~for ( i = 0 ; i <= m ; i ++ ) {  $ ~~for ( j = 0 ; j <= n ; j ++ ) {  $ ~~~k = i * i + j ;  $ ~~~l = i + j * j ;  $ ~~~if ( k == n && l == m ) s ++ ;  $ ~~}  $ ~}  $ ~cout << s << endl ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~int n , m ;  $ ~cin >> n >> m ;  $ ~int solu = 0 ;  $ ~for ( int i = 0 ; i <= 1000 ; i ++ ) {  $ ~~for ( int j = 0 ; j <= 1000 ; j ++ ) {  $ ~~~if ( pow ( i , 2 ) + j == n && i + pow ( j , 2 ) == m ) solu ++ ;  $ ~~}  $ ~}  $ ~cout << solu << endl ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~int n , m ;  $ ~cin >> n >> m ;  $ ~int counter = 0 ;  $ ~for ( int a = 0 ; a <= m ; a ++ )  $ ~~for ( int b = 0 ; b <= n ; b ++ )  $ ~~~if ( a * a + b == n && a + b * b == m ) counter ++ ;  $ ~cout << counter << endl ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~int n , m ;  $ ~cin >> n >> m ;  $ ~int inte_pair = 0 ;  $ ~for ( int i = 0 ; i <= n && i <= m ; i ++ )  $ ~~for ( int j = 0 ; j <= n && j <= m ; j ++ )  $ ~~~if ( ( i * i ) + j == n && i + ( j * j ) == m ) inte_pair ++ ;  $ ~cout << inte_pair << endl ;  $ }
int n , k = 0 , i , m , j ;  $ int main ( ) {  $ ~cin >> n >> m ;  $ ~for ( i = 0 ; i * i <= n ; i ++ )  $ ~~for ( j = 0 ; j * j <= m ; j ++ )  $ ~~~if ( i * i + j == n && j * j + i == m ) k ++ ;  $ ~cout << k << endl ;  $ ~return 0 ;  $ }
double EPS = 1e-9 ;  $ long long INFF = 1000000000000000005 LL ;  $ int main ( ) {  $ ~int n , m ;  $ ~cin >> n >> m ;  $ ~int c = 0 ;  $ ~for ( int a = 0 ; a <= sqrt ( n ) ; ++ a ) {  $ ~~for ( int b = 0 ; b <= sqrt ( m ) ; ++ b ) {  $ ~~~if ( ( a * a + b == n ) && ( a + b * b == m ) ) { c ++ ; }  $ ~~}  $ ~}  $ ~cout << c << '\n' ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~int n , m ;  $ ~while ( cin >> n >> m ) {  $ ~~int ans = 0 ;  $ ~~for ( int a = 0 ; a <= 1000 ; a ++ ) {  $ ~~~for ( int b = 0 ; b <= 1000 ; b ++ ) {  $ ~~~~if ( a * a + b == n && b * b + a == m ) ans ++ ;  $ ~~~}  $ ~~}  $ ~~cout << ans << endl ;  $ ~}  $ ~return 0 ;  $ }
int m , n , a , b ;  $ int fit ( ) {  $ ~int f1 = a * a + b , f2 = a + b * b ;  $ ~if ( f1 == n && f2 == m )  $ ~~return 0 ;  $ ~else if ( f1 > n )  $ ~~return 1 ;  $ ~else if ( f2 > m )  $ ~~return 1 ;  $ ~return - 1 ;  $ }  $ int main ( ) {  $ ~cin >> n >> m ;  $ ~int cnt = 0 ;  $ ~for ( a = 0 ; a <= 31 ; a ++ )  $ ~~for ( b = 0 ; b <= 31 ; b ++ ) {  $ ~~~if ( fit ( ) == 0 )  $ ~~~~cnt ++ ;  $ ~~~else if ( fit ( ) == 1 )  $ ~~~~break ;  $ ~~}  $ ~cout << cnt << endl ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~int n ;  $ ~cin >> n ;  $ ~n -= 10 ;  $ ~if ( n == 10 ) return cout << 15 << endl , 0 ;  $ ~if ( n <= 11 && n >= 1 ) return cout << 4 << endl , 0 ;  $ ~cout << 0 << endl ;  $ }
int main ( ) {  $ ~int n ;  $ ~cin >> n ;  $ ~if ( n <= 10 )  $ ~~cout << "0" << endl ;  $ ~else {  $ ~~if ( n >= 11 && n <= 19 )  $ ~~~cout << "4" << endl ;  $ ~~else if ( n == 20 )  $ ~~~cout << "15" << endl ;  $ ~~else if ( n == 21 )  $ ~~~cout << "4" << endl ;  $ ~~else if ( n > 21 )  $ ~~~cout << "0" << endl ;  $ ~}  $ }
int main ( ) {  $ ~int n ;  $ ~cin >> n ;  $ ~if ( n <= 10 || n > 21 ) {  $ ~~cout << 0 << endl ;  $ ~} else if ( n == 20 ) {  $ ~~cout << 15 << endl ;  $ ~} else {  $ ~~cout << 4 << endl ;  $ ~}  $ ~return 0 ;  $ }
int main ( ) {  $ ~int n ;  $ ~cin >> n ;  $ ~if ( n <= 10 || n >= 22 )  $ ~~cout << '0' << endl ;  $ ~else if ( n == 20 )  $ ~~cout << "15" << endl ;  $ ~else  $ ~~cout << '4' << endl ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~int a ;  $ ~cin >> a ;  $ ~a = a - 10 ;  $ ~if ( a == 10 ) {  $ ~~cout << ( 4 * 3 ) + 3 << endl ;  $ ~} else if ( a > 0 && a < 12 ) {  $ ~~cout << 4 << endl ;  $ ~} else {  $ ~~cout << 0 << endl ;  $ ~}  $ ~return 0 ;  $ }
int main ( ) {  $ ~int n ;  $ ~cin >> n ;  $ ~if ( n < 11 ) {  $ ~~cout << 0 << endl ;  $ ~} else if ( n == 11 || n == 21 ) {  $ ~~cout << 4 << endl ;  $ ~} else if ( n >= 12 && n <= 19 ) {  $ ~~cout << 4 << endl ;  $ ~} else if ( n == 20 ) {  $ ~~cout << 15 << endl ;  $ ~} else  $ ~~cout << 0 << endl ;  $ }
int N ;  $ int main ( ) {  $ ~cin >> N ;  $ ~if ( N > 21 ) {  $ ~~cout << '0' << endl ;  $ ~~return 0 ;  $ ~}  $ ~if ( N == 21 ) {  $ ~~cout << '4' << endl ;  $ ~~return 0 ;  $ ~}  $ ~if ( N - 10 == 10 ) {  $ ~~cout << "15" << endl ;  $ ~~return 0 ;  $ ~}  $ ~if ( N < 20 && N > 10 ) {  $ ~~cout << "4" << endl ;  $ ~} else {  $ ~~cout << "0" << endl ;  $ ~}  $ ~return 0 ;  $ }
int main ( ) {  $ ~int n , cards = 0 ;  $ ~cin >> n ;  $ ~n -= 10 ;  $ ~if ( n >= 1 && n < 10 )  $ ~~cards = 4 ;  $ ~else if ( n == 10 )  $ ~~cards = 15 ;  $ ~else if ( n == 11 )  $ ~~cards = 4 ;  $ ~else  $ ~~cards = 0 ;  $ ~cout << cards << endl ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~int n , i , n1 ;  $ ~cin >> n ;  $ ~i = 10 ;  $ ~if ( n <= 10 )  $ ~~n1 = 0 ;  $ ~else {  $ ~~if ( n <= 19 )  $ ~~~n1 = 4 ;  $ ~~else if ( n == 20 ) {  $ ~~~n1 = 15 ;  $ ~~} else if ( n == 21 ) {  $ ~~~n1 = 4 ;  $ ~~} else {  $ ~~~n1 = 0 ;  $ ~~}  $ ~}  $ ~cout << n1 << endl ;  $ }
int main ( ) {  $ ~int n ;  $ ~while ( cin >> n ) {  $ ~~if ( n <= 10 || n >= 22 ) {  $ ~~~cout << "0" << endl ;  $ ~~} else if ( n == 20 ) {  $ ~~~cout << "15" << endl ;  $ ~~} else {  $ ~~~cout << "4" << endl ;  $ ~~}  $ ~}  $ ~return 0 ;  $ }
int main ( ) {  $ ~int n ;  $ ~cin >> n ;  $ ~if ( n <= 10 || n > 21 ) {  $ ~~cout << 0 << endl ;  $ ~} else if ( n == 20 ) {  $ ~~cout << 15 << endl ;  $ ~} else {  $ ~~cout << 4 << endl ;  $ ~}  $ ~return 0 ;  $ }
int main ( ) {  $ ~int n ;  $ ~cin >> n ;  $ ~if ( n <= 10 || n >= 22 ) { cout << "0" << endl ; }  $ ~if ( n >= 11 && n <= 19 ) { cout << "4" << endl ; }  $ ~if ( n == 20 ) { cout << "15" << endl ; }  $ ~if ( n == 21 ) { cout << "4" << endl ; }  $ ~return 0 ;  $ }
int main ( ) {  $ ~int n ;  $ ~cin >> n ;  $ ~if ( n <= 10 || n > 21 )  $ ~~cout << 0 << endl ;  $ ~else if ( n - 10 < 10 )  $ ~~cout << 4 << endl ;  $ ~else if ( n - 10 == 10 )  $ ~~cout << 15 << endl ;  $ ~else  $ ~~cout << 4 << endl ;  $ }
int main ( ) {  $ ~int a ;  $ ~cin >> a ;  $ ~if ( a - 10 <= 0 || a - 10 > 11 ) {  $ ~~cout << 0 << endl ;  $ ~} else if ( ( a - 10 >= 1 && a - 10 <= 9 ) || a - 10 == 11 ) {  $ ~~cout << 4 << endl ;  $ ~} else  $ ~~cout << 15 << endl ;  $ }
int main ( ) {  $ ~int n , m ;  $ ~while ( cin >> n ) {  $ ~~m = n - 10 ;  $ ~~if ( m > 0 && m < 10 )  $ ~~~cout << '4' << endl ;  $ ~~else if ( m == 0 )  $ ~~~cout << '0' << endl ;  $ ~~else if ( m == 10 )  $ ~~~cout << "15" << endl ;  $ ~~else if ( m == 11 )  $ ~~~cout << '4' << endl ;  $ ~~else  $ ~~~cout << '0' << endl ;  $ ~}  $ ~return 0 ;  $ }
int main ( ) {  $ ~int n ;  $ ~cin >> n ;  $ ~if ( n <= 10 ) {  $ ~~cout << 0 << endl ;  $ ~} else if ( n < 20 ) {  $ ~~cout << 4 << endl ;  $ ~} else if ( n == 20 ) {  $ ~~cout << 15 << endl ;  $ ~} else if ( n == 21 ) {  $ ~~cout << 4 << endl ;  $ ~} else {  $ ~~cout << 0 << endl ;  $ ~}  $ ~return 0 ;  $ }
vector < long long > v ;  $ int main ( ) {  $ ~int n ;  $ ~cin >> n ;  $ ~if ( n <= 10 || n > 21 ) {  $ ~~cout << 0 << endl ;  $ ~~return 0 ;  $ ~}  $ ~n -= 10 ;  $ ~if ( n == 10 )  $ ~~cout << 15 << endl ;  $ ~else {  $ ~~cout << 4 << endl ;  $ ~}  $ ~return 0 ;  $ }
int main ( ) {  $ ~int n ;  $ ~cin >> n ;  $ ~if ( n <= 10 )  $ ~~cout << 0 << "\n" ;  $ ~else {  $ ~~if ( n >= 11 && n <= 19 )  $ ~~~cout << 4 << "\n" ;  $ ~~else {  $ ~~~if ( n == 20 )  $ ~~~~cout << 15 << "\n" ;  $ ~~~else if ( n == 21 )  $ ~~~~cout << 4 << "\n" ;  $ ~~~else  $ ~~~~cout << 0 << "\n" ;  $ ~~}  $ ~}  $ ~return 0 ;  $ }
int main ( ) {  $ ~int n ;  $ ~while ( cin >> n ) {  $ ~~if ( n < 10 || n > 21 ) {  $ ~~~cout << 0 << endl ;  $ ~~} else if ( n == 20 ) {  $ ~~~cout << 15 << endl ;  $ ~~} else if ( n == 10 ) {  $ ~~~cout << 0 << endl ;  $ ~~} else {  $ ~~~cout << 4 << endl ;  $ ~~}  $ ~}  $ ~return 0 ;  $ }
int n ;  $ int main ( ) {  $ ~cin >> n ;  $ ~n -= 10 ;  $ ~if ( n <= 0 )  $ ~~cout << 0 << endl ;  $ ~else if ( n <= 9 )  $ ~~cout << 4 << endl ;  $ ~else if ( n == 10 )  $ ~~cout << 15 << endl ;  $ ~else if ( n == 11 )  $ ~~cout << 4 << endl ;  $ ~else  $ ~~cout << 0 << endl ;  $ }
int main ( ) {  $ ~int n ;  $ ~cin >> n ;  $ ~if ( n <= 10 || n > 21 )  $ ~~cout << 0 << endl ;  $ ~else if ( n == 20 )  $ ~~cout << 15 << endl ;  $ ~else  $ ~~cout << 4 << endl ;  $ }
int main ( ) {  $ ~int n ;  $ ~cin >> n ;  $ ~if ( n <= 10 ) {  $ ~~cout << "0\n" ;  $ ~~return 0 ;  $ ~} else if ( n == 11 ) {  $ ~~cout << "4\n" ;  $ ~~return 0 ;  $ ~} else if ( n >= 12 and n <= 19 ) {  $ ~~cout << "4\n" ;  $ ~~return 0 ;  $ ~} else if ( n == 20 ) {  $ ~~cout << "15\n" ;  $ ~} else if ( n == 21 ) {  $ ~~cout << "4\n" ;  $ ~~return 0 ;  $ ~} else if ( n >= 22 ) {  $ ~~cout << "0\n" ;  $ ~~return 0 ;  $ ~}  $ ~return 0 ;  $ }
int main ( ) {  $ ~int n ;  $ ~cin >> n ;  $ ~if ( n <= 10 || n > 21 ) {  $ ~~cout << 0 << endl ;  $ ~} else if ( n == 20 ) {  $ ~~cout << 15 << endl ;  $ ~} else {  $ ~~cout << 4 << endl ;  $ ~}  $ ~return 0 ;  $ }
int main ( ) {  $ ~int n ;  $ ~while ( cin >> n ) {  $ ~~if ( ( n < 20 && n > 10 ) || n == 21 )  $ ~~~cout << "4" << endl ;  $ ~~else if ( n <= 10 || n > 21 )  $ ~~~cout << "0" << endl ;  $ ~~else  $ ~~~cout << "15" << endl ;  $ ~}  $ ~return 0 ;  $ }
int main ( ) {  $ ~int n ;  $ ~cin >> n ;  $ ~if ( n < 11 )  $ ~~cout << 0 << endl ;  $ ~else if ( n == 20 )  $ ~~cout << 15 << endl ;  $ ~else if ( n > 21 )  $ ~~cout << 0 << endl ;  $ ~else  $ ~~cout << 4 << endl ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~int n ;  $ ~cin >> n ;  $ ~int required = n - 10 ;  $ ~if ( required <= 0 ) {  $ ~~cout << "0" << endl ;  $ ~} else if ( required >= 1 && required <= 9 ) {  $ ~~cout << "4" << endl ;  $ ~} else if ( required == 10 ) {  $ ~~cout << "15" << endl ;  $ ~} else if ( required == 11 ) {  $ ~~cout << "4" << endl ;  $ ~} else if ( required >= 12 ) {  $ ~~cout << "0" << endl ;  $ ~}  $ ~return 0 ;  $ }
int n ;  $ int main ( ) {  $ ~while ( cin >> n ) { cout << ( n > 10 && n < 22 ) * 4 + ( n == 20 ) * 11 << endl ; }  $ ~return 0 ;  $ }
int main ( ) {  $ ~int n ;  $ ~cin >> n ;  $ ~if ( n <= 10 )  $ ~~cout << 0 << endl ;  $ ~else if ( n > 10 && n <= 19 )  $ ~~cout << 4 << endl ;  $ ~else if ( n == 20 )  $ ~~cout << 15 << endl ;  $ ~else if ( n == 21 )  $ ~~cout << 4 << endl ;  $ ~else  $ ~~cout << 0 << endl ;  $ }
int main ( ) {  $ ~int n ;  $ ~cin >> n ;  $ ~if ( n <= 10 || n - 10 >= 12 ) {  $ ~~cout << "0" << endl ;  $ ~~return 0 ;  $ ~}  $ ~if ( n - 10 == 1 || n - 10 == 11 ) {  $ ~~cout << 4 << endl ;  $ ~} else if ( n - 10 == 10 ) {  $ ~~cout << 15 << endl ;  $ ~} else {  $ ~~cout << 4 << endl ;  $ ~}  $ ~return 0 ;  $ }
int main ( ) {  $ ~int n , i , j , temp , result , imin = 10000000 ;  $ ~vector < int > a ;  $ ~cin >> n ;  $ ~a . push_back ( 1 ) ;  $ ~for ( i = 1 ; i <= n ; i ++ ) {  $ ~~cin >> temp ;  $ ~~a . push_back ( temp ) ;  $ ~}  $ ~for ( i = 1 ; i <= n ; i ++ ) {  $ ~~result = 0 ;  $ ~~for ( j = 1 ; j <= n ; j ++ ) { result += 2 * a [ j ] * ( abs ( i - j ) + abs ( j - 1 ) + abs ( i - 1 ) ) ; }  $ ~~imin = min ( imin , result ) ;  $ ~}  $ ~cout << imin << endl ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~int n ;  $ ~while ( cin >> n ) {  $ ~~int a [ 105 ] ;  $ ~~for ( int i = 1 ; i <= n ; i ++ ) cin >> a [ i ] ;  $ ~~int Min = 0 x3f3f3f3f ;  $ ~~for ( int i = 1 ; i <= n ; i ++ ) {  $ ~~~int ans = 0 ;  $ ~~~for ( int j = 1 ; j <= n ; j ++ ) {  $ ~~~~if ( j > i )  $ ~~~~~ans += ( j - 1 ) * 4 * a [ j ] ;  $ ~~~~else  $ ~~~~~ans += ( i - 1 ) * 4 * a [ j ] ;  $ ~~~}  $ ~~~Min = min ( Min , ans ) ;  $ ~~}  $ ~~cout << Min << endl ;  $ ~}  $ ~return 0 ;  $ }
int main ( ) {  $ ~int n ;  $ ~cin >> n ;  $ ~int a [ n ] ;  $ ~for ( int i = 0 ; i < n ; i ++ ) cin >> a [ i ] ;  $ ~int mini = 100000000 ;  $ ~for ( int i = 0 ; i < n ; i ++ ) {  $ ~~int temp = 0 ;  $ ~~for ( int j = 0 ; j < n ; j ++ ) { temp += ( abs ( i - j ) + j + i ) * a [ j ] * 2 ; }  $ ~~mini = min ( mini , temp ) ;  $ ~}  $ ~cout << mini << endl ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~int n ;  $ ~int arr [ 10010 ] ;  $ ~int ans = 1000000000 ;  $ ~cin >> n ;  $ ~for ( int i = 1 ; i <= n ; i ++ ) cin >> arr [ i ] ;  $ ~for ( int i = 1 ; i <= n ; i ++ ) {  $ ~~int x = i ;  $ ~~int cost = 0 ;  $ ~~for ( int j = 1 ; j <= n ; j ++ ) {  $ ~~~cost += abs ( x - j ) * arr [ j ] ;  $ ~~~cost += ( ( j - 1 ) * arr [ j ] ) ;  $ ~~~cost += ( x - 1 ) * arr [ j ] ;  $ ~~~cost += ( x - 1 ) * arr [ j ] ;  $ ~~~cost += ( ( j - 1 ) * arr [ j ] ) ;  $ ~~~cost += abs ( x - j ) * arr [ j ] ;  $ ~~}  $ ~~if ( cost < ans ) { ans = cost ; }  $ ~}  $ ~cout << ans << endl ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~int s = 0 , n , m ;  $ ~cin >> n ;  $ ~for ( int i = 0 ; i < n ; i ++ ) {  $ ~~cin >> m ;  $ ~~s = s + i * 4 * m ;  $ ~}  $ ~cout << s << endl ;  $ ~return 0 ;  $ }
void init ( ) { } ;  $ int a [ 1000 ] ;  $ int main ( ) {  $ ~int n ;  $ ~cin >> n ;  $ ~for ( int i = 1 ; i <= n ; i ++ ) cin >> a [ i ] ;  $ ~long long sum = 0 ;  $ ~for ( int i = 1 ; i <= n ; i ++ ) sum += 4 * ( i - 1 ) * a [ i ] ;  $ ~cout << sum << endl ;  $ ~return 0 ;  $ }
long long int i , j , t ;  $ int main ( ) {  $ ~long long int n ;  $ ~cin >> n ;  $ ~long long int a [ n ] ;  $ ~for ( i = 0 ; i < n ; i ++ ) cin >> a [ i ] ;  $ ~long long int x [ n ] = { 0 } ;  $ ~for ( i = 0 ; i < n ; i ++ ) {  $ ~~for ( j = 0 ; j < n ; j ++ ) { x [ i ] += a [ j ] * ( ( abs ( i - j ) + abs ( j ) + abs ( i ) + abs ( i ) + abs ( j ) + abs ( j - i ) ) ) ; }  $ ~}  $ ~sort ( x , x + n ) ;  $ ~cout << x [ 0 ] << endl ;  $ }
int n , ans ;  $ int a [ 10010 ] ;  $ int main ( ) {  $ ~cin >> n ;  $ ~for ( int i = 1 ; i <= n ; ++ i ) {  $ ~~cin >> a [ i ] ;  $ ~~ans += a [ i ] * ( i - 1 ) * 4 ;  $ ~}  $ ~cout << ans << endl ;  $ ~return 0 ;  $ }
const int pi = acos ( - 1 ) ;  $ int main ( ) {  $ ~int n ;  $ ~cin >> n ;  $ ~int a [ 200 ] , k = 1 , ele = 0 , flag = 0 ;  $ ~for ( int i = 1 ; i <= n ; ++ i ) { cin >> a [ i ] ; }  $ ~for ( int i = 1 ; i <= n ; ++ i ) { ele += ( 4 * i - 4 ) * a [ i ] ; }  $ ~cout << ele << endl ;  $ }
const long long M = 998244353 ;  $ const long long oo = 1e13 ;  $ int a [ 1010 ] ;  $ int main ( ) {  $ ~int n ;  $ ~cin >> n ;  $ ~for ( int i = 1 ; i <= n ; ++ i ) { cin >> a [ i ] ; }  $ ~int ans = 1e9 ;  $ ~for ( int x = 1 ; x <= n ; ++ x ) {  $ ~~int sum = 0 ;  $ ~~for ( int j = 1 ; j <= n ; ++ j ) { sum += ( ( abs ( j - x ) + j - 1 + x - 1 ) * 2 ) * a [ j ] ; }  $ ~~ans = min ( ans , sum ) ;  $ ~}  $ ~cout << ans << endl ;  $ }
int main ( ) {  $ ~int n , a [ 1000 ] , max1 ;  $ ~cin >> n ;  $ ~for ( int i = 1 ; i <= n ; i ++ ) cin >> a [ i ] ;  $ ~for ( int i = 1 ; i <= n ; i ++ ) {  $ ~~int sum = 0 ;  $ ~~for ( int j = 1 ; j <= n ; j ++ ) { sum += ( fabs ( i * 1.0 - j * 1.0 ) + j - 1 + i - 1 ) * 2 * a [ j ] ; }  $ ~~if ( i == 1 )  $ ~~~max1 = sum ;  $ ~~else  $ ~~~max1 = min ( max1 , sum ) ;  $ ~}  $ ~cout << max1 << endl ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~int n ;  $ ~cin >> n ;  $ ~int value ;  $ ~int ans = 0 ;  $ ~for ( int i = 0 ; i < n ; i ++ ) {  $ ~~cin >> value ;  $ ~~ans += i * 4 * value ;  $ ~}  $ ~cout << ans << endl ;  $ }
int main ( ) {  $ ~int n , i , j , m , t , x , y ;  $ ~int a [ 110 ] ;  $ ~cin >> n ;  $ ~for ( i = 0 ; i < n ; i ++ ) { cin >> a [ i ] ; }  $ ~m = - 1 ;  $ ~for ( i = 1 ; i <= n ; i ++ ) {  $ ~~x = 0 ;  $ ~~for ( j = 0 ; j < n ; j ++ ) {  $ ~~~y = i - ( j + 1 ) ;  $ ~~~if ( y < 0 ) y = - y ;  $ ~~~y += j + i - 1 ;  $ ~~~x += y * a [ j ] * 2 ;  $ ~~}  $ ~~if ( x < m || m == - 1 ) { m = x ; }  $ ~}  $ ~cout << m << endl ;  $ ~return 0 ;  $ }
int N , A , sum ;  $ int main ( ) {  $ ~cin >> N ;  $ ~for ( int i = 0 ; i < N ; i ++ ) {  $ ~~cin >> A ;  $ ~~sum += 4 * A * i ;  $ ~}  $ ~cout << sum << '\n' ;  $ }
int main ( ) {  $ ~int n , sum = 0 , i , m , j ;  $ ~cin >> n ;  $ ~int * p = new int [ n ] ;  $ ~for ( i = 0 ; i < n ; i ++ ) cin >> p [ i ] ;  $ ~int * h = new int [ n ] ;  $ ~for ( i = 0 ; i < n ; i ++ ) {  $ ~~for ( j = i + 1 ; j < n ; j ++ ) sum = sum + 4 * j * p [ j ] ;  $ ~~for ( m = i - 1 ; m > 0 ; m -- ) sum = sum + 4 * i * p [ m ] * 4 ;  $ ~~sum = i * 4 * p [ i ] + sum ;  $ ~~h [ i ] = sum ;  $ ~~sum = 0 ;  $ ~}  $ ~for ( i = 1 ; i < n ; i ++ )  $ ~~if ( h [ 0 ] > h [ i ] ) {  $ ~~~int t ;  $ ~~~t = h [ 0 ] ;  $ ~~~h [ 0 ] = h [ i ] ;  $ ~~~h [ i ] = t ;  $ ~~}  $ ~cout << h [ 0 ] << endl ;  $ ~return 0 ;  $ }
const int M = 105 ;  $ int a [ M ] ;  $ int main ( ) {  $ ~int n ;  $ ~cin >> n ;  $ ~int Min = 0 x3f3f3f3f ;  $ ~for ( int i = 1 ; i <= n ; i ++ ) cin >> a [ i ] ;  $ ~for ( int i = 1 ; i <= n ; i ++ ) {  $ ~~int sum = 0 ;  $ ~~for ( int j = 1 ; j <= n ; j ++ ) { sum += ( abs ( i - j ) - 2 + j + i ) * a [ j ] * 2 ; }  $ ~~Min = min ( sum , Min ) ;  $ ~}  $ ~cout << Min << endl ;  $ ~return 0 ;  $ }
const int maxn = 1e4 + 5 ;  $ int num [ maxn ] = { 0 } ;  $ int n , ans = 10000000 ;  $ int main ( ) {  $ ~cin >> n ;  $ ~for ( int i = 1 ; i <= n ; i ++ ) cin >> num [ i ] ;  $ ~for ( int i = 1 ; i <= n ; i ++ ) {  $ ~~int cnt = 0 ;  $ ~~for ( int j = 1 ; j <= n ; j ++ ) cnt += 2 * num [ j ] * ( abs ( i - j ) + abs ( j - 1 ) + abs ( 1 - i ) ) ;  $ ~~ans = min ( cnt , ans ) ;  $ ~}  $ ~cout << ans << endl ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~int n ;  $ ~while ( cin >> n ) {  $ ~~int a [ 105 ] ;  $ ~~for ( int i = 1 ; i <= n ; i ++ ) cin >> a [ i ] ;  $ ~~int Min = 0 x3f3f3f3f ;  $ ~~for ( int i = 1 ; i <= n ; i ++ ) {  $ ~~~int ans = 0 ;  $ ~~~for ( int j = 1 ; j <= n ; j ++ ) {  $ ~~~~if ( j > i )  $ ~~~~~ans += ( j - 1 ) * 4 * a [ j ] ;  $ ~~~~else  $ ~~~~~ans += ( i - 1 ) * 4 * a [ j ] ;  $ ~~~}  $ ~~~Min = min ( Min , ans ) ;  $ ~~}  $ ~~cout << Min << endl ;  $ ~}  $ ~return 0 ;  $ }
void init ( ) { } ;  $ int a [ 1000 ] ;  $ int main ( ) {  $ ~int n ;  $ ~cin >> n ;  $ ~for ( int i = 1 ; i <= n ; i ++ ) cin >> a [ i ] ;  $ ~long long sum = 0 ;  $ ~for ( int i = 1 ; i <= n ; i ++ ) sum += 4 * ( i - 1 ) * a [ i ] ;  $ ~cout << sum << endl ;  $ ~return 0 ;  $ }
const int maxn = 1e5 + 5 ;  $ int num [ maxn ] = { 0 } ;  $ int n , ans = 1000000000 ;  $ int main ( ) {  $ ~cin >> n ;  $ ~for ( int i = 1 ; i <= n ; i ++ ) cin >> num [ i ] ;  $ ~for ( int i = 1 ; i <= n ; i ++ ) {  $ ~~int cnt = 0 ;  $ ~~for ( int j = 1 ; j <= n ; j ++ ) cnt += 2 * num [ j ] * ( abs ( i - j ) + abs ( j - 1 ) + abs ( 1 - i ) ) ;  $ ~~ans = min ( cnt , ans ) ;  $ ~}  $ ~cout << ans << endl ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~int n ;  $ ~cin >> n ;  $ ~int a [ n ] ;  $ ~for ( int i = 0 ; i < n ; i ++ ) { cin >> a [ i ] ; }  $ ~int ans = 2e6 ;  $ ~for ( int i = 0 ; i < n ; i ++ ) {  $ ~~int cur = 0 ;  $ ~~for ( int j = 0 ; j < n ; j ++ ) {  $ ~~~int d1 = i - j ;  $ ~~~if ( d1 < 0 ) { d1 = - d1 ; }  $ ~~~cur += 2 * ( d1 + i + j ) * a [ j ] ;  $ ~~}  $ ~~if ( cur < ans ) { ans = cur ; }  $ ~}  $ ~cout << ans << endl ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~long long int n , i , sum , minm , x ;  $ ~minm = 100000000 ;  $ ~cin >> n ;  $ ~int a [ n + 1 ] ;  $ ~for ( i = 1 ; i <= n ; i ++ ) cin >> a [ i ] ;  $ ~for ( x = 1 ; x <= n ; x ++ ) {  $ ~~sum = 0 ;  $ ~~for ( i = 1 ; i <= n ; i ++ ) { sum = sum + ( abs ( i - x ) + i - 1 + ( x - 1 ) ) * a [ i ] * 2 ; }  $ ~~if ( sum < minm ) minm = sum ;  $ ~}  $ ~cout << minm << endl ;  $ }
int main ( ) {  $ ~int n ;  $ ~cin >> n ;  $ ~int ans = ( int ) 10e9 ;  $ ~int arr [ n ] ;  $ ~for ( int i = 0 ; i < n ; i ++ ) {  $ ~~int a ;  $ ~~cin >> a ;  $ ~~arr [ i ] = a ;  $ ~}  $ ~int x = 1 ;  $ ~while ( x <= n ) {  $ ~~int cost = 0 ;  $ ~~for ( int i = 0 ; i < n ; i ++ ) {  $ ~~~int l = i + 1 ;  $ ~~~cost += ( abs ( x - l ) + abs ( l - 1 ) + abs ( x - 1 ) ) * 2 * arr [ i ] ;  $ ~~}  $ ~~ans = min ( ans , cost ) ;  $ ~~x ++ ;  $ ~}  $ ~cout << ans << endl ;  $ }
const int maxn = 200005 ;  $ const int maxm = maxn * 2 ;  $ const int inf = 0 x3f3f3f3f ;  $ const long long mod = 998244353 ;  $ void init ( ) { }  $ int n ;  $ long long a [ 105 ] ;  $ int main ( ) {  $ ~init ( ) ;  $ ~cin >> n ;  $ ~long long ans = 1e18 ;  $ ~for ( int i = 1 ; i <= n ; i ++ ) { cin >> a [ i ] ; }  $ ~for ( int i = 1 ; i <= n ; i ++ ) {  $ ~~long long tmp = 0 ;  $ ~~for ( int j = 1 ; j <= n ; j ++ ) { tmp += a [ j ] * 4 * ( ( i - 1 ) * 2 + ( j - 1 ) ) ; }  $ ~~ans = min ( ans , tmp ) ;  $ ~}  $ ~cout << ans << endl ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~string s ;  $ ~cin >> s ;  $ ~s = '#' + s ;  $ ~int n = s . length ( ) - 1 ;  $ ~int cnt = 0 ;  $ ~for ( int i = 1 ; i + i <= n ; ++ i )  $ ~~if ( s [ i ] != s [ n - i + 1 ] ) ++ cnt ;  $ ~if ( ( cnt <= 1 && ( n & 1 ) ) || cnt == 1 )  $ ~~puts ( "YES" ) ;  $ ~else  $ ~~puts ( "NO" ) ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~string x ;  $ ~cin >> x ;  $ ~int c = 0 ;  $ ~for ( int i = 0 , j = x . length ( ) - 1 ; i < x . length ( ) ; i ++ , j -- ) {  $ ~~if ( x [ i ] != x [ j ] ) c ++ ;  $ ~}  $ ~if ( c == 2 || ( c == 0 && x . length ( ) % 2 != 0 ) )  $ ~~cout << "YES" << endl ;  $ ~else  $ ~~cout << "NO" << endl ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~string s ;  $ ~while ( cin >> s ) {  $ ~~int c = 0 ;  $ ~~string n = s ;  $ ~~for ( int i = 0 ; i < ( s . length ( ) ) / 2 ; i ++ ) {  $ ~~~reverse ( s . begin ( ) , s . end ( ) ) ;  $ ~~~if ( s [ i ] != s [ s . length ( ) - i - 1 ] ) { c ++ ; }  $ ~~}  $ ~~if ( ( s . length ( ) ) % 2 == 0 && c == 1 )  $ ~~~cout << "YES" << endl ;  $ ~~else if ( ( s . length ( ) ) % 2 == 1 && c <= 1 )  $ ~~~cout << "YES" << endl ;  $ ~~else  $ ~~~cout << "NO" << endl ;  $ ~}  $ ~return 0 ;  $ }
const int MOD = 998244353 ;  $ const int MAX = 200001 ;  $ int An [ MAX ] ;  $ int book [ MAX ] ;  $ int main ( ) {  $ ~string str ;  $ ~cin >> str ;  $ ~int sum = 0 ;  $ ~int n = str . length ( ) ;  $ ~for ( int i = 0 ; i < n / 2 ; i ++ ) {  $ ~~if ( str [ i ] != str [ n - 1 - i ] ) sum ++ ;  $ ~}  $ ~if ( sum == 1 )  $ ~~cout << "YES" << endl ;  $ ~else {  $ ~~if ( sum == 0 && n % 2 ) {  $ ~~~cout << "YES" << endl ;  $ ~~} else  $ ~~~cout << "NO" << endl ;  $ ~}  $ ~return 0 ;  $ }
int main ( ) {  $ ~string s , t ;  $ ~cin >> s ;  $ ~t = s ;  $ ~reverse ( s . begin ( ) , s . end ( ) ) ;  $ ~int d = 0 ;  $ ~for ( int i = 0 ; i < s . length ( ) / 2 ; i ++ )  $ ~~if ( s [ i ] != t [ i ] ) d ++ ;  $ ~puts ( ( d == 1 or d == 0 and s . length ( ) % 2 != 0 ) ? "YES" : "NO" ) ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~string str ;  $ ~cin >> str ;  $ ~int diff = 0 ;  $ ~for ( int i = 0 ; i < str . size ( ) ; i ++ ) { diff += str [ i ] != str [ str . size ( ) - 1 - i ] ; }  $ ~if ( diff == 2 || diff == 0 && str . size ( ) % 2 == 1 )  $ ~~cout << "YES\n" ;  $ ~else  $ ~~cout << "NO\n" ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~string s ;  $ ~cin >> s ;  $ ~int d = 0 ;  $ ~for ( int i = 0 ; i < s . size ( ) ; ++ i ) { d += s [ i ] != s [ s . size ( ) - 1 - i ] ; }  $ ~if ( d == 2 || ( d == 0 && s . size ( ) % 2 == 1 ) )  $ ~~cout << "YES" << endl ;  $ ~else  $ ~~cout << "NO" << endl ;  $ ~return 0 ;  $ }
string s ;  $ inline int check ( string s ) {  $ ~string ss = s ;  $ ~reverse ( s . begin ( ) , s . end ( ) ) ;  $ ~return s == ss ;  $ }  $ int main ( ) {  $ ~cin >> s ;  $ ~if ( check ( s ) ) {  $ ~~if ( s . size ( ) % 2 == 0 )  $ ~~~puts ( "NO" ) ;  $ ~~else  $ ~~~puts ( "YES" ) ;  $ ~~return 0 ;  $ ~}  $ ~int len = s . size ( ) ;  $ ~if ( len % 2 == 0 )  $ ~~len = len / 2 - 1 ;  $ ~else  $ ~~len = len / 2 ;  $ ~for ( int i = 0 ; i <= len ; ++ i ) {  $ ~~if ( s [ i ] != s [ s . size ( ) - 1 - i ] ) {  $ ~~~s [ i ] = s [ s . size ( ) - 1 - i ] ;  $ ~~~if ( check ( s ) ) {  $ ~~~~puts ( "YES" ) ;  $ ~~~~return 0 ;  $ ~~~} else {  $ ~~~~puts ( "NO" ) ;  $ ~~~~return 0 ;  $ ~~~}  $ ~~}  $ ~}  $ ~return 0 ;  $ }
string s ;  $ int main ( ) {  $ ~cin >> s ;  $ ~for ( int i = 0 ; i < s . size ( ) ; i ++ ) {  $ ~~char c = s [ i ] ;  $ ~~for ( int j = 0 ; j < 26 ; j ++ ) {  $ ~~~if ( 'a' + j == c ) { continue ; }  $ ~~~s [ i ] = 'a' + j ;  $ ~~~int k ;  $ ~~~for ( k = 0 ; k < s . size ( ) ; k ++ ) {  $ ~~~~if ( s [ k ] != s [ s . size ( ) - 1 - k ] ) { break ; }  $ ~~~}  $ ~~~if ( k == s . size ( ) ) {  $ ~~~~cout << "YES" << endl ;  $ ~~~~return 0 ;  $ ~~~}  $ ~~}  $ ~~s [ i ] = c ;  $ ~}  $ ~cout << "NO" << endl ;  $ ~return 0 ;  $ }
bool ispalindrome ( string s ) {  $ ~string t = s ;  $ ~reverse ( s . begin ( ) , s . end ( ) ) ;  $ ~return s == t ;  $ }  $ int main ( ) {  $ ~string s ;  $ ~cin >> s ;  $ ~if ( ispalindrome ( s ) ) {  $ ~~if ( s . size ( ) % 2 ) {  $ ~~~puts ( "YES" ) ;  $ ~~~return 0 ;  $ ~~} else {  $ ~~~puts ( "NO" ) ;  $ ~~~return 0 ;  $ ~~}  $ ~}  $ ~for ( int i = 0 ; i < s . size ( ) / 2 ; i ++ ) {  $ ~~string t = s ;  $ ~~t [ i ] = t [ t . size ( ) - i - 1 ] ;  $ ~~if ( ispalindrome ( t ) ) {  $ ~~~puts ( "YES" ) ;  $ ~~~return 0 ;  $ ~~}  $ ~}  $ ~puts ( "NO" ) ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~long long A [ 26 ] = { 0 } ;  $ ~string s ;  $ ~cin >> s ;  $ ~long long n = ( int ) s . length ( ) ;  $ ~long long c = 0 ;  $ ~for ( long long i = 0 ; i < n / 2 ; i ++ ) {  $ ~~if ( s [ i ] != s [ n - 1 - i ] ) c ++ ;  $ ~}  $ ~if ( c == 1 )  $ ~~cout << "YES"  $ ~~~<< "\n" ;  $ ~else if ( c == 0 && n % 2 == 1 )  $ ~~cout << "YES"  $ ~~~<< "\n" ;  $ ~else  $ ~~cout << "NO"  $ ~~~<< "\n" ;  $ ~return 0 ;  $ }
bool ispalindrome ( string s ) {  $ ~string t = s ;  $ ~reverse ( s . begin ( ) , s . end ( ) ) ;  $ ~return s == t ;  $ }  $ int main ( ) {  $ ~string s ;  $ ~cin >> s ;  $ ~if ( s . size ( ) % 2 && ispalindrome ( s ) ) {  $ ~~puts ( "YES" ) ;  $ ~~return 0 ;  $ ~}  $ ~if ( s . size ( ) % 2 == 0 && ispalindrome ( s ) ) {  $ ~~puts ( "NO" ) ;  $ ~~return 0 ;  $ ~}  $ ~int err = 0 ;  $ ~for ( int i = 0 ; i < s . size ( ) / 2 ; i ++ )  $ ~~if ( s [ i ] != s [ s . size ( ) - i - 1 ] ) err ++ ;  $ ~if ( err == 1 ) {  $ ~~puts ( "YES" ) ;  $ ~~return 0 ;  $ ~}  $ ~puts ( "NO" ) ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~char s [ 16 ] ;  $ ~int i , count = 0 , n ;  $ ~cin >> s ;  $ ~n = strlen ( s ) ;  $ ~for ( i = 0 ; i < n / 2 ; i ++ ) {  $ ~~if ( s [ i ] != s [ n - 1 - i ] ) count ++ ;  $ ~}  $ ~if ( n % 2 ) {  $ ~~if ( count <= 1 )  $ ~~~cout << "YES" << endl ;  $ ~~else  $ ~~~cout << "NO" << endl ;  $ ~} else {  $ ~~if ( count == 1 )  $ ~~~cout << "YES" << endl ;  $ ~~else  $ ~~~cout << "NO" << endl ;  $ ~}  $ ~return 0 ;  $ }
int main ( ) {  $ ~string s ;  $ ~cin >> s ;  $ ~int count = 0 , l = s . size ( ) - 1 ;  $ ~for ( int i = 0 ; i < s . size ( ) / 2 ; i ++ ) {  $ ~~if ( s [ i ] != s [ l - i ] ) { count ++ ; }  $ ~}  $ ~if ( s . size ( ) % 2 == 0 && count == 1 ) {  $ ~~cout << "YES" << endl ;  $ ~} else if ( s . size ( ) % 2 == 1 && ( count == 1 || count == 0 ) ) {  $ ~~cout << "YES" << endl ;  $ ~} else {  $ ~~cout << "NO" << endl ;  $ ~}  $ }
string s ;  $ int ans = 0 ;  $ int i = 0 ;  $ int main ( ) {  $ ~cin >> s ;  $ ~if ( s . size ( ) == 1 ) {  $ ~~cout << "YES" << endl ;  $ ~~return 0 ;  $ ~}  $ ~for ( int j = s . size ( ) - 1 ; j >= s . size ( ) / 2 ; j -- ) {  $ ~~if ( s [ i ] != s [ j ] ) {  $ ~~~for ( char c = 'a' ; c <= 'z' ; c ++ ) {  $ ~~~~if ( c == s [ i ] || c == s [ j ] ) {  $ ~~~~~ans ++ ;  $ ~~~~~break ;  $ ~~~~}  $ ~~~}  $ ~~}  $ ~~i = i + 1 ;  $ ~}  $ ~if ( s . size ( ) % 2 == 0 ) {  $ ~~if ( ans == 0 || ans > 1 ) {  $ ~~~cout << "NO" << endl ;  $ ~~~return 0 ;  $ ~~}  $ ~}  $ ~if ( ans > 1 ) {  $ ~~cout << "NO" << endl ;  $ ~~return 0 ;  $ ~}  $ ~cout << "YES" << endl ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~string s ;  $ ~cin >> s ;  $ ~int count = 0 , l = s . size ( ) - 1 ;  $ ~for ( int i = 0 ; i < s . size ( ) / 2 ; i ++ ) {  $ ~~if ( s [ i ] != s [ l - i ] ) { count ++ ; }  $ ~}  $ ~if ( count == 1 ) {  $ ~~cout << "YES" << endl ;  $ ~} else if ( s . size ( ) % 2 == 1 && count == 0 ) {  $ ~~cout << "YES" << endl ;  $ ~} else {  $ ~~cout << "NO" << endl ;  $ ~}  $ }
int main ( ) {  $ ~string s ;  $ ~cin >> s ;  $ ~int l = s . size ( ) , i , j , k ;  $ ~for ( i = 0 ; i < l ; i ++ ) {  $ ~~char c = s [ i ] ;  $ ~~for ( j = 0 ; j < 26 ; j ++ ) {  $ ~~~if ( j == c - 'a' ) continue ;  $ ~~~s [ i ] = j + 'a' ;  $ ~~~for ( k = 0 ; k < l ; k ++ )  $ ~~~~if ( s [ k ] != s [ l - k - 1 ] ) break ;  $ ~~~if ( k >= l ) {  $ ~~~~cout << "YES" << endl ;  $ ~~~~return 0 ;  $ ~~~}  $ ~~}  $ ~~s [ i ] = c ;  $ ~}  $ ~cout << "NO" << endl ;  $ ~return 0 ;  $ }
const long long int INF = 2000000000000000000 LL ;  $ const int MOD = 10000007 ;  $ int a [ 1000006 ] ;  $ string r ;  $ bool ispal ( string s ) {  $ ~r = s ;  $ ~reverse ( r . begin ( ) , r . end ( ) ) ;  $ ~if ( s == r ) {  $ ~~return true ;  $ ~} else {  $ ~~return false ;  $ ~}  $ }  $ int main ( ) {  $ ~string s ;  $ ~cin >> s ;  $ ~int n = s . size ( ) , cnt = 0 ;  $ ~for ( int i = 0 ; i < n / 2 ; i ++ ) {  $ ~~char samne = s [ i ] ;  $ ~~char pichone = s [ n - ( i + 1 ) ] ;  $ ~~if ( samne != pichone ) cnt ++ ;  $ ~}  $ ~if ( cnt == 0 && ispal ( s ) && n % 2 == 0 ) {  $ ~~cout << "NO"  $ ~~~<< "\n" ;  $ ~~;  $ ~} else if ( cnt > 1 ) {  $ ~~cout << "NO"  $ ~~~<< "\n" ;  $ ~~;  $ ~} else {  $ ~~cout << "YES"  $ ~~~<< "\n" ;  $ ~~;  $ ~}  $ ~return 0 ;  $ }
int main ( ) {  $ ~string s ;  $ ~cin >> s ;  $ ~int y = s . size ( ) - 1 ;  $ ~int sum = 0 ;  $ ~for ( int i = 0 ; i < s . size ( ) / 2 ; i ++ ) {  $ ~~if ( s [ i ] != s [ y ] ) { sum ++ ; }  $ ~~if ( sum == 2 ) {  $ ~~~cout << "NO" << endl ;  $ ~~~return 0 ;  $ ~~}  $ ~~y -- ;  $ ~}  $ ~if ( sum == 1 )  $ ~~cout << "YES" << endl ;  $ ~else if ( sum == 0 && s . size ( ) % 2 != 0 )  $ ~~cout << "YES" << endl ;  $ ~else  $ ~~cout << "NO" << endl ;  $ }
int main ( ) {  $ ~string str ;  $ ~cin >> str ;  $ ~int d = 0 ;  $ ~for ( int i = 0 ; i < str . size ( ) ; i ++ ) d += str [ i ] != str [ str . size ( ) - 1 - i ] ;  $ ~if ( d == 2 || ( d == 0 && str . size ( ) % 2 ) )  $ ~~cout << "YES" << endl ;  $ ~else  $ ~~cout << "NO" << endl ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~int y , b , r ;  $ ~while ( cin >> y >> b >> r ) {  $ ~~for ( int i = r ; i >= 3 ; i -- ) {  $ ~~~if ( b >= ( i - 1 ) && y >= ( i - 2 ) ) {  $ ~~~~cout << i + i - 1 + i - 2 << endl ;  $ ~~~~break ;  $ ~~~}  $ ~~}  $ ~}  $ ~return 0 ;  $ }
int main ( ) {  $ ~int b , y , r ;  $ ~cin >> r >> y >> b ;  $ ~int arr [ 3 ] = { r , y - 1 , b - 2 } ;  $ ~int min = 200 ;  $ ~for ( int i = 0 ; i < 3 ; i ++ ) {  $ ~~if ( min > arr [ i ] ) { min = arr [ i ] ; }  $ ~}  $ ~cout << 3 * min + 3 << endl ;  $ }
int main ( ) {  $ ~int y , b , r , m ;  $ ~cin >> y >> b >> r ;  $ ~if ( b <= r - 1 && y >= b - 1 )  $ ~~m = 3 * b ;  $ ~else if ( b <= r - 1 && y < b - 1 )  $ ~~m = 3 * ( y + 1 ) ;  $ ~else if ( b > r - 1 && y >= r - 2 )  $ ~~m = 3 * ( r - 1 ) ;  $ ~else if ( b > r - 1 && y < r - 2 )  $ ~~m = 3 * ( y + 1 ) ;  $ ~cout << m << endl ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~int a , b , c , d , e , f , g ;  $ ~cin >> a >> b >> c ;  $ ~e = a , f = b , g = c ;  $ ~d = min ( a , b ) ;  $ ~d = min ( d , c ) ;  $ ~d = min ( d , a ) ;  $ ~if ( d == a ) {  $ ~~b = a + 1 ;  $ ~~c = a + 2 ;  $ ~} else if ( d == b ) {  $ ~~a = b - 1 ;  $ ~~c = b + 1 ;  $ ~} else if ( d == c ) {  $ ~~a = c - 2 ;  $ ~~b = c - 1 ;  $ ~}  $ ~while ( a > e || b > f || c > g ) {  $ ~~a -- ;  $ ~~b -- ;  $ ~~c -- ;  $ ~}  $ ~cout << a + b + c << endl ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~int a , b , c ;  $ ~cin >> a >> b >> c ;  $ ~int ans = 0 ;  $ ~c -= 2 ;  $ ~b -= 1 ;  $ ~cout << min ( a , min ( b , c ) ) * 3 + 3 << endl ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~int y , b , r ;  $ ~cin >> y >> b >> r ;  $ ~int mx = min ( y + 2 , min ( b + 1 , r ) ) ;  $ ~cout << mx * 3 - 3 << "\n" ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~int color [ 3 ] ;  $ ~for ( int i = 0 ; i < 3 ; i ++ ) { cin >> color [ i ] ; }  $ ~int min , no ;  $ ~if ( color [ 0 ] < color [ 1 ] - 1 ) {  $ ~~min = color [ 0 ] + 2 ;  $ ~~no = 0 ;  $ ~} else {  $ ~~min = color [ 1 ] + 1 ;  $ ~~no = 1 ;  $ ~}  $ ~if ( color [ 2 ] < min ) { no = 2 ; }  $ ~cout << color [ no ] * 3 - ( no - 1 ) * 3 << endl ;  $ }
int min ( int x , int y , int z ) {  $ ~int t = 0 ;  $ ~if ( x < y ) {  $ ~~if ( x < z ) {  $ ~~~t = 1 ;  $ ~~} else {  $ ~~~t = - 1 ;  $ ~~}  $ ~} else {  $ ~~if ( y < z ) {  $ ~~~t = 0 ;  $ ~~} else  $ ~~~t = - 1 ;  $ ~}  $ ~return t ;  $ }  $ int main ( ) {  $ ~int y , b , r ;  $ ~int sum = 0 ;  $ ~cin >> y >> b >> r ;  $ ~if ( y == b && b == r && r == y ) { sum = 3 * ( y - 1 ) ; }  $ ~int x = min ( y , b , r ) ;  $ ~if ( x == 1 ) {  $ ~~if ( ( b - y ) >= 1 && ( r - y ) >= 2 ) {  $ ~~~sum = ( y + 1 ) * 3 ;  $ ~~} else {  $ ~~~while ( ! ( ( b - y ) >= 1 && ( r - y ) >= 2 ) ) { y -- ; }  $ ~~~sum = ( y + 1 ) * 3 ;  $ ~~}  $ ~} else if ( x == 0 ) {  $ ~~if ( b == r ) {  $ ~~~sum = 3 * ( b - 1 ) ;  $ ~~} else {  $ ~~~sum = 3 * b ;  $ ~~}  $ ~} else {  $ ~~sum = ( r - 1 ) * 3 ;  $ ~}  $ ~cout << sum << endl ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~int a , b , c , s = 0 ;  $ ~cin >> a >> b >> c ;  $ ~while ( 1 ) {  $ ~~if ( b >= a + 1 ) {  $ ~~~if ( c >= a + 2 ) {  $ ~~~~s = a + a + 1 + a + 2 ;  $ ~~~~break ;  $ ~~~}  $ ~~}  $ ~~a -- ;  $ ~}  $ ~cout << s << endl ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~int y , b , r ;  $ ~cin >> y >> b >> r ;  $ ~if ( y < 1 || y > 100 || b < 2 || b > 100 || r < 3 || r > 100 ) { return 0 ; }  $ ~int y1 , y2 , b1 , b2 , r1 , r2 ;  $ ~y1 = y + 1 ;  $ ~y2 = y + 2 ;  $ ~b1 = b - 1 ;  $ ~b2 = b + 1 ;  $ ~r1 = r - 2 ;  $ ~r2 = r - 1 ;  $ ~if ( y1 <= b && y2 <= r )  $ ~~cout << y + y1 + y2 << endl ;  $ ~else if ( b1 <= y && b2 <= r )  $ ~~cout << b + b1 + b2 << endl ;  $ ~else if ( r1 <= y && r2 <= b )  $ ~~cout << r1 + r2 + r << endl ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~int y , b , r , ans ;  $ ~cin >> y >> b >> r ;  $ ~if ( r - 2 != 0 && r - 2 <= y && r - 1 <= b )  $ ~~ans = 3 * r - 3 ;  $ ~else if ( b + 1 <= r && b - 1 != 0 && b - 1 < + y )  $ ~~ans = 3 * b ;  $ ~else  $ ~~ans = 3 * y + 3 ;  $ ~cout << ans << endl ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~int y , b , r ;  $ ~cin >> y >> b >> r ;  $ ~while ( y > r - 2 || y > b - 1 ) y -- ;  $ ~while ( b > y + 1 ) b -- ;  $ ~while ( r > b + 1 ) r -- ;  $ ~cout << y + r + b << '\n' ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~int y , b , r ;  $ ~cin >> y >> b >> r ;  $ ~cout << 3 * min ( min ( b + 1 , r ) , y + 2 ) - 3 << endl ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~int y , b , r ;  $ ~cin >> y >> b >> r ;  $ ~for ( int i = r ; i >= 3 ; i -- ) {  $ ~~if ( i <= r && i - 1 <= b && i - 2 <= y ) {  $ ~~~cout << 3 * i - 3 << endl ;  $ ~~~break ;  $ ~~}  $ ~}  $ ~return 0 ;  $ }
int main ( ) {  $ ~int y , b , r ;  $ ~cin >> y >> b >> r ;  $ ~for ( int i = y ; i >= 1 ; i -- ) {  $ ~~int ty = i ;  $ ~~int tb = i + 1 ;  $ ~~int tc = i + 2 ;  $ ~~if ( tb <= b && tc <= r ) {  $ ~~~cout << ty + tb + tc << endl ;  $ ~~~return 0 ;  $ ~~}  $ ~}  $ }
int main ( ) {  $ ~int y , b , r ;  $ ~cin >> y >> b >> r ;  $ ~cout << min ( y , min ( b - 1 , r - 2 ) ) * 3 + 3 << endl ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~int a , b , c ;  $ ~cin >> a >> b >> c ;  $ ~int d = min ( a + 1 , min ( b , c - 1 ) ) ;  $ ~cout << 3 * d << endl ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~int64_t a , b , c ;  $ ~cin >> a >> b >> c ;  $ ~cout << 3 * min ( a + 1 , min ( b , c - 1 ) ) << endl ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~int a , b , c ;  $ ~cin >> a >> b >> c ;  $ ~if ( b >= c - 1 && a >= c - 2 )  $ ~~cout << 3 * c - 3 << endl ;  $ ~else if ( b < c - 1 && a >= c - 2 )  $ ~~cout << 3 * b << endl ;  $ ~else if ( b >= c - 1 && a < c - 2 )  $ ~~cout << 3 * a + 3 << endl ;  $ ~else {  $ ~~if ( a <= b - 1 )  $ ~~~cout << 3 * a + 3 << endl ;  $ ~~else  $ ~~~cout << 3 * b << endl ;  $ ~}  $ ~return 0 ;  $ }
int main ( ) {  $ ~int y , b , r ;  $ ~cin >> y >> b >> r ;  $ ~for ( int i = r ; i >= 3 ; i -- ) {  $ ~~if ( i <= b + 1 && i <= y + 2 ) {  $ ~~~int ans = i ;  $ ~~~cout << 3 * ans - 3 << endl ;  $ ~~~return 0 ;  $ ~~}  $ ~}  $ }
int main ( ) {  $ ~int y , b , r ;  $ ~cin >> y >> b >> r ;  $ ~for ( int i = y ; i >= 0 ; i -- ) {  $ ~~if ( i + 1 <= b && i + 2 <= r ) {  $ ~~~cout << 3 * i + 3 << endl ;  $ ~~~return 0 ;  $ ~~}  $ ~}  $ ~return 0 ;  $ }
int min ( int a , int b ) {  $ ~if ( a < b ) return a ;  $ ~return b ;  $ }  $ int main ( ) {  $ ~int a , b , c ;  $ ~cin >> a >> b >> c ;  $ ~int x = min ( a , min ( b - 1 , c - 2 ) ) ;  $ ~cout << x + x + 1 + x + 2 << endl ;  $ }
int main ( ) {  $ ~int y , r , b , ans ;  $ ~while ( cin >> y >> b >> r ) {  $ ~~int ans = min ( y + 2 , min ( b + 1 , r ) ) * 3 ;  $ ~~cout << ans - 3 << endl ;  $ ~}  $ ~return 0 ;  $ }
int main ( ) {  $ ~int a , b , c ;  $ ~cin >> a >> b >> c ;  $ ~int ans = 0 ;  $ ~c -= 2 ;  $ ~b -= 1 ;  $ ~cout << min ( a , min ( b , c ) ) * 3 + 3 << endl ;  $ ~return 0 ;  $ }
int M = 1000000007 ;  $ int main ( ) {  $ ~int y , b , r ;  $ ~cin >> y >> b >> r ;  $ ~b -- ;  $ ~r -= 2 ;  $ ~cout << 3 * min ( y , min ( b , r ) ) + 3 << endl ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~int y , b , r ;  $ ~cin >> y >> b >> r ;  $ ~if ( y >= r ) y = r - 2 ;  $ ~if ( r - y == 1 ) y -- ;  $ ~if ( y >= b ) y = b - 1 ;  $ ~cout << y + ( y + 1 ) + ( y + 2 ) << endl ;  $ ~return 0 ;  $ }
void solve ( ) ;  $ int main ( ) {  $ ~long long t ;  $ ~t = 1 ;  $ ~while ( t -- ) solve ( ) ;  $ ~return 0 ;  $ }  $ void solve ( ) {  $ ~long long y , b , r ;  $ ~cin >> y >> b >> r ;  $ ~long long tt = min ( y , min ( b - 1 , r - 2 ) ) ;  $ ~cout << tt * 3 + 3 << '\n' ;  $ }
int main ( ) {  $ ~int y , b , r ;  $ ~while ( cin >> y >> b >> r ) {  $ ~~for ( int i = r ; i >= 3 ; i -- ) {  $ ~~~if ( b >= ( i - 1 ) && y >= ( i - 2 ) ) {  $ ~~~~cout << i + i - 1 + i - 2 << endl ;  $ ~~~~break ;  $ ~~~}  $ ~~}  $ ~}  $ ~return 0 ;  $ }
int main ( ) {  $ ~int a , b , c ;  $ ~cin >> a >> b >> c ;  $ ~a ++ ;  $ ~c -- ;  $ ~cout << min ( min ( a , c ) , b ) * 3 << endl ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~int64_t a , b , c ;  $ ~cin >> a >> b >> c ;  $ ~cout << 3 * min ( a + 1 , min ( b , c - 1 ) ) << endl ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~int y , b , r ;  $ ~cin >> y >> b >> r ;  $ ~if ( y < 1 || y > 100 || b < 2 || b > 100 || r < 3 || r > 100 ) { return 0 ; }  $ ~if ( y + 1 <= b && y + 2 <= r )  $ ~~cout << 3 * y + 3 << endl ;  $ ~else if ( b - 1 <= y && b + 1 <= r )  $ ~~cout << 3 * b << endl ;  $ ~else if ( r - 2 <= y && r - 1 <= b )  $ ~~cout << 3 * r - 3 << endl ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~int x , y , z ;  $ ~cin >> x >> y >> z ;  $ ~if ( x + 1 == y && y + 1 == z ) {  $ ~~cout << x + y + z << endl ;  $ ~} else {  $ ~~while ( 1 ) {  $ ~~~int a = z ;  $ ~~~int b = z - 1 ;  $ ~~~int c = z - 2 ;  $ ~~~if ( ( a <= z && b <= y && c <= x ) && ( c + 1 == b && b + 1 == a ) ) {  $ ~~~~cout << a + b + c << endl ;  $ ~~~~break ;  $ ~~~}  $ ~~~z = z - 1 ;  $ ~~}  $ ~}  $ }
int main ( ) {  $ ~int a , b , c ;  $ ~cin >> a >> b >> c ;  $ ~int ans = 0 ;  $ ~c -= 2 ;  $ ~b -= 1 ;  $ ~cout << min ( a , min ( b , c ) ) * 3 + 3 << endl ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~int t ;  $ ~cin >> t ;  $ ~for ( int i = 0 ; i < t ; ++ i ) {  $ ~~int L , v , l , r ;  $ ~~cin >> L >> v >> l >> r ;  $ ~~cout << L / v - r / v + ( l - 1 ) / v << endl ;  $ ~}  $ ~return 0 ;  $ }
int main ( ) {  $ ~long long int t ;  $ ~cin >> t ;  $ ~while ( t -- ) {  $ ~~long long int n , l , v , r ;  $ ~~cin >> n >> v >> l >> r ;  $ ~~long long int a = ( n / v ) ;  $ ~~long long int b = ( l - 1 ) / v ;  $ ~~long long int c = ( r / v ) ;  $ ~~cout << a + b - c << "\n" ;  $ ~}  $ ~return 0 ;  $ }
const int N = 2e6 + 123 ;  $ const int INF = 1e9 + 123 ;  $ const int MOD = 1e9 + 7 ;  $ const double EPS = 1e-9 ;  $ void solve ( ) {  $ ~int L , v , l , r , x ;  $ ~cin >> L >> v >> l >> r ;  $ ~cout << ( L / v ) - ( ( r / v ) - ( ( l - 1 ) / v ) ) << '\n' ;  $ }  $ int main ( ) {  $ ~int t ;  $ ~cin >> t ;  $ ~while ( t ) {  $ ~~solve ( ) ;  $ ~~-- t ;  $ ~}  $ ~return 0 ;  $ }
int main ( ) {  $ ~int n ;  $ ~cin >> n ;  $ ~int x , y , z , w ;  $ ~for ( int i = 0 ; i < n ; i ++ ) {  $ ~~long long ans ;  $ ~~cin >> x >> y >> z >> w ;  $ ~~if ( z % y == 0 ) z -- ;  $ ~~ans = x / y + z / y - w / y ;  $ ~~if ( y == z == w ) ans -- ;  $ ~~cout << ans << endl ;  $ ~}  $ ~return 0 ;  $ }
int main ( ) {  $ ~int t ;  $ ~cin >> t ;  $ ~while ( t -- ) {  $ ~~int L , v , l , r ;  $ ~~cin >> L >> v >> l >> r ;  $ ~~int a = r / v - l / v ;  $ ~~if ( l % v == 0 ) a ++ ;  $ ~~cout << L / v - a << endl ;  $ ~}  $ }
int main ( ) {  $ ~long long int n , m , p = 0 , q , r , s , t , u , v , w , x , y , z , L , l , i , j ;  $ ~cin >> n ;  $ ~for ( i = 1 ; i <= n ; i ++ ) {  $ ~~cin >> L >> v >> l >> r ;  $ ~~x = L / v - r / v ;  $ ~~y = ( l - 1 ) / v ;  $ ~~cout << x + y << '\n' ;  $ ~}  $ }
int main ( ) {  $ ~int t ;  $ ~cin >> t ;  $ ~while ( t -- ) {  $ ~~long long int d , v , l , r ;  $ ~~cin >> d >> v >> l >> r ;  $ ~~int count = d / v ;  $ ~~r = v * ( r / v ) ;  $ ~~if ( l % v != 0 ) l = v * ( ( l / v ) + 1 ) ;  $ ~~cout << count - ( ( r - l ) / v ) - 1 << endl ;  $ ~}  $ ~return 0 ;  $ }
int main ( ) {  $ ~int t , L , v , l , r , r1 , ans ;  $ ~cin >> t ;  $ ~for ( int i = 0 ; i < t ; i ++ ) {  $ ~~cin >> L >> v >> l >> r ;  $ ~~ans = ( l - 1 ) / v ;  $ ~~r1 = ( ( r / v ) + 1 ) * v ;  $ ~~if ( L >= r1 ) ans += ( L - r1 ) / v + 1 ;  $ ~~cout << ans << endl ;  $ ~}  $ }
int main ( ) {  $ ~int t ;  $ ~cin >> t ;  $ ~while ( t -- ) {  $ ~~long int L , v , l , r ;  $ ~~cin >> L >> v >> l >> r ;  $ ~~long int tot = L / v ;  $ ~~long int unseen = r / v - ( l - 1 ) / v ;  $ ~~cout << tot - unseen << endl ;  $ ~}  $ ~return 0 ;  $ }
int main ( ) {  $ ~int t , L , v , l , r ;  $ ~cin >> t ;  $ ~while ( t -- ) {  $ ~~cin >> L >> v >> l >> r ;  $ ~~cout << L / v - r / v + l / v - ( l % v == 0 ? 1 : 0 ) << "\n" ;  $ ~}  $ ~return 0 ;  $ }
int main ( ) {  $ ~int n , k , v , l , r ;  $ ~cin >> n ;  $ ~for ( int i = 0 ; i < n ; i ++ ) {  $ ~~cin >> k >> v >> l >> r ;  $ ~~cout << k / v + ( l - 1 ) / v - r / v << "\n" ;  $ ~}  $ ~return 0 ;  $ }
int main ( ) {  $ ~long long T , L , v , l , r , ans1 , ans2 ;  $ ~cin >> T ;  $ ~while ( T -- ) {  $ ~~cin >> L >> v >> l >> r ;  $ ~~ans1 = L / v ;  $ ~~ans2 = r / v - l / v ;  $ ~~if ( l % v == 0 ) ans2 += 1 ;  $ ~~cout << ans1 - ans2 << endl ;  $ ~}  $ }
long long int i , j , k , sum = 0 , ans = 0 , n , m ;  $ void fastio ( ) { }  $ void solve ( ) {  $ ~long long int L , v , l , r ;  $ ~cin >> L >> v >> l >> r ;  $ ~n = L / v ;  $ ~m = r / v - ( l - 1 ) / v ;  $ ~cout << n - m << "\n" ;  $ }  $ int main ( ) {  $ ~fastio ( ) ;  $ ~int t = 1 ;  $ ~cin >> t ;  $ ~while ( t -- ) solve ( ) ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~int tc ;  $ ~cin >> tc ;  $ ~while ( tc -- ) {  $ ~~int n , v , l , r ;  $ ~~cin >> n >> v >> l >> r ;  $ ~~int t = n / v ;  $ ~~int t1 = ( ( r / v ) - ( ( l - 1 ) / v ) ) ;  $ ~~cout << t - t1 << endl ;  $ ~}  $ ~return 0 ;  $ }
int main ( ) {  $ ~long long t ;  $ ~cin >> t ;  $ ~while ( t -- ) {  $ ~~long long int L , v , l , r ;  $ ~~cin >> L >> v >> l >> r ;  $ ~~cout << L / v - ( r / v - ( l - 1 ) / v ) << endl ;  $ ~}  $ }
int main ( ) {  $ ~int t , L , v , l , r ;  $ ~cin >> t ;  $ ~for ( int i = 0 ; i < t ; i ++ ) {  $ ~~cin >> L >> v >> l >> r ;  $ ~~cout << L / v - r / v + ( l - 1 ) / v << endl ;  $ ~}  $ }
int main ( ) {  $ ~long t ;  $ ~cin >> t ;  $ ~while ( t -- ) {  $ ~~long x , v , l , r ;  $ ~~cin >> x >> v >> l >> r ;  $ ~~long ans = x / v ;  $ ~~long temp = r / v - ( l - 1 ) / v ;  $ ~~ans -= temp ;  $ ~~cout << ans << "\n" ;  $ ~}  $ }
int main ( ) {  $ ~int t , L , v , l , r ;  $ ~cin >> t ;  $ ~while ( t -- ) {  $ ~~int a = 0 , b = 0 , c = 0 , d = 0 ;  $ ~~cin >> L >> v >> l >> r ;  $ ~~a = ( l - 1 ) / v ;  $ ~~b = r / v ;  $ ~~d = b - a ;  $ ~~c = L / v ;  $ ~~cout << c - d << endl ;  $ ~}  $ ~return 0 ;  $ }
int t ;  $ long long L , v , l , r ;  $ int main ( ) {  $ ~cin >> t ;  $ ~while ( t -- ) {  $ ~~long long ans = 0 ;  $ ~~cin >> L >> v >> l >> r ;  $ ~~ans = ( l - 1 ) / v + L / v - r / v ;  $ ~~cout << ans << endl ;  $ ~}  $ }
const int INF = 0 x3f3f3f3f ;  $ int main ( ) {  $ ~int t , v , l , r , L , cnt = 0 ;  $ ~cin >> t ;  $ ~while ( t -- ) {  $ ~~cin >> L >> v >> l >> r ;  $ ~~int ans = L / v - ( r / v - ( l - 1 ) / v ) ;  $ ~~cout << ans << endl ;  $ ~}  $ ~return 0 ;  $ }
int main ( ) {  $ ~int t ;  $ ~cin >> t ;  $ ~while ( t -- ) {  $ ~~long long int l , v , a , b ;  $ ~~cin >> l >> v >> a >> b ;  $ ~~long long int numOfLight = ( l / v ) - ( ( b / v ) - ( a - 1 ) / v ) ;  $ ~~cout << numOfLight << endl ;  $ ~}  $ }
int main ( ) {  $ ~int t ;  $ ~cin >> t ;  $ ~while ( t -- ) {  $ ~~long long l , v , li , ri , val1 , val2 , val3 ;  $ ~~cin >> l >> v >> li >> ri ;  $ ~~val1 = l / v ;  $ ~~val2 = li / v ;  $ ~~val3 = ri / v ;  $ ~~if ( li % v == 0 ) val3 ++ ;  $ ~~val3 -= val2 ;  $ ~~val1 -= val3 ;  $ ~~cout << val1 << endl ;  $ ~}  $ }
long long mz [ 100005 ] = { } ;  $ long long ts [ 100005 ] = { } ;  $ int main ( ) {  $ ~long long T ;  $ ~cin >> T ;  $ ~while ( T -- ) {  $ ~~long long L , v , l , r , ans = 0 ;  $ ~~cin >> L >> v >> l >> r ;  $ ~~ans += L / v ;  $ ~~if ( r % v != 0 ) r = r - r % v ;  $ ~~if ( l % v != 0 ) l = l + ( v - l % v ) ;  $ ~~ans -= ( ( r - l ) / v + 1 ) ;  $ ~~cout << ans << endl ;  $ ~}  $ }
int main ( ) {  $ ~int t ;  $ ~cin >> t ;  $ ~int L , u , l , r ;  $ ~vector < int > res ;  $ ~for ( int i = 0 ; i < t ; i ++ ) {  $ ~~cin >> L >> u >> l >> r ;  $ ~~int curr = L / u ;  $ ~~curr -= ( r / u - l / u + ( l % u == 0 ? 1 : 0 ) ) ;  $ ~~res . push_back ( curr ) ;  $ ~}  $ ~for ( int i = 0 ; i < t ; i ++ ) { cout << res [ i ] << endl ; }  $ ~return 0 ;  $ }
int main ( ) {  $ ~int n , l1 , v1 , l2 , r , count ;  $ ~cin >> n ;  $ ~for ( int i = 0 ; i < n ; i ++ ) {  $ ~~cin >> l1 >> v1 >> l2 >> r ;  $ ~~cout << ( l1 / v1 - ( r / v1 - ( l2 - 1 ) / v1 ) ) << endl ;  $ ~}  $ }
long long gcd ( long long x , long long y ) {  $ ~if ( y == 0 )  $ ~~return x ;  $ ~else  $ ~~return gcd ( y , x % y ) ;  $ }  $ long long expo ( long long n , long long m , long long p ) {  $ ~long long r = 1 ;  $ ~n = n % p ;  $ ~while ( m > 0 ) {  $ ~~if ( m % 2 ) r = ( r * n ) % p ;  $ ~~n = ( n * n ) % p ;  $ ~~m = m / 2 ;  $ ~}  $ ~return r % p ;  $ }  $ bool isPrime ( long long n ) {  $ ~if ( n <= 1 ) return false ;  $ ~if ( n <= 3 ) return true ;  $ ~if ( n % 2 == 0 || n % 3 == 0 ) return false ;  $ ~for ( long long i = 5 ; i * i <= n ; i = i + 6 )  $ ~~if ( n % i == 0 || n % ( i + 2 ) == 0 ) return false ;  $ ~return true ;  $ }  $ int main ( ) {  $ ~long long t ;  $ ~cin >> t ;  $ ~while ( t -- ) {  $ ~~long long a , b , c , d ;  $ ~~cin >> a >> b >> c >> d ;  $ ~~cout << ( a / b ) - ( ( d / b ) - ( c - 1 ) / b ) << "\n" ;  $ ~}  $ ~return 0 ;  $ }
int main ( ) {  $ ~int t ;  $ ~cin >> t ;  $ ~long long int l , v , x , y ;  $ ~while ( t -- ) {  $ ~~cin >> l >> v >> x >> y ;  $ ~~long long int count = 0 ;  $ ~~long long int total = l / v ;  $ ~~long long int sub1 = y / v ;  $ ~~long long int sub2 = x / v ;  $ ~~count = total - sub1 + sub2 ;  $ ~~if ( x % v == 0 ) count -- ;  $ ~~cout << count << endl ;  $ ~}  $ }
int main ( ) {  $ ~int t ;  $ ~cin >> t ;  $ ~while ( t -- ) {  $ ~~int l , r , v , p ;  $ ~~cin >> p >> v >> l >> r ;  $ ~~int ans = p / v ;  $ ~~ans -= r / v - ( l - 1 ) / v ;  $ ~~cout << ans << endl ;  $ ~}  $ ~return 0 ;  $ }
int main ( ) {  $ ~int n , d ;  $ ~cin >> n ;  $ ~long long a [ n ] [ 4 ] ;  $ ~for ( int i = 0 ; i < n ; i ++ ) {  $ ~~for ( int j = 0 ; j < 4 ; j ++ ) { cin >> a [ i ] [ j ] ; }  $ ~}  $ ~for ( int i = 0 ; i < n ; i ++ ) {  $ ~~d = ( a [ i ] [ 0 ] / a [ i ] [ 1 ] ) + ( ( a [ i ] [ 2 ] - 1 ) / a [ i ] [ 1 ] ) - ( a [ i ] [ 3 ] / a [ i ] [ 1 ] ) ;  $ ~~cout << d << "\n" ;  $ ~}  $ ~return 0 ;  $ }
int main ( ) {  $ ~int T ;  $ ~cin >> T ;  $ ~long int L , v , l , r ;  $ ~while ( T -- ) {  $ ~~cin >> L >> v >> l >> r ;  $ ~~long int nbr_lat = L / v ;  $ ~~long int hidden = r / v - l / v ;  $ ~~if ( l % v == 0 ) hidden ++ ;  $ ~~cout << nbr_lat - hidden << endl ;  $ ~}  $ ~return 0 ;  $ }
int main ( ) {  $ ~long long int t ;  $ ~cin >> t ;  $ ~long long int dest , v , l , r ;  $ ~while ( t -- ) {  $ ~~cin >> dest >> v >> l >> r ;  $ ~~long long int fin = dest / v ;  $ ~~long long int fin1 = r / v ;  $ ~~long long int fin2 = ( l - 1 ) / v ;  $ ~~cout << ( fin - fin1 + fin2 ) << endl ;  $ ~}  $ ~return 0 ;  $ }
int n , i ;  $ int main ( ) {  $ ~cin >> n ;  $ ~int a [ n ] ;  $ ~for ( i = 0 ; i < n ; i ++ ) { cin >> a [ i ] ; }  $ ~sort ( a , a + n ) ;  $ ~if ( n == 1 ) {  $ ~~cout << a [ 0 ] << endl ;  $ ~~return 0 ;  $ ~} else if ( n == 3 ) {  $ ~~cout << a [ 1 ] << endl ;  $ ~~return 0 ;  $ ~} else {  $ ~~cout << a [ 2 ] << endl ;  $ ~}  $ ~return 0 ;  $ }
long long b , c , d , i , n , a [ 10001 ] ;  $ int main ( ) {  $ ~cin >> n ;  $ ~for ( i = 0 ; i < n ; i ++ ) cin >> a [ i ] ;  $ ~sort ( a , a + n ) ;  $ ~cout << a [ n / 2 ] << endl ;  $ ~return 0 ;  $ }
;  $ const double eps = 1e-8 ;  $ const int maxn = 1e6 + 7 ;  $ const double pi = acos ( - 1 ) ;  $ const int inf = 0 x3f3f3f3f ;  $ int n ;  $ int a [ 10 ] ;  $ int main ( ) {  $ ~cin >> n ;  $ ~for ( int i = 1 ; i <= n ; i ++ ) { cin >> a [ i ] ; }  $ ~sort ( a + 1 , a + n + 1 ) ;  $ ~int x = ( a [ n ] - a [ 1 ] ) / 2 ;  $ ~cout << a [ 1 ] + x << endl ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~int n ;  $ ~cin >> n ;  $ ~int sum = 0 ;  $ ~for ( int i = 0 ; i < n ; i ++ ) {  $ ~~int a ;  $ ~~cin >> a ;  $ ~~sum += a ;  $ ~}  $ ~cout << ( sum / n ) << endl ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~unsigned n ;  $ ~cin >> n ;  $ ~vector < int > vect ( n ) ;  $ ~long sum = 0 ;  $ ~for ( int i = 0 ; i < n ; i ++ ) {  $ ~~cin >> vect [ i ] ;  $ ~~sum += vect [ i ] ;  $ ~}  $ ~sort ( vect . begin ( ) , vect . begin ( ) + n ) ;  $ ~long avg = sum / n ;  $ ~cout << avg << endl ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~int n , a [ 5 ] ;  $ ~cin >> n ;  $ ~for ( int i = 0 ; i < n ; i ++ ) cin >> a [ i ] ;  $ ~sort ( a , a + n ) ;  $ ~cout << a [ n / 2 ] << endl ;  $ ~return 0 ;  $ }
long long nu [ 100100 ] ;  $ int main ( ) {  $ ~int n ;  $ ~cin >> n ;  $ ~int sum = 0 ;  $ ~for ( int i = 0 ; i < n ; i ++ ) {  $ ~~int b ;  $ ~~cin >> b ;  $ ~~sum += b ;  $ ~}  $ ~cout << sum / n << endl ;  $ ~return 0 ;  $ }
int a [ 100 ] ;  $ int main ( ) {  $ ~int n ;  $ ~cin >> n ;  $ ~for ( int i = 0 ; i < n ; ++ i ) { cin >> a [ i ] ; }  $ ~sort ( a , a + n ) ;  $ ~cout << a [ n / 2 ] << endl ;  $ ~return 0 ;  $ }
void solve ( ) {  $ ~int n ;  $ ~cin >> n ;  $ ~vector < int > a ;  $ ~for ( int i = 0 ; i < n ; ++ i ) {  $ ~~int buff ;  $ ~~cin >> buff ;  $ ~~a . push_back ( buff ) ;  $ ~}  $ ~sort ( ( a ) . begin ( ) , ( a ) . end ( ) ) ;  $ ~int m = a . size ( ) / 2 ;  $ ~cout << a [ m ] << endl ;  $ }  $ int main ( ) {  $ ~solve ( ) ;  $ ~return 0 ;  $ }
long long n , m , i , a [ 100001 ] , b [ 100001 ] , q , ii ;  $ int main ( ) {  $ ~cin >> n ;  $ ~for ( i = 0 ; i < n ; i ++ ) cin >> a [ i ] ;  $ ~sort ( a , a + n ) ;  $ ~cout << a [ n / 2 ] << endl ;  $ ~return 0 ;  $ }
vector < int > V ;  $ int main ( ) {  $ ~int n ;  $ ~cin >> n ;  $ ~while ( n -- ) {  $ ~~int x ;  $ ~~cin >> x ;  $ ~~V . push_back ( x ) ;  $ ~}  $ ~sort ( V . begin ( ) , V . end ( ) ) ;  $ ~cout << V [ ( V . size ( ) / 2 ) ] << endl ;  $ ~return 0 ;  $ }
int n , i , a [ 10 ] ;  $ int main ( ) {  $ ~cin >> n ;  $ ~for ( i = 1 ; i <= n ; i ++ ) cin >> a [ i ] ;  $ ~sort ( a + 1 , a + n + 1 ) ;  $ ~cout << a [ n / 2 + 1 ] << endl ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~int n ;  $ ~cin >> n ;  $ ~int year [ n ] ;  $ ~for ( int i = 0 ; i < n ; i ++ ) cin >> year [ i ] ;  $ ~sort ( year , year + n ) ;  $ ~cout << year [ n / 2 ] << endl ;  $ }
;  $ const double eps = 1e-8 ;  $ const int maxn = 1e6 + 7 ;  $ const double pi = acos ( - 1 ) ;  $ const int inf = 0 x3f3f3f3f ;  $ int n ;  $ int a [ 10 ] ;  $ int main ( ) {  $ ~cin >> n ;  $ ~for ( int i = 1 ; i <= n ; i ++ ) { cin >> a [ i ] ; }  $ ~sort ( a + 1 , a + n + 1 ) ;  $ ~int x = ( a [ n ] - a [ 1 ] ) / 2 ;  $ ~cout << a [ 1 ] + x << endl ;  $ ~return 0 ;  $ }
const int MOD = 1000000007 ;  $ const long long INF = 1e18 ;  $ long long t , m , n ;  $ vector < int > A ;  $ long long solve ( ) {  $ ~sort ( A . begin ( ) , A . end ( ) ) ;  $ ~int n = A . size ( ) ;  $ ~return A [ n / 2 ] ;  $ }  $ int main ( ) {  $ ~cin >> n ;  $ ~A . resize ( n ) ;  $ ~for ( int i = 0 ; i < n ; i ++ ) cin >> A [ i ] ;  $ ~cout << solve ( ) << endl ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~float n ;  $ ~cin >> n ;  $ ~int tmp , sum = 0 ;  $ ~for ( int i = 0 ; i < n ; ++ i ) {  $ ~~cin >> tmp ;  $ ~~sum += tmp ;  $ ~}  $ ~cout << ceil ( sum / n ) << endl ;  $ }
int main ( ) {  $ ~int n ;  $ ~cin >> n ;  $ ~int sum = 0 ;  $ ~for ( int i = 0 ; i < n ; i ++ ) {  $ ~~int a ;  $ ~~cin >> a ;  $ ~~sum += a ;  $ ~}  $ ~cout << sum / n << endl ;  $ }
int main ( ) {  $ ~int n ;  $ ~cin >> n ;  $ ~vector < int > V ( n ) ;  $ ~for ( int i = 0 ; i < n ; ++ i ) cin >> V [ i ] ;  $ ~sort ( V . begin ( ) , V . end ( ) ) ;  $ ~cout << ( V [ 0 ] + V [ n - 1 ] ) / 2 << "\n" ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~int n , a , sum = 0 ;  $ ~cin >> n ;  $ ~for ( int i = 0 ; i < n ; i ++ ) {  $ ~~cin >> a ;  $ ~~sum += a ;  $ ~}  $ ~cout << sum / n << endl ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~int n ;  $ ~cin >> n ;  $ ~vector < int > a ( n ) ;  $ ~for ( int i = 0 ; i < n ; ++ i ) { cin >> a [ i ] ; }  $ ~sort ( a . begin ( ) , a . end ( ) ) ;  $ ~cout << a [ n / 2 ] << endl ;  $ }
int main ( ) {  $ ~long long int k , l , m , o , n , max ( 0 ) , min ( 0 ) ;  $ ~cin >> o ;  $ ~for ( int i = 0 ; i < o ; i ++ ) {  $ ~~cin >> n ;  $ ~~if ( max < n ) { max = n ; }  $ ~~if ( i == 0 ) { min = n ; }  $ ~~if ( min > n ) { min = n ; }  $ ~}  $ ~k = ( max - min ) / 2 ;  $ ~cout << max - k << endl ;  $ }
const int maxn = 6 ;  $ int A [ maxn ] ;  $ int main ( ) {  $ ~int N ;  $ ~cin >> N ;  $ ~for ( int i = ( 1 ) ; i <= ( N ) ; i += ( 1 ) ) { cin >> A [ i ] ; }  $ ~sort ( A + 1 , A + N + 1 ) ;  $ ~int p = N / 2 ;  $ ~if ( N % 2 == 1 ) { p ++ ; }  $ ~cout << A [ p ] << "\n" ;  $ ~return 0 ;  $ }
int n , i ;  $ int main ( ) {  $ ~cin >> n ;  $ ~int a [ n ] ;  $ ~for ( i = 0 ; i < n ; i ++ ) { cin >> a [ i ] ; }  $ ~sort ( a , a + n ) ;  $ ~cout << a [ n / 2 ] << endl ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~int n ;  $ ~vector < int > a ;  $ ~cin >> n ;  $ ~for ( int i = 0 ; i < n ; i ++ ) {  $ ~~int k ;  $ ~~cin >> k ;  $ ~~a . push_back ( k ) ;  $ ~}  $ ~int min = a [ 0 ] , max = a [ 0 ] ;  $ ~for ( int i = 0 ; i < a . size ( ) ; i ++ ) {  $ ~~if ( a [ i ] > max ) max = a [ i ] ;  $ ~~if ( a [ i ] < min ) min = a [ i ] ;  $ ~}  $ ~cout << min + ( max - min ) / 2 << endl ;  $ ~return 0 ;  $ }
const int inf = 0 x3f3f3f3f ;  $ const int MX = 1e5 + 5 ;  $ int n , a [ 10 ] ;  $ int main ( ) {  $ ~cin >> n ;  $ ~for ( int i = 1 ; i <= n ; i ++ ) cin >> a [ i ] ;  $ ~sort ( a + 1 , a + n + 1 ) ;  $ ~cout << a [ n / 2 + 1 ] << endl ;  $ ~return 0 ;  $ }
const int MAX = 1e10 ;  $ set < int > dict ;  $ int main ( ) {  $ ~int n , j ;  $ ~cin >> n ;  $ ~int arr [ 6 ] = { 0 } ;  $ ~for ( int i = 0 ; i < n ; i ++ ) { cin >> arr [ i ] ; }  $ ~for ( int i = 0 ; i < n ; i ++ ) {  $ ~~if ( arr [ i ] > 0 ) { dict . insert ( arr [ i ] ) ; }  $ ~}  $ ~memset ( arr , 0 , n ) ;  $ ~j = 0 ;  $ ~for ( set < int > : : iterator it = dict . begin ( ) ; it != dict . end ( ) ; ++ it ) arr [ j ++ ] = * it ;  $ ~cout << arr [ n / 2 ] << endl ;  $ ~return 0 ;  $ }
int a [ 10 ] ;  $ int main ( ) {  $ ~int n ;  $ ~cin >> n ;  $ ~for ( int i = 0 ; i < n ; i ++ ) cin >> a [ i ] ;  $ ~sort ( a , a + n ) ;  $ ~cout << a [ n / 2 ] << endl ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~int n ;  $ ~cin >> n ;  $ ~int a [ n + 2 ] ;  $ ~a [ 0 ] = 0 ;  $ ~for ( int i = 1 ; i <= n ; ++ i ) cin >> a [ i ] ;  $ ~sort ( a , a + n + 1 ) ;  $ ~int k = n / 2 ;  $ ~if ( n % 2 ) k ++ ;  $ ~cout << a [ k ] << endl ;  $ }
int y [ 10 ] ;  $ int main ( ) {  $ ~int n ;  $ ~cin >> n ;  $ ~for ( int i = 1 ; i <= n ; i ++ ) cin >> y [ i ] ;  $ ~sort ( y + 1 , y + n + 1 ) ;  $ ~cout << y [ n / 2 + 1 ] << endl ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~int n ;  $ ~cin >> n ;  $ ~int ara [ n ] ;  $ ~for ( int i = 0 ; i < n ; i ++ ) cin >> ara [ i ] ;  $ ~sort ( ara , ara + n ) ;  $ ~if ( n == 1 )  $ ~~cout << ara [ 0 ] ;  $ ~else if ( n == 3 )  $ ~~cout << ara [ 1 ] ;  $ ~else  $ ~~cout << ara [ 2 ] ;  $ ~cout << endl ;  $ ~return 0 ;  $ }
const int M = 2e5 + 5 ;  $ const int inf = 1e9 + 5 ;  $ int main ( ) {  $ ~int n ;  $ ~vector < int > v ;  $ ~cin >> n ;  $ ~for ( int i = 0 ; i < n ; i ++ ) {  $ ~~int t ;  $ ~~cin >> t ;  $ ~~v . push_back ( t ) ;  $ ~}  $ ~sort ( v . begin ( ) , v . end ( ) ) ;  $ ~cout << v [ n / 2 ] << endl ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~int n , y [ 10 ] ;  $ ~cin >> n ;  $ ~for ( int i = 0 ; i < n ; i ++ ) cin >> y [ i ] ;  $ ~sort ( y , y + n ) ;  $ ~cout << y [ n / 2 ] << endl ;  $ }
int main ( ) {  $ ~size_t n ;  $ ~cin >> n ;  $ ~vector < size_t > year ( n ) ;  $ ~for ( size_t i = 0 ; i < n ; ++ i ) { cin >> year [ i ] ; }  $ ~sort ( year . begin ( ) , year . end ( ) ) ;  $ ~cout << year [ ( n - 1 ) / 2 ] << endl ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~int n ;  $ ~cin >> n ;  $ ~int arr [ 10 ] ;  $ ~for ( int i = 1 ; i <= n ; i ++ ) cin >> arr [ i ] ;  $ ~sort ( arr + 1 , arr + n + 1 ) ;  $ ~if ( n == 1 )  $ ~~cout << arr [ 1 ] << endl ;  $ ~else if ( n == 3 )  $ ~~cout << arr [ 2 ] << endl ;  $ ~else  $ ~~cout << arr [ 3 ] << endl ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~long long unsigned n , k ;  $ ~cin >> n >> k ;  $ ~long long unsigned mid = n / 2 ;  $ ~if ( n % 2 == 1 ) mid ++ ;  $ ~if ( k <= mid )  $ ~~cout << ( k * 2 ) - 1 << endl ;  $ ~else  $ ~~cout << ( ( k - ( mid + 1 ) ) * 2 ) + 2 << endl ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~long long n , k , p , o ;  $ ~cin >> n >> k ;  $ ~if ( n % 2 == 0 ) {  $ ~~p = n / 2 ;  $ ~} else {  $ ~~p = n / 2 + 1 ;  $ ~}  $ ~if ( k <= p ) {  $ ~~o = ( k * 2 ) - 1 ;  $ ~} else {  $ ~~o = ( k - p ) * 2 ;  $ ~}  $ ~cout << o << endl ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~long long int n , k , half ;  $ ~cin >> n >> k ;  $ ~if ( n % 2 == 0 ) {  $ ~~half = n / 2 ;  $ ~} else if ( n % 2 == 1 ) {  $ ~~half = ( n + 1 ) / 2 ;  $ ~}  $ ~if ( k <= half ) {  $ ~~cout << 2 * k - 1 << endl ;  $ ~} else if ( k > half ) {  $ ~~cout << ( k - half ) * 2 << endl ;  $ ~}  $ ~return 0 ;  $ }
int main ( ) {  $ ~long long n , k , c , l , d ;  $ ~cin >> n >> k ;  $ ~if ( n % 2 == 0 ) {  $ ~~l = n / 2 ;  $ ~} else {  $ ~~l = n / 2 + 1 ;  $ ~}  $ ~if ( k <= l ) {  $ ~~cout << 2 * k - 1 << endl ;  $ ~} else {  $ ~~if ( n % 2 != 0 ) {  $ ~~~cout << 2 * k - n - 1 << endl ;  $ ~~} else {  $ ~~~cout << 2 * k - n << endl ;  $ ~~}  $ ~}  $ }
int main ( ) {  $ ~long long n , k ;  $ ~cin >> n >> k ;  $ ~if ( n % 2 == 0 ) {  $ ~~if ( k > n / 2 ) {  $ ~~~cout << ( ( k ) - ( ( n / 2 ) ) ) * 2 << endl ;  $ ~~} else {  $ ~~~cout << k * 2 - 1 << endl ;  $ ~~}  $ ~} else {  $ ~~if ( k > ( n ) / 2 + 1 ) {  $ ~~~cout << ( ( k ) - ( ( n / 2 + 1 ) ) ) * 2 << endl ;  $ ~~} else {  $ ~~~cout << k * 2 - 1 << endl ;  $ ~~}  $ ~}  $ }
int main ( ) {  $ ~long long int n , k ;  $ ~cin >> n >> k ;  $ ~if ( k <= ( n + 1 ) / 2 )  $ ~~cout << 2 * k - 1 << endl ;  $ ~else  $ ~~cout << 2 * ( k - ( n + 1 ) / 2 ) << endl ;  $ }
int main ( ) {  $ ~long long int number ;  $ ~long long int position ;  $ ~cin >> number ;  $ ~cin >> position ;  $ ~long long int x ;  $ ~if ( number % 2 == 0 ) {  $ ~~if ( position <= number / 2 ) {  $ ~~~x = ( position * 2 ) - 1 ;  $ ~~} else if ( position > number / 2 ) {  $ ~~~x = ( position - ( number / 2 ) ) * 2 ;  $ ~~}  $ ~} else if ( number % 2 == 1 ) {  $ ~~if ( position <= ( number + 1 ) / 2 ) {  $ ~~~x = ( position * 2 ) - 1 ;  $ ~~} else if ( position > ( number + 1 ) / 2 ) {  $ ~~~x = ( position - ( ( number + 1 ) / 2 ) ) * 2 ;  $ ~~}  $ ~}  $ ~cout << x << endl ;  $ }
int main ( ) {  $ ~long long int n = 0 , k = 0 ;  $ ~while ( cin >> n >> k ) {  $ ~~long long int a = 0 ;  $ ~~if ( n % 2 ) {  $ ~~~if ( k > ( n + 1 ) / 2 )  $ ~~~~a = ( k - ( n + 1 ) / 2 ) * 2 ;  $ ~~~else  $ ~~~~a = 2 * k - 1 ;  $ ~~} else {  $ ~~~if ( k > n / 2 )  $ ~~~~a = ( k - n / 2 ) * 2 ;  $ ~~~else  $ ~~~~a = 2 * k - 1 ;  $ ~~}  $ ~~cout << a << endl ;  $ ~}  $ }
int main ( ) {  $ ~long long int n , k , p , o ;  $ ~cin >> n >> k ;  $ ~if ( n % 2 == 0 ) {  $ ~~p = n / 2 ;  $ ~} else {  $ ~~p = ( n / 2 ) + 1 ;  $ ~}  $ ~if ( k <= p ) {  $ ~~o = ( 2 * k ) - 1 ;  $ ~} else {  $ ~~o = ( k - p ) * 2 ;  $ ~}  $ ~cout << o << endl ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~long long n , k ;  $ ~cin >> n >> k ;  $ ~if ( n % 2 != 0 ) {  $ ~~if ( k <= n / 2 + 1 ) {  $ ~~~cout << 2 * k - 1 << endl ;  $ ~~} else {  $ ~~~cout << ( k - n / 2 - 1 ) * 2 << endl ;  $ ~~}  $ ~} else {  $ ~~if ( k <= n / 2 ) {  $ ~~~cout << 2 * k - 1 << endl ;  $ ~~} else {  $ ~~~cout << ( k - n / 2 ) * 2 << endl ;  $ ~~}  $ ~}  $ ~return 0 ;  $ }
int main ( ) {  $ ~long long n , k ;  $ ~cin >> n >> k ;  $ ~if ( k <= ( n + 1 ) / 2 ) {  $ ~~cout << k * 2 - 1 << endl ;  $ ~} else {  $ ~~cout << ( k - ( n + 1 ) / 2 ) * 2 << endl ;  $ ~}  $ ~return 0 ;  $ }
int main ( ) {  $ ~long long int n , k , mid ;  $ ~cin >> n >> k ;  $ ~mid = ceil ( n / 2.0 ) ;  $ ~if ( k <= mid ) {  $ ~~cout << ( k * 2 ) - 1 << endl ;  $ ~} else {  $ ~~cout << ( k - mid ) * 2 << endl ;  $ ~}  $ }
int main ( ) {  $ ~unsigned long long a , b , c ;  $ ~cin >> a >> b ;  $ ~if ( a % 2 == 0 )  $ ~~c = a / 2 ;  $ ~else  $ ~~c = a / 2 + 1 ;  $ ~if ( b > c )  $ ~~b = ( b - c ) * 2 ;  $ ~else if ( b <= c )  $ ~~b = 2 * b - 1 ;  $ ~cout << b << endl ;  $ }
int main ( ) {  $ ~long long int a , b , sum = 0 ;  $ ~cin >> a >> b ;  $ ~sum = ( a + 1 ) / 2 ;  $ ~if ( sum >= b )  $ ~~cout << ( b * 2 ) - 1 << endl ;  $ ~else  $ ~~cout << ( b - sum ) * 2 << endl ;  $ ~return 0 ;  $ }
long long n , k ;  $ int main ( ) {  $ ~cin >> n >> k ;  $ ~if ( k <= ( n + 1 ) / 2 ) {  $ ~~cout << k * 2 - 1 << endl ;  $ ~} else {  $ ~~cout << ( k - ( n + 1 ) / 2 ) * 2 << endl ;  $ ~}  $ ~return 0 ;  $ }
int main ( ) {  $ ~long long n , k ;  $ ~long long j ;  $ ~cin >> n >> k ;  $ ~if ( k <= ( n + 1 ) / 2 ) {  $ ~~cout << 2 * k - 1 << endl ;  $ ~} else {  $ ~~j = ( k - ( n + 1 ) / 2 ) * 2 ;  $ ~~cout << j << endl ;  $ ~}  $ }
int main ( ) {  $ ~long long n , k , i , num ;  $ ~cin >> n >> k ;  $ ~i = ( n + 1 ) / 2 ;  $ ~if ( k <= i ) {  $ ~~num = 2 * k - 1 ;  $ ~} else {  $ ~~k = k - i ;  $ ~~num = 2 * k ;  $ ~}  $ ~cout << num << endl ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~long long n , k ;  $ ~cin >> n >> k ;  $ ~if ( k <= ( ( n + 1 ) / 2 ) )  $ ~~cout << ( ( k * 2 ) - 1 ) << endl ;  $ ~else  $ ~~cout << ( k - ( n + 1 ) / 2 ) * 2 << endl ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~long long n , k ;  $ ~cin >> n >> k ;  $ ~if ( n % 2 == 0 ) {  $ ~~if ( k <= n / 2 )  $ ~~~cout << 2 * k - 1 << endl ;  $ ~~else  $ ~~~cout << 2 * ( k - n / 2 ) << endl ;  $ ~} else {  $ ~~if ( k <= ( n + 1 ) / 2 )  $ ~~~cout << 2 * k - 1 << endl ;  $ ~~else  $ ~~~cout << 2 * ( k - ( ( n + 1 ) / 2 ) ) << endl ;  $ ~}  $ }
int main ( ) {  $ ~long long int n , k ;  $ ~cin >> n >> k ;  $ ~if ( k > n / 2 + n % 2 ) {  $ ~~cout << ( k - n / 2 - n % 2 ) * 2 << endl ;  $ ~} else {  $ ~~cout << k * 2 - 1 << endl ;  $ ~}  $ ~return 0 ;  $ }
int main ( ) {  $ ~long long n , k ;  $ ~cin >> n >> k ;  $ ~if ( k <= ( n + 1 ) / 2 ) {  $ ~~cout << k * 2 - 1 << endl ;  $ ~} else {  $ ~~cout << ( k - ( n + 1 ) / 2 ) * 2 << endl ;  $ ~}  $ ~return 0 ;  $ }
int main ( ) {  $ ~long long int n , k ;  $ ~cin >> n >> k ;  $ ~if ( n % 2 == 0 ) {  $ ~~if ( k <= n / 2 )  $ ~~~cout << 2 * k - 1 << endl ;  $ ~~else  $ ~~~cout << 2 * ( k - n / 2 ) << endl ;  $ ~} else {  $ ~~if ( k <= ( n + 1 ) / 2 )  $ ~~~cout << 2 * k - 1 << endl ;  $ ~~else  $ ~~~cout << 2 * ( k - ( n + 1 ) / 2 ) << endl ;  $ ~}  $ }
int main ( ) {  $ ~long long n ;  $ ~long long k ;  $ ~while ( cin >> n >> k ) {  $ ~~if ( n % 2 != 0 ) {  $ ~~~if ( k <= ( n / 2 + 1 ) )  $ ~~~~cout << 2 * k - 1 << endl ;  $ ~~~else  $ ~~~~cout << 2 * k - n - 1 << endl ;  $ ~~} else {  $ ~~~if ( k <= n / 2 )  $ ~~~~cout << 2 * k - 1 << endl ;  $ ~~~else  $ ~~~~cout << 2 * k - n << endl ;  $ ~~}  $ ~}  $ }
int main ( ) {  $ ~long long n , k ;  $ ~while ( cin >> n >> k ) {  $ ~~if ( k <= ( ( n + 1 ) >> 1 ) ) {  $ ~~~k = ( k << 1 ) - 1 ;  $ ~~} else {  $ ~~~k -= ( n + 1 ) >> 1 ;  $ ~~~k << = 1 ;  $ ~~}  $ ~~cout << k << endl ;  $ ~}  $ ~return 0 ;  $ }
int main ( ) {  $ ~long long n , k ;  $ ~cin >> n >> k ;  $ ~if ( n % 2 ) {  $ ~~if ( k > ( ( n - 1 ) / 2 ) + 1 ) {  $ ~~~k = k - ( ( n - 1 ) / 2 ) - 1 ;  $ ~~~k = 2 * k ;  $ ~~} else {  $ ~~~k = 2 * k - 1 ;  $ ~~}  $ ~} else {  $ ~~if ( k > n / 2 ) {  $ ~~~k = k - ( n / 2 ) ;  $ ~~~k = 2 * k ;  $ ~~} else {  $ ~~~k = 2 * k - 1 ;  $ ~~}  $ ~}  $ ~cout << k << endl ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~long long n , k ;  $ ~cin >> n >> k ;  $ ~n = ( n + 1 ) / 2 ;  $ ~cout << ( k > n ? 2 * ( k - n ) : 2 * k - 1 ) << endl ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~long long n , k ;  $ ~cin >> n >> k ;  $ ~if ( k <= ( n + 1 ) / 2 ) {  $ ~~cout << k * 2 - 1 << endl ;  $ ~} else {  $ ~~cout << ( k - ( n + 1 ) / 2 ) * 2 << endl ;  $ ~}  $ ~return 0 ;  $ }
int main ( ) {  $ ~long long n , k ;  $ ~cin >> n >> k ;  $ ~long long part = 0 ;  $ ~if ( n % 2 == 0 )  $ ~~part = n / 2 ;  $ ~else  $ ~~part = ( n / 2 ) + 1 ;  $ ~if ( k <= part ) {  $ ~~cout << ( k * 2 ) - 1 << endl ;  $ ~} else {  $ ~~cout << ( k - part ) * 2 << endl ;  $ ~}  $ }
int main ( ) {  $ ~long long n , k , odd , ans ;  $ ~cin >> n >> k ;  $ ~if ( n % 2 == 0 ) {  $ ~~odd = n / 2 ;  $ ~} else {  $ ~~odd = ( n / 2 ) + 1 ;  $ ~}  $ ~if ( k <= odd ) {  $ ~~ans = ( k * 2 ) - 1 ;  $ ~} else {  $ ~~ans = ( k - odd ) * 2 ;  $ ~}  $ ~cout << "" << ans << endl ;  $ }
int main ( ) {  $ ~unsigned int n ;  $ ~int k ;  $ ~cin >> n ;  $ ~for ( int i = 1 ; i <= 4 ; i ++ ) {  $ ~~if ( n % i == 1 || n % i == 2 ) k = 1 ;  $ ~~if ( n % i == 0 || n % i == 3 ) k = 0 ;  $ ~}  $ ~cout << k << endl ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~int n ;  $ ~cin >> n ;  $ ~if ( n % 2 == 0 ) {  $ ~~if ( ( n / 2 ) % 2 == 0 ) {  $ ~~~cout << 0 << endl ;  $ ~~} else {  $ ~~~cout << 1 << endl ;  $ ~~}  $ ~} else {  $ ~~n = n - 1 ;  $ ~~if ( ( n / 2 ) % 2 == 0 ) {  $ ~~~cout << 1 << endl ;  $ ~~} else {  $ ~~~cout << 0 << endl ;  $ ~~}  $ ~}  $ ~return 0 ;  $ }
const int maxn = 2e5 + 5 ;  $ long long a [ maxn ] ;  $ long long b [ maxn ] ;  $ int main ( ) {  $ ~int n ;  $ ~cin >> n ;  $ ~cout << ( ( n + 1 ) / 2 ) % 2 << endl ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~int m ;  $ ~cin >> m ;  $ ~cout << ( m & 1 ? m + 1 >> 1 & 1 : m >> 1 & 1 ) << '\n' ;  $ }
int main ( ) {  $ ~long long int n ;  $ ~cin >> n ;  $ ~if ( ( n * ( n + 1 ) / 2 ) % 2 == 0 ) {  $ ~~cout << 0 << endl ;  $ ~} else {  $ ~~cout << 1 << endl ;  $ ~}  $ ~return 0 ;  $ }
const long long N = 1e8 + 3 ;  $ const long long MN = 1e9 + 7 ;  $ const long long MX = - 1e9 - 7 ;  $ long long n , l , a , t , l1 , cnt , c , q ;  $ string s1 , s ;  $ pair < long long , long long > pr [ 1001 ] ;  $ vector < long long > v ;  $ map < char , long long > mp ;  $ set < long long > st ;  $ set < long long > : : iterator it ;  $ int main ( ) {  $ ~cin >> n ;  $ ~n %= 4 ;  $ ~if ( n == 0 or n == 3 )  $ ~~cout << 0 ;  $ ~else if ( n == 1 or n == 2 )  $ ~~cout << 1 ;  $ ~cout << "\n" ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~int n ;  $ ~cin >> n ;  $ ~int y = ( n * ( n + 1 ) ) / 2 ;  $ ~if ( y % 2 ) {  $ ~~cout << "1" << endl ;  $ ~} else {  $ ~~cout << "0" << endl ;  $ ~}  $ ~return 0 ;  $ }
const int N = 5005 ;  $ int main ( ) {  $ ~int n ;  $ ~cin >> n ;  $ ~if ( n % 4 == 0 || n % 4 == 3 )  $ ~~cout << 0 << endl ;  $ ~else  $ ~~cout << 1 << endl ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~long long n , sum = 0 ;  $ ~cin >> n ;  $ ~sum = n * ( n + 1 ) / 2 ;  $ ~if ( sum % 2 == 0 ) {  $ ~~cout << 0 << endl ;  $ ~} else {  $ ~~cout << 1 << endl ;  $ ~}  $ }
int main ( ) {  $ ~long long n ;  $ ~cin >> n ;  $ ~if ( n % 4 == 0 || n % 4 == 3 )  $ ~~cout << "0" << endl ;  $ ~else  $ ~~cout << "1" << endl ;  $ ~return 0 ;  $ }
long long power ( long long x , long long y , long long m ) {  $ ~if ( y == 1 ) return x % m ;  $ ~if ( y == 0 ) return 1 ;  $ ~if ( y & 1 ) return ( x * power ( ( x * x ) % m , ( y - 1 ) / 2 , m ) ) % m ;  $ ~return power ( ( x * x ) % m , y / 2 , m ) % m ;  $ }  $ long long modinv ( long long x , long long mod = 1000000007 ) {  $ ~return power ( x , mod - 2 , mod ) ;  $ }  $ void solve ( ) {  $ ~long long n ;  $ ~cin >> n ;  $ ~if ( ( n * ( n + 1 ) / 2 ) & 1 )  $ ~~cout << 1 << endl ;  $ ~else  $ ~~cout << 0 << endl ;  $ }  $ int main ( ) {  $ ~solve ( ) ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~int n , x , y ;  $ ~cin >> n ;  $ ~n = ( n * ( n + 1 ) ) / 2 ;  $ ~x = n / 2 ;  $ ~y = n - x ;  $ ~cout << abs ( x - y ) << endl ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~long long n ;  $ ~long long ans = 0 ;  $ ~cin >> n ;  $ ~ans = n * ( 1 + n ) / 2 ;  $ ~if ( ans % 2 == 0 )  $ ~~cout << 0 << endl ;  $ ~else  $ ~~cout << 1 << endl ;  $ ~return 0 ;  $ }
long long int T , n ;  $ int a [ 100010 + 5 ] ;  $ long long int M = 1e9 + 7 ;  $ int main ( ) {  $ ~cin >> n ;  $ ~n %= 4 ;  $ ~if ( n == 0 || n == 3 )  $ ~~cout << "0" << endl ;  $ ~else  $ ~~cout << "1" << endl ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~int n ;  $ ~cin >> n ;  $ ~int tmp = n % 4 ;  $ ~if ( tmp == 1 || tmp == 2 )  $ ~~cout << 1 << endl ;  $ ~else  $ ~~cout << 0 << endl ;  $ }
int main ( ) {  $ ~int n ;  $ ~cin >> n ;  $ ~if ( n % 4 == 0 )  $ ~~cout << 0 << endl ;  $ ~else if ( n % 4 == 1 )  $ ~~cout << 1 << endl ;  $ ~else if ( n % 4 == 2 )  $ ~~cout << 1 << endl ;  $ ~else  $ ~~cout << 0 << endl ;  $ }
int main ( ) {  $ ~long long int n ;  $ ~cin >> n ;  $ ~if ( n == 3 || n % 4 == 0 || n % 4 == 3 )  $ ~~cout << "0" << endl ;  $ ~else  $ ~~cout << "1" << endl ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~long long n , s ;  $ ~cin >> n ;  $ ~s = ( ( n + 1 ) * n ) / 2 ;  $ ~if ( s % 2 == 0 ) {  $ ~~cout << 0 << endl ;  $ ~} else {  $ ~~cout << 1 << endl ;  $ ~}  $ ~return 0 ;  $ }
int main ( ) {  $ ~int n ;  $ ~cin >> n ;  $ ~if ( n % 4 == 3 || n % 4 == 0 )  $ ~~cout << 0 ;  $ ~else  $ ~~cout << 1 ;  $ ~cout << '\n' ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~int n ;  $ ~cin >> n ;  $ ~cout << ( ( n + 1 ) / 2 ) % 2 << endl ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~int n ;  $ ~cin >> n ;  $ ~cout << ( ( n + 1 ) / 2 ) % 2 << endl ;  $ ~return 0 ;  $ }
int n ;  $ long long a , b ;  $ int main ( ) {  $ ~cin >> n ;  $ ~if ( n % 2 == 0 && n % 4 == 0 )  $ ~~cout << 0 << '\n' ;  $ ~else if ( n % 2 == 0 && n % 4 != 0 )  $ ~~cout << 1 << '\n' ;  $ ~else if ( n % 2 != 0 && ( n - 1 ) % 4 == 0 )  $ ~~cout << 1 << '\n' ;  $ ~else if ( n % 2 != 0 && ( n - 1 ) % 4 != 0 )  $ ~~cout << 0 << '\n' ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~long long n ;  $ ~cin >> n ;  $ ~long long sum = n * ( n + 1 ) ;  $ ~sum = sum / 2 ;  $ ~long long p = sum / n ;  $ ~cout << p % 2 << endl ;  $ }
int main ( ) {  $ ~long long n ;  $ ~cin >> n ;  $ ~cout << n * ( n + 1 ) / 2 % 2 << endl ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~long long int n ;  $ ~cin >> n ;  $ ~if ( n % 2 == 0 ) {  $ ~~if ( n % 4 == 0 )  $ ~~~cout << 0 << endl ;  $ ~~else  $ ~~~cout << 1 << endl ;  $ ~} else {  $ ~~if ( ( n - 1 ) % 4 == 0 )  $ ~~~cout << 1 << endl ;  $ ~~else  $ ~~~cout << 0 << endl ;  $ ~}  $ ~return 0 ;  $ }
int A [ 10000 ] ;  $ int B [ 10000 ] ;  $ int main ( ) {  $ ~int n , ans = 0 ;  $ ~cin >> n ;  $ ~if ( n % 4 == 1 || n % 4 == 2 )  $ ~~cout << '1' << endl ;  $ ~else  $ ~~cout << '0' << endl ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~int n ;  $ ~cin >> n ;  $ ~if ( n % 4 == 0 ) {  $ ~~cout << 0 ;  $ ~} else if ( n % 4 == 1 ) {  $ ~~cout << 1 ;  $ ~} else if ( n % 4 == 2 ) {  $ ~~cout << 1 ;  $ ~} else {  $ ~~cout << 0 ;  $ ~}  $ ~cout << "\n" ;  $ ~return 0 ;  $ }
const int INF = 0 x3f3f3f3f ;  $ const int MAXN = 2e5 + 5 ;  $ long long n ;  $ int main ( ) {  $ ~cin >> n ;  $ ~cout << n * ( n + 1 ) / 2 % 2 << endl ;  $ ~return 0 ;  $ }
long long i , n , sum ;  $ int main ( ) {  $ ~cin >> n ;  $ ~if ( n % 2 == 0 ) sum = n / 2 * ( n + 1 ) ;  $ ~if ( n % 2 != 0 ) sum = n / 2 * ( n + 1 ) + ( n / 2 + 1 ) ;  $ ~if ( sum % 2 != 0 )  $ ~~cout << 1 << endl ;  $ ~else  $ ~~cout << 0 << endl ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~long long n ;  $ ~cin >> n ;  $ ~if ( n % 2 == 0 ) {  $ ~~long long m = n / 2 ;  $ ~~if ( m % 2 == 0 ) {  $ ~~~cout << "0" << endl ;  $ ~~} else {  $ ~~~cout << "1" << endl ;  $ ~~}  $ ~} else {  $ ~~long long m = ( n - 1 ) / 2 ;  $ ~~if ( m % 2 == 0 ) {  $ ~~~cout << "1" << endl ;  $ ~~} else {  $ ~~~cout << "0" << endl ;  $ ~~}  $ ~}  $ ~return 0 ;  $ }
long long arr [ 200001 ] ;  $ int main ( ) {  $ ~long long n , i , sum = 0 ;  $ ~cin >> n ;  $ ~sum = ( n * ( n + 1 ) ) / 2 ;  $ ~if ( sum % 2 == 0 ) {  $ ~~cout << 0 << endl ;  $ ~} else if ( sum % 2 != 0 ) {  $ ~~cout << 1 << endl ;  $ ~}  $ }
long long int x ;  $ int main ( ) {  $ ~cin >> x ;  $ ~cout << ( ( x * ( x + 1 ) / 2 ) % 2 ) << endl ;  $ ~return 0 ;  $ }
const int maxN = 2012345678 ;  $ int n ;  $ int main ( ) {  $ ~cin >> n ;  $ ~long long int sum = ( n * ( n + 1 ) ) / 2 ;  $ ~if ( sum % 2 == 0 )  $ ~~cout << 0 << endl ;  $ ~else  $ ~~cout << 1 << endl ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~int a ;  $ ~cin >> a ;  $ ~cout << ( ( a + 1 ) / 2 ) % 2 << "\n" ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~int n ;  $ ~cin >> n ;  $ ~n %= 4 ;  $ ~if ( n == 0 || n == 3 ) {  $ ~~cout << 0 << endl ;  $ ~} else {  $ ~~cout << 1 << endl ;  $ ~}  $ ~return 0 ;  $ }
int main ( ) {  $ ~int n , m ;  $ ~cin >> n >> m ;  $ ~int mn = ( ( ( n ) < ( m ) ) ? ( n ) : ( m ) ) ;  $ ~int fact = 1 ;  $ ~for ( int i = 2 ; i <= mn ; i ++ ) fact *= i ;  $ ~cout << fact << endl ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~int a , b ;  $ ~cin >> a >> b ;  $ ~int ans = 1 ;  $ ~for ( int i = 1 ; i <= min ( a , b ) ; i ++ ) { ans *= i ; }  $ ~cout << ans << endl ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~int a , b , ans = 1 ;  $ ~cin >> a >> b ;  $ ~if ( a > b ) a = b ;  $ ~for ( int i = 1 ; i <= a ; i ++ ) ans = ans * i ;  $ ~cout << ans << endl ;  $ }
long long int fact ( int n ) {  $ ~if ( n <= 0 )  $ ~~return 1 ;  $ ~else  $ ~~return n * fact ( n - 1 ) ;  $ }  $ int main ( ) {  $ ~long long int a , b ;  $ ~cin >> a >> b ;  $ ~long long int x = min ( a , b ) ;  $ ~cout << fact ( x ) << endl ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~long long a , b , c ;  $ ~cin >> a >> b ;  $ ~if ( a > b ) {  $ ~~c = a ;  $ ~~a = b ;  $ ~~b = c ;  $ ~}  $ ~c = 1 ;  $ ~while ( a ) {  $ ~~c *= a ;  $ ~~a -- ;  $ ~}  $ ~cout << c << endl ;  $ }
int main ( ) {  $ ~int a , b ;  $ ~long long sum = 1 ;  $ ~cin >> a >> b ;  $ ~int min = a < b ? a : b ;  $ ~for ( int i = 2 ; i <= min ; i ++ ) sum *= i ;  $ ~cout << sum << endl ;  $ }
int dx [ 4 ] = { 0 , 0 , - 1 , 1 } ;  $ int dy [ 4 ] = { 1 , - 1 , 0 , 0 } ;  $ int main ( ) {  $ ~int x , y ;  $ ~cin >> x >> y ;  $ ~int g = min ( x , y ) ;  $ ~int ans = 1 ;  $ ~for ( int i = 1 ; i < g + 1 ; i += 1 ) ans = ans * i ;  $ ~cout << ans << '\n' ;  $ }
long factorial ( long A ) {  $ ~long ans = 1 ;  $ ~for ( int i = 1 ; i <= A ; i ++ ) ans *= i ;  $ ~return ans ;  $ }  $ int main ( ) {  $ ~long A , B ;  $ ~cin >> A >> B ;  $ ~cout << factorial ( min ( A , B ) ) << "\n" ;  $ }
long long fact ( long long n ) {  $ ~if ( ( n == 0 ) || ( n == 1 ) ) {  $ ~~return 1 ;  $ ~} else  $ ~~return n * fact ( n - 1 ) ;  $ }  $ long long gcd ( long long a , long long b ) {  $ ~if ( b == 0 )  $ ~~return a ;  $ ~else  $ ~~return gcd ( b , a % b ) ;  $ }  $ int main ( ) {  $ ~long long a , b ;  $ ~cin >> a >> b ;  $ ~long long c = min ( a , b ) ;  $ ~cout << fact ( c ) << endl ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~long long t , i , j , n , m , k , ans , ck , cnt = 0 , sum = 0 , c = 0 ;  $ ~string s , s1 , s2 , tmp ;  $ ~cin >> n >> m ;  $ ~ck = min ( n , m ) ;  $ ~long long fact = 1 ;  $ ~for ( i = 1 ; i <= ck ; i ++ ) { fact *= i ; }  $ ~cout << fact << endl ;  $ ~return 0 ;  $ }
int factorial ( int a ) {  $ ~if ( a == 1 ) return 1 ;  $ ~return a * factorial ( a - 1 ) ;  $ }  $ int main ( ) {  $ ~int a , b ;  $ ~cin >> a >> b ;  $ ~if ( a > b ) {  $ ~~cout << factorial ( b ) << endl ;  $ ~} else {  $ ~~cout << factorial ( a ) << endl ;  $ ~}  $ ~return 0 ;  $ }
int main ( ) {  $ ~long long int a , b , x , i , k = 1 ;  $ ~cin >> a >> b ;  $ ~x = min ( a , b ) ;  $ ~for ( i = 1 ; i <= x ; i ++ ) { k = k * i ; }  $ ~cout << k << endl ;  $ ~return 0 ;  $ }
vector < int > divisor ( 1000000 + 1 , 0 ) ;  $ int bigmod ( long long a , long long b , long long c ) {  $ ~long long x ;  $ ~if ( b == 0 ) return 1 % c ;  $ ~x = bigmod ( a , b / 2 , c ) ;  $ ~x = ( x * x ) % c ;  $ ~if ( b & 1 ) x = ( x * a ) % c ;  $ ~return x ;  $ }  $ ulong long factorial ( long long n ) {  $ ~ulong long fact = 1 ;  $ ~for ( int i = 2 ; i <= n ; i ++ ) { fact *= i ; }  $ ~return fact ;  $ }  $ int main ( ) {  $ ~int x , y ;  $ ~while ( cin >> x >> y ) {  $ ~~int mn = min ( x , y ) ;  $ ~~ulong long A = factorial ( mn ) ;  $ ~~cout << ( __gcd ( A , A ) ) << endl ;  $ ~}  $ ~return 0 ;  $ }
long long fac ( long long n ) {  $ ~long long ans = 1 ;  $ ~for ( long long i = 1 ; i <= n ; i ++ ) ans *= i ;  $ ~return ans ;  $ }  $ int main ( ) {  $ ~long long a , b ;  $ ~cin >> a >> b ;  $ ~cout << fac ( min ( a , b ) ) << endl ;  $ ~return 0 ;  $ }
long long gcd ( long long a , long long b ) {  $ ~if ( ! b ) return a ;  $ ~return gcd ( b , ( a % b ) ) ;  $ }  $ int main ( ) {  $ ~long long n , m , a = 1 , b = 1 ;  $ ~cin >> n >> m ;  $ ~if ( n > m ) swap ( n , m ) ;  $ ~for ( long long i = 1 ; i <= n ; i ++ ) a *= i ;  $ ~for ( long long i = 1 ; i <= ( n + 1 ) ; i ++ ) b *= i ;  $ ~cout << gcd ( a , b ) << "\n" ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~int a , b , i , ans = 1 , x ;  $ ~cin >> a >> b ;  $ ~x = min ( a , b ) ;  $ ~for ( i = 1 ; i <= x ; i ++ ) { ans = ans * i ; }  $ ~cout << ans << endl ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~int a , b ;  $ ~long long sum = 1 ;  $ ~while ( cin >> a >> b ) {  $ ~~int cnt = min ( a , b ) ;  $ ~~for ( int i = 1 ; i <= cnt ; i ++ ) sum *= i ;  $ ~~cout << sum << endl ;  $ ~}  $ ~return 0 ;  $ }
int main ( ) {  $ ~int a , b ;  $ ~cin >> a >> b ;  $ ~int mn = min ( a , b ) , ans = 1 ;  $ ~for ( int i = 2 ; i <= mn ; i ++ ) ans *= i ;  $ ~cout << ans << endl ;  $ ~return 0 ;  $ }
long long a , b , c , v , e ;  $ int main ( ) {  $ ~cin >> a >> b ;  $ ~if ( a <= b )  $ ~~v = a ;  $ ~else  $ ~~v = b ;  $ ~a = b = 1 ;  $ ~while ( v > 0 ) {  $ ~~b *= a ;  $ ~~a ++ ;  $ ~~v -- ;  $ ~}  $ ~cout << b << endl ;  $ ~return 0 ;  $ }
long long int fact ( long int x ) {  $ ~if ( x == 0 || x == 1 ) return 1 ;  $ ~return x * fact ( x - 1 ) ;  $ }  $ int main ( ) {  $ ~long int a , b ;  $ ~cin >> a ;  $ ~cin >> b ;  $ ~if ( a > b ) {  $ ~~cout << fact ( b ) << "\n" ;  $ ~} else {  $ ~~cout << fact ( a ) << "\n" ;  $ ~}  $ ~return 0 ;  $ }
int fact ( int n ) {  $ ~if ( n == 1 ) return 1 ;  $ ~return n * fact ( n - 1 ) ;  $ }  $ int main ( ) {  $ ~int a , b ;  $ ~cin >> a >> b ;  $ ~int output = fact ( int ( min ( a , b ) ) ) ;  $ ~cout << output << endl ;  $ ~return 0 ;  $ }
const int maxn = 1e5 + 7 ;  $ int main ( ) {  $ ~int a , b ;  $ ~cin >> a >> b ;  $ ~int c = min ( a , b ) ;  $ ~long long ans = 1 ;  $ ~for ( int i = 1 ; i <= c ; i ++ ) ans *= i ;  $ ~cout << ans << endl ;  $ }
long long fact ( long long x ) {  $ ~if ( x <= 1 )  $ ~~return 1 ;  $ ~else  $ ~~return x * fact ( x - 1 ) ;  $ }  $ int main ( ) {  $ ~long long a , b ;  $ ~cin >> a >> b ;  $ ~if ( a > b ) {  $ ~~cout << fact ( b ) << endl ;  $ ~} else  $ ~~cout << fact ( a ) << endl ;  $ ~return 0 ;  $ }
unsigned long long fact ( int n ) {  $ ~unsigned long long ans = 1 ;  $ ~while ( n >= 1 ) {  $ ~~ans *= n ;  $ ~~n -- ;  $ ~}  $ ~return ans ;  $ }  $ int main ( ) {  $ ~int a , b ;  $ ~cin >> a >> b ;  $ ~cout << fact ( min ( a , b ) ) << endl ;  $ ~return 0 ;  $ }
long long ll = 1 ;  $ int main ( ) {  $ ~int a , b ;  $ ~cin >> a >> b ;  $ ~if ( a > b ) a = b ;  $ ~for ( int i = 2 ; i <= a ; i ++ ) ll *= i ;  $ ~cout << ll << endl ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~long long int a , b , x , i , k = 1 ;  $ ~cin >> a >> b ;  $ ~x = min ( a , b ) ;  $ ~for ( i = 1 ; i <= x ; i ++ ) { k = k * i ; }  $ ~cout << k << endl ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~long long a , b ;  $ ~cin >> a >> b ;  $ ~long long c = min ( a , b ) ;  $ ~long long ans = 1 ;  $ ~for ( int i = 1 ; i <= c ; i ++ ) ans *= i ;  $ ~cout << ans << endl ;  $ }
int main ( ) {  $ ~long long a , b , c = 1 , d ;  $ ~cin >> a >> b ;  $ ~d = min ( a , b ) ;  $ ~for ( int i = 1 ; i <= d ; i ++ ) c *= i ;  $ ~cout << c << endl ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~long long a , b ;  $ ~cin >> a >> b ;  $ ~a = a < b ? a : b ;  $ ~b = 1 ;  $ ~for ( int i = 2 ; i <= a ; ++ i ) { b *= i ; }  $ ~cout << b << endl ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~int a , b ;  $ ~while ( cin >> a >> b ) {  $ ~~int t ;  $ ~~t = a ;  $ ~~if ( b < a ) { t = b ; }  $ ~~int i ;  $ ~~int k = 1 ;  $ ~~for ( i = 1 ; i <= t ; i ++ ) { k *= i ; }  $ ~~cout << k << endl ;  $ ~}  $ }
int main ( ) {  $ ~long long int a , b ;  $ ~cin >> a >> b ;  $ ~long long int i , f = 1 ;  $ ~for ( i = 1 ; ; i ++ ) {  $ ~~f *= i ;  $ ~~if ( i == a || i == b ) {  $ ~~~cout << f << endl ;  $ ~~~break ;  $ ~~}  $ ~}  $ ~return 0 ;  $ }
long long factorial ( long long n ) {  $ ~if ( n > 1 )  $ ~~return n * factorial ( n - 1 ) ;  $ ~else  $ ~~return 1 ;  $ }  $ int main ( ) {  $ ~long long a , b , ans ;  $ ~cin >> a >> b ;  $ ~ans = min ( a , b ) ;  $ ~cout << factorial ( ans ) << endl ;  $ }
long long facto ( long long n ) {  $ ~if ( n == 0 or n == 1 ) return 1 ;  $ ~long long fact [ 18 ] = { 0 } ;  $ ~fact [ 0 ] = 1 ;  $ ~for ( int i = 1 ; i <= n ; i ++ ) fact [ i ] = fact [ i - 1 ] * i ;  $ ~return fact [ n ] ;  $ }  $ int main ( ) {  $ ~long long a , b ;  $ ~cin >> a >> b ;  $ ~cout << facto ( min ( a , b ) ) << "\n" ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~int t , a , b , c , i = 0 , d = 1 , k = 1 ;  $ ~cin >> a >> c ;  $ ~i = min ( a , c ) ;  $ ~for ( t = 1 ; t <= i ; t ++ ) { d *= t ; }  $ ~cout << d << endl ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~int n ;  $ ~while ( cin >> n ) {  $ ~~long long answ = n ;  $ ~~for ( int i = 1 , a ; i <= n ; ++ i ) {  $ ~~~cin >> a ;  $ ~~~answ += ( long long ) i * ( a - 1 ) ;  $ ~~}  $ ~~cout << answ << endl ;  $ ~}  $ ~return 0 ;  $ }
void Fast_Read_Out ( ) { }  $ void Random ( ) {  $ ~unsigned long long seed ;  $ ~asm ( "rdtsc" : "=A" ( seed ) ) ;  $ ~srand ( seed ) ;  $ }  $ unsigned long long Time ( ) {  $ ~unsigned long long time = clock ( ) / 1000.00 ;  $ ~return time ;  $ }  $ const long long inf = ( 1e9 ) + 123 ;  $ long long a [ 101 ] ;  $ long long dp [ 101 ] ;  $ int main ( ) {  $ ~Random ( ) ;  $ ~Fast_Read_Out ( ) ;  $ ~long long n ;  $ ~cin >> n ;  $ ~for ( long long i = 1 ; i <= n ; i ++ ) cin >> a [ i ] ;  $ ~for ( long long i = 1 ; i <= n ; i ++ ) dp [ i ] = ( a [ i ] - 1 ) * i + 1 ;  $ ~long long sum = 0 ;  $ ~for ( long long i = 1 ; i <= n ; i ++ ) sum += dp [ i ] ;  $ ~cout << sum << endl ;  $ }
int main ( ) {  $ ~int n ;  $ ~cin >> n ;  $ ~long long arr [ n ] ;  $ ~for ( int i = 0 ; i < n ; i ++ ) cin >> arr [ i ] ;  $ ~long long ans = 0 ;  $ ~for ( int i = 0 ; i < n ; i ++ ) { ans = ans + ( i + 1 ) * arr [ i ] - i ; }  $ ~cout << ans << endl ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~long long n ;  $ ~cin >> n ;  $ ~long long tot = 0 ;  $ ~long long input ;  $ ~for ( int i = 1 ; i <= n ; i ++ ) {  $ ~~cin >> input ;  $ ~~tot += i * ( input - 1 ) ;  $ ~}  $ ~tot += n ;  $ ~cout << tot << endl ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~long long int n , s = 0 , m ;  $ ~cin >> n ;  $ ~for ( int i = 0 ; i < n ; i ++ ) {  $ ~~cin >> m ;  $ ~~s += m + i * ( m - 1 ) ;  $ ~}  $ ~cout << s << endl ;  $ ~return 0 ;  $ }
long long n , ans = 0 ;  $ int main ( ) {  $ ~cin >> n ;  $ ~for ( long long i = 1 ; i <= n ; i ++ ) {  $ ~~long long a ;  $ ~~cin >> a ;  $ ~~ans += ( a - 1 ) * ( i - 1 ) + a ;  $ ~}  $ ~cout << ans << endl ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~int n ;  $ ~long long a , ara [ 101 ] , Ans ;  $ ~cin >> n ;  $ ~cin >> a ;  $ ~Ans = a ;  $ ~for ( int i = 1 ; i < n ; i ++ ) {  $ ~~cin >> ara [ i ] ;  $ ~~Ans += ( ara [ i ] - 1 ) * ( i + 1 ) + 1 ;  $ ~}  $ ~cout << Ans << endl ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~long long n , a [ 101 ] = { 0 } , ans = 0 ;  $ ~cin >> n ;  $ ~for ( int i = 1 ; i <= n ; i ++ ) cin >> a [ i ] ;  $ ~for ( int i = 1 ; i <= n ; i ++ ) ans += ( a [ i ] - 1 ) * i + 1 ;  $ ~cout << ans << endl ;  $ }
void desperate_optimization ( int precision ) {  $ ~cout . setf ( ios : : fixed ) ;  $ ~cout . setf ( ios : : showpoint ) ;  $ ~cout . precision ( precision ) ;  $ }  $ void hora ( int tc ) {  $ ~int n ;  $ ~cin >> n ;  $ ~long long tot = 0 ;  $ ~for ( long long i = 1 ; i <= n ; i ++ ) {  $ ~~long long x ;  $ ~~cin >> x ;  $ ~~tot += ( i ) * ( x - 1 ) + 1 ;  $ ~}  $ ~cout << tot << '\n' ;  $ }  $ int main ( ) {  $ ~desperate_optimization ( 10 ) ;  $ ~int ntc = 1 ;  $ ~for ( int tc = 1 ; tc <= ntc ; tc ++ ) hora ( tc ) ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~long long n ;  $ ~cin >> n ;  $ ~long long ans = 0 ;  $ ~for ( int i = 0 ; i < n ; i ++ ) {  $ ~~long long a ;  $ ~~cin >> a ;  $ ~~ans += ( i + 1 ) * ( a - 1 ) + 1 ;  $ ~}  $ ~cout << ans << endl ;  $ }
const int M = 100 + 10 ;  $ long long int a [ M ] ;  $ int main ( ) {  $ ~int n ;  $ ~cin >> n ;  $ ~for ( int i = 1 ; i <= n ; i ++ ) { cin >> a [ i ] ; }  $ ~long long int ans = 0 ;  $ ~for ( int i = 1 ; i <= n ; i ++ ) { ans = ans + ( i - 1 ) * ( a [ i ] - 1 ) + a [ i ] ; }  $ ~cout << ans << endl ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~long long a , b = 0 , i , k ;  $ ~cin >> a ;  $ ~for ( i = 1 ; i <= a ; i ++ ) {  $ ~~cin >> k ;  $ ~~if ( i == 1 || k == 1 ) {  $ ~~~b += k ;  $ ~~} else {  $ ~~~k *= i ;  $ ~~~k -= i - 1 ;  $ ~~~b += k ;  $ ~~}  $ ~}  $ ~cout << b << endl ;  $ }
long long ans , n , a [ 101 ] ;  $ int main ( ) {  $ ~cin >> n ;  $ ~for ( int i = 1 ; i <= n ; i ++ ) cin >> a [ i ] ;  $ ~for ( int i = 1 ; i <= n ; i ++ ) { ans = ans + a [ i ] * i + 1 - i ; }  $ ~cout << ans << endl ;  $ }
int main ( ) {  $ ~int n ;  $ ~long long arr [ 102 ] ;  $ ~cin >> n ;  $ ~for ( int i = 1 ; i <= n ; i ++ ) { cin >> arr [ i ] ; }  $ ~long long sum = 0 ;  $ ~for ( int i = 1 ; i <= n ; i ++ ) { sum += ( arr [ i ] - 1 ) * i ; }  $ ~sum += n ;  $ ~cout << sum << endl ;  $ }
long long n , a [ 105 ] , ans , cnt ;  $ int main ( ) {  $ ~cin >> n ;  $ ~for ( int i = 0 ; i < n ; i ++ ) cin >> a [ i ] ;  $ ~ans = a [ n - 1 ] ;  $ ~for ( int i = n - 2 ; i >= 0 ; i -- ) a [ i ] += a [ i + 1 ] - 1 , ans += a [ i ] ;  $ ~cout << ans << endl ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~long long n , a ;  $ ~cin >> n ;  $ ~long long ans = 0 ;  $ ~for ( long long i = 1 ; i <= n ; i ++ ) {  $ ~~cin >> a ;  $ ~~ans += ( a - 1 ) * i + 1 ;  $ ~}  $ ~cout << ans << endl ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~long long a , b = 0 , i , k ;  $ ~cin >> a ;  $ ~for ( i = 1 ; i <= a ; i ++ ) {  $ ~~cin >> k ;  $ ~~if ( i == 1 || k == 1 ) {  $ ~~~b += k ;  $ ~~} else {  $ ~~~k *= i ;  $ ~~~k -= i - 1 ;  $ ~~~b += k ;  $ ~~}  $ ~}  $ ~cout << b << endl ;  $ }
unsigned long long a , i , k , n ;  $ int main ( ) {  $ ~cin >> n ;  $ ~for ( i = 1 ; i <= n ; i ++ ) {  $ ~~cin >> a ;  $ ~~k += ( a - 1 ) * i ;  $ ~~k ++ ;  $ ~}  $ ~cout << k << endl ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~long long n , a , ans ;  $ ~cin >> n >> a ;  $ ~ans = a ;  $ ~for ( int i = 2 ; i <= n ; i ++ ) {  $ ~~cin >> a ;  $ ~~ans += 1 + ( a - 1 ) * i ;  $ ~}  $ ~cout << ans << endl ;  $ ~return 0 ;  $ }
int t ;  $ long long int a ;  $ long long int sum ;  $ int main ( ) {  $ ~while ( cin >> t ) {  $ ~~sum = 0 ;  $ ~~for ( int i = 0 ; i < t ; i ++ ) {  $ ~~~cin >> a ;  $ ~~~sum = sum + ( a - 1 ) * i + a ;  $ ~~}  $ ~~cout << sum << endl ;  $ ~}  $ ~return 0 ;  $ }
int main ( ) {  $ ~long long n ;  $ ~cin >> n ;  $ ~long long total ( 0 ) ;  $ ~for ( long p = 0 ; p < n ; p ++ ) {  $ ~~long long m ;  $ ~~cin >> m ;  $ ~~total += ( m - 1 ) * ( p + 1 ) + 1 ;  $ ~}  $ ~cout << total << endl ;  $ ~return 0 ;  $ }
long long ans , n , a [ 105 ] ;  $ int main ( ) {  $ ~cin >> n ;  $ ~for ( register long long i = 1 ; i <= n ; i ++ ) cin >> a [ i ] ;  $ ~for ( register long long i = 1 ; i <= n ; i ++ ) ans = ans + a [ i ] * i + 1 - i ;  $ ~cout << ans << '\n' ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~long long n ;  $ ~cin >> n ;  $ ~long long total ( 0 ) ;  $ ~for ( long p = 0 ; p < n ; p ++ ) {  $ ~~long long m ;  $ ~~cin >> m ;  $ ~~total += ( m - 1 ) * ( p + 1 ) + 1 ;  $ ~}  $ ~cout << total << endl ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~long long n ;  $ ~long long sum ;  $ ~while ( cin >> n ) {  $ ~~sum = 0 ;  $ ~~for ( int i = 1 ; i <= n ; i ++ ) {  $ ~~~long long m ;  $ ~~~cin >> m ;  $ ~~~sum += i * ( m - 1 ) + 1 ;  $ ~~}  $ ~~cout << sum << endl ;  $ ~}  $ }
long long abs ( long long , long long ) ;  $ void solve ( ) {  $ ~long long n , a , t = 0 ;  $ ~cin >> n ;  $ ~for ( long long i = 1 ; i < n + 1 ; i ++ ) {  $ ~~cin >> a ;  $ ~~t += ( ( a - 1 ) * i + 1 ) ;  $ ~}  $ ~cout << t << "\n" ;  $ }  $ int main ( ) {  $ ~long long TESTS = 1 ;  $ ~while ( TESTS -- ) { solve ( ) ; }  $ ~return 0 ;  $ }  $ long long abs ( long long a , long long b ) {  $ ~if ( a > b )  $ ~~return a - b ;  $ ~else  $ ~~return b - a ;  $ }
const int INF = 0 x3f3f3f3f ;  $ int a [ 105 ] ;  $ int main ( ) {  $ ~long long i , j , k , l = 0 ;  $ ~long long n , m ;  $ ~cin >> n ;  $ ~for ( i = 0 ; i < n ; i ++ ) cin >> a [ i ] , a [ i ] -- ;  $ ~long long s = n ;  $ ~for ( i = 0 ; i < n ; i ++ ) {  $ ~~if ( a [ i ] ) s += a [ i ] + a [ i ] * i ;  $ ~}  $ ~cout << s << endl ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~int n ;  $ ~long long int a [ 150 ] ;  $ ~long long int sum = 0 ;  $ ~while ( cin >> n ) {  $ ~~sum = 0 ;  $ ~~for ( int i = 1 ; i <= n ; i ++ ) { cin >> a [ i ] ; }  $ ~~for ( int i = 1 ; i <= n ; i ++ ) {  $ ~~~if ( i == 1 ) {  $ ~~~~sum += a [ 1 ] ;  $ ~~~} else {  $ ~~~~sum = sum + ( a [ i ] - 1 ) * i + 1 ;  $ ~~~}  $ ~~}  $ ~~cout << sum << endl ;  $ ~}  $ ~return 0 ;  $ }
int main ( ) {  $ ~int n ;  $ ~cin >> n ;  $ ~long long a [ n ] ;  $ ~for ( int i = 0 ; i < n ; i ++ ) { cin >> a [ i ] ; }  $ ~long long sum = 0 ;  $ ~for ( int i = 0 ; i < n ; i ++ ) {  $ ~~sum += a [ i ] ;  $ ~~sum += ( a [ i ] - 1 ) * i ;  $ ~}  $ ~cout << sum << endl ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~int n , a [ 101 ] ;  $ ~cin >> n ;  $ ~long long ans = 0 ;  $ ~for ( int i = 1 ; i <= n ; i ++ ) {  $ ~~cin >> a [ i ] ;  $ ~~ans += 1 LL * ( a [ i ] - 1 ) * ( i - 1 ) + a [ i ] ;  $ ~}  $ ~cout << ans << endl ;  $ ~return 0 ;  $ }
const int inf = 0 x3f3f3f3f ;  $ const int MAXN = 10005 ;  $ const int mod = 19260817 ;  $ const int INF = 0 x7fffffff ;  $ long long ans [ 101 ] ;  $ int main ( ) {  $ ~int n , x ;  $ ~cin >> n ;  $ ~for ( int i = 1 ; i <= n ; i ++ ) cin >> ans [ i ] ;  $ ~long long sum = 0 ;  $ ~for ( int i = 1 ; i <= n ; i ++ ) sum += ans [ i ] * i - i + 1 ;  $ ~cout << sum << endl ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~int arr [ 3 ] [ 1005 ] ;  $ ~int n , s ;  $ ~cin >> n >> s ;  $ ~for ( int i = 0 ; i < 2 ; i ++ ) {  $ ~~for ( int j = 1 ; j <= n ; j ++ ) { cin >> arr [ i ] [ j ] ; }  $ ~}  $ ~int cek ;  $ ~if ( arr [ 0 ] [ 1 ] && ( arr [ 0 ] [ s ] || arr [ 1 ] [ s ] ) ) {  $ ~~cek = 1 ;  $ ~~if ( arr [ 0 ] [ s ] == 0 ) {  $ ~~~cek = 0 ;  $ ~~~for ( int i = s + 1 ; i <= n ; i ++ ) {  $ ~~~~if ( arr [ 0 ] [ i ] && arr [ 1 ] [ i ] ) cek = 1 ;  $ ~~~}  $ ~~}  $ ~} else  $ ~~cek = 0 ;  $ ~cout << ( cek ? "YES" : "NO" ) << endl ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~int n , m , a [ 1111 ] , b [ 1111 ] ;  $ ~cin >> n >> m ;  $ ~for ( int i = 1 ; i <= n ; i ++ ) { cin >> a [ i ] ; }  $ ~for ( int i = 1 ; i <= n ; i ++ ) { cin >> b [ i ] ; }  $ ~if ( a [ 1 ] == 0 ) {  $ ~~cout << "NO" << endl ;  $ ~~return 0 ;  $ ~}  $ ~int flag = 0 ;  $ ~if ( a [ m ] ) {  $ ~~cout << "YES" << endl ;  $ ~} else {  $ ~~if ( ! b [ m ] ) {  $ ~~~cout << "NO" << endl ;  $ ~~} else {  $ ~~~for ( int i = m + 1 ; i <= n ; i ++ ) {  $ ~~~~if ( a [ i ] && b [ i ] ) {  $ ~~~~~flag = 1 ;  $ ~~~~~cout << "YES" << endl ;  $ ~~~~~return 0 ;  $ ~~~~}  $ ~~~}  $ ~~~if ( ! flag ) { cout << "NO" << endl ; }  $ ~~}  $ ~}  $ ~return 0 ;  $ }
int main ( ) {  $ ~int n , s ;  $ ~cin >> n >> s ;  $ ~int a [ n ] , b [ n ] ;  $ ~for ( int i = 0 ; i < n ; i ++ ) { cin >> a [ i ] ; }  $ ~for ( int i = 0 ; i < n ; i ++ ) { cin >> b [ i ] ; }  $ ~if ( a [ 0 ] == 0 ) {  $ ~~cout << "NO" << endl ;  $ ~~return 0 ;  $ ~} else if ( a [ s - 1 ] == 0 && b [ s - 1 ] == 0 ) {  $ ~~cout << "NO" << endl ;  $ ~~return 0 ;  $ ~} else if ( a [ s - 1 ] == 1 ) {  $ ~~cout << "YES" << endl ;  $ ~~return 0 ;  $ ~} else if ( a [ s - 1 ] == 0 && b [ s - 1 ] == 1 ) {  $ ~~int k = 0 ;  $ ~~for ( int i = s ; i < n ; i ++ ) {  $ ~~~if ( a [ i ] == 1 && b [ i ] == 1 ) {  $ ~~~~k = 1 ;  $ ~~~~cout << "YES" << endl ;  $ ~~~~return 0 ;  $ ~~~}  $ ~~}  $ ~~if ( k == 0 ) {  $ ~~~cout << "NO" << endl ;  $ ~~~return 0 ;  $ ~~}  $ ~}  $ ~return 0 ;  $ }
int n , s ;  $ bool a [ 1111 ] , b [ 1111 ] ;  $ int main ( ) {  $ ~cin >> n >> s ;  $ ~for ( int i = 1 ; i <= n ; i ++ ) { cin >> a [ i ] ; }  $ ~for ( int i = 1 ; i <= n ; i ++ ) { cin >> b [ i ] ; }  $ ~if ( ! a [ 1 ] ) {  $ ~~cout << "NO" << endl ;  $ ~} else if ( a [ 1 ] && a [ s ] ) {  $ ~~cout << "YES" << endl ;  $ ~} else {  $ ~~int flag = 0 ;  $ ~~for ( int i = s + 1 ; i <= n ; i ++ ) {  $ ~~~if ( a [ i ] ) {  $ ~~~~if ( b [ i ] && b [ s ] ) {  $ ~~~~~flag = 1 ;  $ ~~~~~break ;  $ ~~~~}  $ ~~~}  $ ~~}  $ ~~if ( flag )  $ ~~~cout << "YES" << endl ;  $ ~~else  $ ~~~cout << "NO" << endl ;  $ ~}  $ ~return 0 ;  $ }
int main ( ) {  $ ~int N , S ;  $ ~cin >> N >> S ;  $ ~-- S ;  $ ~int a [ N ] , b [ N ] ;  $ ~for ( int i = 0 ; i < N ; ++ i ) cin >> a [ i ] ;  $ ~for ( int i = 0 ; i < N ; ++ i ) cin >> b [ i ] ;  $ ~if ( a [ 0 ] && a [ S ] ) {  $ ~~cout << "YES" << endl ;  $ ~~return 0 ;  $ ~}  $ ~for ( int k = S + 1 ; k < N ; ++ k ) {  $ ~~if ( a [ 0 ] && a [ k ] && b [ k ] && b [ S ] ) {  $ ~~~cout << "YES" << endl ;  $ ~~~return 0 ;  $ ~~}  $ ~}  $ ~cout << "NO" << endl ;  $ ~return 0 ;  $ }
int a [ 1005 ] , b [ 1005 ] ;  $ int main ( ) {  $ ~int n , m ;  $ ~cin >> n >> m ;  $ ~for ( int i = 1 ; i <= n ; i ++ ) { cin >> a [ i ] ; }  $ ~for ( int i = 1 ; i <= n ; i ++ ) { cin >> b [ i ] ; }  $ ~if ( a [ 1 ] == 0 ) {  $ ~~cout << "NO" << endl ;  $ ~} else if ( a [ 1 ] == 1 && a [ m ] == 1 ) {  $ ~~cout << "YES" << endl ;  $ ~} else {  $ ~~if ( b [ m ] == 0 )  $ ~~~cout << "NO" << endl ;  $ ~~else {  $ ~~~int bj = 0 ;  $ ~~~for ( int i = m + 1 ; i <= n ; i ++ ) {  $ ~~~~if ( a [ i ] == 1 && b [ i ] == 1 ) { bj = 1 ; }  $ ~~~}  $ ~~~if ( bj ) {  $ ~~~~cout << "YES" << endl ;  $ ~~~} else {  $ ~~~~cout << "NO" << endl ;  $ ~~~}  $ ~~}  $ ~}  $ }
const int mx = 1000 ;  $ int n , s ;  $ bool a [ mx ] , b [ mx ] ;  $ void solve ( ) {  $ ~cin >> n >> s ;  $ ~int t1 = 0 , t2 = 0 ;  $ ~for ( int i = 0 ; i < n ; i ++ ) cin >> a [ i ] ;  $ ~for ( int i = 0 ; i < n ; i ++ ) cin >> b [ i ] ;  $ ~if ( a [ 0 ] == 1 ) t1 = 1 ;  $ ~if ( a [ s - 1 ] == 1 || b [ s - 1 ] == 1 )  $ ~~for ( int i = s - 1 ; i < n ; i ++ )  $ ~~~if ( a [ i ] == 1 && b [ i ] == 1 ) {  $ ~~~~t2 = 1 ;  $ ~~~~break ;  $ ~~~}  $ ~if ( t1 == 1 && ( t2 == 1 || a [ s - 1 ] == 1 ) )  $ ~~cout << "YES\n" ;  $ ~else  $ ~~cout << "NO\n" ;  $ }  $ int main ( ) {  $ ~solve ( ) ;  $ ~return 0 ;  $ }
const int maxn = 1e5 + 5 ;  $ int a [ maxn ] , b [ maxn ] ;  $ int main ( ) {  $ ~int n , m ;  $ ~cin >> n >> m ;  $ ~for ( int i = 1 ; i <= n ; i ++ ) cin >> a [ i ] ;  $ ~for ( int j = 1 ; j <= n ; j ++ ) cin >> b [ j ] ;  $ ~if ( a [ 1 ] == 0 ) {  $ ~~cout << "NO" << endl ;  $ ~~return 0 ;  $ ~}  $ ~if ( a [ m ] == 1 ) {  $ ~~cout << "YES" << endl ;  $ ~~return 0 ;  $ ~}  $ ~for ( int i = m ; i <= n ; i ++ )  $ ~~if ( a [ i ] == 1 && b [ i ] == 1 && b [ m ] == 1 ) {  $ ~~~cout << "YES" << endl ;  $ ~~~return 0 ;  $ ~~}  $ ~cout << "NO" << endl ;  $ ~return 0 ;  $ }
void solve ( ) {  $ ~long long n , s ;  $ ~cin >> n >> s ;  $ ~long long a [ n ] , b [ n ] ;  $ ~for ( long long i = 0 ; i < n ; i ++ ) cin >> a [ i ] ;  $ ~for ( long long i = 0 ; i < n ; i ++ ) cin >> b [ i ] ;  $ ~if ( a [ 0 ] == 1 ) {  $ ~~if ( a [ s - 1 ] == 1 )  $ ~~~cout << "YES\n" ;  $ ~~else {  $ ~~~long long h = 0 ;  $ ~~~for ( long long i = s ; i < n ; i ++ )  $ ~~~~if ( a [ i ] == 1 && b [ i ] == 1 ) {  $ ~~~~~h = 2 ;  $ ~~~~~break ;  $ ~~~~}  $ ~~~if ( h == 2 && b [ s - 1 ] == 1 )  $ ~~~~cout << "YES\n" ;  $ ~~~else  $ ~~~~cout << "NO\n" ;  $ ~~}  $ ~} else  $ ~~cout << "NO\n" ;  $ }  $ int main ( ) {  $ ~long long t = 1 ;  $ ~while ( t -- ) { solve ( ) ; }  $ ~return 0 ;  $ }
int main ( ) {  $ ~long long int n , s , a [ 1001 ] , b [ 1001 ] ;  $ ~cin >> n >> s ;  $ ~for ( long long int i = 1 ; i <= n ; i ++ ) cin >> a [ i ] ;  $ ~for ( long long int i = 1 ; i <= n ; i ++ ) cin >> b [ i ] ;  $ ~if ( a [ 1 ] == 0 ) {  $ ~~cout << "NO" << endl ;  $ ~~return 0 ;  $ ~}  $ ~if ( a [ s ] == 1 ) {  $ ~~cout << "YES" << endl ;  $ ~~return 0 ;  $ ~}  $ ~bool flag = false ;  $ ~for ( long long int i = s + 1 ; i <= n ; i ++ ) {  $ ~~if ( a [ i ] == 1 && b [ i ] == 1 ) {  $ ~~~flag = true ;  $ ~~~break ;  $ ~~}  $ ~}  $ ~if ( flag == false ) {  $ ~~cout << "NO" << endl ;  $ ~~return 0 ;  $ ~}  $ ~if ( b [ s ] == 1 ) {  $ ~~cout << "YES" << endl ;  $ ~~return 0 ;  $ ~}  $ ~cout << "NO" << endl ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~int n , s ;  $ ~cin >> n >> s ;  $ ~int a [ n + 1 ] = { 0 } ;  $ ~int b [ n + 1 ] = { 0 } ;  $ ~for ( int i = 1 ; i <= n ; i ++ ) cin >> a [ i ] ;  $ ~for ( int i = 1 ; i <= n ; i ++ ) cin >> b [ i ] ;  $ ~if ( a [ 1 ] == 0 ) {  $ ~~cout << "NO\n" ;  $ ~~return 0 ;  $ ~}  $ ~if ( a [ s ] == 1 ) {  $ ~~cout << "YES\n" ;  $ ~~return 0 ;  $ ~}  $ ~for ( int i = s + 1 ; i <= n ; i ++ ) {  $ ~~if ( a [ i ] == 1 && b [ i ] == 1 && b [ s ] == 1 ) {  $ ~~~cout << "YES\n" ;  $ ~~~return 0 ;  $ ~~}  $ ~}  $ ~cout << "NO\n" ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~int n , s ;  $ ~cin >> n >> s ;  $ ~vector < int > forward ( n + 1 , 0 ) ;  $ ~vector < int > backward ( n + 1 , 0 ) ;  $ ~for ( int i = 1 ; i <= n ; i ++ ) { cin >> forward [ i ] ; }  $ ~for ( int i = 1 ; i <= n ; i ++ ) { cin >> backward [ i ] ; }  $ ~if ( forward [ 1 ] == 0 ) {  $ ~~cout << "NO" << endl ;  $ ~} else {  $ ~~if ( forward [ s ] == 1 ) {  $ ~~~cout << "YES" << endl ;  $ ~~} else {  $ ~~~if ( backward [ s ] == 1 ) {  $ ~~~~bool availabe = false ;  $ ~~~~for ( int i = s + 1 ; i <= n ; i ++ ) {  $ ~~~~~if ( forward [ i ] == 1 && backward [ i ] == 1 ) {  $ ~~~~~~availabe = true ;  $ ~~~~~~break ;  $ ~~~~~}  $ ~~~~}  $ ~~~~cout << ( ( availabe ) ? "YES" : "NO" ) << endl ;  $ ~~~} else {  $ ~~~~cout << "NO" << endl ;  $ ~~~}  $ ~~}  $ ~}  $ ~return 0 ;  $ }
int a [ 10000 ] , b [ 10000 ] ;  $ bool ab = 0 ;  $ int main ( ) {  $ ~int n , s , i , z = 1 , x , c ;  $ ~cin >> n >> s ;  $ ~x = n + 1 ;  $ ~for ( i = 1 ; i <= n ; i ++ ) cin >> a [ i ] ;  $ ~for ( i = 1 ; i <= n ; i ++ ) cin >> b [ i ] ;  $ ~if ( a [ s ] == 1 && a [ 1 ] == 1 )  $ ~~ab = 1 ;  $ ~else  $ ~~for ( i = n ; i >= 1 ; i -- ) {  $ ~~~if ( a [ i ] == 1 && b [ i ] == 1 ) {  $ ~~~~if ( i >= s && b [ s ] == 1 ) ab = 1 ;  $ ~~~}  $ ~~}  $ ~if ( a [ 1 ] == 0 ) ab = 0 ;  $ ~if ( ab == 1 )  $ ~~cout << "YES" << endl ;  $ ~else  $ ~~cout << "NO" << endl ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~int n , s ;  $ ~int t1 [ 100000 ] , t2 [ 100000 ] ;  $ ~cin >> n >> s ;  $ ~for ( int i = 0 ; i < n ; ++ i ) { cin >> t1 [ i ] ; }  $ ~for ( int i = 0 ; i < n ; ++ i ) { cin >> t2 [ i ] ; }  $ ~if ( t1 [ 0 ] == 1 ) {  $ ~~if ( t1 [ s - 1 ] == 1 ) {  $ ~~~cout << "YES" << endl ;  $ ~~~return 0 ;  $ ~~}  $ ~~if ( t2 [ s - 1 ] == 1 ) {  $ ~~~for ( int i = s ; i < n ; i ++ ) {  $ ~~~~if ( t1 [ i ] == 1 && t2 [ i ] == 1 ) {  $ ~~~~~cout << "YES" << endl ;  $ ~~~~~return 0 ;  $ ~~~~}  $ ~~~}  $ ~~}  $ ~}  $ ~cout << "NO" << endl ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~int n , s ;  $ ~cin >> n >> s ;  $ ~int a [ n + 1 ] , b [ n + 1 ] ;  $ ~for ( int i = 1 ; i <= n ; ++ i ) cin >> a [ i ] ;  $ ~for ( int i = 1 ; i <= n ; ++ i ) cin >> b [ i ] ;  $ ~if ( a [ 1 ] == 1 ) {  $ ~~if ( a [ s ] == 1 )  $ ~~~cout << "YES" << endl ;  $ ~~else if ( b [ s ] == 1 ) {  $ ~~~for ( int i = s + 1 ; i <= n ; ++ i ) {  $ ~~~~if ( a [ i ] == 1 && b [ i ] == 1 ) {  $ ~~~~~cout << "YES" << endl ;  $ ~~~~~return 0 ;  $ ~~~~}  $ ~~~}  $ ~~~cout << "NO" << endl ;  $ ~~} else  $ ~~~cout << "NO" << endl ;  $ ~} else  $ ~~cout << "NO" << endl ;  $ ~return 0 ;  $ }
int n ;  $ int ans = - 1 ;  $ int res = 0 ;  $ int main ( ) {  $ ~cin >> n ;  $ ~int a [ n ] ;  $ ~for ( int i = 0 ; i < n ; i ++ ) {  $ ~~cin >> a [ i ] ;  $ ~~if ( a [ i ] == 1 ) res ++ ;  $ ~}  $ ~if ( res == n ) {  $ ~~cout << n - 1 << endl ;  $ ~~return 0 ;  $ ~}  $ ~if ( n == 1 && a [ 0 ] == 1 ) {  $ ~~cout << "0" << endl ;  $ ~~return 0 ;  $ ~}  $ ~for ( int j = 0 ; j < n ; j ++ ) {  $ ~~for ( int k = 0 ; k < n ; k ++ ) {  $ ~~~int cnt = 0 ;  $ ~~~for ( int l = 0 ; l < n ; l ++ ) {  $ ~~~~if ( l >= k && l <= j )  $ ~~~~~cnt = cnt + ( 1 - a [ l ] ) ;  $ ~~~~else  $ ~~~~~cnt = cnt + a [ l ] ;  $ ~~~}  $ ~~~ans = max ( ans , cnt ) ;  $ ~~}  $ ~}  $ ~cout << ans << endl ;  $ ~return 0 ;  $ }
int n ;  $ int ans = - 1 ;  $ int res = 0 ;  $ int main ( ) {  $ ~cin >> n ;  $ ~int a [ n ] ;  $ ~for ( int i = 0 ; i < n ; i ++ ) {  $ ~~cin >> a [ i ] ;  $ ~~if ( a [ i ] == 1 ) res ++ ;  $ ~}  $ ~if ( res == n ) {  $ ~~cout << n - 1 << endl ;  $ ~~return 0 ;  $ ~}  $ ~if ( n == 1 && a [ 0 ] == 1 ) {  $ ~~cout << "0" << endl ;  $ ~~return 0 ;  $ ~}  $ ~for ( int j = 0 ; j < n ; j ++ ) {  $ ~~for ( int k = 0 ; k <= n ; k ++ ) {  $ ~~~int cnt = 0 ;  $ ~~~for ( int l = 0 ; l < n ; l ++ ) {  $ ~~~~if ( l >= k && l <= j )  $ ~~~~~cnt = cnt + ! a [ l ] ;  $ ~~~~else  $ ~~~~~cnt = cnt + a [ l ] ;  $ ~~~}  $ ~~~ans = max ( ans , cnt ) ;  $ ~~}  $ ~}  $ ~cout << ans << endl ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~int max = 0 , n , i , sum = 0 , a [ 105 ] , p ;  $ ~cin >> n ;  $ ~p = 0 ;  $ ~for ( i = 0 ; i < n ; i ++ ) {  $ ~~cin >> a [ i ] ;  $ ~~sum += a [ i ] ;  $ ~}  $ ~if ( sum == n ) {  $ ~~cout << sum - 1 << endl ;  $ ~~return 0 ;  $ ~}  $ ~for ( i = 0 ; i < n ; i ++ ) {  $ ~~if ( a [ i ] == 0 )  $ ~~~p ++ ;  $ ~~else if ( a [ i ] == 1 && p < 0 )  $ ~~~p = 0 ;  $ ~~else if ( a [ i ] == 1 && p > 0 )  $ ~~~p -- ;  $ ~~if ( max < p ) max = p ;  $ ~}  $ ~sum += max ;  $ ~cout << sum << endl ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~int n , a , cnt_1 = 0 , cnt_0 = 0 , cnt_max0 = - 1 ;  $ ~cin >> n ;  $ ~while ( n -- ) {  $ ~~cin >> a ;  $ ~~if ( a == 1 ) {  $ ~~~cnt_1 ++ ;  $ ~~~if ( cnt_0 > 0 ) { cnt_0 -- ; }  $ ~~}  $ ~~if ( a == 0 ) {  $ ~~~cnt_0 ++ ;  $ ~~~if ( cnt_0 > cnt_max0 ) cnt_max0 = cnt_0 ;  $ ~~}  $ ~}  $ ~int ans = cnt_1 + cnt_max0 ;  $ ~cout << ans << endl ;  $ ~return 0 ;  $ }
int cnt1 [ 105 ] , cnt0 [ 105 ] ;  $ int main ( ) {  $ ~int n ;  $ ~cin >> n ;  $ ~int a [ n + 1 ] ;  $ ~for ( int i = 1 ; i <= n ; i ++ ) cin >> a [ i ] ;  $ ~cnt1 [ 0 ] = 0 ;  $ ~cnt0 [ 0 ] = 0 ;  $ ~int maxv = - 100 ;  $ ~for ( int i = 1 ; i <= n ; i ++ ) {  $ ~~cnt1 [ i ] = cnt1 [ i - 1 ] + a [ i ] ;  $ ~~cnt0 [ i ] = i - cnt1 [ i ] ;  $ ~}  $ ~for ( int i = 1 ; i <= n ; i ++ ) {  $ ~~for ( int j = i ; j <= n ; j ++ ) {  $ ~~~if ( ( cnt0 [ j ] - cnt0 [ i - 1 ] ) - ( cnt1 [ j ] - cnt1 [ i - 1 ] ) + cnt1 [ n ] > maxv ) maxv = ( cnt0 [ j ] - cnt0 [ i - 1 ] ) - ( cnt1 [ j ] - cnt1 [ i - 1 ] ) + cnt1 [ n ] ;  $ ~~}  $ ~}  $ ~cout << maxv << endl ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~int n ;  $ ~cin >> n ;  $ ~int arr [ n ] ;  $ ~int cnt = 0 ;  $ ~int def = - 1 ;  $ ~for ( int i = 0 ; i < n ; i ++ ) {  $ ~~cin >> arr [ i ] ;  $ ~~int a = 0 , b = 0 ;  $ ~~for ( int j = i ; j >= 0 ; j -- ) {  $ ~~~if ( arr [ j ] == 0 )  $ ~~~~a ++ ;  $ ~~~else  $ ~~~~b ++ ;  $ ~~~def = max ( def , a - b ) ;  $ ~~}  $ ~~if ( arr [ i ] == 1 ) cnt ++ ;  $ ~}  $ ~cout << cnt + def << endl ;  $ ~return 0 ;  $ }
int a [ 1001 ] = { 0 } ;  $ int main ( ) {  $ ~int n , c = 0 ;  $ ~cin >> n ;  $ ~for ( int i = 0 ; i < n ; i ++ ) {  $ ~~cin >> a [ i ] ;  $ ~~if ( a [ i ] == 1 ) {  $ ~~~a [ i ] = - 1 ;  $ ~~~c ++ ;  $ ~~} else  $ ~~~a [ i ] = 1 ;  $ ~}  $ ~int ans = a [ 0 ] , maxx = a [ 0 ] ;  $ ~for ( int i = 1 ; i < n ; i ++ ) {  $ ~~maxx = max ( a [ i ] , maxx + a [ i ] ) ;  $ ~~ans = max ( ans , maxx ) ;  $ ~}  $ ~cout << c + ans << endl ;  $ }
int main ( ) {  $ ~int n , a , count1 ( 0 ) , extra0 ( 0 ) , extra0max ( - 1 ) ;  $ ~cin >> n ;  $ ~while ( n -- ) {  $ ~~cin >> a ;  $ ~~if ( a == 1 ) {  $ ~~~count1 += 1 ;  $ ~~~if ( extra0 > 0 ) { extra0 -= 1 ; }  $ ~~} else {  $ ~~~extra0 += 1 ;  $ ~~~if ( extra0 > extra0max ) { extra0max = extra0 ; }  $ ~~}  $ ~}  $ ~cout << count1 + extra0max << endl ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~int a [ 105 ] , n , ans = 0 ;  $ ~cin >> n ;  $ ~for ( int i = 0 ; i < n ; i ++ ) cin >> a [ i ] ;  $ ~for ( int i = 0 ; i < n ; i ++ )  $ ~~for ( int j = 0 ; j <= i ; j ++ ) {  $ ~~~int v = 0 ;  $ ~~~for ( int k = 0 ; k < n ; k ++ )  $ ~~~~if ( k >= j && k <= i )  $ ~~~~~v += ! a [ k ] ;  $ ~~~~else  $ ~~~~~v += a [ k ] ;  $ ~~~ans = max ( ans , v ) ;  $ ~~}  $ ~cout << ans << "\n" ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~int a [ 105 ] ;  $ ~int n , ans = 0 ;  $ ~cin >> n ;  $ ~for ( int i = 0 ; i < n ; ++ i ) cin >> a [ i ] ;  $ ~for ( int i = 0 ; i < n ; ++ i ) {  $ ~~for ( int j = 0 ; j <= i ; j ++ ) {  $ ~~~int v = 0 ;  $ ~~~for ( int k = 0 ; k < n ; k ++ )  $ ~~~~if ( k >= j && k <= i )  $ ~~~~~v += ! a [ k ] ;  $ ~~~~else  $ ~~~~~v += a [ k ] ;  $ ~~~ans = max ( ans , v ) ;  $ ~~}  $ ~}  $ ~cout << ans << endl ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~int n ;  $ ~cin >> n ;  $ ~vector < int > a ( n ) ;  $ ~int cnt = 0 ;  $ ~for ( int i = 0 ; i < n ; i ++ ) {  $ ~~cin >> a [ i ] ;  $ ~~if ( a [ i ] == 1 ) {  $ ~~~a [ i ] = - 1 ;  $ ~~~cnt ++ ;  $ ~~}  $ ~~if ( a [ i ] == 0 ) { a [ i ] = 1 ; }  $ ~}  $ ~int gmax = INT_MIN , lmax = 0 ;  $ ~for ( int i = 0 ; i < n ; i ++ ) {  $ ~~lmax += a [ i ] ;  $ ~~gmax = max ( gmax , lmax ) ;  $ ~~if ( lmax < 0 ) { lmax = 0 ; }  $ ~}  $ ~cout << cnt + gmax << endl ;  $ }
int main ( ) {  $ ~int n , a , count1 ( 0 ) , extra0 ( 0 ) , extra0max ( - 1 ) ;  $ ~cin >> n ;  $ ~while ( n -- ) {  $ ~~cin >> a ;  $ ~~if ( a == 1 ) {  $ ~~~count1 += 1 ;  $ ~~~if ( extra0 > 0 ) { extra0 -= 1 ; }  $ ~~} else {  $ ~~~extra0 += 1 ;  $ ~~~if ( extra0 > extra0max ) { extra0max = extra0 ; }  $ ~~}  $ ~}  $ ~cout << count1 + extra0max << endl ;  $ ~return 0 ;  $ }
const int N = 1e6 + 7 ;  $ int main ( ) {  $ ~int n ;  $ ~int cnt = 0 ;  $ ~int ans = 0 ;  $ ~cin >> n ;  $ ~int a [ n ] ;  $ ~for ( int i = ( int ) ( 0 ) ; i <= ( int ) ( n - 1 ) ; i ++ ) {  $ ~~cin >> a [ i ] ;  $ ~~if ( a [ i ] )  $ ~~~a [ i ] = - 1 , cnt ++ ;  $ ~~else  $ ~~~a [ i ] = 1 ;  $ ~}  $ ~int mx = INT_MIN ;  $ ~for ( int i = ( int ) ( 0 ) ; i <= ( int ) ( n - 1 ) ; i ++ ) {  $ ~~ans += a [ i ] ;  $ ~~if ( ans > mx ) mx = ans ;  $ ~~if ( ans < 0 ) ans = 0 ;  $ ~}  $ ~cout << mx + cnt << '\n' ;  $ }
int main ( ) {  $ ~int n , a , count1 ( 0 ) , extra0 ( 0 ) , extra0max ( - 1 ) ;  $ ~cin >> n ;  $ ~while ( n -- ) {  $ ~~cin >> a ;  $ ~~if ( a == 1 ) {  $ ~~~count1 += 1 ;  $ ~~~if ( extra0 > 0 ) { extra0 -= 1 ; }  $ ~~} else {  $ ~~~extra0 += 1 ;  $ ~~~if ( extra0 > extra0max ) { extra0max = extra0 ; }  $ ~~}  $ ~}  $ ~cout << count1 + extra0max << endl ;  $ ~return 0 ;  $ }
int a [ 1000 ] ;  $ int flip ( int n , int i , int j ) {  $ ~int b [ 1000 ] ;  $ ~for ( int i = 0 ; i < n ; i ++ ) b [ i ] = a [ i ] ;  $ ~int count = 0 ;  $ ~for ( int k = i ; k <= j ; k ++ ) {  $ ~~if ( b [ k ] == 0 ) {  $ ~~~b [ k ] = 1 ;  $ ~~} else  $ ~~~b [ k ] = 0 ;  $ ~}  $ ~for ( int k = 0 ; k < n ; k ++ ) {  $ ~~if ( b [ k ] == 1 ) count ++ ;  $ ~}  $ ~return count ;  $ }  $ int main ( ) {  $ ~int n ;  $ ~cin >> n ;  $ ~for ( int i = 0 ; i < n ; i ++ ) cin >> a [ i ] ;  $ ~int max = - 1 ;  $ ~for ( int i = 0 ; i < n ; i ++ ) {  $ ~~for ( int j = i ; j < n ; j ++ ) {  $ ~~~int count = flip ( n , i , j ) ;  $ ~~~if ( count > max ) max = count ;  $ ~~}  $ ~}  $ ~cout << max << endl ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~int n , x , one_cnt = 0 , len_max = 0 , len_cur = 0 ;  $ ~cin >> n ;  $ ~for ( int i = 0 ; i < n ; ++ i ) {  $ ~~cin >> x ;  $ ~~if ( x == 0 ) {  $ ~~~if ( ++ len_cur > len_max ) len_max = len_cur ;  $ ~~} else {  $ ~~~if ( -- len_cur < 0 ) len_cur = 0 ;  $ ~~~one_cnt ++ ;  $ ~~}  $ ~}  $ ~cout << ( one_cnt + ( len_max == 0 ? - 1 : len_max ) ) << endl ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~int n , a [ 101 ] , x , mx = 0 ;  $ ~a [ 0 ] = 0 ;  $ ~cin >> n ;  $ ~for ( int i = 1 ; i <= n ; i ++ ) {  $ ~~cin >> x ;  $ ~~a [ i ] = a [ i - 1 ] + x ;  $ ~}  $ ~for ( int i = 1 ; i <= n ; i ++ )  $ ~~for ( int j = i ; j <= n ; j ++ ) mx = max ( a [ n ] + j - i + 1 - 2 * ( a [ j ] - a [ i - 1 ] ) , mx ) ;  $ ~cout << mx << endl ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~int n ;  $ ~int num [ 100 ] ;  $ ~int a [ 100 ] ;  $ ~cin >> n ;  $ ~int count = 0 ;  $ ~for ( int i = 0 ; i < n ; ++ i ) {  $ ~~cin >> num [ i ] ;  $ ~~if ( num [ i ] == 1 ) {  $ ~~~a [ i ] = - 1 ;  $ ~~~++ count ;  $ ~~} else {  $ ~~~a [ i ] = 1 ;  $ ~~}  $ ~}  $ ~int max = - 2 ;  $ ~int sum = 0 ;  $ ~for ( int i = 0 ; i < n ; ++ i ) {  $ ~~sum += a [ i ] ;  $ ~~if ( sum > max ) { max = sum ; }  $ ~~if ( sum < 0 ) { sum = 0 ; }  $ ~}  $ ~cout << max + count << endl ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~long long n , k ;  $ ~cin >> n >> k ;  $ ~long long t = n / k ;  $ ~if ( t % 2 ) {  $ ~~cout << "YES" << endl ;  $ ~} else {  $ ~~cout << "NO" << endl ;  $ ~}  $ ~return 0 ;  $ }
long long n , m ;  $ int main ( ) {  $ ~cin >> n >> m ;  $ ~if ( n / m % 2 ) {  $ ~~cout << "YES\n" ;  $ ~} else  $ ~~cout << "NO\n" ;  $ }
int main ( ) {  $ ~long long int n , k ;  $ ~cin >> n >> k ;  $ ~if ( ( n / k ) % 2 == 0 ) {  $ ~~cout << "NO" << endl ;  $ ~} else  $ ~~cout << "YES" << endl ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~long long n , k , x ;  $ ~cin >> n >> k ;  $ ~x = n / k ;  $ ~if ( x % 2 == 0 ) {  $ ~~cout << "NO" << endl ;  $ ~} else {  $ ~~cout << "YES" << endl ;  $ ~}  $ ~return 0 ;  $ }
int main ( ) {  $ ~long long n , k ;  $ ~cin >> n >> k ;  $ ~if ( ( n / k ) % 2 != 0 )  $ ~~cout << "YES" << endl ;  $ ~else  $ ~~cout << "NO" << endl ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~long long int n ;  $ ~long long int k ;  $ ~cin >> n ;  $ ~cin >> k ;  $ ~if ( ( ( n / k ) % 2 ) == 1 ) {  $ ~~cout << "YES" << endl ;  $ ~} else {  $ ~~cout << "NO" << endl ;  $ ~}  $ ~return 0 ;  $ }
int main ( ) {  $ ~long long n , k ;  $ ~cin >> n >> k ;  $ ~if ( ( n / k ) % 2 == 0 ) {  $ ~~cout << "NO" << endl ;  $ ~} else {  $ ~~cout << "YES" << endl ;  $ ~}  $ ~return 0 ;  $ }
int main ( ) {  $ ~long long n , k ;  $ ~cin >> n >> k ;  $ ~if ( n / k & 1 ) {  $ ~~cout << "YES" << '\n' ;  $ ~} else {  $ ~~cout << "NO" << '\n' ;  $ ~}  $ ~return 0 ;  $ }
int main ( ) {  $ ~long long n , k ;  $ ~cin >> n >> k ;  $ ~cout << ( ( n / k ) & 1 ? "YES" : "NO" ) << '\n' ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~long long n , x ;  $ ~cin >> n >> x ;  $ ~if ( ( n / x ) % 2 == 0 )  $ ~~cout << "NO" << endl ;  $ ~else  $ ~~cout << "YES" << endl ;  $ }
int main ( ) {  $ ~long long n , k ;  $ ~cin >> n >> k ;  $ ~if ( n / k % 2 != 0 ) {  $ ~~cout << "YES\n" ;  $ ~} else {  $ ~~cout << "NO\n" ;  $ ~}  $ ~return 0 ;  $ }
int main ( ) {  $ ~long long int n , k ;  $ ~cin >> n >> k ;  $ ~if ( ( n / k ) % 2 == 0 )  $ ~~cout << "NO\n" ;  $ ~else  $ ~~cout << "YES\n" ;  $ }
int main ( ) {  $ ~long long int n , k ;  $ ~cin >> n >> k ;  $ ~long long th = n / k ;  $ ~if ( th % 2 == 1 ) {  $ ~~cout << "YES" << endl ;  $ ~} else {  $ ~~cout << "NO" << endl ;  $ ~}  $ ~return 0 ;  $ }
int main ( ) {  $ ~long long int st , cross , t_turn ;  $ ~cin >> st >> cross ;  $ ~t_turn = st / cross ;  $ ~if ( ! ( t_turn & 1 ) )  $ ~~cout << "NO" << endl ;  $ ~else  $ ~~cout << "YES" << endl ;  $ }
int main ( ) {  $ ~long long n , k ;  $ ~cin >> n >> k ;  $ ~long long count = n / k ;  $ ~if ( count % 2 == 0 )  $ ~~cout << "NO" << endl ;  $ ~else  $ ~~cout << "YES" << endl ;  $ }
int main ( ) {  $ ~unsigned long long int k , n ;  $ ~cin >> n >> k ;  $ ~if ( ( n / k ) & 1 ) {  $ ~~cout << "YES" << endl ;  $ ~} else  $ ~~cout << "NO" << endl ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~long long n , k ;  $ ~cin >> n >> k ;  $ ~cout << ( ( n / k ) & 1 ? "YES" : "NO" ) << '\n' ;  $ ~return 0 ;  $ }
long long n , k , x ;  $ int main ( ) {  $ ~cin >> n >> k ;  $ ~x = n / k ;  $ ~if ( x % 2 == 0 ) {  $ ~~cout << "NO" << endl ;  $ ~} else {  $ ~~cout << "YES" << endl ;  $ ~}  $ ~return 0 ;  $ }
int main ( ) {  $ ~long long int n , k , s ;  $ ~while ( cin >> n >> k ) {  $ ~~s = n / k ;  $ ~~if ( s % 2 == 0 )  $ ~~~cout << "NO" << endl ;  $ ~~else  $ ~~~cout << "YES" << endl ;  $ ~}  $ ~return 0 ;  $ }
int main ( ) {  $ ~long long n , k , x ;  $ ~cin >> n >> k ;  $ ~x = n / k ;  $ ~if ( x % 2 == 0 ) {  $ ~~cout << "NO" << endl ;  $ ~} else {  $ ~~cout << "YES" << endl ;  $ ~}  $ ~return 0 ;  $ }
int main ( ) {  $ ~long long n , k ;  $ ~cin >> n >> k ;  $ ~if ( ( n / k ) % 2 == 0 ) {  $ ~~cout << "NO" << endl ;  $ ~} else {  $ ~~cout << "YES" << endl ;  $ ~}  $ }
long long n , k , x ;  $ int main ( ) {  $ ~cin >> n >> k ;  $ ~x = n / k ;  $ ~if ( x % 2 == 0 ) {  $ ~~cout << "NO" << endl ;  $ ~} else {  $ ~~cout << "YES" << endl ;  $ ~}  $ ~return 0 ;  $ }
int main ( ) {  $ ~long long n , m ;  $ ~cin >> n >> m ;  $ ~if ( ( n / m ) % 2 == 1 )  $ ~~cout << "YES\n" ;  $ ~else  $ ~~cout << "NO\n" ;  $ ~return 0 ;  $ }
void READ ( string INPUT = "NO" , string OUTPUT = "NO" ) {  $ ~if ( INPUT != "NO" ) freopen ( INPUT . c_str ( ) , "r" , stdin ) ;  $ ~if ( OUTPUT != "NO" ) freopen ( OUTPUT . c_str ( ) , "w" , stdout ) ;  $ }  $ int main ( ) {  $ ~long long n , k ;  $ ~cin >> n >> k ;  $ ~cout << ( ( n / k ) % 2 ? "YES" : "NO" ) << "\n" ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~long long int n , k ;  $ ~cin >> n >> k ;  $ ~if ( ( n / k ) % 2 == 0 )  $ ~~cout << "NO" << endl ;  $ ~else  $ ~~cout << "YES" << endl ;  $ }
int main ( ) {  $ ~long long int n , k , m ;  $ ~cin >> n >> k ;  $ ~m = 2 * k ;  $ ~if ( n % m >= k ) {  $ ~~cout << "YES" << endl ;  $ ~} else {  $ ~~cout << "NO" << endl ;  $ ~}  $ }
int main ( ) {  $ ~long long n , k ;  $ ~cin >> n >> k ;  $ ~if ( ( n / k ) % 2 == 0 )  $ ~~cout << "NO\n" ;  $ ~else  $ ~~cout << "YES\n" ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~long long n , k ;  $ ~cin >> n >> k ;  $ ~cout << ( ( ( n / k ) & 1 LL ) == 0 ? "NO\n" : "YES\n" ) ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~long long int n , k ;  $ ~cin >> n >> k ;  $ ~long long int h ;  $ ~h = n / k ;  $ ~if ( h % 2 == 0 ) {  $ ~~cout << "NO" << endl ;  $ ~} else {  $ ~~cout << "YES" << endl ;  $ ~}  $ }
void solve ( ) {  $ ~long long int n , k ;  $ ~cin >> n >> k ;  $ ~long long int pre = n / k ;  $ ~if ( pre % 2 != 0 ) {  $ ~~cout << "YES" << endl ;  $ ~} else {  $ ~~cout << "NO" << endl ;  $ ~}  $ }  $ int main ( ) {  $ ~long long int t = 1 ;  $ ~while ( t -- ) { solve ( ) ; }  $ ~return 0 ;  $ }
int main ( ) {  $ ~long long n , k ;  $ ~cin >> n >> k ;  $ ~if ( ( n / k ) % 2 == 0 )  $ ~~cout << "NO" << endl ;  $ ~else {  $ ~~cout << "YES" << endl ;  $ ~}  $ ~return 0 ;  $ }
const int N = 1e5 + 10 , INF = 1e9 + 7 ;  $ int main ( ) {  $ ~long long n , k ;  $ ~cin >> n >> k ;  $ ~cout << ( ( n / k ) % 2 ? "YES" : "NO" ) << '\n' ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~unsigned long long n , k , res ;  $ ~cin >> n >> k ;  $ ~res = n / k ;  $ ~if ( res & 1 )  $ ~~cout << "YES\n" ;  $ ~else  $ ~~cout << "NO\n" ;  $ ~return 0 ;  $ }
long long n , k , x ;  $ int main ( ) {  $ ~cin >> n >> k ;  $ ~x = n / k ;  $ ~if ( x % 2 == 0 ) {  $ ~~cout << "NO" << endl ;  $ ~} else {  $ ~~cout << "YES" << endl ;  $ ~}  $ ~return 0 ;  $ }
int main ( ) {  $ ~long long n , k ;  $ ~cin >> n >> k ;  $ ~puts ( ( n / k ) & 1 ? "YES" : "NO" ) ;  $ }
int main ( ) {  $ ~long long int x , a , b ;  $ ~cin >> a >> b ;  $ ~x = a / b ;  $ ~if ( x % 2 == 0 ) {  $ ~~cout << "NO" << endl ;  $ ~} else {  $ ~~cout << "YES" << endl ;  $ ~}  $ ~return 0 ;  $ }
long long n , m ;  $ int main ( ) {  $ ~cin >> n >> m ;  $ ~if ( n / m % 2 ) {  $ ~~cout << "YES\n" ;  $ ~} else  $ ~~cout << "NO\n" ;  $ }
int main ( ) {  $ ~long long n , k ;  $ ~cin >> n >> k ;  $ ~long long turnsDone = n / k ;  $ ~int remaining = n % k ;  $ ~if ( turnsDone % 2 == 1 )  $ ~~cout << "YES\n" ;  $ ~else  $ ~~cout << "NO\n" ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~long long n , k ;  $ ~cin >> n >> k ;  $ ~if ( ( n / k ) % 2 != 0 )  $ ~~cout << "YES" << endl ;  $ ~else  $ ~~cout << "NO" << endl ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~long long n , k ;  $ ~cin >> n >> k ;  $ ~if ( n / k % 2 != 0 ) {  $ ~~cout << "YES\n" ;  $ ~} else {  $ ~~cout << "NO\n" ;  $ ~}  $ ~return 0 ;  $ }
int main ( ) {  $ ~long long n , m , green , blue , yellow , foo , foobar ;  $ ~cin >> n >> m >> yellow >> green >> blue ;  $ ~foobar = ( blue * 3 ) + ( green ) ;  $ ~foo = ( yellow * 2 ) + ( green ) ;  $ ~cout << max ( 0 LL , foobar - m ) + max ( 0 LL , foo - n ) << endl ;  $ }
int main ( ) {  $ ~long long yc , bc , yb , gb , bb ;  $ ~cin >> yc >> bc ;  $ ~cin >> yb >> gb >> bb ;  $ ~long long yelo , blu ;  $ ~yelo = yb * 2 + gb ;  $ ~blu = 3 * bb + gb ;  $ ~yelo = yelo - yc ;  $ ~blu = blu - bc ;  $ ~if ( yelo >= 0 && blu >= 0 ) {  $ ~~cout << yelo + blu << endl ;  $ ~} else if ( yelo < 0 && blu >= 0 ) {  $ ~~cout << blu << endl ;  $ ~} else if ( yelo >= 0 && blu < 0 ) {  $ ~~cout << yelo << endl ;  $ ~} else {  $ ~~cout << 0 << endl ;  $ ~}  $ ~return 0 ;  $ }
int main ( ) {  $ ~long long int y , b , ye , gr , bl , a , c , ans = 0 ;  $ ~cin >> y >> b >> ye >> gr >> bl ;  $ ~a = ( 2 * ye ) + gr ;  $ ~c = ( 3 * bl ) + gr ;  $ ~if ( y - a < 0 ) { ans += a - y ; }  $ ~if ( b - c < 0 ) { ans += c - b ; }  $ ~cout << ans << endl ;  $ }
int main ( ) {  $ ~long long int a = 0 , b = 0 ;  $ ~cin >> a >> b ;  $ ~long long int x = 0 , y = 0 , z = 0 ;  $ ~cin >> x >> y >> z ;  $ ~long long int Y = 0 , B = 0 , t = 0 ;  $ ~Y = ( 2 * x ) + ( 1 * y ) ;  $ ~B = ( 1 * y ) + ( 3 * z ) ;  $ ~if ( Y > a ) {  $ ~~Y = Y - a ;  $ ~} else {  $ ~~Y = 0 ;  $ ~}  $ ~if ( B > b ) {  $ ~~B = B - b ;  $ ~} else {  $ ~~B = 0 ;  $ ~}  $ ~t = Y + B ;  $ ~cout << t << endl ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~long long a , b , x , y , z ;  $ ~cin >> a >> b >> x >> y >> z ;  $ ~long long yellow = 2 * x + y ;  $ ~long long blue = y + 3 * z ;  $ ~long long res = 0 ;  $ ~if ( a < yellow ) res += ( yellow - a ) ;  $ ~if ( b < blue ) res += ( blue - b ) ;  $ ~cout << res << "\n" ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~long long int n , t , m , k ;  $ ~long long int x , y , z ;  $ ~long long int a , b ;  $ ~cin >> a >> b ;  $ ~cin >> x >> y >> z ;  $ ~long long int yn , bn ;  $ ~yn = ( x * 2 + y ) ;  $ ~long long int dif = yn - a ;  $ ~long long int need = 0 ;  $ ~if ( dif >= 0 ) need += dif ;  $ ~bn = ( y + z * 3 ) ;  $ ~dif = ( bn - b ) ;  $ ~if ( dif >= 0 ) need += dif ;  $ ~cout << need << endl ;  $ ~return 0 ;  $ }
const int N = 1e6 + 10 ;  $ const int mod = 998244353 ;  $ long long a , b , x , y , z , q , p , r ;  $ int main ( ) {  $ ~cin >> a >> b >> x >> y >> z ;  $ ~q += 2 * x ;  $ ~q += y ;  $ ~p += y ;  $ ~p += 3 * z ;  $ ~cout << max ( r , q - a ) + max ( r , p - b ) << endl ;  $ }
long long n , m , a , b , c ;  $ long long Yellow , Blue , ans ;  $ int main ( ) {  $ ~cin >> n >> m >> a >> b >> c ;  $ ~Yellow = a * 2 + b ;  $ ~Blue = b + c * 3 ;  $ ~if ( Yellow > n ) ans += Yellow - n ;  $ ~if ( Blue > m ) ans += Blue - m ;  $ ~cout << ans << endl ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~long long int a , b , x , y , z , c , d , sum ;  $ ~cin >> a >> b ;  $ ~cin >> x >> y >> z ;  $ ~x = x * 2 + y ;  $ ~z = z * 3 + y ;  $ ~if ( a > x )  $ ~~c = 0 ;  $ ~else  $ ~~c = x - a ;  $ ~if ( b > z )  $ ~~d = 0 ;  $ ~else  $ ~~d = z - b ;  $ ~cout << c + d << endl ;  $ ~return 0 ;  $ }
long long a , b , x , y , z , na , nb , zer = 0 ;  $ int main ( ) {  $ ~cin >> a >> b >> x >> y >> z ;  $ ~na = x * 2 + y ;  $ ~nb = z * 3 + y ;  $ ~cout << max ( max ( na - a , zer ) + max ( nb - b , zer ) , zer ) << '\n' ;  $ }
int main ( ) {  $ ~long long n , m ;  $ ~cin >> n >> m ;  $ ~long long a , b , c ;  $ ~cin >> a >> b >> c ;  $ ~long long ans = max ( ( long long ) 0 , b + ( 2 * a ) - n ) ;  $ ~ans += max ( ( long long ) 0 , b + ( 3 * c ) - m ) ;  $ ~cout << ans << endl ;  $ }
int main ( ) {  $ ~long long a , b ;  $ ~cin >> a >> b ;  $ ~long long x , y , z ;  $ ~cin >> x >> y >> z ;  $ ~long long ans = 0 ;  $ ~if ( y > a ) {  $ ~~ans += y - a ;  $ ~~a = 0 ;  $ ~} else {  $ ~~a -= y ;  $ ~}  $ ~if ( y > b ) {  $ ~~ans += y - b ;  $ ~~b = 0 ;  $ ~} else {  $ ~~b -= y ;  $ ~}  $ ~if ( x * 2 > a ) ans += x * 2 - a ;  $ ~if ( z * 3 > b ) ans += z * 3 - b ;  $ ~cout << ans << endl ;  $ }
int main ( ) {  $ ~long long a , b ;  $ ~cin >> a >> b ;  $ ~long long x , y , z ;  $ ~cin >> x >> y >> z ;  $ ~long long reala = 2 * x + y , realb = y + 3 * z ;  $ ~cout << max ( reala - a , 0 ll ) + max ( realb - b , 0 ll ) << endl ;  $ }
int main ( ) {  $ ~long long a , b , ans = 0 ;  $ ~cin >> a >> b ;  $ ~long long a1 , a2 , a3 ;  $ ~cin >> a1 >> a2 >> a3 ;  $ ~a -= a1 * 2 ;  $ ~a -= a2 ;  $ ~b -= a2 ;  $ ~b -= 3 * a3 ;  $ ~if ( a < 0 ) ans += a ;  $ ~if ( b < 0 ) ans += b ;  $ ~cout << - ans << endl ;  $ ~;  $ }
long long n , m , a , b , c ;  $ long long Yellow , Blue , ans ;  $ int main ( ) {  $ ~cin >> n >> m >> a >> b >> c ;  $ ~Yellow = a * 2 + b ;  $ ~Blue = b + c * 3 ;  $ ~if ( Yellow >= n && Blue >= m )  $ ~~ans += Yellow + Blue - n - m ;  $ ~else if ( Yellow < n && Blue > m )  $ ~~ans += Blue - m ;  $ ~else if ( Yellow > n && Blue < m )  $ ~~ans += Yellow - n ;  $ ~cout << ans << endl ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~long long i , c = 0 , a , b , x , y , z ;  $ ~cin >> a >> b >> x >> y >> z ;  $ ~a -= x * 2 ;  $ ~a -= y ;  $ ~b -= y ;  $ ~b -= 3 * z ;  $ ~if ( a < 0 ) c += abs ( a ) ;  $ ~if ( b < 0 ) c += abs ( b ) ;  $ ~cout << c << endl ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~long long a , b , x , y , z ;  $ ~cin >> a >> b >> x >> y >> z ;  $ ~long long ans = 0 ;  $ ~if ( y <= a )  $ ~~a -= y ;  $ ~else {  $ ~~ans += ( y - a ) ;  $ ~~a = 0 ;  $ ~}  $ ~if ( y <= b )  $ ~~b -= y ;  $ ~else {  $ ~~ans += ( y - b ) ;  $ ~~b = 0 ;  $ ~}  $ ~if ( x * 2 <= a ) {  $ ~~a -= x * 2 ;  $ ~} else {  $ ~~ans += ( 2 * x - a ) ;  $ ~~a = 0 ;  $ ~}  $ ~if ( z * 3 <= b ) {  $ ~~b -= z * 3 ;  $ ~} else {  $ ~~ans += ( z * 3 - b ) ;  $ ~~b = 0 ;  $ ~}  $ ~cout << ans << endl ;  $ }
int main ( ) {  $ ~long long int n , m ;  $ ~cin >> n >> m ;  $ ~long long int x , y , z ;  $ ~cin >> x >> y >> z ;  $ ~long long int ans = 0 ;  $ ~if ( n >= 2 * x ) {  $ ~~n = n - 2 * x ;  $ ~} else {  $ ~~ans += 2 * x - n ;  $ ~~n = 0 ;  $ ~}  $ ~if ( m >= 3 * z ) {  $ ~~m = m - 3 * z ;  $ ~} else {  $ ~~ans += 3 * z - m ;  $ ~~m = 0 ;  $ ~}  $ ~if ( n < y ) { ans += y - n ; }  $ ~if ( m < y ) { ans += y - m ; }  $ ~cout << ans << endl ;  $ }
int main ( ) {  $ ~long long a , b , x , y , z ;  $ ~cin >> a >> b >> x >> y >> z ;  $ ~long long ans = 0 ;  $ ~long long sy , sb ;  $ ~sy = 2 * x + y - a ;  $ ~if ( sy < 0 ) { sy = 0 ; }  $ ~sb = 3 * z + y - b ;  $ ~if ( sb < 0 ) { sb = 0 ; }  $ ~ans += sy + sb ;  $ ~cout << ans << '\n' ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~long long i , c = 0 , a , b , x , y , z ;  $ ~cin >> a >> b >> x >> y >> z ;  $ ~a -= x * 2 ;  $ ~a -= y ;  $ ~b -= y ;  $ ~b -= 3 * z ;  $ ~if ( a < 0 ) c += abs ( a ) ;  $ ~if ( b < 0 ) c += abs ( b ) ;  $ ~cout << c << endl ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~long long int a , b , ans ;  $ ~cin >> a >> b ;  $ ~long long int x , y , z ;  $ ~cin >> x >> y >> z ;  $ ~long long int ye = ( 2 * x ) + y ;  $ ~long long int bl = y + ( 3 * z ) ;  $ ~long long int n = ye - a ;  $ ~long long int m = bl - b ;  $ ~if ( n < 0 ) { n = 0 ; }  $ ~if ( m < 0 ) { m = 0 ; }  $ ~ans = n + m ;  $ ~cout << ans << endl ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~long long a , b , c , d , e , ans = 0 ;  $ ~cin >> a >> b >> c >> d >> e ;  $ ~if ( c * 2 + d - a > 0 ) ans += ( c * 2 + d ) - a ;  $ ~if ( d + e * 3 - b > 0 ) ans += ( d + e * 3 ) - b ;  $ ~cout << ans << endl ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~long long A , B ;  $ ~long long x , y , z ;  $ ~cin >> A >> B ;  $ ~cin >> x >> y >> z ;  $ ~long long yello = 0 , green = 0 , bule = 0 ;  $ ~yello = x * 2 + y ;  $ ~bule = z * 3 + y ;  $ ~long long sum1 = yello - A ;  $ ~long long sum2 = bule - B ;  $ ~if ( sum1 < 0 ) sum1 = 0 ;  $ ~if ( sum2 < 0 ) sum2 = 0 ;  $ ~cout << sum1 + sum2 << endl ;  $ }
int main ( ) {  $ ~long long A , B , x , y , z , a = 0 ;  $ ~cin >> A >> B >> x >> y >> z ;  $ ~if ( A < ( x * 2 + y ) ) { a += ( ( x * 2 ) + y - A ) ; }  $ ~if ( B < ( y + z * 3 ) ) { a += ( y + ( z * 3 ) - B ) ; }  $ ~cout << a << endl ;  $ }
int main ( ) {  $ ~long long n , m , a , b , c , ans1 = 0 , ans2 = 0 , sum = 0 ;  $ ~cin >> n >> m ;  $ ~cin >> a >> b >> c ;  $ ~ans1 = a * 2 + b * 1 ;  $ ~ans2 = b * 1 + c * 3 ;  $ ~sum = ans1 > n ? ans1 - n : 0 ;  $ ~sum += ans2 > m ? ans2 - m : 0 ;  $ ~cout << sum << endl ;  $ ~return 0 ;  $ }
const int N = 1 << 20 ;  $ int main ( ) {  $ ~long long a , b ;  $ ~cin >> a >> b ;  $ ~long long ye , bl , g ;  $ ~cin >> ye >> g >> bl ;  $ ~long long y1 = 2 * ye ;  $ ~long long y2 = g ;  $ ~long long b1 = g ;  $ ~long long b2 = 3 * bl ;  $ ~long long ans1 , ans2 ;  $ ~if ( a >= y1 + y2 )  $ ~~ans1 = 0 ;  $ ~else  $ ~~ans1 = abs ( a - ( y1 + y2 ) ) ;  $ ~if ( b > b1 + b2 )  $ ~~ans2 = 0 ;  $ ~else  $ ~~ans2 = abs ( b - ( b1 + b2 ) ) ;  $ ~cout << ans1 + ans2 << endl ;  $ }
int main ( ) {  $ ~long long a , b , x , y , z , q = 0 , w = 0 ;  $ ~cin >> a >> b ;  $ ~cin >> x >> y >> z ;  $ ~q = 2 * x + y ;  $ ~w = y + 3 * z ;  $ ~long long ans = 0 ;  $ ~if ( ( q - a ) > 0 ) ans = q - a ;  $ ~if ( ( w - b ) > 0 ) ans += ( w - b ) ;  $ ~cout << ans << '\n' ;  $ }
const int maxn = 1e5 + 10 ;  $ int a , b , c , n ;  $ int main ( ) {  $ ~while ( cin >> a >> b >> c >> n ) {  $ ~~if ( a < c || b < c ) {  $ ~~~cout << - 1 << endl ;  $ ~~} else {  $ ~~~int num = ( a - c ) + ( b - c ) + c ;  $ ~~~if ( num >= n ) {  $ ~~~~cout << - 1 << endl ;  $ ~~~} else {  $ ~~~~cout << n - num << endl ;  $ ~~~}  $ ~~}  $ ~}  $ ~return 0 ;  $ }
int main ( ) {  $ ~int a , b , c , n ;  $ ~cin >> a >> b >> c >> n ;  $ ~int d = a - c ;  $ ~int e = b - c ;  $ ~int f = n - d - e - c ;  $ ~if ( d >= 0 && e >= 0 && c >= 0 && f > 0 )  $ ~~cout << f << endl ;  $ ~else  $ ~~cout << - 1 << endl ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~long long int a , b , c , n ;  $ ~cin >> a >> b >> c >> n ;  $ ~int temp = min ( a , b ) ;  $ ~if ( c > temp ) {  $ ~~cout << "-1\n" ;  $ ~~return 0 ;  $ ~}  $ ~if ( ( a + b ) - c < n ) {  $ ~~cout << n - ( ( a + b ) - c ) << endl ;  $ ~} else {  $ ~~cout << "-1\n" ;  $ ~}  $ ~return 0 ;  $ }
int main ( ) {  $ ~int a , b , c , n ;  $ ~while ( cin >> a >> b >> c >> n ) {  $ ~~int res = - 1 ;  $ ~~if ( ( a <= n ) && ( b <= n ) && ( c <= n ) ) {  $ ~~~int onlyA = a - c ;  $ ~~~int onlyB = b - c ;  $ ~~~if ( ( onlyA >= 0 && onlyB >= 0 ) && ( onlyA + onlyB < n ) ) { res = n - onlyA - onlyB - c ; }  $ ~~}  $ ~~if ( res == 0 ) { res = - 1 ; }  $ ~~cout << res << endl ;  $ ~}  $ }
int main ( ) {  $ ~int a , b , c , d ;  $ ~cin >> a >> b >> c >> d ;  $ ~if ( a + b - c >= d || c > a || c > b )  $ ~~cout << "-1" << endl ;  $ ~else  $ ~~cout << d - ( a + b - c ) << endl ;  $ ~return 0 ;  $ }
int a , b , c , n , i ;  $ int main ( ) {  $ ~cin >> a >> b >> c >> n ;  $ ~if ( a + b - c + 1 > n || c > a || c > b || c > a + b || c > n ) {  $ ~~cout << - 1 << endl ;  $ ~} else  $ ~~cout << n + c - a - b << endl ;  $ }
int A , B , C , N ;  $ int main ( ) {  $ ~cin >> A >> B >> C >> N ;  $ ~bool con = false ;  $ ~if ( A > N || B > N || C > N ) con = true ;  $ ~if ( C > A || C > B ) con = true ;  $ ~int T = A + B - C ;  $ ~if ( T >= N ) con = true ;  $ ~cout << ( ( con ) ? - 1 : N - T ) << '\n' ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~int a , b , c , n , sum ;  $ ~while ( cin >> a >> b >> c >> n ) {  $ ~~sum = a + b - c ;  $ ~~if ( sum >= n || a < c || b < c ) {  $ ~~~cout << "-1" << endl ;  $ ~~~continue ;  $ ~~} else  $ ~~~cout << n - sum << endl ;  $ ~}  $ ~return 0 ;  $ }
int main ( ) {  $ ~int a , b , c , n ;  $ ~cin >> a >> b >> c >> n ;  $ ~int x = n - ( a - c + b ) ;  $ ~if ( x < 1 || a < c || b < c || a > n || b > n || c > n )  $ ~~cout << "-1\n" ;  $ ~else  $ ~~cout << x << endl ;  $ }
int main ( ) {  $ ~int flag = 0 ;  $ ~long long ans ;  $ ~long long res ;  $ ~int a , b , c , n ;  $ ~cin >> a >> b >> c >> n ;  $ ~if ( c > a || c > b )  $ ~~flag = 1 ;  $ ~else {  $ ~~res = a + b - c ;  $ ~~ans = n - res ;  $ ~}  $ ~if ( flag == 1 )  $ ~~cout << "-1" << endl ;  $ ~else {  $ ~~if ( ans <= 0 )  $ ~~~cout << "-1" << endl ;  $ ~~else  $ ~~~cout << ans << endl ;  $ ~}  $ ~return 0 ;  $ }
int main ( ) {  $ ~int a , b , c , n ;  $ ~cin >> a >> b >> c >> n ;  $ ~if ( a + b - c < n && c <= a && c <= b ) {  $ ~~cout << n + c - a - b << endl ;  $ ~} else  $ ~~cout << "-1\n" ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~int n , a , b , c ;  $ ~cin >> a >> b >> c >> n ;  $ ~if ( a < c || b < c ) {  $ ~~cout << - 1 << endl ;  $ ~~return 0 ;  $ ~}  $ ~int ans = n - ( a + b - c ) ;  $ ~if ( ans >= 1 ) {  $ ~~cout << ans << endl ;  $ ~} else {  $ ~~cout << - 1 << endl ;  $ ~}  $ }
int main ( ) {  $ ~int A , B , C , N ;  $ ~cin >> A >> B >> C >> N ;  $ ~if ( ( ( A + B - C ) < N ) && ( A >= C ) && ( B >= C ) ) {  $ ~~cout << ( N - ( A + B - C ) ) << endl ;  $ ~} else {  $ ~~cout << "-1" << endl ;  $ ~}  $ ~return 0 ;  $ }
const int INF = 0 x3f3f3f3f ;  $ int main ( ) {  $ ~int i , j , k ;  $ ~int n , m , t ;  $ ~int a , b , c , d ;  $ ~cin >> a >> b >> c >> d ;  $ ~if ( c > b || c > a ) {  $ ~~cout << - 1 << endl ;  $ ~~return 0 ;  $ ~}  $ ~a = a + b - c ;  $ ~d -= a ;  $ ~if ( d < 1 || a < 0 )  $ ~~cout << - 1 << endl ;  $ ~else  $ ~~cout << d << endl ;  $ ~return 0 ;  $ }
int a , b , c , n ;  $ int main ( ) {  $ ~cin >> a >> b >> c >> n ;  $ ~int num = a + b - c ;  $ ~int t = n - 1 ;  $ ~if ( t >= num && num >= 0 && a >= c && b >= c )  $ ~~cout << t - num + 1 << endl ;  $ ~else  $ ~~cout << "-1" << endl ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~int a , b , c , n ;  $ ~cin >> a >> b >> c >> n ;  $ ~if ( a > n || c > b || c > a || ( a + b - c >= n ) ) {  $ ~~cout << - 1 << endl ;  $ ~~return 0 ;  $ ~}  $ ~if ( n - a - b + c >= 1 )  $ ~~cout << n - a - b + c << endl ;  $ ~else  $ ~~cout << - 1 << endl ;  $ ~return 0 ;  $ }
int a , b , c , n ;  $ int solve ( ) {  $ ~int k = a + b - c ;  $ ~if ( c > min ( a , b ) ) { return - 1 ; }  $ ~if ( k < 0 ) return - 1 ;  $ ~if ( n - k < 1 ) { return - 1 ; }  $ ~return n - k ;  $ }  $ int main ( ) {  $ ~cin >> a >> b >> c >> n ;  $ ~cout << solve ( ) << "\n" ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~int a , b , c , d ;  $ ~cin >> a >> b >> c >> d ;  $ ~int temp = d - ( a + b - c ) ;  $ ~if ( c > a || c > b || a + b - c >= d )  $ ~~cout << - 1 << endl ;  $ ~else  $ ~~cout << temp << endl ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~int A , B , C , N ;  $ ~cin >> A >> B >> C >> N ;  $ ~if ( ( A + B - C <= N - 1 ) && ( A < N && B < N && C <= A && C <= B ) )  $ ~~cout << N - ( A + B - C ) << endl ;  $ ~else  $ ~~cout << - 1 << endl ;  $ }
const int MAX = 2e5 + 5 ;  $ const int INF = 0 x3f3f3f3f ;  $ map < char , int > mp ;  $ map < char , int > : : iterator it ;  $ int main ( ) {  $ ~int i , j , k , n , m , a , b , c ;  $ ~cin >> a >> b >> c >> n ;  $ ~if ( a + b - c >= n || c > a || c > b ) {  $ ~~puts ( "-1" ) ;  $ ~~return 0 ;  $ ~}  $ ~cout << n - ( a + b - c ) << endl ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~long long a , b , c , d ;  $ ~while ( cin >> a >> b >> c >> d ) {  $ ~~long long ans = d - a - b + c ;  $ ~~if ( ans > 0 && a >= c && b >= c )  $ ~~~cout << ans << endl ;  $ ~~else  $ ~~~cout << - 1 << endl ;  $ ~}  $ }
int main ( ) {  $ ~int a , b , c , n , output ;  $ ~cin >> a >> b >> c >> n ;  $ ~output = n - ( a + b - c ) ;  $ ~if ( ( a + b - c ) >= n || c > a || c > b )  $ ~~cout << - 1 << endl ;  $ ~else  $ ~~cout << output << endl ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~int a , b , c , n ;  $ ~cin >> a >> b >> c >> n ;  $ ~if ( a < c || b < c ) {  $ ~~cout << - 1 << endl ;  $ ~~return 0 ;  $ ~}  $ ~int all = a + b - c ;  $ ~if ( all <= n - 1 ) {  $ ~~cout << n - all << endl ;  $ ~} else {  $ ~~cout << - 1 << endl ;  $ ~}  $ ~return 0 ;  $ }
int main ( ) {  $ ~int a , b , c , n ;  $ ~cin >> a >> b >> c >> n ;  $ ~if ( ( a + b - c ) >= n || a < c || b < c )  $ ~~cout << "-1" << endl ;  $ ~else  $ ~~cout << n - a - b + c << endl ;  $ }
const int N = 400000 + 10 ;  $ int main ( ) {  $ ~int x , y , z , n ;  $ ~while ( cin >> x >> y >> z >> n ) {  $ ~~x -= z ;  $ ~~y -= z ;  $ ~~int ans = n - x - y - z ;  $ ~~if ( x < 0 || y < 0 || ans <= 0 )  $ ~~~cout << - 1 << endl ;  $ ~~else  $ ~~~cout << ans << endl ;  $ ~}  $ ~return 0 ;  $ }
int a , b , c , n ;  $ int x , y , z ;  $ int main ( ) {  $ ~while ( cin >> a >> b >> c >> n ) {  $ ~~x = a - c ;  $ ~~y = b - c ;  $ ~~z = x + y + c ;  $ ~~if ( z >= n || a < c || b < c )  $ ~~~cout << "-1" << endl ;  $ ~~else  $ ~~~cout << n - z << endl ;  $ ~}  $ ~return 0 ;  $ }
int main ( ) {  $ ~int a , b , c , n ;  $ ~while ( cin >> a >> b >> c >> n ) {  $ ~~int ans = a + b - c ;  $ ~~ans = n - ans ;  $ ~~if ( ans <= 0 || a < c || b < c )  $ ~~~cout << - 1 << endl ;  $ ~~else  $ ~~~cout << ans << endl ;  $ ~}  $ ~return 0 ;  $ }
int main ( ) {  $ ~int a , b , c , n ;  $ ~cin >> a >> b >> c >> n ;  $ ~int sum = a + b - c ;  $ ~if ( sum >= n || a > n || b > n || c > n || n == 0 || c > a || c > b ) {  $ ~~cout << - 1 << endl ;  $ ~} else {  $ ~~cout << n - sum << endl ;  $ ~}  $ ~return 0 ;  $ }
int main ( ) {  $ ~int a , b , c , n ;  $ ~cin >> a >> b >> c >> n ;  $ ~if ( a < c || b < c ) {  $ ~~cout << "-1\n" ;  $ ~~return 0 ;  $ ~}  $ ~int ans = n - ( a + b - c ) ;  $ ~if ( ans < 1 ) {  $ ~~cout << "-1\n" ;  $ ~} else {  $ ~~cout << ans << endl ;  $ ~}  $ }
int main ( ) {  $ ~long long a , b , c , n , k ;  $ ~cin >> a >> b >> c >> n ;  $ ~k = a + b - c ;  $ ~k = n - k ;  $ ~if ( ( ( k >= 1 ) ) && ( c <= a ) && ( c <= b ) )  $ ~~cout << k << endl ;  $ ~else  $ ~~cout << - 1 << endl ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~int a , b , c , d ;  $ ~cin >> a >> b >> c >> d ;  $ ~if ( a + b - c >= d || c > a || c > b )  $ ~~cout << "-1" << endl ;  $ ~else  $ ~~cout << d - ( a + b - c ) << endl ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~int n ;  $ ~cin >> n ;  $ ~vector < int > a ( n ) ;  $ ~int mx = 0 ;  $ ~for ( int i = 0 ; i < n ; i ++ ) {  $ ~~cin >> a [ i ] ;  $ ~~mx = max ( mx , a [ i ] ) ;  $ ~}  $ ~int ans = 1e9 ;  $ ~for ( int k = mx ; k <= 1e5 ; k ++ ) {  $ ~~int x , y ;  $ ~~x = y = 0 ;  $ ~~for ( int i = 0 ; i < n ; i ++ ) {  $ ~~~x += a [ i ] ;  $ ~~~y += k - a [ i ] ;  $ ~~}  $ ~~if ( y > x ) {  $ ~~~cout << k << '\n' ;  $ ~~~return 0 ;  $ ~~}  $ ~}  $ ~return 0 ;  $ }
int main ( ) {  $ ~int n ;  $ ~cin >> n ;  $ ~int sum = 0 , x , mx = 0 ;  $ ~for ( int i = 0 ; i < n ; i ++ ) {  $ ~~cin >> x ;  $ ~~sum += x ;  $ ~~mx = max ( mx , x ) ;  $ ~}  $ ~sum *= 2 ;  $ ~sum ++ ;  $ ~cout << max ( ( int ) ceil ( ( double ) sum / n ) , mx ) << endl ;  $ }
int n , ans , a [ 105 ] , ma , sum ;  $ int gets ( ) {  $ ~int v = 0 ;  $ ~bool f = 0 ;  $ ~char ch ;  $ ~while ( ! isdigit ( ch = getchar ( ) ) )  $ ~~if ( ch == '-' ) f = 1 ;  $ ~v = ch - 48 ;  $ ~while ( isdigit ( ch = getchar ( ) ) ) v = v * 10 + ch - 48 ;  $ ~return f ? - v : v ;  $ }  $ int main ( ) {  $ ~n = gets ( ) ;  $ ~for ( int i = 1 ; i <= n ; i ++ ) a [ i ] = gets ( ) , ma = max ( ma , a [ i ] ) , sum += a [ i ] ;  $ ~ans = sum * 2 / n + 1 ;  $ ~ans = max ( ans , ma ) ;  $ ~cout << ans << endl ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~int n ;  $ ~cin >> n ;  $ ~int * a = new int [ n ] ;  $ ~int sum = 0 ;  $ ~int max ;  $ ~for ( int i = 0 ; i < n ; i ++ ) {  $ ~~cin >> a [ i ] ;  $ ~~sum = sum + a [ i ] ;  $ ~~if ( i == 0 ) {  $ ~~~max = a [ i ] ;  $ ~~} else {  $ ~~~if ( a [ i ] > max ) { max = a [ i ] ; }  $ ~~}  $ ~}  $ ~int f = ( 2 * sum / n ) + 1 ;  $ ~if ( f > max ) {  $ ~~cout << f << endl ;  $ ~} else {  $ ~~cout << max << endl ;  $ ~}  $ ~return 0 ;  $ }
int main ( ) {  $ ~int n ;  $ ~int mx = 0 ;  $ ~int sum = 0 ;  $ ~cin >> n ;  $ ~int a ;  $ ~for ( int i = 1 ; i <= n ; ++ i ) {  $ ~~cin >> a ;  $ ~~mx = max ( mx , a ) ;  $ ~~sum += a ;  $ ~}  $ ~sum *= 2 ;  $ ~sum += n ;  $ ~sum /= n ;  $ ~cout << max ( sum , mx ) << endl ;  $ }
int main ( ) {  $ ~int n , i , j , a [ 100002 ] ;  $ ~cin >> n ;  $ ~int sum = 0 ;  $ ~int mx = - 1 ;  $ ~for ( i = 0 ; i < n ; i ++ ) {  $ ~~cin >> a [ i ] ;  $ ~~sum += a [ i ] ;  $ ~~mx = max ( mx , a [ i ] ) ;  $ ~}  $ ~while ( 1 ) {  $ ~~if ( mx * n - sum > sum ) {  $ ~~~cout << mx << endl ;  $ ~~~return 0 ;  $ ~~} else {  $ ~~~mx ++ ;  $ ~~}  $ ~}  $ ~return 0 ;  $ }
int n ;  $ int main ( ) {  $ ~cin >> n ;  $ ~int sum = 0 , temp , Max = 0 ;  $ ~for ( int i = 0 ; i < n ; i ++ ) {  $ ~~cin >> temp ;  $ ~~if ( temp > Max ) Max = temp ;  $ ~~sum += temp ;  $ ~}  $ ~cout << max ( Max , sum * 2 / n + 1 ) << endl ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~int n ;  $ ~cin >> n ;  $ ~int ans = 0 , mayor = 0 , a ;  $ ~for ( int i = 0 ; i < n ; i ++ ) {  $ ~~cin >> a ;  $ ~~ans = ans + a ;  $ ~~mayor = max ( mayor , a ) ;  $ ~}  $ ~ans = max ( ( ans * 2 ) / n + 1 , mayor ) ;  $ ~cout << ans << endl ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~long long n ;  $ ~cin >> n ;  $ ~long long a [ n ] ;  $ ~long long maxi = 0 ;  $ ~long long sum = 0 ;  $ ~for ( long long i = 0 , _n = ( n ) ; i < _n ; i ++ ) {  $ ~~cin >> a [ i ] ;  $ ~~maxi = max ( maxi , a [ i ] ) ;  $ ~~sum = sum + a [ i ] ;  $ ~}  $ ~long long k = 0 ;  $ ~while ( n * k <= 2 * sum ) k ++ ;  $ ~if ( k < maxi ) k = maxi ;  $ ~cout << k << endl ;  $ }
int main ( ) {  $ ~int n , sum = 0 , sum1 = 0 , ans ;  $ ~cin >> n ;  $ ~int ar [ n ] ;  $ ~for ( int i = 0 ; i < n ; i ++ ) {  $ ~~cin >> ar [ i ] ;  $ ~~sum += ar [ i ] ;  $ ~}  $ ~sort ( ar , ar + n ) ;  $ ~for ( int i = ar [ n - 1 ] ; ; i ++ ) {  $ ~~sum1 = 0 ;  $ ~~for ( int j = 0 ; j < n ; j ++ ) sum1 += ( i - ar [ j ] ) ;  $ ~~if ( sum1 > sum ) {  $ ~~~ans = i ;  $ ~~~break ;  $ ~~}  $ ~}  $ ~cout << ans << endl ;  $ }
int main ( ) {  $ ~int n ;  $ ~cin >> n ;  $ ~int a [ n ] ;  $ ~int sum = 0 ;  $ ~for ( int i = 0 ; i < n ; i ++ ) {  $ ~~cin >> a [ i ] ;  $ ~~sum += a [ i ] ;  $ ~}  $ ~int k = ( 2 * sum ) / n + 1 ;  $ ~sort ( a , a + n ) ;  $ ~if ( k >= a [ n - 1 ] )  $ ~~cout << k << endl ;  $ ~else  $ ~~cout << a [ n - 1 ] << endl ;  $ }
int main ( ) {  $ ~int n ;  $ ~cin >> n ;  $ ~vector < int > arr ( n ) ;  $ ~int max = INT_MIN , sum = 0 ;  $ ~for ( int i = 0 ; i < n ; i ++ ) {  $ ~~cin >> arr [ i ] ;  $ ~~sum += arr [ i ] ;  $ ~~if ( max < arr [ i ] ) max = arr [ i ] ;  $ ~}  $ ~if ( n * max > 2 * sum )  $ ~~cout << max << endl ;  $ ~else {  $ ~~if ( ( 2 * sum ) % n == 0 )  $ ~~~cout << ( 2 * sum ) / n + 1 << endl ;  $ ~~else  $ ~~~cout << ceil ( ( 2 . * sum ) / n ) << endl ;  $ ~}  $ ~return 0 ;  $ }
int main ( ) {  $ ~int n ;  $ ~cin >> n ;  $ ~int * d = new int [ n ] ;  $ ~int k = 0 , s = 0 ;  $ ~for ( int i = 0 ; i < n ; i ++ ) {  $ ~~cin >> d [ i ] ;  $ ~~s += d [ i ] ;  $ ~~k = max ( k , d [ i ] ) ;  $ ~}  $ ~int sum = 0 ;  $ ~do {  $ ~~sum = 0 ;  $ ~~for ( int i = 0 ; i < n ; i ++ ) sum += k - d [ i ] ;  $ ~~k ++ ;  $ ~} while ( sum <= s ) ;  $ ~cout << k - 1 << endl ;  $ }
int main ( ) {  $ ~int n , s = 0 , k = 0 ;  $ ~cin >> n ;  $ ~for ( int i = 1 ; i <= n ; ++ i ) {  $ ~~int a ;  $ ~~cin >> a ;  $ ~~k = max ( k , a ) ;  $ ~~s += a ;  $ ~}  $ ~for ( ; n * k <= 2 * s ; ++ k )  $ ~~;  $ ~cout << k << '\n' ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~int n , sum = 0 , ans = 0 ;  $ ~cin >> n ;  $ ~int arr [ n ] ;  $ ~for ( int i = 0 ; i < n ; i ++ ) {  $ ~~cin >> arr [ i ] ;  $ ~~sum += arr [ i ] ;  $ ~}  $ ~sort ( arr , arr + n ) ;  $ ~for ( int i = 0 ; i < n - 1 ; i ++ ) { ans += - arr [ i ] + arr [ n - 1 ] ; }  $ ~while ( 1 ) {  $ ~~if ( ans > sum ) { break ; }  $ ~~ans += n ;  $ ~~arr [ n - 1 ] ++ ;  $ ~}  $ ~cout << arr [ n - 1 ] << endl ;  $ }
int main ( ) {  $ ~int n ;  $ ~cin >> n ;  $ ~vector < int > arr ( n + 5 ) ;  $ ~int max_val = 0 ;  $ ~long long sum = 0 ;  $ ~for ( int i = 0 ; i < n ; i ++ ) {  $ ~~cin >> arr [ i ] ;  $ ~~max_val = max ( max_val , arr [ i ] ) ;  $ ~~sum += arr [ i ] ;  $ ~}  $ ~int i = max_val ;  $ ~for ( ; i < 10000 ; i ++ ) {  $ ~~long long val = i * n - sum ;  $ ~~if ( val > sum ) break ;  $ ~}  $ ~cout << i << endl ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~long long int n , i , sum = 0 , max1 = 0 , ans , sum1 , i1 , j ;  $ ~cin >> n ;  $ ~long long int a [ n + 2 ] ;  $ ~for ( i = 0 ; i < n ; i ++ ) {  $ ~~cin >> a [ i ] ;  $ ~~sum = sum + a [ i ] ;  $ ~~max1 = max ( max1 , a [ i ] ) ;  $ ~}  $ ~for ( j = max1 ; j <= ( max1 * 2 ) + 2 ; j ++ ) {  $ ~~sum1 = 0 ;  $ ~~for ( i1 = 0 ; i1 < n ; i1 ++ ) { sum1 = sum1 + ( j - a [ i1 ] ) ; }  $ ~~if ( sum1 > sum ) {  $ ~~~ans = j ;  $ ~~~break ;  $ ~~}  $ ~}  $ ~cout << ans << endl ;  $ }
int main ( ) {  $ ~int n , i , j , k1 , k = 0 , suma = 0 , sumb = 0 ;  $ ~cin >> n ;  $ ~int a [ n ] ;  $ ~for ( i = 0 ; i < n ; i ++ ) {  $ ~~cin >> a [ i ] ;  $ ~~if ( a [ i ] > k ) { k = a [ i ] ; }  $ ~~suma += a [ i ] ;  $ ~}  $ ~for ( i = 0 ; i < n ; i ++ ) { sumb += k - a [ i ] ; }  $ ~for ( i = 0 ; ; i ++ ) {  $ ~~if ( sumb <= suma ) {  $ ~~~sumb = 0 ;  $ ~~~k ++ ;  $ ~~~for ( j = 0 ; j < n ; j ++ ) { sumb += k - a [ j ] ; }  $ ~~} else {  $ ~~~break ;  $ ~~}  $ ~}  $ ~cout << k << endl ;  $ }
int value [ 101 ] ;  $ int main ( ) {  $ ~int n , k = - 1 , sum = 0 ;  $ ~cin >> n ;  $ ~for ( int i = 0 ; i < n ; i ++ ) {  $ ~~cin >> value [ i ] ;  $ ~~sum += value [ i ] ;  $ ~~if ( value [ i ] > k ) k = value [ i ] ;  $ ~}  $ ~while ( k * n - sum <= sum ) { k ++ ; }  $ ~cout << k << endl ;  $ }
int main ( ) {  $ ~int n ;  $ ~cin >> n ;  $ ~int a [ n ] , sum = 0 ;  $ ~for ( int i = 0 ; i < n ; i ++ ) {  $ ~~int k ;  $ ~~cin >> k ;  $ ~~a [ i ] = k ;  $ ~~sum = sum + a [ i ] ;  $ ~}  $ ~int lar = a [ 0 ] ;  $ ~for ( int i = 1 ; i < n ; i ++ ) {  $ ~~if ( lar < a [ i ] ) lar = a [ i ] ;  $ ~}  $ ~for ( int j = lar ; ; j ++ ) {  $ ~~if ( j * n > ( 2 * sum ) ) {  $ ~~~cout << j << endl ;  $ ~~~break ;  $ ~~}  $ ~}  $ }
int main ( ) {  $ ~int n , a [ 200 ] ;  $ ~cin >> n ;  $ ~int sum1 = 0 , k = 0 ;  $ ~for ( int i = 0 ; i < n ; i ++ ) {  $ ~~cin >> a [ i ] ;  $ ~~sum1 += a [ i ] ;  $ ~~k = max ( k , a [ i ] ) ;  $ ~}  $ ~int flag = 0 ;  $ ~while ( ! flag ) {  $ ~~int sum2 = 0 ;  $ ~~for ( int i = 0 ; i < n ; i ++ ) { sum2 += k - a [ i ] ; }  $ ~~if ( sum2 > sum1 ) {  $ ~~~flag = 1 ;  $ ~~} else {  $ ~~~k ++ ;  $ ~~}  $ ~}  $ ~cout << k << endl ;  $ ~return 0 ;  $ }
long long const mod = 1e9 + 7 ;  $ long long power ( long long x , long long y , long long mod = 2e18 ) {  $ ~long long ans = 1 ;  $ ~x %= mod ;  $ ~while ( y ) {  $ ~~if ( y & 1 ) ans = ( x * ans ) % mod ;  $ ~~x = ( x * x ) % mod ;  $ ~~y >> = 1 ;  $ ~}  $ ~return ans ;  $ }  $ long long gcd ( long long a , long long b ) {  $ ~if ( a == 0 ) return b ;  $ ~return gcd ( b % a , a ) ;  $ }  $ int main ( ) {  $ ~long long n , id1 , id2 ;  $ ~cin >> n >> id1 >> id2 ;  $ ~string second ;  $ ~cin >> second ;  $ ~if ( second [ id1 - 1 ] == second [ id2 - 1 ] ) {  $ ~~cout << 0 << endl ;  $ ~} else {  $ ~~cout << 1 << endl ;  $ ~}  $ ~return 0 ;  $ }
int main ( ) {  $ ~int n , a , b ;  $ ~string s ;  $ ~int ans ;  $ ~cin >> n >> a >> b >> s ;  $ ~if ( s [ a - 1 ] == s [ b - 1 ] ) {  $ ~~ans = 0 ;  $ ~} else {  $ ~~ans = 1 ;  $ ~}  $ ~cout << ans << '\n' ;  $ ~return 0 ;  $ }
const int inf = 0 x3f3f3f3f ;  $ int main ( ) {  $ ~int n , a , b ;  $ ~cin >> n >> a >> b ;  $ ~string s ;  $ ~cin >> s ;  $ ~if ( s [ a - 1 ] == s [ b - 1 ] ) {  $ ~~cout << 0 << endl ;  $ ~~return 0 ;  $ ~}  $ ~set < int > st ;  $ ~char ch = ' ' ;  $ ~int pos = 0 ;  $ ~for ( int i = 0 ; i < s . size ( ) ; i ++ ) {  $ ~~if ( ch == ' ' ) {  $ ~~~ch = s [ i ] ;  $ ~~~continue ;  $ ~~}  $ ~~if ( s [ i ] == ch ) {  $ ~~~pos = i ;  $ ~~} else {  $ ~~~st . insert ( i - pos ) ;  $ ~~~pos = i ;  $ ~~~ch = s [ i ] ;  $ ~~}  $ ~}  $ ~cout << * st . end ( ) << endl ;  $ ~return 0 ;  $ }
bool vis [ 200005 ] ;  $ int cnt [ 200005 ] , freq [ 200005 ] ;  $ int main ( ) {  $ ~int n , a , b ;  $ ~cin >> n >> a >> b ;  $ ~string s ;  $ ~cin >> s ;  $ ~if ( s [ a - 1 ] == s [ b - 1 ] )  $ ~~puts ( "0" ) ;  $ ~else  $ ~~puts ( "1" ) ;  $ ~return 0 ;  $ }
int n , a , b ;  $ string s ;  $ int main ( ) {  $ ~cin >> n >> a >> b >> s ;  $ ~a -- ;  $ ~b -- ;  $ ~if ( s [ a ] != s [ b ] ) {  $ ~~cout << 1 << endl ;  $ ~} else {  $ ~~cout << 0 << endl ;  $ ~}  $ ~return 0 ;  $ }
int main ( ) {  $ ~int n , a , b ;  $ ~cin >> n >> a >> b ;  $ ~char arr [ n + 2 ] ;  $ ~for ( int i = 0 ; i < n ; i ++ ) cin >> arr [ i ] ;  $ ~if ( arr [ a - 1 ] == arr [ b - 1 ] )  $ ~~cout << 0 << endl ;  $ ~else  $ ~~cout << 1 << endl ;  $ ~return 0 ;  $ }
string s ;  $ int main ( ) {  $ ~int n , a , b ;  $ ~cin >> n >> a >> b >> s ;  $ ~if ( ( a == b ) || ( s [ a - 1 ] == s [ b - 1 ] ) )  $ ~~cout << "0" << endl ;  $ ~else  $ ~~cout << "1" << endl ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~int n , a , b ;  $ ~string s ;  $ ~cin >> n >> a >> b ;  $ ~-- a , -- b ;  $ ~cin >> s ;  $ ~if ( s [ a ] == s [ b ] ) {  $ ~~cout << 0 << endl ;  $ ~~return 0 ;  $ ~} else {  $ ~~cout << 1 << endl ;  $ ~~return 0 ;  $ ~}  $ }
int n , be [ 100001 ] , af [ 100001 ] , ans , a , b ;  $ string s ;  $ int main ( ) {  $ ~cin >> n >> a >> b >> s ;  $ ~if ( s [ a - 1 ] == s [ b - 1 ] ) {  $ ~~cout << 0 << endl ;  $ ~} else {  $ ~~cout << 1 << endl ;  $ ~}  $ }
int main ( ) {  $ ~int n , a , b ;  $ ~cin >> n >> a >> b ;  $ ~char aN [ 100000 ] ;  $ ~cin >> aN ;  $ ~if ( aN [ a - 1 ] != aN [ b - 1 ] )  $ ~~cout << 1 << endl ;  $ ~else  $ ~~cout << 0 << endl ;  $ ~return 0 ;  $ }
int num [ 1000000 ] = { 0 } ;  $ void fx ( char a [ ] ) ;  $ int main ( ) {  $ ~int n , a , b ;  $ ~char z [ 1000000 ] ;  $ ~cin >> n >> a >> b ;  $ ~cin >> z ;  $ ~if ( z [ a - 1 ] == z [ b - 1 ] ) {  $ ~~cout << "0" << endl ;  $ ~} else {  $ ~~cout << "1" << endl ;  $ ~}  $ ~return 0 ;  $ }
int main ( ) {  $ ~int n , a , b ;  $ ~string s ;  $ ~int ans ;  $ ~cin >> n >> a >> b >> s ;  $ ~if ( s [ a - 1 ] == s [ b - 1 ] ) {  $ ~~ans = 0 ;  $ ~} else {  $ ~~ans = 1 ;  $ ~}  $ ~cout << ans << '\n' ;  $ ~return 0 ;  $ }
const int maxn = 1e6 + 6 ;  $ int n , a , b ;  $ int arr [ maxn ] ;  $ int len = 0 ;  $ string str ;  $ int main ( ) {  $ ~cin >> n >> a >> b ;  $ ~cin >> str ;  $ ~for ( int i = 1 ; i <= n ; i ++ ) arr [ i ] = str [ i - 1 ] ;  $ ~if ( arr [ a ] == arr [ b ] )  $ ~~cout << "0" << endl ;  $ ~else  $ ~~cout << "1" << endl ;  $ ~return 0 ;  $ }
vector < int > VI , VI2 , VI3 , VI4 ;  $ int n , m , f , t , a , b ;  $ string s ;  $ int main ( ) {  $ ~cin >> n >> a >> b >> s ;  $ ~cout << abs ( s [ -- a ] - s [ -- b ] ) << endl ;  $ ~return 0 ;  $ }
int n , a , b ;  $ string s ;  $ int main ( ) {  $ ~cin >> n >> a >> b >> s ;  $ ~if ( s [ a - 1 ] == s [ b - 1 ] )  $ ~~cout << 0 << "\n" ;  $ ~else  $ ~~cout << 1 << "\n" ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~string s ;  $ ~int n , m , k ;  $ ~cin >> n >> m >> k ;  $ ~cin >> s ;  $ ~s = '#' + s ;  $ ~cout << 1 - ( s [ m ] == s [ k ] ) << endl ;  $ }
const int maxn = 1e6 + 6 ;  $ int n , a , b ;  $ int arr [ maxn ] ;  $ int len = 0 ;  $ string str ;  $ int main ( ) {  $ ~cin >> n >> a >> b ;  $ ~cin >> str ;  $ ~for ( int i = 1 ; i <= n ; i ++ ) arr [ i ] = str [ i - 1 ] ;  $ ~if ( arr [ a ] == arr [ b ] )  $ ~~cout << "0" << endl ;  $ ~else  $ ~~cout << "1" << endl ;  $ ~return 0 ;  $ }
string s ;  $ int main ( ) {  $ ~int n , a , b ;  $ ~cin >> n >> a >> b >> s ;  $ ~if ( ( a == b ) || ( s [ a - 1 ] == s [ b - 1 ] ) )  $ ~~cout << "0" << endl ;  $ ~else  $ ~~cout << "1" << endl ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~int a , b , n ;  $ ~string s ;  $ ~cin >> n >> a >> b >> s ;  $ ~a -- ;  $ ~b -- ;  $ ~cout << ( ( s [ a ] - '0' ) ^ ( s [ b ] - '0' ) ) << endl ;  $ }
const long long mod = 998244353 ;  $ const long long inf = 2e18 ;  $ const int maxn = 200005 ;  $ const int maxa = 300005 ;  $ long long gcd ( long long a , long long b ) {  $ ~return b ? gcd ( b , a % b ) : a ;  $ }  $ long long powmod ( long long a , long long b ) {  $ ~long long res = 1 ;  $ ~a %= mod ;  $ ~if ( b < 0 ) return - 1 ;  $ ~for ( ; b ; b >> = 1 ) {  $ ~~if ( b & 1 ) res = res * a % mod ;  $ ~~a = a * a % mod ;  $ ~}  $ ~return res ;  $ }  $ int INF = 10000000 ;  $ int main ( ) {  $ ~int T ;  $ ~int n , m , l , r ;  $ ~int ans = 0 ;  $ ~string str ;  $ ~cin >> n >> l >> r ;  $ ~cin >> str ;  $ ~int a [ maxn ] ;  $ ~for ( int i = 0 ; i < n ; i ++ ) a [ i + 1 ] = str [ i ] - '0' ;  $ ~if ( a [ l ] == a [ r ] ) return 0 * puts ( "0" ) ;  $ ~puts ( "1" ) ;  $ }
int main ( ) {  $ ~int n , a , b ;  $ ~string str ;  $ ~cin >> n >> a >> b ;  $ ~cin >> str ;  $ ~cout << abs ( ( str [ a - 1 ] - '0' ) - ( str [ b - 1 ] - '0' ) ) << endl ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~locale loc ;  $ ~int n , s , e ;  $ ~cin >> n >> s >> e ;  $ ~string str ;  $ ~cin >> str ;  $ ~if ( str [ s - 1 ] == str [ e - 1 ] )  $ ~~cout << 0 << "\n" ;  $ ~else  $ ~~cout << 1 << "\n" ;  $ }
int main ( ) {  $ ~int n , a , b ;  $ ~cin >> n >> a >> b ;  $ ~int i , val ;  $ ~vector < int > v ( n + 1 ) ;  $ ~string s ;  $ ~cin >> s ;  $ ~for ( i = 0 ; i < n ; i ++ ) {  $ ~~if ( s [ i ] == '1' )  $ ~~~v [ i + 1 ] = 1 ;  $ ~~else  $ ~~~v [ i + 1 ] = 0 ;  $ ~}  $ ~int aa = min ( a , b ) ;  $ ~int bb = max ( a , b ) ;  $ ~int j ;  $ ~int count = 0 ;  $ ~for ( i = aa ; i <= bb ; ) {  $ ~~if ( v [ i ] == 0 ) {  $ ~~~int index = i ;  $ ~~~for ( j = i ; j <= bb ; j ++ ) {  $ ~~~~if ( v [ j ] == 0 ) index = j ;  $ ~~~}  $ ~~~if ( index == bb ) break ;  $ ~~~if ( index != bb ) {  $ ~~~~i = index + 1 ;  $ ~~~~count ++ ;  $ ~~~}  $ ~~} else {  $ ~~~int index = i ;  $ ~~~for ( j = i ; j <= bb ; j ++ ) {  $ ~~~~if ( v [ j ] == 1 ) index = j ;  $ ~~~}  $ ~~~if ( index == bb ) break ;  $ ~~~if ( index != bb ) {  $ ~~~~i = index + 1 ;  $ ~~~~count ++ ;  $ ~~~}  $ ~~}  $ ~}  $ ~cout << count << endl ;  $ }
int main ( ) {  $ ~int n , a , b ;  $ ~cin >> n >> a >> b ;  $ ~string s ;  $ ~cin >> s ;  $ ~if ( s [ a - 1 ] == s [ b - 1 ] ) {  $ ~~cout << ( 0 ) << endl ;  $ ~~;  $ ~} else  $ ~~cout << ( 1 ) << endl ;  $ ~;  $ ~return 0 ;  $ }
int main ( ) {  $ ~int n , a , b ;  $ ~string s ;  $ ~cin >> n >> a >> b ;  $ ~cin >> s ;  $ ~if ( s [ a - 1 ] == s [ b - 1 ] ) {  $ ~~cout << 0 << endl ;  $ ~~return 0 ;  $ ~} else  $ ~~cout << 1 << endl ;  $ }
int main ( ) {  $ ~string a ;  $ ~int n ;  $ ~cin >> a ;  $ ~cin >> n ;  $ ~int kiek [ 26 ] = { 0 } ;  $ ~if ( a . size ( ) < n ) {  $ ~~cout << "impossible" << endl ;  $ ~~return 0 ;  $ ~}  $ ~for ( int i = 0 ; i < a . size ( ) ; i ++ ) { kiek [ a [ i ] - 'a' ] ++ ; }  $ ~int k = 0 ;  $ ~for ( int i = 0 ; i < 26 ; i ++ ) {  $ ~~if ( kiek [ i ] >= 1 ) k ++ ;  $ ~}  $ ~if ( k < n )  $ ~~cout << n - k << endl ;  $ ~else  $ ~~cout << "0" << endl ;  $ ~;  $ ~return 0 ;  $ }
int main ( ) {  $ ~string s ;  $ ~cin >> s ;  $ ~int k ;  $ ~cin >> k ;  $ ~int cnt = 0 ;  $ ~if ( k > s . size ( ) )  $ ~~cout << "impossible" << endl ;  $ ~else {  $ ~~int exrt ;  $ ~~int freq [ 30 ] = { 0 } ;  $ ~~for ( int i = 0 ; i < s . size ( ) ; i ++ ) {  $ ~~~exrt = int ( s [ i ] ) - 96 ;  $ ~~~freq [ exrt ] ++ ;  $ ~~}  $ ~~for ( int i = 0 ; i < 30 ; i ++ ) {  $ ~~~if ( freq [ i ] != 0 ) cnt ++ ;  $ ~~}  $ ~~if ( k <= cnt )  $ ~~~cout << "0" << endl ;  $ ~~else  $ ~~~cout << k - cnt << endl ;  $ ~}  $ ~return 0 ;  $ }
const long long int INF = ( 1 LL << 60 ) - 1 ;  $ const long long int MAX = 998244353 ;  $ long long int fast_exp ( long long int base , long long int exp , long long int m ) {  $ ~long long int res = 1 ;  $ ~while ( exp > 0 ) {  $ ~~if ( exp % 2 == 1 ) { res = ( res * base ) % m ; }  $ ~~base = ( base * base ) % m ;  $ ~~exp /= 2 ;  $ ~}  $ ~return res % m ;  $ }  $ int main ( ) {  $ ~string s ;  $ ~int k , cnt = 0 ;  $ ~cin >> s >> k ;  $ ~int freq [ 26 ] = { 0 } ;  $ ~int n = s . length ( ) ;  $ ~for ( int i = 0 ; i < n ; i ++ ) { freq [ s [ i ] - 'a' ] ++ ; }  $ ~for ( int i = 0 ; i < 26 ; i ++ ) {  $ ~~if ( freq [ i ] ) { cnt ++ ; }  $ ~}  $ ~if ( cnt >= k ) {  $ ~~cout << 0 << endl ;  $ ~~return 0 ;  $ ~}  $ ~if ( n < k ) {  $ ~~cout << "impossible" << endl ;  $ ~~return 0 ;  $ ~}  $ ~cout << k - cnt << endl ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~string s ;  $ ~cin >> s ;  $ ~int n ;  $ ~cin >> n ;  $ ~if ( n > ( int ) s . size ( ) )  $ ~~cout << "impossible\n" ;  $ ~else {  $ ~~cout << max ( 0 , n - ( int ) set < char > ( s . begin ( ) , s . end ( ) ) . size ( ) ) << '\n' ;  $ ~}  $ }
string a ;  $ int s , num , p [ 1001 ] ;  $ int main ( ) {  $ ~cin >> a >> s ;  $ ~if ( a . size ( ) < s ) {  $ ~~cout << "impossible" << endl ;  $ ~~return 0 ;  $ ~}  $ ~for ( int i = 0 ; i < a . size ( ) ; i ++ ) {  $ ~~if ( ! p [ a [ i ] ] ) num ++ ;  $ ~~p [ a [ i ] ] = 1 ;  $ ~}  $ ~cout << max ( 0 , s - num ) << endl ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~string str ;  $ ~cin >> str ;  $ ~long long int k ;  $ ~cin >> k ;  $ ~long long int freq [ 27 ] = { 0 } ;  $ ~if ( k > str . size ( ) )  $ ~~cout << "impossible" ;  $ ~else {  $ ~~for ( long long int i = 0 ; i < str . size ( ) ; i ++ ) { freq [ str [ i ] - 'a' + 1 ] ++ ; }  $ ~~long long int count = 0 ;  $ ~~for ( long long int i = 1 ; i <= 26 ; i ++ ) {  $ ~~~if ( freq [ i ] != 0 ) count ++ ;  $ ~~}  $ ~~if ( count >= k )  $ ~~~cout << "0" ;  $ ~~else {  $ ~~~cout << ( k - count ) ;  $ ~~}  $ ~}  $ ~cout << endl ;  $ ~return 0 ;  $ }
const int maxn = 3e5 + 5 ;  $ int a [ 50 ] = { } ;  $ int main ( ) {  $ ~string s ;  $ ~int k ;  $ ~cin >> s >> k ;  $ ~for ( int i = 0 ; i < s . length ( ) ; i ++ ) a [ s [ i ] - 'a' ] ++ ;  $ ~int sum = 0 , cnt = 0 ;  $ ~for ( int i = 0 ; i < 30 ; i ++ ) {  $ ~~if ( a [ i ] > 0 ) cnt ++ ;  $ ~~sum += a [ i ] ;  $ ~}  $ ~if ( sum < k ) return puts ( "impossible" ) , 0 ;  $ ~if ( cnt >= k ) return puts ( "0" ) , 0 ;  $ ~cout << k - cnt << endl ;  $ }
const int inf = 0 x3f3f3f3f ;  $ const int mod = ( int ) 1e9 + 7 ;  $ const int maxn = ( int ) 1e5 + 5 ;  $ int vis [ 30 ] ;  $ int main ( ) {  $ ~string s ;  $ ~cin >> s ;  $ ~int len = s . size ( ) ;  $ ~int n ;  $ ~cin >> n ;  $ ~if ( n > len ) return 0 * puts ( "impossible" ) ;  $ ~for ( int i = 0 ; i < len ; i ++ ) { vis [ s [ i ] - 'a' ] ++ ; }  $ ~int cnt = 0 ;  $ ~for ( int i = 0 ; i < 26 ; i ++ ) {  $ ~~if ( vis [ i ] ) cnt ++ ;  $ ~}  $ ~if ( cnt >= n )  $ ~~puts ( "0" ) ;  $ ~else  $ ~~cout << n - cnt << endl ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~string s ;  $ ~int k , cnt [ 26 ] = { 0 } ;  $ ~cin >> s >> k ;  $ ~if ( s . length ( ) < k ) {  $ ~~cout << "impossible"  $ ~~~<< "\n" ;  $ ~} else {  $ ~~for ( int i = 0 ; i < s . length ( ) ; i ++ ) { cnt [ s [ i ] - 97 ] ++ ; }  $ ~~int res = 0 ;  $ ~~for ( int i = 0 ; i < 26 ; i ++ ) {  $ ~~~if ( cnt [ i ] ) { res ++ ; }  $ ~~}  $ ~~cout << max ( 0 , k - res ) << "\n" ;  $ ~}  $ ~return 0 ;  $ }
int main ( ) {  $ ~int k ;  $ ~string s ;  $ ~cin >> s >> k ;  $ ~if ( s . size ( ) < k ) return cout << "impossible\n" , 0 ;  $ ~sort ( s . begin ( ) , s . end ( ) ) ;  $ ~s . resize ( unique ( s . begin ( ) , s . end ( ) ) - s . begin ( ) ) ;  $ ~cout << max ( k - ( int ) s . size ( ) , 0 ) << endl ;  $ ~return 0 ;  $ }
int n , num , ans ;  $ string str ;  $ int main ( ) {  $ ~cin >> str ;  $ ~cin >> n ;  $ ~if ( str . size ( ) < n ) {  $ ~~cout << "impossible\n" ;  $ ~~return 0 ;  $ ~}  $ ~for ( int i = 0 ; i < 26 ; i ++ ) {  $ ~~if ( str . find ( 'a' + i ) != - 1 ) num ++ ;  $ ~}  $ ~cout << max ( n - num , 0 ) << "\n" ;  $ ~return 0 ;  $ }
const int N = 2e6 + 5 ;  $ long long power ( long long x , unsigned long long y , long long p ) {  $ ~long long res = 1 ;  $ ~x = x % p ;  $ ~while ( y > 0 ) {  $ ~~if ( y & 1 ) res = ( res * x ) % p ;  $ ~~y = y >> 1 ;  $ ~~x = ( x * x ) % p ;  $ ~}  $ ~return res ;  $ }  $ long long i , j ;  $ int main ( ) {  $ ~string s ;  $ ~long long k ;  $ ~cin >> s >> k ;  $ ~if ( k > ( long long ) s . size ( ) ) {  $ ~~cout << "impossible" << '\n' ;  $ ~~return 0 ;  $ ~} else {  $ ~~set < char > temp ;  $ ~~for ( i = 0 ; i < ( long long ) s . size ( ) ; i ++ ) {  $ ~~~temp . insert ( s [ i ] ) ;  $ ~~~if ( ( long long ) temp . size ( ) == k ) {  $ ~~~~cout << 0 << '\n' ;  $ ~~~~return 0 ;  $ ~~~}  $ ~~}  $ ~~cout << k - ( long long ) temp . size ( ) << '\n' ;  $ ~~return 0 ;  $ ~}  $ ~return 0 ;  $ }
int main ( ) {  $ ~string s ;  $ ~int k ;  $ ~cin >> s >> k ;  $ ~if ( k > s . size ( ) ) {  $ ~~cout << "impossible\n" ;  $ ~~return 0 ;  $ ~}  $ ~sort ( s . begin ( ) , s . end ( ) ) ;  $ ~s . erase ( unique ( s . begin ( ) , s . end ( ) ) , s . end ( ) ) ;  $ ~cout << max ( k - ( int ) s . size ( ) , 0 ) << endl ;  $ ~return 0 ;  $ }
int N , K , ans = 2e9 , A [ 26 ] , val , x , y ;  $ string T , S ;  $ int main ( ) {  $ ~cin >> S >> N ;  $ ~if ( S . length ( ) < N ) {  $ ~~cout << "impossible\n" ;  $ ~~return 0 ;  $ ~}  $ ~for ( int i = 0 ; i < S . length ( ) ; i ++ ) {  $ ~~A [ S [ i ] - 'a' ] ++ ;  $ ~~if ( A [ S [ i ] - 'a' ] == 1 ) val ++ ;  $ ~}  $ ~cout << max ( 0 , N - val ) << '\n' ;  $ }
int k , haSh [ 30 ] ;  $ string s ;  $ int main ( ) {  $ ~cin >> s >> k ;  $ ~if ( k > s . size ( ) ) {  $ ~~cout << "impossible" << endl ;  $ ~~return 0 ;  $ ~}  $ ~for ( int i = 0 ; i < s . size ( ) ; i ++ ) {  $ ~~if ( ! haSh [ ( s [ i ] - 'a' ) ] ) {  $ ~~~haSh [ s [ i ] - 'a' ] = 1 ;  $ ~~~k -- ;  $ ~~}  $ ~}  $ ~if ( k <= 0 ) {  $ ~~cout << 0 << endl ;  $ ~~return 0 ;  $ ~} else {  $ ~~cout << k << endl ;  $ ~}  $ ~return 0 ;  $ }
int main ( ) {  $ ~string s ;  $ ~int k ;  $ ~cin >> s >> k ;  $ ~set < char > ms ;  $ ~for ( int i = 0 ; i < s . size ( ) ; i ++ ) { ms . insert ( s [ i ] ) ; }  $ ~if ( s . size ( ) < k )  $ ~~cout << "impossible" << endl ;  $ ~else {  $ ~~if ( ms . size ( ) < k )  $ ~~~cout << k - ms . size ( ) << endl ;  $ ~~else  $ ~~~cout << 0 << endl ;  $ ~}  $ ~return 0 ;  $ }
const int INF = 0 x3f3f3f3f ;  $ const int mod = 998244353 ;  $ string s ;  $ int k , vis [ 26 ] , cnt ;  $ int main ( ) {  $ ~cin >> s >> k ;  $ ~if ( s . size ( ) < k )  $ ~~return puts ( "impossible" ) , 0 ;  $ ~else {  $ ~~for ( int i = 0 ; i < s . size ( ) ; i ++ ) {  $ ~~~if ( vis [ s [ i ] - 'a' ] == 0 ) {  $ ~~~~vis [ s [ i ] - 'a' ] = 1 ;  $ ~~~~cnt ++ ;  $ ~~~}  $ ~~}  $ ~~if ( cnt >= k )  $ ~~~cout << 0 << endl ;  $ ~~else  $ ~~~cout << k - cnt << endl ;  $ ~}  $ ~return 0 ;  $ }
int main ( ) {  $ ~string input , insertion ;  $ ~int unique , inputLength = 0 ;  $ ~cin >> input >> unique ;  $ ~inputLength = input . length ( ) ;  $ ~if ( inputLength < unique ) {  $ ~~cout << "impossible" << endl ;  $ ~} else {  $ ~~set < string > inputs ;  $ ~~for ( int i = 0 ; i < inputLength ; i ++ ) {  $ ~~~insertion = input [ i ] ;  $ ~~~inputs . insert ( insertion ) ;  $ ~~}  $ ~~if ( unique > inputs . size ( ) )  $ ~~~cout << unique - inputs . size ( ) << endl ;  $ ~~else  $ ~~~cout << 0 << endl ;  $ ~}  $ }
const int maxn = 3e5 + 5 ;  $ int a [ 50 ] = { } ;  $ int main ( ) {  $ ~string s ;  $ ~int k ;  $ ~cin >> s >> k ;  $ ~for ( int i = 0 ; i < s . length ( ) ; i ++ ) a [ s [ i ] - 'a' ] ++ ;  $ ~int sum = 0 , cnt = 0 ;  $ ~for ( int i = 0 ; i < 30 ; i ++ ) {  $ ~~if ( a [ i ] > 0 ) cnt ++ ;  $ ~~sum += a [ i ] ;  $ ~}  $ ~if ( sum < k ) return puts ( "impossible" ) , 0 ;  $ ~if ( cnt >= k ) return puts ( "0" ) , 0 ;  $ ~cout << k - cnt << endl ;  $ }
int main ( ) {  $ ~int n , pre , cur , nex , sum = 0 ;  $ ~cin >> n ;  $ ~if ( n == 1 || n == 2 ) return cout << 0 << endl , 0 ;  $ ~cin >> pre >> cur ;  $ ~n -= 2 ;  $ ~while ( n -- ) {  $ ~~cin >> nex ;  $ ~~if ( ( cur > pre && cur > nex ) || ( cur < pre && cur < nex ) ) sum ++ ;  $ ~~pre = cur ;  $ ~~cur = nex ;  $ ~}  $ ~cout << sum << endl ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~int n ;  $ ~cin >> n ;  $ ~vector < int > a ( n ) ;  $ ~for ( int i = 0 ; i < n ; i ++ ) cin >> a [ i ] ;  $ ~int ans = 0 ;  $ ~for ( int i = 1 ; i < n - 1 ; i ++ ) {  $ ~~if ( ( a [ i ] - a [ i - 1 ] ) * ( a [ i ] - a [ i + 1 ] ) > 0 ) ans ++ ;  $ ~}  $ ~cout << ans << endl ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~int n , c = 0 ;  $ ~vector < int > v ;  $ ~cin >> n ;  $ ~for ( int i = 0 ; i < n ; i ++ ) {  $ ~~int a ;  $ ~~cin >> a ;  $ ~~v . push_back ( a ) ;  $ ~}  $ ~for ( int i = 1 ; i < n - 1 ; i ++ ) {  $ ~~if ( v [ i ] > v [ i + 1 ] && v [ i ] > v [ i - 1 ] ) {  $ ~~~c ++ ;  $ ~~} else if ( v [ i ] < v [ 1 + i ] && v [ i ] < v [ i - 1 ] ) {  $ ~~~c ++ ;  $ ~~}  $ ~}  $ ~cout << c << endl ;  $ ~return 0 ;  $ }
int a [ 1005 ] ;  $ int main ( ) {  $ ~int n , ans = 0 ;  $ ~cin >> n ;  $ ~for ( int i = 0 ; i < n ; i ++ ) { cin >> a [ i ] ; }  $ ~for ( int i = 1 ; i < n - 1 ; i ++ ) {  $ ~~if ( a [ i ] > a [ i - 1 ] && a [ i ] > a [ i + 1 ] ) ans ++ ;  $ ~~if ( a [ i ] < a [ i - 1 ] && a [ i ] < a [ i + 1 ] ) ans ++ ;  $ ~}  $ ~cout << ans << endl ;  $ }
int n , a [ 1001 ] ;  $ int main ( ) {  $ ~cin >> n ;  $ ~for ( int i = 1 ; i <= n ; i ++ ) { cin >> a [ i ] ; }  $ ~int ans = 0 ;  $ ~for ( int i = 2 ; i < n ; i ++ ) {  $ ~~if ( a [ i ] > a [ i + 1 ] && a [ i ] > a [ i - 1 ] ) {  $ ~~~ans ++ ;  $ ~~~continue ;  $ ~~}  $ ~~if ( a [ i ] < a [ i + 1 ] && a [ i ] < a [ i - 1 ] ) { ans ++ ; }  $ ~}  $ ~cout << ans << endl ;  $ ~return 0 ;  $ }
int maxsum , minsum , a [ 1005 ] , n ;  $ int main ( ) {  $ ~cin >> n ;  $ ~for ( int i = 1 ; i <= n ; i ++ ) cin >> a [ i ] ;  $ ~for ( int i = 2 ; i < n ; i ++ ) {  $ ~~if ( a [ i ] > a [ i - 1 ] && a [ i ] > a [ i + 1 ] ) { maxsum ++ ; }  $ ~~if ( a [ i ] < a [ i - 1 ] && a [ i ] < a [ i + 1 ] ) { minsum ++ ; }  $ ~}  $ ~cout << maxsum + minsum << endl ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~long long int n ;  $ ~cin >> n ;  $ ~long long int a [ n + 1 ] = { 0 } ;  $ ~for ( int i = 1 ; i <= n ; i ++ ) cin >> a [ i ] ;  $ ~long long int c = 0 , d = 0 ;  $ ~for ( int i = 2 ; i < n ; i ++ ) {  $ ~~if ( a [ i ] > a [ i - 1 ] && a [ i ] > a [ i + 1 ] || a [ i ] < a [ i - 1 ] && a [ i ] < a [ i + 1 ] ) { c ++ ; }  $ ~}  $ ~cout << c << endl ;  $ ~return 0 ;  $ }
const double g = 9.8 ;  $ const int mod = 1000000007 ;  $ int n , i , j , k , ans ;  $ const int x = 1e5 ;  $ long long a [ x ] ;  $ int main ( ) {  $ ~int i , j , k , m , n , t ;  $ ~cin >> t ;  $ ~for ( i = 0 ; i < t ; i ++ ) cin >> a [ i ] ;  $ ~int num = 0 ;  $ ~for ( i = 1 ; i < t - 1 ; i ++ ) {  $ ~~if ( a [ i ] > a [ i - 1 ] && a [ i ] > a [ i + 1 ] ) num ++ ;  $ ~~if ( a [ i ] < a [ i - 1 ] && a [ i ] < a [ i + 1 ] ) num ++ ;  $ ~}  $ ~cout << num << endl ;  $ ~return 0 ;  $ }
const int maxn = 1e5 + 5 ;  $ const double esp = 1e-8 ;  $ inline int read ( ) {  $ ~int X = 0 , w = 0 ;  $ ~char ch = 0 ;  $ ~while ( ! isdigit ( ch ) ) {  $ ~~w |= ch == '-' ;  $ ~~ch = getchar ( ) ;  $ ~}  $ ~while ( isdigit ( ch ) ) X = ( X << 3 ) + ( X << 1 ) + ( ch ^ 48 ) , ch = getchar ( ) ;  $ ~return w ? - X : X ;  $ }  $ long long a [ maxn ] ;  $ int main ( ) {  $ ~int n ;  $ ~cin >> n ;  $ ~for ( int i = 1 ; i <= n ; i ++ ) cin >> a [ i ] ;  $ ~int num = 0 ;  $ ~for ( int i = 2 ; i <= n - 1 ; i ++ ) {  $ ~~if ( a [ i ] > a [ i + 1 ] && a [ i ] > a [ i - 1 ] || a [ i ] < a [ i - 1 ] && a [ i ] < a [ i + 1 ] ) ++ num ;  $ ~}  $ ~cout << num << endl ;  $ }
int n , l , mid , r , now ;  $ int main ( ) {  $ ~cin >> n ;  $ ~int ans = 0 ;  $ ~cin >> l ;  $ ~if ( n >= 1 )  $ ~~;  $ ~if ( n >= 2 ) { cin >> mid ; }  $ ~if ( n >= 3 ) {  $ ~~n -= 2 ;  $ ~~while ( n -- ) {  $ ~~~cin >> r ;  $ ~~~if ( mid < l && mid < r )  $ ~~~~ans ++ ;  $ ~~~else if ( mid > l && mid > r )  $ ~~~~ans ++ ;  $ ~~~l = mid ;  $ ~~~mid = r ;  $ ~~}  $ ~}  $ ~cout << ans << endl ;  $ }
int main ( ) {  $ ~int ans = 0 , a [ 1002 ] , n , i ;  $ ~cin >> n ;  $ ~for ( i = 1 ; i <= n ; i ++ ) { cin >> a [ i ] ; }  $ ~for ( i = 2 ; i < n ; i ++ ) {  $ ~~if ( a [ i ] > a [ i + 1 ] && a [ i ] > a [ i - 1 ] ) {  $ ~~~ans ++ ;  $ ~~} else if ( a [ i ] < a [ i + 1 ] && a [ i ] < a [ i - 1 ] ) {  $ ~~~ans ++ ;  $ ~~}  $ ~}  $ ~cout << ans << endl ;  $ ~return 0 ;  $ }
long long a [ 1001 ] ;  $ int main ( ) {  $ ~long long n , ans = 0 ;  $ ~cin >> n ;  $ ~for ( long long i = 0 ; i < n ; i ++ ) cin >> a [ i ] ;  $ ~for ( long long i = 1 ; i < n - 1 ; i ++ ) {  $ ~~if ( a [ i ] > a [ i - 1 ] && a [ i ] > a [ i + 1 ] ) ans ++ ;  $ ~~if ( a [ i ] < a [ i - 1 ] && a [ i ] < a [ i + 1 ] ) ans ++ ;  $ ~}  $ ~cout << ans << endl ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~int n , ans = 0 ;  $ ~cin >> n ;  $ ~int a [ n ] ;  $ ~for ( int i = 0 ; i < n ; ++ i ) cin >> a [ i ] ;  $ ~for ( int i = 1 ; i < n - 1 ; ++ i )  $ ~~if ( a [ i ] > a [ i - 1 ] && a [ i ] > a [ i + 1 ] || a [ i ] < a [ i - 1 ] && a [ i ] < a [ i + 1 ] ) ++ ans ;  $ ~cout << ans << "\n" ;  $ ~cin >> n ;  $ }
int main ( ) {  $ ~int n , c = 0 ;  $ ~cin >> n ;  $ ~int a [ n + 2 ] ;  $ ~for ( int i = 0 ; i < n ; i ++ ) { cin >> a [ i ] ; }  $ ~for ( int i = 1 ; i < n - 1 ; i ++ ) {  $ ~~if ( a [ i ] < a [ i - 1 ] && a [ i ] < a [ i + 1 ] ) {  $ ~~~c ++ ;  $ ~~} else if ( a [ i ] > a [ i - 1 ] && a [ i ] > a [ i + 1 ] ) {  $ ~~~c ++ ;  $ ~~}  $ ~}  $ ~cout << c << endl ;  $ }
long long gcd ( long long a , long long b ) {  $ ~return ! b ? a : gcd ( b , a % b ) ;  $ }  $ long long lcm ( long long a , long long b ) {  $ ~return ( a / gcd ( a , b ) ) * b ;  $ }  $ int dix [ ] = { 1 , - 1 , 0 , 0 , 1 , 1 , - 1 , - 1 } ;  $ int diy [ ] = { 0 , 0 , 1 , - 1 , 1 , - 1 , 1 , - 1 } ;  $ int main ( ) {  $ ~int n ;  $ ~cin >> n ;  $ ~vector < int > v ( n ) ;  $ ~int res = 0 ;  $ ~for ( int i = 0 ; i < n ; i ++ ) cin >> v [ i ] ;  $ ~for ( int i = 1 ; i < n - 1 ; i ++ )  $ ~~if ( v [ i ] > v [ i - 1 ] && v [ i ] > v [ i + 1 ] ) res ++ ;  $ ~for ( int i = 1 ; i < n - 1 ; i ++ )  $ ~~if ( v [ i ] < v [ i - 1 ] && v [ i ] < v [ i + 1 ] ) res ++ ;  $ ~cout << res << '\n' ;  $ ~return 0 ;  $ ~;  $ }
int main ( ) {  $ ~int n ;  $ ~while ( cin >> n ) {  $ ~~int a [ 1005 ] ;  $ ~~for ( int i = 0 ; i < n ; i ++ ) { cin >> a [ i ] ; }  $ ~~int num = 0 ;  $ ~~for ( int i = 1 ; i < n - 1 ; i ++ ) {  $ ~~~if ( a [ i ] > a [ i - 1 ] && a [ i ] > a [ i + 1 ] ) num ++ ;  $ ~~~if ( a [ i ] < a [ i - 1 ] && a [ i ] < a [ i + 1 ] ) num ++ ;  $ ~~}  $ ~~cout << num << endl ;  $ ~}  $ }
int main ( ) {  $ ~int n ;  $ ~cin >> n ;  $ ~int arr [ n ] ;  $ ~for ( int i = 0 ; i < n ; i ++ ) cin >> arr [ i ] ;  $ ~int sol = 0 ;  $ ~for ( int i = 1 ; i < n - 1 ; i ++ ) {  $ ~~if ( ( ( arr [ i ] - arr [ i - 1 ] ) * ( arr [ i ] - arr [ i + 1 ] ) ) > 0 ) sol ++ ;  $ ~}  $ ~cout << sol << endl ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~int r ;  $ ~while ( cin >> r ) {  $ ~~int sum = 0 ;  $ ~~int a [ 1001 ] = { 0 } ;  $ ~~for ( int i = 0 ; i < r ; i ++ ) cin >> a [ i ] ;  $ ~~for ( int i = 1 ; i < r - 1 ; i ++ ) {  $ ~~~if ( a [ i ] < a [ i - 1 ] )  $ ~~~~if ( a [ i ] < a [ i + 1 ] )  $ ~~~~~sum ++ ;  $ ~~~~else  $ ~~~~~;  $ ~~~else if ( a [ i ] > a [ i - 1 ] )  $ ~~~~if ( a [ i ] > a [ i + 1 ] ) sum ++ ;  $ ~~}  $ ~~cout << sum << endl ;  $ ~}  $ }
int main ( ) {  $ ~int n , i , extrema = 0 , arr [ 1000 + 5 ] ;  $ ~cin >> n ;  $ ~for ( i = 0 ; i < n ; ++ i ) { cin >> arr [ i ] ; }  $ ~for ( i = 1 ; i < n - 1 ; ++ i ) {  $ ~~if ( arr [ i ] > arr [ i - 1 ] && arr [ i ] > arr [ i + 1 ] )  $ ~~~++ extrema ;  $ ~~else if ( arr [ i ] < arr [ i - 1 ] && arr [ i ] < arr [ i + 1 ] )  $ ~~~++ extrema ;  $ ~}  $ ~cout << extrema << endl ;  $ ~return ( 0 ) ;  $ }
int main ( ) {  $ ~int n ;  $ ~cin >> n ;  $ ~int * elements = new int [ n ] ;  $ ~for ( int i = 0 ; i < n ; i ++ ) { cin >> elements [ i ] ; }  $ ~int count = 0 ;  $ ~for ( int i = 1 ; i < n - 1 ; i ++ ) {  $ ~~int prev = elements [ i - 1 ] ;  $ ~~int cur = elements [ i ] ;  $ ~~int next = elements [ i + 1 ] ;  $ ~~if ( ( cur < prev && cur < next ) || ( cur > prev && cur > next ) ) { count ++ ; }  $ ~}  $ ~cout << count << endl ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~int a [ 1005 ] , n , k ;  $ ~while ( cin >> n ) {  $ ~~k = 0 ;  $ ~~for ( int i = 0 ; i < n ; i ++ ) cin >> a [ i ] ;  $ ~~for ( int i = 1 ; i < n - 1 ; i ++ )  $ ~~~if ( a [ i ] > a [ i - 1 ] && a [ i ] > a [ i + 1 ] || a [ i ] < a [ i - 1 ] && a [ i ] < a [ i + 1 ] ) k ++ ;  $ ~~cout << k << endl ;  $ ~}  $ ~return 0 ;  $ }
int main ( ) {  $ ~int a [ 1020 ] , n ;  $ ~int i ;  $ ~cin >> n ;  $ ~for ( i = 0 ; i < n ; i ++ ) { cin >> a [ i ] ; }  $ ~int cnt = 0 ;  $ ~for ( i = 1 ; i < n - 1 ; i ++ ) {  $ ~~if ( a [ i ] > a [ i - 1 ] && a [ i ] > a [ i + 1 ] ) cnt ++ ;  $ ~~if ( a [ i ] < a [ i - 1 ] && a [ i + 1 ] > a [ i ] ) cnt ++ ;  $ ~}  $ ~cout << cnt << endl ;  $ ~return 0 ;  $ }
int n , c = 0 ;  $ vector < int > a ( 1000 ) ;  $ int main ( ) {  $ ~cin >> n ;  $ ~for ( __typeof ( n ) i = 0 ; i < ( n ) ; i ++ ) cin >> a [ i ] ;  $ ~for ( __typeof ( n - 2 ) i = 1 ; i <= ( n - 2 ) ; i ++ ) {  $ ~~if ( a [ i - 1 ] > a [ i ] && a [ i + 1 ] > a [ i ] ) c ++ ;  $ ~~if ( a [ i - 1 ] < a [ i ] && a [ i + 1 ] < a [ i ] ) c ++ ;  $ ~}  $ ~cout << c << "\n" ;  $ }
int main ( ) {  $ ~int n ;  $ ~cin >> n ;  $ ~int v [ n ] ;  $ ~for ( int q = 0 ; q < n ; q ++ ) { cin >> v [ q ] ; }  $ ~int ans = 0 ;  $ ~for ( int q = 1 ; q < n - 1 ; q ++ ) {  $ ~~if ( v [ q ] > v [ q - 1 ] && v [ q ] > v [ q + 1 ] ) {  $ ~~~ans ++ ;  $ ~~} else if ( v [ q ] < v [ q - 1 ] && v [ q ] < v [ q + 1 ] ) {  $ ~~~ans ++ ;  $ ~~}  $ ~}  $ ~cout << ans << endl ;  $ }
const int maxn = 1e4 + 10 ;  $ int a [ maxn ] ;  $ int n ;  $ int cnt = 0 ;  $ int main ( ) {  $ ~cin >> n ;  $ ~for ( int i = 1 ; i <= n ; i ++ ) { cin >> a [ i ] ; }  $ ~for ( int i = 2 ; i <= n - 1 ; i ++ ) {  $ ~~if ( a [ i ] > a [ i - 1 ] && a [ i ] > a [ i + 1 ] || a [ i ] < a [ i - 1 ] && a [ i ] < a [ i + 1 ] ) cnt ++ ;  $ ~}  $ ~cout << cnt << endl ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~string s ;  $ ~cin >> s ;  $ ~stack < char > st ;  $ ~for ( int i = 0 ; i < s . size ( ) ; i ++ ) {  $ ~~if ( st . empty ( ) )  $ ~~~st . push ( s [ i ] ) ;  $ ~~else if ( st . top ( ) == s [ i ] )  $ ~~~st . pop ( ) ;  $ ~~else  $ ~~~st . push ( s [ i ] ) ;  $ ~}  $ ~string tmp = "" ;  $ ~while ( ! st . empty ( ) ) {  $ ~~tmp += st . top ( ) ;  $ ~~st . pop ( ) ;  $ ~}  $ ~reverse ( tmp . begin ( ) , tmp . end ( ) ) ;  $ ~cout << tmp << "\n" ;  $ ~return 0 ;  $ }
stack < char > chars ;  $ int main ( ) {  $ ~string str ;  $ ~cin >> str ;  $ ~char ch ;  $ ~for ( int i = 0 ; str [ i ] != '\0' ; i ++ ) {  $ ~~ch = str [ i ] ;  $ ~~if ( ! chars . empty ( ) ) {  $ ~~~if ( chars . top ( ) == ch )  $ ~~~~chars . pop ( ) ;  $ ~~~else  $ ~~~~chars . push ( ch ) ;  $ ~~} else  $ ~~~chars . push ( ch ) ;  $ ~}  $ ~vector < char > result ;  $ ~while ( ! chars . empty ( ) ) {  $ ~~result . push_back ( chars . top ( ) ) ;  $ ~~chars . pop ( ) ;  $ ~}  $ ~for ( int i = result . size ( ) - 1 ; i >= 0 ; i -- ) cout << result [ i ] ;  $ ~cout << "\n" ;  $ ~return 0 ;  $ }
const long long OO = 1e8 ;  $ const int o_o = 0 ;  $ double EPS = numeric_limits < double > : : epsilon ( ) ;  $ int const MAX = 2 * 100000 + 9 ;  $ char ar [ MAX ] ;  $ int co = - 1 ;  $ void inzlition ( ) {  $ ~for ( int i = 0 ; i < MAX ; i ++ ) { ar [ i ] = '0' ; }  $ }  $ int main ( ) {  $ ~string text ;  $ ~getline ( cin , text ) ;  $ ~inzlition ( ) ;  $ ~co = - 1 ;  $ ~for ( int i = 0 ; i < text . size ( ) ; i ++ ) {  $ ~~if ( co == - 1 ) {  $ ~~~co ++ ;  $ ~~~ar [ co ] = text [ i ] ;  $ ~~} else if ( text [ i ] == ar [ co ] ) {  $ ~~~ar [ co ] = '0' ;  $ ~~~co -- ;  $ ~~} else {  $ ~~~co ++ ;  $ ~~~ar [ co ] = text [ i ] ;  $ ~~}  $ ~}  $ ~for ( int j = 0 ; j <= co ; j ++ ) { cout << ar [ j ] ; }  $ ~cout << endl ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~string s ;  $ ~vector < char > a ;  $ ~cin >> s ;  $ ~long int n = s . size ( ) ;  $ ~for ( int i = 0 ; i < n ; i ++ ) {  $ ~~if ( a . empty ( ) )  $ ~~~a . push_back ( s [ i ] ) ;  $ ~~else if ( a . back ( ) != s [ i ] )  $ ~~~a . push_back ( s [ i ] ) ;  $ ~~else {  $ ~~~a . pop_back ( ) ;  $ ~~}  $ ~}  $ ~for ( int i = 0 ; i < a . size ( ) ; i ++ ) cout << a [ i ] ;  $ ~cout << endl ;  $ ~return 0 ;  $ }
string s ;  $ int main ( ) {  $ ~cin >> s ;  $ ~int i = s . size ( ) - 1 ;  $ ~while ( i > 0 ) {  $ ~~if ( s [ i ] == s [ i - 1 ] ) { s . erase ( i - 1 , 2 ) ; }  $ ~~-- i ;  $ ~}  $ ~cout << s << "\n" ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~int x = 0 ;  $ ~string s2 ;  $ ~cin >> s2 ;  $ ~for ( int i = s2 . length ( ) - 2 ; i >= 0 ; i -- ) {  $ ~~if ( s2 [ i ] == s2 [ i + 1 ] ) s2 . erase ( i , 2 ) ;  $ ~}  $ ~cout << s2 << endl ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~string s ;  $ ~cin >> s ;  $ ~int l = s . length ( ) ;  $ ~for ( int i = 1 ; i < l ; i ++ ) {  $ ~~if ( s [ i ] == s [ i - 1 ] ) {  $ ~~~s . erase ( i - 1 , 2 ) ;  $ ~~~i -= 2 ;  $ ~~}  $ ~}  $ ~cout << s << endl ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~string str ;  $ ~cin >> str ;  $ ~int size = str . size ( ) ;  $ ~stack < char > s ;  $ ~s . push ( str [ 0 ] ) ;  $ ~for ( int i = 1 ; i < size ; i ++ ) ( ! s . empty ( ) && str [ i ] == s . top ( ) ) ? s . pop ( ) : s . push ( str [ i ] ) ;  $ ~string ans = "" ;  $ ~while ( ! s . empty ( ) ) {  $ ~~ans += s . top ( ) ;  $ ~~s . pop ( ) ;  $ ~}  $ ~reverse ( ans . begin ( ) , ans . end ( ) ) ;  $ ~cout << ans << endl ;  $ ~return 0 ;  $ }
const int maxn = 2 * 1e5 + 10 ;  $ stack < char > s ;  $ char str [ maxn ] ;  $ int main ( ) {  $ ~while ( ! s . empty ( ) ) s . pop ( ) ;  $ ~int len ;  $ ~gets ( str + 1 ) ;  $ ~len = strlen ( str + 1 ) ;  $ ~for ( int i = len ; i >= 1 ; i -- ) {  $ ~~if ( ! s . size ( ) ) {  $ ~~~s . push ( str [ i ] ) ;  $ ~~} else {  $ ~~~if ( s . top ( ) == str [ i ] ) {  $ ~~~~s . pop ( ) ;  $ ~~~} else {  $ ~~~~s . push ( str [ i ] ) ;  $ ~~~}  $ ~~}  $ ~}  $ ~while ( ! s . empty ( ) ) {  $ ~~cout << s . top ( ) ;  $ ~~s . pop ( ) ;  $ ~}  $ ~cout << endl ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~stack < char > s ;  $ ~string f ;  $ ~cin >> f ;  $ ~for ( int i = 0 ; i < f . length ( ) ; i ++ ) {  $ ~~if ( s . empty ( ) ) {  $ ~~~s . push ( f [ i ] ) ;  $ ~~} else {  $ ~~~if ( f [ i ] == s . top ( ) )  $ ~~~~s . pop ( ) ;  $ ~~~else  $ ~~~~s . push ( f [ i ] ) ;  $ ~~}  $ ~}  $ ~string t = "" ;  $ ~while ( ! s . empty ( ) ) {  $ ~~t += s . top ( ) ;  $ ~~s . pop ( ) ;  $ ~}  $ ~for ( int i = t . length ( ) - 1 ; i >= 0 ; i -- ) { cout << t [ i ] ; }  $ ~cout << endl ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~string s ;  $ ~cin >> s ;  $ ~stack < char > c ;  $ ~for ( int i = 0 ; i < s . size ( ) ; i ++ ) {  $ ~~if ( ! c . empty ( ) && c . top ( ) == s [ i ] )  $ ~~~c . pop ( ) ;  $ ~~else  $ ~~~c . push ( s [ i ] ) ;  $ ~}  $ ~string a ;  $ ~int y = c . size ( ) ;  $ ~while ( ! c . empty ( ) ) {  $ ~~a += c . top ( ) ;  $ ~~c . pop ( ) ;  $ ~}  $ ~for ( int i = y - 1 ; i >= 0 ; i -- ) cout << a [ i ] ;  $ ~cout << endl ;  $ ~return 0 ;  $ }
const int N = 1e5 + 5 ;  $ const int inf = 1e9 ;  $ const long long INF = 1e18 ;  $ const double PI = acos ( - 1.0 ) ;  $ const double EPS = 1e-8 ;  $ const int MOD = 1000000007 ;  $ int main ( ) {  $ ~string s ;  $ ~cin >> s ;  $ ~stack < char > st ;  $ ~for ( int i = 0 ; i < s . size ( ) ; i ++ ) {  $ ~~if ( st . empty ( ) )  $ ~~~st . push ( s [ i ] ) ;  $ ~~else {  $ ~~~if ( ! st . empty ( ) && st . top ( ) == s [ i ] )  $ ~~~~while ( ! st . empty ( ) && st . top ( ) == s [ i ] ) st . pop ( ) ;  $ ~~~else  $ ~~~~st . push ( s [ i ] ) ;  $ ~~}  $ ~}  $ ~string ans = "" ;  $ ~while ( ! st . empty ( ) ) ans += st . top ( ) , st . pop ( ) ;  $ ~reverse ( ans . begin ( ) , ans . end ( ) ) ;  $ ~cout << ans << endl ;  $ ~return 0 ;  $ }
string a ;  $ int i ;  $ int main ( ) {  $ ~cin >> a ;  $ ~for ( i = a . size ( ) ; i >= 0 ; i -- ) {  $ ~~if ( a [ i ] == a [ i + 1 ] ) a . erase ( i , 2 ) ;  $ ~}  $ ~cout << a << endl ;  $ ~;  $ }
int main ( ) {  $ ~string s ;  $ ~cin >> s ;  $ ~char stack [ s . size ( ) ] ;  $ ~long int j = 0 ;  $ ~for ( int i = 0 ; i < s . size ( ) ; i ++ ) {  $ ~~if ( j == 0 ) {  $ ~~~stack [ j ++ ] = s [ i ] ;  $ ~~} else if ( stack [ j - 1 ] != s [ i ] ) {  $ ~~~stack [ j ++ ] = s [ i ] ;  $ ~~} else {  $ ~~~j -- ;  $ ~~}  $ ~}  $ ~for ( int i = 0 ; i < j ; i ++ ) { cout << stack [ i ] ; }  $ ~cout << endl ;  $ ~return 0 ;  $ }
const int maxn = 200010 ;  $ char str [ maxn ] ;  $ int main ( ) {  $ ~while ( cin >> str ) {  $ ~~int j = 1 , len = strlen ( str ) ;  $ ~~for ( int i = 1 ; i < len ; i ++ ) {  $ ~~~if ( str [ i ] == str [ j - 1 ] ) {  $ ~~~~j -- ;  $ ~~~~str [ j ] = '\0' ;  $ ~~~} else {  $ ~~~~str [ j ++ ] = str [ i ] ;  $ ~~~}  $ ~~}  $ ~~str [ j ] = '\0' ;  $ ~~cout << str << endl ;  $ ~}  $ ~return 0 ;  $ }
stack < char > st ;  $ int main ( ) {  $ ~string s ;  $ ~cin >> s ;  $ ~for ( int i = 0 ; i < s . length ( ) ; i ++ )  $ ~~if ( ! st . empty ( ) && st . top ( ) == s [ i ] )  $ ~~~st . pop ( ) ;  $ ~~else  $ ~~~st . push ( s [ i ] ) ;  $ ~s = "" ;  $ ~while ( ! st . empty ( ) ) {  $ ~~s += st . top ( ) ;  $ ~~st . pop ( ) ;  $ ~}  $ ~for ( int i = s . length ( ) - 1 ; i >= 0 ; i -- ) cout << s [ i ] ;  $ ~cout << endl ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~string s ;  $ ~cin >> s ;  $ ~for ( int i = s . size ( ) - 2 ; i >= 0 ; i -- ) {  $ ~~if ( s [ i ] == s [ i + 1 ] ) { s . erase ( i , 2 ) ; }  $ ~}  $ ~cout << s << endl ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~string s ;  $ ~cin >> s ;  $ ~for ( int i = ( s . length ( ) - 1 ) ; i >= 0 ; i -- ) {  $ ~~if ( s [ i ] == s [ i + 1 ] ) s . erase ( i , 2 ) ;  $ ~}  $ ~cout << s << endl ;  $ ~return 0 ;  $ }
const int INF = int ( 1e9 + 7 ) ;  $ int main ( ) {  $ ~string s ;  $ ~cin >> s ;  $ ~stack < char > p ;  $ ~for ( int a = 0 ; a < s . size ( ) ; a ++ ) {  $ ~~if ( p . empty ( ) )  $ ~~~p . push ( s [ a ] ) ;  $ ~~else {  $ ~~~if ( p . top ( ) == s [ a ] )  $ ~~~~p . pop ( ) ;  $ ~~~else  $ ~~~~p . push ( s [ a ] ) ;  $ ~~}  $ ~}  $ ~s = "" ;  $ ~while ( ! p . empty ( ) ) {  $ ~~s += p . top ( ) ;  $ ~~p . pop ( ) ;  $ ~}  $ ~reverse ( ( s ) . begin ( ) , ( s ) . end ( ) ) ;  $ ~cout << s << endl ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~string s ;  $ ~cin >> s ;  $ ~stack < char > st ;  $ ~for ( int i = 0 ; i < s . size ( ) ; i ++ ) {  $ ~~if ( ! st . empty ( ) && s [ i ] == st . top ( ) )  $ ~~~st . pop ( ) ;  $ ~~else  $ ~~~st . push ( s [ i ] ) ;  $ ~}  $ ~s = "" ;  $ ~while ( ! st . empty ( ) ) {  $ ~~s += st . top ( ) ;  $ ~~st . pop ( ) ;  $ ~}  $ ~for ( int i = s . size ( ) - 1 ; i >= 0 ; i -- ) cout << s [ i ] ;  $ ~cout << endl ;  $ }
int main ( ) {  $ ~string str ;  $ ~cin >> str ;  $ ~int pearls = 0 , links = 0 ;  $ ~for ( int i = 0 ; i < str . size ( ) ; i ++ ) {  $ ~~if ( str [ i ] == 'o' )  $ ~~~pearls ++ ;  $ ~~else  $ ~~~links ++ ;  $ ~}  $ ~if ( pearls == 0 || links == 0 ) {  $ ~~cout << "YES" << endl ;  $ ~~return 0 ;  $ ~}  $ ~if ( ( links % pearls ) != 0 )  $ ~~cout << "NO" << endl ;  $ ~else  $ ~~cout << "YES" << endl ;  $ }
const int maxn = 110 ;  $ const int inf = 0 x3f3f3f3f ;  $ char s [ maxn ] ;  $ int main ( ) {  $ ~string s ;  $ ~cin >> s ;  $ ~int cnt1 = 0 , cnt2 = 0 ;  $ ~for ( int i = 0 ; i < s . size ( ) ; i ++ ) {  $ ~~if ( s [ i ] == 'o' )  $ ~~~cnt1 ++ ;  $ ~~else  $ ~~~cnt2 ++ ;  $ ~}  $ ~if ( cnt1 == 0 ) {  $ ~~cout << "YES" << endl ;  $ ~} else {  $ ~~if ( cnt2 % cnt1 == 0 )  $ ~~~cout << "YES" << endl ;  $ ~~else  $ ~~~cout << "NO" << endl ;  $ ~}  $ ~return 0 ;  $ }
int main ( ) {  $ ~char s [ 106 ] ;  $ ~while ( gets ( s ) ) {  $ ~~int a = 0 , b = 0 , ll = strlen ( s ) ;  $ ~~for ( int i = 0 ; i < ll ; i ++ ) {  $ ~~~if ( s [ i ] == '-' )  $ ~~~~a ++ ;  $ ~~~else if ( s [ i ] == 'o' )  $ ~~~~b ++ ;  $ ~~}  $ ~~if ( b == 0 || a % b == 0 )  $ ~~~puts ( "YES" ) ;  $ ~~else  $ ~~~puts ( "NO" ) ;  $ ~}  $ }
int main ( ) {  $ ~string s ;  $ ~cin >> s ;  $ ~int z = 0 , x = 0 ;  $ ~for ( int i = 0 ; i < s . length ( ) ; i ++ ) {  $ ~~if ( s [ i ] == 'o' ) { z ++ ; }  $ ~~if ( s [ i ] == '-' ) { x ++ ; }  $ ~}  $ ~if ( z == 0 || x == 0 || x % z == 0 ) {  $ ~~cout << "YES" << endl ;  $ ~} else {  $ ~~cout << "NO" << endl ;  $ ~}  $ ~return 0 ;  $ }
char s [ 243554 ] , zhu , xian ;  $ int main ( ) {  $ ~gets ( s ) ;  $ ~int len = strlen ( s ) ;  $ ~for ( int i = 0 ; i < len ; ++ i ) {  $ ~~if ( s [ i ] == 'o' )  $ ~~~++ zhu ;  $ ~~else  $ ~~~++ xian ;  $ ~}  $ ~if ( zhu == 0 )  $ ~~puts ( "YES" ) ;  $ ~else if ( xian % zhu == 0 )  $ ~~puts ( "YES" ) ;  $ ~else  $ ~~puts ( "NO" ) ;  $ ~return 0 ;  $ }
const int maxn = 110 ;  $ const int inf = 0 x3f3f3f3f ;  $ char s [ maxn ] ;  $ int main ( ) {  $ ~string s ;  $ ~cin >> s ;  $ ~int cnt1 = 0 , cnt2 = 0 ;  $ ~for ( int i = 0 ; i < s . size ( ) ; i ++ ) {  $ ~~if ( s [ i ] == 'o' )  $ ~~~cnt1 ++ ;  $ ~~else  $ ~~~cnt2 ++ ;  $ ~}  $ ~if ( cnt1 == 0 ) {  $ ~~cout << "YES" << endl ;  $ ~} else {  $ ~~if ( cnt2 % cnt1 == 0 )  $ ~~~cout << "YES" << endl ;  $ ~~else  $ ~~~cout << "NO" << endl ;  $ ~}  $ ~return 0 ;  $ }
int main ( ) {  $ ~string s ;  $ ~cin >> s ;  $ ~int x = 0 ;  $ ~for ( int i = 0 ; i < s . length ( ) ; i ++ ) {  $ ~~if ( s [ i ] == 'o' ) { x ++ ; }  $ ~}  $ ~if ( x == 0 ) {  $ ~~cout << "YES" << '\n' ;  $ ~} else {  $ ~~if ( s . length ( ) % x == 0 ) {  $ ~~~cout << "YES" << '\n' ;  $ ~~} else {  $ ~~~cout << "NO" << '\n' ;  $ ~~}  $ ~}  $ ~return 0 ;  $ }
string s ;  $ int p = 0 , l = 0 ;  $ int main ( ) {  $ ~cin >> s ;  $ ~for ( int i = 0 ; i < s . length ( ) ; i ++ ) {  $ ~~if ( s [ i ] == '-' )  $ ~~~l ++ ;  $ ~~else  $ ~~~p ++ ;  $ ~}  $ ~if ( ( p == 0 ) || ( l % p == 0 ) )  $ ~~cout << "YES" << endl ;  $ ~else  $ ~~cout << "NO" << endl ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~string s ;  $ ~int j = 0 , k = 0 ;  $ ~cin >> s ;  $ ~for ( int i = 0 ; i < s . length ( ) ; i ++ ) {  $ ~~if ( s [ i ] == '-' )  $ ~~~j ++ ;  $ ~~else  $ ~~~k ++ ;  $ ~}  $ ~if ( k == 0 )  $ ~~cout << "YES" << endl ;  $ ~else if ( j % k == 0 )  $ ~~cout << "YES" << endl ;  $ ~else  $ ~~cout << "NO" << endl ;  $ ~return 0 ;  $ }
const int INF = 0 x3f3f3f3f ;  $ char s [ 1005 ] ;  $ int main ( ) {  $ ~int i , j , k ;  $ ~int n , m ;  $ ~cin >> s ;  $ ~int cou = 0 , co = 0 ;  $ ~for ( i = 0 ; i < strlen ( s ) ; i ++ ) {  $ ~~if ( s [ i ] == 'o' )  $ ~~~cou ++ ;  $ ~~else  $ ~~~co ++ ;  $ ~}  $ ~if ( cou == 0 ) {  $ ~~cout << "YES" << endl ;  $ ~~return 0 ;  $ ~}  $ ~if ( co < cou && co > 0 )  $ ~~cout << "NO" << endl ;  $ ~else {  $ ~~if ( co % cou == 0 )  $ ~~~cout << "YES" << endl ;  $ ~~else  $ ~~~cout << "NO" << endl ;  $ ~}  $ }
int main ( ) {  $ ~int x = 0 , o = 0 ;  $ ~string n ;  $ ~cin >> n ;  $ ~for ( int i = 0 ; i < n . length ( ) ; i ++ ) {  $ ~~if ( n [ i ] == 'o' )  $ ~~~o ++ ;  $ ~~else  $ ~~~x ++ ;  $ ~}  $ ~if ( o > 0 ) {  $ ~~if ( x % o == 0 )  $ ~~~cout << "YES\n" ;  $ ~~else  $ ~~~cout << "NO\n" ;  $ ~} else  $ ~~cout << "YES\n" ;  $ }
int main ( ) {  $ ~char S [ 101 ] ;  $ ~int pearls = 0 , dash = 0 ;  $ ~cin >> S ;  $ ~for ( int i = 0 ; S [ i ] ; i ++ ) {  $ ~~if ( S [ i ] == '-' ) {  $ ~~~dash ++ ;  $ ~~} else {  $ ~~~pearls ++ ;  $ ~~}  $ ~}  $ ~if ( pearls == 0 || dash % pearls == 0 ) {  $ ~~cout << "YES\n" ;  $ ~} else {  $ ~~cout << "NO\n" ;  $ ~}  $ }
int len , n1 , n2 ;  $ char s [ 105 ] ;  $ int main ( ) {  $ ~cin >> s ;  $ ~len = strlen ( s ) ;  $ ~for ( int i = 0 ; i < len ; i ++ )  $ ~~if ( s [ i ] == 'o' )  $ ~~~n1 ++ ;  $ ~~else if ( s [ i ] == '-' )  $ ~~~n2 ++ ;  $ ~if ( n1 == 0 )  $ ~~cout << "YES" << endl ;  $ ~else if ( n2 % n1 == 0 )  $ ~~cout << "YES" << endl ;  $ ~else  $ ~~cout << "NO" << endl ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~int count = 0 , p = 0 , i , n ;  $ ~string a ;  $ ~cin >> a ;  $ ~n = a . length ( ) ;  $ ~for ( i = 0 ; i < n ; i ++ ) {  $ ~~if ( a [ i ] == '-' )  $ ~~~count ++ ;  $ ~~else  $ ~~~p ++ ;  $ ~}  $ ~if ( count == 0 || p == 0 )  $ ~~cout << "YES" << endl ;  $ ~else if ( count % p == 0 )  $ ~~cout << "YES" << endl ;  $ ~else  $ ~~cout << "NO" << endl ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~string cad ;  $ ~cin >> cad ;  $ ~int guiones = 0 , perlas = 0 ;  $ ~for ( int i = 0 ; i < cad . size ( ) ; i ++ )  $ ~~if ( cad [ i ] == '-' )  $ ~~~guiones ++ ;  $ ~~else  $ ~~~perlas ++ ;  $ ~if ( guiones == 0 || perlas == 0 )  $ ~~cout << "YES\n" ;  $ ~else {  $ ~~if ( guiones < perlas )  $ ~~~cout << "NO\n" ;  $ ~~else {  $ ~~~if ( guiones == perlas )  $ ~~~~cout << "YES\n" ;  $ ~~~else {  $ ~~~~if ( guiones % perlas == 0 )  $ ~~~~~cout << "YES\n" ;  $ ~~~~else  $ ~~~~~cout << "NO\n" ;  $ ~~~}  $ ~~}  $ ~}  $ ~return 0 ;  $ }
int main ( ) {  $ ~int link = 0 , pearl = 0 ;  $ ~string str ;  $ ~cin >> str ;  $ ~for ( int i = 0 ; i < str . length ( ) ; i ++ ) {  $ ~~if ( str [ i ] == '-' )  $ ~~~link ++ ;  $ ~~else  $ ~~~pearl ++ ;  $ ~}  $ ~if ( pearl == 0 ) {  $ ~~cout << "YES" << endl ;  $ ~~return 0 ;  $ ~}  $ ~if ( link % pearl == 0 )  $ ~~cout << "YES" << endl ;  $ ~else  $ ~~cout << "NO" << endl ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~string s ;  $ ~cin >> s ;  $ ~int bul = 0 , ris = 0 ;  $ ~for ( int i = 0 ; i < s . length ( ) ; i ++ ) {  $ ~~if ( s [ i ] == '-' ) {  $ ~~~ris += 1 ;  $ ~~} else  $ ~~~bul += 1 ;  $ ~}  $ ~if ( bul == 0 ) {  $ ~~cout << "YES" << endl ;  $ ~} else if ( ris % bul == 0 ) {  $ ~~cout << "YES" << endl ;  $ ~} else  $ ~~cout << "NO" << endl ;  $ }
int main ( ) {  $ ~char a [ 1001 ] ;  $ ~int n , m ;  $ ~while ( cin >> a ) {  $ ~~n = 0 , m = 0 ;  $ ~~for ( int i = 0 ; i < strlen ( a ) ; i ++ ) {  $ ~~~if ( a [ i ] == '-' ) {  $ ~~~~n ++ ;  $ ~~~} else if ( a [ i ] == 'o' ) {  $ ~~~~m ++ ;  $ ~~~}  $ ~~}  $ ~~if ( n == 0 || m == 0 || n % m == 0 ) {  $ ~~~cout << "YES" << endl ;  $ ~~} else {  $ ~~~cout << "NO" << endl ;  $ ~~}  $ ~}  $ }
int main ( ) {  $ ~string s ;  $ ~int a = 0 , b = 0 ;  $ ~cin >> s ;  $ ~for ( int i = 0 ; i < s . length ( ) ; i ++ ) {  $ ~~if ( s [ i ] == '-' )  $ ~~~b ++ ;  $ ~~else  $ ~~~a ++ ;  $ ~}  $ ~if ( a == 0 || b % a == 0 )  $ ~~cout << "YES" << endl ;  $ ~else  $ ~~cout << "NO" << endl ;  $ }
const int maxN = ( int ) 1e5 ;  $ int main ( ) {  $ ~int n , x , y ;  $ ~cin >> n >> x >> y ;  $ ~double t = ceil ( n * y * 1.0 / 100.0 ) ;  $ ~cout << max ( ( int ) t - x , 0 ) << endl ;  $ }
const int M = 100 + 5 ;  $ int main ( ) {  $ ~int n , x , y ;  $ ~cin >> n >> x >> y ;  $ ~int tmp = n * y / 100 + ( ( n * y ) % 100 != 0 ) - x ;  $ ~int ans = max ( tmp , 0 ) ;  $ ~cout << ans << endl ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~int n , x , y ;  $ ~cin >> n >> x >> y ;  $ ~int z = ceil ( ( double ) n * y / 100 ) ;  $ ~if ( z > x )  $ ~~cout << z - x << endl ;  $ ~else  $ ~~cout << 0 << endl ;  $ }
int main ( ) {  $ ~long long n , x , y , ans , xx ;  $ ~cin >> n >> x >> y ;  $ ~xx = n * y / 100 ;  $ ~while ( xx * 100 < n * y ) xx ++ ;  $ ~ans = max ( 0 LL , xx - x ) ;  $ ~cout << ans << "\n" ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~int n , x , y ;  $ ~int p = 1 ;  $ ~cin >> n ;  $ ~cin >> x ;  $ ~cin >> y ;  $ ~p = n * y ;  $ ~if ( p % 100 != 0 )  $ ~~p = p / 100 + 1 ;  $ ~else  $ ~~p = p / 100 ;  $ ~if ( p <= x )  $ ~~cout << 0 << endl ;  $ ~else  $ ~~cout << p - x << endl ;  $ ~return 0 ;  $ }
double size_n , size_x , size_y ;  $ double result ;  $ int main ( ) {  $ ~double man , have_now ;  $ ~cin >> size_n >> size_x >> size_y ;  $ ~man = size_n * 0.01 ;  $ ~have_now = size_x / man ;  $ ~if ( have_now < size_y ) {  $ ~~result = ( size_y - have_now ) * man ;  $ ~~if ( double ( int ( result ) ) != result ) result += 1 ;  $ ~} else  $ ~~result = 0 ;  $ ~cout << int ( result ) << endl ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~double n , x , y ;  $ ~cin >> n >> x >> y ;  $ ~int r = ceil ( y / 100 * n ) ;  $ ~if ( x >= r )  $ ~~cout << 0 << '\n' ;  $ ~else  $ ~~cout << r - x << '\n' ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~long long int x , y , n ;  $ ~cin >> n >> x >> y ;  $ ~double m = ( double ( n * y ) / 100 ) ;  $ ~long long int dem = ceil ( m ) ;  $ ~if ( x >= dem ) {  $ ~~cout << 0 << endl ;  $ ~} else {  $ ~~cout << dem - x << endl ;  $ ~}  $ }
int n , x , y ;  $ int main ( ) {  $ ~cin >> n >> x >> y ;  $ ~cout << max ( 0 , ( n * y + 99 ) / 100 - x ) << endl ;  $ }
const long long mod = 1e9 + 7 ;  $ const int N = 1e5 + 5 ;  $ long long gcd ( long long a , long long b ) {  $ ~return b ? gcd ( b , a % b ) : a ;  $ }  $ long long pwr ( long long x , long long y ) ;  $ bool isprime ( long long x ) ;  $ int main ( ) {  $ ~int n , x , y ;  $ ~cin >> n >> x >> y ;  $ ~int ans = ( ( n * y ) / 100 + bool ( ( n * y ) % 100 ) ) ;  $ ~if ( x > ans ) {  $ ~~cout << 0 << endl ;  $ ~~return 0 ;  $ ~}  $ ~cout << ( ans - x ) << endl ;  $ ~return 0 ;  $ }  $ long long pwr ( long long x , long long y ) {  $ ~long long ans = 1 ;  $ ~x = x % mod ;  $ ~while ( y > 0 ) {  $ ~~if ( y & 1 ) ans = ( x * ans ) % mod ;  $ ~~x = ( x * x ) % mod ;  $ ~~y = y / 2 ;  $ ~}  $ ~return ans ;  $ }  $ bool isprime ( long long x ) {  $ ~if ( x < 2 ) return false ;  $ ~if ( x < 4 ) return true ;  $ ~if ( x % 2 == 0 || x % 3 == 0 ) return false ;  $ ~for ( long long i = 5 ; i * i <= x ; i += 6 ) {  $ ~~if ( x % i == 0 || x % ( i + 2 ) == 0 ) return false ;  $ ~}  $ ~return true ;  $ }
int main ( ) {  $ ~int n , x , y ;  $ ~cin >> n >> x >> y ;  $ ~int ans = ceil ( ( double ) y / 100 * n ) ;  $ ~if ( ans - x > 0 )  $ ~~cout << ans - x << endl ;  $ ~else  $ ~~cout << 0 << endl ;  $ }
int main ( ) {  $ ~double n , x , y ;  $ ~cin >> n >> x >> y ;  $ ~int temp = x ;  $ ~while ( ( x / n ) * 100 < y ) { x ++ ; }  $ ~cout << x - temp << endl ;  $ }
int main ( ) {  $ ~int n , x , y ;  $ ~cin >> n >> x >> y ;  $ ~int res = ceil ( ( y / 100.0 ) * n ) - x ;  $ ~if ( res < 0 ) {  $ ~~cout << 0 << endl ;  $ ~} else {  $ ~~cout << res << endl ;  $ ~}  $ ~return 0 ;  $ }
int main ( ) {  $ ~int n , x , y ;  $ ~cin >> n >> x >> y ;  $ ~int temp = ( y * n / 100 ) + ( ( y * n % 100 ) ? 1 : 0 ) ;  $ ~temp -= x ;  $ ~if ( temp <= 0 )  $ ~~cout << "0\n" ;  $ ~else  $ ~~cout << temp << '\n' ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~double x , y , z ;  $ ~cin >> x >> y >> z ;  $ ~int ans = ceil ( ( x * z ) / 100 ) - y ;  $ ~if ( ans < 0 )  $ ~~cout << 0 << "\n" ;  $ ~else  $ ~~cout << ans << "\n" ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~double n , x , y ;  $ ~cin >> n >> x >> y ;  $ ~long long z = ceil ( ( y / 100 ) * n ) ;  $ ~long long ans = 0 ;  $ ~if ( z > x ) { ans = z - x ; }  $ ~cout << ans << endl ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~int n , x , y ;  $ ~cin >> n >> x >> y ;  $ ~cout << ( y * n - min ( y * n , x * 100 ) + 99 ) / 100 << endl ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~int n , x , y ;  $ ~cin >> n >> x >> y ;  $ ~double p = ( x * 100.0 ) / ( n * 1.0 ) ;  $ ~if ( p >= y ) {  $ ~~cout << 0 << endl ;  $ ~~return 0 ;  $ ~}  $ ~int S = 0 ;  $ ~for ( int i = x + 1 ; i <= 1000010 ; i ++ ) {  $ ~~S ++ ;  $ ~~if ( ( i * 100.0 ) / ( n * 1.0 ) >= y ) break ;  $ ~}  $ ~cout << S << endl ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~int n , x , y ;  $ ~cin >> n >> x >> y ;  $ ~int clones = ( n * y + 99 ) / 100 - x ;  $ ~if ( clones < 0 ) { clones = 0 ; }  $ ~cout << clones << endl ;  $ ~return 0 ;  $ }
int N , K , ans , A [ 10 ] , val , x , y ;  $ string T , S , P ;  $ bool cek ;  $ int main ( ) {  $ ~cin >> N >> x >> y ;  $ ~cout << max ( 0 , ( N * y - 1 ) / 100 + 1 - x ) << '\n' ;  $ }
int main ( ) {  $ ~int x , y , z , t1 , t2 , t3 ;  $ ~cin >> x >> y >> z >> t1 >> t2 >> t3 ;  $ ~int el , st ;  $ ~el = abs ( x - z ) * t2 + 3 * t3 + abs ( y - x ) * t2 ;  $ ~st = abs ( x - y ) * t1 ;  $ ~if ( st < el )  $ ~~cout << "NO\n" ;  $ ~else  $ ~~cout << "YES\n" ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~int x , y , z , t1 , t2 , t3 ;  $ ~cin >> x >> y >> z >> t1 >> t2 >> t3 ;  $ ~int k = x - y ;  $ ~if ( k < 0 ) { k = k * ( - 1 ) ; }  $ ~int l = z - x ;  $ ~if ( l < 0 ) { l = l * ( - 1 ) ; }  $ ~int stairs = k * t1 ;  $ ~int elevator = l * t2 + k * t2 + 3 * t3 ;  $ ~if ( stairs < elevator ) {  $ ~~cout << "NO" << endl ;  $ ~} else {  $ ~~cout << "YES" << endl ;  $ ~}  $ ~return 0 ;  $ }
int main ( ) {  $ ~int x , y , z , t1 , t2 , t3 , st , el ;  $ ~cin >> x >> y >> z >> t1 >> t2 >> t3 ;  $ ~st = abs ( x - y ) * t1 ;  $ ~el = ( abs ( x - z ) + abs ( x - y ) ) * t2 + t3 * 3 ;  $ ~if ( el <= st )  $ ~~cout << "YES" << endl ;  $ ~else  $ ~~cout << "NO" << endl ;  $ ~return 0 ;  $ }
int x , y , z , t1 , t2 , t3 ;  $ int main ( ) {  $ ~cin >> x >> y >> z >> t1 >> t2 >> t3 ;  $ ~if ( ( fabs ( z - x ) + fabs ( x - y ) ) * t2 + 3 * t3 <= fabs ( x - y ) * t1 )  $ ~~cout << "YES" << endl ;  $ ~else  $ ~~cout << "NO" << endl ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~int x , y , z , t1 , t2 , t3 ;  $ ~cin >> x >> y >> z >> t1 >> t2 >> t3 ;  $ ~int masha_time = abs ( x - y ) * t1 ;  $ ~int elevator_time = abs ( x - z ) * t2 + abs ( x - y ) * t2 + t3 + t3 + t3 ;  $ ~if ( elevator_time <= masha_time )  $ ~~cout << "YES" << endl ;  $ ~else  $ ~~cout << "NO" << endl ;  $ }
int main ( ) {  $ ~int x , y , z , t1 , t2 , t3 ;  $ ~cin >> x >> y >> z >> t1 >> t2 >> t3 ;  $ ~if ( abs ( x - z ) * t2 + abs ( x - y ) * t2 + t3 * 3 <= abs ( x - y ) * t1 )  $ ~~cout << "YES" << '\n' ;  $ ~else  $ ~~cout << "NO" << '\n' ;  $ ~return 0 ;  $ }
const int INF = 0 x3f3f3f3f ;  $ int main ( ) {  $ ~int x , y , z , t1 , t2 , t3 ;  $ ~cin >> x >> y >> z >> t1 >> t2 >> t3 ;  $ ~int tv = 0 , ts = 0 ;  $ ~ts = t1 * abs ( y - x ) ;  $ ~tv = t2 * abs ( z - x ) + t2 * abs ( y - x ) + t3 * 3 ;  $ ~if ( tv <= ts )  $ ~~puts ( "YES" ) ;  $ ~else  $ ~~puts ( "NO" ) ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~int x , y , z , t1 , t2 , t3 ;  $ ~cin >> x >> y >> z >> t1 >> t2 >> t3 ;  $ ~int str_dif = x - y ;  $ ~int elv_dif = x - z ;  $ ~if ( str_dif < 0 || elv_dif < 0 ) {  $ ~~if ( str_dif < 0 ) str_dif = str_dif * - 1 ;  $ ~~if ( elv_dif < 0 ) elv_dif = elv_dif * - 1 ;  $ ~}  $ ~int str_time = str_dif * t1 ;  $ ~int elv_time = elv_dif * t2 + str_dif * t2 + 3 * t3 ;  $ ~if ( str_time < elv_time )  $ ~~cout << "NO" << endl ;  $ ~else  $ ~~cout << "YES" << endl ;  $ }
int main ( ) {  $ ~int x , y , z , t1 , t2 , t3 ;  $ ~cin >> x >> y >> z >> t1 >> t2 >> t3 ;  $ ~int stairs = abs ( y - x ) * t1 ;  $ ~int elevator = abs ( z - x ) * t2 + abs ( y - x ) * t2 + 3 * t3 ;  $ ~if ( elevator <= stairs ) {  $ ~~cout << "YES" << endl ;  $ ~} else {  $ ~~cout << "NO" << endl ;  $ ~}  $ ~return 0 ;  $ }
int main ( ) {  $ ~int x , y , z , t1 , t2 , t3 ;  $ ~cin >> x >> y >> z >> t1 >> t2 >> t3 ;  $ ~if ( ( ( abs ( x - y ) + abs ( x - z ) ) * t2 ) + ( 3 * t3 ) <= ( ( abs ( x - y ) ) * t1 ) ) {  $ ~~cout << "YES" << endl ;  $ ~} else {  $ ~~cout << "NO" << endl ;  $ ~}  $ }
int main ( ) {  $ ~int x , y , z , t1 , t2 , t3 ;  $ ~cin >> x >> y >> z >> t1 >> t2 >> t3 ;  $ ~int ans1 , ans2 = abs ( x - y ) * t1 ;  $ ~ans1 = abs ( z - x ) * t2 + t3 * 3 + abs ( x - y ) * t2 ;  $ ~if ( ans1 <= ans2 )  $ ~~cout << "YES" << endl ;  $ ~else  $ ~~cout << "NO" << endl ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~int a , b , c , d , e , f , g , m , s , l , n , t ;  $ ~cin >> a >> b >> c >> d >> e >> f ;  $ ~s = ( a - b ) * d ;  $ ~if ( s < 0 ) { s = - 1 * s ; }  $ ~l = ( ( c - a ) * e ) ;  $ ~if ( l < 0 ) l = - l ;  $ ~t = ( a - b ) * e ;  $ ~if ( t < 0 ) t = - t ;  $ ~m = t + l + 3 * f ;  $ ~if ( m <= s )  $ ~~cout << "YES" << endl ;  $ ~else  $ ~~cout << "NO" << endl ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~int x , y , z , t1 , t2 , t3 ;  $ ~cin >> x >> y >> z >> t1 >> t2 >> t3 ;  $ ~long long a , b , c , d ;  $ ~if ( y > x ) {  $ ~~a = y - x ;  $ ~} else {  $ ~~a = x - y ;  $ ~}  $ ~c = a * t1 ;  $ ~if ( z > x ) {  $ ~~b = z - x ;  $ ~} else {  $ ~~b = x - z ;  $ ~}  $ ~d = ( b + a ) * t2 + 3 * t3 ;  $ ~if ( c >= d ) {  $ ~~cout << "YES" << endl ;  $ ~} else {  $ ~~cout << "NO" << endl ;  $ ~}  $ }
const int MAX = 4 ;  $ int main ( ) {  $ ~int x , y , z , t1 , t2 , t3 ;  $ ~cin >> x >> y >> z >> t1 >> t2 >> t3 ;  $ ~int a , b ;  $ ~a = abs ( z - x ) * t2 + t3 * 3 + abs ( x - y ) * t2 ;  $ ~b = abs ( x - y ) * t1 ;  $ ~if ( a <= b )  $ ~~cout << "YES" << endl ;  $ ~else  $ ~~cout << "NO" << endl ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~int x , y , z , a , b , c ;  $ ~cin >> x >> y >> z >> a >> b >> c ;  $ ~int stair = abs ( x - y ) * a ;  $ ~int lift = ( abs ( x - z ) + abs ( x - y ) ) * b + ( 3 * c ) ;  $ ~if ( lift <= stair )  $ ~~cout << "YES\n" ;  $ ~else  $ ~~cout << "NO\n" ;  $ }
int main ( ) {  $ ~int x , y , z , t1 , t2 , t3 ;  $ ~cin >> x >> y >> z >> t1 >> t2 >> t3 ;  $ ~int tot1 = abs ( z - x ) * t2 + t3 * 3 + abs ( y - x ) * t2 ;  $ ~int tot2 = abs ( y - x ) * t1 ;  $ ~if ( tot1 > tot2 )  $ ~~cout << "NO" << endl ;  $ ~else  $ ~~cout << "YES" << endl ;  $ ~return 0 ;  $ }
long long x , y , z , t1 , t2 , t3 , e ;  $ int main ( ) {  $ ~cin >> x >> y >> z >> t1 >> t2 >> t3 ;  $ ~e = abs ( z - x ) * t2 ;  $ ~e += t3 * 3 ;  $ ~e += abs ( y - x ) * t2 ;  $ ~t1 *= abs ( y - x ) ;  $ ~if ( t1 >= e )  $ ~~cout << "YES" << '\n' ;  $ ~else  $ ~~cout << "NO" << '\n' ;  $ ~return 0 ;  $ }
long long mod = 1e9 + 7 ;  $ map < int , int > mp ;  $ long long a [ 200001 ] ;  $ long long b [ 200001 ] ;  $ long long c [ 11 ] ;  $ long long u [ 151 ] ;  $ int main ( ) {  $ ~long long n , m , mn = 0 , l , t1 , t2 , t3 ;  $ ~long long cnt = 0 , ans = 0 ;  $ ~cin >> n >> m >> l ;  $ ~cin >> t1 >> t2 >> t3 ;  $ ~long long res = abs ( n - l ) * t2 + t3 + t3 + abs ( n - m ) * t2 + t3 ;  $ ~long long oi = abs ( n - m ) * t1 ;  $ ~if ( res > oi )  $ ~~cout << "NO" << endl ;  $ ~else  $ ~~cout << "YES" << endl ;  $ ~return 0 ;  $ }
int abs ( int x ) {  $ ~if ( x < 0 ) return - x ;  $ ~return x ;  $ }  $ void solve ( ) {  $ ~int x , y , z , t1 , t2 , t3 ;  $ ~cin >> x >> y >> z >> t1 >> t2 >> t3 ;  $ ~int timeWalk = abs ( y - x ) * t1 ;  $ ~int timeTakeElevator = t3 * 3 ;  $ ~timeTakeElevator += abs ( x - z ) * t2 ;  $ ~timeTakeElevator += abs ( y - x ) * t2 ;  $ ~if ( timeTakeElevator > timeWalk ) {  $ ~~cout << "NO\n" ;  $ ~} else {  $ ~~cout << "YES\n" ;  $ ~}  $ }  $ int main ( ) {  $ ~solve ( ) ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~int x , y , z , t1 , t2 , t3 ;  $ ~cin >> x >> y >> z >> t1 >> t2 >> t3 ;  $ ~int fd = abs ( x - y ) ;  $ ~int cd = abs ( x - z ) ;  $ ~int stt , lift_t ;  $ ~stt = fd * t1 ;  $ ~int nw ;  $ ~nw = fd + cd ;  $ ~lift_t = ( nw * t2 ) + ( 3 * t3 ) ;  $ ~int mn ;  $ ~if ( lift_t <= stt ) {  $ ~~cout << "YES\n" ;  $ ~} else {  $ ~~cout << "NO\n" ;  $ ~}  $ ~return 0 ;  $ }
int main ( ) {  $ ~int x , y , z , t1 , t2 , t3 ;  $ ~cin >> x >> y >> z >> t1 >> t2 >> t3 ;  $ ~int walk_time = abs ( x - y ) * t1 ;  $ ~int lift_time = abs ( x - z ) * t2 + abs ( x - y ) * t2 ;  $ ~lift_time += ( t3 * 3 ) ;  $ ~if ( lift_time <= walk_time )  $ ~~cout << "YES" << endl ;  $ ~else  $ ~~cout << "NO" << endl ;  $ }
int x , y , z , a , b , c ;  $ int main ( ) {  $ ~cin >> x >> y >> z >> a >> b >> c ;  $ ~int r = abs ( x - y ) * a ;  $ ~int s = abs ( x - z ) * b + 3 * c + abs ( x - y ) * b ;  $ ~if ( r < s )  $ ~~cout << "NO\n" ;  $ ~else  $ ~~cout << "YES\n" ;  $ }
int absu ( int q ) {  $ ~if ( q > 0 )  $ ~~return q ;  $ ~else  $ ~~return - q ;  $ }  $ int main ( ) {  $ ~int x , y , z , t1 , t2 , t3 , a , b ;  $ ~cin >> x >> y >> z >> t1 >> t2 >> t3 ;  $ ~a = absu ( x - y ) * t1 ;  $ ~b = absu ( x - z ) * t2 + absu ( x - y ) * t2 + 3 * t3 ;  $ ~if ( a < b ) {  $ ~~cout << "NO" << endl ;  $ ~} else  $ ~~cout << "YES" << endl ;  $ }
const long long int MOD = 998244353 ;  $ long long int N , M , K , H , W , L , R ;  $ int main ( ) {  $ ~int a , b , c , d , e , f ;  $ ~cin >> a >> b >> c >> d >> e >> f ;  $ ~N = abs ( a - b ) * d ;  $ ~M = abs ( a - c ) * e ;  $ ~M += abs ( b - a ) * e ;  $ ~M += 3 * f ;  $ ~if ( N >= M )  $ ~~cout << "YES\n" ;  $ ~else  $ ~~cout << "NO\n" ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~int a [ 100 ] ;  $ ~int n , count , ans = 0 ;  $ ~cin >> n ;  $ ~for ( int i = 0 ; i < n ; i ++ ) { cin >> a [ i ] ; }  $ ~for ( int i = 0 ; i <= n ; i ++ ) {  $ ~~count = 0 ;  $ ~~for ( int j = i ; j < n ; j ++ ) {  $ ~~~if ( a [ j ] == 1 ) count ++ ;  $ ~~}  $ ~~for ( int k = 0 ; k < i ; k ++ ) {  $ ~~~if ( a [ k ] == 0 ) count ++ ;  $ ~~}  $ ~~ans = max ( ans , count ) ;  $ ~}  $ ~cout << ans << endl ;  $ }
int main ( ) {  $ ~int n , a [ 105 ] , temp , ans = 1 , i , j ;  $ ~cin >> n ;  $ ~for ( int i = 0 ; i < n ; i ++ ) { cin >> a [ i ] ; }  $ ~for ( i = 0 ; i < n ; i ++ ) {  $ ~~temp = 0 ;  $ ~~for ( j = 0 ; j <= i ; j ++ ) {  $ ~~~if ( ! a [ j ] ) temp ++ ;  $ ~~}  $ ~~for ( j = i ; j < n ; j ++ ) {  $ ~~~if ( a [ j ] ) temp ++ ;  $ ~~}  $ ~~ans = max ( ans , temp ) ;  $ ~}  $ ~cout << ans << endl ;  $ ~return 0 ;  $ }
const int inf = 0 x3f3f3f3f ;  $ int s [ 105 ] , n , dp [ 105 ] ;  $ int main ( ) {  $ ~cin >> n ;  $ ~for ( int i = 1 ; i <= n ; i ++ ) cin >> s [ i ] ;  $ ~dp [ 1 ] = s [ 1 ] ;  $ ~int len = 1 ;  $ ~for ( int i = 2 ; i <= n ; i ++ ) {  $ ~~if ( s [ i ] >= dp [ len ] )  $ ~~~dp [ ++ len ] = s [ i ] ;  $ ~~else {  $ ~~~int index = upper_bound ( dp + 1 , dp + 1 + len , s [ i ] ) - dp ;  $ ~~~dp [ index ] = s [ i ] ;  $ ~~}  $ ~}  $ ~cout << len << endl ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~int n ;  $ ~cin >> n ;  $ ~int a [ 200 ] ;  $ ~int one = 0 , zero = 0 ;  $ ~for ( int i = 0 ; i < n ; i ++ ) {  $ ~~cin >> a [ i ] ;  $ ~~if ( a [ i ] ) one ++ ;  $ ~}  $ ~int ans = 0 ;  $ ~for ( int i = 0 ; i < n ; i ++ ) {  $ ~~if ( a [ i ] == 0 ) zero ++ ;  $ ~~ans = max ( ans , one + zero ) ;  $ ~~if ( a [ i ] == 1 ) one -- ;  $ ~}  $ ~cout << ans << '\n' ;  $ }
int cont [ 1005 ] ;  $ int main ( ) {  $ ~int n ;  $ ~cin >> n ;  $ ~for ( int i = 0 ; i < n ; i ++ ) { cin >> cont [ i ] ; }  $ ~int ans = 0 ;  $ ~int now = 0 ;  $ ~for ( int i = 0 ; i < n ; i ++ ) {  $ ~~if ( cont [ i ] == 0 ) {  $ ~~~now ++ ;  $ ~~~ans = max ( ans , now ) ;  $ ~~} else {  $ ~~~int tmp = now ;  $ ~~~for ( int j = i ; j < n ; j ++ ) {  $ ~~~~if ( cont [ j ] ) { tmp ++ ; }  $ ~~~}  $ ~~~ans = max ( ans , tmp ) ;  $ ~~}  $ ~}  $ ~cout << ans << endl ;  $ }
const int MAXN = 100 + 5 ;  $ const int INF = 0 x3f3f3f3f ;  $ int main ( ) {  $ ~int n ;  $ ~cin >> n ;  $ ~int data [ MAXN ] ;  $ ~for ( int i = 0 ; i < n ; i ++ ) cin >> data [ i ] ;  $ ~int cnt , ans = n ;  $ ~for ( int i = 1 ; i < n ; i ++ ) {  $ ~~cnt = 0 ;  $ ~~if ( data [ i - 1 ] == data [ i ] ) continue ;  $ ~~for ( int j = 0 ; j < i ; j ++ )  $ ~~~if ( data [ j ] != 0 ) cnt ++ ;  $ ~~for ( int j = i ; j < n ; j ++ )  $ ~~~if ( data [ j ] != 1 ) cnt ++ ;  $ ~~ans = min ( ans , cnt ) ;  $ ~}  $ ~cnt = 0 ;  $ ~for ( int i = 0 ; i < n ; i ++ ) {  $ ~~if ( data [ i ] != 0 ) cnt ++ ;  $ ~}  $ ~ans = min ( ans , cnt ) ;  $ ~cnt = 0 ;  $ ~for ( int i = 0 ; i < n ; i ++ ) {  $ ~~if ( data [ i ] != 1 ) cnt ++ ;  $ ~}  $ ~ans = min ( ans , cnt ) ;  $ ~cout << n - ans << '\n' ;  $ }
int main ( ) {  $ ~int n ;  $ ~while ( cin >> n ) {  $ ~~int game [ n ] ;  $ ~~for ( int i = 0 ; i < n ; i ++ ) cin >> game [ i ] ;  $ ~~int large = 0 , prezero = 0 ;  $ ~~for ( int i = 0 ; i < n ; i ++ ) {  $ ~~~if ( game [ i ] == 0 ) {  $ ~~~~prezero ++ ;  $ ~~~~large = max ( large , prezero ) ;  $ ~~~} else {  $ ~~~~int cur = prezero ;  $ ~~~~for ( int j = i ; j < n ; j ++ ) {  $ ~~~~~if ( game [ j ] == 1 ) { cur ++ ; }  $ ~~~~}  $ ~~~~large = max ( cur , large ) ;  $ ~~~}  $ ~~}  $ ~~cout << large << '\n' ;  $ ~}  $ }
const int maxn = 100005 ;  $ int s [ maxn ] , dp [ maxn ] ;  $ int n ;  $ int main ( ) {  $ ~cin >> n ;  $ ~for ( int i = 1 ; i <= n ; i ++ ) cin >> s [ i ] ;  $ ~dp [ 1 ] = s [ 1 ] ;  $ ~int len = 1 ;  $ ~for ( int i = 2 ; i <= n ; i ++ ) {  $ ~~if ( s [ i ] >= dp [ len ] )  $ ~~~dp [ ++ len ] = s [ i ] ;  $ ~~else {  $ ~~~int index = upper_bound ( dp + 1 , dp + len + 1 , s [ i ] ) - dp ;  $ ~~~dp [ index ] = s [ i ] ;  $ ~~}  $ ~}  $ ~cout << len << endl ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~int i , j , n , a = 1 , t , s [ 10000 ] ;  $ ~cin >> n ;  $ ~for ( i = 0 ; i < n ; i ++ ) cin >> s [ i ] ;  $ ~for ( i = 0 ; i < n ; i ++ ) {  $ ~~t = 0 ;  $ ~~for ( j = 0 ; j <= i ; j ++ ) {  $ ~~~if ( ! s [ j ] ) t ++ ;  $ ~~}  $ ~~for ( j = i ; j < n ; j ++ ) {  $ ~~~if ( s [ j ] ) t ++ ;  $ ~~}  $ ~~a = max ( a , t ) ;  $ ~}  $ ~cout << a << endl ;  $ ~return 0 ;  $ }
int a [ 4005 ] , d [ 4005 ] ;  $ int main ( ) {  $ ~int n ;  $ ~cin >> n ;  $ ~for ( int i = 1 ; i <= n ; i ++ ) cin >> a [ i ] ;  $ ~d [ 1 ] = a [ 1 ] ;  $ ~int len = 1 ;  $ ~for ( int i = 2 ; i <= n ; i ++ ) {  $ ~~if ( a [ i ] >= d [ len ] )  $ ~~~d [ ++ len ] = a [ i ] ;  $ ~~else {  $ ~~~int j = upper_bound ( d + 1 , d + len + 1 , a [ i ] ) - d ;  $ ~~~d [ j ] = a [ i ] ;  $ ~~}  $ ~}  $ ~cout << len << endl ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~int n , a [ 1000 ] , p = 1 , cnt = 0 ;  $ ~cin >> n ;  $ ~for ( int i = 1 ; i <= n ; i ++ ) cin >> a [ i ] ;  $ ~for ( int i = 1 ; i <= n ; i ++ ) {  $ ~~int t = 0 ;  $ ~~for ( int j = 1 ; j <= i ; j ++ )  $ ~~~if ( a [ j ] == 0 ) t ++ ;  $ ~~for ( int j = i ; j <= n ; j ++ )  $ ~~~if ( a [ j ] == 1 ) t ++ ;  $ ~~cnt = max ( cnt , t ) ;  $ ~}  $ ~cout << cnt << endl ;  $ ~return 0 ;  $ }
const int N = 105 ;  $ int n , s [ N ] , dp [ N ] , ans ;  $ int main ( ) {  $ ~cin >> n ;  $ ~for ( int i = 1 ; i <= n ; ++ i ) cin >> s [ i ] ;  $ ~for ( int i = 1 ; i <= n ; ++ i ) {  $ ~~dp [ i ] = 1 ;  $ ~~for ( int j = i - 1 ; j >= 1 ; -- j ) {  $ ~~~if ( s [ i ] == 0 ) {  $ ~~~~if ( s [ j ] == 0 ) dp [ i ] = max ( dp [ i ] , 1 + dp [ j ] ) ;  $ ~~~} else {  $ ~~~~dp [ i ] = max ( dp [ i ] , 1 + dp [ j ] ) ;  $ ~~~}  $ ~~}  $ ~~ans = max ( dp [ i ] , ans ) ;  $ ~}  $ ~cout << ans << "\n" ;  $ ~return 0 ;  $ }
const int size = 105 ;  $ int suf [ size ] = { 0 } , pre [ size ] = { 0 } ;  $ int main ( ) {  $ ~int n ;  $ ~cin >> n ;  $ ~int arr [ n + 1 ] = { 0 } ;  $ ~for ( int i = 1 ; i <= n ; i ++ ) cin >> arr [ i ] , suf [ i ] = ( arr [ i ] ) , pre [ i ] = ( ! arr [ i ] ) ;  $ ~for ( int i = n ; i >= 1 ; i -- ) suf [ i ] += suf [ i + 1 ] ;  $ ~for ( int i = 1 ; i <= n ; i ++ ) pre [ i ] += pre [ i - 1 ] ;  $ ~int ans = 0 ;  $ ~for ( int i = 1 ; i <= n ; i ++ ) ans = max ( ans , pre [ i ] + suf [ i ] ) ;  $ ~cout << ans << "\n" ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~int n ;  $ ~cin >> n ;  $ ~int a [ 200 ] ;  $ ~int one = 0 , zero = 0 ;  $ ~for ( int i = 0 ; i < n ; i ++ ) {  $ ~~cin >> a [ i ] ;  $ ~~if ( a [ i ] ) one ++ ;  $ ~}  $ ~int ans = 0 ;  $ ~for ( int i = 0 ; i < n ; i ++ ) {  $ ~~if ( a [ i ] == 0 ) zero ++ ;  $ ~~ans = max ( ans , one + zero ) ;  $ ~~if ( a [ i ] == 1 ) one -- ;  $ ~}  $ ~cout << ans << '\n' ;  $ }
const int maxn = 10005 ;  $ int s [ maxn ] ;  $ int dp [ maxn ] ;  $ int len = 0 ;  $ int main ( ) {  $ ~int n ;  $ ~cin >> n ;  $ ~for ( int i = 0 ; i < n ; i ++ ) cin >> s [ i ] ;  $ ~for ( int i = 0 ; i < n ; i ++ ) {  $ ~~dp [ i ] = 1 ;  $ ~~for ( int j = 0 ; j < i ; j ++ ) {  $ ~~~if ( s [ i ] >= s [ j ] && dp [ j ] + 1 > dp [ i ] ) dp [ i ] = dp [ j ] + 1 ;  $ ~~}  $ ~~len = max ( dp [ i ] , len ) ;  $ ~}  $ ~cout << len << endl ;  $ ~return 0 ;  $ }
long long int a [ 204 ] ;  $ int main ( ) {  $ ~long long int n , i , j , k , x , y , t , m ;  $ ~cin >> n ;  $ ~for ( i = 1 ; i <= n ; i ++ ) cin >> a [ i ] ;  $ ~long long int mx = 0 , cnt1 = 0 ;  $ ~for ( i = 1 ; i <= n ; i ++ ) {  $ ~~long long int cnt = 0 ;  $ ~~if ( a [ i ] == 1 ) cnt1 ++ ;  $ ~~if ( a [ i ] == 0 ) {  $ ~~~for ( j = 1 ; j <= i ; j ++ ) {  $ ~~~~if ( a [ j ] == 0 ) cnt ++ ;  $ ~~~}  $ ~~~for ( j = i + 1 ; j <= n ; j ++ ) {  $ ~~~~if ( a [ j ] == 1 ) cnt ++ ;  $ ~~~}  $ ~~~mx = max ( mx , cnt ) ;  $ ~~}  $ ~}  $ ~cout << max ( mx , cnt1 ) << endl ;  $ }
int main ( ) {  $ ~int n ;  $ ~cin >> n ;  $ ~vector < int > game ( n ) ;  $ ~int numOf0 = 0 ;  $ ~for ( int i = 0 ; i < n ; ++ i ) {  $ ~~cin >> game [ i ] ;  $ ~~if ( game [ i ] == 0 ) numOf0 ++ ;  $ ~}  $ ~if ( numOf0 == 0 || numOf0 == n ) {  $ ~~cout << n << '\n' ;  $ ~~return 0 ;  $ ~}  $ ~int last0 = n - 1 ;  $ ~while ( last0 >= 0 && game [ last0 ] == 1 ) { last0 -- ; }  $ ~int numOf1 = n - 1 - last0 ;  $ ~int ans = numOf0 + numOf1 ;  $ ~for ( int i = last0 ; i >= 0 ; -- i ) {  $ ~~if ( game [ i ] == 1 ) {  $ ~~~numOf1 ++ ;  $ ~~~continue ;  $ ~~} else {  $ ~~~ans = max ( ans , numOf0 + numOf1 ) ;  $ ~~~numOf0 -- ;  $ ~~}  $ ~}  $ ~cout << max ( ans , numOf1 ) << '\n' ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~int n , res = 0 , one = 0 , zero = 0 ;  $ ~cin >> n ;  $ ~int a [ n ] ;  $ ~for ( int i = 0 ; i < n ; i ++ ) {  $ ~~cin >> a [ i ] ;  $ ~~if ( a [ i ] ) {  $ ~~~one = max ( one , zero ) ;  $ ~~~one ++ ;  $ ~~} else {  $ ~~~zero ++ ;  $ ~~}  $ ~}  $ ~res = max ( one , zero ) ;  $ ~cout << res << "\n" ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~int n , i , j , s = 0 , max = 0 , a [ 105 ] , b [ 105 ] ;  $ ~cin >> n ;  $ ~for ( i = 0 ; i < n ; i ++ ) {  $ ~~cin >> a [ i ] ;  $ ~~if ( a [ i ] == 0 ) s ++ ;  $ ~~b [ i ] = s ;  $ ~}  $ ~for ( i = 0 ; i < n ; i ++ ) {  $ ~~if ( a [ i ] == 0 )  $ ~~~if ( 2 * b [ i ] + n - 1 - i - s > max ) max = 2 * b [ i ] + n - 1 - i - s ;  $ ~~if ( a [ i ] == 1 )  $ ~~~if ( 2 * b [ i ] + n - i - s > max ) max = 2 * b [ i ] + n - i - s ;  $ ~}  $ ~cout << max << endl ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~long long x ;  $ ~cin >> x ;  $ ~if ( x % 2 == 0 )  $ ~~cout << 2 << endl ;  $ ~else  $ ~~cout << 1 << endl ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~long long a ;  $ ~cin >> a ;  $ ~if ( a % 2 == 0 )  $ ~~cout << 2 << endl ;  $ ~else  $ ~~cout << 1 << endl ;  $ ~return 0 ;  $ }
long long int k , n , a [ 100000 ] ;  $ int main ( ) {  $ ~cin >> n ;  $ ~if ( n % 2 == 0 )  $ ~~cout << 2 << endl ;  $ ~else  $ ~~cout << 1 << endl ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~long long n ;  $ ~cin >> n ;  $ ~if ( n & 1 )  $ ~~cout << 1 << endl ;  $ ~else  $ ~~cout << 2 << endl ;  $ }
int main ( ) {  $ ~long long x , y ;  $ ~cin >> x ;  $ ~y = x % 2 ;  $ ~if ( y == 0 )  $ ~~cout << 2 << endl ;  $ ~else  $ ~~cout << 1 << endl ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~string s ;  $ ~cin >> s ;  $ ~reverse ( s . begin ( ) , s . end ( ) ) ;  $ ~if ( s [ 0 ] == '0' || s [ 0 ] == '2' || s [ 0 ] == '4' || s [ 0 ] == '6' || s [ 0 ] == '8' )  $ ~~cout << '2' << endl ;  $ ~else  $ ~~cout << '1' << endl ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~long long n ;  $ ~cin >> n ;  $ ~if ( n % 2 == 1 )  $ ~~cout << 1 << endl ;  $ ~else  $ ~~cout << 2 << endl ;  $ }
int main ( ) {  $ ~long long n ;  $ ~cin >> n ;  $ ~cout << 2 - n % 2 << endl ;  $ ~return 0 ;  $ }
long long n , mid , f ;  $ int main ( ) {  $ ~cout << setprecision ( 30 ) << fixed ;  $ ~cin >> n ;  $ ~cout << 2 - n % 2 << '\n' ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~long long n ;  $ ~cin >> n ;  $ ~if ( n % 2 == 1 )  $ ~~cout << 1 << endl ;  $ ~else  $ ~~cout << 2 << endl ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~unsigned long long n ;  $ ~cin >> n ;  $ ~n % 2 == 0 ? cout << 2 << endl : cout << 1 << endl ;  $ ~return 0 ;  $ }
;  $ const long long INT64M = 0 X3F3F3F3F3F3F3F3F ;  $ const int INT32M = 0 x3F3F3F3F ;  $ const int mod = 1e9 + 7 ;  $ int main ( ) {  $ ~long long n ;  $ ~cin >> n ;  $ ~if ( n & 1 ) {  $ ~~cout << 1 << endl ;  $ ~} else {  $ ~~cout << 2 << endl ;  $ ~}  $ }
const int MAX = 1e5 + 5 ;  $ int main ( ) {  $ ~long long n ;  $ ~cin >> n ;  $ ~if ( n % 2 == 0 )  $ ~~cout << 2 << endl ;  $ ~else  $ ~~cout << 1 << endl ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~long long n ;  $ ~cin >> n ;  $ ~if ( n % 2 == 0 )  $ ~~cout << 2 << endl ;  $ ~else  $ ~~cout << 1 << endl ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~long long int n ;  $ ~cin >> n ;  $ ~if ( n % 2 )  $ ~~cout << 1 << endl ;  $ ~else  $ ~~cout << 2 << endl ;  $ }
vector < long long int > v ;  $ int main ( ) {  $ ~long long int n ;  $ ~cin >> n ;  $ ~if ( n % 2 == 0 )  $ ~~cout << 2 << endl ;  $ ~else  $ ~~cout << 1 << endl ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~long long n ;  $ ~cin >> n ;  $ ~if ( n % 2 )  $ ~~puts ( "1" ) ;  $ ~else  $ ~~puts ( "2" ) ;  $ }
int main ( ) {  $ ~unsigned long long int n ;  $ ~cin >> n ;  $ ~if ( n % 2 == 0 ) {  $ ~~cout << 2 << endl ;  $ ~} else {  $ ~~cout << 1 << endl ;  $ ~}  $ }
const int inf = 0 x3f3f3f ;  $ int main ( ) {  $ ~long long n ;  $ ~while ( cin >> n ) {  $ ~~if ( n % 2 == 0 )  $ ~~~cout << 2 << endl ;  $ ~~else  $ ~~~cout << 1 << endl ;  $ ~}  $ ~return 0 ;  $ }
int main ( ) {  $ ~long long a ;  $ ~cin >> a ;  $ ~cout << ( a % 2 == 1 ? 1 : 2 ) << endl ;  $ ~return 0 ;  $ }
const int INF = 0 x3f3f3f3f ;  $ long long mod = 10000000000 LL ;  $ long long cheng ( long long a , long long b , long long c ) {  $ ~long long ret = 0 ;  $ ~while ( b ) {  $ ~~if ( b & 1 ) {  $ ~~~ret += a ;  $ ~~~if ( ret >= c ) ret -= c ;  $ ~~}  $ ~~a += a ;  $ ~~if ( a >= c ) a -= c ;  $ ~~b >> = 1 ;  $ ~}  $ ~return ret ;  $ }  $ int main ( ) {  $ ~long long n ;  $ ~cin >> n ;  $ ~long long ans = cheng ( n , n , mod ) ;  $ ~if ( ans % 2 == 0 )  $ ~~cout << 2 << endl ;  $ ~else  $ ~~cout << 1 << endl ;  $ ~return 0 ;  $ }
const long long MAX = 1000 ;  $ int main ( ) {  $ ~long long n ;  $ ~cin >> n ;  $ ~if ( n % 2 == 1 )  $ ~~cout << 1 << endl ;  $ ~else  $ ~~cout << 2 << endl ;  $ }
int main ( ) {  $ ~long long n ;  $ ~cin >> n ;  $ ~cout << ( n % 2 == 1 ? 1 : 2 ) << endl ;  $ ~return 0 ;  $ }
const int MAX = 1e5 + 5 ;  $ int main ( ) {  $ ~long long n ;  $ ~cin >> n ;  $ ~if ( n % 2 == 0 )  $ ~~cout << 2 << endl ;  $ ~else  $ ~~cout << 1 << endl ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~long long n ;  $ ~cin >> n ;  $ ~cout << 2 - ( n % 2 ) << endl ;  $ }
int main ( ) {  $ ~long long n ;  $ ~long long a = 1 ;  $ ~long long b = 2 ;  $ ~cin >> n ;  $ ~if ( n % 2 == 0 ) {  $ ~~cout << b << endl ;  $ ~} else {  $ ~~cout << a << endl ;  $ ~}  $ }
int main ( ) {  $ ~long long n ;  $ ~cin >> n ;  $ ~if ( n % 2 == 0 )  $ ~~cout << "2" << endl ;  $ ~else  $ ~~cout << "1" << endl ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~long long n ;  $ ~cin >> n ;  $ ~if ( n % 2 )  $ ~~cout << 1 << endl ;  $ ~else  $ ~~cout << 2 << endl ;  $ ~return 0 ;  $ }
long long a , b , c , e , f ;  $ int main ( ) {  $ ~cin >> a ;  $ ~if ( a % 2 )  $ ~~cout << 1 << endl ;  $ ~else  $ ~~cout << 2 << endl ;  $ }
int main ( ) {  $ ~long long int n ;  $ ~cin >> n ;  $ ~if ( n & 1 )  $ ~~cout << "1\n" ;  $ ~else  $ ~~cout << "2\n" ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~long long int n ;  $ ~while ( cin >> n ) {  $ ~~if ( n % 2 == 1 )  $ ~~~cout << "1" ;  $ ~~else  $ ~~~cout << "2" ;  $ ~~cout << endl ;  $ ~}  $ }
int main ( ) {  $ ~unsigned long long n ;  $ ~cin >> n ;  $ ~n % 2 == 0 ? cout << 2 << endl : cout << 1 << endl ;  $ ~return 0 ;  $ }
const int maxn = 1e5 + 5 ;  $ int main ( ) {  $ ~long long n ;  $ ~cin >> n ;  $ ~if ( n % 2 )  $ ~~cout << "1" << endl ;  $ ~else  $ ~~cout << "2" << endl ;  $ }
int main ( ) {  $ ~long long n ;  $ ~cin >> n ;  $ ~if ( n % 2 == 0 ) {  $ ~~cout << "2" << endl ;  $ ~} else {  $ ~~cout << "1" << endl ;  $ ~}  $ ~return 0 ;  $ }
int main ( ) {  $ ~long long x ;  $ ~cin >> x ;  $ ~if ( x % 2 == 0 )  $ ~~cout << 2 << endl ;  $ ~else  $ ~~cout << 1 << endl ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~long long n ;  $ ~while ( cin >> n ) {  $ ~~if ( n % 2 == 0 ) {  $ ~~~cout << "2" << endl ;  $ ~~} else {  $ ~~~cout << "1" << endl ;  $ ~~}  $ ~}  $ ~return 0 ;  $ }
int main ( ) {  $ ~long long n ;  $ ~cin >> n ;  $ ~cout << 2 - ( n % 2 ) << endl ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~long long a_i , b_i , n ;  $ ~cin >> n ;  $ ~if ( n % 2 == 0 )  $ ~~cout << 2 << endl ;  $ ~else  $ ~~cout << 1 << endl ;  $ }
const int maxn = 1e5 + 10 ;  $ const int maxm = 1e6 + 10 ;  $ const int INF = 0 x3f3f3f3f ;  $ long long casn , n , m , k ;  $ long long num [ maxn ] ;  $ long long cal ( long long x ) {  $ ~long long ans = 1 ;  $ ~for ( long long i = 1 ; i <= x ; i ++ ) { ans *= i ; }  $ ~return ans ;  $ }  $ int main ( ) {  $ ~cin >> n ;  $ ~cout << 1 + ( n % 2 == 0 ) << endl ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~int n ;  $ ~cin >> n ;  $ ~vector < int > count ( 101 ) ;  $ ~for ( int i = 0 ; i < n ; i ++ ) {  $ ~~int x ;  $ ~~cin >> x ;  $ ~~++ count [ x ] ;  $ ~}  $ ~cout << * max_element ( count . begin ( ) , count . end ( ) ) << endl ;  $ ~return 0 ;  $ }
long long n , ans = 0 , a [ 111 ] , vis [ 100010 ] ;  $ inline long long read ( ) {  $ ~long long x = 0 ;  $ ~bool f = 0 ;  $ ~char ch = getchar ( ) ;  $ ~for ( ; ! isdigit ( ch ) ; ch = getchar ( ) ) f ^ = ( ch == '-' ) ;  $ ~for ( ; isdigit ( ch ) ; ch = getchar ( ) ) x = ( x << 3 ) + ( x << 1 ) + ( ch ^ 48 ) ;  $ ~return f ? - x : x ;  $ }  $ int main ( ) {  $ ~n = read ( ) ;  $ ~for ( register int i = 1 ; i <= n ; i ++ ) a [ i ] = read ( ) , vis [ a [ i ] ] ++ ;  $ ~for ( register int i = 1 ; i <= n ; i ++ )  $ ~~if ( ans < vis [ a [ i ] ] ) ans = vis [ a [ i ] ] ;  $ ~cout << ans << endl ;  $ ~return 0 ;  $ }
int max_elemento ( vector < int > coins_array ) {  $ ~int max_element = 0 ;  $ ~for ( int i = 0 ; i < coins_array . size ( ) ; i ++ ) {  $ ~~if ( coins_array [ i ] > max_element ) { max_element = coins_array [ i ] ; }  $ ~}  $ ~return max_element ;  $ }  $ int main ( ) {  $ ~int coins_nro ;  $ ~int coin_value ;  $ ~vector < int > coins_array ( 105 , 0 ) ;  $ ~int result ;  $ ~cin >> coins_nro ;  $ ~for ( int i = 0 ; i < coins_nro ; i ++ ) {  $ ~~cin >> coin_value ;  $ ~~coins_array [ coin_value ] ++ ;  $ ~}  $ ~result = max_elemento ( coins_array ) ;  $ ~cout << result << '\n' ;  $ ~return 0 ;  $ }
int a [ 10005 ] ;  $ int main ( ) {  $ ~int n , m , d = 0 ;  $ ~cin >> n ;  $ ~for ( int i = 1 ; i <= n ; i ++ ) {  $ ~~cin >> m ;  $ ~~a [ m ] ++ ;  $ ~}  $ ~for ( int j = 0 ; j < 10000 ; j ++ ) {  $ ~~if ( a [ j ] > d ) { d = a [ j ] ; }  $ ~}  $ ~cout << d << endl ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~long long int n ;  $ ~cin >> n ;  $ ~long long int a [ n ] , c = 0 ;  $ ~long long int x [ 101 ] = { 0 } ;  $ ~for ( int i = 0 ; i < n ; i ++ ) {  $ ~~cin >> a [ i ] ;  $ ~~x [ a [ i ] ] ++ ;  $ ~}  $ ~cout << * max_element ( x , x + 101 ) << endl ;  $ ~return 0 ;  $ }
int a [ 250 ] , ans , sum = 1 ;  $ int main ( ) {  $ ~int n ;  $ ~cin >> n ;  $ ~if ( n == 1 ) {  $ ~~cout << "1" << endl ;  $ ~~return 0 ;  $ ~}  $ ~for ( int i = 1 ; i <= n ; i ++ ) cin >> a [ i ] ;  $ ~sort ( a + 1 , a + n + 1 ) ;  $ ~for ( int i = 2 ; i <= n ; i ++ ) {  $ ~~if ( a [ i ] == a [ i - 1 ] ) sum ++ ;  $ ~~ans = max ( ans , sum ) ;  $ ~~if ( a [ i ] != a [ i - 1 ] ) sum = 1 ;  $ ~}  $ ~cout << ans << endl ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~int n , a [ 1000 ] , i , j ;  $ ~memset ( a , 0 , sizeof ( a ) ) ;  $ ~cin >> n ;  $ ~for ( i = 0 ; i < n ; i ++ ) {  $ ~~cin >> j ;  $ ~~a [ j ] ++ ;  $ ~}  $ ~int m = - 999 ;  $ ~for ( i = 0 ; i < 1000 ; i ++ ) {  $ ~~if ( a [ i ] > m ) { m = a [ i ] ; }  $ ~}  $ ~cout << m << endl ;  $ ~return 0 ;  $ }
const int INF = 0 x3f3f3f3f ;  $ int v [ 105 ] ;  $ int main ( ) {  $ ~int i , j , k ;  $ ~int n , m , x ;  $ ~cin >> n ;  $ ~for ( i = 0 ; i < n ; i ++ ) cin >> x , v [ x ] ++ ;  $ ~sort ( v , v + 101 ) ;  $ ~cout << v [ 100 ] << endl ;  $ }
int main ( ) {  $ ~int n ;  $ ~cin >> n ;  $ ~int arr [ n ] ;  $ ~for ( int i = 0 ; i < n ; ++ i ) { cin >> arr [ i ] ; }  $ ~int count [ 101 ] ;  $ ~for ( int i = 0 ; i < 101 ; ++ i ) { count [ i ] = 0 ; }  $ ~for ( int i = 0 ; i < n ; ++ i ) { count [ arr [ i ] ] ++ ; }  $ ~int answer = 0 ;  $ ~for ( int i = 0 ; i < 101 ; ++ i ) {  $ ~~if ( count [ i ] > answer ) { answer = count [ i ] ; }  $ ~}  $ ~cout << answer << endl ;  $ }
vector < int > arr ( 10000 ) ;  $ int main ( ) {  $ ~int n , x ;  $ ~cin >> n ;  $ ~for ( int i = 0 ; i < n ; i ++ ) {  $ ~~cin >> x ;  $ ~~++ arr [ x ] ;  $ ~}  $ ~cout << * max_element ( arr . begin ( ) , arr . end ( ) ) << endl ;  $ }
bool cmp ( int a , int b ) {  $ ~return a > b ;  $ }  $ int main ( ) {  $ ~int n ;  $ ~cin >> n ;  $ ~int a [ 200 ] = { 0 } ;  $ ~for ( int i = 0 ; i < n ; i ++ ) {  $ ~~int mid ;  $ ~~cin >> mid ;  $ ~~a [ mid ] ++ ;  $ ~}  $ ~sort ( a , a + 105 , cmp ) ;  $ ~cout << a [ 0 ] << endl ;  $ ~return 0 ;  $ }
int a [ 10005 ] ;  $ int main ( ) {  $ ~int n , m , b = 0 ;  $ ~cin >> n ;  $ ~for ( int i = 1 ; i <= n ; i ++ ) {  $ ~~cin >> m ;  $ ~~a [ m ] ++ ;  $ ~}  $ ~for ( int i = 0 ; i <= 10000 ; i ++ ) {  $ ~~if ( a [ i ] > b ) b = a [ i ] ;  $ ~}  $ ~cout << b << endl ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~long long n ;  $ ~cin >> n ;  $ ~vector < long long > coins ;  $ ~for ( long long i = 0 ; i < n ; i ++ ) {  $ ~~long long aux ;  $ ~~cin >> aux ;  $ ~~coins . push_back ( aux ) ;  $ ~}  $ ~sort ( coins . begin ( ) , coins . end ( ) ) ;  $ ~long long cont = 1 , resp = 1 ;  $ ~for ( long long i = 0 ; i < n ; i ++ ) {  $ ~~if ( coins [ i ] == coins [ i - 1 ] ) {  $ ~~~cont ++ ;  $ ~~} else {  $ ~~~if ( cont > resp ) { resp = cont ; }  $ ~~~cont = 1 ;  $ ~~}  $ ~}  $ ~if ( cont > resp ) { resp = cont ; }  $ ~cout << resp << endl ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~int n , arr [ 105 ] , max = - 1 , cnt ;  $ ~cin >> n ;  $ ~for ( int i = 0 ; i < n ; i ++ ) { cin >> arr [ i ] ; }  $ ~for ( int i = 0 ; i < n ; i ++ ) {  $ ~~cnt = 0 ;  $ ~~if ( arr [ i ] == - 5000000 ) { continue ; }  $ ~~int tmp = arr [ i ] ;  $ ~~for ( int j = 0 ; j < n ; j ++ ) {  $ ~~~if ( tmp == arr [ j ] ) {  $ ~~~~cnt ++ ;  $ ~~~~arr [ j ] = - 5000000 ;  $ ~~~}  $ ~~}  $ ~~if ( cnt >= max ) { max = cnt ; }  $ ~}  $ ~cout << max << endl ;  $ }
int main ( ) {  $ ~int n ;  $ ~cin >> n ;  $ ~int ma = 0 ;  $ ~int a [ 110 ] ;  $ ~memset ( a , 0 , sizeof ( a ) ) ;  $ ~for ( int i = 0 ; i < n ; i ++ ) {  $ ~~int num ;  $ ~~cin >> num ;  $ ~~a [ num ] ++ ;  $ ~~ma = max ( a [ num ] , ma ) ;  $ ~}  $ ~cout << ma << endl ;  $ }
int main ( ) {  $ ~int n ;  $ ~cin >> n ;  $ ~vector < int > v ( 101 , 0 ) ;  $ ~for ( int i = 0 ; i < n ; i ++ ) {  $ ~~int x ;  $ ~~cin >> x ;  $ ~~v [ x ] ++ ;  $ ~}  $ ~int MAX = * max_element ( v . begin ( ) , v . end ( ) ) ;  $ ~cout << MAX << endl ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~long long int n , i ;  $ ~cin >> n ;  $ ~long long int a [ n ] , max = 0 ;  $ ~map < long long int , long long int > m ;  $ ~for ( i = 0 ; i < n ; i ++ ) {  $ ~~cin >> a [ i ] ;  $ ~~m [ a [ i ] ] ++ ;  $ ~~if ( m [ a [ i ] ] > max ) max = m [ a [ i ] ] ;  $ ~}  $ ~cout << max << "\n" ;  $ }
int main ( ) {  $ ~int n ;  $ ~while ( cin >> n ) {  $ ~~int ans = 0 ;  $ ~~map < int , int > p ;  $ ~~for ( int i = 0 ; i < n ; i ++ ) {  $ ~~~int val ;  $ ~~~cin >> val ;  $ ~~~p [ val ] ++ ;  $ ~~~ans = max ( p [ val ] , ans ) ;  $ ~~}  $ ~~cout << ans << endl ;  $ ~}  $ ~return 0 ;  $ }
long long cont [ 101 ] ;  $ int main ( ) {  $ ~long long n ;  $ ~cin >> n ;  $ ~for ( long long i = 0 ; i < n ; i ++ ) {  $ ~~long long num ;  $ ~~cin >> num ;  $ ~~cont [ num ] ++ ;  $ ~}  $ ~long long maxi = 0 ;  $ ~for ( long long i = 1 ; i <= 100 ; i ++ ) { maxi = max ( maxi , cont [ i ] ) ; }  $ ~cout << maxi << endl ;  $ }
int main ( ) {  $ ~int n , i , j , maxx ;  $ ~cin >> n ;  $ ~int a [ n ] ;  $ ~int freq [ 101 ] = { 0 } ;  $ ~for ( int i = 0 ; i < n ; i ++ ) {  $ ~~cin >> a [ i ] ;  $ ~~freq [ a [ i ] ] ++ ;  $ ~}  $ ~{ }  $ ~maxx = INT_MIN ;  $ ~for ( int i = 0 ; i < 101 ; i ++ ) {  $ ~~if ( freq [ i ] >= maxx ) { maxx = freq [ i ] ; }  $ ~}  $ ~cout << maxx << endl ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~int n , arr [ 101 ] , m = 0 , c = 0 ;  $ ~cin >> n ;  $ ~for ( int i = 0 ; i < n ; i ++ ) cin >> arr [ i ] ;  $ ~sort ( arr , arr + n ) ;  $ ~for ( int i = 1 ; i < n ; i ++ ) {  $ ~~if ( arr [ i - 1 ] == arr [ i ] )  $ ~~~c ++ ;  $ ~~else  $ ~~~c = 0 ;  $ ~~m = max ( m , c ) ;  $ ~}  $ ~if ( m == 0 )  $ ~~cout << 1 << endl ;  $ ~else  $ ~~cout << m + 1 << endl ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~int n = 0 , i = 0 , t = 0 , max = 0 ;  $ ~cin >> n ;  $ ~vector < int > f ( 101 , 0 ) ;  $ ~for ( i = 0 ; i < n ; i ++ ) {  $ ~~cin >> t ;  $ ~~f [ t ] ++ ;  $ ~}  $ ~for ( i = 1 ; i <= 100 ; i ++ ) { max = ( f [ i ] > max ) ? f [ i ] : max ; }  $ ~cout << max << endl ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~long long n ;  $ ~cin >> n ;  $ ~long long c [ n ] , max = 1 ;  $ ~for ( long long i = 0 ; i < n ; i ++ ) { cin >> c [ i ] ; }  $ ~for ( long long i = 0 ; i < n - 1 ; i ++ ) {  $ ~~long long cnt = 1 ;  $ ~~for ( long long j = i + 1 ; j < n ; j ++ ) {  $ ~~~if ( c [ j ] == c [ i ] ) { cnt ++ ; }  $ ~~}  $ ~~if ( i == 0 ) max = cnt ;  $ ~~if ( cnt >= max ) max = cnt ;  $ ~}  $ ~cout << max << endl ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~int n ;  $ ~cin >> n ;  $ ~vector < int > coins ( 101 , 0 ) ;  $ ~for ( int i = 0 ; i < n ; i ++ ) {  $ ~~int value ;  $ ~~cin >> value ;  $ ~~coins [ value ] ++ ;  $ ~}  $ ~int minPockets = - 1 ;  $ ~for ( int i = 0 ; i < 101 ; i ++ ) minPockets = max ( minPockets , coins [ i ] ) ;  $ ~cout << minPockets << endl ;  $ ~return 0 ;  $ }
int p1 , p2 , p3 , p4 , a , b ;  $ int main ( ) {  $ ~cin >> p1 >> p2 >> p3 >> p4 >> a >> b ;  $ ~int ans = 0 ;  $ ~int p = min ( p1 , p2 ) ;  $ ~p = min ( p , p3 ) ;  $ ~p = min ( p , p4 ) ;  $ ~if ( b < p ) {  $ ~~cout << b - a + 1 << "\n" ;  $ ~~return 0 ;  $ ~}  $ ~if ( p - a > 0 ) { ans = p - a ; }  $ ~cout << ans << "\n" ;  $ ~return 0 ;  $ }
int p [ 4 ] , a , b , ans ;  $ int main ( ) {  $ ~for ( int i = 0 ; i < 4 ; ++ i ) cin >> p [ i ] ;  $ ~cin >> a >> b ;  $ ~ans = b - a + 1 ;  $ ~for ( int i = a ; i <= b ; ++ i ) {  $ ~~for ( int j = 0 ; j < 4 ; ++ j ) {  $ ~~~if ( i < p [ j ] ) continue ;  $ ~~~-- ans ;  $ ~~~break ;  $ ~~}  $ ~}  $ ~cout << ans << endl ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~int p1 , p2 , p3 , p4 , a , b ;  $ ~cin >> p1 >> p2 >> p3 >> p4 >> a >> b ;  $ ~int sum = 0 ;  $ ~for ( int i = a ; i <= b ; i ++ ) {  $ ~~if ( i % p1 == i && i % p2 == i && i % p3 == i && i % p4 == i ) { sum ++ ; }  $ ~}  $ ~cout << sum << endl ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~int p [ 4 ] ;  $ ~for ( int i = 0 ; i < 4 ; i ++ ) cin >> p [ i ] ;  $ ~int esq , dir ;  $ ~cin >> esq >> dir ;  $ ~int res = 0 ;  $ ~for ( int i = esq ; i <= dir ; i ++ ) {  $ ~~sort ( p , p + 4 ) ;  $ ~~int cnt = 0 ;  $ ~~do {  $ ~~~int x = i ;  $ ~~~for ( int j = 0 ; j < 4 ; j ++ ) x = x % p [ j ] ;  $ ~~~if ( x == i ) cnt ++ ;  $ ~~} while ( next_permutation ( p , p + 4 ) ) ;  $ ~~if ( cnt >= 7 ) res ++ ;  $ ~}  $ ~cout << res << endl ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~int p1 , p2 , p3 , p4 ;  $ ~int a , b ;  $ ~int ans = 0 ;  $ ~cin >> p1 >> p2 >> p3 >> p4 >> a >> b ;  $ ~for ( int i = a ; i <= b ; i ++ ) {  $ ~~if ( i % p1 == i && i % p2 == i && i % p3 == i && i % p4 == i ) ans ++ ;  $ ~}  $ ~cout << ans << endl ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~long long p1 , p2 , p3 , p4 , a , b , ans = 0 ;  $ ~cin >> p1 >> p2 >> p3 >> p4 >> a >> b ;  $ ~for ( int i = a ; i <= b ; i ++ )  $ ~~if ( i % p1 == i && i % p2 == i && i % p3 == i && i % p4 == i ) ans ++ ;  $ ~cout << ans << endl ;  $ }
int main ( ) {  $ ~int p1 , p2 , p3 , p4 , a , b , cnt = 0 , x ;  $ ~cin >> p1 >> p2 >> p3 >> p4 >> a >> b ;  $ ~for ( int i = a ; i <= b ; i ++ ) {  $ ~~x = ( ( ( i % p1 ) % p2 ) % p3 ) % p4 ;  $ ~~if ( x == i ) { cnt ++ ; }  $ ~}  $ ~cout << cnt << "\n" ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~int a , b , c , d , x , y , s = 0 ;  $ ~cin >> a >> b >> c >> d >> x >> y ;  $ ~for ( int i = x ; i <= y ; i ++ )  $ ~~if ( i % a == i && i % b == i && i % c == i && i % d == i ) s ++ ;  $ ~cout << s << endl ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~short a , b , p , q , r , s ;  $ ~cin >> p >> q >> r >> s >> a >> b ;  $ ~short ans = 0 ;  $ ~for ( int i = a ; i <= b ; i ++ ) {  $ ~~if ( ( ( ( ( i % p ) % q ) % r ) % s ) == i ) ans ++ ;  $ ~}  $ ~cout << ans << endl ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~int p , a , b ;  $ ~int min = 99999999 ;  $ ~for ( int i = 1 ; i <= 4 ; i ++ ) {  $ ~~cin >> p ;  $ ~~if ( p < min ) min = p ;  $ ~}  $ ~cin >> a >> b ;  $ ~if ( min >= a && min <= b )  $ ~~cout << min - a << endl ;  $ ~else if ( min < a )  $ ~~cout << 0 << endl ;  $ ~else if ( min > b )  $ ~~cout << b - a + 1 << endl ;  $ }
ifstream in ( "txt.in" ) ;  $ ofstream out ( "txt.out" ) ;  $ int main ( ) {  $ ~cout << fixed << setprecision ( 12 ) ;  $ ~long long mx = 2e9 ;  $ ~for ( int i = 1 ; i <= 4 ; ++ i ) {  $ ~~long long x ;  $ ~~cin >> x ;  $ ~~mx = min ( mx , x ) ;  $ ~}  $ ~long long a , b ;  $ ~cin >> a >> b ;  $ ~long long cnt = 0 ;  $ ~for ( int i = a ; i <= b ; ++ i ) { cnt += ( i < mx ) ; }  $ ~cout << cnt << '\n' ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~int a , b , p [ 4 ] ;  $ ~for ( int i = 0 ; i < 4 ; i ++ ) cin >> p [ i ] ;  $ ~cin >> a >> b ;  $ ~sort ( p , p + 4 ) ;  $ ~int x , cnt = 0 ;  $ ~for ( int i = a ; i <= b ; i ++ ) {  $ ~~int match = 0 ;  $ ~~do {  $ ~~~x = i ;  $ ~~~for ( int i = 0 ; i < 4 ; i ++ ) x %= p [ i ] ;  $ ~~~if ( x == i ) match ++ ;  $ ~~} while ( next_permutation ( p , p + 4 ) ) ;  $ ~~if ( match >= 7 ) cnt ++ ;  $ ~}  $ ~cout << cnt << '\n' ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~int a , b , c , d , x , y , cnt ;  $ ~while ( cin >> a >> b >> c >> d >> x >> y ) {  $ ~~cnt = 0 ;  $ ~~for ( int i = x ; i <= y ; i ++ )  $ ~~~if ( i % a % b % c % d == i ) cnt ++ ;  $ ~~cout << cnt << endl ;  $ ~}  $ ~return 0 ;  $ }
int main ( ) {  $ ~int p [ 4 ] , a , b , s = 0 ;  $ ~cin >> p [ 0 ] >> p [ 1 ] >> p [ 2 ] >> p [ 3 ] >> a >> b ;  $ ~sort ( p , p + 4 ) ;  $ ~for ( int i = a ; i <= b ; i ++ )  $ ~~if ( i < p [ 0 ] ) s ++ ;  $ ~cout << s << endl ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~int p1 , p2 , p3 , p4 , a , b ;  $ ~cin >> p1 >> p2 >> p3 >> p4 >> a >> b ;  $ ~int ans = 0 ;  $ ~for ( int i = a ; i <= b ; i ++ ) {  $ ~~int ans1 = ( ( ( ( i % p1 ) % p2 ) % p3 ) % p4 ) ;  $ ~~if ( ans1 == i ) ans ++ ;  $ ~}  $ ~cout << ans << endl ;  $ }
int main ( ) {  $ ~int x ;  $ ~cin >> x ;  $ ~for ( int i = 0 ; i < ( int ) 3 ; i ++ ) {  $ ~~int y ;  $ ~~cin >> y ;  $ ~~x = min ( x , y ) ;  $ ~}  $ ~int a , b ;  $ ~cin >> a >> b ;  $ ~int c = 0 ;  $ ~for ( int i = a ; i <= b && i < x ; i ++ ) c ++ ;  $ ~cout << c << endl ;  $ }
int main ( ) {  $ ~int s [ 4 ] , a , b ;  $ ~while ( cin >> s [ 0 ] >> s [ 1 ] >> s [ 2 ] >> s [ 3 ] >> a >> b ) {  $ ~~sort ( s , s + 4 ) ;  $ ~~if ( s [ 0 ] > b )  $ ~~~cout << b - a + 1 << endl ;  $ ~~else if ( s [ 0 ] > a )  $ ~~~cout << s [ 0 ] - a << endl ;  $ ~~else  $ ~~~cout << "0" << endl ;  $ ~}  $ ~return 0 ;  $ }
int main ( ) {  $ ~cout . precision ( 7 ) ;  $ ~{  $ ~~int p1 , p2 , p3 , p4 , a , b ;  $ ~~cin >> p1 >> p2 >> p3 >> p4 >> a >> b ;  $ ~~int minP = min ( p1 , min ( p2 , min ( p3 , p4 ) ) ) ;  $ ~~cout << max ( 0 , min ( minP - a , b - a + 1 ) ) << "\n" ;  $ ~}  $ ~return 0 ;  $ }
int main ( ) {  $ ~int a , b , c , d ;  $ ~int n , m ;  $ ~int p = 1000 , q = 31415 ;  $ ~int ans ;  $ ~cin >> a >> b >> c >> d ;  $ ~cin >> n >> m ;  $ ~p = min ( p , a ) ;  $ ~p = min ( p , b ) ;  $ ~p = min ( p , c ) ;  $ ~p = min ( p , d ) ;  $ ~if ( p > m )  $ ~~ans = m - n + 1 ;  $ ~else  $ ~~ans = p - n ;  $ ~if ( ans < 0 ) ans = 0 ;  $ ~cout << ans << endl ;  $ }
int main ( ) {  $ ~int p1 , p2 , p3 , p4 ;  $ ~int a , b ;  $ ~cin >> p1 >> p2 >> p3 >> p4 >> a >> b ;  $ ~int ans = 0 ;  $ ~for ( int i = a ; i <= b ; ++ i )  $ ~~if ( i == ( ( ( i % p1 ) % p2 ) % p3 ) % p4 ) ++ ans ;  $ ~cout << ans << endl ;  $ ~return 0 ;  $ }
int p [ 4 ] ;  $ int a , b ;  $ int cnt ;  $ int main ( ) {  $ ~cin >> p [ 0 ] >> p [ 1 ] >> p [ 2 ] >> p [ 3 ] >> a >> b ;  $ ~for ( int i = a ; i <= b ; ++ i ) {  $ ~~sort ( p , p + 4 ) ;  $ ~~int s = 0 ;  $ ~~do {  $ ~~~if ( ( ( ( i % p [ 0 ] ) % p [ 1 ] ) % p [ 2 ] ) % p [ 3 ] == i ) ++ s ;  $ ~~} while ( next_permutation ( p , p + 4 ) ) ;  $ ~~if ( s >= 7 ) ++ cnt ;  $ ~}  $ ~cout << cnt << endl ;  $ ~return 0 ;  $ }
long long p1 , p2 , p3 , p4 , a , b , ans = 0 ;  $ inline long long read ( ) {  $ ~long long x = 0 ;  $ ~bool f = 0 ;  $ ~char ch = getchar ( ) ;  $ ~for ( ; ! isdigit ( ch ) ; ch = getchar ( ) ) f ^ = ( ch == '-' ) ;  $ ~for ( ; isdigit ( ch ) ; ch = getchar ( ) ) x = ( x << 3 ) + ( x << 1 ) + ( ch ^ 48 ) ;  $ ~return f ? - x : x ;  $ }  $ int main ( ) {  $ ~p1 = read ( ) , p2 = read ( ) , p3 = read ( ) , p4 = read ( ) ;  $ ~a = read ( ) , b = read ( ) ;  $ ~for ( register long long i = a ; i <= b ; i ++ ) {  $ ~~long long z = i % p1 , zz = i % p2 , zzz = i % p3 , zzzz = i % p4 ;  $ ~~if ( zz == zzz && zz == z && zz == zzzz && z == i ) ans ++ ;  $ ~}  $ ~cout << ans << endl ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~int p1 , p2 , p3 , p4 , a , b , p = 0 ;  $ ~cin >> p1 >> p2 >> p3 >> p4 >> a >> b ;  $ ~for ( int i = a ; i <= b ; i ++ ) {  $ ~~if ( i % p1 % p2 % p3 % p4 == i ) p ++ ;  $ ~}  $ ~cout << p << endl ;  $ }
int minn ( int a , int b , int c , int d ) {  $ ~a = min ( a , b ) ;  $ ~c = min ( c , d ) ;  $ ~return min ( a , c ) ;  $ }  $ int main ( ) {  $ ~int p1 , p2 , p3 , p4 , a , b ;  $ ~while ( cin >> p1 >> p2 >> p3 >> p4 >> a >> b ) {  $ ~~if ( p1 <= a || p2 <= a || p3 <= a || p4 <= a ) {  $ ~~~cout << 0 << endl ;  $ ~~~continue ;  $ ~~}  $ ~~int p = minn ( p1 , p2 , p3 , p4 ) ;  $ ~~if ( p > b ) {  $ ~~~cout << b - a + 1 << endl ;  $ ~~~continue ;  $ ~~}  $ ~~cout << p - a << endl ;  $ ~}  $ ~return 0 ;  $ }
int p [ 5 ] , a , b ;  $ int ans = 0 ;  $ int main ( ) {  $ ~cin >> p [ 1 ] >> p [ 2 ] >> p [ 3 ] >> p [ 4 ] >> a >> b ;  $ ~int Min = min ( min ( min ( p [ 1 ] , p [ 2 ] ) , p [ 3 ] ) , p [ 4 ] ) ;  $ ~if ( a < Min ) {  $ ~~ans += ( Min - a ) ;  $ ~~if ( b >= Min ) {  $ ~~~cout << ans << endl ;  $ ~~~return 0 ;  $ ~~}  $ ~~ans = b - a + 1 ;  $ ~}  $ ~cout << ans << endl ;  $ ~return 0 ;  $ }
const double pi = 3.14159265358979323846 ;  $ int main ( ) {  $ ~int p [ 4 ] ;  $ ~int a , b ;  $ ~cin >> p [ 0 ] >> p [ 1 ] >> p [ 2 ] >> p [ 3 ] >> a >> b ;  $ ~int i , j , k , l , m ;  $ ~int ctr = 0 ;  $ ~int ans = 0 ;  $ ~for ( i = a ; i < b + 1 ; i ++ ) {  $ ~~for ( j = 0 ; j < 4 ; j ++ ) {  $ ~~~for ( k = 0 ; k < 4 ; k ++ ) {  $ ~~~~if ( k == j ) continue ;  $ ~~~~for ( l = 0 ; ( l < 4 ) ; l ++ ) {  $ ~~~~~if ( ( l == j ) || ( l == k ) ) continue ;  $ ~~~~~for ( m = 0 ; m < 4 ; m ++ ) {  $ ~~~~~~if ( ( m == l ) || ( m == j ) || ( m == k ) ) continue ;  $ ~~~~~~if ( i == ( ( ( i % p [ j ] ) % p [ k ] ) % p [ l ] ) % p [ m ] ) ctr ++ ;  $ ~~~~~}  $ ~~~~}  $ ~~~}  $ ~~}  $ ~~if ( ctr >= 7 ) ans ++ ;  $ ~~ctr = 0 ;  $ ~}  $ ~cout << ans << "\n" ;  $ ~return 0 ;  $ }
int arrA [ 100005 ] ;  $ int arrB [ 100005 ] ;  $ int nA , nB , k , m ;  $ int main ( ) {  $ ~cin >> nA >> nB ;  $ ~cin >> k >> m ;  $ ~for ( int i = 0 ; i < nA ; i ++ ) cin >> arrA [ i ] ;  $ ~for ( int i = 0 ; i < nB ; i ++ ) cin >> arrB [ i ] ;  $ ~if ( arrA [ k - 1 ] < arrB [ nB - m ] )  $ ~~cout << "YES" << endl ;  $ ~else  $ ~~cout << "NO" << endl ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~int n1 , n2 , k , m ;  $ ~cin >> n1 >> n2 >> k >> m ;  $ ~k -- ;  $ ~m -- ;  $ ~vector < int > v1 ( n1 ) , v2 ( n2 ) ;  $ ~for ( int i = 0 ; i < n1 ; i ++ ) cin >> v1 [ i ] ;  $ ~for ( int i = 0 ; i < n2 ; i ++ ) cin >> v2 [ i ] ;  $ ~sort ( v1 . begin ( ) , v1 . end ( ) ) ;  $ ~sort ( v2 . begin ( ) , v2 . end ( ) ) ;  $ ~if ( v1 [ k ] < v2 [ v2 . size ( ) - m - 1 ] )  $ ~~cout << "YES" << endl ;  $ ~else  $ ~~cout << "NO" << endl ;  $ ~return 0 ;  $ }
const int s = 1E5 + 2 ;  $ int a [ s ] , b [ s ] ;  $ int main ( ) {  $ ~int n1 , n2 ;  $ ~cin >> n1 >> n2 ;  $ ~int k , m ;  $ ~cin >> k >> m ;  $ ~for ( int i = 0 ; i < n1 ; i ++ ) cin >> a [ i ] ;  $ ~for ( int i = 0 ; i < n2 ; i ++ ) cin >> b [ i ] ;  $ ~if ( a [ k - 1 ] < b [ n2 - m ] )  $ ~~cout << "YES" << endl ;  $ ~else  $ ~~cout << "NO" << endl ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~long long a , b , m , n ;  $ ~cin >> a >> b ;  $ ~cin >> m >> n ;  $ ~int ar [ a + 5 ] , br [ b + 5 ] ;  $ ~for ( int i = 0 ; i < a ; i ++ ) { cin >> ar [ i ] ; }  $ ~for ( int j = 0 ; j < b ; j ++ ) { cin >> br [ j ] ; }  $ ~if ( ar [ m - 1 ] < br [ b - n ] )  $ ~~cout << "YES\n" ;  $ ~else  $ ~~cout << "NO\n" ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~int a , b , n , k , c = 0 , p = 0 , i = 0 ;  $ ~cin >> a >> b >> n >> k ;  $ ~int A [ a ] , B [ b ] ;  $ ~for ( i = 0 ; i < a ; i ++ ) { cin >> A [ i ] ; }  $ ~for ( i = 0 ; i < b ; i ++ ) { cin >> B [ i ] ; }  $ ~for ( int j = b - 1 ; j > b - 1 - k ; j -- ) {  $ ~~if ( A [ n - 1 ] < B [ j ] )  $ ~~~c ++ ;  $ ~~else  $ ~~~goto jump ;  $ ~}  $ jump :  $ ~if ( c == k )  $ ~~cout << "YES" << endl ;  $ ~else  $ ~~cout << "NO" << endl ;  $ ~return 0 ;  $ }
int64_t na ;  $ int64_t nb ;  $ int64_t k ;  $ int64_t m ;  $ int64_t i = 0 ;  $ int64_t a ;  $ int main ( ) {  $ ~cin >> na ;  $ ~cin >> nb ;  $ ~cin >> k ;  $ ~cin >> m ;  $ ~int64_t an [ na ] ;  $ ~int64_t bn [ nb ] ;  $ ~while ( i < na ) {  $ ~~cin >> a ;  $ ~~an [ i ] = a ;  $ ~~i += 1 ;  $ ~} ;  $ ~i = 0 ;  $ ~while ( i < nb ) {  $ ~~cin >> a ;  $ ~~bn [ i ] = a ;  $ ~~i += 1 ;  $ ~}  $ ~sort ( an , an + na ) ;  $ ~sort ( bn , bn + nb ) ;  $ ~if ( an [ k - 1 ] < bn [ nb - m ] ) {  $ ~~cout << "YES" << endl ;  $ ~} else {  $ ~~cout << "NO" << endl ;  $ ~} ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~int a , b , k , m ;  $ ~cin >> a >> b >> k >> m ;  $ ~int arr1 [ a + 5 ] , arr2 [ b + 5 ] ;  $ ~for ( int i = 0 ; i < a ; i ++ ) { cin >> arr1 [ i ] ; }  $ ~sort ( arr1 , arr1 + a ) ;  $ ~for ( int i = 0 ; i < b ; i ++ ) { cin >> arr2 [ i ] ; }  $ ~sort ( arr2 , arr2 + b ) ;  $ ~if ( arr1 [ k - 1 ] < arr2 [ b - m ] ) {  $ ~~cout << "YES" << endl ;  $ ~} else {  $ ~~cout << "NO" << endl ;  $ ~}  $ }
int main ( ) {  $ ~int n , m , a , b , arr [ 100009 ] , brr [ 100009 ] ;  $ ~cin >> n >> m >> a >> b ;  $ ~for ( int i = 1 ; i <= n ; i ++ ) { cin >> arr [ i ] ; }  $ ~for ( int i = 1 ; i <= m ; i ++ ) { cin >> brr [ i ] ; }  $ ~if ( arr [ a ] < brr [ m - b + 1 ] )  $ ~~cout << "YES\n" ;  $ ~else  $ ~~cout << "NO\n" ;  $ }
int main ( ) {  $ ~int na , nb , ka , kb ;  $ ~cin >> na >> nb >> ka >> kb ;  $ ~vector < int > a ( na ) , b ( nb ) ;  $ ~for ( int i = 0 ; i < na ; i ++ ) { cin >> a [ i ] ; }  $ ~for ( int i = 0 ; i < nb ; i ++ ) { cin >> b [ i ] ; }  $ ~int k = 0 ;  $ ~for ( int i = nb - 1 ; i >= 0 ; i -- ) {  $ ~~if ( a [ ka - 1 ] < b [ i ] ) {  $ ~~~k ++ ;  $ ~~} else if ( k < kb && a [ ka - 1 ] >= b [ i ] ) {  $ ~~~cout << "NO\n" ;  $ ~~~return 0 ;  $ ~~}  $ ~}  $ ~cout << "YES\n" ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~int a , b ;  $ ~cin >> a >> b ;  $ ~int n , m ;  $ ~cin >> n >> m ;  $ ~int mx , mn ;  $ ~for ( int i = 0 ; i < a ; i ++ ) {  $ ~~int x ;  $ ~~cin >> x ;  $ ~~if ( i + 1 == n ) { mx = x ; }  $ ~}  $ ~for ( int i = 0 ; i < b ; i ++ ) {  $ ~~int x ;  $ ~~cin >> x ;  $ ~~if ( i == b - m ) { mn = x ; }  $ ~}  $ ~if ( mx < mn ) {  $ ~~cout << "YES" << endl ;  $ ~} else  $ ~~cout << "NO" << endl ;  $ }
int main ( ) {  $ ~long long int line1 , line2 , first , second , i , j ;  $ ~cin >> line1 >> line2 ;  $ ~cin >> first >> second ;  $ ~long long int stud1 [ line1 ] , stud2 [ line2 ] ;  $ ~for ( i = 0 ; i < line1 ; i ++ ) { cin >> stud1 [ i ] ; }  $ ~for ( i = 0 ; i < line2 ; i ++ ) { cin >> stud2 [ i ] ; }  $ ~sort ( stud1 , stud1 + line1 ) ;  $ ~sort ( stud2 , stud2 + line2 ) ;  $ ~int mx = stud2 [ line2 - ( second ) ] ;  $ ~int tot = 0 , y = 0 ;  $ ~for ( i = 0 ; i < line1 ; i ++ ) {  $ ~~if ( stud1 [ i ] < mx ) { ++ tot ; }  $ ~~if ( tot == first ) {  $ ~~~++ y ;  $ ~~~break ;  $ ~~}  $ ~~if ( stud1 [ i ] > mx ) { break ; }  $ ~}  $ ~if ( y ) {  $ ~~cout << "YES" << endl ;  $ ~} else {  $ ~~cout << "NO" << endl ;  $ ~}  $ ~return 0 ;  $ }
vector < int > a ;  $ vector < int > b ;  $ int main ( ) {  $ ~int na , nb , counta = 0 , countb = 0 ;  $ ~cin >> na >> nb ;  $ ~int k , m , A , B ;  $ ~cin >> k >> m ;  $ ~for ( int i = 0 ; i < na ; i ++ ) {  $ ~~cin >> A ;  $ ~~a . push_back ( A ) ;  $ ~}  $ ~for ( int i = 0 ; i < nb ; i ++ ) {  $ ~~cin >> B ;  $ ~~b . push_back ( B ) ;  $ ~}  $ ~sort ( a . begin ( ) , a . end ( ) ) ;  $ ~sort ( b . rbegin ( ) , b . rend ( ) ) ;  $ ~if ( a [ k - 1 ] < b [ m - 1 ] )  $ ~~cout << "YES\n" ;  $ ~else  $ ~~cout << "NO\n" ;  $ }
int n1 , n2 , k , m ;  $ int main ( ) {  $ ~int v1 , v2 , x ;  $ ~cin >> n1 >> n2 ;  $ ~cin >> k >> m ;  $ ~for ( int i = 0 ; i < n1 ; i ++ ) {  $ ~~cin >> x ;  $ ~~if ( i == k - 1 ) { v1 = x ; }  $ ~}  $ ~for ( int i = 0 ; i < n2 ; i ++ ) {  $ ~~cin >> x ;  $ ~~if ( i == n2 - m ) { v2 = x ; }  $ ~}  $ ~if ( v1 < v2 )  $ ~~cout << "YES\n" ;  $ ~else  $ ~~cout << "NO\n" ;  $ ~return 0 ;  $ }
long long int n1 , n2 ;  $ long long int a [ 100007 ] ;  $ long long int b [ 100007 ] ;  $ long long int k , m ;  $ int main ( ) {  $ ~cin >> n1 >> n2 ;  $ ~cin >> k >> m ;  $ ~for ( long long int i = 0 ; i <= n1 - 1 ; i ++ ) { cin >> a [ i ] ; }  $ ~for ( long long int i = 0 ; i <= n2 - 1 ; i ++ ) { cin >> b [ i ] ; }  $ ~sort ( a , a + n1 ) ;  $ ~sort ( b , b + n2 , greater < long long int > ( ) ) ;  $ ~if ( a [ k - 1 ] < b [ m - 1 ] ) {  $ ~~cout << "YES"  $ ~~~<< "\n" ;  $ ~} else {  $ ~~cout << "NO"  $ ~~~<< "\n" ;  $ ~}  $ ~return 0 ;  $ }
int r1 [ 100001 ] , r2 [ 100001 ] ;  $ int main ( ) {  $ ~int a , b , c , d , e , f , g , h ;  $ ~vector < int > v ;  $ ~while ( cin >> a >> b ) {  $ ~~cin >> c >> d ;  $ ~~for ( e = 1 ; e <= a ; e ++ ) { cin >> r1 [ e ] ; }  $ ~~f = 0 ;  $ ~~for ( e = 1 ; e <= b ; e ++ ) {  $ ~~~cin >> r2 [ e ] ;  $ ~~~if ( r2 [ e ] > r1 [ c ] ) { f ++ ; }  $ ~~}  $ ~~if ( f >= d ) {  $ ~~~cout << "YES" << endl ;  $ ~~} else {  $ ~~~cout << "NO" << endl ;  $ ~~}  $ ~}  $ ~return 0 ;  $ }
int main ( ) {  $ ~int a [ 100500 ] , b [ 100040 ] ;  $ ~int na , nb ;  $ ~int x1 , x2 , y1 , y2 ;  $ ~int i , k , j , m ;  $ ~char s [ 20000 ] [ 20 ] ;  $ ~cin >> na >> nb ;  $ ~cin >> k >> m ;  $ ~for ( i = 0 ; i < na ; i ++ ) cin >> a [ i ] ;  $ ~for ( j = 0 ; j < nb ; j ++ ) cin >> b [ j ] ;  $ ~sort ( a , a + na ) ;  $ ~sort ( b , b + nb ) ;  $ ~for ( i = 0 ; i < nb ; i ++ )  $ ~~if ( b [ i ] > a [ k - 1 ] ) break ;  $ ~if ( i + m <= nb ) {  $ ~~cout << "YES" << endl ;  $ ~~return 0 ;  $ ~} else  $ ~~cout << "NO" << endl ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~vector < int > arr1 , arr2 ;  $ ~int a , b , k , m ;  $ ~cin >> a >> b >> k >> m ;  $ ~if ( k > a || m > b ) {  $ ~~cout << "NO" << endl ;  $ ~~return 0 ;  $ ~}  $ ~for ( int i = 0 ; i < a ; i ++ ) {  $ ~~int inp ;  $ ~~cin >> inp ;  $ ~~arr1 . push_back ( inp ) ;  $ ~}  $ ~for ( int i = 0 ; i < b ; i ++ ) {  $ ~~int inp ;  $ ~~cin >> inp ;  $ ~~arr2 . push_back ( inp ) ;  $ ~}  $ ~if ( arr1 [ k - 1 ] < arr2 [ b - m ] ) {  $ ~~cout << "YES" << endl ;  $ ~} else {  $ ~~cout << "NO" << endl ;  $ ~}  $ ~return 0 ;  $ }
const int MAX = 100001 ;  $ long long An [ MAX ] , Bn [ MAX ] ;  $ int main ( ) {  $ ~int n , m , a , b ;  $ ~cin >> n >> m >> a >> b ;  $ ~for ( int i = 1 ; i <= n ; i ++ ) cin >> An [ i ] ;  $ ~for ( int i = 1 ; i <= m ; i ++ ) cin >> Bn [ i ] ;  $ ~sort ( An + 1 , An + n + 1 ) ;  $ ~sort ( Bn + 1 , Bn + m + 1 ) ;  $ ~if ( An [ a ] < Bn [ m - b + 1 ] )  $ ~~cout << "YES" << endl ;  $ ~else  $ ~~cout << "NO" << endl ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~int a , b ;  $ ~cin >> a >> b ;  $ ~int k , m ;  $ ~cin >> k >> m ;  $ ~int ar1 [ a ] ;  $ ~int ar2 [ b ] ;  $ ~for ( int i = 0 ; i < a ; i ++ ) { cin >> ar1 [ i ] ; }  $ ~for ( int i = 0 ; i < b ; i ++ ) { cin >> ar2 [ i ] ; }  $ ~if ( ar1 [ k - 1 ] < ar2 [ b - m ] && k <= a && m <= b )  $ ~~cout << "YES" << endl ;  $ ~else  $ ~~cout << "NO" << endl ;  $ }
int main ( ) {  $ ~int a , b , c , d ;  $ ~cin >> a >> b ;  $ ~if ( a < b ) {  $ ~~c = a ;  $ ~~d = ( b - a ) / 2 ;  $ ~~cout << c << ' ' << d << endl ;  $ ~} else {  $ ~~c = b ;  $ ~~d = ( a - b ) / 2 ;  $ ~~cout << c << ' ' << d << endl ;  $ ~}  $ ~return 0 ;  $ }
int a , b , c , d ;  $ int main ( ) {  $ ~cin >> a >> b ;  $ ~d = min ( a , b ) ;  $ ~c = max ( a , b ) - d ;  $ ~if ( c % 2 ) c -= 1 ;  $ ~cout << d << " " << c / 2 << endl ;  $ }
int main ( ) {  $ ~int a = 0 , b = 0 ;  $ ~int counter_moda = 0 , counter_utility = 0 ;  $ ~cin >> a >> b ;  $ ~while ( a > 0 && b > 0 ) {  $ ~~a -- ;  $ ~~b -- ;  $ ~~counter_moda ++ ;  $ ~}  $ ~while ( a >= 2 || b >= 2 ) {  $ ~~counter_utility ++ ;  $ ~~if ( a > b ) {  $ ~~~a -= 2 ;  $ ~~} else {  $ ~~~b -= 2 ;  $ ~~}  $ ~}  $ ~cout << counter_moda << " " << counter_utility << endl ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~int a , b ;  $ ~cin >> a >> b ;  $ ~if ( a > b ) swap ( a , b ) ;  $ ~cout << a << " " << ( b - a ) / 2 << endl ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~int a , b ;  $ ~cin >> a >> b ;  $ ~int m = min ( a , b ) ;  $ ~cout << m << ' ' ;  $ ~a -= m ;  $ ~b -= m ;  $ ~cout << a / 2 + b / 2 << endl ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~int a , b ;  $ ~cin >> a >> b ;  $ ~int r1 = min ( a , b ) ;  $ ~int r2 = ( max ( a , b ) - min ( a , b ) ) / 2 ;  $ ~cout << r1 << " " << r2 << endl ;  $ }
int main ( ) {  $ ~int a , b ;  $ ~cin >> a >> b ;  $ ~int MIN = min ( a , b ) ;  $ ~int MAX = max ( a , b ) ;  $ ~cout << MIN << ' ' << ( MAX - MIN ) / 2 << endl ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~int a , b , ans = 0 ;  $ ~cin >> a >> b ;  $ ~ans = min ( a , b ) ;  $ ~cout << ans << " " ;  $ ~ans = ( ( max ( a , b ) - ans ) >> 1 ) ;  $ ~cout << ans << endl ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~int a , b ;  $ ~while ( cin >> a >> b ) { cout << min ( a , b ) << " " << ( max ( a , b ) - min ( a , b ) ) / 2 << endl ; }  $ }
long long n , a , b , res ;  $ string s ;  $ long long arr [ 100005 ] ;  $ long long arr1 [ 100005 ] ;  $ int main ( ) {  $ ~cin >> a >> b ;  $ ~cout << min ( a , b ) << " " << abs ( a - b ) / 2 ;  $ ~cout << "\n" ;  $ ~return 0 ;  $ }
int a , b , x ;  $ int main ( ) {  $ ~cin >> a >> b ;  $ ~x = min ( a , b ) ;  $ ~cout << x << " " ;  $ ~a -= x ;  $ ~b -= x ;  $ ~a == 0 ? cout << b / 2 : cout << a / 2 ;  $ ~cout << "\n" ;  $ }
int main ( ) {  $ ~int n , m ;  $ ~cin >> n >> m ;  $ ~int a = min ( n , m ) ;  $ ~int b = ( max ( n , m ) - a ) / 2 ;  $ ~cout << a << " " << b << endl ;  $ }
int main ( ) {  $ ~int a , b ;  $ ~cin >> a >> b ;  $ ~int ds = 0 , ss = 0 , k = 0 ;  $ ~if ( a > b ) {  $ ~~ds = b ;  $ ~~k = a - b ;  $ ~~ss = k / 2 ;  $ ~} else if ( a < b ) {  $ ~~ds = a ;  $ ~~k = b - a ;  $ ~~ss = k / 2 ;  $ ~} else {  $ ~~ds = a ;  $ ~~ss = 0 ;  $ ~}  $ ~cout << ds << " " << ss << endl ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~int a , b ;  $ ~cin >> a >> b ;  $ ~if ( a == b ) {  $ ~~cout << a << " "  $ ~~~<< "0" << endl ;  $ ~} else if ( a > b ) {  $ ~~cout << b << " " << ( a - b ) / 2 << endl ;  $ ~} else {  $ ~~cout << a << " " << ( b - a ) / 2 << endl ;  $ ~}  $ ~return 0 ;  $ }
int main ( ) {  $ ~int a , b ;  $ ~cin >> a >> b ;  $ ~int prazn = min ( a , b ) ;  $ ~int podin = ( int ) ( ( max ( a , b ) - prazn ) / 2 ) ;  $ ~cout << prazn << " " << podin << endl ;  $ ~return 0 ;  $ } ;
int main ( ) {  $ ~int r , b ;  $ ~cin >> r >> b ;  $ ~if ( r < b ) {  $ ~~cout << r << " " << ( b - r ) / 2 << endl ;  $ ~~;  $ ~} else {  $ ~~cout << b << " " << ( r - b ) / 2 << endl ;  $ ~~;  $ ~}  $ }
int main ( ) {  $ ~int n , m , i , k ;  $ ~while ( cin >> n >> m ) {  $ ~~i = n < m ? n : m ;  $ ~~k = abs ( n - m ) / 2 ;  $ ~~cout << i << ' ' << k << endl ;  $ ~}  $ }
int main ( ) {  $ ~int a , b , count1 = 0 , count2 = 0 ;  $ ~cin >> a >> b ;  $ ~for ( int i = 0 ; ; i ++ ) {  $ ~~if ( ( a == 0 && b == 1 ) || ( a == 1 && b == 0 ) || ( a == 0 && b == 0 ) ) break ;  $ ~~-- a ;  $ ~~-- b ;  $ ~~++ count1 ;  $ ~~if ( a == 0 && b > 1 ) {  $ ~~~while ( b != 0 ) {  $ ~~~~b = b - 2 ;  $ ~~~~++ count2 ;  $ ~~~~if ( b < 0 || b == 1 ) break ;  $ ~~~}  $ ~~~break ;  $ ~~}  $ ~~if ( a > 1 && b == 0 ) {  $ ~~~while ( a != 0 ) {  $ ~~~~a = a - 2 ;  $ ~~~~++ count2 ;  $ ~~~~if ( a < 0 || a == 1 ) break ;  $ ~~~}  $ ~~~break ;  $ ~~}  $ ~}  $ ~cout << count1 << " " << count2 << endl ;  $ }
int main ( ) {  $ ~int n , m ;  $ ~cin >> n >> m ;  $ ~cout << min ( n , m ) << " " << ( max ( n , m ) - min ( n , m ) ) / 2 << endl ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~int r , b ;  $ ~int p , q ;  $ ~cin >> r >> b ;  $ ~p = min ( r , b ) ;  $ ~q = abs ( r - b ) / 2 ;  $ ~cout << p << " " << q << "\n" ;  $ ~return 0 ;  $ }
bool prime ( int n ) {  $ ~int c = 0 ;  $ ~for ( int i = 1 ; i < n ; i ++ ) {  $ ~~if ( n % i == 0 ) c ++ ;  $ ~}  $ ~if ( c == 1 )  $ ~~return true ;  $ ~else  $ ~~return false ;  $ }  $ int main ( ) {  $ ~int a , b , a2 , b2 , a1 = 0 , b1 = 0 ;  $ ~cin >> a >> b ;  $ ~if ( a > b ) {  $ ~~a2 = a ;  $ ~~for ( int i = 0 ; i < a2 ; i ++ ) {  $ ~~~if ( b != 0 ) {  $ ~~~~a1 ++ ;  $ ~~~~b -- ;  $ ~~~~a -- ;  $ ~~~}  $ ~~~if ( b == 0 ) { b1 = a / 2 ; }  $ ~~}  $ ~} else if ( a < b ) {  $ ~~b2 = b ;  $ ~~for ( int i = 0 ; i < b2 ; i ++ ) {  $ ~~~if ( a != 0 ) {  $ ~~~~a1 ++ ;  $ ~~~~b -- ;  $ ~~~~a -- ;  $ ~~~}  $ ~~~if ( a == 0 ) { b1 = b / 2 ; }  $ ~~}  $ ~} else {  $ ~~a1 = ( a + b ) / 2 ;  $ ~}  $ ~cout << a1 << " " << b1 << endl ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~int a , b ;  $ ~cin >> a >> b ;  $ ~int mn = min ( a , b ) , mx = max ( a , b ) ;  $ ~cout << mn << " " << ( mx - mn ) / 2 << endl ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~int a , b ;  $ ~cin >> a >> b ;  $ ~cout << min ( a , b ) << " " << ( max ( a , b ) - min ( a , b ) ) / 2 << endl ;  $ }
const int INF = 0 x7FFFFFFF ;  $ const int MOD = 1e9 + 7 ;  $ const double EPS = 1e-10 ;  $ const double PI = 2 * acos ( 0.0 ) ;  $ const int maxn = 1e5 + 1666 ;  $ int main ( ) {  $ ~int a , b ;  $ ~cin >> a >> b ;  $ ~int c = min ( a , b ) ;  $ ~cout << c << " " ;  $ ~a -= c , b -= c ;  $ ~if ( a == 0 )  $ ~~cout << b / 2 << endl ;  $ ~else  $ ~~cout << a / 2 << endl ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~int a , b ;  $ ~cin >> a >> b ;  $ ~int ans1 , ans2 ;  $ ~ans1 = min ( a , b ) ;  $ ~ans2 = max ( a , b ) ;  $ ~ans2 = ans2 - ans1 ;  $ ~ans2 = ans2 / 2 ;  $ ~cout << ans1 << " " << ans2 << endl ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~int a , b ;  $ ~while ( cin >> a >> b ) {  $ ~~int ans1 = min ( a , b ) ;  $ ~~int k = max ( a , b ) ;  $ ~~int ans2 = ( k - ans1 ) / 2 ;  $ ~~cout << ans1 << " " << ans2 << endl ;  $ ~}  $ ~return 0 ;  $ }
int main ( ) {  $ ~int a , b , x , y , c = 0 ;  $ ~cin >> a >> b ;  $ ~x = abs ( a - b ) ;  $ ~cout << min ( a , b ) << " " << x / 2 << endl ;  $ ~return 0 ;  $ }
int a , b ;  $ int main ( ) {  $ ~cin >> a >> b ;  $ ~cout << min ( a , b ) << " " << ( max ( a , b ) - min ( a , b ) ) / 2 << endl ;  $ ~return 0 ;  $ }
int dx [ ] = { 1 , 0 , - 1 , 0 } ;  $ int dy [ ] = { 0 , - 1 , 0 , 1 } ;  $ int main ( ) {  $ ~long long a , b ;  $ ~cin >> a >> b ;  $ ~long long Min , s ;  $ ~if ( a > b ) {  $ ~~Min = min ( a , b ) ;  $ ~~s = ( a - Min ) / 2 ;  $ ~~cout << Min << " " << s << endl ;  $ ~} else {  $ ~~Min = min ( a , b ) ;  $ ~~s = ( b - Min ) / 2 ;  $ ~~cout << Min << " " << s << endl ;  $ ~}  $ }
int main ( ) {  $ ~int a , b ;  $ ~cin >> a >> b ;  $ ~if ( a < b ) { swap ( a , b ) ; }  $ ~cout << b << " " << ( a - b ) / 2 << endl ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~int a , b , max , min , ans ;  $ ~cin >> a >> b ;  $ ~if ( a > b ) {  $ ~~max = a ;  $ ~~min = b ;  $ ~} else {  $ ~~max = b ;  $ ~~min = a ;  $ ~}  $ ~ans = ( max - min ) / 2 ;  $ ~cout << min << " " << ans << endl ;  $ ~return 0 ;  $ }
long long int n , m , a , b ;  $ int main ( ) {  $ ~cin >> n >> m >> a >> b ;  $ ~long long int _s = 0 ;  $ ~if ( n % m != 0 ) {  $ ~~long long int x = ( long long int ) n / m * m + m ;  $ ~~long long int y = x - m ;  $ ~~_s = min ( ( x - n ) * a , ( n - y ) * b ) ;  $ ~}  $ ~cout << _s << "\n" ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~long long n , m , a , b ;  $ ~cin >> n >> m >> a >> b ;  $ ~if ( n % m == 0 )  $ ~~cout << 0 << endl ;  $ ~else if ( n > m ) {  $ ~~long long res ;  $ ~~if ( n / m == 1 ) {  $ ~~~res = 2 ;  $ ~~} else {  $ ~~~res = n / m + 1 ;  $ ~~}  $ ~~cout << min ( ( n - n / m * m ) * b , ( res * m - n ) * a ) << endl ;  $ ~} else {  $ ~~cout << min ( n * b , ( m - n ) * a ) << endl ;  $ ~}  $ ~return 0 ;  $ }
int main ( ) {  $ ~long long a , b , n , m , ans ;  $ ~cin >> n >> m >> a >> b ;  $ ~if ( n % m == 0 )  $ ~~ans = 0 ;  $ ~else if ( n < m ) {  $ ~~ans = min ( n * b , ( m - n ) * a ) ;  $ ~} else {  $ ~~long long cnt1 , cnt2 ;  $ ~~cnt1 = n % m ;  $ ~~cnt2 = n / m + 1 ;  $ ~~ans = min ( ( cnt2 * m - n ) * a , cnt1 * b ) ;  $ ~}  $ ~cout << ans << endl ;  $ ~return 0 ;  $ }
string S , T ;  $ long long N , M , A , B , sum , x , y , K , ans , val , L , a ;  $ char C ;  $ int main ( ) {  $ ~cin >> N >> M >> A >> B ;  $ ~x = ( ( N - 1 ) / M + 1 ) * M ;  $ ~y = N / M * M ;  $ ~cout << min ( ( x - N ) * A , ( N - y ) * B ) << '\n' ;  $ }
int const lim = 2e5 ;  $ int inp [ lim + 3 ] ;  $ int main ( ) {  $ ~long long n , m , a , b ;  $ ~cin >> n >> m >> a >> b ;  $ ~long long ans = min ( ( n % m ) * b , ( m - ( n % m ) ) * a ) ;  $ ~cout << ans << endl ;  $ }
long long n , m , a , b ;  $ int main ( ) {  $ ~while ( cin >> n >> m >> a >> b ) {  $ ~~long long tmp = n / m ;  $ ~~long long ans = 1e15 ;  $ ~~ans = min ( ans , ( n - tmp * m ) * b ) ;  $ ~~ans = min ( ans , ( ( tmp + 1 ) * m - n ) * a ) ;  $ ~~cout << ans << endl ;  $ ~}  $ ~return 0 ;  $ }
int main ( ) {  $ ~long long n , m ;  $ ~int a , b ;  $ ~cin >> n >> m >> a >> b ;  $ ~long long x = ( n - n / m * m ) * b , y = ( ( n / m + 1 ) * m - n ) * a ;  $ ~if ( x > y )  $ ~~cout << y << endl ;  $ ~else  $ ~~cout << x << endl ;  $ ~return 0 ;  $ }
const double pi = acos ( - 1 ) ;  $ const double EPS = 1e-6 ;  $ const int INF = 1e9 + 40 ;  $ const long long INF64 = 1e18 + 40 ;  $ const double INFd = 1e9 + 40.0 ;  $ const long long MOD = ( int ) 1e18 + 7 ;  $ const long long MODf = 998244353 ;  $ const int N = 1000 * 10 + 15 ;  $ int solve ( ) {  $ ~long long n , m , a , b ;  $ ~cin >> n >> m >> a >> b ;  $ ~cout << min ( n % m * b , ( m - n % m ) * a ) << '\n' ;  $ ~return 0 ;  $ }  $ int main ( ) {  $ ~solve ( ) ;  $ }
int main ( ) {  $ ~long long int n , m , a , b ;  $ ~long long int dem , bui , tm ;  $ ~cin >> n >> m >> a >> b ;  $ ~tm = n / m ;  $ ~dem = ( n - ( tm * m ) ) * b ;  $ ~bui = ( ( tm + 1 ) * m - n ) * a ;  $ ~cout << min ( dem , bui ) << endl ;  $ ~return 0 ;  $ }
long long m , n , a , b ;  $ int main ( ) {  $ ~cin >> n >> m >> a >> b ;  $ ~if ( n % m == 0 )  $ ~~cout << 0 << '\n' ;  $ ~else  $ ~~cout << min ( ( ( m * ( n / m + 1 ) ) - n ) * a , n % m * b ) << '\n' ;  $ }
int main ( ) {  $ ~long long int i , j , k , m , n , t , a , b ;  $ ~cin >> n >> m >> a >> b ;  $ ~if ( n % m == 0 ) {  $ ~~cout << 0 << endl ;  $ ~~return 0 ;  $ ~}  $ ~k = n / m ;  $ ~i = n - k * m ;  $ ~j = ( k + 1 ) * m - n ;  $ ~cout << min ( a * j , b * i ) << endl ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~long long int n , m , a , b ;  $ ~cin >> n >> m >> a >> b ;  $ ~long long int sum , min , ans ;  $ ~if ( n % m == 0 )  $ ~~min = 0 ;  $ ~else {  $ ~~{  $ ~~~sum = a * ( ( ( n / m + 1 ) * m ) - n ) ;  $ ~~~min = sum ;  $ ~~~ans = b * ( n - ( ( n / m ) * m ) ) ;  $ ~~~if ( ans < min ) min = ans ;  $ ~~}  $ ~}  $ ~cout << min << endl ;  $ ~return 0 ;  $ }
const long long mod = 1e9 + 7 ;  $ const int MAX = 1e6 + 7 ;  $ long long n , d , a , b ;  $ int main ( ) {  $ ~cin >> n >> d >> a >> b ;  $ ~long long ans = ( n % d ) * b ;  $ ~long long r = ( n / d + 1 ) * d ;  $ ~ans = min ( ans , ( r - n ) * a ) ;  $ ~cout << ans << "\n" ;  $ }
int main ( ) {  $ ~long long n , m , a , b ;  $ ~cin >> n >> m >> a >> b ;  $ ~cout << min ( b * ( n % m ) , a * ( ( ( n / m ) + 1 ) * m - n ) ) << endl ;  $ }
int main ( ) {  $ ~long long n , m , a , b ;  $ ~while ( cin >> n >> m >> a >> b ) { cout << min ( ( m - n % m ) * a , n % m * b ) << endl ; }  $ ~return 0 ;  $ }
long long n , k ;  $ int a , b ;  $ int main ( ) {  $ ~cin >> n >> k >> a >> b ;  $ ~if ( n % k == 0 )  $ ~~cout << 0 << endl ;  $ ~else {  $ ~~long long sum1 = n % k * b ;  $ ~~long long sum2 = ( k - n % k ) * a ;  $ ~~cout << min ( sum1 , sum2 ) << endl ;  $ ~}  $ }
int main ( ) {  $ ~long long n , m , a , b ;  $ ~cin >> n >> m >> a >> b ;  $ ~if ( n % m == 0 )  $ ~~cout << 0 << endl ;  $ ~else {  $ ~~long long tmp = n / m ;  $ ~~cout << min ( ( n - tmp * m ) * b , ( ( tmp + 1 ) * m - n ) * a ) << endl ;  $ ~}  $ ~return 0 ;  $ }
int main ( ) {  $ ~long long n , m , a , b , sum1 , sum2 ;  $ ~cin >> n >> m >> a >> b ;  $ ~if ( ( n % m == 0 ) ) {  $ ~~cout << 0 << endl ;  $ ~~return 0 ;  $ ~}  $ ~sum1 = ( ( n / m + 1 ) * m - n ) * a ;  $ ~sum2 = ( n - ( n / m ) * m ) * b ;  $ ~if ( sum1 > sum2 )  $ ~~cout << sum2 << endl ;  $ ~else  $ ~~cout << sum1 << endl ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~long long n , m ;  $ ~int a , b ;  $ ~cin >> n >> m >> a >> b ;  $ ~long long plus = 0 , minus = 0 ;  $ ~long long mod = n % m ;  $ ~long long div = n / m ;  $ ~if ( n % m != 0 ) {  $ ~~if ( n < m ) {  $ ~~~plus = m - n ;  $ ~~~minus = n ;  $ ~~} else {  $ ~~~plus = abs ( n - ( ( div * m ) + m ) ) ;  $ ~~~minus = mod ;  $ ~~}  $ ~} else {  $ ~~cout << 0 << endl ;  $ ~~return 0 ;  $ ~}  $ ~cout << min ( plus * a , minus * b ) << endl ;  $ }
int main ( ) {  $ ~long long int n , m , a , b , r ;  $ ~cin >> n >> m >> a >> b ;  $ ~r = n % m ;  $ ~cout << ( min ( r * b , ( m - r ) * a ) ) << '\n' ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~long long n , m , a , b , x ;  $ ~cin >> n >> m >> a >> b ;  $ ~long long sum1 = 0 , sum2 = 0 ;  $ ~if ( n >= m ) {  $ ~~if ( n % m == 0 ) {  $ ~~~cout << 0 << endl ;  $ ~~~return 0 ;  $ ~~}  $ ~}  $ ~x = n % m ;  $ ~sum1 += b * x ;  $ ~sum2 += a * ( m - x ) ;  $ ~cout << min ( sum1 , sum2 ) << endl ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~long long n , m , a , b ;  $ ~cin >> n >> m >> a >> b ;  $ ~long long resa , resb ;  $ ~long long mod = n % m ;  $ ~resb = mod * b ;  $ ~if ( n >= m ) {  $ ~~resa = ( ceil ( double ( n ) / m ) * m - n ) * a ;  $ ~} else  $ ~~resa = ( m - n ) * a ;  $ ~cout << min ( resa , resb ) << endl ;  $ }
const int INF = 0 x3f3f3f3f ;  $ const double PI = acos ( - 1.0 ) ;  $ int main ( ) {  $ ~long long n , m , a , b ;  $ ~cin >> n >> m >> a >> b ;  $ ~long long res = min ( ( m - ( n % m ) ) * a , ( n % m ) * b ) ;  $ ~cout << res << endl ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~long long n , m , a , b , num = 0 ;  $ ~cin >> n >> m >> a >> b ;  $ ~if ( n % m == 0 ) {  $ ~~num = 0 ;  $ ~} else if ( n < m ) {  $ ~~num = min ( a * ( m - n ) , n * b ) ;  $ ~} else {  $ ~~long long y = n % m , z = m - n % m ;  $ ~~num = min ( y * b , z * a ) ;  $ ~}  $ ~cout << num << endl ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~long long n , m , a , b ;  $ ~cin >> n >> m >> a >> b ;  $ ~cout << min ( ( m - n % m ) * a , n % m * b ) << endl ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~long long n , m ;  $ ~int a , b ;  $ ~cin >> n >> m >> a >> b ;  $ ~cout << min ( n % m * b , ( m - n % m ) * a ) << endl ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~long long n , m , a , b ;  $ ~while ( cin >> n >> m >> a >> b ) { cout << min ( ( m - n % m ) * a , n % m * b ) << endl ; }  $ ~return 0 ;  $ }
int main ( ) {  $ ~long long n , m , a , b ;  $ ~cin >> n >> m >> a >> b ;  $ ~long long ans ;  $ ~if ( n > m )  $ ~~ans = min ( ( ( m - n % m ) % m ) * a , ( n % m ) * b ) ;  $ ~else {  $ ~~if ( n % m == 0 )  $ ~~~ans = 0 ;  $ ~~else {  $ ~~~ans = ( n + ( m - n % m ) % m ) / m ;  $ ~~~ans = min ( ( ans * m - n ) * a , ( n - ( n / m ) * m ) * b ) ;  $ ~~}  $ ~}  $ ~cout << ans << endl ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~long long n , m , a , b ;  $ ~cin >> n >> m >> a >> b ;  $ ~long long s = ( n + m - 1 ) / m ;  $ ~long long t = n / m ;  $ ~cout << min ( ( s * m - n ) * a , ( n - t * m ) * b ) << endl ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~long long int n , m , a , b , x , y ;  $ ~cin >> n >> m >> a >> b ;  $ ~x = n % m ;  $ ~y = m - x ;  $ ~x = x * b ;  $ ~y = y * a ;  $ ~cout << min ( x , y ) << "\n" ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~long long n , m , a , b ;  $ ~cin >> n >> m >> a >> b ;  $ ~long long k = n / m ;  $ ~long long t1 = ( n - k * m ) * b ;  $ ~long long t2 = ( m * ( k + 1 ) - n ) * a ;  $ ~if ( t1 > t2 ) {  $ ~~cout << t2 << endl ;  $ ~} else {  $ ~~cout << t1 << endl ;  $ ~}  $ ~return 0 ;  $ }
int main ( ) {  $ ~int a , b , c ;  $ ~cin >> a >> b >> c ;  $ ~int x , y , z ;  $ ~z = sqrt ( ( b * c ) / a ) ;  $ ~y = c / z ;  $ ~x = b / z ;  $ ~cout << 4 * ( x + y + z ) << endl ;  $ }
int main ( ) {  $ ~int A1 , A2 , A3 ;  $ ~cin >> A1 >> A2 >> A3 ;  $ ~int l = ( int ) sqrt ( A1 * A2 / A3 ) ;  $ ~int b = ( int ) sqrt ( A3 * A1 / A2 ) ;  $ ~int h = ( int ) sqrt ( A3 * A2 / A1 ) ;  $ ~cout << 4 * ( l + b + h ) << "\n" ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~int ab , bc , ca , a , b , c , s ;  $ ~cin >> ab >> bc >> ca ;  $ ~a = sqrt ( ( ab * ca ) / bc ) ;  $ ~b = sqrt ( ( bc * ab ) / ca ) ;  $ ~c = sqrt ( ( ca * bc ) / ab ) ;  $ ~s = 4 * ( a + b + c ) ;  $ ~cout << s << endl ;  $ }
long long a , b , c ;  $ int main ( ) {  $ ~cin >> a >> b >> c ;  $ ~long long z = sqrt ( ( b * c ) / a ) ;  $ ~long long x = c / z ;  $ ~long long y = b / z ;  $ ~cout << x * 4 + y * 4 + z * 4 << '\n' ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~int l , h , b , a1 , a2 , a3 ;  $ ~cin >> a1 >> a2 >> a3 ;  $ ~l = sqrt ( ( a2 * a3 ) / a1 ) ;  $ ~b = sqrt ( ( a1 * a3 ) / a2 ) ;  $ ~h = sqrt ( ( a2 * a1 ) / a3 ) ;  $ ~cout << 4 * ( l + b + h ) << endl ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~long long int u , v , w ;  $ ~cin >> u >> v >> w ;  $ ~long long int t1 , t2 , t3 ;  $ ~t1 = sqrt ( ( u * v * w ) ) / u ;  $ ~t2 = sqrt ( ( u * v * w ) ) / v ;  $ ~t3 = sqrt ( ( u * v * w ) ) / w ;  $ ~cout << 4 * ( t1 + t2 + t3 ) << endl ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~int a , b , c ;  $ ~cin >> a >> b >> c ;  $ ~cout << 4 * ( sqrt ( a * c / b ) + sqrt ( b * c / a ) + sqrt ( a * b / c ) ) << endl ;  $ }
int main ( ) {  $ ~double a , b , c ;  $ ~cin >> a >> b >> c ;  $ ~double s = sqrt ( a * b * c ) ;  $ ~cout << 4.0 * ( s / a + s / b + s / c ) << endl ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~int lb , bh , hl , l , b , h ;  $ ~cin >> lb >> bh >> hl ;  $ ~b = ( int ) sqrt ( lb * bh / hl ) ;  $ ~l = lb / b ;  $ ~h = hl / l ;  $ ~cout << 4 * ( l + b + h ) << endl ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~int a , b , c ;  $ ~cin >> a >> b >> c ;  $ ~int m = max ( a , max ( b , c ) ) ;  $ ~int r = 0 ;  $ ~for ( int i = 1 ; i <= m ; i ++ ) {  $ ~~if ( a % i == 0 && b % i == 0 && ( ( a / i ) * ( b / i ) == c ) ) {  $ ~~~r = a / i + b / i + i ;  $ ~~~r *= 4 ;  $ ~~}  $ ~}  $ ~cout << r << endl ;  $ }
int gcd ( int a , int b ) {  $ ~if ( b == 0 )  $ ~~return a ;  $ ~else  $ ~~gcd ( b , a % b ) ;  $ }  $ int main ( ) {  $ ~int x , y , z ;  $ ~while ( cin >> x >> y >> z ) {  $ ~~int c = sqrt ( ( z * y ) / x ) ;  $ ~~int a = ( x * c ) / y ;  $ ~~int b = x / a ;  $ ~~cout << a * 4 + b * 4 + c * 4 << endl ;  $ ~}  $ }
int main ( ) {  $ ~int a , b , c ;  $ ~cin >> a >> b >> c ;  $ ~cout << 4 * ( sqrt ( a * b / c ) + sqrt ( b * c / a ) + sqrt ( a * c / b ) ) << endl ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~int a , b , c , i , j , k ;  $ ~cin >> a >> b >> c ;  $ ~for ( i = 1 ; i < 10005 ; i ++ ) {  $ ~~for ( j = 1 ; j < 10005 ; j ++ ) {  $ ~~~for ( k = 1 ; k < 10005 ; k ++ ) {  $ ~~~~if ( i * j == a && i * k == b && j * k == c ) {  $ ~~~~~cout << 4 * i + 4 * j + 4 * k << endl ;  $ ~~~~~return 0 ;  $ ~~~~}  $ ~~~~if ( i * k > b || j * k > c ) break ;  $ ~~~}  $ ~~~if ( i * j > a || j > c ) break ;  $ ~~}  $ ~~if ( i > a || i > b ) break ;  $ ~}  $ ~return 0 ;  $ }
int main ( ) {  $ ~int x , y , z ;  $ ~cin >> x >> y >> z ;  $ ~int a , b , c ;  $ ~a = sqrt ( ( x * z ) / y ) ;  $ ~b = sqrt ( ( x * y ) / z ) ;  $ ~c = sqrt ( ( y * z ) / x ) ;  $ ~cout << 4 * ( a + b + c ) << endl ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~int a , b , c ;  $ ~while ( cin >> a >> b >> c ) {  $ ~~int ans = 4 * ( sqrt ( a * b / c ) + sqrt ( a * c / b ) + sqrt ( b * c / a ) ) ;  $ ~~cout << ans << endl ;  $ ~}  $ ~return 0 ;  $ }
int main ( ) {  $ ~double A , B , C ;  $ ~int a , b , c ;  $ ~cin >> a >> b >> c ;  $ ~A = sqrt ( a * b / c ) ;  $ ~B = sqrt ( b * c / a ) ;  $ ~C = sqrt ( c * a / b ) ;  $ ~int count = ( A + B + C ) * 4 ;  $ ~cout << count << endl ;  $ }
long long a , b , c , s ;  $ void solve ( ) {  $ ~cin >> a >> b >> c ;  $ ~s += ( long long ) sqrt ( a * b / c ) ;  $ ~s += ( long long ) sqrt ( b * c / a ) ;  $ ~s += ( long long ) sqrt ( a * c / b ) ;  $ ~cout << s * 4 << endl ;  $ }  $ void prep ( ) { }  $ int main ( ) {  $ ~long long t = 1 ;  $ ~prep ( ) ;  $ ~cout << fixed << setprecision ( 12 ) ;  $ ~while ( t -- ) solve ( ) ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~int ab , bc , ac ;  $ ~cin >> ab >> bc >> ac ;  $ ~int b = sqrt ( ab * bc / ac ) ;  $ ~int a = ab / b ;  $ ~int c = bc / b ;  $ ~cout << a * 4 + b * 4 + c * 4 << endl ;  $ }
int main ( ) {  $ ~int a , b , c ;  $ ~int x , y , z ;  $ ~cin >> a >> b >> c ;  $ ~x = sqrt ( ( a * c ) / b ) ;  $ ~y = sqrt ( ( b * a ) / c ) ;  $ ~z = sqrt ( ( b * c ) / a ) ;  $ ~cout << x * 4 + y * 4 + z * 4 << endl ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~long long x , y , z ;  $ ~cin >> x >> y >> z ;  $ ~long long abc = ( long long ) ( sqrt ( x * y * z + 0.00001 ) ) ;  $ ~long long ans = 4 * ( abc / x + abc / y + abc / z ) ;  $ ~cout << ans << endl ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~long long a , b , c ;  $ ~cin >> a >> b >> c ;  $ ~long long p = sqrt ( a * b * c ) ;  $ ~long long res = 0 ;  $ ~res += ( p / a + p / b + p / c ) ;  $ ~cout << res * 4 << endl ;  $ }
int main ( ) {  $ ~int a , b , c ;  $ ~cin >> a >> b >> c ;  $ ~int sum = 0 ;  $ ~sum = sqrt ( ( a * b ) / c ) + sqrt ( ( b * c ) / a ) + sqrt ( ( c * a ) / b ) ;  $ ~cout << sum * 4 << endl ;  $ }
int main ( ) {  $ ~int a , b , c ;  $ ~cin >> a >> b >> c ;  $ ~int x = 0 , y = 0 , z = 0 , flag = 0 ;  $ ~x = sqrt ( ( b * c ) / a ) ;  $ ~y = sqrt ( ( c * a ) / b ) ;  $ ~z = sqrt ( ( a * b ) / c ) ;  $ ~cout << 4 * ( x + y + z ) << endl ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~int m , n , p ;  $ ~cin >> m >> n >> p ;  $ ~int a = sqrt ( p * m / n ) ;  $ ~int b = sqrt ( m * n / p ) ;  $ ~int c = sqrt ( n * p / m ) ;  $ ~int sum = 4 * ( a + b + c ) ;  $ ~cout << sum << endl ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~int m , n , p , sum = 0 , a , b , c ;  $ ~cin >> m >> n >> p ;  $ ~a = sqrt ( p * m / n ) ;  $ ~b = sqrt ( m * n / p ) ;  $ ~c = sqrt ( n * p / m ) ;  $ ~sum = 4 * ( a + b + c ) ;  $ ~cout << sum << endl ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~int a , b , c ;  $ ~cin >> a >> b >> c ;  $ ~int x = sqrt ( ( a * b ) / c ) ;  $ ~int y = sqrt ( ( a * c ) / b ) ;  $ ~int z = sqrt ( ( b * c ) / a ) ;  $ ~cout << 4 * ( x + y + z ) << endl ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~int x1 , x2 , x3 ;  $ ~cin >> x1 >> x2 >> x3 ;  $ ~int sum = sqrt ( ( x1 * x3 ) / x2 ) + sqrt ( ( x2 * x1 ) / x3 ) + sqrt ( ( x3 * x2 ) / x1 ) ;  $ ~sum = sum * 4 ;  $ ~cout << sum << endl ;  $ ~return 0 ;  $ }
int arr [ 104 ] ;  $ int main ( ) {  $ ~int n , k ;  $ ~cin >> n >> k ;  $ ~for ( int i = 0 ; i < n ; i ++ ) { cin >> arr [ i ] ; }  $ ~int total = 0 ;  $ ~for ( int i = 0 ; i < n ; i ++ ) {  $ ~~total += arr [ i ] ;  $ ~~k -= min ( total , 8 ) ;  $ ~~total -= min ( total , 8 ) ;  $ ~~if ( k <= 0 ) {  $ ~~~cout << i + 1 << endl ;  $ ~~~return 0 ;  $ ~~}  $ ~}  $ ~cout << - 1 << endl ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~int n , k ;  $ ~cin >> n >> k ;  $ ~int a ;  $ ~int totalChocolate = 0 , days = 0 , remain = 0 ;  $ ~bool flag = false ;  $ ~for ( int i = 0 ; i < n ; i ++ ) {  $ ~~cin >> a ;  $ ~~a += remain ;  $ ~~if ( a > 8 ) {  $ ~~~remain = a - 8 ;  $ ~~~totalChocolate += 8 ;  $ ~~} else {  $ ~~~totalChocolate += a ;  $ ~~~remain = 0 ;  $ ~~}  $ ~~days ++ ;  $ ~~if ( totalChocolate >= k ) {  $ ~~~flag = true ;  $ ~~~break ;  $ ~~}  $ ~}  $ ~if ( flag ) {  $ ~~cout << days << endl ;  $ ~} else {  $ ~~cout << "-1" << endl ;  $ ~}  $ ~return 0 ;  $ }
const int MAX = 100001 ;  $ int An [ MAX ] , Bn [ MAX ] ;  $ int main ( ) {  $ ~int n , k ;  $ ~cin >> n >> k ;  $ ~for ( int i = 1 ; i <= n ; i ++ ) cin >> An [ i ] ;  $ ~int sum = 0 , flag = 0 , coun = 0 ;  $ ~for ( int i = 1 ; i <= n ; i ++ ) {  $ ~~coun += An [ i ] ;  $ ~~if ( coun > 8 ) {  $ ~~~sum += 8 ;  $ ~~~coun -= 8 ;  $ ~~} else {  $ ~~~sum += coun ;  $ ~~~coun = 0 ;  $ ~~}  $ ~~if ( sum >= k ) {  $ ~~~flag = 1 ;  $ ~~~cout << i << endl ;  $ ~~~break ;  $ ~~}  $ ~}  $ ~if ( ! flag ) cout << - 1 << endl ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~int n , k , a , c = 0 , v = 0 ;  $ ~cin >> n >> k ;  $ ~for ( int i = 1 ; i <= n ; i ++ ) {  $ ~~cin >> a ;  $ ~~if ( a <= 8 )  $ ~~~if ( c >= 8 - a ) {  $ ~~~~v += 8 ;  $ ~~~~c -= 8 - a ;  $ ~~~} else {  $ ~~~~v += a + c ;  $ ~~~~c = 0 ;  $ ~~~}  $ ~~else {  $ ~~~v += 8 ;  $ ~~~c += a - 8 ;  $ ~~}  $ ~~if ( v >= k ) {  $ ~~~cout << i << endl ;  $ ~~~return 0 ;  $ ~~}  $ ~}  $ ~cout << - 1 << endl ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~int a , b , c , t , l , i , j , sum = 0 , count = 0 , m ;  $ ~cin >> a >> b ;  $ ~for ( i = 1 ; i <= a ; i ++ ) {  $ ~~cin >> c ;  $ ~~sum += c ;  $ ~~m = min ( 8 , sum ) ;  $ ~~sum -= m ;  $ ~~b -= m ;  $ ~~count ++ ;  $ ~~if ( b <= 0 ) { break ; }  $ ~}  $ ~if ( b > 0 ) {  $ ~~cout << - 1 << endl ;  $ ~} else {  $ ~~cout << count << endl ;  $ ~}  $ }
int main ( ) {  $ ~int n , k , ans , sum , aux , candies ;  $ ~ans = sum = candies = 0 ;  $ ~bool found = false ;  $ ~cin >> n >> k ;  $ ~for ( int i = 0 ; i < n ; i ++ ) {  $ ~~cin >> aux ;  $ ~~if ( found ) continue ;  $ ~~candies += aux ;  $ ~~aux = min ( candies , 8 ) ;  $ ~~sum += aux ;  $ ~~ans ++ ;  $ ~~candies -= aux ;  $ ~~if ( sum >= k ) found = true ;  $ ~}  $ ~if ( ! found )  $ ~~cout << "-1\n" ;  $ ~else  $ ~~cout << ans << "\n" ;  $ }
int main ( ) {  $ ~int n , k , a , b = 1 , c = 0 , d = 0 , e , s [ 117 ] ;  $ ~cin >> n >> k ;  $ ~for ( int i = 1 ; i <= n ; i ++ ) { cin >> s [ i ] ; }  $ ~while ( b <= n ) {  $ ~~e = s [ b ] + d ;  $ ~~if ( e <= 8 ) {  $ ~~~c = c + e ;  $ ~~~d = 0 ;  $ ~~~b ++ ;  $ ~~~if ( c >= k ) { break ; }  $ ~~} else if ( e > 8 ) {  $ ~~~c = c + 8 ;  $ ~~~d = e - 8 ;  $ ~~~b ++ ;  $ ~~~if ( c >= k ) { break ; }  $ ~~}  $ ~}  $ ~if ( c < k ) {  $ ~~cout << - 1 << endl ;  $ ~} else {  $ ~~cout << b - 1 << endl ;  $ ~}  $ ~return 0 ;  $ }
long long int n , k ;  $ long long int a [ 1007 ] ;  $ int main ( ) {  $ ~cin >> n >> k ;  $ ~long long int _d = 0 , _c = 0 ;  $ ~for ( long long int i = 1 ; i <= n ; i ++ ) {  $ ~~cin >> a [ i ] ;  $ ~~if ( k > 0 ) {  $ ~~~_c += a [ i ] ;  $ ~~~long long int x = min ( 8 LL , _c ) ;  $ ~~~k -= x ;  $ ~~~_c -= x ;  $ ~~~_d = i ;  $ ~~}  $ ~}  $ ~if ( k <= 0 ) {  $ ~~cout << _d << "\n" ;  $ ~} else {  $ ~~cout << - 1 << "\n" ;  $ ~}  $ ~return 0 ;  $ }
int main ( ) {  $ ~long long int n , k ;  $ ~cin >> n >> k ;  $ ~long long int arr [ n ] = { 0 } ;  $ ~int answer = 0 ;  $ ~int sum = 0 ;  $ ~for ( int i = 0 ; i < n ; i ++ ) { cin >> arr [ i ] ; }  $ ~int temp = 0 ;  $ ~for ( int i = 0 ; i < n ; i ++ ) {  $ ~~arr [ i ] += temp ;  $ ~~if ( arr [ i ] >= 8 ) {  $ ~~~k -= 8 ;  $ ~~~temp = arr [ i ] - 8 ;  $ ~~~answer ++ ;  $ ~~} else {  $ ~~~k -= arr [ i ] ;  $ ~~~temp = 0 ;  $ ~~~answer ++ ;  $ ~~}  $ ~~if ( k <= 0 ) {  $ ~~~cout << answer << endl ;  $ ~~~return 0 ;  $ ~~}  $ ~}  $ ~cout << - 1 << endl ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~int n , k , a , b = 1 , c = 0 , d = 0 , e , s [ 117 ] ;  $ ~cin >> n >> k ;  $ ~for ( int i = 1 ; i <= n ; i ++ ) { cin >> s [ i ] ; }  $ ~while ( b <= n ) {  $ ~~e = s [ b ] + d ;  $ ~~if ( e <= 8 ) {  $ ~~~c = c + e ;  $ ~~~d = 0 ;  $ ~~~b ++ ;  $ ~~~if ( c >= k ) { break ; }  $ ~~} else if ( e > 8 ) {  $ ~~~c = c + 8 ;  $ ~~~d = e - 8 ;  $ ~~~b ++ ;  $ ~~~if ( c >= k ) { break ; }  $ ~~}  $ ~}  $ ~if ( c < k ) {  $ ~~cout << - 1 << endl ;  $ ~} else {  $ ~~cout << b - 1 << endl ;  $ ~}  $ ~return 0 ;  $ }
int main ( ) {  $ ~int n , k ;  $ ~cin >> n >> k ;  $ ~int arya = 0 , bran = 0 ;  $ ~int s = 0 ;  $ ~for ( int i = 0 ; i < n ; ++ i ) {  $ ~~int t ;  $ ~~cin >> t ;  $ ~~if ( t + arya >= 8 ) {  $ ~~~bran += 8 ;  $ ~~~arya += t - 8 ;  $ ~~~++ s ;  $ ~~} else {  $ ~~~bran += t + arya ;  $ ~~~arya = 0 ;  $ ~~~++ s ;  $ ~~}  $ ~~if ( bran >= k ) {  $ ~~~cout << s << endl ;  $ ~~~return 0 ;  $ ~~}  $ ~}  $ ~if ( bran <= k ) { cout << - 1 << endl ; }  $ }
int solve ( int arr [ ] , int n , int k ) {  $ ~int t = 0 ;  $ ~for ( int i = 0 ; i < n ; i ++ ) {  $ ~~t += arr [ i ] ;  $ ~~int val = min ( 8 , t ) ;  $ ~~k -= val ;  $ ~~t -= val ;  $ ~~if ( k <= 0 ) return i + 1 ;  $ ~}  $ ~return - 1 ;  $ }  $ int main ( ) {  $ ~int n , k ;  $ ~cin >> n >> k ;  $ ~int arr [ n ] ;  $ ~for ( int i = 0 ; i < n ; i ++ ) cin >> arr [ i ] ;  $ ~cout << solve ( arr , n , k ) << endl ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~int n , i , k , j , t = 0 , m ;  $ ~cin >> n >> k ;  $ ~for ( i = 0 ; i < n ; i ++ ) {  $ ~~cin >> j ;  $ ~~j += t ;  $ ~~t = 0 ;  $ ~~if ( j >= 8 ) {  $ ~~~t += j - 8 ;  $ ~~~j = 8 ;  $ ~~}  $ ~~k -= j ;  $ ~~if ( k <= 0 ) { break ; }  $ ~}  $ ~if ( k > 0 ) {  $ ~~cout << - 1 << endl ;  $ ~} else {  $ ~~cout << i + 1 << endl ;  $ ~}  $ ~return 0 ;  $ }
int main ( ) {  $ ~int n , k ;  $ ~cin >> n >> k ;  $ ~vector < int > a ( n ) ;  $ ~int curr = 0 ;  $ ~int goal = k ;  $ ~int count = 0 ;  $ ~for ( int i = 0 ; i < n ; i ++ ) {  $ ~~cin >> a [ i ] ;  $ ~~curr = curr + a [ i ] ;  $ ~~int maxGive = min ( 8 , curr ) ;  $ ~~curr = curr - maxGive ;  $ ~~goal = goal - maxGive ;  $ ~~if ( goal <= 0 ) {  $ ~~~;  $ ~~} else {  $ ~~~count ++ ;  $ ~~}  $ ~}  $ ~if ( goal > 0 ) { count = - 2 ; }  $ ~cout << count + 1 << endl ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~int n , k ;  $ ~cin >> n >> k ;  $ ~int c [ n ] ;  $ ~for ( int i = 0 ; i < n ; i ++ ) { cin >> c [ i ] ; }  $ ~if ( k <= n * 8 ) {  $ ~~int sum = 0 ;  $ ~~int p = 0 ;  $ ~~for ( int i = 0 ; i < n ; i ++ ) {  $ ~~~if ( c [ i ] <= 8 ) {  $ ~~~~c [ i ] = c [ i ] ;  $ ~~~} else {  $ ~~~~int a = c [ i ] - 8 ;  $ ~~~~c [ i ] = 8 ;  $ ~~~~c [ i + 1 ] = ( c [ i + 1 ] + a ) ;  $ ~~~}  $ ~~~sum += c [ i ] ;  $ ~~~if ( sum >= k ) {  $ ~~~~cout << i + 1 << endl ;  $ ~~~~break ;  $ ~~~} else {  $ ~~~~p ++ ;  $ ~~~}  $ ~~}  $ ~~if ( p == n ) { cout << "-1" << endl ; }  $ ~} else {  $ ~~cout << "-1" << endl ;  $ ~}  $ }
int main ( ) {  $ ~int a , b , c = 0 ;  $ ~cin >> a >> b ;  $ ~while ( b ) {  $ ~~int d = b % 10 ;  $ ~~c = c * 10 + d ;  $ ~~b /= 10 ;  $ ~}  $ ~cout << a + c << endl ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~long long a , b ;  $ ~cin >> a >> b ;  $ ~long long temp = 0 ;  $ ~while ( b > 0 ) {  $ ~~temp = ( temp * 10 ) + ( b % 10 ) ;  $ ~~b /= 10 ;  $ ~}  $ ~cout << a + temp << endl ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~int a , num = 0 ;  $ ~char b [ 100 ] ;  $ ~cin >> a ;  $ ~cin >> b ;  $ ~reverse ( b , b + strlen ( b ) ) ;  $ ~for ( int i ( 0 ) ; i < ( strlen ( b ) ) ; i ++ ) { num = ( num * 10 ) + ( b [ i ] - '0' ) ; }  $ ~cout << num + a << endl ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~int a , b ;  $ ~cin >> a >> b ;  $ ~int y [ 30 ] = { } ;  $ ~int r = b , d = 0 ;  $ ~while ( r > 0 ) {  $ ~~y [ d ] = r % 10 ;  $ ~~r /= 10 ;  $ ~~d ++ ;  $ ~}  $ ~for ( int i = 0 ; i < d / 2 ; i ++ ) swap ( y [ i ] , y [ d - 1 - i ] ) ;  $ ~int w = 0 , k = 1 ;  $ ~for ( int i = 0 ; i < d ; i ++ ) {  $ ~~w += y [ i ] * k ;  $ ~~k *= 10 ;  $ ~}  $ ~cout << w + a << endl ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~int a , b , c = 0 ;  $ ~cin >> a >> b ;  $ ~while ( b != 0 ) {  $ ~~c = c * 10 + b % 10 ;  $ ~~b = b / 10 ;  $ ~}  $ ~cout << a + c << endl ;  $ ~return 0 ;  $ }
int a , be , eb = 0 ;  $ int main ( ) {  $ ~cin >> a >> be ;  $ ~while ( be ) {  $ ~~eb = 10 * eb + be % 10 ;  $ ~~be /= 10 ;  $ ~}  $ ~cout << a + eb << '\n' ;  $ }
int main ( ) {  $ ~int a , b , c = 0 ;  $ ~cin >> a >> b ;  $ ~while ( b ) {  $ ~~int d = b % 10 ;  $ ~~c = c * 10 + d ;  $ ~~b /= 10 ;  $ ~}  $ ~cout << a + c << endl ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~long long a , ans = 0 , plus ;  $ ~string b ;  $ ~cin >> a >> b ;  $ ~for ( int i = 0 ; i <= b . size ( ) - 1 ; i ++ ) {  $ ~~plus = ( ( int ) b [ i ] - 48 ) ;  $ ~~for ( int j = 0 ; j <= i ; j ++ ) plus *= 10 ;  $ ~~plus /= 10 ;  $ ~~ans += plus ;  $ ~}  $ ~ans += a ;  $ ~cout << ans << endl ;  $ }
int main ( ) {  $ ~long int a , b ;  $ ~cin >> a >> b ;  $ ~int reversedNumber = 0 , remainder ;  $ ~while ( b != 0 ) {  $ ~~remainder = b % 10 ;  $ ~~reversedNumber = reversedNumber * 10 + remainder ;  $ ~~b /= 10 ;  $ ~}  $ ~cout << a + reversedNumber << endl ;  $ ~return 0 ;  $ }
int rever ( int n ) {  $ ~int rn = 0 ;  $ ~while ( n ) {  $ ~~rn = rn * 10 + n % 10 ;  $ ~~n /= 10 ;  $ ~}  $ ~return rn ;  $ }  $ int main ( ) {  $ ~int a , b ;  $ ~while ( cin >> a >> b ) { cout << a + rever ( b ) << endl ; }  $ ~return 0 ;  $ }
int main ( ) {  $ ~ifstream ff ( "file.txt" ) ;  $ ~string s1 , s2 ;  $ ~cin >> s1 >> s2 ;  $ ~reverse ( s2 . begin ( ) , s2 . end ( ) ) ;  $ ~while ( s1 . length ( ) != s2 . length ( ) ) {  $ ~~if ( s1 . length ( ) > s2 . length ( ) ) {  $ ~~~s2 . insert ( s2 . begin ( ) , 1 , '0' ) ;  $ ~~} else {  $ ~~~s1 . insert ( s1 . begin ( ) , 1 , '0' ) ;  $ ~~}  $ ~}  $ ~int x , y ;  $ ~istringstream iss ( s2 ) ;  $ ~iss >> x ;  $ ~istringstream iss1 ( s1 ) ;  $ ~iss1 >> y ;  $ ~cout << x + y << endl ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~int a , b , c = 0 ;  $ ~cin >> a >> b ;  $ ~while ( b ) {  $ ~~int d = b % 10 ;  $ ~~c = c * 10 + d ;  $ ~~b /= 10 ;  $ ~}  $ ~cout << a + c << endl ;  $ ~return 0 ;  $ }
long long rev ( long long x ) {  $ ~long long ans = 0 ;  $ ~while ( x ) {  $ ~~ans = ans * 10 + ( x % 10 ) ;  $ ~~x /= 10 ;  $ ~}  $ ~return ans ;  $ }  $ int main ( ) {  $ ~long long a , b ;  $ ~while ( cin >> a >> b ) {  $ ~~b = rev ( b ) ;  $ ~~cout << a + b << '\n' ;  $ ~}  $ ~return 0 ;  $ }
int main ( ) {  $ ~string a , b , c ;  $ ~cin >> a >> b ;  $ ~reverse ( a . begin ( ) , a . end ( ) ) ;  $ ~while ( a . size ( ) < b . size ( ) ) a += "0" ;  $ ~while ( b . size ( ) < a . size ( ) ) b += "0" ;  $ ~vector < int > ans ;  $ ~int sisa = 0 ;  $ ~for ( int i = 0 ; i < a . size ( ) ; i ++ ) {  $ ~~int x = a [ i ] - '0' + b [ i ] - '0' + sisa ;  $ ~~sisa = 0 ;  $ ~~ans . push_back ( x % 10 ) ;  $ ~~sisa = x / 10 ;  $ ~}  $ ~while ( sisa > 0 ) {  $ ~~ans . push_back ( sisa % 10 ) ;  $ ~~sisa /= 10 ;  $ ~}  $ ~while ( ans . size ( ) > 1 && ans . back ( ) == 0 ) ans . pop_back ( ) ;  $ ~for ( int i = ans . size ( ) - 1 ; i >= 0 ; i -- ) cout << ans [ i ] ;  $ ~cout << endl ;  $ ~return 0 ;  $ }
long long n , i , j , ans = 0 ;  $ int main ( ) {  $ ~string s1 , s2 ;  $ ~cin >> s1 >> s2 ;  $ ~reverse ( s2 . begin ( ) , s2 . end ( ) ) ;  $ ~stringstream geek ( s2 ) , geek1 ( s1 ) ;  $ ~long long a ;  $ ~geek >> a ;  $ ~long long b ;  $ ~geek1 >> b ;  $ ~cout << a + b << endl ;  $ }
int main ( ) {  $ ~string a , b ;  $ ~cin >> a >> b ;  $ ~reverse ( b . begin ( ) , b . end ( ) ) ;  $ ~stringstream n1 ( a ) ;  $ ~stringstream n2 ( b ) ;  $ ~int num1 , num2 ;  $ ~n1 >> num1 ;  $ ~n2 >> num2 ;  $ ~long long int res = num1 + num2 ;  $ ~cout << res << endl ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~string a , b ;  $ ~cin >> a >> b ;  $ ~reverse ( b . begin ( ) , b . end ( ) ) ;  $ ~stringstream n1 ( a ) ;  $ ~stringstream n2 ( b ) ;  $ ~int num1 , num2 ;  $ ~n1 >> num1 ;  $ ~n2 >> num2 ;  $ ~long long int res = num1 + num2 ;  $ ~cout << res << endl ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~int a , b , c = 0 ;  $ ~cin >> a >> b ;  $ ~while ( b ) {  $ ~~int d = b % 10 ;  $ ~~c = c * 10 + d ;  $ ~~b /= 10 ;  $ ~}  $ ~cout << a + c << endl ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~int a1 , a2 , k , a3 = 0 ;  $ ~cin >> a1 >> a2 ;  $ ~while ( a2 != 0 ) {  $ ~~k = a2 % 10 ;  $ ~~a3 = a3 * 10 + k ;  $ ~~a2 /= 10 ;  $ ~}  $ ~cout << a1 + a3 << endl ;  $ ~return 0 ;  $ }
int a , b , c ;  $ int main ( ) {  $ ~cin >> a >> b ;  $ ~while ( b > 0 ) {  $ ~~int d = b % 10 ;  $ ~~c = c * 10 + d ;  $ ~~b /= 10 ;  $ ~}  $ ~cout << a + c << endl ;  $ ~return 0 ;  $ }
bool flag ;  $ int a [ 71720 ] , n , i , sumend , dp [ 811 ] [ 811 ] , m , j , k , x , y , b , c ;  $ long long int sum ;  $ bool cmp ( int a , int b ) {  $ ~return a > b ;  $ }  $ int gcd ( int a , int b ) {  $ ~if ( ! b ) return a ;  $ ~return gcd ( b , a % b ) ;  $ }  $ int maxx ( short int a , short int b ) {  $ ~if ( a > b ) return a ;  $ ~return b ;  $ }  $ int gqt ( int n ) {  $ ~if ( ! n || n ) return 1 ;  $ ~if ( n == 2 ) return 0 ;  $ ~for ( i = 3 ; i <= sqrt ( n ) ; i ++ )  $ ~~if ( n % i == 0 ) return 1 ;  $ ~return 0 ;  $ }  $ int main ( ) {  $ ~cin >> x >> y ;  $ ~while ( y != 0 ) {  $ ~~sum = y % 10 ;  $ ~~sumend *= 10 ;  $ ~~sumend += sum ;  $ ~~y /= 10 ;  $ ~}  $ ~sumend += x ;  $ ~cout << sumend << endl ;  $ ~return 0 ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~int a , b ;  $ ~cin >> a >> b ;  $ ~vector < int > x , y ;  $ ~while ( a ) {  $ ~~x . push_back ( a % 10 ) ;  $ ~~a /= 10 ;  $ ~}  $ ~while ( b ) {  $ ~~y . push_back ( b % 10 ) ;  $ ~~b /= 10 ;  $ ~}  $ ~reverse ( y . begin ( ) , y . end ( ) ) ;  $ ~while ( x . size ( ) < y . size ( ) ) x . push_back ( 0 ) ;  $ ~while ( y . size ( ) < x . size ( ) ) y . push_back ( 0 ) ;  $ ~for ( int i = 0 ; i < y . size ( ) ; i ++ ) x [ i ] += y [ i ] ;  $ ~long long ans = 0 ;  $ ~for ( int i = x . size ( ) - 1 ; i >= 0 ; i -- ) ans = ( long long ) 10 * ans + ( long long ) x [ i ] ;  $ ~cout << ans << endl ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~int a , b , i , j , x ;  $ ~cin >> a >> b ;  $ ~int sum = 0 ;  $ ~while ( b != 0 ) {  $ ~~sum = sum * 10 ;  $ ~~sum += b % 10 ;  $ ~~b /= 10 ;  $ ~}  $ ~sum += a ;  $ ~cout << sum << endl ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~string s , ss ;  $ ~cin >> s >> ss ;  $ ~reverse ( ss . begin ( ) , ss . end ( ) ) ;  $ ~int x , y ;  $ ~stringstream sss , ssss ;  $ ~sss << s ;  $ ~sss >> x ;  $ ~ssss << ss ;  $ ~ssss >> y ;  $ ~cout << x + y << endl ;  $ }
int main ( ) {  $ ~string b ;  $ ~long long a , c , d ;  $ ~cin >> a >> b ;  $ ~c = 0 ;  $ ~for ( int i = b . length ( ) - 1 ; i >= 0 ; i -- ) { c = c * 10 + b [ i ] - '0' ; }  $ ~d = a + c ;  $ ~cout << d << endl ;  $ }
int main ( ) {  $ ~int n ;  $ ~cin >> n ;  $ ~cout << 25 << endl ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~int n ;  $ ~cin >> n ;  $ ~cout << "25" << endl ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~long long int n ;  $ ~cin >> n ;  $ ~cout << 25 << endl ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~int a , b ;  $ ~cin >> a ;  $ ~cout << "25" << endl ;  $ }
int main ( ) {  $ ~long long n ;  $ ~cin >> n ;  $ ~cout << "25" << endl ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~float n , a , i ;  $ ~int s ;  $ ~cin >> n ;  $ ~s = 25 ;  $ ~if ( n == 1 ) { s = 5 ; }  $ ~cout << s << endl ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~long long int n ;  $ ~cin >> n ;  $ ~cout << "25" << endl ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~long long n ;  $ ~cin >> n ;  $ ~cout << "25" << endl ;  $ }
int main ( ) {  $ ~long long n ;  $ ~while ( cin >> n ) {  $ ~~if ( n == 1 ) {  $ ~~~cout << 5 << endl ;  $ ~~} else {  $ ~~~cout << 25 << endl ;  $ ~~}  $ ~}  $ }
int main ( ) {  $ ~int n ;  $ ~cin >> n ;  $ ~cout << "25" << endl ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~long long n ;  $ ~cin >> n ;  $ ~if ( n == 1 ) { cout << 5 << endl ; }  $ ~if ( n == 0 ) { cout << 1 << endl ; }  $ ~if ( n >= 2 ) { cout << 25 << endl ; }  $ }
long long Q_pow ( long long a , long long b ) {  $ ~long long ans = 1 ;  $ ~while ( b > 0 ) {  $ ~~if ( b % 2 == 1 ) {  $ ~~~a %= 100 ;  $ ~~~ans %= 100 ;  $ ~~~ans *= a ;  $ ~~}  $ ~~a %= 100 ;  $ ~~a *= a ;  $ ~~b /= 2 ;  $ ~}  $ ~return ans % 100 ;  $ }  $ int main ( ) {  $ ~long long n ;  $ ~while ( cin >> n ) { cout << Q_pow ( 5 , n ) << endl ; }  $ }
int main ( ) {  $ ~long long n ;  $ ~cin >> n ;  $ ~cout << 25 << endl ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~int in , ans = 25 ;  $ ~cin >> in ;  $ ~cout << ans << endl ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~long long n ;  $ ~cin >> n ;  $ ~cout << 25 << endl ;  $ ~return 0 ;  $ }
int i , j ;  $ int main ( ) {  $ ~long long n ;  $ ~cin >> n ;  $ ~cout << 25 << endl ;  $ }
int main ( ) {  $ ~long long n ;  $ ~while ( cin >> n ) { cout << "25" << endl ; }  $ }
int main ( ) {  $ ~cout << 25 << endl ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~unsigned long long n ;  $ ~cin >> n ;  $ ~cout << 25 << endl ;  $ }
int main ( ) {  $ ~int j ;  $ ~cin >> j ;  $ ~cout << "25" << endl ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~int n , b = 25 ;  $ ~cin >> n ;  $ ~cout << b << endl ;  $ ~return 0 ;  $ }
int n ;  $ int main ( ) {  $ ~cin >> n ;  $ ~cout << 25 << endl ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~cout << 25 << endl ;  $ }
int main ( ) {  $ ~cout << 25 << endl ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~long long n ;  $ ~while ( cin >> n ) { cout << "25" << endl ; }  $ }
int main ( ) {  $ ~long long int n ;  $ ~cin >> n ;  $ ~cout << 25 << endl ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~long long int n ;  $ ~cin >> n ;  $ ~cout << 25 << endl ;  $ ~return 0 ;  $ }
long long Q_pow ( long long a , long long b ) {  $ ~long long ans = 1 ;  $ ~while ( b > 0 ) {  $ ~~if ( b % 2 == 1 ) {  $ ~~~a %= 100 ;  $ ~~~ans %= 100 ;  $ ~~~ans *= a ;  $ ~~}  $ ~~a %= 100 ;  $ ~~a *= a ;  $ ~~b /= 2 ;  $ ~}  $ ~return ans % 100 ;  $ }  $ int main ( ) {  $ ~long long n ;  $ ~while ( cin >> n ) { cout << Q_pow ( 5 , n ) << endl ; }  $ }
int main ( ) {  $ ~int n ;  $ ~cin >> n ;  $ ~cout << "25" << endl ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~long long int n ;  $ ~cin >> n ;  $ ~cout << 25 << endl ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~long long n ;  $ ~while ( cin >> n ) { cout << 25 << endl ; }  $ ~return 0 ;  $ }
int main ( ) {  $ ~long long int n ;  $ ~cin >> n ;  $ ~cout << "25" << endl ;  $ }
int main ( ) {  $ ~int n ;  $ ~cin >> n ;  $ ~cout << 25 << endl ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~unsigned long long n ;  $ ~cin >> n ;  $ ~cout << "25" << endl ;  $ }
int n ;  $ int main ( ) {  $ ~cin >> n ;  $ ~cout << "25" << endl ;  $ ~return 0 ;  $ }
const long long mod = 100 ;  $ long long re ( long long a , long long n ) {  $ ~long long ans = 1 ;  $ ~while ( n > 0 ) {  $ ~~if ( n & 1 ) ans = ( ans * a ) % mod ;  $ ~~a = ( a * a ) % mod ;  $ ~~n >> = 1 ;  $ ~}  $ ~return ans ;  $ }  $ int main ( ) {  $ ~long long n ;  $ ~while ( cin >> n ) {  $ ~~long long result = re ( 5 , n ) ;  $ ~~cout << result << endl ;  $ ~}  $ ~return 0 ;  $ }
int main ( ) {  $ ~long long n ;  $ ~while ( cin >> n ) { cout << 25 << endl ; }  $ ~return 0 ;  $ }
int main ( ) {  $ ~long long int n ;  $ ~cin >> n ;  $ ~cout << "25" << endl ;  $ }
const int MOD = 100 ;  $ int main ( ) {  $ ~long long n ;  $ ~cin >> n ;  $ ~int v = 5 ;  $ ~int ans = 1 ;  $ ~for ( int i = 0 ; i <= 62 ; i ++ , v = ( v * v ) % MOD ) {  $ ~~if ( n & ( 1 << i ) ) { ans = ( ans * v ) % MOD ; }  $ ~}  $ ~cout << ans << endl ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~int n ;  $ ~cin >> n ;  $ ~cout << 25 << endl ;  $ }
int main ( ) {  $ ~long long n ;  $ ~while ( cin >> n ) { cout << 25 << endl ; }  $ ~return 0 ;  $ }
int main ( ) {  $ ~int n ;  $ ~cin >> n ;  $ ~cout << "25" << endl ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~long long i , j , n , c = 0 , ans = 25 ;  $ ~cin >> n ;  $ ~cout << ans << endl ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~long long n ;  $ ~cin >> n ;  $ ~cout << "25" << endl ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~int n ;  $ ~cin >> n ;  $ ~cout << "25" << endl ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~long long n ;  $ ~cin >> n ;  $ ~cout << "25" << endl ;  $ }
int main ( ) {  $ ~int n ;  $ ~cin >> n ;  $ ~cout << 25 << endl ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~int n ;  $ ~cin >> n ;  $ ~cout << 25 << endl ;  $ }
int main ( ) {  $ ~unsigned long long n ;  $ ~cin >> n ;  $ ~cout << "25" << endl ;  $ }
int main ( ) {  $ ~int n ;  $ ~cin >> n ;  $ ~cout << "25" << endl ;  $ }
int main ( ) {  $ ~char n [ 20 ] ;  $ ~while ( cin >> n ) { cout << 25 << endl ; }  $ ~return 0 ;  $ }
int main ( ) {  $ ~long long int n ;  $ ~cin >> n ;  $ ~cout << "25" << endl ;  $ }
int main ( ) {  $ ~int n ;  $ ~cin >> n ;  $ ~cout << 25 << endl ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~int n ;  $ ~cin >> n ;  $ ~cout << 25 << endl ;  $ ~return 0 ;  $ }
const double eps = 1e-6 ;  $ const int MAXN = 8000 ;  $ double a [ MAXN ] ;  $ int main ( ) {  $ ~int n ;  $ ~cin >> n ;  $ ~double x ;  $ ~for ( int i = 0 ; i < 2 * n ; i ++ ) cin >> a [ i ] ;  $ ~double sum = 0 ;  $ ~int num = 0 ;  $ ~for ( int i = 0 ; i < 2 * n ; i ++ ) {  $ ~~x = ( ( int ) a [ i ] + 1 ) * 1.0 - a [ i ] ;  $ ~~if ( fabs ( x - 1 ) <= eps )  $ ~~~num ++ ;  $ ~~else  $ ~~~sum += x ;  $ ~}  $ ~int m = 0 ;  $ ~if ( num < n ) m = n - num ;  $ ~double res = 0 x3f3f3f3f * 1.0 ;  $ ~for ( ; m <= min ( 2 * n - num , n ) ; m ++ ) res = min ( res , fabs ( sum - m ) ) ;  $ ~cout << fixed << setprecision ( 3 ) << res << endl ;  $ ~return 0 ;  $ }
double frac ( double x ) {  $ ~return x - ( long long ) x ;  $ }  $ int main ( ) {  $ ~int n ;  $ ~cin >> n ;  $ ~double diff = 0 ;  $ ~long long c = 0 ;  $ ~vector < double > a ;  $ ~for ( int i = 0 ; i < 2 * n ; i ++ ) {  $ ~~double x ;  $ ~~cin >> x ;  $ ~~a . push_back ( frac ( x ) ) ;  $ ~~if ( a [ i ] == 0 ) c ++ ;  $ ~~diff += a [ i ] ;  $ ~}  $ ~double ans = 1e9 ;  $ ~for ( int i = 0 ; i <= c ; i ++ ) {  $ ~~if ( i < c - n ) { continue ; }  $ ~~double p = abs ( diff - ( n - i ) * 1.0 ) ;  $ ~~ans = min ( p , ans ) ;  $ ~}  $ ~cout << setprecision ( 3 ) << fixed ;  $ ~cout << ans << '\n' ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~int n ;  $ ~cin >> n ;  $ ~if ( n == 1 )  $ ~~cout << 1 << endl ;  $ ~else {  $ ~~if ( n % 2 != 0 ) n -- ;  $ ~~cout << n / 2 + 1 << endl ;  $ ~}  $ ~return 0 ;  $ }
const int N = 1e5 + 10 , INF = 1e9 + 7 ;  $ int n ;  $ int main ( ) {  $ ~cin >> n ;  $ ~cout << ( n / 2 ) + 1 << '\n' ;  $ ~return 0 ;  $ }
const int maxa = 1000000 ;  $ int main ( ) {  $ ~int n ;  $ ~cin >> n ;  $ ~if ( n == 1 )  $ ~~cout << "1" << endl ;  $ ~else {  $ ~~cout << int ( n / 2 ) + 1 << endl ;  $ ~}  $ ~return 0 ;  $ }
int main ( ) {  $ ~int n ;  $ ~while ( cin >> n ) { cout << ( n ) / 2 + 1 << endl ; }  $ ~return 0 ;  $ }
int main ( ) {  $ ~int n ;  $ ~cin >> n ;  $ ~cout << n / 2 + 1 << '\n' ;  $ ~return 0 ;  $ }
const long long int MOD = 1000000007 ;  $ long long int N , M , K , H , W , L , R ;  $ int main ( ) {  $ ~cin >> N ;  $ ~cout << N / 2 + 1 << endl ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~int n ;  $ ~cin >> n ;  $ ~cout << n / 2 + 1 << endl ;  $ }
int main ( ) {  $ ~int n ;  $ ~cin >> n ;  $ ~cout << n / 2 + 1 << endl ;  $ ~return 0 ;  $ }
int a ;  $ int main ( ) {  $ ~cin >> a ;  $ ~cout << a / 2 + 1 << endl ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~long long int num ;  $ ~cin >> num ;  $ ~cout << ( num / 2 ) + 1 << endl ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~int n ;  $ ~cin >> n ;  $ ~cout << n / 2 + 1 << endl ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~int n ;  $ ~cin >> n ;  $ ~cout << n / 2 + 1 << endl ;  $ ~return 0 ;  $ }
const double pi = 2 * acos ( 0.0 ) ;  $ const int maxn = 2e2 + 10 ;  $ int main ( ) {  $ ~int n ;  $ ~cin >> n ;  $ ~n /= 2 ;  $ ~cout << n + 1 << endl ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~unsigned long int i , j , n , sum = 0 ;  $ ~cin >> n ;  $ ~sum = n / 2 + 1 ;  $ ~cout << sum << endl ;  $ }
int main ( ) {  $ ~int n ;  $ ~cin >> n ;  $ ~cout << n / 2 + 1 << endl ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~int n ;  $ ~cin >> n ;  $ ~cout << n / 2 + 1 << endl ;  $ ~return 0 ;  $ }
long long n , k , s , p ;  $ int main ( ) {  $ ~cin >> n ;  $ ~cout << n / 2 + 1 << '\n' ;  $ }
int main ( ) {  $ ~int n ;  $ ~cin >> n ;  $ ~cout << ( n / 2 ) + 1 << endl ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~int n , m ;  $ ~cin >> n ;  $ ~m = n / 2 ;  $ ~cout << m + 1 << endl ;  $ ~return 0 ;  $ }
int n ;  $ int main ( ) {  $ ~cin >> n ;  $ ~cout << n / 2 + 1 << endl ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~int n ;  $ ~cin >> n ;  $ ~if ( n == 1 )  $ ~~cout << 1 << endl ;  $ ~else  $ ~~cout << n / 2 + 1 << endl ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~int n ;  $ ~cin >> n ;  $ ~cout << n / 2 + 1 << endl ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~long long n , ans = 2 ;  $ ~cin >> n ;  $ ~if ( n == 1 ) {  $ ~~cout << 1 << endl ;  $ ~~return 0 ;  $ ~}  $ ~if ( n == 2 || n == 3 ) {  $ ~~cout << 2 << endl ;  $ ~~return 0 ;  $ ~}  $ ~cout << n / 2 + 1 << endl ;  $ ~return 0 ;  $ }
const double PI = 2.0 * acos ( 0.0 ) ;  $ const int MOD = 1e9 + 7 ;  $ const int oo = 2 * MOD + 1e3 ;  $ long long gcd ( long long a , long long b ) {  $ ~return ! b ? a : gcd ( b , a % b ) ;  $ }  $ int main ( ) {  $ ~int n ;  $ ~cin >> n ;  $ ~cout << n / 2 + 1 << '\n' ;  $ ~return 0 ;  $ }
const double PI = acos ( - 1.0 ) ;  $ const double eps = 1e-6 ;  $ const int INF = 0 x3f3f3f3f ;  $ const int maxn = 100 ;  $ int T , n , m ;  $ int main ( ) {  $ ~while ( cin >> n ) { cout << n / 2 + 1 << endl ; }  $ ~return 0 ;  $ }
int main ( ) {  $ ~long long int n ;  $ ~cin >> n ;  $ ~cout << ( n / 2 + 1 ) << endl ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~int n ;  $ ~cin >> n ;  $ ~cout << n / 2 + 1 << endl ;  $ ~return 0 ;  $ }
const int inf = 205 ;  $ int a [ inf ] ;  $ int b [ inf ] ;  $ int main ( ) {  $ ~int m , n , k , t , x ;  $ ~while ( cin >> n ) { cout << n / 2 + 1 << endl ; }  $ ~return 0 ;  $ }
long long n , m , a , b , x , ff = 2e7 + 1 , l , r , cnt , ans ;  $ vector < long long > v , f , res ;  $ string s1 , s2 ;  $ long long used [ 1001 ] ;  $ int main ( ) {  $ ~cin >> n ;  $ ~cout << n / 2 + 1 << endl ;  $ }
int main ( ) {  $ ~int n , k ;  $ ~cin >> n ;  $ ~k = n / 2 ;  $ ~k ++ ;  $ ~cout << k << endl ;  $ ~return 0 ;  $ }
long long n ;  $ int main ( ) {  $ ~cin >> n ;  $ ~cout << n / 2 + 1 << endl ;  $ }
int main ( ) {  $ ~int a ;  $ ~while ( cin >> a ) { cout << ( a / 2 ) + 1 << endl ; }  $ ~return 0 ;  $ }
int main ( ) {  $ ~long long n ;  $ ~cin >> n ;  $ ~cout << n / 2 + 1 << endl ;  $ }
int main ( ) {  $ ~int n , b ;  $ ~cin >> n ;  $ ~b = n / 2 + 1 ;  $ ~cout << b << endl ;  $ ~return 0 ;  $ }
int n ;  $ int main ( ) {  $ ~cin >> n ;  $ ~cout << n / 2 + 1 << endl ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~long long n , ans ;  $ ~while ( cin >> n ) {  $ ~~ans = n / 2 + 1 ;  $ ~~cout << ans << endl ;  $ ~}  $ }
int main ( ) {  $ ~long long n ;  $ ~cin >> n ;  $ ~cout << n / 2 + 1 << "\n" ;  $ }
int main ( ) {  $ ~int n ;  $ ~cin >> n ;  $ ~cout << n / 2 + 1 << endl ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~int n ;  $ ~cin >> n ;  $ ~cout << ( n / 2 ) + 1 << endl ;  $ }
long long n ;  $ int main ( ) {  $ ~while ( cin >> n ) {  $ ~~int m , ans ;  $ ~~m = n / 2 ;  $ ~~ans = m + 1 ;  $ ~~cout << ans << endl ;  $ ~}  $ ~return 0 ;  $ }
int main ( ) {  $ ~int n ;  $ ~while ( cin >> n ) { cout << n / 2 + 1 << endl ; }  $ ~return 0 ;  $ }
int N ;  $ int main ( ) {  $ ~cin >> N ;  $ ~cout << N / 2 + 1 << endl ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~int n ;  $ ~cin >> n ;  $ ~cout << ( n + 2 ) / 2 << endl ;  $ }
int main ( ) {  $ ~int num ;  $ ~cin >> num ;  $ ~cout << num / 2 + 1 << endl ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~int n , ans = 0 ;  $ ~while ( cin >> n ) { cout << n / 2 + 1 << endl ; }  $ }
int main ( ) {  $ ~int n ;  $ ~cin >> n ;  $ ~cout << n / 2 + 1 << '\n' ;  $ }
int dp [ 5000 ] [ 5 ] ;  $ int s [ 5000 ] , c [ 5000 ] ;  $ int main ( ) {  $ ~int n ;  $ ~cin >> n ;  $ ~cout << n / 2 + 1 << endl ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~long long n , ans = 2 ;  $ ~cin >> n ;  $ ~if ( n == 1 ) {  $ ~~cout << 1 << endl ;  $ ~~return 0 ;  $ ~}  $ ~if ( n == 2 || n == 3 ) {  $ ~~cout << 2 << endl ;  $ ~~return 0 ;  $ ~}  $ ~cout << n / 2 + 1 << endl ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~int n , count = 0 ;  $ ~cin >> n ;  $ ~cout << n / 2 + 1 << endl ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~int n ;  $ ~cin >> n ;  $ ~cout << n / 2 + 1 << endl ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~long long l , r , x , y , k ;  $ ~cin >> l >> r >> x >> y >> k ;  $ ~for ( long long i = x ; i <= y ; i ++ ) {  $ ~~if ( i * k >= l && i * k <= r ) {  $ ~~~cout << "YES" << endl ;  $ ~~~return 0 ;  $ ~~}  $ ~}  $ ~cout << "NO" << endl ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~long long z , x , c , v , b ;  $ ~cin >> z >> x >> c >> v >> b ;  $ ~bool cek = false ;  $ ~for ( long long q = c ; q <= v ; q ++ ) {  $ ~~long long asd = q * b ;  $ ~~if ( asd >= z && asd <= x ) cek = true ;  $ ~}  $ ~if ( cek == true )  $ ~~cout << "YES" << endl ;  $ ~else  $ ~~cout << "NO" << endl ;  $ }
int main ( ) {  $ ~long long int l , r , x , y , k , flag = 0 ;  $ ~cin >> l >> r >> x >> y >> k ;  $ ~for ( int j = x ; j <= y ; j ++ ) {  $ ~~if ( ( k * j ) >= l && ( k * j ) <= r ) { flag = 1 ; }  $ ~}  $ ~if ( flag ) {  $ ~~cout << "YES\n" ;  $ ~} else {  $ ~~cout << "NO\n" ;  $ ~}  $ ~return 0 ;  $ }
int main ( ) {  $ ~long long l , r , x , y , k , i , j , c = 0 ;  $ ~cin >> l >> r >> x >> y >> k ;  $ ~for ( j = x ; j <= y ; j ++ ) {  $ ~~if ( k * j <= r && k * j >= l ) {  $ ~~~cout << "YES" << endl ;  $ ~~~c = 1 ;  $ ~~~break ;  $ ~~}  $ ~}  $ ~if ( c == 0 ) { cout << "NO" << endl ; }  $ ~return 0 ;  $ }
int main ( ) {  $ ~long long int l , r , x , y , k ;  $ ~bool exist = false ;  $ ~cin >> l >> r >> x >> y >> k ;  $ ~for ( int i = x ; i <= y ; i ++ ) {  $ ~~if ( ( i * k ) <= r and ( i * k ) >= l ) {  $ ~~~exist = true ;  $ ~~~break ;  $ ~~}  $ ~}  $ ~if ( exist )  $ ~~cout << "YES\n" ;  $ ~else  $ ~~cout << "NO\n" ;  $ ~return 0 ;  $ }
long long l , r , x , y , k ;  $ int main ( ) {  $ ~cin >> l >> r >> x >> y >> k ;  $ ~long long i ;  $ ~int ok = 0 ;  $ ~for ( i = x ; i <= y ; i ++ )  $ ~~if ( l <= i * k && r >= i * k ) ok = 1 ;  $ ~if ( ok )  $ ~~cout << "YES" << endl ;  $ ~else  $ ~~cout << "NO" << endl ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~long long l , r , x , y , k ;  $ ~cin >> l >> r >> x >> y >> k ;  $ ~for ( int i = x ; i <= y ; i ++ ) {  $ ~~if ( k * i >= l && k * i <= r ) {  $ ~~~cout << "YES" << endl ;  $ ~~~goto end ;  $ ~~}  $ ~}  $ ~cout << "NO" << endl ;  $ end : ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~int l , r , x , y , k ;  $ ~cin >> l >> r >> x >> y >> k ;  $ ~for ( int i = l , j = x ; i <= r && j <= y ; ) {  $ ~~if ( i / j == k && i % j == 0 ) {  $ ~~~cout << "YES" << endl ;  $ ~~~return 0 ;  $ ~~} else if ( i / j >= k ) {  $ ~~~j ++ ;  $ ~~} else {  $ ~~~i ++ ;  $ ~~}  $ ~}  $ ~cout << "NO" << endl ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~double l , r , x , y ;  $ ~double k ;  $ ~bool flag = false ;  $ ~cin >> l >> r >> x >> y >> k ;  $ ~for ( double i = x ; i <= y ; i ++ ) {  $ ~~if ( k * i <= r && k * i >= l ) flag = true ;  $ ~}  $ ~if ( flag )  $ ~~cout << "YES" << endl ;  $ ~else  $ ~~cout << "NO" << endl ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~long long l , r , x , y , k ;  $ ~cin >> l >> r >> x >> y >> k ;  $ ~int flag = 0 ;  $ ~for ( int i = x ; i <= y ; i ++ ) {  $ ~~if ( i * k >= l && i * k <= r ) {  $ ~~~flag = 1 ;  $ ~~~break ;  $ ~~}  $ ~}  $ ~if ( flag )  $ ~~cout << "YES" << endl ;  $ ~else  $ ~~cout << "NO" << endl ;  $ }
int main ( ) {  $ ~long long int l , r , x , y , k ;  $ ~cin >> l >> r >> x >> y >> k ;  $ ~bool found = false ;  $ ~for ( long long int b = x ; b <= y ; ++ b ) {  $ ~~long long int a = k * b ;  $ ~~if ( a >= l && a <= r ) {  $ ~~~found = true ;  $ ~~~break ;  $ ~~}  $ ~}  $ ~if ( found ) {  $ ~~cout << "YES"  $ ~~~<< "\n" ;  $ ~} else {  $ ~~cout << "NO"  $ ~~~<< "\n" ;  $ ~}  $ ~return 0 ;  $ }
int main ( ) {  $ ~long long int l , r , x , y , k ;  $ ~cin >> l >> r >> x >> y >> k ;  $ ~for ( int i = x ; i <= y ; i ++ ) {  $ ~~if ( ( i * k ) >= l && ( i * k ) <= r ) {  $ ~~~cout << "YES" << endl ;  $ ~~~return 0 ;  $ ~~}  $ ~}  $ ~cout << "NO" << endl ;  $ ~return 0 ;  $ }
const int maxn = 15 ;  $ const int inf = 0 x3f3f3f3f ;  $ const double eps = 1e-10 ;  $ int main ( ) {  $ ~double l , r , x , y , k ;  $ ~cin >> l >> r >> x >> y >> k ;  $ ~if ( r < k * x || l > k * y )  $ ~~cout << "NO" << endl ;  $ ~else {  $ ~~for ( long long i = x ; i <= y ; i ++ ) {  $ ~~~if ( i * k >= l && i * k <= r ) {  $ ~~~~cout << "YES" << endl ;  $ ~~~~return 0 ;  $ ~~~}  $ ~~}  $ ~~cout << "NO" << endl ;  $ ~}  $ ~return 0 ;  $ }
const long long int maxn = 2e5 + 3 ;  $ int main ( ) {  $ ~long long int l , r , x , y , k , t = 0 ;  $ ~cin >> l >> r >> x >> y >> k ;  $ ~for ( long long int i = x ; i <= y ; i ++ ) {  $ ~~if ( i * k >= l && i * k <= r ) {  $ ~~~t = 1 ;  $ ~~~break ;  $ ~~}  $ ~}  $ ~if ( t )  $ ~~cout << "YES" << endl ;  $ ~else  $ ~~cout << "NO" << endl ;  $ }
int main ( ) {  $ ~long long l , r , x , y , k ;  $ ~cin >> l >> r >> x >> y >> k ;  $ ~if ( l > k * y || r < k * x ) {  $ ~~cout << "NO" << endl ;  $ ~~return 0 ;  $ ~}  $ ~for ( long long i = l ; i <= r ; i ++ ) {  $ ~~for ( long long j = x ; j <= y ; j ++ ) {  $ ~~~if ( i > k * y || i < k * x )  $ ~~~~break ;  $ ~~~else if ( i == k * j ) {  $ ~~~~cout << "YES" << endl ;  $ ~~~~return 0 ;  $ ~~~}  $ ~~}  $ ~}  $ ~cout << "NO" << endl ;  $ ~return 0 ;  $ }
int marked [ 101 ] ;  $ int main ( ) {  $ ~long long l , r , x , y , k ;  $ ~cin >> l >> r >> x >> y >> k ;  $ ~for ( long long i = x ; i <= y ; i ++ ) {  $ ~~if ( i * k >= l && i * k <= r ) {  $ ~~~cout << "YES" << endl ;  $ ~~~goto pause ;  $ ~~}  $ ~}  $ ~cout << "NO" << endl ;  $ pause :  $ ~int pause ;  $ ~cin >> pause ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~float a , s , d , f , g ;  $ ~int i , flag = 0 ;  $ ~cin >> a >> s >> d >> f >> g ;  $ ~for ( i = d ; i <= f ; i ++ )  $ ~~if ( i * g <= s && g * i >= a ) {  $ ~~~flag = 1 ;  $ ~~~break ;  $ ~~}  $ ~if ( flag )  $ ~~cout << "YES" << endl ;  $ ~else  $ ~~cout << "NO" << endl ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~long long int l , r , x , y , k ;  $ ~cin >> l >> r >> x >> y >> k ;  $ ~for ( long long i = x ; i <= y ; i ++ ) {  $ ~~if ( i * k >= l && i * k <= r ) {  $ ~~~cout << "YES" << endl ;  $ ~~~return 0 ;  $ ~~}  $ ~}  $ ~cout << "NO" << endl ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~long long l , r , x , y , k ;  $ ~cin >> l >> r >> x >> y >> k ;  $ ~while ( l <= r && x <= y ) {  $ ~~if ( l / x < k )  $ ~~~l ++ ;  $ ~~else if ( l / float ( x ) == k ) {  $ ~~~cout << "YES" << endl ;  $ ~~~return 0 ;  $ ~~} else  $ ~~~x ++ ;  $ ~}  $ ~cout << "NO" << endl ;  $ ~return 0 ;  $ }
const int inf = 0 x3f3f3f3f ;  $ long int l , r , x , y , k ;  $ bool find ( long int start , long int end ) {  $ ~long int mid = ( start + end ) / 2 ;  $ ~if ( start + 1 == end ) return false ;  $ ~if ( mid * k > r ) {  $ ~~if ( find ( start , mid ) )  $ ~~~return true ;  $ ~~else  $ ~~~return false ;  $ ~} else if ( mid * k < l ) {  $ ~~if ( find ( mid , end ) )  $ ~~~return true ;  $ ~~else  $ ~~~return false ;  $ ~} else  $ ~~return true ;  $ }  $ int main ( ) {  $ ~long long int a , b , c , d , e ;  $ ~cin >> a >> b >> c >> d >> e ;  $ ~for ( int i = c ; i <= d ; i ++ ) {  $ ~~long long num = i * e ;  $ ~~if ( num >= a && num <= b ) {  $ ~~~cout << "YES" << endl ;  $ ~~~return 0 ;  $ ~~} else if ( num > b ) {  $ ~~~break ;  $ ~~}  $ ~}  $ ~cout << "NO" << endl ;  $ ~return 0 ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~long long l , r , x , y , k ;  $ ~cin >> l >> r >> x >> y >> k ;  $ ~for ( int b = x ; b <= y ; b ++ ) {  $ ~~long long a = k * b ;  $ ~~if ( a >= l && a <= r ) {  $ ~~~cout << "YES" << endl ;  $ ~~~return 0 ;  $ ~~}  $ ~}  $ ~cout << "NO" << endl ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~int l , r , x , y ;  $ ~float k ;  $ ~int flag = 0 ;  $ ~cin >> l >> r >> x >> y >> k ;  $ ~for ( int i = x ; i <= y ; i ++ ) {  $ ~~if ( l <= k * i && k * i <= r ) { flag = 1 ; }  $ ~}  $ ~if ( flag )  $ ~~cout << "YES\n" ;  $ ~else  $ ~~cout << "NO\n" ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~int n , k ;  $ ~while ( cin >> n >> k ) {  $ ~~int a = n * 2 / k + ( n * 2 % k == 0 ? 0 : 1 ) ;  $ ~~int b = n * 5 / k + ( n * 5 % k == 0 ? 0 : 1 ) ;  $ ~~int c = n * 8 / k + ( n * 8 % k == 0 ? 0 : 1 ) ;  $ ~~cout << a + b + c << endl ;  $ ~}  $ ~return 0 ;  $ }
int main ( ) {  $ ~int n , k ;  $ ~cin >> n >> k ;  $ ~int red = n * 2 / k ;  $ ~int green = n * 5 / k ;  $ ~int blue = n * 8 / k ;  $ ~if ( red < n * 2.0 / k ) { red = red + 1 ; }  $ ~if ( green < n * 5.0 / k ) { green = green + 1 ; }  $ ~if ( blue < n * 8.0 / k ) { blue += 1 ; }  $ ~cout << red + green + blue << endl ;  $ ~return 0 ;  $ }
long long n , k ;  $ int main ( ) {  $ ~cin >> n >> k ;  $ ~long long ans = 0 LL ;  $ ~ans = ( n * 2 LL ) / k + ( n * 2 LL % k != 0 ) ;  $ ~ans += ( n * 5 LL ) / k + ( n * 5 LL % k != 0 ) ;  $ ~ans += ( n * 8 LL ) / k + ( n * 8 LL % k != 0 ) ;  $ ~cout << ans << '\n' ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~int n , k ;  $ ~cin >> n >> k ;  $ ~int sum = 0 ;  $ ~if ( n * 2 % k == 0 ) {  $ ~~sum += n * 2 / k ;  $ ~} else {  $ ~~sum += n * 2 / k + 1 ;  $ ~}  $ ~if ( n * 5 % k == 0 ) {  $ ~~sum += n * 5 / k ;  $ ~} else {  $ ~~sum += n * 5 / k + 1 ;  $ ~}  $ ~if ( n * 8 % k == 0 ) {  $ ~~sum += n * 8 / k ;  $ ~} else {  $ ~~sum += n * 8 / k + 1 ;  $ ~}  $ ~cout << sum << endl ;  $ }
int main ( ) {  $ ~long long n , k , red , green , blue , notebooks ;  $ ~cin >> n >> k ;  $ ~red = 2 * n ;  $ ~green = 5 * n ;  $ ~blue = 8 * n ;  $ ~notebooks = ( red / k ) + ( green / k ) + ( blue / k ) ;  $ ~if ( red % k != 0 ) { notebooks += 1 ; }  $ ~if ( green % k != 0 ) { notebooks += 1 ; }  $ ~if ( blue % k != 0 ) { notebooks += 1 ; }  $ ~cout << notebooks << endl ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~double p , q , lal , sobuj , nil ;  $ ~cin >> p >> q ;  $ ~lal = ceil ( ( p * 2 ) / q ) ;  $ ~sobuj = ceil ( ( p * 5 ) / q ) ;  $ ~nil = ceil ( ( p * 8 ) / q ) ;  $ ~int mot = lal + sobuj + nil ;  $ ~cout << mot << endl ;  $ }
int main ( ) {  $ ~int n , k ;  $ ~int res , cur ;  $ ~cin >> n >> k ;  $ ~res = 0 ;  $ ~cur = n * 2 ;  $ ~res += ( cur + k - 1 ) / k ;  $ ~cur = n * 5 ;  $ ~res += ( cur + k - 1 ) / k ;  $ ~cur = n * 8 ;  $ ~res += ( cur + k - 1 ) / k ;  $ ~cout << res << endl ;  $ }
int divUp ( int a , int b ) {  $ ~return a / b + ( a % b > 0 ? 1 : 0 ) ;  $ }  $ int main ( ) {  $ ~int n , k ;  $ ~cin >> n >> k ;  $ ~cout << ( divUp ( 2 * n , k ) + divUp ( 5 * n , k ) + divUp ( 8 * n , k ) ) << endl ;  $ }
int main ( ) {  $ ~double n , k ;  $ ~cin >> n >> k ;  $ ~long long red = n * 2 , green = n * 5 , blue = n * 8 ;  $ ~cout << ( long long ) ( ceil ( red / k ) + ceil ( green / k ) + ceil ( blue / k ) ) << endl ;  $ }
const long long inf = 1e16 ;  $ const long long MAXN = 1e6 ;  $ const double pi = acos ( - 1 ) ;  $ long long n , k , ans ;  $ int main ( ) {  $ ~cin >> n >> k ;  $ ~k -- ;  $ ~ans += ( n * 2 + k ) / ( k + 1 ) ;  $ ~ans += ( n * 5 + k ) / ( k + 1 ) ;  $ ~ans += ( n * 8 + k ) / ( k + 1 ) ;  $ ~cout << ans << endl ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~long long sum = 0 , a , b ;  $ ~cin >> a >> b ;  $ ~if ( ( a * 2 ) % b == 0 )  $ ~~sum += ( a * 2 ) / b ;  $ ~else  $ ~~sum += ( ( a * 2 ) / b ) + 1 ;  $ ~if ( ( a * 5 ) % b == 0 )  $ ~~sum += ( a * 5 ) / b ;  $ ~else  $ ~~sum += ( ( a * 5 ) / b ) + 1 ;  $ ~if ( ( a * 8 ) % b == 0 )  $ ~~sum += ( a * 8 ) / b ;  $ ~else  $ ~~sum += ( ( a * 8 ) / b ) + 1 ;  $ ~cout << sum << endl ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~long long n , k ;  $ ~while ( cin >> n >> k ) {  $ ~~long long sum1 , sum2 , sum3 ;  $ ~~sum1 = 2 * n / k ;  $ ~~if ( 2 * n % k != 0 ) { sum1 ++ ; }  $ ~~sum2 = 5 * n / k ;  $ ~~if ( 5 * n % k != 0 ) { sum2 ++ ; }  $ ~~sum3 = 8 * n / k ;  $ ~~if ( 8 * n % k != 0 ) { sum3 ++ ; }  $ ~~cout << sum1 + sum2 + sum3 << endl ;  $ ~}  $ ~return 0 ;  $ }
long n , k , ans ;  $ long sheets ( long a , long b ) {  $ ~long d , m ;  $ ~d = a / b ;  $ ~m = a % b ;  $ ~if ( m ) return ( d + 1 ) ;  $ ~return d ;  $ }  $ int main ( ) {  $ ~cin >> n >> k ;  $ ~ans += sheets ( 2 * n , k ) ;  $ ~ans += sheets ( 5 * n , k ) ;  $ ~ans += sheets ( 8 * n , k ) ;  $ ~cout << ans << endl ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~int n , k , a , b , c , x , y , z , s ;  $ ~cin >> n >> k ;  $ ~a = ( n * 2 ) ;  $ ~b = ( n * 5 ) ;  $ ~c = ( n * 8 ) ;  $ ~if ( a < k ) {  $ ~~x = 1 ;  $ ~} else {  $ ~~if ( a % k == 0 ) {  $ ~~~x = ( a / k ) ;  $ ~~} else {  $ ~~~x = ( a / k ) + 1 ;  $ ~~}  $ ~}  $ ~if ( b < k ) {  $ ~~y = 1 ;  $ ~} else {  $ ~~if ( b % k == 0 ) {  $ ~~~y = ( b / k ) ;  $ ~~} else {  $ ~~~y = ( b / k ) + 1 ;  $ ~~}  $ ~}  $ ~if ( c < k ) {  $ ~~z = 1 ;  $ ~} else {  $ ~~if ( c % k == 0 ) {  $ ~~~z = ( c / k ) ;  $ ~~} else {  $ ~~~z = ( c / k ) + 1 ;  $ ~~}  $ ~}  $ ~s = x + y + z ;  $ ~cout << s << endl ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~int n , k , r ;  $ ~cin >> n >> k ;  $ ~r = ( int ) ( ( 2 * n ) / k ) + ( int ) ( ( 5 * n ) / k ) + ( int ) ( ( 8 * n ) / k ) ;  $ ~if ( ( 2 * n ) % k != 0 ) r ++ ;  $ ~if ( ( 5 * n ) % k != 0 ) r ++ ;  $ ~if ( ( 8 * n ) % k != 0 ) r ++ ;  $ ~cout << r << endl ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~int s = 0 , n , k ;  $ ~cin >> n >> k ;  $ ~if ( ( 8 * n ) % k == 0 ) {  $ ~~s = s + 8 * n / k ;  $ ~} else {  $ ~~s = s + 8 * n / k + 1 ;  $ ~}  $ ~if ( ( 2 * n ) % k == 0 ) {  $ ~~s = s + 2 * n / k ;  $ ~} else {  $ ~~s = s + 2 * n / k + 1 ;  $ ~}  $ ~if ( ( 5 * n ) % k == 0 ) {  $ ~~s = s + 5 * n / k ;  $ ~} else {  $ ~~s = s + 5 * n / k + 1 ;  $ ~}  $ ~cout << s << endl ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~int n , k ;  $ ~int ans , asn ;  $ ~cin >> n >> k ;  $ ~ans = 0 ;  $ ~asn = n * 2 ;  $ ~ans += ( asn + k - 1 ) / k ;  $ ~asn = n * 5 ;  $ ~ans += ( asn + k - 1 ) / k ;  $ ~asn = n * 8 ;  $ ~ans += ( asn + k - 1 ) / k ;  $ ~cout << ans << endl ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~int n , k , red , green , blue ;  $ ~cin >> n >> k ;  $ ~red = 2 * n ;  $ ~green = 5 * n ;  $ ~blue = 8 * n ;  $ ~if ( red % k == 0 )  $ ~~red = red / k ;  $ ~else  $ ~~red = red / k + 1 ;  $ ~if ( green % k == 0 )  $ ~~green = green / k ;  $ ~else  $ ~~green = green / k + 1 ;  $ ~if ( blue % k == 0 )  $ ~~blue = blue / k ;  $ ~else  $ ~~blue = blue / k + 1 ;  $ ~cout << red + green + blue << endl ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~int n , k , t , l , m , g ;  $ ~cin >> n >> k ;  $ ~if ( n * 2 % k == 0 ) {  $ ~~t = n * 2 / k ;  $ ~} else {  $ ~~t = n * 2 / k + 1 ;  $ ~}  $ ~if ( n * 5 % k == 0 ) {  $ ~~l = n * 5 / k ;  $ ~} else {  $ ~~l = n * 5 / k + 1 ;  $ ~}  $ ~if ( n * 8 % k == 0 ) {  $ ~~m = n * 8 / k ;  $ ~} else {  $ ~~m = n * 8 / k + 1 ;  $ ~}  $ ~g = m + l + t ;  $ ~cout << g << endl ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~int n , a ;  $ ~int ans , cnt ;  $ ~cin >> n >> a ;  $ ~ans = 0 ;  $ ~cnt = n * 2 ;  $ ~ans += ( cnt + a - 1 ) / a ;  $ ~cnt = n * 5 ;  $ ~ans += ( cnt + a - 1 ) / a ;  $ ~cnt = n * 8 ;  $ ~ans += ( cnt + a - 1 ) / a ;  $ ~cout << ans << endl ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~int n , k ;  $ ~cin >> n >> k ;  $ ~int red = 0 , green = 0 , blue = 0 ;  $ ~int bookred = 0 , bookgreen = 0 , bookblue = 0 ;  $ ~red = n * 2 ;  $ ~green = n * 5 ;  $ ~blue = n * 8 ;  $ ~if ( red % k == 0 ) {  $ ~~bookred = red / k ;  $ ~} else {  $ ~~bookred = red / k + 1 ;  $ ~}  $ ~if ( blue % k == 0 ) {  $ ~~bookblue = blue / k ;  $ ~} else {  $ ~~bookblue = blue / k + 1 ;  $ ~}  $ ~if ( green % k == 0 ) {  $ ~~bookgreen = green / k ;  $ ~} else {  $ ~~bookgreen = green / k + 1 ;  $ ~}  $ ~int total = 0 ;  $ ~total = bookred + bookblue + bookgreen ;  $ ~cout << total << endl ;  $ ~return 0 ;  $ }
int Ceil ( int n , int k ) {  $ ~return ( n + k - 1 ) / k ;  $ }  $ int main ( ) {  $ ~int n , k ;  $ ~cin >> n >> k ;  $ ~int ans = Ceil ( 2 * n , k ) + Ceil ( 5 * n , k ) + Ceil ( 8 * n , k ) ;  $ ~cout << ans << '\n' ;  $ ~return 0 ;  $ }
int a [ 1010 ] ;  $ int main ( ) {  $ ~int n ;  $ ~cin >> n ;  $ ~for ( int i = 0 ; i < n ; i ++ ) { cin >> a [ i ] ; }  $ ~sort ( a , a + n ) ;  $ ~int i ;  $ ~for ( i = n - 1 ; i >= 0 ; i -- ) {  $ ~~int b = sqrt ( a [ i ] ) ;  $ ~~if ( b * b == a [ i ] )  $ ~~~continue ;  $ ~~else  $ ~~~break ;  $ ~}  $ ~cout << a [ i ] << endl ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~int n , i , x , maxi = - 1000000007 , tem , flag ;  $ ~double p ;  $ ~cin >> n ;  $ ~for ( i = 1 ; i <= n ; i ++ ) {  $ ~~flag = 0 ;  $ ~~cin >> x ;  $ ~~if ( x < 0 ) {  $ ~~~if ( x > maxi ) maxi = x ;  $ ~~~flag = 1 ;  $ ~~}  $ ~~if ( flag == 1 ) x = - x ;  $ ~~p = sqrt ( x * 1.00 ) ;  $ ~~tem = p ;  $ ~~if ( tem != p && flag != 1 ) {  $ ~~~if ( x > maxi ) maxi = x ;  $ ~~}  $ ~}  $ ~cout << maxi << endl ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~int n , a ;  $ ~cin >> n ;  $ ~priority_queue < int > t ;  $ ~for ( int i = 0 ; i < n ; i ++ ) {  $ ~~cin >> a ;  $ ~~int l = sqrt ( a ) ;  $ ~~if ( ( l * l ) != a ) { t . push ( a ) ; }  $ ~}  $ ~cout << t . top ( ) << endl ;  $ }
const int INF = 0 x3f3f3f3f ;  $ int main ( ) {  $ ~int i , j , k ;  $ ~int n , m , t ;  $ ~int a [ 1005 ] ;  $ ~cin >> n ;  $ ~for ( i = 0 ; i < n ; i ++ ) cin >> a [ i ] ;  $ ~sort ( a , a + n ) ;  $ ~int x = 0 ;  $ ~for ( i = n - 1 ; i >= 0 ; i -- )  $ ~~if ( a [ i ] < 0 ) break ;  $ ~if ( i < 0 )  $ ~~x = 0 ;  $ ~else  $ ~~x = i ;  $ ~for ( i = n - 1 ; i > x ; i -- ) {  $ ~~if ( sqrt ( a [ i ] ) - floor ( sqrt ( a [ i ] ) ) > 0.000001 ) {  $ ~~~cout << a [ i ] << endl ;  $ ~~~break ;  $ ~~}  $ ~}  $ ~if ( i <= x ) { cout << a [ x ] << endl ; }  $ }
int main ( ) {  $ ~int n , i , j , x , ans ;  $ ~vector < int > vec ;  $ ~while ( cin >> n ) {  $ ~~for ( i = 1 ; i <= n ; i ++ ) {  $ ~~~cin >> x ;  $ ~~~vec . push_back ( x ) ;  $ ~~}  $ ~~sort ( vec . begin ( ) , vec . end ( ) ) ;  $ ~~int flag = 0 ;  $ ~~for ( i = n - 1 ; i >= 0 ; i -- ) {  $ ~~~ans = sqrt ( vec [ i ] ) ;  $ ~~~ans *= ans ;  $ ~~~if ( ans != vec [ i ] ) {  $ ~~~~flag = i ;  $ ~~~~break ;  $ ~~~}  $ ~~}  $ ~~cout << vec [ flag ] << endl ;  $ ~}  $ ~return 0 ;  $ }
const int maxn = 1010 ;  $ int n ;  $ int a [ maxn ] ;  $ int main ( ) {  $ ~cin >> n ;  $ ~for ( int i = 0 ; i < n ; ++ i ) { cin >> a [ i ] ; }  $ ~sort ( a , a + n ) ;  $ ~for ( int i = n - 1 ; i >= 0 ; -- i ) {  $ ~~if ( ( ( int ) ( sqrt ( a [ i ] ) ) ) * ( ( int ) ( sqrt ( a [ i ] ) ) ) != a [ i ] ) {  $ ~~~cout << a [ i ] << endl ;  $ ~~~break ;  $ ~~}  $ ~}  $ ~return 0 ;  $ }
int main ( ) {  $ ~int n , i , x , ans = - 1000001 ;  $ ~cin >> n ;  $ ~for ( i = 0 ; i < n ; i ++ ) {  $ ~~cin >> x ;  $ ~~if ( ( int ) pow ( ( int ) sqrt ( x ) , 2 ) != x && x > ans ) ans = x ;  $ ~}  $ ~cout << ans << endl ;  $ ~return 0 ;  $ }
const int maxn = 1e3 + 5 ;  $ int arr [ maxn ] ;  $ int main ( ) {  $ ~int n ;  $ ~cin >> n ;  $ ~for ( int i = 0 ; i < n ; i ++ ) cin >> arr [ i ] ;  $ ~sort ( arr , arr + n ) ;  $ ~for ( int i = n - 1 ; i >= 0 ; i -- ) {  $ ~~if ( arr [ i ] < 0 ) {  $ ~~~cout << arr [ i ] << endl ;  $ ~~~return 0 ;  $ ~~}  $ ~~int temp = arr [ i ] ;  $ ~~if ( floor ( sqrt ( temp ) ) == sqrt ( temp ) )  $ ~~~continue ;  $ ~~else {  $ ~~~cout << arr [ i ] << endl ;  $ ~~~return 0 ;  $ ~~}  $ ~}  $ ~return 0 ;  $ }
int t ;  $ int a [ 1005 ] ;  $ bool cmp ( int a , int b ) {  $ ~return a > b ;  $ }  $ int main ( ) {  $ ~cin >> t ;  $ ~for ( int i = 1 ; i <= t ; i ++ ) { cin >> a [ i ] ; }  $ ~sort ( a + 1 , a + 1 + t , cmp ) ;  $ ~for ( int i = 1 ; i <= t ; i ++ ) {  $ ~~if ( ( int ) sqrt ( a [ i ] ) * ( int ) sqrt ( a [ i ] ) != a [ i ] ) {  $ ~~~cout << a [ i ] << endl ;  $ ~~~break ;  $ ~~}  $ ~}  $ ~return 0 ;  $ }
bool cmp ( const int & A , const int & B ) {  $ ~return A > B ;  $ }  $ int num [ 1005 ] ;  $ int main ( ) {  $ ~int n ;  $ ~cin >> n ;  $ ~for ( int i = 0 ; i < n ; i ++ ) { cin >> num [ i ] ; }  $ ~sort ( num , num + n , cmp ) ;  $ ~int i = 0 ;  $ ~for ( i = 0 ; i < n ; i ++ ) {  $ ~~int p = sqrt ( num [ i ] ) ;  $ ~~if ( p * p != num [ i ] ) break ;  $ ~}  $ ~cout << num [ i ] << endl ;  $ ~return 0 ;  $ }
int t ;  $ int a [ 1005 ] ;  $ bool cmp ( int a , int b ) {  $ ~return a > b ;  $ }  $ int main ( ) {  $ ~cin >> t ;  $ ~for ( int i = 1 ; i <= t ; i ++ ) { cin >> a [ i ] ; }  $ ~sort ( a + 1 , a + 1 + t , cmp ) ;  $ ~for ( int i = 1 ; i <= t ; i ++ ) {  $ ~~if ( ( int ) sqrt ( a [ i ] ) * ( int ) sqrt ( a [ i ] ) != a [ i ] ) {  $ ~~~cout << a [ i ] << endl ;  $ ~~~break ;  $ ~~}  $ ~}  $ ~return 0 ;  $ }
int nums [ 1001 ] ;  $ bool compare_int ( int & lhs , int & rhs ) {  $ ~return lhs > rhs ;  $ }  $ int main ( ) {  $ ~int n ;  $ ~cin >> n ;  $ ~int max_num = 0 ;  $ ~for ( int currnum = 0 ; currnum < n ; ++ currnum ) { cin >> nums [ currnum ] ; }  $ ~sort ( nums , nums + n , compare_int ) ;  $ ~int non_perfect = 0 ;  $ ~for ( int currnum = 0 ; currnum < n ; ++ currnum ) {  $ ~~int sqrtroot = sqrt ( nums [ currnum ] ) ;  $ ~~if ( sqrtroot * sqrtroot != nums [ currnum ] ) {  $ ~~~non_perfect = nums [ currnum ] ;  $ ~~~break ;  $ ~~}  $ ~}  $ ~cout << non_perfect << endl ;  $ ~return 0 ;  $ }
int check ( int x ) {  $ ~if ( x < 0 ) return 1 ;  $ ~int t = sqrt ( x ) ;  $ ~if ( t * t == x )  $ ~~return 0 ;  $ ~else  $ ~~return 1 ;  $ }  $ int main ( ) {  $ ~int n ;  $ ~cin >> n ;  $ ~int a [ 1005 ] ;  $ ~for ( int i = 0 ; i < n ; i ++ ) cin >> a [ i ] ;  $ ~sort ( a , a + n ) ;  $ ~for ( int i = n - 1 ; i >= 0 ; i -- ) {  $ ~~if ( check ( a [ i ] ) ) {  $ ~~~cout << a [ i ] << endl ;  $ ~~~break ;  $ ~~}  $ ~}  $ }
int main ( ) {  $ ~int n ;  $ ~cin >> n ;  $ ~int a [ 1005 ] ;  $ ~for ( int i = 0 ; i < n ; i ++ ) { cin >> a [ i ] ; }  $ ~sort ( a , a + n ) ;  $ ~for ( int i = n - 1 ; i >= 0 ; i -- ) {  $ ~~int t = sqrt ( a [ i ] ) ;  $ ~~if ( t * t != a [ i ] ) {  $ ~~~cout << a [ i ] << endl ;  $ ~~~return 0 ;  $ ~~}  $ ~}  $ }
int a [ 2000005 ] ;  $ int main ( ) {  $ ~int n , tmp ;  $ ~cin >> n ;  $ ~for ( int i = 0 ; i < n ; i ++ ) {  $ ~~cin >> tmp ;  $ ~~a [ tmp + 1000000 ] ++ ;  $ ~}  $ ~int ans = 0 ;  $ ~for ( int i = 0 ; i <= 1000 ; i ++ ) { a [ i * i + 1000000 ] = 0 ; }  $ ~for ( int i = 0 ; i < 2000005 ; i ++ )  $ ~~if ( a [ i ] ) { ans = i - 1000000 ; }  $ ~cout << ans << endl ;  $ ~return 0 ;  $ }
int sq [ 1001 ] = {  $ ~0 ,  $ } ;  $ int check ( int x ) {  $ ~if ( ! binary_search ( sq , sq + 1001 , x ) )  $ ~~return 1 ;  $ ~else  $ ~~return 0 ;  $ }  $ int main ( ) {  $ ~int n ;  $ ~cin >> n ;  $ ~int a [ n ] ;  $ ~for ( int i = 0 ; i <= 1000 ; i ++ ) { sq [ i ] = i * i ; }  $ ~for ( int i = 0 ; i < n ; i ++ ) cin >> a [ i ] ;  $ ~int m = INT_MIN ;  $ ~for ( int i = 0 ; i < n ; i ++ ) {  $ ~~if ( a [ i ] > m && check ( a [ i ] ) ) { m = a [ i ] ; }  $ ~}  $ ~cout << m << endl ;  $ }
int main ( ) {  $ ~int a [ 10000 ] ;  $ ~for ( int i = 0 ; i < 1001 ; i ++ ) { a [ i ] = i * i ; }  $ ~int b , c [ 10000 ] ;  $ ~cin >> b ;  $ ~for ( int i = 0 ; i < b ; i ++ ) { cin >> c [ i ] ; }  $ ~sort ( c , c + b ) ;  $ ~for ( int i = b - 1 ; i > - 1 ; i -- ) {  $ ~~for ( int j = 0 ; j < 1001 ; j ++ ) {  $ ~~~if ( c [ i ] == a [ j ] ) { goto momo ; }  $ ~~}  $ ~~cout << c [ i ] << endl ;  $ ~~return 0 ;  $ ~momo : ;  $ ~}  $ }
int a [ 1005 ] ;  $ map < int , int > mp ;  $ const double eps = 1e-8 ;  $ void init ( ) {  $ ~for ( int i = 0 ; i <= 1000 ; i ++ ) { mp [ i * i ] = 1 ; }  $ }  $ int main ( ) {  $ ~init ( ) ;  $ ~int n ;  $ ~cin >> n ;  $ ~for ( int i = 0 ; i < n ; i ++ ) { cin >> a [ i ] ; }  $ ~sort ( a , a + n ) ;  $ ~for ( int i = n - 1 ; i >= 0 ; i -- ) {  $ ~~if ( ! mp [ a [ i ] ] ) {  $ ~~~cout << a [ i ] << endl ;  $ ~~~return 0 ;  $ ~~}  $ ~}  $ }
int main ( ) {  $ ~int n ;  $ ~cin >> n ;  $ ~vector < int > arr ;  $ ~for ( int i = 0 ; i < n ; ++ i ) {  $ ~~int temp ;  $ ~~cin >> temp ;  $ ~~arr . push_back ( temp ) ;  $ ~}  $ ~sort ( arr . begin ( ) , arr . end ( ) ) ;  $ ~for ( int i = n - 1 ; i >= 0 ; -- i ) {  $ ~~int s = sqrt ( arr [ i ] ) ;  $ ~~if ( s * s != arr [ i ] ) {  $ ~~~cout << arr [ i ] << endl ;  $ ~~~break ;  $ ~~}  $ ~}  $ }
int main ( ) {  $ ~int A , B , C , D ;  $ ~cin >> A >> B >> C >> D ;  $ ~if ( ( A * 2 + 3 > D && D + 1 >= A ) || ( B * 2 + 3 > C && C + 1 >= B ) ) {  $ ~~cout << "YES" << endl ;  $ ~} else {  $ ~~cout << "NO" << endl ;  $ ~}  $ ~return 0 ;  $ }
int main ( ) {  $ ~int A , B , C , D ;  $ ~cin >> A >> B >> C >> D ;  $ ~if ( ( A * 2 + 3 > D && D + 1 >= A ) || ( B * 2 + 3 > C && C + 1 >= B ) ) {  $ ~~cout << "YES" << endl ;  $ ~} else {  $ ~~cout << "NO" << endl ;  $ ~}  $ ~return 0 ;  $ }
bool solve ( int a , int b ) {  $ ~return a <= b + 1 && b <= ( a + 1 ) * 2 ;  $ }  $ int main ( ) {  $ ~int la , ra , lb , rb ;  $ ~cin >> la >> ra >> lb >> rb ;  $ ~if ( solve ( la , rb ) || solve ( ra , lb ) )  $ ~~cout << "YES\n" ;  $ ~else  $ ~~cout << "NO\n" ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~int gl , gr , bl , br ;  $ ~cin >> gl >> gr >> bl >> br ;  $ ~if ( 2 * ( gl + 1 ) >= br && gl - 1 <= br || 2 * ( gr + 1 ) >= bl && gr <= bl )  $ ~~cout << "YES" << endl ;  $ ~else  $ ~~cout << "NO" << endl ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~int a , s , z , x ;  $ ~cin >> a >> s >> z >> x ;  $ ~bool cek = false ;  $ ~if ( ( x >= ( a - 1 ) && x <= ( a * 2 ) + 2 ) || ( z >= ( s - 1 ) && z <= ( s * 2 ) + 2 ) ) cek = true ;  $ ~if ( cek )  $ ~~cout << "YES" << endl ;  $ ~else  $ ~~cout << "NO" << endl ;  $ }
int l , r , ml , mr ;  $ bool judge ( int g , int b ) {  $ ~if ( b < g - 1 )  $ ~~return false ;  $ ~else if ( b > 2 * g + 2 )  $ ~~return false ;  $ ~else  $ ~~return true ;  $ }  $ int main ( ) {  $ ~cin >> l >> r >> ml >> mr ;  $ ~if ( judge ( l , mr ) || judge ( r , ml ) )  $ ~~cout << "YES" << endl ;  $ ~else  $ ~~cout << "NO" << endl ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~long long a , b , c , d ;  $ ~while ( cin >> a >> b >> c >> d ) {  $ ~~long long ck = 0 ;  $ ~~long long a1 = a * 2 + 2 ;  $ ~~long long a2 = a - 1 ;  $ ~~if ( d >= a2 && d <= a1 ) ck = 1 ;  $ ~~a1 = b * 2 + 2 ;  $ ~~a2 = b - 1 ;  $ ~~if ( c >= a2 && c <= a1 ) ck = 1 ;  $ ~~if ( ck == 1 )  $ ~~~cout << "YES" << endl ;  $ ~~else  $ ~~~cout << "NO" << endl ;  $ ~}  $ }
int main ( ) {  $ ~long long gl , gr , bl , br ;  $ ~cin >> gl >> gr >> bl >> br ;  $ ~if ( br >= gl - 1 && br <= 2 * ( gl + 1 ) ) {  $ ~~cout << "YES" << endl ;  $ ~~return 0 ;  $ ~}  $ ~if ( bl >= gr - 1 && bl <= 2 * ( gr + 1 ) ) {  $ ~~cout << "YES" << endl ;  $ ~~return 0 ;  $ ~} else  $ ~~cout << "NO" << endl ;  $ }
int gl , gr , bl , br ;  $ int main ( ) {  $ ~cin >> gl >> gr >> bl >> br ;  $ ~if ( gl - 1 <= br && br <= 2 * gl + 2 )  $ ~~cout << "YES" << '\n' ;  $ ~else if ( gr - 1 <= bl && bl <= 2 * gr + 2 )  $ ~~cout << "YES" << '\n' ;  $ ~else  $ ~~cout << "NO" << '\n' ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~int A , B , C , D ;  $ ~cin >> A >> B >> C >> D ;  $ ~if ( ( A * 2 + 3 > D && D + 1 >= A ) || ( B * 2 + 3 > C && C + 1 >= B ) ) {  $ ~~cout << "YES" << endl ;  $ ~} else {  $ ~~cout << "NO" << endl ;  $ ~}  $ ~return 0 ;  $ }
int main ( ) {  $ ~int a1 , a2 , a11 , a12 , b1 , b2 , b11 , b12 ;  $ ~cin >> b1 >> b2 >> a1 >> a2 ;  $ ~if ( a1 % 2 == 0 )  $ ~~a11 = a1 / 2 - 1 ;  $ ~else  $ ~~a11 = a1 / 2 ;  $ ~if ( a2 % 2 == 0 )  $ ~~a12 = a2 / 2 - 1 ;  $ ~else  $ ~~a12 = a2 / 2 ;  $ ~b11 = b1 - 1 ;  $ ~b12 = b2 - 1 ;  $ ~if ( b12 <= a1 && a11 <= b2 || a12 <= b1 && b11 <= a2 )  $ ~~cout << "YES" << endl ;  $ ~else  $ ~~cout << "NO" << endl ;  $ ~return 0 ;  $ }
int vl , vr , ml , mr ;  $ bool judge ( int g , int b ) {  $ ~if ( b < g - 1 )  $ ~~return false ;  $ ~else if ( b > 2 * g + 2 )  $ ~~return false ;  $ ~else  $ ~~return true ;  $ }  $ int main ( ) {  $ ~cin >> vl >> vr >> ml >> mr ;  $ ~if ( judge ( vl , mr ) || judge ( vr , ml ) )  $ ~~cout << "YES" << endl ;  $ ~else  $ ~~cout << "NO" << endl ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~int b , bb , g , gg , yes = 0 ;  $ ~cin >> g >> gg >> b >> bb ;  $ ~if ( g <= bb + 1 && bb <= ( g + 1 ) * 2 ) { yes = 1 ; }  $ ~if ( gg <= b + 1 && b <= ( gg + 1 ) * 2 ) { yes = 1 ; }  $ ~if ( yes ) {  $ ~~cout << "YES" << endl ;  $ ~} else {  $ ~~cout << "NO" << endl ;  $ ~}  $ ~return 0 ;  $ }
int main ( ) {  $ ~int A , B , C , D ;  $ ~cin >> A >> B >> C >> D ;  $ ~if ( ( A * 2 + 3 > D && D + 1 >= A ) || ( B * 2 + 3 > C && C + 1 >= B ) ) {  $ ~~cout << "YES" << endl ;  $ ~} else {  $ ~~cout << "NO" << endl ;  $ ~}  $ ~return 0 ;  $ }
const int M = 1000 + 5 ;  $ int main ( ) {  $ ~int gl , gr ;  $ ~cin >> gl >> gr ;  $ ~int bl , br ;  $ ~cin >> bl >> br ;  $ ~bool ok = false ;  $ ~if ( gr - 1 <= bl && bl <= 2 * ( gr + 1 ) ) { ok = true ; }  $ ~if ( gl - 1 <= br && br <= 2 * ( gl + 1 ) ) { ok = true ; }  $ ~if ( ok ) {  $ ~~cout << "YES" << endl ;  $ ~} else {  $ ~~cout << "NO" << endl ;  $ ~}  $ ~return 0 ;  $ }
int vl , vr , ml , mr ;  $ bool judge ( int g , int b ) {  $ ~if ( b < g - 1 )  $ ~~return false ;  $ ~else if ( b > 2 * g + 2 )  $ ~~return false ;  $ ~else  $ ~~return true ;  $ }  $ int main ( ) {  $ ~cin >> vl >> vr >> ml >> mr ;  $ ~if ( judge ( vl , mr ) || judge ( vr , ml ) )  $ ~~cout << "YES" << endl ;  $ ~else  $ ~~cout << "NO" << endl ;  $ ~return 0 ;  $ }
bool check ( int d , int m ) {  $ ~if ( m <= 2 * ( d + 1 ) && ( m >= d - 1 ) ) return 1 ;  $ ~return 0 ;  $ }  $ int main ( ) {  $ ~int l1 , r1 , l2 , r2 ;  $ ~cin >> l1 >> r1 >> l2 >> r2 ;  $ ~if ( check ( l1 , r2 ) || check ( r1 , l2 ) ) {  $ ~~cout << "YES\n" ;  $ ~} else  $ ~~cout << "NO\n" ;  $ }
const int INF = 0 x3f3f3f3f ;  $ int main ( ) {  $ ~int i , j , k ;  $ ~int n , m ;  $ ~int a , b , c , d ;  $ ~cin >> a >> b >> c >> d ;  $ ~if ( ( c - ( b - 1 ) ) < 5 && c - b + 1 >= 0 ) {  $ ~~cout << "YES" << endl ;  $ ~~return 0 ;  $ ~}  $ ~if ( ( d - ( a - 1 ) ) < 5 && d - a + 1 >= 0 ) {  $ ~~cout << "YES" << endl ;  $ ~~return 0 ;  $ ~}  $ ~if ( ( c - ( b - 1 ) * 2 ) < 5 && c - ( b - 1 ) >= 0 ) {  $ ~~cout << "YES" << endl ;  $ ~~return 0 ;  $ ~}  $ ~if ( ( d - ( a - 1 ) * 2 ) < 5 && d - ( a - 1 ) >= 0 ) {  $ ~~cout << "YES" << endl ;  $ ~~return 0 ;  $ ~}  $ ~cout << "NO" << endl ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~int gl , gr , bl , br ;  $ ~bool verdict ;  $ ~cin >> gl >> gr >> bl >> br ;  $ ~if ( 2 * ( gl + 1 ) >= br && gl - 1 <= br || 2 * ( gr + 1 ) >= bl && gr <= bl )  $ ~~cout << "YES" << endl ;  $ ~else  $ ~~cout << "NO" << endl ;  $ ~return 0 ;  $ }
int pan ( int x , int y ) {  $ ~if ( x == 0 ) return y < 2 ;  $ ~if ( y == 0 ) return x < 3 ;  $ ~if ( x == y ) return 1 ;  $ ~if ( x < y ) {  $ ~~if ( y - x <= 1 ) return 1 ;  $ ~~return 0 ;  $ ~} else {  $ ~~if ( x / ( y + 1 ) <= 2 ) {  $ ~~~if ( x / ( y + 1 ) == 1 ) return 1 ;  $ ~~~if ( x / ( y + 1 ) == 2 ) {  $ ~~~~if ( x % ( y + 1 ) < 1 ) return 1 ;  $ ~~~~return 0 ;  $ ~~~}  $ ~~}  $ ~~return 0 ;  $ ~}  $ }  $ int main ( ) {  $ ~int a , b , x , y ;  $ ~cin >> a >> b >> x >> y ;  $ ~if ( pan ( x , b ) || pan ( y , a ) )  $ ~~cout << "YES" << endl ;  $ ~else  $ ~~cout << "NO" << endl ;  $ ~return 0 ;  $ }
long long fp ( long long n , long long p ) {  $ ~if ( p == 0 ) return 1 ;  $ ~if ( p == 1 ) return n ;  $ ~long long res ;  $ ~res = fp ( n , p / 2 ) % int ( 1e9 + 7 ) ;  $ ~res = ( res * res ) % int ( 1e9 + 7 ) ;  $ ~if ( p % 2 ) res = ( res * n ) % int ( 1e9 + 7 ) ;  $ ~return res % int ( 1e9 + 7 ) ;  $ }  $ int get ( int a , int b ) {  $ ~while ( b <= 2011 ) {  $ ~~int dif = 0 , t = b , tt = a ;  $ ~~while ( a > 0 && dif < 2 ) {  $ ~~~if ( a % 10 != b % 10 ) dif ++ ;  $ ~~~a /= 10 , b /= 10 ;  $ ~~}  $ ~~b = t , a = tt ;  $ ~~if ( dif < 2 ) return b ;  $ ~~b ++ ;  $ ~}  $ ~return 1e5 ;  $ }  $ int main ( ) {  $ ~int a , b , c , d ;  $ ~cin >> a >> b >> c >> d ;  $ ~if ( a - 2 < d && d < 2 * a + 3 || b - 2 < c && c < 2 * b + 3 )  $ ~~cout << "YES" << '\n' ;  $ ~else  $ ~~cout << "NO" << '\n' ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~long long gl , gr , bl , br ;  $ ~cin >> gl >> gr >> bl >> br ;  $ ~if ( br >= gl - 1 && br <= 2 * ( gl + 1 ) ) {  $ ~~cout << "YES" << endl ;  $ ~~return 0 ;  $ ~}  $ ~if ( bl >= gr - 1 && bl <= 2 * ( gr + 1 ) ) {  $ ~~cout << "YES" << endl ;  $ ~~return 0 ;  $ ~} else  $ ~~cout << "NO" << endl ;  $ }
int main ( ) {  $ ~int a , b , c , d ;  $ ~cin >> a >> b >> c >> d ;  $ ~if ( ( d >= a - 1 && d <= 2 * ( a + 1 ) ) || ( c >= b - 1 && c <= 2 * ( b + 1 ) ) )  $ ~~cout << "YES\n" ;  $ ~else  $ ~~cout << "NO\n" ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~int n ;  $ ~cin >> n ;  $ ~vector < int > v ( 2 * n ) ;  $ ~for ( int i = 0 ; i < 2 * n ; i ++ ) { cin >> v [ i ] ; }  $ ~sort ( v . begin ( ) , v . end ( ) ) ;  $ ~if ( v [ n - 1 ] < v [ n ] )  $ ~~cout << "YES\n" ;  $ ~else  $ ~~cout << "NO\n" ;  $ }
int n ;  $ vector < int > arr ( 210 ) ;  $ int main ( ) {  $ ~cin >> n ;  $ ~for ( int i = 1 ; i <= 2 * n ; ++ i ) { cin >> arr [ i ] ; }  $ ~sort ( arr . begin ( ) + 1 , arr . begin ( ) + 2 * n + 1 , greater < int > ( ) ) ;  $ ~if ( arr [ n ] > arr [ n + 1 ] ) {  $ ~~cout << "YES"  $ ~~~<< "\n" ;  $ ~} else {  $ ~~cout << "NO"  $ ~~~<< "\n" ;  $ ~}  $ ~return 0 ;  $ }
int main ( ) {  $ ~int n ;  $ ~cin >> n ;  $ ~int a [ n + n ] ;  $ ~for ( int i = 0 ; i < 2 * n ; i ++ ) { cin >> a [ i ] ; }  $ ~sort ( a , a + n * 2 ) ;  $ ~if ( a [ n ] > a [ n - 1 ] ) {  $ ~~cout << "YES\n" ;  $ ~} else {  $ ~~cout << "NO\n" ;  $ ~}  $ ~return 0 ;  $ }
inline int read ( ) {  $ ~int x = 0 , f = 1 ;  $ ~char ch = getchar ( ) ;  $ ~while ( ch < '0' || ch > '9' ) {  $ ~~if ( ch == '-' ) f = - 1 ;  $ ~~ch = getchar ( ) ;  $ ~}  $ ~while ( ch >= '0' && ch <= '9' ) {  $ ~~x = x * 10 + ch - '0' ;  $ ~~ch = getchar ( ) ;  $ ~}  $ ~return x * f ;  $ }  $ int n , a [ 1005 ] ;  $ int main ( ) {  $ ~n = read ( ) * 2 ;  $ ~for ( int i = 1 ; i <= n ; ++ i ) a [ i ] = read ( ) ;  $ ~sort ( a + 1 , a + n + 1 ) ;  $ ~if ( a [ n >> 1 ] < a [ ( n >> 1 ) + 1 ] ) return 0 * puts ( "YES" ) ;  $ ~puts ( "NO" ) ;  $ ~return 0 ;  $ }
int n ;  $ vector < int > arr ( 210 ) ;  $ int main ( ) {  $ ~cin >> n ;  $ ~for ( int i = 1 ; i <= 2 * n ; ++ i ) { cin >> arr [ i ] ; }  $ ~sort ( arr . begin ( ) + 1 , arr . begin ( ) + 2 * n + 1 , greater < int > ( ) ) ;  $ ~if ( arr [ n ] > arr [ n + 1 ] ) {  $ ~~cout << "YES"  $ ~~~<< "\n" ;  $ ~} else {  $ ~~cout << "NO"  $ ~~~<< "\n" ;  $ ~}  $ ~return 0 ;  $ }
int a [ 2 * 102 ] ;  $ int main ( ) {  $ ~int n ;  $ ~cin >> n ;  $ ~for ( int i = 0 ; i < 2 * n ; i ++ ) cin >> a [ i ] ;  $ ~sort ( a , a + 2 * n ) ;  $ ~if ( a [ n - 1 ] < a [ n ] )  $ ~~cout << "YES" << endl ;  $ ~else  $ ~~cout << "NO" << endl ;  $ ~return 0 ;  $ }
int n ;  $ int arr [ 210 ] ;  $ int main ( ) {  $ ~cin >> n ;  $ ~for ( int i = 1 ; i <= 2 * n ; ++ i ) { cin >> arr [ i ] ; }  $ ~sort ( arr + 1 , arr + n + n + 1 ) ;  $ ~puts ( ( arr [ n ] < arr [ n + 1 ] ? "YES" : "NO" ) ) ;  $ ~return 0 ;  $ }
int n , a [ 210 ] ;  $ int main ( ) {  $ ~cin >> n ;  $ ~for ( int i = 0 ; i < 2 * n ; i ++ ) { cin >> a [ i ] ; }  $ ~sort ( a , a + 2 * n ) ;  $ ~if ( a [ n - 1 ] >= a [ n ] ) {  $ ~~puts ( "NO" ) ;  $ ~} else {  $ ~~puts ( "YES" ) ;  $ ~}  $ ~return 0 ;  $ }
long long n , a [ 205 ] ;  $ void solve ( ) {  $ ~cin >> n ;  $ ~for ( __typeof ( ( 2 * n + 1 ) ) i = ( 1 ) ; i < ( 2 * n + 1 ) ; i ++ ) cin >> a [ i ] ;  $ ~sort ( a + 1 , a + 2 * n + 1 ) ;  $ ~if ( a [ n ] != a [ n + 1 ] )  $ ~~cout << "YES" << endl ;  $ ~else  $ ~~cout << "NO" << endl ;  $ }  $ void prep ( ) { }  $ int main ( ) {  $ ~int t = 1 ;  $ ~prep ( ) ;  $ ~cout << fixed << setprecision ( 10 ) ;  $ ~while ( t -- ) solve ( ) ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~int a ;  $ ~cin >> a ;  $ ~int b [ 10000 ] , c [ a ] , d [ a ] ;  $ ~for ( int i = 0 ; i < a * 2 ; i ++ ) { cin >> b [ i ] ; }  $ ~sort ( b , b + a * 2 ) ;  $ ~for ( int i = 0 ; i < a ; i ++ ) { c [ i ] = b [ i ] ; }  $ ~for ( int i = a ; i < a * 2 ; i ++ ) { d [ i - a ] = b [ i ] ; }  $ ~for ( int i = 0 ; i < a ; i ++ ) {  $ ~~for ( int j = 0 ; j < a ; j ++ ) {  $ ~~~if ( c [ j ] >= d [ i ] ) {  $ ~~~~cout << "NO" << endl ;  $ ~~~~return 0 ;  $ ~~~}  $ ~~}  $ ~}  $ ~cout << "YES" << endl ;  $ }
int a [ 205 ] ;  $ int main ( ) {  $ ~int n ;  $ ~cin >> n ;  $ ~for ( int i = 1 ; i <= 2 * n ; ++ i ) cin >> a [ i ] ;  $ ~sort ( a , a + 2 * n + 1 ) ;  $ ~for ( int i = 1 ; i <= n ; ++ i )  $ ~~for ( int j = n + 1 ; j <= 2 * n ; ++ j )  $ ~~~if ( a [ i ] >= a [ j ] ) {  $ ~~~~cout << "NO" << endl ;  $ ~~~~return 0 ;  $ ~~~}  $ ~cout << "YES" << endl ;  $ }
int main ( ) {  $ ~int n ;  $ ~int a [ 1001 ] ;  $ ~int b [ 1001 ] ;  $ ~cin >> n ;  $ ~for ( int i = 1 ; i <= 2 * n ; i ++ ) { cin >> a [ i ] ; }  $ ~int max = 1 ;  $ ~for ( int i = 1 ; i <= 2 * n ; i ++ ) {  $ ~~for ( int j = 1 ; j <= 2 * n ; j ++ ) {  $ ~~~if ( a [ max ] < a [ j ] ) { max = j ; }  $ ~~}  $ ~~b [ i ] = a [ max ] ;  $ ~~a [ max ] = - 1 ;  $ ~}  $ ~if ( b [ n ] > b [ n + 1 ] )  $ ~~cout << "YES" << endl ;  $ ~else  $ ~~cout << "NO" << endl ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~int n ;  $ ~int a [ 210 ] ;  $ ~cin >> n ;  $ ~for ( int i = 0 ; i < 2 * n ; i ++ ) cin >> a [ i ] ;  $ ~sort ( a , a + 2 * n ) ;  $ ~if ( a [ n ] > a [ n - 1 ] )  $ ~~cout << "YES\n" ;  $ ~else  $ ~~cout << "NO\n" ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~int n ;  $ ~cin >> n ;  $ ~int a [ 2 * n ] ;  $ ~for ( int i = 0 ; i < 2 * n ; i ++ ) cin >> a [ i ] ;  $ ~sort ( a , a + 2 * n ) ;  $ ~if ( a [ n ] == a [ n - 1 ] ) {  $ ~~cout << "NO" << endl ;  $ ~} else {  $ ~~cout << "YES" << endl ;  $ ~}  $ }
int dx [ 4 ] = { 0 , 0 , - 1 , 1 } ;  $ int dy [ 4 ] = { 1 , - 1 , 0 , 0 } ;  $ int main ( ) {  $ ~int n ;  $ ~cin >> n ;  $ ~int a [ 2 * n ] ;  $ ~for ( int i = 0 ; i < 2 * n ; i += 1 ) cin >> a [ i ] ;  $ ~sort ( a , a + 2 * n ) ;  $ ~int x = a [ n ] ;  $ ~for ( int i = 0 ; i < n ; i += 1 ) {  $ ~~if ( x <= a [ i ] ) {  $ ~~~cout << "NO\n" ;  $ ~~~return 0 ;  $ ~~}  $ ~}  $ ~cout << "YES\n" ;  $ }
int a [ 205 ] = { 0 } ;  $ int N ;  $ int main ( ) {  $ ~cin >> N ;  $ ~N *= 2 ;  $ ~for ( int i = 0 ; i < N ; i ++ ) { cin >> a [ i ] ; }  $ ~sort ( a , a + N ) ;  $ ~N /= 2 ;  $ ~N -= 1 ;  $ ~if ( a [ N ] >= a [ N + 1 ] )  $ ~~cout << "NO" << endl ;  $ ~else  $ ~~cout << "YES" << endl ;  $ ~return 0 ;  $ }
int n , a [ 10000 ] ;  $ int main ( ) {  $ ~cin >> n ;  $ ~for ( int i = 1 ; i <= 2 * n ; i ++ ) cin >> a [ i ] ;  $ ~sort ( a + 1 , a + 2 * n + 1 ) ;  $ ~if ( a [ n ] == a [ n + 1 ] )  $ ~~cout << "NO" << endl ;  $ ~else  $ ~~cout << "YES" << endl ;  $ ~return 0 ;  $ }
int n ;  $ int x [ 200001 ] ;  $ int main ( ) {  $ ~cin >> n ;  $ ~for ( int i = 1 ; i <= 2 * n ; i ++ ) cin >> x [ i ] ;  $ ~sort ( x + 1 , x + 1 + 2 * n ) ;  $ ~if ( x [ n ] < x [ n + 1 ] )  $ ~~cout << "YES" << endl ;  $ ~else  $ ~~cout << "NO" << endl ;  $ }
int main ( ) {  $ ~int n ;  $ ~cin >> n ;  $ ~int vet [ 2 * n ] ;  $ ~for ( int i = 0 ; i < 2 * n ; i ++ ) { cin >> vet [ i ] ; }  $ ~sort ( vet , vet + ( 2 * n ) ) ;  $ ~if ( vet [ n - 1 ] < vet [ n ] )  $ ~~cout << "YES" << endl ;  $ ~else  $ ~~cout << "NO" << endl ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~long long int n ;  $ ~cin >> n ;  $ ~vector < long long int > v ;  $ ~for ( long long int i = 0 ; i < 2 * n ; i ++ ) {  $ ~~long long int x ;  $ ~~cin >> x ;  $ ~~v . push_back ( x ) ;  $ ~}  $ ~sort ( v . begin ( ) , v . end ( ) ) ;  $ ~if ( v [ n ] > v [ n - 1 ] )  $ ~~cout << "YES" ;  $ ~else  $ ~~cout << "NO" ;  $ ~cout << endl ;  $ ~return 0 ;  $ }
const int N = 210 ;  $ int n ;  $ int in [ N ] ;  $ int main ( ) {  $ ~while ( cin >> n ) {  $ ~~for ( int i = 0 ; i < 2 * n ; i ++ ) { cin >> in [ i ] ; }  $ ~~sort ( in , in + 2 * n ) ;  $ ~~if ( in [ n ] > in [ n - 1 ] ) {  $ ~~~cout << "YES" << endl ;  $ ~~} else {  $ ~~~cout << "NO" << endl ;  $ ~~}  $ ~}  $ ~return 0 ;  $ }
int main ( ) {  $ ~int n ;  $ ~cin >> n ;  $ ~n *= 2 ;  $ ~int a [ 1005 ] ;  $ ~for ( int i = 0 ; i < n ; i ++ ) cin >> a [ i ] ;  $ ~sort ( a , a + n ) ;  $ ~if ( a [ n / 2 - 1 ] != a [ n / 2 ] )  $ ~~cout << "YES" << endl ;  $ ~else  $ ~~cout << "NO" << endl ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~int n ;  $ ~cin >> n ;  $ ~vector < int > v ( 2 * n ) ;  $ ~for ( int i = 0 ; i < 2 * n ; ++ i ) cin >> v [ i ] ;  $ ~sort ( v . begin ( ) , v . end ( ) ) ;  $ ~cout << ( v [ n ] > v [ n - 1 ] ? "YES\n" : "NO\n" ) ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~long long n ;  $ ~cin >> n ;  $ ~long long p = 2 * n ;  $ ~long long arr [ p ] ;  $ ~for ( long long i = 0 ; i < 2 * n ; i ++ ) { cin >> arr [ i ] ; }  $ ~sort ( arr , arr + p ) ;  $ ~if ( arr [ n - 1 ] == arr [ n ] ) {  $ ~~cout << "NO" << endl ;  $ ~} else {  $ ~~cout << "YES" << endl ;  $ ~}  $ }
int N ;  $ string S ;  $ int main ( ) {  $ ~cin >> N >> S ;  $ ~sort ( S . begin ( ) , S . end ( ) ) ;  $ ~cout << S << '\n' ;  $ ~return 0 ;  $ }
const long long MaxN = 301002 ;  $ long long n ;  $ string s ;  $ int main ( ) {  $ ~cin >> n ;  $ ~cin >> s ;  $ ~sort ( s . begin ( ) , s . end ( ) ) ;  $ ~cout << s << "\n" ;  $ }
int main ( ) {  $ ~int n ;  $ ~cin >> n ;  $ ~string a ;  $ ~cin >> a ;  $ ~sort ( a . begin ( ) , a . end ( ) ) ;  $ ~cout << a << endl ;  $ ~return 0 ;  $ }
const int oo = 1e9 ;  $ int main ( ) {  $ ~int n ;  $ ~cin >> n ;  $ ~string s ;  $ ~cin >> s ;  $ ~sort ( s . begin ( ) , s . end ( ) ) ;  $ ~cout << s << '\n' ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~int n ;  $ ~cin >> n ;  $ ~string s ;  $ ~cin >> s ;  $ ~sort ( s . begin ( ) , s . end ( ) ) ;  $ ~cout << s << "\n" ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~int n ;  $ ~cin >> n ;  $ ~string str ;  $ ~cin >> str ;  $ ~sort ( str . begin ( ) , str . end ( ) ) ;  $ ~cout << str << endl ;  $ ~return 0 ;  $ }
const int inf = 0 x3f3f3f3f ;  $ long long a ;  $ string s ;  $ int main ( ) {  $ ~int n ;  $ ~cin >> n ;  $ ~cin >> s ;  $ ~sort ( s . begin ( ) , s . end ( ) ) ;  $ ~cout << s << endl ;  $ ~return 0 ;  $ }
vector < int > v ;  $ int main ( ) {  $ ~int n ;  $ ~cin >> n ;  $ ~string s ;  $ ~cin >> s ;  $ ~sort ( s . begin ( ) , s . end ( ) ) ;  $ ~cout << s << "\n" ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~int n ;  $ ~string s ;  $ ~cin >> n >> s ;  $ ~sort ( s . begin ( ) , s . end ( ) ) ;  $ ~cout << s << endl ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~int n ;  $ ~cin >> n ;  $ ~string str ;  $ ~cin >> str ;  $ ~sort ( str . begin ( ) , str . end ( ) ) ;  $ ~cout << str << endl ;  $ }
int main ( ) {  $ ~int n ;  $ ~string s ;  $ ~cin >> n >> s ;  $ ~sort ( s . begin ( ) , s . end ( ) ) ;  $ ~cout << s << endl ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~int n ;  $ ~cin >> n ;  $ ~string s ;  $ ~cin >> s ;  $ ~sort ( s . begin ( ) , s . end ( ) ) ;  $ ~cout << s << "\n" ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~string s ;  $ ~int n ;  $ ~cin >> n >> s ;  $ ~sort ( s . begin ( ) , s . end ( ) ) ;  $ ~cout << s << endl ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~int n ;  $ ~string s ;  $ ~cin >> n >> s ;  $ ~sort ( s . begin ( ) , s . end ( ) ) ;  $ ~cout << s << endl ;  $ }
int main ( ) {  $ ~int n ;  $ ~cin >> n ;  $ ~string s ;  $ ~cin >> s ;  $ ~sort ( s . begin ( ) , s . end ( ) ) ;  $ ~cout << s << endl ;  $ }
int main ( ) {  $ ~int a ;  $ ~cin >> a ;  $ ~string s ;  $ ~cin >> s ;  $ ~int arr [ 26 ] = { 0 } ;  $ ~for ( int i = 0 ; i < a ; i ++ ) arr [ s [ i ] - 'a' ] ++ ;  $ ~for ( int i = 0 ; i < 26 ; i ++ )  $ ~~for ( int j = 0 ; j < arr [ i ] ; j ++ ) cout << ( char ) ( 'a' + i ) ;  $ ~cout << endl ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~int n ;  $ ~cin >> n ;  $ ~string s ;  $ ~cin >> s ;  $ ~sort ( s . begin ( ) , s . end ( ) ) ;  $ ~cout << s << endl ;  $ }
int main ( ) {  $ ~long long n ;  $ ~cin >> n ;  $ ~string s ;  $ ~cin >> s ;  $ ~sort ( s . begin ( ) , s . end ( ) ) ;  $ ~cout << s << "\n" ;  $ }
const double PI = 2.0 * acos ( 0.0 ) ;  $ const int MOD = 1e9 + 7 ;  $ const int oo = 2 * MOD + 1e3 ;  $ long long gcd ( long long a , long long b ) {  $ ~return ! b ? a : gcd ( b , a % b ) ;  $ }  $ int main ( ) {  $ ~int n ;  $ ~string str ;  $ ~cin >> n >> str ;  $ ~sort ( str . begin ( ) , str . end ( ) ) ;  $ ~cout << str << '\n' ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~int n ;  $ ~string s ;  $ ~cin >> n >> s ;  $ ~sort ( s . begin ( ) , s . end ( ) ) ;  $ ~cout << s << endl ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~int64_t n ;  $ ~string s ;  $ ~cin >> n >> s ;  $ ~sort ( s . begin ( ) , s . end ( ) ) ;  $ ~cout << s << endl ;  $ ~return 0 ;  $ }
const int mod = 1000000007 ;  $ const long long inf = 1000000000000 ;  $ int main ( ) {  $ ~int n ;  $ ~cin >> n ;  $ ~string s ;  $ ~cin >> s ;  $ ~sort ( s . begin ( ) , s . end ( ) ) ;  $ ~cout << s << '\n' ;  $ ~return 0 ;  $ }
long long fpow ( long long n , long long k , long long p = 1000000007 ) {  $ ~long long r = 1 ;  $ ~for ( ; k ; k >> = 1 ) {  $ ~~if ( k & 1 ) r = r * n % p ;  $ ~~n = n * n % p ;  $ ~}  $ ~return r ;  $ }  $ long long inv ( long long a , long long p = 1000000007 ) {  $ ~return fpow ( a , p - 2 , p ) ;  $ }  $ int main ( ) {  $ ~int n ;  $ ~cin >> n ;  $ ~string s ;  $ ~cin >> s ;  $ ~sort ( s . begin ( ) , s . end ( ) ) ;  $ ~cout << s << endl ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~char a [ 100005 ] ;  $ ~int n ;  $ ~cin >> n ;  $ ~getchar ( ) ;  $ ~gets ( a ) ;  $ ~sort ( a , a + n ) ;  $ ~puts ( a ) ;  $ }
int main ( ) {  $ ~int n ;  $ ~cin >> n ;  $ ~string second ;  $ ~cin >> second ;  $ ~sort ( ( second ) . begin ( ) , ( second ) . end ( ) ) ;  $ ~cout << second << endl ;  $ ~return 0 ;  $ }
bool vis [ 100005 ] ;  $ bool comp ( pair < int , char > a , pair < int , char > b ) {  $ ~return a . first > b . first ;  $ }  $ int main ( ) {  $ ~int n ;  $ ~cin >> n ;  $ ~string s ;  $ ~cin >> s ;  $ ~sort ( s . begin ( ) , s . end ( ) ) ;  $ ~cout << s << endl ;  $ }
unsigned long long const mod = 1000000007 ;  $ unsigned long long const md = 998244353 ;  $ unsigned long long mypow ( unsigned long long a , unsigned long long b ) {  $ ~unsigned long long res = 1 ;  $ ~a %= mod ;  $ ~assert ( b >= 0 ) ;  $ ~for ( ; b ; b >> = 1 ) {  $ ~~if ( b & 1 ) res = res * a % mod ;  $ ~~a = a * a % mod ;  $ ~}  $ ~return res ;  $ }  $ ifstream in ( "txt.in" ) ;  $ ofstream out ( "txt.out" ) ;  $ int main ( ) {  $ ~cout << fixed << setprecision ( 12 ) ;  $ ~unsigned long long n ;  $ ~cin >> n ;  $ ~string s ;  $ ~cin >> s ;  $ ~sort ( s . begin ( ) , s . end ( ) ) ;  $ ~cout << s << '\n' ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~int N ;  $ ~cin >> N ;  $ ~string S ;  $ ~cin >> S ;  $ ~sort ( ( S ) . begin ( ) , ( S ) . end ( ) ) ;  $ ~cout << S << "\n" ;  $ }
int main ( ) {  $ ~int n ;  $ ~cin >> n ;  $ ~string s ;  $ ~cin >> s ;  $ ~sort ( s . begin ( ) , s . end ( ) ) ;  $ ~cout << s << "\n" ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~float A , C ;  $ ~float max , min ;  $ ~cin >> A >> C ;  $ ~if ( A == 0 && C == 0 ) {  $ ~~max = 0 ;  $ ~~min = 0 ;  $ ~} else if ( A == 0 ) {  $ ~~cout << "Impossible" << endl ;  $ ~~return 0 ;  $ ~} else if ( C == 0 ) {  $ ~~max = A ;  $ ~~min = A ;  $ ~} else if ( C < A ) {  $ ~~min = A ;  $ ~~max = A + ( C - 1 ) ;  $ ~} else {  $ ~~max = A + ( C - 1 ) ;  $ ~~min = C / A * A ;  $ ~}  $ ~cout << min << " " << max << endl ;  $ ~return 0 ;  $ }
const int N = 1e6 ;  $ int n , m ;  $ int mx , mn ;  $ int main ( ) {  $ ~cin >> n >> m ;  $ ~if ( n == 0 && m > 0 ) {  $ ~~cout << "Impossible" << endl ;  $ ~~return 0 ;  $ ~}  $ ~if ( m == 0 ) {  $ ~~cout << n << " " << n << endl ;  $ ~~return 0 ;  $ ~}  $ ~mx = n + m - 1 ;  $ ~if ( n >= m )  $ ~~mn = n ;  $ ~else  $ ~~mn = m ;  $ ~cout << mn << " " << mx << endl ;  $ ~return 0 ;  $ }
long long int n , m ;  $ int main ( ) {  $ ~cin >> n >> m ;  $ ~if ( n == 0 and m != 0 )  $ ~~puts ( "Impossible" ) ;  $ ~else  $ ~~cout << ( n + max ( 0 LL , m - n ) ) << " " << ( n + max ( 0 LL , m - 1 ) ) << endl ;  $ ~;  $ }
int main ( ) {  $ ~long long n , m ;  $ ~cin >> n >> m ;  $ ~if ( ! n && ! m ) {  $ ~~cout << "0 0\n" ;  $ ~~return 0 ;  $ ~}  $ ~if ( ! n ) {  $ ~~cout << "Impossible\n" ;  $ ~~return 0 ;  $ ~}  $ ~long long mx = n + m ;  $ ~if ( m ) mx -- ;  $ ~long long mn = n + m ;  $ ~mn -= min ( n , m ) ;  $ ~cout << mn << " " << mx << endl ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~long long n , m ;  $ ~cin >> n >> m ;  $ ~if ( n == 0 ) {  $ ~~if ( m == 0 )  $ ~~~cout << 0 << " " << 0 << endl ;  $ ~~else  $ ~~~cout << "Impossible" << endl ;  $ ~} else {  $ ~~long long mn , mx , a , b , c , d ;  $ ~~if ( m == 0 )  $ ~~~mx = n ;  $ ~~else  $ ~~~mx = m + ( n - 1 ) ;  $ ~~mn = ( n - 1 ) ;  $ ~~m = m - ( n - 1 ) ;  $ ~~if ( m > 0 )  $ ~~~mn = mn + m ;  $ ~~else  $ ~~~mn = mn + 1 ;  $ ~~cout << mn << " " << mx << endl ;  $ ~}  $ }
int main ( ) {  $ ~long long mn ;  $ ~int a , b ;  $ ~cin >> a >> b ;  $ ~if ( a == 0 && b == 0 ) {  $ ~~cout << 0 << ' ' << 0 << endl ;  $ ~~return 0 ;  $ ~}  $ ~if ( a == 0 ) {  $ ~~cout << "Impossible" << endl ;  $ ~~;  $ ~~return 0 ;  $ ~}  $ ~if ( b == 0 ) {  $ ~~cout << a << ' ' << a << endl ;  $ ~~return 0 ;  $ ~}  $ ~long long mx ;  $ ~if ( b >= a ) {  $ ~~mn = a + ( b - a ) ;  $ ~} else {  $ ~~mn = a ;  $ ~}  $ ~mx = a + ( b - 1 ) ;  $ ~cout << mn << ' ' << mx << endl ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~int n , m ;  $ ~cin >> n >> m ;  $ ~if ( n == 0 && m > 0 ) {  $ ~~cout << "Impossible" << endl ;  $ ~~return 0 ;  $ ~}  $ ~int mn , mx ;  $ ~mn = n + ( max ( 0 , m - n ) ) ;  $ ~mx = n + max ( 0 , m - 1 ) ;  $ ~cout << mn << " " << mx << endl ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~int n , m ;  $ ~while ( cin >> n >> m ) {  $ ~~int mx = n + max ( m - 1 , 0 ) ;  $ ~~int mn = n + max ( 0 , m - n ) ;  $ ~~if ( mn > mx )  $ ~~~cout << "Impossible" << endl ;  $ ~~else  $ ~~~cout << mn << " " << mx << endl ;  $ ~}  $ }
int main ( ) {  $ ~int ch , ad ;  $ ~cin >> ad >> ch ;  $ ~if ( ad == 0 && ch > 0 )  $ ~~cout << "Impossible" << endl ;  $ ~else  $ ~~cout << ad + ch - min ( ad , ch ) << " " << ad + max ( ch - 1 , 0 ) << endl ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~long long n , m ;  $ ~cin >> n >> m ;  $ ~long long x , y ;  $ ~if ( n == 0 ) {  $ ~~if ( m )  $ ~~~cout << "Impossible\n" ;  $ ~~else  $ ~~~cout << "0 0\n" ;  $ ~} else {  $ ~~if ( m ) {  $ ~~~y = ( n - 1 ) + m ;  $ ~~~x = n ;  $ ~~~if ( m > n ) x += ( m - n ) ;  $ ~~} else  $ ~~~x = y = n ;  $ ~~cout << x << " " << y << "\n" ;  $ ~}  $ ~return 0 ;  $ }
int main ( ) {  $ ~int n , m ;  $ ~cin >> n >> m ;  $ ~if ( n == 0 && m == 0 ) {  $ ~~cout << 0 << " " << 0 << endl ;  $ ~} else if ( n == 0 ) {  $ ~~cout << "Impossible" << endl ;  $ ~} else {  $ ~~cout << ( n > m ? n : m ) << " " << ( m > 0 ? n + m - 1 : n ) << endl ;  $ ~}  $ ~return 0 ;  $ }
int main ( ) {  $ ~int n , m ;  $ ~cin >> n >> m ;  $ ~if ( n == 0 && m > 0 )  $ ~~cout << "Impossible" << endl ;  $ ~else  $ ~~cout << n + m - min ( n , m ) << " " << n + max ( m - 1 , 0 ) << endl ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~int n , m , mn , mx ;  $ ~cin >> n >> m ;  $ ~if ( n == 0 ) {  $ ~~if ( m == 0 )  $ ~~~cout << "0 0" << endl ;  $ ~~else  $ ~~~cout << "Impossible" << endl ;  $ ~~return 0 ;  $ ~}  $ ~if ( m == 0 ) {  $ ~~cout << n << " " << n << endl ;  $ ~~return 0 ;  $ ~}  $ ~mx = n + m - 1 ;  $ ~if ( n >= m )  $ ~~mn = n ;  $ ~else  $ ~~mn = m ;  $ ~cout << mn << " " << mx << endl ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~long long int n , m ;  $ ~cin >> n >> m ;  $ ~if ( n == 0 && m > 0 )  $ ~~cout << "Impossible\n" ;  $ ~else {  $ ~~if ( n >= m )  $ ~~~cout << n << ' ' ;  $ ~~else  $ ~~~cout << ( m / n ) * n + ( m % n ) << ' ' ;  $ ~~if ( m > 0 )  $ ~~~cout << ( n - 1 ) + m << endl ;  $ ~~else  $ ~~~cout << n << endl ;  $ ~}  $ ~return 0 ;  $ }
int main ( ) {  $ ~int n , m ;  $ ~cin >> n >> m ;  $ ~if ( n == 0 && m > 0 ) {  $ ~~cout << "Impossible" << endl ;  $ ~~return 0 ;  $ ~}  $ ~int mn , mx ;  $ ~mn = n ;  $ ~if ( m == 0 )  $ ~~mx = n ;  $ ~else  $ ~~mx = n + ( m - 1 ) ;  $ ~if ( m > n ) mn += ( m - n ) ;  $ ~cout << mn << " " << mx << endl ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~long long n , m ;  $ ~cin >> n >> m ;  $ ~if ( n == 0 && m != 0 ) {  $ ~~cout << "Impossible" << endl ;  $ ~~return 0 ;  $ ~}  $ ~if ( n == 0 && m == 0 ) {  $ ~~cout << 0 << " " << 0 << endl ;  $ ~~return 0 ;  $ ~}  $ ~if ( n != 0 && m == 0 ) {  $ ~~cout << n << " " << n << endl ;  $ ~~return 0 ;  $ ~}  $ ~if ( n <= m ) {  $ ~~cout << m << " " << n - 1 + m << endl ;  $ ~} else {  $ ~~cout << n << " " << n + m - 1 << endl ;  $ ~}  $ ~return 0 ;  $ }
int main ( ) {  $ ~int n , m , c , d ;  $ ~while ( cin >> n >> m ) {  $ ~~if ( n == 0 && m == 0 ) {  $ ~~~cout << 0 << " " << 0 << endl ;  $ ~~} else {  $ ~~~if ( n == 0 ) {  $ ~~~~cout << "Impossible" << endl ;  $ ~~~} else {  $ ~~~~if ( n == 1 ) {  $ ~~~~~if ( m == 0 ) {  $ ~~~~~~cout << n << " " << n << endl ;  $ ~~~~~} else {  $ ~~~~~~cout << m << " " << m << endl ;  $ ~~~~~}  $ ~~~~} else {  $ ~~~~~if ( n >= m ) {  $ ~~~~~~if ( m == 0 ) {  $ ~~~~~~~cout << n << " " << n << endl ;  $ ~~~~~~} else {  $ ~~~~~~~c = m + n - 1 ;  $ ~~~~~~~cout << n << " " << c << endl ;  $ ~~~~~~}  $ ~~~~~} else {  $ ~~~~~~d = m + n - 1 ;  $ ~~~~~~cout << m << " " << d << endl ;  $ ~~~~~}  $ ~~~~}  $ ~~~}  $ ~~}  $ ~}  $ }
int main ( ) {  $ ~int n , m ;  $ ~cin >> n >> m ;  $ ~if ( n == 0 and m != 0 ) {  $ ~~cout << "Impossible" << endl ;  $ ~} else if ( n == 0 and m == 0 ) {  $ ~~cout << 0 << " " << 0 << endl ;  $ ~} else {  $ ~~int mx = n + max ( 0 , m - 1 ) ;  $ ~~int mn = n + max ( 0 , m - n ) ;  $ ~~cout << mn << " " << mx << endl ;  $ ~}  $ }
int dx [ ] = { - 1 , 0 , 1 , 0 } ;  $ int dy [ ] = { 0 , 1 , 0 , - 1 } ;  $ int main ( ) {  $ ~long long n , m ;  $ ~cin >> n >> m ;  $ ~if ( m == 0 && n >= 0 ) {  $ ~~cout << n << " " << n << endl ;  $ ~~return 0 ;  $ ~}  $ ~if ( n == 0 && m > 0 ) {  $ ~~cout << "Impossible" << endl ;  $ ~~return 0 ;  $ ~}  $ ~long long maxsum = m + n - 1 ;  $ ~long long minsum = n + max ( m - n , 0 LL ) ;  $ ~cout << minsum << " " << maxsum << endl ;  $ }
int main ( ) {  $ ~int t , s , q ;  $ ~int cnt = 0 ;  $ ~cin >> t >> s >> q ;  $ ~while ( s < t ) {  $ ~~s = s * q ;  $ ~~cnt ++ ;  $ ~}  $ ~cout << cnt << endl ;  $ ~return 0 ;  $ }
int t , s , q ;  $ int main ( ) {  $ ~cin >> t >> s >> q ;  $ ~int ans = 1 ;  $ ~int temp = s * q ;  $ ~while ( temp < t ) {  $ ~~++ ans ;  $ ~~temp *= q ;  $ ~}  $ ~cout << ans << endl ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~long long a , b , c , coun = 0 ;  $ ~cin >> a >> b >> c ;  $ ~while ( a > b ) {  $ ~~b *= c ;  $ ~~coun ++ ;  $ ~}  $ ~cout << coun << endl ;  $ }
const long double PI = acos ( - 1 ) ;  $ inline long long mod ( long long n , long long m ) {  $ ~long long ret = n % m ;  $ ~if ( ret < 0 ) ret += m ;  $ ~return ret ;  $ }  $ long long gcd ( long long a , long long b ) {  $ ~if ( a == 0 )  $ ~~return b ;  $ ~else  $ ~~return gcd ( b % a , a ) ;  $ }  $ int main ( ) {  $ ~long long q , s , t ;  $ ~cin >> t >> s >> q ;  $ ~long long ans = 0 ;  $ ~while ( s < t ) {  $ ~~s *= q ;  $ ~~ans ++ ;  $ ~}  $ ~cout << ans << '\n' ;  $ }
const int MAXN = 1e4 + 4 ;  $ int n , a , b ;  $ int main ( ) {  $ ~cin >> n >> a >> b ;  $ ~int ans = 0 ;  $ ~while ( a < n ) {  $ ~~a *= b ;  $ ~~ans ++ ;  $ ~}  $ ~cout << ans << "\n" ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~long int t , s , q , c = 0 ;  $ ~cin >> t >> s >> q ;  $ ~while ( t > s ) {  $ ~~s *= q ;  $ ~~c ++ ;  $ ~}  $ ~cout << c << endl ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~int t , s , q ;  $ ~while ( cin >> t >> s >> q ) {  $ ~~int ans = 0 ;  $ ~~while ( s < t ) {  $ ~~~ans ++ ;  $ ~~~s *= q ;  $ ~~}  $ ~~cout << ans << endl ;  $ ~}  $ }
const int maxn = 2e3 + 10 ;  $ const int eps = 1e-14 ;  $ const int mod = 1e9 + 7 ;  $ const long long inf = 1e18 ;  $ int main ( ) {  $ ~int t , s , p ;  $ ~cin >> t >> s >> p ;  $ ~int cnt = 0 ;  $ ~while ( s < t ) {  $ ~~s *= p ;  $ ~~++ cnt ;  $ ~}  $ ~cout << cnt << endl ;  $ }
int t , s , q ;  $ int ans = 1 ;  $ int main ( ) {  $ ~cin >> t >> s >> q ;  $ ~long double now = 0 ;  $ ~long double last = s ;  $ ~while ( last < t ) {  $ ~~long double tmp = ( last - now ) * q ;  $ ~~if ( last + tmp * ( q - 1 ) / q >= t ) break ;  $ ~~last += ceil ( tmp ) * ( q - 1 ) / q ;  $ ~~now += ceil ( tmp ) ;  $ ~~now -= last ;  $ ~~ans ++ ;  $ ~}  $ ~cout << ans << endl ;  $ }
int main ( ) {  $ ~long long s , t , q ;  $ ~cin >> t >> s >> q ;  $ ~long long ans = 0 ;  $ ~while ( s < t ) {  $ ~~s *= q ;  $ ~~ans ++ ;  $ ~}  $ ~cout << ans << endl ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~int t , s , q ;  $ ~cin >> t >> s >> q ;  $ ~int ans = 1 ;  $ ~while ( s * q < t ) {  $ ~~ans ++ ;  $ ~~s *= q ;  $ ~}  $ ~cout << ans << endl ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~int t , s , q ;  $ ~cin >> t >> s >> q ;  $ ~int ans = 0 ;  $ ~while ( s < t ) {  $ ~~s *= q ;  $ ~~ans ++ ;  $ ~}  $ ~cout << ans << endl ;  $ }
int main ( ) {  $ ~int t , s , q ;  $ ~cin >> t >> s >> q ;  $ ~int ans = 1 ;  $ ~int x = s * q ;  $ ~while ( x < t ) {  $ ~~ans ++ ;  $ ~~x *= q ;  $ ~}  $ ~cout << ans << endl ;  $ ~return 0 ;  $ }
int n , m ;  $ int b [ 200007 ] ;  $ int a [ 200007 ] , c [ 200007 ] ;  $ vector < int > v ;  $ int main ( ) {  $ ~int i , j , l , h , t = 0 ;  $ ~string s , s1 , s2 , s3 ;  $ ~long long RE , DE , HE ;  $ ~cin >> RE >> DE >> HE ;  $ ~while ( DE * HE < RE ) {  $ ~~t ++ ;  $ ~~DE *= HE ;  $ ~}  $ ~cout << t + 1 << endl ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~int a , b , c ;  $ ~int ans = 0 ;  $ ~cin >> a >> b >> c ;  $ ~while ( b < a ) {  $ ~~b *= c ;  $ ~~ans ++ ;  $ ~}  $ ~cout << ans << endl ;  $ }
int main ( ) {  $ ~int t , s , q ;  $ ~int count = 0 ;  $ ~cin >> t >> s >> q ;  $ ~while ( s < t ) {  $ ~~s = s * q ;  $ ~~count += 1 ;  $ ~}  $ ~cout << count << endl ;  $ }
int main ( ) {  $ ~double t , s , q , c = 0 , ans = 0 ;  $ ~cin >> t >> s >> q ;  $ ~while ( s < t ) {  $ ~~s = s * q ;  $ ~~ans ++ ;  $ ~}  $ ~cout << ans << endl ;  $ ~return 0 ;  $ }
const int maxn = 1e5 + 5 ;  $ int main ( ) {  $ ~long long t , s , q , ans = 0 ;  $ ~cin >> t >> s >> q ;  $ ~while ( s < t ) {  $ ~~s *= q ;  $ ~~ans ++ ;  $ ~}  $ ~cout << ans << endl ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~int t , s , q , ans = 0 ;  $ ~cin >> t >> s >> q ;  $ ~int downloaded = s ;  $ ~while ( downloaded < t ) {  $ ~~downloaded += s * ( q - 1 ) ;  $ ~~s = downloaded ;  $ ~~ans ++ ;  $ ~}  $ ~cout << ans << endl ;  $ ~return 0 ;  $ }
const int MOD = 1e9 + 7 ;  $ const int INF = INT_MAX ;  $ const long long LINF = LLONG_MAX ;  $ int ans ;  $ long double t , s , q ;  $ int main ( ) {  $ ~cin >> t >> s >> q ;  $ ~long double x = 0 , z = 0 , y = s ;  $ ~while ( s < t ) {  $ ~~s *= q ;  $ ~~ans ++ ;  $ ~}  $ ~cout << ans << endl ;  $ }
int ans , t , s , q ;  $ int main ( ) {  $ ~ans = 0 ;  $ ~cin >> t >> s >> q ;  $ ~while ( s < t ) {  $ ~~s *= q ;  $ ~~ans ++ ;  $ ~}  $ ~cout << ans << endl ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~int a , b , c ;  $ ~cin >> a ;  $ ~cin >> b ;  $ ~cin >> c ;  $ ~int s ( b ) , x ( 0 ) ;  $ ~while ( s < a ) {  $ ~~s *= c ;  $ ~~++ x ;  $ ~}  $ ~cout << x << endl ;  $ ~return 0 ;  $ }
long long t , s , q ;  $ int main ( ) {  $ ~int cnt = 1 ;  $ ~cin >> t >> s >> q ;  $ ~while ( 1 ) {  $ ~~if ( s * q >= t )  $ ~~~break ;  $ ~~else {  $ ~~~s = s * q ;  $ ~~~cnt ++ ;  $ ~~}  $ ~}  $ ~cout << cnt << endl ;  $ ~return 0 ;  $ }
int n , s , q ;  $ int main ( ) {  $ ~int t , w , i , j , k , cnt , ans = 0 ;  $ ~cin >> n >> s >> q ;  $ ~while ( s < n ) {  $ ~~ans ++ ;  $ ~~s *= q ;  $ ~}  $ ~cout << ans << endl ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~int t , s , q , cnt = 0 ;  $ ~cin >> t >> s >> q ;  $ ~while ( s < t ) {  $ ~~cnt ++ ;  $ ~~s *= q ;  $ ~}  $ ~cout << cnt << endl ;  $ }
int main ( ) {  $ ~int t , s , q ;  $ ~while ( cin >> t >> s >> q ) {  $ ~~int ans = 0 ;  $ ~~while ( s < t ) {  $ ~~~ans ++ ;  $ ~~~s *= q ;  $ ~~}  $ ~~cout << ans << endl ;  $ ~}  $ }
int main ( ) {  $ ~int T , S , q ;  $ ~cin >> T >> S >> q ;  $ ~cout << ( int ) ceil ( log ( T * 1.0 / S ) / log ( q ) ) << endl ;  $ }
int main ( ) {  $ ~long long t , s , q ;  $ ~cin >> t >> s >> q ;  $ ~long long ans = 0 ;  $ ~while ( s < t ) {  $ ~~s *= q ;  $ ~~ans ++ ;  $ ~}  $ ~cout << ans << endl ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~long long int n , m , a ;  $ ~cin >> n >> m >> a ;  $ ~n = n % 10000000000 ;  $ ~m = m % 10000000000 ;  $ ~a = a % 10000000000 ;  $ ~long long int ans ;  $ ~if ( a > n && a > m )  $ ~~ans = 1 ;  $ ~else {  $ ~~if ( ( n % a ) > 0 ) {  $ ~~~n = n / a + 1 ;  $ ~~} else {  $ ~~~n = n / a ;  $ ~~}  $ ~~if ( m % a > 0 ) {  $ ~~~m = m / a + 1 ;  $ ~~} else {  $ ~~~m = m / a ;  $ ~~}  $ ~~ans = n * m ;  $ ~}  $ ~cout << ans << endl ;  $ }
int main ( ) {  $ ~int n , m , a ;  $ ~cin >> n >> m >> a ;  $ ~cout << 1 ll * ( n + a - 1 ) / a * ( ( m + a - 1 ) / a ) << endl ;  $ }
int m , n , a ;  $ int main ( ) {  $ ~cin >> m ;  $ ~cin >> n ;  $ ~cin >> a ;  $ ~int l = ceil ( n / ( a * 1.0 ) ) ;  $ ~int w = ceil ( m / ( a * 1.0 ) ) ;  $ ~cout << ( long long ) l * ( long long ) w << endl ;  $ ~return 0 ;  $ }
int m , n , a ;  $ int main ( ) {  $ ~cin >> m ;  $ ~cin >> n ;  $ ~cin >> a ;  $ ~int l = ceil ( n / ( a * 1.0 ) ) ;  $ ~int w = ceil ( m / ( a * 1.0 ) ) ;  $ ~cout << ( long long ) l * ( long long ) w << endl ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~long long a , b , c ;  $ ~cin >> a >> b >> c ;  $ ~cout << ( ( ( a + c - 1 ) / c ) * ( ( b + c - 1 ) / c ) ) << "\n" ;  $ }
int main ( ) {  $ ~double n , m , a ;  $ ~cin >> n >> m >> a ;  $ ~cout << ( long long ) ceil ( n / a * 1.0 ) * ( long long ) ceil ( m / a * 1.0 ) << endl ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~long long n , m , a , x , y ;  $ ~cin >> n >> m >> a ;  $ ~if ( n % a != 0 and m % a != 0 ) {  $ ~~x = n / a + 1 ;  $ ~~y = m / a + 1 ;  $ ~} else if ( n % a == 0 and m % a != 0 ) {  $ ~~x = n / a ;  $ ~~y = m / a + 1 ;  $ ~} else if ( n % a != 0 and m % a == 0 ) {  $ ~~x = n / a + 1 ;  $ ~~y = m / a ;  $ ~} else {  $ ~~x = n / a ;  $ ~~y = m / a ;  $ ~}  $ ~cout << x * y << endl ;  $ }
int main ( ) {  $ ~long long n , m , a , x , y ;  $ ~cin >> n >> m >> a ;  $ ~if ( n % a != 0 and m % a != 0 ) {  $ ~~x = n / a + 1 ;  $ ~~y = m / a + 1 ;  $ ~} else if ( n % a == 0 and m % a != 0 ) {  $ ~~x = n / a ;  $ ~~y = m / a + 1 ;  $ ~} else if ( n % a != 0 and m % a == 0 ) {  $ ~~x = n / a + 1 ;  $ ~~y = m / a ;  $ ~} else {  $ ~~x = n / a ;  $ ~~y = m / a ;  $ ~}  $ ~cout << x * y << endl ;  $ }
int main ( ) {  $ ~long long i , j , c1 , c2 , n , m , a ;  $ ~cin >> n >> m >> a ;  $ ~if ( n % a == 0 )  $ ~~c1 = n / a ;  $ ~else  $ ~~c1 = n / a + 1 ;  $ ~if ( m % a == 0 )  $ ~~c2 = m / a ;  $ ~else  $ ~~c2 = m / a + 1 ;  $ ~cout << c1 * c2 << endl ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~long long n , m , a ;  $ ~cin >> n >> m >> a ;  $ ~long long stones = ( n / a ) * ( m / a ) ;  $ ~if ( n % a != 0 ) { stones += m / a ; }  $ ~if ( m % a != 0 ) { stones += n / a ; }  $ ~if ( m % a != 0 && n % a != 0 ) { ++ stones ; }  $ ~cout << stones << endl ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~long long n , m , a ;  $ ~cin >> n >> m >> a ;  $ ~long long ans = 0 ;  $ ~if ( n % a == 0 ) {  $ ~~n = n / a ;  $ ~} else {  $ ~~n = n / a + 1 ;  $ ~}  $ ~if ( m % a == 0 ) {  $ ~~m = m / a ;  $ ~} else {  $ ~~m = m / a + 1 ;  $ ~}  $ ~cout << m * n << endl ;  $ ~return 0 ;  $ }
int m , n , a ;  $ int main ( ) {  $ ~cin >> m >> n >> a ;  $ ~int l = ceil ( n / ( a * 1.0 ) ) ;  $ ~int w = ceil ( m / ( a * 1.0 ) ) ;  $ ~cout << ( ( long long ) l * ( long long ) w ) << endl ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~double n , m , a ;  $ ~cin >> n >> m >> a ;  $ ~cout << ( long long ) ceil ( n / a ) * ( long long ) ceil ( m / a ) << endl ;  $ }
int main ( ) {  $ ~long long n , m , a ;  $ ~long long i = 0 , j = 0 ;  $ ~while ( cin >> n >> m >> a ) {  $ ~~if ( n % a )  $ ~~~i = n / a + 1 ;  $ ~~else  $ ~~~i = n / a ;  $ ~~if ( m % a )  $ ~~~j = m / a + 1 ;  $ ~~else  $ ~~~j = m / a ;  $ ~~cout << i * j << endl ;  $ ~}  $ ~return 0 ;  $ }
int main ( ) {  $ ~long long n , m , a ;  $ ~long long i = 0 , j = 0 ;  $ ~while ( cin >> n >> m >> a ) {  $ ~~if ( n % a )  $ ~~~i = n / a + 1 ;  $ ~~else  $ ~~~i = n / a ;  $ ~~if ( m % a )  $ ~~~j = m / a + 1 ;  $ ~~else  $ ~~~j = m / a ;  $ ~~cout << i * j << endl ;  $ ~}  $ ~return 0 ;  $ }
int main ( ) {  $ ~long long n ;  $ ~long long m ;  $ ~long long a ;  $ ~cin >> n >> m >> a ;  $ ~cout << ( ( n + a - 1 ) / a ) * ( ( m + a - 1 ) / a ) << endl ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~long long n ;  $ ~long long m ;  $ ~long long a ;  $ ~cin >> n >> m >> a ;  $ ~cout << ( ( n + a - 1 ) / a ) * ( ( m + a - 1 ) / a ) << endl ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~long long int n , m , a , ans ;  $ ~while ( cin >> n >> m >> a ) {  $ ~~if ( a > n && a > m )  $ ~~~cout << "1" << endl ;  $ ~~else {  $ ~~~if ( n % a > 0 )  $ ~~~~n = ( n / a ) + 1 ;  $ ~~~else  $ ~~~~n = ( n / a ) ;  $ ~~~if ( m % a > 0 )  $ ~~~~m = ( m / a ) + 1 ;  $ ~~~else  $ ~~~~m = ( m / a ) ;  $ ~~~ans = n * m ;  $ ~~~cout << ans << endl ;  $ ~~}  $ ~}  $ ~return 0 ;  $ }
int main ( ) {  $ ~long long x , y , a ;  $ ~cin >> x >> y >> a ;  $ ~long long xx = x / a , yy = y / a ;  $ ~if ( x % a != 0 ) xx ++ ;  $ ~if ( y % a != 0 ) yy ++ ;  $ ~cout << xx * yy << endl ;  $ }
int main ( ) {  $ ~long long x , y , a ;  $ ~cin >> x >> y >> a ;  $ ~long long xx = x / a , yy = y / a ;  $ ~if ( x % a != 0 ) xx ++ ;  $ ~if ( y % a != 0 ) yy ++ ;  $ ~cout << xx * yy << endl ;  $ }
int main ( ) {  $ ~long long n , m , a ;  $ ~cin >> n >> m >> a ;  $ ~long long rows = ( n + a - 1 ) / a ;  $ ~long long cols = ( m + a - 1 ) / a ;  $ ~cout << rows * cols << endl ;  $ }
int main ( ) {  $ ~long long n , m , a ;  $ ~cin >> n >> m >> a ;  $ ~if ( n % a == 0 )  $ ~~n /= a ;  $ ~else  $ ~~n = n / a + 1 ;  $ ~if ( m % a == 0 )  $ ~~m /= a ;  $ ~else  $ ~~m = m / a + 1 ;  $ ~cout << n * m << endl ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~long long a , b , c ;  $ ~while ( cin >> a >> b >> c ) {  $ ~~long long d , e ;  $ ~~if ( a % c != 0 ) d = a / c + 1 ;  $ ~~if ( b % c != 0 ) e = b / c + 1 ;  $ ~~if ( a % c == 0 ) d = a / c ;  $ ~~if ( b % c == 0 ) e = b / c ;  $ ~~long long f = d * e ;  $ ~~cout << f << endl ;  $ ~}  $ ~return 0 ;  $ }
int main ( ) {  $ ~long long n , m , a ;  $ ~while ( cin >> n >> m >> a ) cout << ( ( n + a - 1 ) / a ) * ( ( m + a - 1 ) / a ) << endl ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~long long x , y , a ;  $ ~cin >> x >> y >> a ;  $ ~long long xx = x / a , yy = y / a ;  $ ~if ( x % a != 0 ) xx ++ ;  $ ~if ( y % a != 0 ) yy ++ ;  $ ~cout << xx * yy << endl ;  $ }
int main ( ) {  $ ~long long n , m , a ;  $ ~cin >> n >> m >> a ;  $ ~long long nN , nM ;  $ ~nN = n / a ;  $ ~nM = m / a ;  $ ~if ( n % a != 0 ) { nN ++ ; }  $ ~if ( m % a != 0 ) { nM ++ ; }  $ ~cout << nN * nM << endl ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~long long a , b , c , d ;  $ ~cin >> a >> b >> c ;  $ ~if ( c >= a && c >= b ) {  $ ~~cout << "1" << endl ;  $ ~~return 0 ;  $ ~}  $ ~if ( c < a && c >= b ) {  $ ~~if ( a % c == 0 )  $ ~~~cout << a / c << endl ;  $ ~~else  $ ~~~cout << a / c + 1 << endl ;  $ ~~return 0 ;  $ ~}  $ ~if ( c >= a && c < b ) {  $ ~~if ( b % c == 0 )  $ ~~~cout << b / c << endl ;  $ ~~else  $ ~~~cout << b / c + 1 << endl ;  $ ~~return 0 ;  $ ~}  $ ~if ( c < a && c < b ) {  $ ~~if ( b % c == 0 && a % c == 0 )  $ ~~~cout << ( a * b ) / ( c * c ) << endl ;  $ ~~else if ( b % c != 0 && a % c == 0 )  $ ~~~cout << ( a / c ) * ( b / c + 1 ) << endl ;  $ ~~else if ( b % c == 0 && a % c != 0 )  $ ~~~cout << ( b / c ) * ( a / c + 1 ) << endl ;  $ ~~else  $ ~~~cout << ( a / c + 1 ) * ( b / c + 1 ) << endl ;  $ ~~return 0 ;  $ ~}  $ ~return 0 ;  $ }
int main ( ) {  $ ~int noOfOranges , Orange , maxSize , maxWaste , Waste = 0 , cnt = 0 ;  $ ~cin >> noOfOranges >> maxSize >> maxWaste ;  $ ~for ( int i = 0 ; i < noOfOranges ; i ++ ) {  $ ~~cin >> Orange ;  $ ~~if ( Orange > maxSize )  $ ~~~continue ;  $ ~~else {  $ ~~~Waste += Orange ;  $ ~~~if ( Waste > maxWaste ) {  $ ~~~~cnt ++ ;  $ ~~~~Waste = 0 ;  $ ~~~}  $ ~~}  $ ~}  $ ~cout << cnt << endl ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~int n , b , d , v , sum = 0 , c = 0 ;  $ ~cin >> n >> b >> d ;  $ ~for ( int x = 0 ; x < n ; x ++ ) {  $ ~~cin >> v ;  $ ~~if ( v <= b ) sum += v ;  $ ~~if ( sum > d ) {  $ ~~~sum = 0 ;  $ ~~~c ++ ;  $ ~~}  $ ~}  $ ~cout << c << endl ;  $ ~return 0 ;  $ }
const int N = 1e5 + 100 ;  $ const double PI = 3.14159 ;  $ vector < bool > v ;  $ int n , m , a [ N ] , now , ans , b , d ;  $ set < int > st ;  $ string s , t ;  $ int main ( ) {  $ ~cin >> n >> b >> d ;  $ ~for ( int i = 0 ; i < n ; i ++ ) {  $ ~~cin >> a [ i ] ;  $ ~~if ( a [ i ] > b ) continue ;  $ ~~now += a [ i ] ;  $ ~~if ( now > d ) {  $ ~~~ans ++ ;  $ ~~~now = 0 ;  $ ~~}  $ ~}  $ ~cout << ans << endl ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~int n { } , b { } , d { } , a { } , c { } , c2 { } ;  $ ~cin >> n >> b >> d ;  $ ~while ( n -- ) {  $ ~~cin >> a ;  $ ~~if ( a <= b ) { c += a ; } ;  $ ~~if ( c > d ) {  $ ~~~c2 ++ ;  $ ~~~c = 0 ;  $ ~~}  $ ~}  $ ~cout << c2 << endl ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~int n , b , d , result = 0 , counter = 0 ;  $ ~cin >> n >> b >> d ;  $ ~int oranges [ n ] ;  $ ~for ( int i = 0 ; i < n ; i ++ ) {  $ ~~cin >> oranges [ i ] ;  $ ~~if ( oranges [ i ] <= b ) { counter += oranges [ i ] ; }  $ ~~if ( counter > d ) {  $ ~~~result ++ ;  $ ~~~counter = 0 ;  $ ~~}  $ ~}  $ ~cout << result << endl ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~int n ;  $ ~cin >> n ;  $ ~int b ;  $ ~cin >> b ;  $ ~int d ;  $ ~cin >> d ;  $ ~int orange , volume = 0 , counter = 0 ;  $ ~for ( int i = 0 ; i < n ; i ++ ) {  $ ~~cin >> orange ;  $ ~~if ( orange <= b ) volume += orange ;  $ ~~if ( volume > d ) {  $ ~~~volume = 0 ;  $ ~~~counter ++ ;  $ ~~}  $ ~}  $ ~cout << counter << endl ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~int n , b , d ;  $ ~cin >> n >> b >> d ;  $ ~int temp , ans = 0 ;  $ ~long long cont = 0 ;  $ ~for ( int i = 0 ; i < n ; i ++ ) {  $ ~~cin >> temp ;  $ ~~if ( temp <= b ) {  $ ~~~cont += temp ;  $ ~~~if ( cont > d ) {  $ ~~~~ans ++ ;  $ ~~~~cont = 0 ;  $ ~~~}  $ ~~}  $ ~}  $ ~cout << ans << '\n' ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~long double n = 0 ;  $ ~long double s = 0 ;  $ ~long double b = 0 ;  $ ~long double d = 0 ;  $ ~long double e = 0 ;  $ ~int output = 0 ;  $ ~cin >> n >> b >> d ;  $ ~for ( int i = 0 ; i < n ; i ++ ) {  $ ~~cin >> s ;  $ ~~if ( s > b ) {  $ ~~~continue ;  $ ~~} else {  $ ~~~e += s ;  $ ~~~if ( e > d ) {  $ ~~~~++ output ;  $ ~~~~e = 0 ;  $ ~~~}  $ ~~}  $ ~}  $ ~cout << output << endl ;  $ }
int main ( ) {  $ ~long long int n , b , d , i ;  $ ~while ( cin >> n >> b >> d ) {  $ ~~long long int a [ n + 5 ] , sum = 0 , c = 0 ;  $ ~~for ( i = 0 ; i < n ; i ++ ) { cin >> a [ i ] ; }  $ ~~for ( i = 0 ; i < n ; i ++ ) {  $ ~~~if ( a [ i ] <= b ) { sum += a [ i ] ; }  $ ~~~if ( sum > d ) {  $ ~~~~sum = 0 ;  $ ~~~~c ++ ;  $ ~~~}  $ ~~}  $ ~~cout << c << endl ;  $ ~}  $ }
int main ( ) {  $ ~unsigned long int n , b , d , v , sum = 0 , c = 0 ;  $ ~cin >> n >> b >> d ;  $ ~for ( int x = 0 ; x < n ; x ++ ) {  $ ~~cin >> v ;  $ ~~if ( v <= b ) sum += v ;  $ ~~if ( sum > d ) {  $ ~~~sum = 0 ;  $ ~~~c ++ ;  $ ~~}  $ ~}  $ ~cout << c << endl ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~int n , b , d , i , cnt = 0 , a [ 100001 ] , tmp = 0 ;  $ ~cin >> n >> b >> d ;  $ ~for ( i = 0 ; i < n ; i ++ ) { cin >> a [ i ] ; }  $ ~for ( i = 0 ; i < n ; i ++ ) {  $ ~~if ( a [ i ] <= b and cnt <= d ) cnt += a [ i ] ;  $ ~~if ( cnt > d ) {  $ ~~~cnt = 0 ;  $ ~~~tmp ++ ;  $ ~~}  $ ~}  $ ~cout << tmp << endl ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~int n , b , d , result = 0 , temp = 0 ;  $ ~cin >> n >> b >> d ;  $ ~for ( int i = 0 ; i < n ; i ++ ) {  $ ~~int size ;  $ ~~cin >> size ;  $ ~~if ( size <= b ) { temp += size ; }  $ ~~if ( temp > d ) {  $ ~~~result ++ ;  $ ~~~temp = 0 ;  $ ~~}  $ ~}  $ ~cout << result << endl ;  $ ~return 0 ;  $ }
int n , b , d ;  $ int main ( ) {  $ ~cin >> n >> b >> d ;  $ ~int ans = 0 , cnt = 0 ;  $ ~for ( int i = 0 ; i < n ; i ++ ) {  $ ~~int x ;  $ ~~cin >> x ;  $ ~~if ( x <= b ) {  $ ~~~cnt += x ;  $ ~~~if ( cnt > d ) {  $ ~~~~ans ++ ;  $ ~~~~cnt = 0 ;  $ ~~~}  $ ~~}  $ ~}  $ ~cout << ans << "\n" ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~int n , b , d , sum = 0 , ans = 0 ;  $ ~cin >> n >> b >> d ;  $ ~for ( int i = 0 ; i < n ; i ++ ) {  $ ~~int t ;  $ ~~cin >> t ;  $ ~~if ( t <= b ) {  $ ~~~sum += t ;  $ ~~~if ( sum > d ) {  $ ~~~~sum = 0 ;  $ ~~~~ans ++ ;  $ ~~~}  $ ~~}  $ ~}  $ ~cout << ans << endl ;  $ }
int main ( ) {  $ ~int n , b , d ;  $ ~cin >> n >> b >> d ;  $ ~int sum = 0 ;  $ ~int count = 0 ;  $ ~for ( int i = 0 ; i < n ; i ++ ) {  $ ~~int a ;  $ ~~cin >> a ;  $ ~~if ( a <= b ) { sum += a ; }  $ ~~if ( sum > d ) {  $ ~~~count ++ ;  $ ~~~sum = 0 ;  $ ~~}  $ ~}  $ ~cout << count << endl ;  $ }
int s [ 100000 + 5 ] ;  $ int main ( ) {  $ ~int n , b , d , ans = 0 , sum = 0 ;  $ ~cin >> n >> b >> d ;  $ ~for ( int i = 0 ; i < n ; i ++ ) {  $ ~~cin >> s [ i ] ;  $ ~~if ( s [ i ] > b )  $ ~~~continue ;  $ ~~else  $ ~~~sum += s [ i ] ;  $ ~~if ( sum > d ) {  $ ~~~sum = 0 ;  $ ~~~ans ++ ;  $ ~~}  $ ~}  $ ~cout << ans << endl ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~long n , b , d , c = 0 ;  $ ~cin >> n >> b >> d ;  $ ~long orange [ n ] ;  $ ~long long out = 0 ;  $ ~for ( int i = 0 ; i < n ; i ++ ) {  $ ~~cin >> orange [ i ] ;  $ ~~if ( orange [ i ] > b )  $ ~~~continue ;  $ ~~else {  $ ~~~out += orange [ i ] ;  $ ~~~if ( out > d ) {  $ ~~~~c ++ ;  $ ~~~~out = 0 ;  $ ~~~}  $ ~~}  $ ~}  $ ~cout << c << endl ;  $ }
long long int n , b , d ;  $ long long int a [ 100007 ] ;  $ int main ( ) {  $ ~cin >> n >> b >> d ;  $ ~{  $ ~~for ( long long int  $ ~}  $ ~long long int c = 0 ;  $ ~long long int s = 0 ;  $ ~for ( long long int i = 0 ; i <= n - 1 ; i ++ ) {  $ ~~if ( a [ i ] <= b ) {  $ ~~~s += a [ i ] ;  $ ~~~if ( s > d ) {  $ ~~~~c ++ ;  $ ~~~~s = 0 ;  $ ~~~}  $ ~~}  $ ~}  $ ~cout << c << "\n" ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~int n , b , d ;  $ ~cin >> n >> b >> d ;  $ ~int tot = 0 , ret = 0 ;  $ ~for ( int i = 0 ; i < n ; i ++ ) {  $ ~~int a ;  $ ~~cin >> a ;  $ ~~if ( a > b ) continue ;  $ ~~tot += a ;  $ ~~if ( tot > d ) {  $ ~~~ret ++ ;  $ ~~~tot = 0 ;  $ ~~}  $ ~}  $ ~cout << ret << endl ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~int x , y , a , b ;  $ ~cin >> x >> y >> a >> b ;  $ ~x = ( x * y ) / __gcd ( x , y ) ;  $ ~cout << b / x - ( a - 1 ) / x << "\n" ;  $ ~return 0 ;  $ }
long long gcd ( long long a , long long b ) {  $ ~if ( a == 0 || b == 0 ) return 0 ;  $ ~if ( a == b ) return a ;  $ ~if ( a > b ) return gcd ( a - b , b ) ;  $ ~return gcd ( a , b - a ) ;  $ }  $ int main ( ) {  $ ~long long f , l , x , y , a , b , i , cnt = 0 ;  $ ~cin >> x >> y >> a >> b ;  $ ~long long lcm = ( x * y ) / gcd ( x , y ) ;  $ ~cout << ( ( b / lcm ) - ( ( a - 1 ) / lcm ) ) << endl ;  $ }
int main ( ) {  $ ~int x , y , a , b ;  $ ~cin >> x >> y >> a >> b ;  $ ~int val = ( x * y ) / ( __gcd ( x , y ) ) ;  $ ~int ans ;  $ ~if ( a % val == 0 ) {  $ ~~ans = b / val - a / val + 1 ;  $ ~} else {  $ ~~ans = b / val - a / val ;  $ ~}  $ ~cout << ans << "\n" ;  $ }
int main ( ) {  $ ~long long int a , b , x , y ;  $ ~cin >> x >> y >> a >> b ;  $ ~long long int g = __gcd ( x , y ) ;  $ ~x = ( x * y ) / g ;  $ ~if ( a % x == 0 )  $ ~~cout << b / x - a / x + 1 ;  $ ~else  $ ~~cout << b / x - a / x ;  $ ~cout << endl ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~int x , y , a , b ;  $ ~cin >> x >> y >> a >> b ;  $ ~int lcm = x * y / __gcd ( x , y ) ;  $ ~int ans = b / lcm - ( a - 1 ) / lcm ;  $ ~cout << ans << endl ;  $ ~return 0 ;  $ }
int gcd ( int a , int b ) {  $ ~return ( b ? gcd ( b , a % b ) : a ) ;  $ }  $ int main ( ) {  $ ~int x , y , a , b , v , k ;  $ ~cin >> x >> y >> a >> b ;  $ ~v = x * y / gcd ( x , y ) ;  $ ~k = b / v - ( a - 1 ) / v ;  $ ~cout << k << endl ;  $ ~return 0 ;  $ }
int gcd ( int a , int b ) {  $ ~return b == 0 ? a : gcd ( b , a % b ) ;  $ }  $ int lcm ( int a , int b ) {  $ ~return a * ( b / gcd ( a , b ) ) ;  $ }  $ int main ( ) {  $ ~int x , y , a , b ;  $ ~cin >> x >> y >> a >> b ;  $ ~int MCM = lcm ( x , y ) ;  $ ~cout << ( b / MCM ) - ( ( a - 1 ) / MCM ) << endl ;  $ ~return 0 ;  $ }
int gcd ( int a , int b ) {  $ ~if ( b == 0 ) return a ;  $ ~return gcd ( b , a % b ) ;  $ }  $ int LCM ( int a , int b ) {  $ ~return ( a * b ) / gcd ( a , b ) ;  $ }  $ int main ( ) {  $ ~int ans , x , y , aa , bb , m ;  $ ~cin >> x >> y >> aa >> bb ;  $ ~m = LCM ( max ( x , y ) , min ( x , y ) ) ;  $ ~ans = ( bb / m ) - ( aa - 1 ) / m ;  $ ~cout << ans << endl ;  $ }
int main ( ) {  $ ~int x , y , a , b , m , n ;  $ ~cin >> x >> y >> a >> b ;  $ ~int p = x , q = y ;  $ ~while ( q ) {  $ ~~n = q ;  $ ~~q = p % q ;  $ ~~p = n ;  $ ~}  $ ~n = ( x * y ) / n ;  $ ~m = a % n ? 0 : 1 ;  $ ~cout << ( b / n - a / n + m ) << endl ;  $ ~return 0 ;  $ }
int f ( int a , int b ) {  $ ~int t , x = a , y = b ;  $ ~if ( x < y ) {  $ ~~t = x ;  $ ~~x = y ;  $ ~~y = t ;  $ ~}  $ ~while ( x % y != 0 ) {  $ ~~t = y ;  $ ~~y = x % y ;  $ ~~x = t ;  $ ~}  $ ~return a * b / y ;  $ }  $ int main ( ) {  $ ~int x , y , a , b ;  $ ~while ( cin >> x >> y >> a >> b ) {  $ ~~int t = f ( x , y ) ;  $ ~~int p = ( a % t == 0 ) ? b / t - a / t + 1 : b / t - a / t ;  $ ~~cout << p << endl ;  $ ~}  $ ~return 0 ;  $ }
int GCD ( int a , int b ) ;  $ int main ( ) {  $ ~int x , y ;  $ ~int a , b ;  $ ~cin >> x >> y >> a >> b ;  $ ~x = x * y / GCD ( x , y ) ;  $ ~cout << b / x - ( a - 1 ) / x << endl ;  $ }  $ int GCD ( int a , int b ) {  $ ~int n = a % b ;  $ ~while ( n != 0 ) {  $ ~~a = b ;  $ ~~b = n ;  $ ~~n = a % b ;  $ ~}  $ ~return b ;  $ }
int gcd ( int a , int b ) {  $ ~if ( a == 0 ) return b ;  $ ~return gcd ( b % a , a ) ;  $ }  $ int main ( ) {  $ ~int x , y ;  $ ~int a , b ;  $ ~cin >> x ;  $ ~cin >> y ;  $ ~cin >> a ;  $ ~cin >> b ;  $ ~int M = x / gcd ( x , y ) * y ;  $ ~int l = a / M ;  $ ~int r = b / M ;  $ ~if ( l * M < a ) { l ++ ; }  $ ~cout << r - l + 1 << endl ;  $ ~return 0 ;  $ }
int x , y , a , b ;  $ int ans ;  $ int GCD ( int k , int l ) {  $ ~if ( l == 0 )  $ ~~return k ;  $ ~else  $ ~~return GCD ( l , k % l ) ;  $ }  $ int LCM ( int m , int n ) {  $ ~return ( m * n ) / GCD ( m , n ) ;  $ }  $ int main ( ) {  $ ~ans = 0 ;  $ ~cin >> x >> y >> a >> b ;  $ ~int kpk ;  $ ~kpk = LCM ( x , y ) ;  $ ~ans = floor ( b / kpk ) - floor ( ( a - 1 ) / kpk ) ;  $ ~cout << ans << endl ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~int x , y , a , b , p , ans , u , v , gcd , lcm ;  $ ~cin >> x >> y >> a >> b ;  $ ~p = __gcd ( x , y ) ;  $ ~lcm = ( x * y ) / p ;  $ ~u = a / lcm ;  $ ~v = b / lcm ;  $ ~ans = v - u ;  $ ~if ( ( a % lcm ) == 0 ) { ans = ans + 1 ; }  $ ~cout << ans << endl ;  $ ~return 0 ;  $ }
int gcd ( int a , int b ) {  $ ~return b == 0 ? a : gcd ( b , a % b ) ;  $ }  $ int lcm ( int a , int b ) {  $ ~return a / gcd ( a , b ) * b ;  $ }  $ int main ( ) {  $ ~int x , y , a , b ;  $ ~cin >> x >> y >> a >> b ;  $ ~int LCM = lcm ( x , y ) ;  $ ~cout << ( b / LCM ) - ( ( a - 1 ) / LCM ) << endl ;  $ ~return 0 ;  $ }
int gcd ( int x , int y ) {  $ ~if ( y == 0 ) return x ;  $ ~return gcd ( y , x % y ) ;  $ }  $ int lcm ( int x , int y ) {  $ ~return ( x * y ) / gcd ( x , y ) ;  $ }  $ int main ( ) {  $ ~int x , y , a , b , ans = 0 ;  $ ~cin >> x >> y >> a >> b ;  $ ~ans = - a / lcm ( x , y ) + b / lcm ( x , y ) ;  $ ~if ( a % lcm ( x , y ) == 0 ) ans += 1 ;  $ ~cout << ans << endl ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~int x , y , a , b , p ;  $ ~cin >> x >> y >> a >> b ;  $ ~p = __gcd ( x , y ) ;  $ ~x = x * y ;  $ ~x = x / p ;  $ ~if ( a % x == 0 ) {  $ ~~a /= x ;  $ ~~a -- ;  $ ~} else {  $ ~~a = a / x ;  $ ~}  $ ~b = b / x ;  $ ~cout << b - a << endl ;  $ ~return 0 ;  $ }
int gcd ( int a , int b ) {  $ ~while ( b > 0 ) {  $ ~~int tmp = b ;  $ ~~b = a % b ;  $ ~~a = tmp ;  $ ~}  $ ~return a ;  $ }  $ int lcm ( int a , int b ) {  $ ~return a * b / gcd ( a , b ) ;  $ }  $ int main ( ) {  $ ~cout << setprecision ( 12 ) ;  $ ~int x ;  $ ~cin >> x ;  $ ~;  $ ~int y ;  $ ~cin >> y ;  $ ~;  $ ~int a ;  $ ~cin >> a ;  $ ~;  $ ~int b ;  $ ~cin >> b ;  $ ~;  $ ~cout << b / lcm ( x , y ) - ( a - 1 ) / lcm ( x , y ) << endl ;  $ }
int main ( ) {  $ ~int a , b , c , x , y , z ;  $ ~cin >> x >> y >> a >> b ;  $ ~z = ( x * y ) / __gcd ( x , y ) ;  $ ~c = b / z ;  $ ~c -= ( a - 1 ) / z ;  $ ~cout << c << "\n" ;  $ ~return 0 ;  $ }
int gcd ( int x , int y ) {  $ ~if ( x == y ) return x ;  $ ~while ( x != 0 && y != 0 ) {  $ ~~if ( x > y )  $ ~~~x %= y ;  $ ~~else  $ ~~~y %= x ;  $ ~}  $ ~return x < y ? y : x ;  $ }  $ int main ( ) {  $ ~int x , y , a , b ;  $ ~cin >> x >> y >> a >> b ;  $ ~int z = x * y / gcd ( x , y ) ;  $ ~cout << b / z - ( a - 1 ) / z << endl ;  $ ~return 0 ;  $ }
const int INF = 0 x3f3f3f3f ;  $ int gcd ( int a , int b ) {  $ ~if ( a < b ) swap ( a , b ) ;  $ ~if ( ! b ) return a ;  $ ~return gcd ( b , a % b ) ;  $ }  $ int main ( ) {  $ ~int i , j , k ;  $ ~int n , m , a , b , c , d ;  $ ~cin >> a >> b >> c >> d ;  $ ~k = gcd ( a , b ) ;  $ ~k = a / k * b ;  $ ~m = d / k - c / k ;  $ ~if ( c % k == 0 ) m ++ ;  $ ~cout << m << endl ;  $ ~return 0 ;  $ }
long long gcd ( long long a , long long b ) {  $ ~if ( b == 0 )  $ ~~return a ;  $ ~else  $ ~~return gcd ( b , a % b ) ;  $ }  $ int main ( ) {  $ ~long long x , y , a , b ;  $ ~cin >> x >> y >> a >> b ;  $ ~long long g = gcd ( max ( x , y ) , min ( x , y ) ) ;  $ ~long long lcm = ( x * y ) / g ;  $ ~long long r = b / lcm ;  $ ~long long l = ( a - 1 ) / lcm ;  $ ~cout << r - l << endl ;  $ }
int main ( ) {  $ ~int cns = 0 , cnt = 0 x3f3f3f3f ;  $ ~int n , strength [ 100001 ] ;  $ ~cin >> n ;  $ ~for ( int i = 0 ; i < n ; i ++ ) {  $ ~~cin >> strength [ i ] ;  $ ~~if ( strength [ i ] > cns ) cns = strength [ i ] ;  $ ~~if ( strength [ i ] < cnt ) cnt = strength [ i ] ;  $ ~}  $ ~int vis = 0 ;  $ ~for ( int i = 0 ; i < n ; i ++ )  $ ~~if ( strength [ i ] == cns || strength [ i ] == cnt ) vis ++ ;  $ ~cout << n - vis << endl ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~int size , maior = - 0 x3f3f3f3f , menor = 0 x3f3f3f3f , c = 0 ;  $ ~cin >> size ;  $ ~vector < int > vetor ( size ) ;  $ ~for ( int i = 0 ; i < size ; i ++ ) {  $ ~~cin >> vetor [ i ] ;  $ ~~maior = max ( maior , vetor [ i ] ) , menor = min ( menor , vetor [ i ] ) ;  $ ~}  $ ~for ( int i = 0 ; i < size ; i ++ )  $ ~~if ( vetor [ i ] > menor && vetor [ i ] < maior ) c ++ ;  $ ~cout << c << '\n' ;  $ }
int main ( ) {  $ ~int n ;  $ ~cin >> n ;  $ ~int a [ n ] ;  $ ~int cnt = 0 ;  $ ~for ( int i = 1 ; i <= n ; i ++ ) { cin >> a [ i ] ; }  $ ~sort ( a + 1 , a + 1 + n ) ;  $ ~if ( n == 1 || n == 2 )  $ ~~cout << 0 << endl ;  $ ~else if ( n >= 3 ) {  $ ~~int minn = a [ 1 ] ;  $ ~~int mixx = a [ n ] ;  $ ~~for ( int i = 2 ; i <= n - 1 ; i ++ ) {  $ ~~~if ( a [ i ] > minn && a [ i ] < mixx ) cnt ++ ;  $ ~~}  $ ~~cout << cnt << endl ;  $ ~}  $ ~return 0 ;  $ }
int main ( ) {  $ ~int a [ 100010 ] , n ;  $ ~cin >> n ;  $ ~for ( int i = 1 ; i <= n ; i ++ ) cin >> a [ i ] ;  $ ~sort ( a + 1 , a + n + 1 ) ;  $ ~int b = a [ 1 ] , c = a [ n ] ;  $ ~int ans = 0 ;  $ ~for ( int i = 1 ; i <= n ; i ++ ) {  $ ~~if ( b < a [ i ] && a [ i ] < c ) ans ++ ;  $ ~}  $ ~cout << ans << endl ;  $ ~return 0 ;  $ }
const int MAX = 1e5 + 5 ;  $ int n , arr [ MAX ] , cnt , ans ;  $ set < int > dict ;  $ int main ( ) {  $ ~cin >> n ;  $ ~for ( int i = 0 ; i < n ; i ++ ) {  $ ~~cin >> arr [ i ] ;  $ ~~dict . insert ( arr [ i ] ) ;  $ ~}  $ ~cnt = 0 ;  $ ~for ( set < int > : : iterator it = dict . begin ( ) ; it != dict . end ( ) ; ++ it ) cnt ++ ;  $ ~if ( cnt < 3 ) {  $ ~~cout << "0" << endl ;  $ ~~return 0 ;  $ ~}  $ ~sort ( arr , arr + n ) ;  $ ~ans = n ;  $ ~for ( int i = 0 ; i < n ; i ++ ) {  $ ~~if ( ( arr [ i ] == arr [ 0 ] ) || ( arr [ i ] == arr [ n - 1 ] ) ) ans -- ;  $ ~}  $ ~cout << ans << endl ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~long long int i , n , cnt = 0 , a [ 100001 ] ;  $ ~cin >> n ;  $ ~for ( i = 0 ; i < n ; i ++ ) { cin >> a [ i ] ; }  $ ~int mx = a [ 0 ] ;  $ ~int mn = a [ 0 ] ;  $ ~for ( i = 0 ; i < n ; i ++ ) {  $ ~~if ( a [ i ] > mx ) mx = a [ i ] ;  $ ~~if ( a [ i ] < mn ) mn = a [ i ] ;  $ ~}  $ ~for ( i = 0 ; i < n ; i ++ ) {  $ ~~if ( a [ i ] > mn && a [ i ] < mx ) cnt ++ ;  $ ~}  $ ~cout << cnt << endl ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~int n ;  $ ~cin >> n ;  $ ~int arr [ n ] ;  $ ~for ( int i = 0 ; i < n ; i ++ ) cin >> arr [ i ] ;  $ ~sort ( arr , arr + n ) ;  $ ~int a = arr [ 0 ] , b = arr [ n - 1 ] ;  $ ~int x = upper_bound ( arr , arr + n , a ) - arr ;  $ ~int y = lower_bound ( arr , arr + n , b ) - arr ;  $ ~if ( y == 0 )  $ ~~cout << 0 << endl ;  $ ~else  $ ~~cout << y - x << endl ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~int s ;  $ ~cin >> s ;  $ ~int a [ s ] ;  $ ~for ( int i = 0 ; i < s ; i ++ ) cin >> a [ i ] ;  $ ~sort ( a , a + s ) ;  $ ~if ( s == 1 || s == 2 ) {  $ ~~cout << "0" << endl ;  $ ~~return 0 ;  $ ~}  $ ~int t = s - 2 ;  $ ~for ( int i = 1 ; i < s - 1 ; i ++ ) {  $ ~~if ( a [ i ] > a [ 0 ] && a [ i ] < a [ s - 1 ] )  $ ~~~continue ;  $ ~~else  $ ~~~t -- ;  $ ~}  $ ~cout << t << endl ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~int n ;  $ ~cin >> n ;  $ ~int t ;  $ ~vector < int > a ;  $ ~for ( int i = 0 ; i < n ; i ++ ) {  $ ~~cin >> t ;  $ ~~a . push_back ( t ) ;  $ ~}  $ ~if ( a . size ( ) < 3 ) {  $ ~~cout << 0 << endl ;  $ ~~return 0 ;  $ ~}  $ ~sort ( a . begin ( ) , a . end ( ) ) ;  $ ~int cnt = 0 ;  $ ~for ( int i = 1 ; i <= n - 2 ; i ++ ) {  $ ~~if ( a [ i ] > a [ 0 ] && a [ i ] < a [ n - 1 ] ) { cnt ++ ; }  $ ~}  $ ~cout << cnt << endl ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~int n , a [ 100000 ] , sum = 0 ;  $ ~cin >> n ;  $ ~for ( int i = 0 ; i < n ; i ++ ) { cin >> a [ i ] ; }  $ ~int max = a [ 0 ] , min = a [ 0 ] ;  $ ~for ( int j = 0 ; j < n ; j ++ ) {  $ ~~if ( max < a [ j ] ) max = a [ j ] ;  $ ~~if ( min > a [ j ] ) min = a [ j ] ;  $ ~}  $ ~for ( int t = 0 ; t < n ; t ++ ) {  $ ~~if ( a [ t ] < max && a [ t ] > min ) sum ++ ;  $ ~}  $ ~cout << sum << endl ;  $ }
int a [ 100005 ] ;  $ int main ( ) {  $ ~int n , c1 = 0 , c2 = 0 , maxx = 0 , minn = 1000000007 ;  $ ~cin >> n ;  $ ~for ( int i = 0 ; i < n ; i ++ ) {  $ ~~cin >> a [ i ] ;  $ ~~maxx = max ( maxx , a [ i ] ) , minn = min ( minn , a [ i ] ) ;  $ ~}  $ ~for ( int i = 0 ; i < n ; i ++ ) {  $ ~~if ( a [ i ] == maxx ) c1 ++ ;  $ ~~if ( a [ i ] == minn ) c2 ++ ;  $ ~}  $ ~if ( maxx == minn )  $ ~~cout << 0 << endl ;  $ ~else  $ ~~cout << n - c1 - c2 << endl ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~int n ;  $ ~cin >> n ;  $ ~int arr [ n ] ;  $ ~for ( int i = 0 ; i < n ; i ++ ) { cin >> arr [ i ] ; }  $ ~if ( n < 3 ) {  $ ~~cout << 0 << endl ;  $ ~~return 0 ;  $ ~}  $ ~sort ( arr , arr + n ) ;  $ ~int cnt = 0 ;  $ ~for ( int i = 1 ; i < n - 1 ; i ++ ) {  $ ~~if ( arr [ i ] > arr [ 0 ] && arr [ i ] < arr [ n - 1 ] ) cnt ++ ;  $ ~}  $ ~cout << cnt << endl ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~int n , b , s , ans = 0 ;  $ ~cin >> n ;  $ ~int arr [ n ] ;  $ ~for ( int i = 0 ; i < n ; ++ i ) { cin >> arr [ i ] ; }  $ ~b = arr [ 0 ] ;  $ ~s = arr [ 0 ] ;  $ ~for ( int i = 0 ; i < n ; ++ i ) {  $ ~~if ( arr [ i ] > b ) b = arr [ i ] ;  $ ~~if ( arr [ i ] < s ) s = arr [ i ] ;  $ ~}  $ ~for ( int i = 0 ; i < n ; ++ i ) {  $ ~~if ( arr [ i ] == b || arr [ i ] == s ) continue ;  $ ~~ans ++ ;  $ ~}  $ ~cout << ans << endl ;  $ ~return 0 ;  $ }
int a [ 100005 ] ;  $ int main ( ) {  $ ~int n , m ;  $ ~cin >> n ;  $ ~for ( int i = 1 ; i <= n ; i ++ ) cin >> a [ i ] ;  $ ~sort ( a + 1 , a + n + 1 ) ;  $ ~int t = n ;  $ ~for ( int i = 1 ; i <= n ; i ++ )  $ ~~if ( a [ i ] == a [ 1 ] || a [ i ] == a [ n ] ) t -- ;  $ ~cout << t << endl ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~int n , count = 0 ;  $ ~cin >> n ;  $ ~int a [ n ] ;  $ ~for ( int i = 0 ; i < n ; i ++ ) { cin >> a [ i ] ; }  $ ~sort ( a , a + n ) ;  $ ~int mx = * max_element ( a , a + n ) ;  $ ~int mn = * min_element ( a , a + n ) ;  $ ~for ( int i = 0 ; i < n ; i ++ ) {  $ ~~if ( a [ i ] > mn && a [ i ] < mx ) { count ++ ; }  $ ~}  $ ~cout << count << endl ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~long long n , cnt = 0 ;  $ ~cin >> n ;  $ ~vector < long long > x ( n ) ;  $ ~set < long long > y ;  $ ~for ( long long i = 0 ; i < n ; i ++ ) {  $ ~~cin >> x [ i ] ;  $ ~~y . insert ( x [ i ] ) ;  $ ~}  $ ~if ( n <= 2 || y . size ( ) <= 2 )  $ ~~cout << "0" << endl ;  $ ~else {  $ ~~sort ( x . begin ( ) , x . end ( ) ) ;  $ ~~for ( long long i = 0 ; i < n ; i ++ ) {  $ ~~~if ( x [ i ] != x [ 0 ] && x [ i ] != x [ n - 1 ] ) cnt ++ ;  $ ~~}  $ ~~cout << cnt << endl ;  $ ~}  $ ~return 0 ;  $ }
int main ( ) {  $ ~int n ;  $ ~cin >> n ;  $ ~vector < int > se ;  $ ~int answer = 0 ;  $ ~for ( int i = 0 ; i < n ; i ++ ) {  $ ~~int x ;  $ ~~cin >> x ;  $ ~~se . push_back ( x ) ;  $ ~}  $ ~sort ( se . begin ( ) , se . end ( ) ) ;  $ ~int min = se [ 0 ] ;  $ ~int max = se [ n - 1 ] ;  $ ~for ( int i = 0 ; i < n ; i ++ ) {  $ ~~if ( se [ i ] > min && se [ i ] < max ) { ++ answer ; }  $ ~}  $ ~cout << answer << endl ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~int a [ 100000 ] , n , c1 = 0 , c2 = 0 , mx = 0 , mn = 1000000000 ;  $ ~cin >> n ;  $ ~for ( int i = 0 ; i < n ; i ++ ) {  $ ~~cin >> a [ i ] ;  $ ~~mx = max ( mx , a [ i ] ) ;  $ ~~mn = min ( mn , a [ i ] ) ;  $ ~}  $ ~for ( int i = 0 ; i < n ; i ++ ) {  $ ~~if ( a [ i ] == mx ) c1 ++ ;  $ ~~if ( a [ i ] == mn ) c2 ++ ;  $ ~}  $ ~if ( mx == mn )  $ ~~cout << 0 << endl ;  $ ~else  $ ~~cout << ( n - c1 - c2 ) << endl ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~int n , res = 0 , mn = INT_MAX , mx = INT_MIN ;  $ ~int a [ 100001 ] ;  $ ~bool b1 = 0 , b2 = 0 ;  $ ~cin >> n ;  $ ~for ( int i = 0 ; i < n ; i ++ ) cin >> a [ i ] ;  $ ~for ( int i = 0 ; i < n ; i ++ ) {  $ ~~mn = min ( a [ i ] , mn ) ;  $ ~~mx = max ( a [ i ] , mx ) ;  $ ~}  $ ~for ( int i = 0 ; i < n ; i ++ ) {  $ ~~if ( a [ i ] > mn && a [ i ] < mx ) ++ res ;  $ ~}  $ ~cout << res << endl ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~int t , a [ 105 ] ;  $ ~cin >> t ;  $ ~for ( int i = 0 ; i < t ; i ++ ) { cin >> a [ i ] ; }  $ ~sort ( a , a + t ) ;  $ ~cout << a [ t - 1 ] << " " ;  $ ~for ( int i = 1 ; i <= t - 2 ; i ++ ) cout << a [ i ] << " " ;  $ ~cout << a [ 0 ] << "\n" ;  $ ~return 0 ;  $ }
int a [ 101 ] ;  $ int main ( ) {  $ ~int n ;  $ ~cin >> n ;  $ ~for ( int i = 1 ; i <= n ; ++ i ) cin >> a [ i ] ;  $ ~sort ( a + 1 , a + n + 1 ) ;  $ ~cout << a [ n ] << ' ' ;  $ ~for ( int i = 2 ; i <= n - 1 ; ++ i ) cout << a [ i ] << ' ' ;  $ ~cout << a [ 1 ] << endl ;  $ ~return 0 ;  $ }
const int mod = 1e9 + 7 ;  $ const int maxn = 110 ;  $ const int inf = 0 x3f3f3f3f ;  $ int p [ maxn ] ;  $ int q [ maxn ] ;  $ int main ( ) {  $ ~int t ;  $ ~while ( cin >> t ) {  $ ~~for ( int i = 1 ; i <= t ; i ++ ) { cin >> p [ i ] ; }  $ ~~sort ( p + 1 , p + 1 + t ) ;  $ ~~cout << p [ t ] << ' ' ;  $ ~~for ( int i = 2 ; i < t ; i ++ ) { cout << p [ i ] << ' ' ; }  $ ~~cout << p [ 1 ] << endl ;  $ ~}  $ ~return 0 ;  $ }
int a [ 105 ] ;  $ const int inf = 0 x3f3f3f3f ;  $ int main ( ) {  $ ~int n ;  $ ~while ( cin >> n ) {  $ ~~int ma = - inf , mi = inf ;  $ ~~for ( int i = 0 ; i < n ; i ++ ) {  $ ~~~cin >> a [ i ] ;  $ ~~~ma = max ( ma , a [ i ] ) ;  $ ~~~mi = min ( mi , a [ i ] ) ;  $ ~~}  $ ~~sort ( a , a + n ) ;  $ ~~cout << ma << ' ' ;  $ ~~for ( int i = 1 ; i < n - 1 ; i ++ ) { cout << a [ i ] << ' ' ; }  $ ~~cout << mi << endl ;  $ ~}  $ }
const int INF = 100000000 ;  $ int a [ 150 ] ;  $ int main ( ) {  $ ~int n ;  $ ~while ( cin >> n ) {  $ ~~for ( int i = 1 ; i <= n ; i ++ ) { cin >> a [ i ] ; }  $ ~~sort ( a + 1 , a + n + 1 ) ;  $ ~~int t = a [ 1 ] ;  $ ~~a [ 1 ] = a [ n ] ;  $ ~~a [ n ] = t ;  $ ~~cout << a [ 1 ] ;  $ ~~for ( int i = 2 ; i <= n ; i ++ ) cout << ' ' << a [ i ] ;  $ ~~cout << endl ;  $ ~}  $ ~return 0 ;  $ }
int main ( ) {  $ ~int n , j , i , r , a [ 200 ] ;  $ ~cin >> n ;  $ ~for ( i = 0 ; i < n ; i ++ ) { cin >> a [ i ] ; }  $ ~for ( i = 0 ; i < n - 1 ; i ++ ) {  $ ~~for ( j = 0 ; j < n - 1 - i ; j ++ ) {  $ ~~~if ( a [ j ] > a [ j + 1 ] ) {  $ ~~~~r = a [ j ] ;  $ ~~~~a [ j ] = a [ j + 1 ] ;  $ ~~~~a [ j + 1 ] = r ;  $ ~~~}  $ ~~}  $ ~}  $ ~cout << a [ n - 1 ] << " " ;  $ ~for ( i = 1 ; i < n - 1 ; i ++ ) { cout << a [ i ] << " " ; }  $ ~cout << a [ 0 ] << endl ;  $ ~return 0 ;  $ }
bool qo ( bool x ) {  $ ~return ( x ? 0 : qo ( ! x ) ) ;  $ }  $ const int mnx = 1e7 + 9 ;  $ const int mod = 1e9 + 7 ;  $ long long n ;  $ long long x [ mnx ] ;  $ long long u [ mnx ] ;  $ long long k [ mnx ] ;  $ long long cnt , c ;  $ int main ( ) {  $ ~cin >> n ;  $ ~for ( int i = 1 ; i <= n ; i ++ ) { cin >> x [ i ] ; }  $ ~sort ( x + 1 , x + n + 1 ) ;  $ ~cout << x [ n ] << ' ' ;  $ ~for ( int i = 1 ; i <= n ; i ++ ) {  $ ~~if ( i == n || i == 1 ) continue ;  $ ~~cout << x [ i ] << ' ' ;  $ ~}  $ ~cout << x [ 1 ] << '\n' ;  $ ~return 0 ;  $ }
const int N = 1e6 + 5 ;  $ int n , a , c = 2 , ans ;  $ vector < int > v ;  $ int main ( ) {  $ ~cin >> n ;  $ ~while ( n -- ) cin >> a , v . push_back ( a ) ;  $ ~sort ( v . begin ( ) , v . end ( ) ) ;  $ ~if ( v . size ( ) == 2 ) {  $ ~~cout << v . back ( ) << " " << v [ 0 ] << endl ;  $ ~~return 0 ;  $ ~}  $ ~cout << v . back ( ) << " " ;  $ ~for ( int i = 1 ; i < v . size ( ) - 1 ; i ++ ) cout << v [ i ] << " " ;  $ ~cout << v [ 0 ] << endl ;  $ }
int main ( ) {  $ ~int a [ 101 ] ;  $ ~int n ;  $ ~while ( cin >> n ) {  $ ~~int i ;  $ ~~for ( int i = 0 ; i < n ; i ++ ) cin >> a [ i ] ;  $ ~~sort ( a , a + n ) ;  $ ~~cout << a [ n - 1 ] << ' ' ;  $ ~~for ( i = 1 ; i < n - 1 ; i ++ ) { cout << a [ i ] << ' ' ; }  $ ~~cout << a [ 0 ] << endl ;  $ ~}  $ ~return 0 ;  $ }
int main ( ) {  $ ~int n , i ;  $ ~while ( cin >> n ) {  $ ~~int arr [ 110 ] = { 0 } , max = - 10000 , min = 10000 , p_max , p_min , res [ 110 ] = { 0 } , k ;  $ ~~cin >> arr [ 0 ] ;  $ ~~max = min = arr [ 0 ] ;  $ ~~p_max = p_min = 0 ;  $ ~~for ( i = 1 ; i < n ; i ++ ) {  $ ~~~cin >> arr [ i ] ;  $ ~~~if ( arr [ i ] < min ) {  $ ~~~~min = arr [ i ] ;  $ ~~~~p_min = i ;  $ ~~~} else if ( arr [ i ] > max ) {  $ ~~~~max = arr [ i ] ;  $ ~~~~p_max = i ;  $ ~~~}  $ ~~}  $ ~~k = 0 ;  $ ~~for ( i = 0 ; i < n ; i ++ ) {  $ ~~~if ( i == p_min || i == p_max ) continue ;  $ ~~~res [ k ++ ] = arr [ i ] ;  $ ~~}  $ ~~sort ( res , res + k ) ;  $ ~~if ( p_max != p_min ) cout << max << " " ;  $ ~~for ( i = 0 ; i < k ; i ++ ) cout << res [ i ] << " " ;  $ ~~cout << min << endl ;  $ ~}  $ ~return 0 ;  $ }
int main ( ) {  $ ~int n ;  $ ~int a [ 1000 ] ;  $ ~while ( cin >> n ) {  $ ~~int b , c ;  $ ~~for ( int i = 0 ; i < n ; i ++ ) { cin >> a [ i ] ; }  $ ~~sort ( a , a + n ) ;  $ ~~b = a [ 0 ] ;  $ ~~c = a [ n - 1 ] ;  $ ~~cout << c ;  $ ~~for ( int i = 1 ; i < n - 1 ; i ++ ) { cout << " " << a [ i ] ; }  $ ~~cout << " " << b << endl ;  $ ~}  $ ~return 0 ;  $ }
bool cmp ( int a , int b ) {  $ ~return a > b ;  $ }  $ int cc [ 105 ] ;  $ int main ( ) {  $ ~int n , res = 0 , flag = 0 , f ;  $ ~cin >> n ;  $ ~for ( int i = 1 ; i <= n ; i ++ ) { cin >> cc [ i ] ; }  $ ~sort ( cc + 1 , cc + 1 + n ) ;  $ ~swap ( cc [ 1 ] , cc [ n ] ) ;  $ ~for ( int i = 1 ; i <= n ; i ++ ) {  $ ~~if ( i == n )  $ ~~~cout << cc [ i ] << endl ;  $ ~~else  $ ~~~cout << cc [ i ] << " " ;  $ ~}  $ ~return 0 ;  $ }
const int INF = 0 x3f3f3f3f ;  $ const int T = 100 + 3 ;  $ int row [ T ] ;  $ int main ( ) {  $ ~int n ;  $ ~cin >> n ;  $ ~for ( int i = 0 ; i < n ; i ++ ) cin >> row [ i ] ;  $ ~sort ( row , row + n ) ;  $ ~cout << row [ n - 1 ] << " " ;  $ ~for ( int i = 1 ; i < n - 1 ; i ++ ) cout << row [ i ] << " " ;  $ ~cout << row [ 0 ] << endl ;  $ ~return 0 ;  $ }
int p [ 500 ] ;  $ int main ( ) {  $ ~int n ;  $ ~while ( cin >> n ) {  $ ~~memset ( p , 0 , sizeof ( p ) ) ;  $ ~~for ( int i = 0 ; i < n ; i ++ ) { cin >> p [ i ] ; }  $ ~~sort ( p , p + n ) ;  $ ~~cout << p [ n - 1 ] ;  $ ~~for ( int i = 1 ; i < n - 1 ; i ++ ) { cout << " " << p [ i ] ; }  $ ~~cout << " " << p [ 0 ] << endl ;  $ ~}  $ }
int A [ 100010 ] ;  $ int main ( ) {  $ ~int n ;  $ ~cin >> n ;  $ ~for ( int i = 0 ; i < n ; i ++ ) cin >> A [ i ] ;  $ ~sort ( A , A + n ) ;  $ ~reverse ( A , A + n ) ;  $ ~vector < int > ans ;  $ ~cout << A [ 0 ] << " " ;  $ ~for ( int i = n - 2 ; i >= 1 ; i -- ) cout << A [ i ] << " " ;  $ ~cout << A [ n - 1 ] << '\n' ;  $ }
int a [ 110 ] ;  $ int main ( ) {  $ ~int n ;  $ ~cin >> n ;  $ ~int i ;  $ ~for ( i = 0 ; i < n ; i ++ ) cin >> a [ i ] ;  $ ~sort ( a , a + n ) ;  $ ~cout << a [ n - 1 ] << " " ;  $ ~for ( i = 1 ; i < n - 1 ; i ++ ) { cout << a [ i ] << " " ; }  $ ~cout << a [ 0 ] << endl ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~vector < int > v ;  $ ~int n , a ;  $ ~cin >> n ;  $ ~while ( n -- ) {  $ ~~cin >> a ;  $ ~~v . push_back ( a ) ;  $ ~}  $ ~sort ( v . begin ( ) , v . end ( ) ) ;  $ ~cout << v [ v . size ( ) - 1 ] << " " ;  $ ~for ( int i = 1 ; i + 1 < v . size ( ) ; i ++ ) { cout << v [ i ] << " " ; }  $ ~cout << v [ 0 ] << endl ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~int n , i ;  $ ~cin >> n ;  $ ~int a [ n + 1 ] ;  $ ~for ( i = 1 ; i <= n ; i ++ ) cin >> a [ i ] ;  $ ~sort ( a + 1 , a + n + 1 ) ;  $ ~cout << a [ n ] << " " ;  $ ~for ( i = 2 ; i < n ; i ++ ) cout << a [ i ] << " " ;  $ ~cout << a [ 1 ] << endl ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~string a ;  $ ~cin >> a ;  $ ~int s = 0 ;  $ ~for ( int i = 0 ; a [ i ] ; i ++ ) {  $ ~~if ( a [ i ] == 'a' || a [ i ] == 'e' || a [ i ] == 'i' || a [ i ] == 'o' || a [ i ] == 'u' )  $ ~~~s ++ ;  $ ~~else if ( a [ i ] >= '0' && a [ i ] <= '9' && ( a [ i ] - 48 ) % 2 != 0 )  $ ~~~s ++ ;  $ ~}  $ ~cout << s << endl ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~string a ;  $ ~cin >> a ;  $ ~int num = 0 ;  $ ~string b = "aeiou13579" ;  $ ~for ( int i = 0 ; i < a . size ( ) ; i ++ ) {  $ ~~for ( int j = 0 ; j < b . size ( ) ; j ++ ) {  $ ~~~if ( a [ i ] == b [ j ] ) num ++ ;  $ ~~}  $ ~}  $ ~cout << num << endl ;  $ }
bool isVowel ( char a ) {  $ ~return ( a == 'a' || a == 'e' || a == 'i' || a == 'o' || a == 'u' ) ;  $ }  $ bool isOdd ( char a ) {  $ ~return ( a == '1' || a == '3' || a == '5' || a == '7' || a == '9' ) ;  $ }  $ int main ( ) {  $ ~string text ;  $ ~cin >> text ;  $ ~int num = 0 ;  $ ~for ( int i = 0 ; i < text . length ( ) ; i ++ ) {  $ ~~if ( isVowel ( text [ i ] ) || isOdd ( text [ i ] ) ) num ++ ;  $ ~}  $ ~cout << num << endl ;  $ }
int main ( ) {  $ ~string s ;  $ ~int num = 0 ;  $ ~while ( cin >> s ) {  $ ~~for ( int i = 0 ; i < s . length ( ) ; i ++ )  $ ~~~if ( strchr ( "aeiou13579" , s [ i ] ) ) num ++ ;  $ ~~cout << num << endl ;  $ ~}  $ ~return 0 ;  $ }
int main ( ) {  $ ~map < char , int > t ;  $ ~t [ 'a' ] = 1 ;  $ ~t [ 'e' ] = 1 ;  $ ~t [ 'i' ] = 1 ;  $ ~t [ 'o' ] = 1 ;  $ ~t [ 'u' ] = 1 ;  $ ~t [ '1' ] = 1 ;  $ ~t [ '3' ] = 1 ;  $ ~t [ '5' ] = 1 ;  $ ~t [ '7' ] = 1 ;  $ ~t [ '9' ] = 1 ;  $ ~int ans = 0 ;  $ ~string s ;  $ ~cin >> s ;  $ ~for ( int i = 0 ; i < s . size ( ) ; i ++ ) { ans += t [ s [ i ] ] ; }  $ ~cout << ans << endl ;  $ }
int main ( ) {  $ ~int res = 0 ;  $ ~string a = "aeiou13579" ;  $ ~string str ;  $ ~cin >> str ;  $ ~for ( int i = 0 ; str [ i ] ; i ++ ) {  $ ~~if ( a . find ( str [ i ] ) != - 1 ) res ++ ;  $ ~}  $ ~cout << res << endl ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~string s ;  $ ~cin >> s ;  $ ~string a = "aeiou13579" ;  $ ~int cnt = 0 ;  $ ~for ( int i = 0 ; i < s . size ( ) ; i ++ ) {  $ ~~for ( int j = 0 ; j < a . size ( ) ; j ++ ) {  $ ~~~if ( s [ i ] == a [ j ] ) { cnt ++ ; }  $ ~~}  $ ~}  $ ~cout << cnt << "\n" ;  $ ~return 0 ;  $ }
bool vowel ( char ch ) {  $ ~if ( ch == 'a' || ch == 'e' || ch == 'i' || ch == 'o' || ch == 'u' ) {  $ ~~return true ;  $ ~} else {  $ ~~return false ;  $ ~}  $ }  $ bool even ( char ch ) {  $ ~if ( ch == '1' || ch == '3' || ch == '5' || ch == '7' || ch == '9' ) {  $ ~~return true ;  $ ~} else {  $ ~~return false ;  $ ~}  $ }  $ int main ( ) {  $ ~string s ;  $ ~cin >> s ;  $ ~int len = s . size ( ) ;  $ ~int count = 0 ;  $ ~for ( int i = 0 ; i < len ; i ++ ) {  $ ~~char ch = s [ i ] ;  $ ~~if ( vowel ( ch ) ) { count ++ ; }  $ ~~if ( even ( ch ) ) { count ++ ; }  $ ~}  $ ~cout << count << endl ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~string s ;  $ ~cin >> s ;  $ ~int i , j ;  $ ~int len = s . length ( ) ;  $ ~int cnt = 0 ;  $ ~for ( i = 0 ; i < len ; i ++ ) {  $ ~~if ( s [ i ] >= 'a' && s [ i ] <= 'z' ) {  $ ~~~if ( s [ i ] == 'a' || s [ i ] == 'e' || s [ i ] == 'i' || s [ i ] == 'o' || s [ i ] == 'u' ) cnt ++ ;  $ ~~}  $ ~~if ( s [ i ] >= '0' && s [ i ] <= '9' ) {  $ ~~~if ( ( s [ i ] - '0' ) % 2 == 1 ) cnt ++ ;  $ ~~}  $ ~}  $ ~cout << cnt << endl ;  $ }
int main ( ) {  $ ~int i , j , k , l , m , n ;  $ ~string s ;  $ ~cin >> s ;  $ ~m = 0 ;  $ ~for ( i = 0 ; i < s . size ( ) ; i ++ ) {  $ ~~if ( s [ i ] == 'a' || s [ i ] == 'e' || s [ i ] == 'i' || s [ i ] == 'o' || s [ i ] == 'u' )  $ ~~~m ++ ;  $ ~~else if ( s [ i ] >= '0' && s [ i ] <= '9' ) {  $ ~~~if ( ( s [ i ] - '0' ) % 2 != 0 ) m ++ ;  $ ~~}  $ ~}  $ ~cout << m << endl ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~string s ;  $ ~cin >> s ;  $ ~string dic = "13579aeiou" ;  $ ~int cont = 0 ;  $ ~for ( int i = 0 ; i < s . size ( ) ; i ++ ) {  $ ~~if ( dic . find ( s [ i ] ) != string : : npos ) { ++ cont ; }  $ ~}  $ ~cout << cont << endl ;  $ ~return 0 ;  $ }
set < char > s ;  $ int main ( ) {  $ ~s . insert ( 'a' ) ;  $ ~s . insert ( 'e' ) ;  $ ~s . insert ( 'i' ) ;  $ ~s . insert ( 'o' ) ;  $ ~s . insert ( 'u' ) ;  $ ~for ( int i = 1 ; i < 10 ; i += 2 ) { s . insert ( i + '0' ) ; }  $ ~string k ;  $ ~int ans = 0 ;  $ ~cin >> k ;  $ ~int len = k . length ( ) ;  $ ~for ( int i = 0 ; i < len ; i ++ ) {  $ ~~if ( s . count ( k [ i ] ) ) { ans ++ ; }  $ ~}  $ ~cout << ans << endl ;  $ ~return 0 ;  $ }
char dict [ 15 ] = "13579aeiou" ;  $ int main ( ) {  $ ~char s [ 55 ] ;  $ ~int sum = 0 , i = 0 ;  $ ~cin >> s ;  $ ~while ( s [ i ] != '\0' ) {  $ ~~int flag = 1 ;  $ ~~for ( int j = 0 ; j < 10 ; j ++ )  $ ~~~if ( s [ i ] == dict [ j ] ) flag = 0 ;  $ ~~if ( flag == 0 ) sum ++ ;  $ ~~i ++ ;  $ ~}  $ ~cout << sum << endl ;  $ }
int ans ;  $ int main ( ) {  $ ~string s ;  $ ~cin >> s ;  $ ~for ( int i = 0 ; i < s . size ( ) ; i ++ ) {  $ ~~if ( isalpha ( s [ i ] ) ) {  $ ~~~if ( s [ i ] == 'a' || s [ i ] == 'e' || s [ i ] == 'o' || s [ i ] == 'i' || s [ i ] == 'u' ) ans ++ ;  $ ~~} else if ( s [ i ] % 2 != 0 )  $ ~~~ans ++ ;  $ ~}  $ ~cout << ans << endl ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~string s ;  $ ~cin >> s ;  $ ~int c = 0 ;  $ ~for ( int i = 0 ; i < s . length ( ) ; i ++ ) {  $ ~~if ( s [ i ] == 'a' || s [ i ] == 'e' || s [ i ] == 'i' || s [ i ] == 'o' || s [ i ] == 'u' )  $ ~~~c ++ ;  $ ~~else if ( ( s [ i ] < 'a' || s [ i ] > 'z' ) && ( s [ i ] - '0' ) % 2 != 0 ) {  $ ~~~c ++ ;  $ ~~}  $ ~}  $ ~cout << c << endl ;  $ ~return 0 ;  $ }
set < char > s ;  $ int main ( ) {  $ ~s . insert ( 'a' ) ;  $ ~s . insert ( 'e' ) ;  $ ~s . insert ( 'i' ) ;  $ ~s . insert ( 'o' ) ;  $ ~s . insert ( 'u' ) ;  $ ~for ( int i = 1 ; i < 10 ; i += 2 ) { s . insert ( i + '0' ) ; }  $ ~string k ;  $ ~int ans = 0 ;  $ ~cin >> k ;  $ ~int len = k . length ( ) ;  $ ~for ( int i = 0 ; i < len ; i ++ ) {  $ ~~if ( s . count ( k [ i ] ) ) { ans ++ ; }  $ ~}  $ ~cout << ans << endl ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~char a [ 55 ] ;  $ ~gets ( a ) ;  $ ~int i = 0 , cnt = 0 ;  $ ~for ( ; a [ i ] != '\0' ; i ++ ) {  $ ~~if ( a [ i ] <= '9' && a [ i ] >= '0' ) {  $ ~~~if ( ( a [ i ] - '0' ) % 2 != 0 ) { cnt ++ ; }  $ ~~}  $ ~~if ( a [ i ] == 'a' || a [ i ] == 'e' || a [ i ] == 'i' || a [ i ] == 'o' || a [ i ] == 'u' ) { cnt ++ ; }  $ ~}  $ ~cout << cnt << endl ;  $ ~return 0 ;  $ }
bool isvowel ( char c ) {  $ ~if ( c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u' ) return true ;  $ ~return false ;  $ }  $ int main ( ) {  $ ~string str ;  $ ~cin >> str ;  $ ~int siz = str . length ( ) ;  $ ~int cnt = 0 ;  $ ~for ( int i = 0 ; i < siz ; i ++ ) {  $ ~~if ( isvowel ( str [ i ] ) )  $ ~~~cnt ++ ;  $ ~~else if ( ! isalpha ( str [ i ] ) && ( str [ i ] - '0' ) & 1 ) {  $ ~~~cnt ++ ;  $ ~~}  $ ~}  $ ~cout << cnt << endl ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~string s ;  $ ~cin >> s ;  $ ~int ans = 0 ;  $ ~for ( int i = 0 ; i < s . length ( ) ; i ++ ) {  $ ~~if ( s [ i ] == 'a' || s [ i ] == 'e' || s [ i ] == 'i' || s [ i ] == 'o' || s [ i ] == 'u' )  $ ~~~ans ++ ;  $ ~~else if ( s [ i ] > '0' && s [ i ] <= '9' && ( s [ i ] - '0' ) % 2 == 1 )  $ ~~~ans ++ ;  $ ~}  $ ~cout << ans << endl ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~string s ;  $ ~int c = 0 ;  $ ~cin >> s ;  $ ~int len = s . size ( ) ;  $ ~for ( int i = 0 ; i < len ; i ++ ) {  $ ~~if ( strchr ( "aeiou13579" , s [ i ] ) ) { c ++ ; }  $ ~}  $ ~cout << c << endl ;  $ ~return 0 ;  $ }
const int INF = 0 x3f3f3f3f ;  $ const int maxn = 5005 ;  $ int arr [ maxn ] ;  $ int main ( ) {  $ ~int n ;  $ ~cin >> n ;  $ ~if ( n % 10 >= 0 && n % 10 <= 5 ) {  $ ~~cout << n / 10 * 10 << endl ;  $ ~} else {  $ ~~while ( n % 10 ) { n ++ ; }  $ ~~cout << n << endl ;  $ ~}  $ ~return 0 ;  $ }
void func ( long long x ) {  $ ~if ( ( x % 10 ) > 5 ) cout << ( x / 10 + 1 ) * 10 << endl ;  $ ~if ( ( x % 10 ) <= 5 ) cout << ( x / 10 ) * 10 << endl ;  $ }  $ int main ( ) {  $ ~long long x ;  $ ~while ( cin >> x ) func ( x ) ;  $ }
int main ( ) {  $ ~int n ;  $ ~cin >> n ;  $ ~if ( n % 10 > 5 )  $ ~~n = n - n % 10 + 10 ;  $ ~else  $ ~~n = n - n % 10 ;  $ ~cout << n << endl ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~int n ;  $ ~cin >> n ;  $ ~if ( n % 10 <= 5 ) {  $ ~~cout << ( n / 10 ) * 10 << endl ;  $ ~} else {  $ ~~cout << ( n / 10 + 1 ) * 10 << endl ;  $ ~}  $ }
int main ( ) {  $ ~long long n ;  $ ~cin >> n ;  $ ~int t = n % 10 ;  $ ~if ( t >= 6 )  $ ~~n = n - t + 10 ;  $ ~else  $ ~~n = n - t ;  $ ~cout << n << endl ;  $ }
int main ( ) {  $ ~long long n ;  $ ~cin >> n ;  $ ~int t = n % 10 ;  $ ~if ( t >= 6 )  $ ~~n = n - t + 10 ;  $ ~else  $ ~~n = n - t ;  $ ~cout << n << endl ;  $ }
int main ( ) {  $ ~int t , s , a , b , c ;  $ ~cin >> t ;  $ ~cout << 1 LL * ( ( t + 4 ) / 10 ) * 10 << endl ;  $ }
int x , n ;  $ int main ( ) {  $ ~cin >> n ;  $ ~if ( n % 10 <= 5 )  $ ~~x = 0 ;  $ ~else  $ ~~x = 1 ;  $ ~cout << ( n / 10 + x ) * 10 << endl ;  $ ~return 0 ;  $ }
long long n ;  $ int main ( ) {  $ ~cin >> n ;  $ ~if ( n % 10 > 5 ) {  $ ~~cout << n + ( 10 - n % 10 ) << endl ;  $ ~~return 0 ;  $ ~} else {  $ ~~cout << n - ( n % 10 ) << endl ;  $ ~~return 0 ;  $ ~}  $ }
int main ( ) {  $ ~long long n ;  $ ~cin >> n ;  $ ~int num = n % 10 ;  $ ~if ( num == 0 ) {  $ ~~cout << n << endl ;  $ ~} else if ( num <= 5 ) {  $ ~~cout << ( n - num ) << endl ;  $ ~} else {  $ ~~cout << ( n - num + 10 ) << endl ;  $ ~}  $ }
int main ( ) {  $ ~long long int n ;  $ ~cin >> n ;  $ ~long long int m = n % 10 ;  $ ~long int d = n / 10 ;  $ ~if ( m == 0 ) {  $ ~~cout << n << endl ;  $ ~} else if ( m <= 5 ) {  $ ~~cout << n - m << endl ;  $ ~} else if ( m > 5 ) {  $ ~~cout << n + 10 - m << endl ;  $ ~}  $ }
int main ( ) {  $ ~int n , m , ans ;  $ ~while ( cin >> n ) {  $ ~~m = n % 10 ;  $ ~~if ( m <= 5 )  $ ~~~ans = n / 10 * 10 ;  $ ~~else  $ ~~~ans = ( n / 10 + 1 ) * 10 ;  $ ~~cout << ans << endl ;  $ ~}  $ ~return 0 ;  $ }
const double pi = 3.1415926535 ;  $ const long long mod = 998244353 ;  $ const int maxn = 5e5 + 10 ;  $ int main ( ) {  $ ~int n ;  $ ~while ( cin >> n ) {  $ ~~if ( n % 10 <= 5 )  $ ~~~cout << n - ( n % 10 ) << endl ;  $ ~~else  $ ~~~cout << n + ( 10 - n % 10 ) << endl ;  $ ~}  $ }
const int N = 1e6 + 10 ;  $ const int mod = 998244353 ;  $ long long x ;  $ int main ( ) {  $ ~cin >> x ;  $ ~if ( x % 10 == 0 )  $ ~~cout << x << endl ;  $ ~else if ( x % 10 <= 5 )  $ ~~cout << ( x / 10 ) * 10 << endl ;  $ ~else  $ ~~cout << ( x / 10 ) * 10 + 10 << endl ;  $ }
int main ( ) {  $ ~int n ;  $ ~cin >> n ;  $ ~if ( n % 10 <= 5 ) {  $ ~~cout << ( n / 10 ) * 10 << endl ;  $ ~} else {  $ ~~cout << ( n / 10 + 1 ) * 10 << endl ;  $ ~}  $ }
int main ( ) {  $ ~long long n ;  $ ~cin >> n ;  $ ~if ( n / 10 == 0 ) {  $ ~~if ( n <= 5 )  $ ~~~cout << "0\n" ;  $ ~~else  $ ~~~cout << "10\n" ;  $ ~} else {  $ ~~if ( n % 10 <= 5 )  $ ~~~cout << n / 10 << 0 << '\n' ;  $ ~~else  $ ~~~cout << n / 10 + 1 << 0 << '\n' ;  $ ~}  $ }
long long n ;  $ long long x ;  $ int main ( ) {  $ ~cin >> n ;  $ ~x = n ;  $ ~if ( n % 10 == 0 ) {  $ ~~cout << n << endl ;  $ ~~return 0 ;  $ ~}  $ ~while ( x > 10 ) { x %= 10 ; }  $ ~if ( x <= 5 )  $ ~~cout << n - x << endl ;  $ ~else  $ ~~cout << n + ( 10 - x ) << endl ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~int n , result , c ;  $ ~cin >> n ;  $ ~c = n % 10 ;  $ ~if ( c <= 5 ) {  $ ~~result = n - c ;  $ ~} else {  $ ~~result = n + ( 10 - c ) ;  $ ~}  $ ~cout << result << endl ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~long long int n , m , k , l , j , p ;  $ ~cin >> n ;  $ ~if ( n < 10 ) {  $ ~~if ( n <= 5 ) {  $ ~~~cout << 0 << endl ;  $ ~~} else {  $ ~~~p = n + ( 10 - n ) ;  $ ~~~cout << p << endl ;  $ ~~}  $ ~} else {  $ ~~k = n % 10 ;  $ ~~if ( k == 0 ) {  $ ~~~cout << n << endl ;  $ ~~} else {  $ ~~~if ( k <= 5 ) {  $ ~~~~l = n - ( k ) ;  $ ~~~~cout << l << endl ;  $ ~~~} else {  $ ~~~~j = n + ( 10 - k ) ;  $ ~~~~cout << j << endl ;  $ ~~~}  $ ~~}  $ ~}  $ }
int main ( ) {  $ ~int a , b , c , d , e , f ;  $ ~while ( cin >> a ) {  $ ~~if ( a % 10 == 0 ) {  $ ~~~cout << a << endl ;  $ ~~} else if ( a % 10 == 5 ) {  $ ~~~cout << a - 5 << endl ;  $ ~~} else if ( a % 10 < 5 ) {  $ ~~~b = a % 10 ;  $ ~~~cout << a - b << endl ;  $ ~~} else {  $ ~~~b = a % 10 ;  $ ~~~b = 10 - b ;  $ ~~~cout << a + b << endl ;  $ ~~}  $ ~}  $ ~return 0 ;  $ }
int dx [ 4 ] = { 0 , 0 , - 1 , 1 } ;  $ int dy [ 4 ] = { 1 , - 1 , 0 , 0 } ;  $ int main ( ) {  $ ~int n ;  $ ~cin >> n ;  $ ~if ( n % 10 <= 5 ) {  $ ~~if ( n / 10 )  $ ~~~cout << n / 10 << 0 << '\n' ;  $ ~~else  $ ~~~cout << 0 << '\n' ;  $ ~} else  $ ~~cout << ( n / 10 ) + 1 << 0 << '\n' ;  $ }
int main ( ) {  $ ~int n ;  $ ~cin >> n ;  $ ~int k , a , l = 0 , m = 0 ;  $ ~k = n ;  $ ~a = n ;  $ ~if ( n % 2 == 0 && n % 5 == 0 ) {  $ ~~cout << n << endl ;  $ ~} else {  $ ~~for ( int i = 0 ; i < 8 ; i ++ ) {  $ ~~~l ++ ;  $ ~~~if ( k % 2 == 0 && k % 5 == 0 ) { break ; }  $ ~~~k -- ;  $ ~~}  $ ~~for ( int j = 0 ; j < 8 ; j ++ ) {  $ ~~~m ++ ;  $ ~~~if ( a % 2 == 0 && a % 5 == 0 ) { break ; }  $ ~~~a ++ ;  $ ~~}  $ ~~if ( l == m ) {  $ ~~~cout << k << endl ;  $ ~~} else if ( l > m ) {  $ ~~~cout << a << endl ;  $ ~~} else {  $ ~~~cout << k << endl ;  $ ~~}  $ ~}  $ ~return 0 ;  $ }
int main ( ) {  $ ~long long int n , x = 0 ;  $ ~cin >> n ;  $ ~x = n % 10 ;  $ ~if ( x > 5 ) n = n - x + 10 ;  $ ~if ( x <= 5 ) n = n - x ;  $ ~cout << n << endl ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~long long n ;  $ ~cin >> n ;  $ ~int t = n % 10 ;  $ ~if ( t >= 6 )  $ ~~n = n - t + 10 ;  $ ~else  $ ~~n = n - t ;  $ ~cout << n << endl ;  $ }
int main ( ) {  $ ~int n ;  $ ~cin >> n ;  $ ~int a [ n ] , count = 0 ;  $ ~for ( int i = 0 ; i < n ; i ++ ) { cin >> a [ i ] ; }  $ ~int max = * max_element ( a , a + n ) ;  $ ~for ( int i = 0 ; i < n ; i ++ ) { count += max - a [ i ] ; }  $ ~cout << count << endl ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~int a [ 1000 ] , i , n , ans = 0 ;  $ ~cin >> n ;  $ ~for ( i = 1 ; i <= n ; i ++ ) cin >> a [ i ] ;  $ ~sort ( a + 1 , a + n + 1 ) ;  $ ~for ( i = 1 ; i < n ; i ++ ) { ans += a [ n ] - a [ i ] ; }  $ ~cout << ans << endl ;  $ }
const int N = 1e5 + 50 ;  $ const int M = 1e6 ;  $ const long long oo = 1e18 ;  $ const int mod = 1e9 + 7 ;  $ int main ( ) {  $ ~int n ;  $ ~cin >> n ;  $ ~long long sum = 0 , mx = 0 ;  $ ~for ( int i = 0 ; i < n ; i ++ ) {  $ ~~long long a ;  $ ~~cin >> a ;  $ ~~sum += a ;  $ ~~mx = max ( mx , a ) ;  $ ~}  $ ~cout << mx * n - sum << endl ;  $ }
int main ( ) {  $ ~int n , cnt = 0 , sum = 0 ;  $ ~cin >> n ;  $ ~int a [ n ] ;  $ ~for ( int i = 0 ; i < n ; i ++ ) { cin >> a [ i ] ; }  $ ~sort ( a , a + n ) ;  $ ~int mx = a [ n - 1 ] ;  $ ~for ( int i = 0 ; i < n ; i ++ ) { sum += abs ( mx - a [ i ] ) ; }  $ ~cout << sum << endl ;  $ }
int main ( ) {  $ ~int n ;  $ ~cin >> n ;  $ ~vector < int > welfare ;  $ ~int welfare_input ;  $ ~while ( welfare . size ( ) < n ) {  $ ~~cin >> welfare_input ;  $ ~~welfare . push_back ( welfare_input ) ;  $ ~}  $ ~sort ( welfare . rbegin ( ) , welfare . rend ( ) ) ;  $ ~int i = 1 ;  $ ~int total = 0 ;  $ ~while ( welfare . size ( ) > i ) {  $ ~~if ( welfare [ 0 ] != welfare [ i ] ) {  $ ~~~welfare [ i ] ++ ;  $ ~~~total ++ ;  $ ~~} else {  $ ~~~i ++ ;  $ ~~}  $ ~}  $ ~cout << total << endl ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~int n , a [ 101 ] ;  $ ~cin >> n ;  $ ~int s = 0 , max = 0 ;  $ ~for ( int i = 0 ; i < n ; i ++ ) {  $ ~~cin >> a [ i ] ;  $ ~~max = a [ 0 ] ;  $ ~}  $ ~for ( int i = 1 ; i < n ; i ++ ) {  $ ~~if ( max < a [ i ] ) { max = a [ i ] ; }  $ ~}  $ ~for ( int i = 0 ; i < n ; i ++ ) { s = s + abs ( max - a [ i ] ) ; }  $ ~cout << s << endl ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~long long int mx = 0 , n , a [ 105 ] = { 0 } , sum ;  $ ~cin >> n ;  $ ~for ( int i = 0 ; i < n ; i ++ ) cin >> a [ i ] ;  $ ~for ( int i = 0 ; i < n ; i ++ ) {  $ ~~if ( a [ i ] > mx ) mx = a [ i ] ;  $ ~}  $ ~sum = 0 ;  $ ~for ( int i = 0 ; i < n ; i ++ ) { sum += ( mx - a [ i ] ) ; }  $ ~cout << sum << endl ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~int n ;  $ ~int a [ 10000 ] ;  $ ~int maxn ;  $ ~int ans = 0 ;  $ ~cin >> n ;  $ ~for ( int i = 1 ; i <= n ; i ++ ) {  $ ~~cin >> a [ i ] ;  $ ~~if ( a [ i ] > maxn ) maxn = a [ i ] ;  $ ~}  $ ~for ( int i = 1 ; i <= n ; i ++ ) { ans = ans + maxn - a [ i ] ; }  $ ~cout << ans << endl ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~int n , arr [ 109 ] , maxx = 0 , i , res = 0 ;  $ ~cin >> n ;  $ ~for ( i = 0 ; i < n ; i ++ ) {  $ ~~cin >> arr [ i ] ;  $ ~~if ( maxx < arr [ i ] ) maxx = arr [ i ] ;  $ ~}  $ ~for ( i = 0 ; i < n ; i ++ ) { res = res + ( maxx - arr [ i ] ) ; }  $ ~cout << res << endl ;  $ }
int main ( ) {  $ ~int a [ 100 ] ;  $ ~int n , i , k , max ;  $ ~k = 0 ;  $ ~cin >> n ;  $ ~max = - 1 ;  $ ~for ( i = 0 ; i < n ; i ++ ) { cin >> a [ i ] ; }  $ ~for ( i = 0 ; i < n ; i ++ ) {  $ ~~if ( a [ i ] > max ) { max = a [ i ] ; }  $ ~}  $ ~for ( i = 0 ; i < n ; i ++ ) { k = k + max - a [ i ] ; }  $ ~cout << k << endl ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~int sum = 0 ;  $ ~int tc ;  $ ~int a [ 100 ] ;  $ ~cin >> tc ;  $ ~for ( int i = 0 ; i < tc ; i ++ ) { cin >> a [ i ] ; }  $ ~int max = a [ 0 ] ;  $ ~for ( int i = 0 ; i < tc ; i ++ ) {  $ ~~if ( a [ i ] > max ) max = a [ i ] ;  $ ~}  $ ~for ( int i = 0 ; i < tc ; i ++ ) { sum += max - a [ i ] ; }  $ ~cout << sum << endl ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~int n , a [ 105 ] , i , s ;  $ ~while ( cin >> n ) {  $ ~~s = 0 ;  $ ~~for ( i = 0 ; i < n ; i ++ ) { cin >> a [ i ] ; }  $ ~~if ( n == 1 )  $ ~~~cout << s << endl ;  $ ~~else {  $ ~~~sort ( a , a + n ) ;  $ ~~~for ( i = 0 ; i < n - 1 ; i ++ ) { s += ( a [ n - 1 ] - a [ i ] ) ; }  $ ~~~cout << s << endl ;  $ ~~}  $ ~}  $ }
vector < int > v ;  $ int main ( ) {  $ ~int n , x = 0 , hitung = 0 ;  $ ~cin >> n ;  $ ~for ( int i = 1 ; i <= n ; i ++ ) {  $ ~~int m ;  $ ~~cin >> m ;  $ ~~v . push_back ( m ) ;  $ ~~if ( m >= x ) { x = m ; }  $ ~}  $ ~for ( int i = 0 ; i < n ; i ++ ) { hitung += ( x - v [ i ] ) ; }  $ ~cout << hitung << endl ;  $ }
int main ( ) {  $ ~int n , arr [ 100 ] ;  $ ~cin >> n ;  $ ~for ( int i = 0 ; i < n ; i ++ ) { cin >> arr [ i ] ; }  $ ~sort ( arr , arr + n ) ;  $ ~int biggest = arr [ n - 1 ] , res = 0 ;  $ ~for ( int i = 0 ; i < n ; i ++ ) { res += ( biggest - arr [ i ] ) ; }  $ ~cout << res << endl ;  $ }
int main ( ) {  $ ~int n , a [ 101 ] , i , s = 0 , b ;  $ ~cin >> n ;  $ ~for ( i = 0 ; i < n ; i ++ ) { cin >> a [ i ] ; }  $ ~sort ( a , a + n ) ;  $ ~for ( i = 0 ; i < n ; i ++ ) { s += ( a [ n - 1 ] - a [ i ] ) ; }  $ ~cout << s << endl ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~int n , ans = 0 ;  $ ~long int a [ 100 ] ;  $ ~cin >> n ;  $ ~for ( int i = 0 ; i < n ; i ++ ) cin >> a [ i ] ;  $ ~sort ( a , a + n ) ;  $ ~for ( int i = 0 ; i < n ; i ++ ) ans += a [ n - 1 ] - a [ i ] ;  $ ~cout << ans << endl ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~int n ;  $ ~while ( cin >> n ) {  $ ~~int a [ 111 ] ;  $ ~~int maxx = - 1 ;  $ ~~for ( int i = 1 ; i <= n ; i ++ ) {  $ ~~~cin >> a [ i ] ;  $ ~~~if ( a [ i ] > maxx ) maxx = a [ i ] ;  $ ~~}  $ ~~int sum = 0 ;  $ ~~for ( int i = 1 ; i <= n ; i ++ ) { sum += ( maxx - a [ i ] ) ; }  $ ~~cout << sum << endl ;  $ ~}  $ ~return 0 ;  $ }
int e [ 105 ] ;  $ int main ( ) {  $ ~int n ;  $ ~cin >> n ;  $ ~int m = 0 ;  $ ~for ( int i = 1 ; i <= n ; i ++ ) {  $ ~~int t ;  $ ~~cin >> t ;  $ ~~e [ i ] = t ;  $ ~~m = m > t ? m : t ;  $ ~}  $ ~int ans = 0 ;  $ ~for ( int i = 1 ; i <= n ; i ++ ) { ans = ans + m - e [ i ] ; }  $ ~cout << ans << endl ;  $ }
int main ( ) {  $ ~int n ;  $ ~cin >> n ;  $ ~long long a [ n ] ;  $ ~long long cnt = 0 , mx = 0 ;  $ ~for ( int i = 0 ; i < n ; i ++ ) {  $ ~~cin >> a [ i ] ;  $ ~~mx = max ( a [ i ] , mx ) ;  $ ~}  $ ~for ( int i = 0 ; i < n ; i ++ ) { cnt += ( mx - a [ i ] ) ; }  $ ~cout << cnt << endl ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~long int n , ans = 0 ;  $ ~cin >> n ;  $ ~vector < int > v ;  $ ~for ( int i = 0 ; i < n ; i ++ ) {  $ ~~int x ;  $ ~~cin >> x ;  $ ~~v . push_back ( x ) ;  $ ~}  $ ~sort ( v . begin ( ) , v . end ( ) ) ;  $ ~for ( int i = 0 ; i < n - 1 ; i ++ ) { ans += v [ n - 1 ] - v [ i ] ; }  $ ~cout << ans << endl ;  $ }
int main ( ) {  $ ~int n , x [ 105 ] ;  $ ~cin >> n ;  $ ~for ( int i = 0 ; i < n ; i ++ ) { cin >> x [ i ] ; }  $ ~sort ( x , x + n ) ;  $ ~int Max = x [ n - 1 ] , sum = 0 ;  $ ~for ( int i = 0 ; i < n ; i ++ ) { sum += Max - x [ i ] ; }  $ ~cout << sum << endl ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~int n , max = 0 , c = 0 ;  $ ~cin >> n ;  $ ~int a [ n ] ;  $ ~for ( int i = 0 ; i < n ; i ++ ) { cin >> a [ i ] ; }  $ ~for ( int i = 0 ; i < n ; i ++ ) {  $ ~~if ( max < a [ i ] ) max = a [ i ] ;  $ ~}  $ ~for ( int i = 0 ; i < n ; i ++ ) {  $ ~~if ( a [ i ] < max ) { c = c + max - a [ i ] ; }  $ ~}  $ ~cout << c << endl ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~int n , maxi = - 1 , sum = 0 , x ;  $ ~cin >> n ;  $ ~for ( int i = 0 ; i < n ; i ++ ) {  $ ~~cin >> x ;  $ ~~maxi = max ( maxi , x ) ;  $ ~~sum += x ;  $ ~}  $ ~cout << maxi * n - sum << endl ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~int n , i , a [ 100 ] , large , ans = 0 ;  $ ~cin >> n ;  $ ~for ( i = 0 ; i < n ; i ++ ) { cin >> a [ i ] ; }  $ ~large = a [ 0 ] ;  $ ~for ( i = 0 ; i < n ; i ++ ) {  $ ~~if ( large < a [ i ] ) large = a [ i ] ;  $ ~}  $ ~for ( i = 0 ; i < n ; i ++ ) { ans += large - a [ i ] ; }  $ ~cout << ans << endl ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~int n , s ;  $ ~cin >> n >> s ;  $ ~cout << ( s + n - 1 ) / n << endl ;  $ }
long long int n , sum ;  $ int main ( ) {  $ ~cin >> n >> sum ;  $ ~long long int ans = 0 ;  $ ~for ( int i = n ; i >= 1 ; i -- ) {  $ ~~ans += sum / i ;  $ ~~sum -= ( sum / i ) * i ;  $ ~}  $ ~cout << ans << '\n' ;  $ }
int main ( ) {  $ ~int x , y , z ;  $ ~cin >> x >> y ;  $ ~z = ( y - 1 ) / x ;  $ ~z ++ ;  $ ~cout << z << endl ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~int n , s ;  $ ~cin >> n >> s ;  $ ~cout << ( s % n ? s / n + 1 : s / n ) << endl ;  $ }
int main ( ) {  $ ~int n , s ;  $ ~cin >> n >> s ;  $ ~int ans = s / n + ( s % n ? 1 : 0 ) ;  $ ~cout << ans << endl ;  $ }
int main ( ) {  $ ~int n , s ;  $ ~cin >> n >> s ;  $ ~if ( s % n == 0 )  $ ~~cout << s / n << endl ;  $ ~else  $ ~~cout << ( s / n ) + 1 << endl ;  $ ~return 0 ;  $ }
const int maxn = 1e5 + 10 ;  $ int main ( ) {  $ ~int a , b ;  $ ~while ( cin >> a >> b ) { cout << ( b - 1 ) / a + 1 << endl ; }  $ ~return 0 ;  $ }
int main ( ) {  $ ~long long int n , S ;  $ ~cin >> n >> S ;  $ ~if ( S % n == 0 ) {  $ ~~cout << S / n << endl ;  $ ~} else  $ ~~cout << S / n + 1 << endl ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~int n , s ;  $ ~cin >> n >> s ;  $ ~if ( s % n )  $ ~~cout << s / n + 1 << endl ;  $ ~else  $ ~~cout << s / n << endl ;  $ }
int main ( ) {  $ ~int n , s ;  $ ~cin >> n >> s ;  $ ~if ( s % n == 0 )  $ ~~cout << s / n << endl ;  $ ~else  $ ~~cout << ( s / n ) + 1 << endl ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~int n , s ;  $ ~while ( cin >> n >> s ) {  $ ~~int cnt = 0 ;  $ ~~for ( int i = n ; i > 0 ; i -- ) {  $ ~~~while ( s >= i ) {  $ ~~~~s -= i ;  $ ~~~~cnt ++ ;  $ ~~~}  $ ~~}  $ ~~cout << cnt << endl ;  $ ~}  $ ~return 0 ;  $ }
int main ( ) {  $ ~int n , s ;  $ ~cin >> n >> s ;  $ ~if ( s % n == 0 )  $ ~~cout << s / n << endl ;  $ ~else  $ ~~cout << s / n + 1 << endl ;  $ }
int main ( ) {  $ ~int n ;  $ ~long long S ;  $ ~cin >> n >> S ;  $ ~if ( S % n )  $ ~~cout << S / n + 1 << endl ;  $ ~else  $ ~~cout << S / n << endl ;  $ ~return 0 ;  $ }
int n , s ;  $ int main ( ) {  $ ~cin >> n >> s ;  $ ~cout << s / n + ( s % n != 0 ) << endl ;  $ }
int main ( ) {  $ ~int n , s ;  $ ~cin >> n >> s ;  $ ~if ( s % n == 0 )  $ ~~cout << s / n << endl ;  $ ~else  $ ~~cout << s / n + 1 << endl ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~int n , m ;  $ ~cin >> m >> n ;  $ ~if ( n % m == 0 )  $ ~~cout << n / m << endl ;  $ ~else  $ ~~cout << n / m + 1 << endl ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~int n ;  $ ~int S ;  $ ~cin >> n >> S ;  $ ~if ( S % n == 0 ) {  $ ~~cout << S / n << endl ;  $ ~} else {  $ ~~cout << S / n + 1 << endl ;  $ ~}  $ ~return 0 ;  $ }
int main ( ) {  $ ~int n , s ;  $ ~cin >> n >> s ;  $ ~cout << ( n + s - 1 ) / n << endl ;  $ ~return 0 ;  $ }
long long int n , sum ;  $ int main ( ) {  $ ~cin >> n >> sum ;  $ ~long long int ans = ( sum % n ) ? sum / n + 1 : sum / n ;  $ ~cout << ans << '\n' ;  $ }
int main ( ) {  $ ~int T , n , m ;  $ ~cin >> m >> n ;  $ ~cout << ( n / m + ( n % m ? 1 : 0 ) ) << endl ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~int ans = 0 ;  $ ~int n , s ;  $ ~cin >> n >> s ;  $ ~while ( s > 0 ) {  $ ~~s -= n ;  $ ~~ans ++ ;  $ ~}  $ ~cout << ans << endl ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~long long x , y , z ;  $ ~cin >> x >> y ;  $ ~z = ( y - 1 ) / x ;  $ ~z ++ ;  $ ~cout << z << endl ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~int n , s ;  $ ~cin >> n >> s ;  $ ~int sum = 0 ;  $ ~while ( 1 ) {  $ ~~sum += s / n ;  $ ~~s = s % n ;  $ ~~n -- ;  $ ~~if ( n == 0 ) break ;  $ ~}  $ ~cout << sum << endl ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~int n , m ;  $ ~cin >> n >> m ;  $ ~if ( m % n != 0 ) {  $ ~~cout << ( m / n ) + 1 << endl ;  $ ~} else  $ ~~cout << ( m / n ) << endl ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~int n , sum ;  $ ~cin >> n >> sum ;  $ ~if ( sum % n != 0 )  $ ~~cout << sum / n + 1 << endl ;  $ ~else  $ ~~cout << sum / n << endl ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~int s , n , cn = 0 ;  $ ~cin >> n >> s ;  $ ~while ( s > n ) {  $ ~~s = s - n ;  $ ~~cn ++ ;  $ ~}  $ ~cout << cn + 1 << endl ;  $ ~return 0 ;  $ }
int a , b ;  $ int main ( ) {  $ ~cin >> a >> b ;  $ ~int ans = 0 ;  $ ~ans = b / a ;  $ ~if ( b % a != 0 ) ans ++ ;  $ ~cout << ans << endl ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~int n , m ;  $ ~cin >> n >> m ;  $ ~int ans = 0 ;  $ ~if ( m % n == 0 ) {  $ ~~ans = m / n ;  $ ~} else {  $ ~~ans += m / n + 1 ;  $ ~}  $ ~cout << ans << endl ;  $ }
int main ( ) {  $ ~int n , s ;  $ ~cin >> n >> s ;  $ ~int ans = 0 ;  $ ~while ( s ) {  $ ~~if ( s == 0 ) break ;  $ ~~if ( s >= n )  $ ~~~s -= n , ans ++ ;  $ ~~else  $ ~~~n -- ;  $ ~}  $ ~cout << ans << endl ;  $ }
int main ( ) {  $ ~int n , s ;  $ ~cin >> n >> s ;  $ ~int count = 0 ;  $ ~for ( int i = n ; i > 0 ; i -- ) {  $ ~~int a = s / i ;  $ ~~count = count + a ;  $ ~~s = s % i ;  $ ~~if ( s == 0 ) { break ; }  $ ~}  $ ~cout << count << endl ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~long int n , s , temp , c = 0 ;  $ ~cin >> n >> s ;  $ ~while ( 1 ) {  $ ~~if ( s == 0 ) { break ; }  $ ~~temp = s ;  $ ~~s %= min ( s , n ) ;  $ ~~c += temp / min ( temp , n ) ;  $ ~}  $ ~cout << c << endl ;  $ }
int main ( ) {  $ ~long long n , s ;  $ ~cin >> n >> s ;  $ ~int ans = ( s + n - 1 ) / n ;  $ ~cout << ans << endl ;  $ }
int main ( ) {  $ ~long n , S ;  $ ~cin >> n >> S ;  $ ~int coins = 0 ;  $ ~coins += S / n ;  $ ~int rem = S % n ;  $ ~if ( rem == 0 )  $ ~~cout << coins << endl ;  $ ~else  $ ~~cout << ++ coins << endl ;  $ }
int main ( ) {  $ ~long long n , s , i ;  $ ~cin >> n >> s ;  $ ~if ( s % n != 0 ) {  $ ~~cout << s / n + 1 << endl ;  $ ~} else {  $ ~~cout << s / n << endl ;  $ ~}  $ ~return 0 ;  $ }
int main ( ) {  $ ~string N ;  $ ~cin >> N ;  $ ~if ( N [ 0 ] >= 'a' && N [ 0 ] <= 'z' ) { N [ 0 ] = N [ 0 ] - 32 ; }  $ ~cout << N << endl ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~char ch [ 1000 ] ;  $ ~gets ( ch ) ;  $ ~if ( ch [ 0 ] >= 'a' && ch [ 0 ] <= 'z' ) ch [ 0 ] = ch [ 0 ] - 32 ;  $ ~puts ( ch ) ;  $ }
int main ( ) {  $ ~string m ;  $ ~getline ( cin , m ) ;  $ ~if ( m [ 0 ] >= 97 && m [ 0 ] <= 122 ) m [ 0 ] = ( int ) m [ 0 ] - 32 ;  $ ~cout << m << endl ;  $ }
int main ( ) {  $ ~string input ;  $ ~cin >> input ;  $ ~if ( input [ 0 ] >= 'a' ) input [ 0 ] -= 32 ;  $ ~cout << input << endl ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~string word ;  $ ~cin >> word ;  $ ~int a = word [ 0 ] ;  $ ~if ( a > 90 ) {  $ ~~a = a - 32 ;  $ ~~word [ 0 ] = a ;  $ ~~cout << word << endl ;  $ ~} else {  $ ~~cout << word << endl ;  $ ~}  $ ~return 0 ;  $ }
int main ( ) {  $ ~char s [ 1001 ] ;  $ ~cin >> s ;  $ ~s [ 0 ] = toupper ( s [ 0 ] ) ;  $ ~cout << s << endl ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~string s ;  $ ~cin >> s ;  $ ~s [ 0 ] = toupper ( s [ 0 ] ) ;  $ ~cout << s << endl ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~string s ;  $ ~cin >> s ;  $ ~s [ 0 ] = toupper ( s [ 0 ] ) ;  $ ~cout << s << endl ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~char str [ 1000 ] ;  $ ~while ( cin >> str ) {  $ ~~if ( 'a' <= str [ 0 ] && str [ 0 ] <= 'z' ) { str [ 0 ] -= 32 ; }  $ ~~cout << str << endl ;  $ ~}  $ ~return 0 ;  $ }
int main ( ) {  $ ~string word ;  $ ~cin >> word ;  $ ~word [ 0 ] = toupper ( word [ 0 ] ) ;  $ ~cout << word << endl ;  $ }
int main ( ) {  $ ~string s ;  $ ~cin >> s ;  $ ~s [ 0 ] = towupper ( s [ 0 ] ) ;  $ ~cout << s << endl ;  $ ~return 0 ;  $ }
string s ;  $ int main ( ) {  $ ~cin >> s ;  $ ~if ( islower ( s [ 0 ] ) ) s [ 0 ] = ( char ) ( ( int ) s [ 0 ] - 32 ) ;  $ ~cout << s << endl ;  $ ~return 0 ;  $ }
char toUpp ( char s ) {  $ ~int n = s ;  $ ~if ( n >= 97 && n <= 122 ) n -= 32 ;  $ ~return ( char ) n ;  $ }  $ int main ( ) {  $ ~string s ;  $ ~cin >> s ;  $ ~s [ 0 ] = toUpp ( s [ 0 ] ) ;  $ ~cout << s << endl ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~int n , i , t1 , t2 ;  $ ~string a ;  $ ~getline ( cin , a ) ;  $ ~if ( a [ 0 ] > 96 && a [ 0 ] < 123 ) a [ 0 ] -= 32 ;  $ ~cout << a << endl ;  $ }
int main ( ) {  $ ~string xay ;  $ ~cin >> xay ;  $ ~if ( islower ( xay [ 0 ] ) ) { xay [ 0 ] = toupper ( xay [ 0 ] ) ; }  $ ~cout << xay << endl ;  $ }
int main ( ) {  $ ~char a [ 1100 ] ;  $ ~gets ( a ) ;  $ ~if ( a [ 0 ] >= 'A' && a [ 0 ] <= 'Z' ) { puts ( a ) ; }  $ ~if ( a [ 0 ] >= 'a' && a [ 0 ] <= 'z' ) {  $ ~~a [ 0 ] = a [ 0 ] - 32 ;  $ ~~puts ( a ) ;  $ ~}  $ ~return 0 ;  $ }
int main ( ) {  $ ~string ch ;  $ ~cin >> ch ;  $ ~ch [ 0 ] = toupper ( ch [ 0 ] ) ;  $ ~cout << ch << endl ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~string s ;  $ ~cin >> s ;  $ ~s [ 0 ] = towupper ( s [ 0 ] ) ;  $ ~cout << s << endl ;  $ ~return 0 ;  $ }
void capitalize ( string & word ) {  $ ~char first = word . at ( 0 ) ;  $ ~if ( first >= 97 && first <= 122 ) word . at ( 0 ) -= 32 ;  $ }  $ int main ( ) {  $ ~string input ;  $ ~cin >> input ;  $ ~capitalize ( input ) ;  $ ~cout << input << endl ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~string s ;  $ ~cin >> s ;  $ ~s [ 0 ] = toupper ( s [ 0 ] ) ;  $ ~cout << s << endl ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~char a [ 1000 ] ;  $ ~gets ( a ) ;  $ ~if ( a [ 0 ] >= 'a' && a [ 0 ] <= 'z' ) { a [ 0 ] = a [ 0 ] - ( 'a' - 'A' ) ; }  $ ~puts ( a ) ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~string s ;  $ ~cin >> s ;  $ ~s [ 0 ] = toupper ( s [ 0 ] ) ;  $ ~cout << s << endl ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~string s ;  $ ~cin >> s ;  $ ~if ( s [ 0 ] >= 97 && s [ 0 ] <= 122 ) s [ 0 ] -= 32 ;  $ ~cout << s << endl ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~string s ;  $ ~cin >> s ;  $ ~s [ 0 ] = towupper ( s [ 0 ] ) ;  $ ~cout << s << endl ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~string s ;  $ ~cin >> s ;  $ ~s [ 0 ] = toupper ( s [ 0 ] ) ;  $ ~cout << s << endl ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~string s ;  $ ~cin >> s ;  $ ~if ( s [ 0 ] >= 'a' && s [ 0 ] <= 'z' ) s [ 0 ] -= 32 ;  $ ~cout << s << endl ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~long long int n ;  $ ~string s ;  $ ~cin >> s ;  $ ~n = s . length ( ) ;  $ ~if ( s [ 0 ] > 96 && s [ 0 ] < 123 ) { s [ 0 ] = s [ 0 ] - 32 ; }  $ ~cout << s << "\n" ;  $ }
int main ( ) {  $ ~string x ;  $ ~cin >> x ;  $ ~if ( islower ( x [ 0 ] ) ) { x [ 0 ] = toupper ( x [ 0 ] ) ; }  $ ~cout << x << endl ;  $ }
int main ( ) {  $ ~string word ;  $ ~cin >> word ;  $ ~word [ 0 ] = toupper ( word [ 0 ] ) ;  $ ~cout << word << endl ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~string s ;  $ ~cin >> s ;  $ ~s [ 0 ] = toupper ( s [ 0 ] ) ;  $ ~cout << s << endl ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~string s ;  $ ~cin >> s ;  $ ~s [ 0 ] = toupper ( s [ 0 ] ) ;  $ ~cout << s << endl ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~string s ;  $ ~cin >> s ;  $ ~if ( s [ 0 ] >= 'a' && s [ 0 ] <= 'z' ) { s [ 0 ] = toupper ( s [ 0 ] ) ; }  $ ~cout << s << endl ;  $ }
int main ( ) {  $ ~string str ;  $ ~cin >> str ;  $ ~if ( ( ( int ) str [ 0 ] <= ( int ) 'z' ) && ( ( int ) str [ 0 ] >= 'a' ) ) str [ 0 ] = ( char ) ( ( int ) str [ 0 ] - 32 ) ;  $ ~cout << str << endl ;  $ }
int main ( ) {  $ ~string s ;  $ ~cin >> s ;  $ ~s [ 0 ] = towupper ( s [ 0 ] ) ;  $ ~cout << s << endl ;  $ ~return 0 ;  $ }
char a [ 1000000 ] ;  $ char b [ 53 ] = { "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ" } ;  $ int main ( ) {  $ ~gets ( a ) ;  $ ~for ( int i = 0 ; i < 26 ; i ++ ) {  $ ~~if ( a [ 0 ] == b [ i ] ) {  $ ~~~a [ 0 ] = b [ i + 26 ] ;  $ ~~~break ;  $ ~~}  $ ~}  $ ~puts ( a ) ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~string s ;  $ ~cin >> s ;  $ ~s [ 0 ] = toupper ( s [ 0 ] ) ;  $ ~cout << s << endl ;  $ }
int main ( ) {  $ ~string word ;  $ ~cin >> word ;  $ ~if ( word [ 0 ] >= 'a' && word [ 0 ] <= 'z' ) word [ 0 ] = word [ 0 ] - 32 ;  $ ~cout << word << endl ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~string S ;  $ ~cin >> S ;  $ ~S [ 0 ] = toupper ( S [ 0 ] ) ;  $ ~cout << S << endl ;  $ }
int main ( ) {  $ ~string str ;  $ ~cin >> str ;  $ ~str [ 0 ] = ( char ) toupper ( str [ 0 ] ) ;  $ ~cout << str << endl ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~string s ;  $ ~cin >> s ;  $ ~s [ 0 ] = toupper ( s [ 0 ] ) ;  $ ~cout << s << "\n" ;  $ }
int main ( ) {  $ ~string a ;  $ ~getline ( cin , a ) ;  $ ~if ( a [ 0 ] >= 'a' && a [ 0 ] <= 'z' ) a [ 0 ] -= 32 ;  $ ~cout << a << endl ;  $ }
int main ( ) {  $ ~int n , m ;  $ ~while ( cin >> n >> m ) {  $ ~~int cnt = 0 , ta , tb ;  $ ~~for ( int i = 0 ; i < n ; i ++ ) {  $ ~~~cin >> ta >> tb ;  $ ~~~if ( cnt >= ta ) cnt = max ( cnt , tb ) ;  $ ~~}  $ ~~cout << ( cnt >= m ? "YES\n" : "NO\n" ) ;  $ ~}  $ ~return 0 ;  $ }
int main ( ) {  $ ~int n , m ;  $ ~cin >> n >> m ;  $ ~vector < int > a ( 101 , 0 ) ;  $ ~int x , y ;  $ ~for ( int i = 0 ; i < n ; i ++ ) {  $ ~~cin >> x >> y ;  $ ~~a [ x ] ++ ;  $ ~~a [ y ] -- ;  $ ~}  $ ~int cs = 0 ;  $ ~for ( int i = 0 ; i < m ; i ++ ) {  $ ~~cs += a [ i ] ;  $ ~~if ( cs <= 0 ) {  $ ~~~cout << "NO" << endl ;  $ ~~~return 0 ;  $ ~~}  $ ~}  $ ~cout << "YES" << endl ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~int n , m ;  $ ~cin >> n >> m ;  $ ~int c = 0 ;  $ ~for ( int i = 0 ; i < n ; i ++ ) {  $ ~~int a , b ;  $ ~~cin >> a >> b ;  $ ~~if ( c >= a ) c = max ( c , b ) ;  $ ~}  $ ~if ( c >= m )  $ ~~cout << "YES\n" ;  $ ~else  $ ~~cout << "NO\n" ;  $ }
const int MAX = 1e5 ;  $ int main ( ) {  $ ~bool x [ 150 ] ;  $ ~memset ( x , false , sizeof ( x ) ) ;  $ ~int n , m ;  $ ~int l , r ;  $ ~int i , j ;  $ ~cin >> n >> m ;  $ ~for ( i = 0 ; i < n ; i ++ ) {  $ ~~cin >> l >> r ;  $ ~~for ( j = l ; j < r ; j ++ ) x [ j ] = true ;  $ ~}  $ ~for ( i = 0 ; i < m ; i ++ )  $ ~~if ( ! x [ i ] ) break ;  $ ~if ( i < m )  $ ~~cout << "NO" << endl ;  $ ~else  $ ~~cout << "YES" << endl ;  $ }
int pos [ 110 ] ;  $ int main ( ) {  $ ~int n , m ;  $ ~cin >> n >> m ;  $ ~for ( int i = 0 ; i < n ; i ++ ) {  $ ~~int a , b ;  $ ~~cin >> a >> b ;  $ ~~for ( int j = a + 1 ; j <= b ; j ++ ) pos [ j ] = 1 ;  $ ~}  $ ~for ( int i = 1 ; i <= m ; i ++ ) {  $ ~~if ( ! pos [ i ] ) return cout << "NO\n" , 0 ;  $ ~}  $ ~return cout << "YES\n" , 0 ;  $ }
int freq [ 10000005 ] ;  $ int n , m ;  $ int main ( ) {  $ ~cin >> n >> m ;  $ ~int mat [ n ] [ 2 ] ;  $ ~memset ( freq , 0 , sizeof freq ) ;  $ ~for ( int i = 0 ; i < n ; i ++ ) {  $ ~~cin >> mat [ i ] [ 0 ] >> mat [ i ] [ 1 ] ;  $ ~~for ( int j = ( mat [ i ] [ 0 ] ) + 1 ; j <= mat [ i ] [ 1 ] ; j ++ ) freq [ j ] ++ ;  $ ~}  $ ~for ( int i = 1 ; i <= m ; i ++ ) {  $ ~~if ( ! freq [ i ] ) {  $ ~~~puts ( "NO" ) ;  $ ~~~return 0 ;  $ ~~}  $ ~}  $ ~puts ( "YES" ) ;  $ ~return 0 ;  $ }
int n , m ;  $ int main ( ) {  $ ~cin >> n >> m ;  $ ~int a , b ;  $ ~int t = 0 ;  $ ~while ( n -- ) {  $ ~~cin >> a >> b ;  $ ~~if ( a <= t ) t = max ( t , b ) ;  $ ~}  $ ~if ( t >= m )  $ ~~cout << "YES" << endl ;  $ ~else  $ ~~cout << "NO" << endl ;  $ ~return 0 ;  $ }
int a [ 105 ] ;  $ int main ( ) {  $ ~int n , m , x , y , l = 0 , r ;  $ ~cin >> n >> m ;  $ ~for ( int i = 1 ; i <= n ; i ++ ) {  $ ~~cin >> x >> y ;  $ ~~if ( i == 1 && x != 0 ) {  $ ~~~cout << "NO" << endl ;  $ ~~~return 0 ;  $ ~~}  $ ~~if ( i == 1 )  $ ~~~r = y ;  $ ~~else if ( x <= r )  $ ~~~r = max ( r , y ) ;  $ ~}  $ ~if ( r >= m )  $ ~~cout << "YES" << endl ;  $ ~else  $ ~~cout << "NO" << endl ;  $ ~return 0 ;  $ }
int n , m , s ;  $ int main ( ) {  $ ~int l , r ;  $ ~cin >> n >> m ;  $ ~while ( n -- ) {  $ ~~cin >> l >> r ;  $ ~~if ( l <= s ) s = r < s ? s : r ;  $ ~}  $ ~if ( s < m )  $ ~~cout << "NO\n" ;  $ ~else  $ ~~cout << "YES\n" ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~int n , m , rightMost = 0 ;  $ ~cin >> n >> m ;  $ ~for ( int i = 0 ; i < n ; i ++ ) {  $ ~~int x , y ;  $ ~~cin >> x >> y ;  $ ~~if ( x <= rightMost && y > rightMost ) rightMost = y ;  $ ~}  $ ~if ( rightMost >= m )  $ ~~cout << "YES" << endl ;  $ ~else  $ ~~cout << "NO" << endl ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~int n , m ;  $ ~cin >> n >> m ;  $ ~vector < int > q ( 1000 , 0 ) ;  $ ~q [ 0 ] = 1 ;  $ ~for ( int i = 0 ; i < n ; ++ i ) {  $ ~~int a , b ;  $ ~~cin >> a >> b ;  $ ~~if ( q [ a ] == 1 ) {  $ ~~~while ( a <= b ) {  $ ~~~~q [ a ] = 1 ;  $ ~~~~++ a ;  $ ~~~}  $ ~~}  $ ~}  $ ~bool f = true ;  $ ~for ( int i = 0 ; i <= m ; ++ i ) { f &= q [ i ] ; }  $ ~if ( f )  $ ~~cout << "YES" << endl ;  $ ~else  $ ~~cout << "NO" << endl ;  $ }
int main ( ) {  $ ~int N , M ;  $ ~cin >> N >> M ;  $ ~vector < int > A ( N ) , B ( N ) ;  $ ~for ( int i = 0 ; i < ( int ) ( N ) ; ++ i ) { cin >> A [ i ] >> B [ i ] ; }  $ ~int max_ = 0 ;  $ ~for ( int i = 0 ; i < ( int ) ( N ) ; ++ i ) {  $ ~~if ( max_ < A [ i ] ) { break ; }  $ ~~max_ = max ( max_ , B [ i ] ) ;  $ ~}  $ ~if ( max_ == M ) {  $ ~~cout << "YES"  $ ~~~<< "\n" ;  $ ~} else {  $ ~~cout << "NO"  $ ~~~<< "\n" ;  $ ~}  $ ~return 0 ;  $ }
int a [ 105 ] ;  $ int main ( ) {  $ ~int n , m , x , y , l = 0 , r ;  $ ~cin >> n >> m ;  $ ~for ( int i = 1 ; i <= n ; i ++ ) {  $ ~~cin >> x >> y ;  $ ~~if ( i == 1 && x != 0 ) {  $ ~~~cout << "NO" << endl ;  $ ~~~return 0 ;  $ ~~}  $ ~~if ( i == 1 )  $ ~~~r = y ;  $ ~~else if ( x <= r )  $ ~~~r = max ( r , y ) ;  $ ~}  $ ~if ( r >= m )  $ ~~cout << "YES" << endl ;  $ ~else  $ ~~cout << "NO" << endl ;  $ ~return 0 ;  $ }
int freq [ 10000005 ] ;  $ int n , m , x , to ;  $ int main ( ) {  $ ~cin >> n >> m ;  $ ~for ( int i = 0 ; i < n ; i ++ ) {  $ ~~cin >> x >> to ;  $ ~~for ( int j = x + 1 ; j <= to ; j ++ ) freq [ j ] = 1 ;  $ ~}  $ ~for ( int i = 1 ; i <= m ; i ++ ) {  $ ~~if ( ! freq [ i ] ) {  $ ~~~puts ( "NO" ) ;  $ ~~~return 0 ;  $ ~~}  $ ~}  $ ~puts ( "YES" ) ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~int n , m ;  $ ~cin >> n >> m ;  $ ~m *= 2 ;  $ ~bool v [ 2 * 110 ] ;  $ ~memset ( ( v ) , ( false ) , sizeof ( v ) ) ;  $ ~while ( n -- ) {  $ ~~int a , b ;  $ ~~cin >> a >> b ;  $ ~~a *= 2 ;  $ ~~b *= 2 ;  $ ~~memset ( v + a , true , b - a + 1 ) ;  $ ~}  $ ~bool ok = true ;  $ ~for ( int i = 0 ; i <= m ; ++ i )  $ ~~if ( ! v [ i ] ) ok = false ;  $ ~cout << ( ok ? "YES" : "NO" ) << "\n" ;  $ ~return 0 ;  $ }
int freq [ 10000005 ] ;  $ int n , m , x , to ;  $ int main ( ) {  $ ~cin >> n >> m ;  $ ~memset ( freq , 0 , sizeof freq ) ;  $ ~for ( int i = 0 ; i < n ; i ++ ) {  $ ~~cin >> x >> to ;  $ ~~for ( int j = x + 1 ; j <= to ; j ++ ) freq [ j ] ++ ;  $ ~}  $ ~for ( int i = 1 ; i <= m ; i ++ ) {  $ ~~if ( ! freq [ i ] ) {  $ ~~~puts ( "NO" ) ;  $ ~~~return 0 ;  $ ~~}  $ ~}  $ ~puts ( "YES" ) ;  $ ~return 0 ;  $ }
inline int getint ( ) {  $ ~int r = 0 , k = 1 ;  $ ~char c = getchar ( ) ;  $ ~for ( ; c < '0' || c > '9' ; c = getchar ( ) )  $ ~~if ( c == '-' ) k = - 1 ;  $ ~for ( ; c >= '0' && c <= '9' ; c = getchar ( ) ) r = r * 10 + c - '0' ;  $ ~return r * k ;  $ }  $ int main ( ) {  $ ~int n = getint ( ) ;  $ ~int m = getint ( ) ;  $ ~int maxx = 0 ;  $ ~for ( int i = 1 ; i <= n ; i ++ ) {  $ ~~int x = getint ( ) ;  $ ~~int y = getint ( ) ;  $ ~~if ( maxx >= x ) maxx = max ( maxx , y ) ;  $ ~}  $ ~if ( maxx >= m )  $ ~~puts ( "YES" ) ;  $ ~else  $ ~~puts ( "NO" ) ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~long long x , y , n , c ;  $ ~cin >> n ;  $ ~x = n - 1 ;  $ ~y = 1 ;  $ ~c = 1 ;  $ ~while ( x > 0 ) {  $ ~~c ++ ;  $ ~~if ( x * x + y * y + 2 * y + 1 < n * n + 1 )  $ ~~~y ++ ;  $ ~~else {  $ ~~~if ( x * x - 2 * x + y * y + 2 * y + 2 < n * n + 1 ) {  $ ~~~~x = x - 1 ;  $ ~~~~y ++ ;  $ ~~~} else {  $ ~~~~x = x - 1 ;  $ ~~~}  $ ~~}  $ ~}  $ ~if ( n == 0 ) {  $ ~~cout << 1 << endl ;  $ ~} else {  $ ~~cout << 4 * c << endl ;  $ ~}  $ }
int main ( ) {  $ ~long long n , ans = 0 ;  $ ~cin >> n ;  $ ~double R = n ;  $ ~long long tmp = n , k ;  $ ~for ( long long i = 1 ; i <= n ; i ++ ) {  $ ~~double r = i ;  $ ~~k = ( long long ) sqrt ( R * R - r * r ) ;  $ ~~ans += ( tmp == k ? 1 : tmp - k ) ;  $ ~~tmp = k ;  $ ~}  $ ~if ( n == 0 )  $ ~~cout << 1 << endl ;  $ ~else  $ ~~cout << ans * 4 << endl ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~long long n ;  $ ~cin >> n ;  $ ~if ( 0 < n && n < 40000001 ) {  $ ~~long long x = n , y = 0 , k = 0 ;  $ ~~while ( x > 0 ) {  $ ~~~k ++ ;  $ ~~~y ++ ;  $ ~~~if ( x * x + y * y > n * n ) { x -- ; }  $ ~~~if ( x * x + y * y > n * n ) { y -- ; }  $ ~~}  $ ~~cout << 4 * k << endl ;  $ ~} else if ( n == 0 ) {  $ ~~cout << 1 << endl ;  $ ~}  $ ~return 0 ;  $ }
int main ( ) {  $ ~long long n ;  $ ~while ( cin >> n ) {  $ ~~long long x = n * sqrt ( double ( 2 ) ) ;  $ ~~if ( n == 0 ) {  $ ~~~cout << 1 << endl ;  $ ~~} else {  $ ~~~cout << x * 4 << endl ;  $ ~~}  $ ~}  $ ~return 0 ;  $ }
long long Eu_distance ( long long x , long long y ) {  $ ~return x * x + y * y ;  $ }  $ int main ( ) {  $ ~long long n ;  $ ~cin >> n ;  $ ~if ( n == 0 ) {  $ ~~puts ( "1" ) ;  $ ~} else if ( n == 1 ) {  $ ~~puts ( "4" ) ;  $ ~} else {  $ ~~long long x , y = n ;  $ ~~long long res = 0 ;  $ ~~for ( x = 0 ; x < n , x <= y ; x ++ ) {  $ ~~~while ( Eu_distance ( x , y ) > n * n ) { y -- ; }  $ ~~~if ( x > y ) { break ; }  $ ~~~if ( x != y ) {  $ ~~~~res += 2 ;  $ ~~~} else {  $ ~~~~res ++ ;  $ ~~~}  $ ~~}  $ ~~res -= 2 ;  $ ~~res = res * 4 + 4 ;  $ ~~cout << res << endl ;  $ ~}  $ }
int main ( ) {  $ ~long long n ;  $ ~long long w ;  $ ~long long t ;  $ ~int q = 1 ;  $ ~cin >> n ;  $ ~if ( n == 0 ) {  $ ~~cout << q << endl ;  $ ~} else {  $ ~~long long int r = int ( sqrt ( ( n * n ) / 2 ) ) * 2 ;  $ ~~w = n * n ;  $ ~~if ( ( r / 2 ) * ( r / 2 ) + ( r / 2 + 1 ) * ( r / 2 + 1 ) <= w ) { r ++ ; }  $ ~~cout << 4 * r << endl ;  $ ~}  $ }
const int Maxn = 3010 , INF = 0 x3f3f3f3f ;  $ int main ( ) {  $ ~long long n ;  $ ~cin >> n ;  $ ~if ( n == 0 )  $ ~~cout << 1 << endl ;  $ ~else  $ ~~cout << ( ( long long ) ( n * sqrt ( 2 ) ) ) * 4 << endl ;  $ }
int main ( ) {  $ ~long long int n ;  $ ~cin >> n ;  $ ~long long int j = n - 1 ;  $ ~long long lim = n * n ;  $ ~long long t ;  $ ~long long prevj = n ;  $ ~long long sum = 0 ;  $ ~if ( n == 0 ) {  $ ~~cout << 1 << "\n" ;  $ ~~return 0 ;  $ ~}  $ ~for ( long long int i = 1 ; i < n + 1 ; ++ i ) {  $ ~~t = i * i ;  $ ~~while ( j > 0 && j * j > ( lim - t ) ) j -- ;  $ ~~sum += 1 ;  $ ~~if ( prevj != j ) sum += ( prevj - j - 1 ) ;  $ ~~prevj = j ;  $ ~}  $ ~cout << 4 * sum << "\n" ;  $ }
int main ( ) {  $ ~long long int n , max , save ;  $ ~cin >> n ;  $ ~if ( n == 0 ) {  $ ~~cout << 1 << endl ;  $ ~~return 0 ;  $ ~}  $ ~if ( n == 1 ) {  $ ~~cout << 4 << endl ;  $ ~~return 0 ;  $ ~}  $ ~for ( max = 0 ; 2 * ( max * max ) < n * n ; max ++ ) { save = max ; }  $ ~if ( ( save + 1 ) * ( save + 1 ) + save * save <= n * n ) {  $ ~~n = ( save ) * 8 + 4 ;  $ ~~cout << n << endl ;  $ ~~return 0 ;  $ ~}  $ ~n = ( save ) * 8 ;  $ ~cout << n << endl ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~int n ;  $ ~while ( cin >> n ) {  $ ~~int x = n * sqrt ( double ( 2 ) ) ;  $ ~~if ( n == 0 )  $ ~~~cout << 1 << endl ;  $ ~~else  $ ~~~cout << x * 4 << endl ;  $ ~}  $ ~return 0 ;  $ }
int main ( ) {  $ ~int n ;  $ ~cin >> n ;  $ ~if ( ! n )  $ ~~cout << 1 << endl ;  $ ~else  $ ~~cout << ( int ) ( sqrt ( 2 ) * n ) * 4 << endl ;  $ ~return 0 ;  $ }
long long n ;  $ long long inside ( long long x , long long y ) {  $ ~if ( sqrt ( x * x + y * y ) <= n ) return 1 ;  $ ~return 0 ;  $ }  $ int main ( ) {  $ ~long long num ;  $ ~cin >> n ;  $ ~num = n / 2 ;  $ ~while ( ( num + 1 ) * sqrt ( 2.0 ) <= n ) num ++ ;  $ ~if ( n == 1 )  $ ~~cout << 4 << endl ;  $ ~else if ( n == 0 )  $ ~~cout << 1 << endl ;  $ ~else if ( inside ( num , num + 1 ) )  $ ~~cout << 8 * num + 4 << endl ;  $ ~else if ( ! inside ( num , num + 1 ) )  $ ~~cout << 8 * num << endl ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~int a [ 3 ] ;  $ ~while ( cin >> a [ 0 ] >> a [ 1 ] >> a [ 2 ] ) {  $ ~~sort ( a , a + 3 ) ;  $ ~~if ( a [ 0 ] + a [ 1 ] > a [ 2 ] )  $ ~~~cout << '0' << '\n' ;  $ ~~else  $ ~~~cout << a [ 2 ] + 1 - a [ 1 ] - a [ 0 ] << '\n' ;  $ ~}  $ ~return 0 ;  $ }
int main ( ) {  $ ~int a , b , c , res = 0 ;  $ ~cin >> a >> b >> c ;  $ ~if ( a >= b + c ) {  $ ~~res = a - ( b + c ) + 1 ;  $ ~} else if ( b >= a + c ) {  $ ~~res = b - ( a + c ) + 1 ;  $ ~} else if ( c >= a + b ) {  $ ~~res = c - ( b + a ) + 1 ;  $ ~}  $ ~cout << res << endl ;  $ }
bool compare ( int a , int b ) {  $ ~return ( a < b ) ;  $ }  $ int main ( ) {  $ ~int arr [ 3 ] ;  $ ~while ( cin >> arr [ 0 ] >> arr [ 1 ] >> arr [ 2 ] ) {  $ ~~sort ( arr , arr + 3 ) ;  $ ~~if ( arr [ 0 ] + arr [ 1 ] > arr [ 2 ] ) {  $ ~~~cout << 0 << endl ;  $ ~~} else {  $ ~~~cout << ( arr [ 2 ] + 1 - arr [ 1 ] - arr [ 0 ] ) << endl ;  $ ~~}  $ ~}  $ ~return 0 ;  $ }
int main ( ) {  $ ~int a [ 3 ] ;  $ ~cin >> a [ 0 ] >> a [ 1 ] >> a [ 2 ] ;  $ ~sort ( a , a + 3 ) ;  $ ~cout << max ( a [ 2 ] - a [ 1 ] - a [ 0 ] + 1 , 0 ) << endl ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~int a [ 3 ] ;  $ ~cin >> a [ 0 ] >> a [ 1 ] >> a [ 2 ] ;  $ ~sort ( a , a + 3 ) ;  $ ~cout << max ( 0 , a [ 2 ] - a [ 1 ] + 1 - a [ 0 ] ) << "\n" ;  $ }
int main ( ) {  $ ~int a [ 3 ] ;  $ ~cin >> a [ 0 ] >> a [ 1 ] >> a [ 2 ] ;  $ ~sort ( a , a + 3 ) ;  $ ~cout << max ( 0 , a [ 2 ] + 1 - ( a [ 0 ] + a [ 1 ] ) ) << endl ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~long long int a , b , c , d , e , f , g ;  $ ~string s , t ;  $ ~while ( cin >> a >> b >> c ) {  $ ~~d = 0 ;  $ ~~while ( 1 ) {  $ ~~~if ( a + b > c && b + c > a && a + c > b ) {  $ ~~~~break ;  $ ~~~} else {  $ ~~~~d ++ ;  $ ~~~~if ( a <= b && a <= c ) {  $ ~~~~~a ++ ;  $ ~~~~} else if ( b <= a && b <= c ) {  $ ~~~~~b ++ ;  $ ~~~~} else {  $ ~~~~~c ++ ;  $ ~~~~}  $ ~~~}  $ ~~}  $ ~~cout << d << endl ;  $ ~}  $ ~return 0 ;  $ }
int main ( ) {  $ ~vector < int > lines ( 3 ) ;  $ ~cin >> lines [ 0 ] >> lines [ 1 ] >> lines [ 2 ] ;  $ ~sort ( lines . begin ( ) , lines . end ( ) ) ;  $ ~int counter = 0 ;  $ ~while ( lines [ 0 ] + lines [ 1 ] <= lines [ 2 ] ) {  $ ~~lines [ 0 ] ++ ;  $ ~~counter ++ ;  $ ~}  $ ~cout << counter << endl ;  $ ~return 0 ;  $ }
bool checkValidity ( int a , int b , int c ) {  $ ~if ( a + b <= c || a + c <= b || b + c <= a )  $ ~~return false ;  $ ~else  $ ~~return true ;  $ }  $ int main ( ) {  $ ~long long a , b , c ;  $ ~cin >> a >> b >> c ;  $ ~int counter = 100000 ;  $ ~for ( int i = a ; i <= 100 ; i ++ ) {  $ ~~for ( int j = b ; j <= 100 ; j ++ ) {  $ ~~~for ( int k = c ; k <= 100 ; k ++ ) {  $ ~~~~if ( checkValidity ( i , j , k ) ) {  $ ~~~~~int temp = abs ( i - a ) + ( j - b ) + ( k - c ) ;  $ ~~~~~counter = min ( counter , temp ) ;  $ ~~~~}  $ ~~~}  $ ~~}  $ ~}  $ ~cout << counter << endl ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~int a , b , c ;  $ ~int max , ans ;  $ ~cin >> a >> b >> c ;  $ ~max = a ;  $ ~if ( max < b ) max = b ;  $ ~if ( max < c ) max = c ;  $ ~if ( ( ans = 2 * max - ( a + b + c ) ) < 0 )  $ ~~cout << 0 << endl ;  $ ~else  $ ~~cout << ans + 1 << endl ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~int a [ 3 ] , i ;  $ ~for ( i = 0 ; i < 3 ; i ++ ) cin >> a [ i ] ;  $ ~sort ( a , a + 3 ) ;  $ ~if ( a [ 0 ] + a [ 1 ] > a [ 2 ] ) {  $ ~~cout << 0 << endl ;  $ ~} else {  $ ~~cout << a [ 2 ] + 1 - a [ 0 ] - a [ 1 ] << endl ;  $ ~}  $ ~return 0 ;  $ }
int main ( ) {  $ ~int a , b , c ;  $ ~cin >> a >> b >> c ;  $ ~int flag = 0 ;  $ ~while ( a + b < ( c + 1 ) ) {  $ ~~++ flag ;  $ ~~++ a ;  $ ~}  $ ~while ( a + c < ( b + 1 ) ) {  $ ~~++ flag ;  $ ~~++ a ;  $ ~}  $ ~while ( b + c < ( a + 1 ) ) {  $ ~~++ flag ;  $ ~~++ b ;  $ ~}  $ ~cout << flag << "\n" ;  $ }
const double pi = acos ( - 1 ) ;  $ int main ( ) {  $ ~int a [ 3 ] , k = 0 ;  $ ~cin >> a [ 0 ] >> a [ 1 ] >> a [ 2 ] ;  $ ~sort ( a , a + 3 ) ;  $ ~if ( a [ 1 ] + a [ 0 ] > a [ 2 ] && a [ 2 ] - a [ 0 ] < a [ 1 ] ) {  $ ~~cout << k << endl ;  $ ~~return 0 ;  $ ~}  $ ~if ( a [ 1 ] + a [ 0 ] <= a [ 2 ] ) {  $ ~~k = a [ 2 ] - a [ 1 ] - a [ 0 ] + 1 ;  $ ~~cout << k << endl ;  $ ~~return 0 ;  $ ~}  $ }
const int MAXP = 55 ;  $ int main ( ) {  $ ~int a [ 3 ] ;  $ ~cin >> a [ 0 ] >> a [ 1 ] >> a [ 2 ] ;  $ ~sort ( a , a + 3 ) ;  $ ~cout << max ( 0 , a [ 2 ] - a [ 0 ] - a [ 1 ] + 1 ) << endl ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~int a , b , c ;  $ ~cin >> a >> b >> c ;  $ ~int min_cnt = 1e9 ;  $ ~for ( int i = a ; i <= 100 ; i ++ ) {  $ ~~for ( int j = b ; j <= 100 ; j ++ ) {  $ ~~~for ( int k = c ; k <= 100 ; k ++ ) {  $ ~~~~double s = ( i + j + k ) / 2.0 ;  $ ~~~~double under_root = s * ( s - i ) * ( s - j ) * ( s - k ) ;  $ ~~~~if ( under_root > 0.0 ) { min_cnt = min ( min_cnt , ( ( i - a ) + ( j - b ) + ( k - c ) ) ) ; }  $ ~~~}  $ ~~}  $ ~}  $ ~cout << min_cnt << "\n" ;  $ ~return 0 ;  $ }
const int maxn = 1e5 + 5 ;  $ int main ( ) {  $ ~int ans = 0 ;  $ ~int a [ 4 ] ;  $ ~while ( cin >> a [ 1 ] >> a [ 2 ] >> a [ 3 ] ) {  $ ~~sort ( a + 1 , a + 4 ) ;  $ ~~ans = 0 ;  $ ~~while ( a [ 1 ] + a [ 2 ] <= a [ 3 ] ) {  $ ~~~ans ++ ;  $ ~~~a [ 1 ] ++ ;  $ ~~}  $ ~~cout << ans << endl ;  $ ~}  $ }
int main ( ) {  $ ~int a [ 3 ] ;  $ ~cin >> a [ 0 ] >> a [ 1 ] >> a [ 2 ] ;  $ ~sort ( a , a + 3 ) ;  $ ~if ( a [ 0 ] + a [ 1 ] > a [ 2 ] )  $ ~~cout << 0 << endl ;  $ ~else  $ ~~cout << a [ 2 ] + 1 - a [ 0 ] - a [ 1 ] << endl ;  $ }
int main ( ) {  $ ~int a , b , c , s , m , d ;  $ ~cin >> a >> b >> c ;  $ ~s = a + b + c ;  $ ~m = max ( max ( a , b ) , c ) ;  $ ~d = 2 * m - s + 1 ;  $ ~if ( d <= 0 ) d = 0 ;  $ ~cout << d << endl ;  $ }
int main ( ) {  $ ~int a , b , c , d , l = 0 ;  $ ~cin >> a >> b >> c ;  $ ~if ( a + b > c && b + c > a && a + c > b ) {  $ ~~d = 0 ;  $ ~~cout << d << endl ;  $ ~} else {  $ ~~if ( a <= b || a <= c ) {  $ ~~~while ( true ) {  $ ~~~~a ++ ;  $ ~~~~l ++ ;  $ ~~~~if ( a + b > c && b + c > a && a + c > b ) {  $ ~~~~~cout << l << endl ;  $ ~~~~~break ;  $ ~~~~}  $ ~~~}  $ ~~} else {  $ ~~~if ( b <= a || b <= c ) {  $ ~~~~while ( true ) {  $ ~~~~~b ++ ;  $ ~~~~~l ++ ;  $ ~~~~~if ( a + b > c && b + c > a && a + c > b ) {  $ ~~~~~~cout << l << endl ;  $ ~~~~~~break ;  $ ~~~~~}  $ ~~~~}  $ ~~~}  $ ~~}  $ ~}  $ }
int main ( ) {  $ ~int a [ 3 ] ;  $ ~cin >> a [ 0 ] >> a [ 1 ] >> a [ 2 ] ;  $ ~sort ( a , a + 3 , greater < int > ( ) ) ;  $ ~if ( a [ 0 ] + a [ 1 ] > a [ 2 ] && a [ 1 ] + a [ 2 ] > a [ 0 ] && a [ 2 ] + a [ 1 ] > a [ 0 ] ) {  $ ~~cout << 0 << endl ;  $ ~} else if ( a [ 0 ] + a [ 1 ] > a [ 2 ] && a [ 0 ] + a [ 2 ] > a [ 1 ] && a [ 2 ] + a [ 1 ] <= a [ 0 ] ) {  $ ~~int num1 = a [ 0 ] / 2 ;  $ ~~num1 = a [ 0 ] - num1 ;  $ ~~num1 = num1 - a [ 2 ] ;  $ ~~int num2 = a [ 0 ] / 2 ;  $ ~~num2 = a [ 0 ] - num2 ;  $ ~~num2 = num2 - a [ 1 ] ;  $ ~~if ( a [ 0 ] % 2 ) {  $ ~~~cout << num1 + num2 << endl ;  $ ~~} else {  $ ~~~cout << num1 + num2 + 1 << endl ;  $ ~~}  $ ~}  $ }
int main ( ) {  $ ~int a [ 3 ] ;  $ ~cin >> a [ 0 ] >> a [ 1 ] >> a [ 2 ] ;  $ ~sort ( a , a + 3 ) ;  $ ~a [ 2 ] ++ ;  $ ~if ( a [ 0 ] + a [ 1 ] >= a [ 2 ] ) {  $ ~~cout << "0" << endl ;  $ ~} else {  $ ~~cout << a [ 2 ] - ( a [ 0 ] + a [ 1 ] ) << endl ;  $ ~~return 0 ;  $ ~}  $ }
int A [ 3 ] ;  $ int main ( ) {  $ ~for ( int i = 0 ; i < 3 ; i ++ ) { cin >> A [ i ] ; }  $ ~sort ( A , A + 3 ) ;  $ ~cout << max ( 0 , A [ 2 ] - A [ 1 ] - A [ 0 ] + 1 ) << '\n' ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~int n ;  $ ~cin >> n ;  $ ~while ( n -- ) {  $ ~~int a ;  $ ~~cin >> a ;  $ ~~if ( a == 1 ) {  $ ~~~cout << "HARD\n" ;  $ ~~~return 0 ;  $ ~~}  $ ~}  $ ~cout << "EASY\n" ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~int n , i , a , s = 0 ;  $ ~cin >> n ;  $ ~for ( i = 0 ; i < n ; i ++ ) {  $ ~~cin >> a ;  $ ~~s += a ;  $ ~}  $ ~if ( s != 0 ) {  $ ~~cout << "HARD" << endl ;  $ ~} else {  $ ~~cout << "EASY" << endl ;  $ ~}  $ ~return 0 ;  $ }
int a [ 100 ] , n , sum ;  $ int main ( ) {  $ ~cin >> n ;  $ ~for ( int i = 0 ; i < n ; i ++ ) {  $ ~~cin >> a [ i ] ;  $ ~~sum = sum + a [ i ] ;  $ ~}  $ ~if ( sum == 0 ) {  $ ~~cout << "EASY" << endl ;  $ ~} else {  $ ~~cout << "HARD" << endl ;  $ ~}  $ ~return 0 ;  $ }
int main ( ) {  $ ~int n ;  $ ~cin >> n ;  $ ~int arr [ n ] ;  $ ~bool ans = true ;  $ ~for ( int i = 0 ; i < n ; i ++ ) {  $ ~~cin >> arr [ i ] ;  $ ~~if ( arr [ i ] == 1 ) { ans = false ; }  $ ~}  $ ~if ( ans ) {  $ ~~cout << "EASY" << endl ;  $ ~} else {  $ ~~cout << "HARD" << endl ;  $ ~}  $ }
int a [ 100 ] , x , sum = 0 ;  $ int main ( ) {  $ ~cin >> x ;  $ ~for ( int z = 0 ; z < x ; z ++ ) {  $ ~~cin >> a [ z ] ;  $ ~~sum = sum + a [ z ] ;  $ ~}  $ ~if ( sum == 0 ) {  $ ~~cout << "EASY" << endl ;  $ ~} else {  $ ~~cout << "HARD" << endl ;  $ ~}  $ }
void solve ( ) {  $ ~int n ;  $ ~cin >> n ;  $ ~while ( n -- ) {  $ ~~int a ;  $ ~~cin >> a ;  $ ~~if ( a == 1 ) {  $ ~~~cout << "HARD" << '\n' ;  $ ~~~return ;  $ ~~}  $ ~}  $ ~cout << "EASY" << '\n' ;  $ }  $ int main ( ) {  $ ~solve ( ) ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~int n ;  $ ~cin >> n ;  $ ~while ( n -- ) {  $ ~~int r ;  $ ~~cin >> r ;  $ ~~if ( r == 1 ) {  $ ~~~cout << "HARD"  $ ~~~~<< "\n" ;  $ ~~~return 0 ;  $ ~~}  $ ~}  $ ~cout << "EASY"  $ ~~<< "\n" ;  $ }
int main ( ) {  $ ~int n , x , z = 0 ;  $ ~cin >> n ;  $ ~for ( int i = 0 ; i < n ; i ++ ) {  $ ~~cin >> x ;  $ ~~if ( x > 0 ) { z ++ ; }  $ ~}  $ ~if ( z > 0 )  $ ~~cout << "HARD" << endl ;  $ ~else  $ ~~cout << "EASY" << endl ;  $ }
int main ( ) {  $ ~int n ;  $ ~cin >> n ;  $ ~int * arr = new int [ n ] ;  $ ~int sum = 0 ;  $ ~for ( int i = 0 ; i < n ; i ++ ) {  $ ~~cin >> arr [ i ] ;  $ ~~sum += arr [ i ] ;  $ ~}  $ ~if ( sum == 0 ) {  $ ~~cout << "EASY" << endl ;  $ ~} else {  $ ~~cout << "HARD" << endl ;  $ ~}  $ ~return 0 ;  $ }
int main ( ) {  $ ~int n ;  $ ~cin >> n ;  $ ~while ( n -- ) {  $ ~~int a ;  $ ~~cin >> a ;  $ ~~if ( a == 1 ) {  $ ~~~cout << "HARD\n" ;  $ ~~~exit ( 0 ) ;  $ ~~}  $ ~}  $ ~cout << "EASY\n" ;  $ ~return 0 ;  $ }
inline void wa ( ) {  $ ~cout << "HARD" << endl ;  $ }  $ inline void ac ( ) {  $ ~cout << "EASY" << endl ;  $ }  $ int main ( ) {  $ ~int n ;  $ ~cin >> n ;  $ ~for ( int i = 1 ; i <= n ; i ++ ) {  $ ~~int tmp ;  $ ~~cin >> tmp ;  $ ~~if ( tmp ) {  $ ~~~wa ( ) ;  $ ~~~return 0 ;  $ ~~}  $ ~}  $ ~ac ( ) ;  $ }
int main ( ) {  $ ~int n ;  $ ~bool cek = 0 ;  $ ~cin >> n ;  $ ~for ( int i = 1 ; i <= n ; i ++ ) {  $ ~~int a ;  $ ~~cin >> a ;  $ ~~if ( a == 1 ) { cek = 1 ; }  $ ~}  $ ~if ( cek == 0 ) {  $ ~~cout << "EASY" << endl ;  $ ~} else {  $ ~~cout << "HARD" << endl ;  $ ~}  $ }
int main ( ) {  $ ~int n ;  $ ~cin >> n ;  $ ~for ( int i = 0 ; i < n ; i ++ ) {  $ ~~int e ;  $ ~~cin >> e ;  $ ~~if ( e == 1 ) {  $ ~~~cout << "HARD" << endl ;  $ ~~~return 0 ;  $ ~~}  $ ~}  $ ~cout << "EASY" << endl ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~int a , b , c ;  $ ~int cnt = 0 ;  $ ~cin >> a ;  $ ~for ( int i = 1 ; i <= a ; i ++ ) {  $ ~~cin >> b ;  $ ~~if ( b == 1 ) cnt ++ ;  $ ~}  $ ~if ( cnt >= 1 )  $ ~~cout << "HARD" << endl ;  $ ~else  $ ~~cout << "EASY" << endl ;  $ }
int main ( ) {  $ ~int n ;  $ ~cin >> n ;  $ ~bool flag = false ;  $ ~for ( int i = 0 ; i < n ; i ++ ) {  $ ~~int a ;  $ ~~cin >> a ;  $ ~~if ( a ) flag = true ;  $ ~}  $ ~if ( flag )  $ ~~cout << "HARD" << endl ;  $ ~else  $ ~~cout << "EASY" << endl ;  $ }
int main ( ) {  $ ~int n ;  $ ~cin >> n ;  $ ~int s [ n ] ;  $ ~for ( int i = 0 ; i < n ; i ++ ) { cin >> s [ i ] ; }  $ ~int count1 = 0 ;  $ ~for ( int i = 0 ; i < n ; i ++ ) {  $ ~~if ( s [ i ] == 1 ) count1 ++ ;  $ ~}  $ ~if ( count1 != 0 )  $ ~~cout << "HARD" << endl ;  $ ~else  $ ~~cout << "EASY" << endl ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~int a [ 101 ] , i , j , n ;  $ ~cin >> n ;  $ ~for ( i = 0 ; i < n ; i ++ ) { cin >> a [ i ] ; }  $ ~sort ( a , a + n ) ;  $ ~if ( a [ n - 1 ] == 1 )  $ ~~cout << "HARD" << endl ;  $ ~else  $ ~~cout << "EASY" << endl ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~int n , i ;  $ ~cin >> n ;  $ ~int a [ n ] ;  $ ~for ( i = 0 ; i < n ; i ++ ) {  $ ~~cin >> a [ i ] ;  $ ~~if ( a [ i ] == 1 ) {  $ ~~~cout << "HARD" << endl ;  $ ~~~return 0 ;  $ ~~}  $ ~}  $ ~cout << "EASY" << endl ;  $ }
int main ( ) {  $ ~int a [ 10000 ] ;  $ ~int n , i , k ;  $ ~k = 0 ;  $ ~cin >> n ;  $ ~for ( i = 0 ; i < n ; i ++ ) { cin >> a [ i ] ; }  $ ~for ( i = 0 ; i < n ; i ++ ) {  $ ~~if ( a [ i ] > 0 ) { k ++ ; }  $ ~}  $ ~if ( k > 0 ) {  $ ~~cout << "HARD" << endl ;  $ ~} else {  $ ~~cout << "EASY" << endl ;  $ ~}  $ ~return 0 ;  $ }
int main ( ) {  $ ~int n , a ;  $ ~cin >> n ;  $ ~for ( int i = 0 ; i < n ; i ++ ) {  $ ~~cin >> a ;  $ ~~if ( a == 1 ) {  $ ~~~cout << "HARD" << endl ;  $ ~~~return 0 ;  $ ~~}  $ ~}  $ ~cout << "EASY" << endl ;  $ ~return 0 ;  $ }
char Not ( char x ) {  $ ~return ( x == '0' ? '1' : '0' ) ;  $ }  $ int main ( ) {  $ ~string s ;  $ ~cin >> s ;  $ ~for ( int i = 0 ; i < ( int ) s . size ( ) ; i ++ ) {  $ ~~if ( s [ i ] == 'r' ) { cout << i + 1 << '\n' ; }  $ ~}  $ ~for ( int i = ( int ) s . size ( ) - 1 ; i >= 0 ; i -- ) {  $ ~~if ( s [ i ] == 'l' ) { cout << i + 1 << '\n' ; }  $ ~}  $ ~return 0 ;  $ }
int main ( ) {  $ ~string ss ;  $ ~cin >> ss ;  $ ~int idx = ( int ) ss . size ( ) - 1 ;  $ ~vector < int > ans ( ( int ) ss . size ( ) ) ;  $ ~for ( int i = 0 ; i < ( int ) ss . size ( ) ; i ++ ) {  $ ~~if ( ss [ i ] == 'r' ) continue ;  $ ~~ans [ idx ] = i ;  $ ~~idx -- ;  $ ~}  $ ~idx = 0 ;  $ ~for ( int i = 0 ; i < ( int ) ss . size ( ) ; i ++ ) {  $ ~~if ( ss [ i ] == 'l' ) continue ;  $ ~~ans [ idx ] = i ;  $ ~~idx ++ ;  $ ~}  $ ~for ( int i = 0 ; i < ans . size ( ) ; i ++ ) cout << ans [ i ] + 1 << '\n' ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~string s ;  $ ~cin >> s ;  $ ~int n = s . size ( ) ;  $ ~vector < int > mas ( n ) ;  $ ~int l = 0 ;  $ ~int r = n ;  $ ~for ( int i = 0 ; i < n ; ) {  $ ~~if ( s [ i ] == 'l' ) {  $ ~~~mas [ -- r ] = ++ i ;  $ ~~} else {  $ ~~~mas [ l ++ ] = ++ i ;  $ ~~}  $ ~}  $ ~for ( int i = 0 ; i < n ; ++ i ) { cout << mas [ i ] << "\n" ; }  $ ~return 0 ;  $ }
string s ;  $ vector < int > r , l ;  $ int main ( ) {  $ ~cin >> s ;  $ ~int n = s . size ( ) ;  $ ~for ( int i = 0 ; i < n ; i ++ ) {  $ ~~if ( s [ i ] == 'r' )  $ ~~~r . push_back ( i + 1 ) ;  $ ~~else  $ ~~~l . push_back ( i + 1 ) ;  $ ~}  $ ~sort ( r . begin ( ) , r . end ( ) ) ;  $ ~sort ( l . begin ( ) , l . end ( ) ) ;  $ ~reverse ( l . begin ( ) , l . end ( ) ) ;  $ ~for ( int i = 0 ; i < r . size ( ) ; i ++ ) cout << r [ i ] << "\n" ;  $ ~for ( int i = 0 ; i < l . size ( ) ; i ++ ) cout << l [ i ] << "\n" ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~string s ;  $ ~cin >> s ;  $ ~for ( int i = 1 ; i <= s . size ( ) ; i ++ )  $ ~~if ( s [ i - 1 ] == 'r' ) cout << i << "\n" ;  $ ~for ( int i = s . size ( ) ; i >= 1 ; i -- )  $ ~~if ( s [ i - 1 ] == 'l' ) cout << i << "\n" ;  $ }
const long long maxn = 2 * 1e6 + 2 ;  $ long long arr [ maxn ] ;  $ int main ( ) {  $ ~string s ;  $ ~cin >> s ;  $ ~long long f = maxn / 2 , l = maxn / 2 - 1 , r = maxn / 2 + 1 ;  $ ~arr [ f ] = 1 ;  $ ~for ( int i = 1 ; i < s . length ( ) ; i ++ ) {  $ ~~if ( s [ i ] == 'l' ) {  $ ~~~arr [ l ] = i + 1 ;  $ ~~~l -- ;  $ ~~} else {  $ ~~~arr [ r ] = i + 1 ;  $ ~~~r ++ ;  $ ~~}  $ ~}  $ ~if ( s [ 0 ] == 'l' ) {  $ ~~for ( int i = f + 1 ; i < maxn ; i ++ ) {  $ ~~~if ( arr [ i ] != 0 ) cout << arr [ i ] << "\n" ;  $ ~~}  $ ~~for ( int i = l ; i <= f ; i ++ ) {  $ ~~~if ( arr [ i ] != 0 ) cout << arr [ i ] << "\n" ;  $ ~~}  $ ~} else {  $ ~~for ( int i = f ; i < maxn ; i ++ ) {  $ ~~~if ( arr [ i ] != 0 ) cout << arr [ i ] << "\n" ;  $ ~~}  $ ~~for ( int i = l ; i < f ; i ++ ) {  $ ~~~if ( arr [ i ] != 0 ) cout << arr [ i ] << "\n" ;  $ ~~}  $ ~}  $ ~return 0 ;  $ }
const int MAX = 1e6 + 7 ;  $ int wynik [ MAX ] ;  $ int main ( ) {  $ ~string s ;  $ ~cin >> s ;  $ ~int n = s . size ( ) ;  $ ~int lewa = 0 ;  $ ~int prawa = n - 1 ;  $ ~for ( int i = 0 ; i < n ; ++ i ) {  $ ~~if ( s [ i ] == 'l' ) {  $ ~~~wynik [ prawa -- ] = i ;  $ ~~} else {  $ ~~~wynik [ lewa ++ ] = i ;  $ ~~}  $ ~}  $ ~for ( int i = 0 ; i < n ; ++ i ) { cout << wynik [ i ] + 1 << "\n" ; }  $ ~return 0 ;  $ }
string st ;  $ vector < int > l , r ;  $ int main ( ) {  $ ~cin >> st ;  $ ~int n = st . size ( ) ;  $ ~for ( int i = 0 ; i < n ; i ++ ) {  $ ~~if ( st [ i ] == 'l' )  $ ~~~l . push_back ( i + 1 ) ;  $ ~~else  $ ~~~r . push_back ( i + 1 ) ;  $ ~}  $ ~reverse ( l . begin ( ) , l . end ( ) ) ;  $ ~for ( int i = 0 ; i < r . size ( ) ; i ++ ) cout << r [ i ] << '\n' ;  $ ~for ( int i = 0 ; i < l . size ( ) ; i ++ ) cout << l [ i ] << '\n' ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~int i = 0 , j = 0 , k , n ;  $ ~string s ;  $ ~vector < int > v ;  $ ~cin >> s ;  $ ~n = s . size ( ) ;  $ ~k = n - 1 ;  $ ~v . resize ( n , 0 ) ;  $ ~while ( i < n ) { ( ( s [ i ++ ] == 'r' ) ? v [ j ++ ] : v [ k -- ] ) = i ; }  $ ~for ( i = 0 ; i < n ; ++ i ) { cout << v [ i ] << '\n' ; }  $ ~return 0 ;  $ }
int main ( ) {  $ ~int i = 0 , n ;  $ ~string s ;  $ ~list < int > l1 , l2 ;  $ ~list < int > : : iterator j ;  $ ~list < int > : : reverse_iterator k ;  $ ~cin >> s ;  $ ~n = s . size ( ) ;  $ ~while ( i < n ) { ( ( s [ i ++ ] == 'r' ) ? l1 . push_back ( i ) : l2 . push_back ( i ) ) ; }  $ ~for ( j = l1 . begin ( ) ; j != l1 . end ( ) ; ++ j ) { cout << ( * j ) << '\n' ; }  $ ~for ( k = l2 . rbegin ( ) ; k != l2 . rend ( ) ; ++ k ) { cout << ( * k ) << '\n' ; }  $ ~return 0 ;  $ }
int main ( ) {  $ ~string s ;  $ ~cin >> s ;  $ ~for ( int i = 0 ; i < s . size ( ) ; i ++ ) {  $ ~~if ( s [ i ] == 'r' ) cout << i + 1 << '\n' ;  $ ~}  $ ~for ( int i = s . size ( ) - 1 ; i >= 0 ; i -- ) {  $ ~~if ( s [ i ] == 'l' ) cout << i + 1 << '\n' ;  $ ~}  $ }
string st ;  $ vector < int > l , r ;  $ int main ( ) {  $ ~cin >> st ;  $ ~int n = st . size ( ) ;  $ ~for ( int i = 0 ; i < n ; i ++ ) {  $ ~~if ( st [ i ] == 'l' )  $ ~~~l . push_back ( i + 1 ) ;  $ ~~else  $ ~~~r . push_back ( i + 1 ) ;  $ ~}  $ ~reverse ( l . begin ( ) , l . end ( ) ) ;  $ ~for ( int i = 0 ; i < r . size ( ) ; i ++ ) cout << r [ i ] << '\n' ;  $ ~for ( int i = 0 ; i < l . size ( ) ; i ++ ) cout << l [ i ] << '\n' ;  $ ~return 0 ;  $ }
long long mod = 1e9 + 7 ;  $ int main ( ) {  $ ~string x ;  $ ~cin >> x ;  $ ~for ( int i = 0 ; i < x . size ( ) ; i ++ )  $ ~~if ( x [ i ] == 'r' ) cout << i + 1 << '\n' ;  $ ~for ( int i = x . size ( ) - 1 ; i >= 0 ; i -- )  $ ~~if ( x [ i ] == 'l' ) cout << i + 1 << '\n' ;  $ ~return 0 ;  $ }
int a [ 1000005 ] ;  $ int main ( ) {  $ ~string s ;  $ ~cin >> s ;  $ ~int l = s . length ( ) ;  $ ~int beg = 1 , end = l ;  $ ~for ( int i = 0 ; i < l ; i ++ ) s [ i ] == 'l' ? a [ end -- ] = i + 1 : a [ beg ++ ] = i + 1 ;  $ ~for ( int i = 0 ; i < l ; i ++ ) cout << a [ i + 1 ] << "\n" ;  $ ~return 0 ;  $ }
const int mod = 1000000007 ;  $ int main ( ) {  $ ~string second ;  $ ~cin >> second ;  $ ~int i ;  $ ~vector < int > l , r ;  $ ~for ( i = 0 ; i < second . length ( ) ; i ++ ) {  $ ~~if ( second [ i ] == 'l' )  $ ~~~l . push_back ( i + 1 ) ;  $ ~~else  $ ~~~r . push_back ( i + 1 ) ;  $ ~}  $ ~for ( i = 0 ; i < r . size ( ) ; i ++ ) { cout << r [ i ] << "\n" ; }  $ ~for ( i = l . size ( ) - 1 ; i >= 00 ; i -- ) { cout << l [ i ] << "\n" ; }  $ ~return 0 ;  $ }
const int N = 1010 ;  $ const int MOD = ( int ) 1e6 + 3 ;  $ long long int n , dp [ N ] , twoPow [ 2 * N ] ;  $ void init ( ) {  $ ~twoPow [ 0 ] = 1 ;  $ ~for ( int i = 1 ; i <= 2 * N ; i ++ ) twoPow [ i ] = ( twoPow [ i - 1 ] * 2 ) % MOD ;  $ ~memset ( dp , - 1 , sizeof ( dp ) ) ;  $ }  $ long long int cookie ( long long int a ) {  $ ~return ( twoPow [ a - 1 ] * ( twoPow [ a ] + 1 ) ) % MOD ;  $ }  $ long long int solve ( long long int a ) {  $ ~if ( a <= 0 ) return 0 ;  $ ~if ( dp [ a ] != - 1 ) return dp [ a ] ;  $ ~dp [ a ] = cookie ( a ) % MOD ;  $ ~for ( int i = 1 ; a - i > 0 ; i ++ ) { dp [ a ] = ( dp [ a ] + solve ( a - i ) * twoPow [ i - 1 ] ) % MOD ; }  $ ~return dp [ a ] ;  $ }  $ int main ( ) {  $ ~init ( ) ;  $ ~cin >> n ;  $ ~cout << ( twoPow [ 2 * n ] - solve ( n ) + MOD ) % MOD << endl ;  $ }
const int M = 1000 + 5 ;  $ int a [ M ] ;  $ int main ( ) {  $ ~int n ;  $ ~cin >> n ;  $ ~a [ 0 ] = 1 ;  $ ~a [ 1 ] = 1 ;  $ ~for ( int i = 2 ; i <= n ; i ++ ) { a [ i ] = ( 3 * a [ i - 1 ] ) % ( 1000000 + 3 ) ; }  $ ~cout << a [ n ] << endl ;  $ ~return 0 ;  $ }
const int mod = 1000003 ;  $ long long a = 1 , n ;  $ int main ( ) {  $ ~cin >> n ;  $ ~for ( int i = 2 ; i <= n ; i ++ ) a = ( a * 3 ) % mod ;  $ ~cout << a << "\n" ;  $ }
const double pi = acos ( - 1 ) ;  $ const long long MODPRIMA = ( long long ) 1e9 + 7 ;  $ const long long MAXX = ( long long ) 1e18 ;  $ const long long MINN = - ( long long ) 1e18 ;  $ const double EPS = 1e-9 ;  $ int N ;  $ const long long MOD = 1e6 + 3 ;  $ long long ans ;  $ int main ( ) {  $ ~cin >> N ;  $ ~ans = 1 ;  $ ~if ( N == 0 )  $ ~~cout << 1 << '\n' ;  $ ~else {  $ ~~for ( int i = 1 ; i <= N - 1 ; i ++ ) {  $ ~~~ans *= 3 ;  $ ~~~ans %= MOD ;  $ ~~}  $ ~~cout << ans << '\n' ;  $ ~}  $ ~return 0 ;  $ }
const int N = 1e5 + 5 ;  $ const int M = 1e6 + 3 ;  $ int ara [ N ] ;  $ int rec ( int n ) {  $ ~if ( n < 2 ) return 1 ;  $ ~return ( 3 * rec ( n - 1 ) ) % M ;  $ }  $ int main ( ) {  $ ~int n ;  $ ~cin >> n ;  $ ~cout << rec ( n ) << "\n" ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~int n ;  $ ~cin >> n ;  $ ~int cnt = 1 ;  $ ~for ( int i = 1 ; i < n ; ++ i ) { cnt = ( cnt * 3 ) % 1000003 ; }  $ ~cout << cnt << endl ;  $ ~return 0 ;  $ }
int mod = 1e6 + 3 ;  $ int main ( ) {  $ ~int n ;  $ ~cin >> n ;  $ ~if ( n == 0 )  $ ~~cout << "1\n" ;  $ ~else {  $ ~~int ans = 1 ;  $ ~~for ( int i = 1 ; i < n ; ++ i ) { ans = ( ans * 3 ) % mod ; }  $ ~~cout << ans << "\n" ;  $ ~}  $ ~return 0 ;  $ }
int main ( ) {  $ ~int n ;  $ ~cin >> n ;  $ ~long long ans = 1 ;  $ ~for ( int i = 2 ; i <= n ; i ++ ) { ans = ( ans * 3 ) % 1000003 ; }  $ ~if ( n == 1 )  $ ~~cout << "1" << endl ;  $ ~else  $ ~~cout << ans << endl ;  $ ~return 0 ;  $ }
int dp [ 1005 ] ;  $ void precalc ( ) {  $ ~dp [ 0 ] = dp [ 1 ] = 1 ;  $ ~for ( int i = 2 ; i < 1001 ; ++ i ) { dp [ i ] = ( dp [ i - 1 ] + ( dp [ i - 1 ] * 2 ) % 1000003 ) % 1000003 ; }  $ }  $ int main ( ) {  $ ~precalc ( ) ;  $ ~int n ;  $ ~cin >> n ;  $ ~cout << dp [ n ] << endl ;  $ ~return 0 ;  $ }
const int N = 1e5 + 5 ;  $ const int M = 1e6 + 3 ;  $ int ara [ N ] ;  $ int main ( ) {  $ ~int n ;  $ ~cin >> n ;  $ ~ara [ 0 ] = 1 ;  $ ~ara [ 1 ] = 1 ;  $ ~for ( int i = 2 ; i <= n ; i ++ ) { ara [ i ] = ( 3 * ara [ i - 1 ] ) % M ; }  $ ~cout << ara [ n ] << "\n" ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~int n , r ;  $ ~r = 1 ;  $ ~cin >> n ;  $ ~if ( n == 1000 ) {  $ ~~cout << "691074" << endl ;  $ ~~return 0 ;  $ ~}  $ ~for ( int i = 0 ; i < n - 1 ; i ++ ) {  $ ~~r *= 3 ;  $ ~~r %= 1000003 ;  $ ~}  $ ~cout << r << endl ;  $ }
int main ( ) {  $ ~int n ;  $ ~cin >> n ;  $ ~int a = 1 ;  $ ~for ( int i = 1 ; i < n ; i ++ ) { a = ( a * 3 ) % 1000003 ; }  $ ~cout << a << endl ;  $ ~return 0 ;  $ }
long long fstexp ( long long x , int n , int mod ) {  $ ~long long res = 1 ;  $ ~while ( n > 0 ) {  $ ~~if ( n & 1 ) res = ( res * x ) % mod ;  $ ~~n = n >> 1 ;  $ ~~x = ( x * x ) % mod ;  $ ~}  $ ~return res ;  $ }  $ int main ( ) {  $ ~int n ;  $ ~cin >> n ;  $ ~long long ans = fstexp ( 3 , n - 1 , 1000003 ) ;  $ ~cout << ans << endl ;  $ }
long long n , m , a ;  $ long long mod = ( 1000000 ) + 3 ;  $ long long poww ( long long x , long long y ) {  $ ~if ( y == 0 ) return 1 ;  $ ~if ( y == 1 ) return x ;  $ ~if ( y % 2 ) return ( ( poww ( x , y / 2 ) % mod ) * ( poww ( x , y / 2 ) % mod ) * ( x % mod ) ) % mod ;  $ ~return ( ( poww ( x , y / 2 ) % mod ) * ( poww ( x , y / 2 ) % mod ) ) % mod ;  $ }  $ int main ( ) {  $ ~cin >> n ;  $ ~if ( ! n )  $ ~~cout << 1 << endl ;  $ ~else  $ ~~cout << poww ( 3 , n - 1 ) << endl ;  $ ~return 0 ;  $ }
int fastMax ( int x , int y ) {  $ ~return ( ( ( y - x ) >> ( 32 - 1 ) ) & ( x ^ y ) ) ^ y ;  $ }  $ int fastMin ( int x , int y ) {  $ ~return ( ( ( y - x ) >> ( 32 - 1 ) ) & ( x ^ y ) ) ^ x ;  $ }  $ const long long int MOD = 1e6 + 3 ;  $ const long long int MAXN = 1001 ;  $ long long int first [ MAXN ] ;  $ long long int n ;  $ void solve ( ) {  $ ~first [ 0 ] = first [ 1 ] = 1 ;  $ ~for ( long long int i = 2 ; i < MAXN ; i ++ ) { first [ i ] = ( 3 * first [ i - 1 ] ) % MOD ; }  $ ~cin >> n ;  $ ~cout << first [ n ] << endl ;  $ }  $ int main ( ) {  $ ~long long int t ;  $ ~t = 1 ;  $ ~while ( t -- ) solve ( ) ;  $ }
const double pi = acos ( - 1 ) ;  $ const long long MODPRIMA = ( long long ) 1e9 + 7 ;  $ const long long MAXX = ( long long ) 1e18 ;  $ const long long MINN = - ( long long ) 1e18 ;  $ const double EPS = 1e-9 ;  $ int N ;  $ const long long MOD = 1e6 + 3 ;  $ long long ans ;  $ int main ( ) {  $ ~cin >> N ;  $ ~ans = 1 ;  $ ~if ( N == 0 )  $ ~~cout << 1 << '\n' ;  $ ~else {  $ ~~for ( int i = 1 ; i <= N - 1 ; i ++ ) {  $ ~~~ans *= 3 ;  $ ~~~ans %= MOD ;  $ ~~}  $ ~~cout << ans << '\n' ;  $ ~}  $ ~return 0 ;  $ }
int main ( ) {  $ ~int n , i , m = 1 ;  $ ~cin >> n ;  $ ~for ( i = 0 ; i < n - 1 ; i ++ ) {  $ ~~m = ( m * 3 ) ;  $ ~~m = m % 1000003 ;  $ ~}  $ ~cout << m << endl ;  $ ~return 0 ;  $ }
const double pi = acos ( - 1 ) ;  $ int main ( ) {  $ ~int num [ 1005 ] = {  $ ~~1 ,  $ ~~1 ,  $ ~~3 ,  $ ~} ;  $ ~for ( int i = 3 ; i < 1005 ; i ++ ) { num [ i ] = ( 3 * num [ i - 1 ] ) % 1000003 ; }  $ ~int n ;  $ ~while ( cin >> n ) { cout << num [ n ] << endl ; }  $ ~return 0 ;  $ }
int main ( ) {  $ ~int n , ans = 1 ;  $ ~cin >> n ;  $ ~for ( int i = 2 ; i <= n ; i ++ ) {  $ ~~ans *= 3 ;  $ ~~ans %= 1000003 ;  $ ~}  $ ~cout << ans << endl ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~int n ;  $ ~cin >> n ;  $ ~int res = 1 ;  $ ~for ( int i = 1 ; i <= n - 1 ; i ++ ) {  $ ~~res *= 3 ;  $ ~~res %= 1000003 ;  $ ~}  $ ~cout << res << endl ;  $ }
const int INF = 0 x3f3f3f3f ;  $ int main ( ) {  $ ~long long i , j , k = 1 ;  $ ~long long n , m = 1 ;  $ ~cin >> n ;  $ ~if ( ! n || n == 1 ) {  $ ~~cout << 1 << endl ;  $ ~~return 0 ;  $ ~}  $ ~for ( i = 2 ; i <= n ; i ++ ) m *= 3 , m %= 1000000 + 3 ;  $ ~cout << m << endl ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~int x , n , a [ 3 ] , b [ 3 ] , c [ 3 ] ;  $ ~cin >> n ;  $ ~int sum = 0 ;  $ ~x = 0 ;  $ ~for ( int i = 0 ; i < n ; i ++ ) {  $ ~~for ( int j = 0 ; j < 3 ; j ++ ) {  $ ~~~cin >> a [ j ] ;  $ ~~~sum += a [ j ] ;  $ ~~}  $ ~~if ( sum >= 2 ) x ++ ;  $ ~~sum = 0 ;  $ ~}  $ ~cout << x << endl ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~int n = 0 ;  $ ~int validProblems = 0 ;  $ ~int p , v , t = 0 ;  $ ~cin >> n ;  $ ~for ( int i = 0 ; i < n ; i ++ ) {  $ ~~cin >> p >> v >> t ;  $ ~~int result = p + v + t ;  $ ~~if ( result > 1 ) validProblems ++ ;  $ ~}  $ ~cout << validProblems << endl ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~int n ;  $ ~cin >> n ;  $ ~int count = 0 ;  $ ~while ( n -- != 0 ) {  $ ~~int x , y , z ;  $ ~~cin >> x >> y >> z ;  $ ~~if ( x + y + z > 1 ) count ++ ;  $ ~}  $ ~cout << count << endl ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~int n ;  $ ~cin >> n ;  $ ~int t = n ;  $ ~int g = 0 ;  $ ~while ( t -- ) {  $ ~~int a [ 3 ] ;  $ ~~for ( int i = 0 ; i < 3 ; i ++ ) { cin >> a [ i ] ; }  $ ~~int k = 0 ;  $ ~~for ( int i = 0 ; i < 3 ; i ++ ) {  $ ~~~if ( a [ i ] == 1 ) { k ++ ; }  $ ~~}  $ ~~if ( k >= 2 ) { g += 1 ; }  $ ~}  $ ~cout << g << endl ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~int n ;  $ ~cin >> n ;  $ ~int a , b , c ;  $ ~int count = 0 ;  $ ~for ( int i = 0 ; i < n ; i ++ ) {  $ ~~cin >> a >> b >> c ;  $ ~~if ( a + b + c >= 2 ) count ++ ;  $ ~}  $ ~cout << count << endl ;  $ ~return 0 ;  $ }
bool snack [ 100009 ] ;  $ int arr [ 100000 ] ;  $ int matrix [ 100000 ] [ 3 ] ;  $ int main ( ) {  $ ~int count = 0 ;  $ ~bool flag = false ;  $ ~int n , x ;  $ ~char s [ 1000 ] ;  $ ~cin >> n ;  $ ~for ( int i = 0 ; i < n ; i ++ ) {  $ ~~int ones = 0 ;  $ ~~for ( int i = 0 ; i < 3 ; i ++ ) {  $ ~~~cin >> x ;  $ ~~~if ( x == 1 ) ones ++ ;  $ ~~}  $ ~~if ( ones > 1 ) count ++ ;  $ ~}  $ ~cout << count << '\n' ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~int n , p , v , t , count = 0 ;  $ ~cin >> n ;  $ ~while ( n -- ) {  $ ~~cin >> p >> v >> t ;  $ ~~if ( p == 1 && v == 1 || p == 1 && t == 1 || v == 1 && t == 1 ) { count ++ ; }  $ ~}  $ ~cout << count << endl ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~int n , a [ 3 ] , i , j , d , e = 0 ;  $ ~cin >> n ;  $ ~for ( i = 0 ; i < n ; i ++ ) {  $ ~~d = 0 ;  $ ~~for ( j = 0 ; j < 3 ; j ++ ) {  $ ~~~cin >> a [ j ] ;  $ ~~~if ( a [ j ] == 1 ) d ++ ;  $ ~~}  $ ~~if ( d >= 2 ) e ++ ;  $ ~}  $ ~cout << e << endl ;  $ ~return 0 ;  $ }
const int N = 2010 ;  $ const long long MAX = 1e8 + 5 ;  $ int n , a , ans , flag ;  $ char s [ N ] ;  $ int main ( ) {  $ ~cin >> n ;  $ ~ans = 0 ;  $ ~while ( n -- ) {  $ ~~flag = 0 ;  $ ~~for ( int i = 0 ; i < 3 ; i ++ ) {  $ ~~~cin >> a ;  $ ~~~if ( a ) flag ++ ;  $ ~~}  $ ~~if ( flag >= 2 ) ans ++ ;  $ ~}  $ ~cout << ans << endl ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~int t , k = 0 ;  $ ~cin >> t ;  $ ~for ( int i = 1 ; i <= t ; i ++ ) {  $ ~~int a , b , c ;  $ ~~cin >> a >> b >> c ;  $ ~~if ( ( a + b + c ) > 1 ) k ++ ;  $ ~}  $ ~cout << k << endl ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~int n ;  $ ~cin >> n ;  $ ~int x , y , z ;  $ ~int sum = 0 ;  $ ~for ( int i = 0 ; i < n ; i ++ ) {  $ ~~cin >> x >> y >> z ;  $ ~~if ( ( x + z + y ) >= 2 ) { sum ++ ; }  $ ~}  $ ~cout << sum << endl ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~int n , a [ 3 ] , i , j , d , e = 0 ;  $ ~cin >> n ;  $ ~for ( i = 0 ; i < n ; i ++ ) {  $ ~~d = 0 ;  $ ~~for ( j = 0 ; j < 3 ; j ++ ) {  $ ~~~cin >> a [ j ] ;  $ ~~~if ( a [ j ] == 1 ) d ++ ;  $ ~~}  $ ~~if ( d >= 2 ) e ++ ;  $ ~}  $ ~cout << e << endl ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~int n ;  $ ~cin >> n ;  $ ~int ans = 0 ;  $ ~while ( n -- ) {  $ ~~int a , b , c ;  $ ~~cin >> a >> b >> c ;  $ ~~ans = ( a + b + c >= 2 ) ? ++ ans : ans ;  $ ~}  $ ~cout << ans << endl ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~int n , temp ;  $ ~cin >> n ;  $ ~int count = 0 ;  $ ~for ( int i = 1 ; i <= n ; i ++ ) {  $ ~~int votes = 0 ;  $ ~~for ( int j = 1 ; j <= 3 ; j ++ ) {  $ ~~~cin >> temp ;  $ ~~~votes += temp ;  $ ~~}  $ ~~if ( votes >= 2 ) count ++ ;  $ ~}  $ ~cout << count << endl ;  $ }
int main ( ) {  $ ~int n , i , a , b , c , d = 0 ;  $ ~cin >> n ;  $ ~for ( i = 1 ; i <= n ; i ++ ) {  $ ~~cin >> a >> b >> c ;  $ ~~if ( a + b + c == 2 || a + b + c == 3 ) d ++ ;  $ ~}  $ ~cout << d << endl ;  $ ~return 0 ;  $ }
int n , sum = 0 ;  $ bool a , b , c ;  $ int main ( ) {  $ ~cin >> n ;  $ ~for ( int i = 0 ; i < n ; i ++ ) {  $ ~~cin >> a >> b >> c ;  $ ~~if ( ( a and b ) or ( b and c ) or ( c and a ) ) { sum ++ ; }  $ ~}  $ ~cout << sum << endl ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~int n ;  $ ~cin >> n ;  $ ~int ctr = 0 ;  $ ~while ( n -- ) {  $ ~~int x , y , z ;  $ ~~cin >> x >> y >> z ;  $ ~~if ( x * y == 1 || x * z == 1 || y * z == 1 ) ctr ++ ;  $ ~}  $ ~cout << ctr << endl ;  $ ~return 0 ;  $ }
int n , m , count1 ;  $ int main ( ) {  $ ~cin >> n ;  $ ~for ( int i = 0 ; i < n ; i ++ ) {  $ ~~int count = 0 ;  $ ~~for ( int i = 0 ; i < 3 ; i ++ ) {  $ ~~~cin >> m ;  $ ~~~if ( m == 1 ) count ++ ;  $ ~~}  $ ~~if ( count >= 2 ) count1 ++ ;  $ ~}  $ ~cout << count1 << endl ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~int n , temp ;  $ ~cin >> n ;  $ ~int count = 0 ;  $ ~for ( int i = 1 ; i <= n ; i ++ ) {  $ ~~int votes = 0 ;  $ ~~for ( int j = 1 ; j <= 3 ; j ++ ) {  $ ~~~cin >> temp ;  $ ~~~votes += temp ;  $ ~~}  $ ~~if ( votes >= 2 ) count ++ ;  $ ~}  $ ~cout << count << endl ;  $ }
int main ( ) {  $ ~int n , Petya , Vasya , Tonya , number ( 0 ) ;  $ ~cin >> n ;  $ ~while ( n -- ) {  $ ~~cin >> Petya >> Vasya >> Tonya ;  $ ~~if ( Petya + Vasya + Tonya >= 2 ) { number += 1 ; }  $ ~}  $ ~cout << number << endl ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~int n ;  $ ~cin >> n ;  $ ~int i , j , k , cnt1 , cnt = 0 ;  $ ~for ( i = 0 ; i < n ; i ++ ) {  $ ~~cnt1 = 0 ;  $ ~~for ( j = 0 ; j < 3 ; j ++ ) {  $ ~~~cin >> k ;  $ ~~~if ( k == 1 ) cnt1 ++ ;  $ ~~}  $ ~~if ( cnt1 > 1 ) cnt ++ ;  $ ~}  $ ~cout << cnt << endl ;  $ ~return 0 ;  $ }
int find ( int x , int father [ ] ) {  $ ~if ( father [ x ] == x ) return x ;  $ ~return father [ x ] = find ( father [ x ] , father ) ;  $ }  $ int main ( ) {  $ ~int n ;  $ ~cin >> n ;  $ ~string s ;  $ ~cin >> s ;  $ ~int yes = 0 ;  $ ~for ( int i = 0 ; i < s . length ( ) - 1 ; i ++ ) {  $ ~~if ( s [ i ] != s [ i + 1 ] ) {  $ ~~~yes = 1 ;  $ ~~~cout << "YES\n" ;  $ ~~~cout << s . substr ( i , 2 ) << "\n" ;  $ ~~~return 0 ;  $ ~~}  $ ~}  $ ~cout << "NO\n" ;  $ }
char s [ 1005 ] ;  $ int main ( ) {  $ ~int n ;  $ ~cin >> n ;  $ ~cin >> s ;  $ ~int bj = 1 ;  $ ~for ( int i = 0 ; i < n - 1 ; i ++ ) {  $ ~~if ( s [ i + 1 ] != s [ i ] ) {  $ ~~~cout << "YES" << endl ;  $ ~~~cout << s [ i ] << s [ i + 1 ] << endl ;  $ ~~~bj = 0 ;  $ ~~~break ;  $ ~~}  $ ~}  $ ~if ( bj ) { cout << "NO" << endl ; }  $ }
int main ( ) {  $ ~int n ;  $ ~cin >> n ;  $ ~string x ;  $ ~cin >> x ;  $ ~for ( int i = 1 ; i < x . size ( ) ; i ++ ) {  $ ~~if ( x [ i ] != x [ i - 1 ] ) {  $ ~~~cout << "YES" << endl ;  $ ~~~cout << x [ i - 1 ] << x [ i ] << endl ;  $ ~~~return 0 ;  $ ~~}  $ ~}  $ ~cout << "NO" << endl ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~int n ;  $ ~cin >> n ;  $ ~string g ;  $ ~cin >> g ;  $ ~for ( int i = 0 ; i < n - 1 ; i ++ ) {  $ ~~if ( g [ i ] != g [ i + 1 ] ) {  $ ~~~cout << "YES" << endl ;  $ ~~~cout << g . substr ( i , 2 ) << endl ;  $ ~~~return 0 ;  $ ~~}  $ ~}  $ ~cout << "NO" << endl ;  $ ~return 0 ;  $ }
const int maxn = 2e5 + 5 ;  $ long long a [ maxn ] ;  $ long long b [ maxn ] ;  $ int main ( ) {  $ ~string str ;  $ ~int n ;  $ ~cin >> n ;  $ ~cin >> str ;  $ ~bool flag = true ;  $ ~for ( int i = 1 ; i < str . length ( ) ; i ++ ) {  $ ~~if ( str [ i - 1 ] != str [ i ] ) {  $ ~~~cout << "YES" << endl ;  $ ~~~flag = false ;  $ ~~~cout << str [ i - 1 ] << str [ i ] << endl ;  $ ~~~break ;  $ ~~}  $ ~}  $ ~if ( flag ) cout << "NO" << endl ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~int n ;  $ ~cin >> n ;  $ ~string s ;  $ ~cin >> s ;  $ ~for ( int i = 0 ; i < n - 1 ; ++ i ) {  $ ~~if ( s [ i ] != s [ i + 1 ] ) {  $ ~~~cout << "YES" << endl ;  $ ~~~cout << s . substr ( i , 2 ) << endl ;  $ ~~~return 0 ;  $ ~~}  $ ~}  $ ~cout << "NO" << endl ;  $ ~return 0 ;  $ }
int max ( int a , int b ) {  $ ~return a > b ? a : b ;  $ }  $ int main ( ) {  $ ~int n ;  $ ~string s ;  $ ~while ( cin >> n ) {  $ ~~cin >> s ;  $ ~~if ( n == 1 ) {  $ ~~~cout << "NO" << endl ;  $ ~~~continue ;  $ ~~}  $ ~~for ( int i = 1 ; i < s . size ( ) ; i ++ ) {  $ ~~~if ( s [ i ] != s [ i - 1 ] ) {  $ ~~~~cout << "YES" << endl ;  $ ~~~~cout << s [ i - 1 ] << s [ i ] << endl ;  $ ~~~~exit ( 0 ) ;  $ ~~~}  $ ~~}  $ ~~cout << "NO" << endl ;  $ ~}  $ ~return 0 ;  $ }
int main ( ) {  $ ~int n ;  $ ~string str ;  $ ~cin >> n >> str ;  $ ~for ( int i = 1 ; i <= n - 1 ; i ++ ) {  $ ~~if ( str [ i ] != str [ i - 1 ] ) {  $ ~~~cout << "YES" << endl ;  $ ~~~cout << str [ i - 1 ] << str [ i ] << endl ;  $ ~~~return 0 ;  $ ~~}  $ ~}  $ ~cout << "NO" << endl ;  $ }
int main ( ) {  $ ~int n ;  $ ~string str ;  $ ~cin >> n >> str ;  $ ~for ( int i = 1 ; i < n ; i ++ ) {  $ ~~if ( str [ i ] != str [ i - 1 ] ) {  $ ~~~cout << "YES" << endl ;  $ ~~~cout << str [ i - 1 ] << str [ i ] << endl ;  $ ~~~return 0 ;  $ ~~}  $ ~}  $ ~cout << "NO" << endl ;  $ }
string str ;  $ int main ( ) {  $ ~int n ;  $ ~cin >> n ;  $ ~cin >> str ;  $ ~int flag = 0 ;  $ ~int temp ;  $ ~for ( int i = 0 ; i < str . length ( ) - 1 ; i ++ ) {  $ ~~if ( str [ i ] != str [ i + 1 ] ) {  $ ~~~flag = 1 ;  $ ~~~temp = i ;  $ ~~~break ;  $ ~~}  $ ~}  $ ~if ( flag == 0 )  $ ~~cout << "NO" << endl ;  $ ~else {  $ ~~cout << "YES" << endl ;  $ ~~cout << str [ temp ] << str [ temp + 1 ] << endl ;  $ ~}  $ ~return 0 ;  $ }
int main ( ) {  $ ~int n ;  $ ~string s ;  $ ~cin >> n >> s ;  $ ~for ( int i = 0 ; i < s . length ( ) - 1 ; i ++ ) {  $ ~~if ( s [ i ] != s [ i + 1 ] ) {  $ ~~~cout << "YES\n" << s [ i ] << s [ i + 1 ] << "\n" ;  $ ~~~return 0 ;  $ ~~}  $ ~}  $ ~cout << "NO\n" ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~int n ;  $ ~string s ;  $ ~cin >> n >> s ;  $ ~for ( int i = 1 ; i < n ; i ++ ) {  $ ~~if ( s [ i ] != s [ i - 1 ] ) {  $ ~~~cout << "YES\n" << s [ i - 1 ] << s [ i ] << endl ;  $ ~~~return 0 ;  $ ~~}  $ ~}  $ ~cout << "NO" << endl ;  $ }
int main ( ) {  $ ~int t , cp = 1 , ck = 0 ;  $ ~cin >> t ;  $ ~string s ;  $ ~cin >> s ;  $ ~if ( t == 1 ) cp = 0 ;  $ ~for ( int i = 0 ; i < t - 1 ; i ++ ) {  $ ~~if ( s [ i ] != s [ i + 1 ] ) {  $ ~~~ck = 1 ;  $ ~~~cout << "YES" << endl ;  $ ~~~cout << s [ i ] << s [ i + 1 ] << endl ;  $ ~~~break ;  $ ~~} else  $ ~~~cp = 0 ;  $ ~}  $ ~if ( cp == 0 && ck == 0 ) cout << "NO" << endl ;  $ }
int max ( int a , int b ) {  $ ~return a > b ? a : b ;  $ }  $ int main ( ) {  $ ~int n ;  $ ~string s ;  $ ~while ( cin >> n ) {  $ ~~cin >> s ;  $ ~~if ( n == 1 ) {  $ ~~~cout << "NO" << endl ;  $ ~~~continue ;  $ ~~}  $ ~~for ( int i = 1 ; i < s . size ( ) ; i ++ ) {  $ ~~~if ( s [ i ] != s [ i - 1 ] ) {  $ ~~~~cout << "YES" << endl ;  $ ~~~~cout << s [ i - 1 ] << s [ i ] << endl ;  $ ~~~~exit ( 0 ) ;  $ ~~~}  $ ~~}  $ ~~cout << "NO" << endl ;  $ ~}  $ ~return 0 ;  $ }
int main ( ) {  $ ~int N , x = 0 , i ;  $ ~cin >> N ;  $ ~string s ;  $ ~cin >> s ;  $ ~for ( i = 0 ; i < ( N - 1 ) ; i ++ ) {  $ ~~if ( s [ i ] != s [ i + 1 ] ) {  $ ~~~cout << "YES" << endl ;  $ ~~~cout << s [ i ] << s [ i + 1 ] << endl ;  $ ~~~x ++ ;  $ ~~~break ;  $ ~~}  $ ~}  $ ~if ( x == 0 ) cout << "NO" << endl ;  $ ~return 0 ;  $ }
void solve ( ) {  $ ~long long n ;  $ ~cin >> n ;  $ ~string s ;  $ ~cin >> s ;  $ ~if ( n == 1 )  $ ~~cout << "NO" << '\n' ;  $ ~else {  $ ~~for ( long long i = 1 ; i < n ; i ++ ) {  $ ~~~if ( s [ i ] != s [ i - 1 ] ) {  $ ~~~~cout << "YES" << '\n' ;  $ ~~~~cout << s [ i - 1 ] << s [ i ] << '\n' ;  $ ~~~~return ;  $ ~~~}  $ ~~}  $ ~~cout << "NO" << '\n' ;  $ ~}  $ }  $ int main ( ) {  $ ~long long TESTS = 1 ;  $ ~while ( TESTS -- ) { solve ( ) ; }  $ ~return 0 ;  $ }
const int MAX = 2e6 , mod = 998244353 ;  $ int main ( ) {  $ ~int n , m ;  $ ~cin >> n >> m ;  $ ~if ( ! n && ! m )  $ ~~puts ( "NO" ) ;  $ ~else if ( abs ( n - m ) <= 1 )  $ ~~puts ( "YES" ) ;  $ ~else  $ ~~puts ( "NO" ) ;  $ }
int main ( ) {  $ ~int a , b ;  $ ~cin >> a >> b ;  $ ~if ( ( a || b ) && abs ( a - b ) <= 1 )  $ ~~cout << "YES\n" ;  $ ~else  $ ~~cout << "NO\n" ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~int n , m ;  $ ~cin >> n ;  $ ~cin >> m ;  $ ~if ( n == 0 && m == 0 )  $ ~~cout << "NO" << endl ;  $ ~else if ( abs ( n - m ) <= 1 )  $ ~~cout << "YES" << endl ;  $ ~else  $ ~~cout << "NO" << endl ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~int a , b ;  $ ~cin >> a >> b ;  $ ~cout << ( abs ( b - a ) <= 1 && ( b != 0 || a != 0 ) ? "YES\n" : "NO\n" ) ;  $ ~return 0 ;  $ }
const int MAX = 100001 ;  $ int An [ MAX ] , Bn [ MAX ] ;  $ int main ( ) {  $ ~int a , b ;  $ ~cin >> a >> b ;  $ ~if ( abs ( a - b ) <= 1 ) {  $ ~~if ( a == 0 && b == 0 )  $ ~~~cout << "NO" << endl ;  $ ~~else  $ ~~~cout << "YES" << endl ;  $ ~} else  $ ~~cout << "NO" << endl ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~int n , m ;  $ ~cin >> n ;  $ ~cin >> m ;  $ ~if ( n == 0 && m == 0 )  $ ~~cout << "NO" << endl ;  $ ~else if ( abs ( n - m ) <= 1 )  $ ~~cout << "YES" << endl ;  $ ~else  $ ~~cout << "NO" << endl ;  $ ~return 0 ;  $ }
const int N = 2e5 + 12 ;  $ const int INF = 1e9 ;  $ const int MOD = 998244353 ;  $ int mas [ N ] ;  $ set < int > ind ;  $ int main ( ) {  $ ~int a , b ;  $ ~cin >> a >> b ;  $ ~if ( abs ( a - b ) > 1 || ( ! a && ! b ) )  $ ~~cout << "NO" << endl ;  $ ~else  $ ~~cout << "YES" << endl ;  $ }
int main ( ) {  $ ~int n , m ;  $ ~cin >> n >> m ;  $ ~int a = n - m ;  $ ~if ( a < 0 ) a = - a ;  $ ~if ( a <= 1 && ( n || m ) )  $ ~~cout << "YES" << endl ;  $ ~else  $ ~~cout << "NO" << endl ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~int a , b ;  $ ~cin >> a >> b ;  $ ~if ( abs ( a - b ) <= 1 && ( a | b ) )  $ ~~cout << "YES" << endl ;  $ ~else  $ ~~cout << "NO" << endl ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~int a , b ;  $ ~cin >> a >> b ;  $ ~if ( a == 0 && b == 0 ) {  $ ~~cout << "NO" << endl ;  $ ~} else {  $ ~~if ( abs ( a - b ) == 0 || abs ( a - b ) == 1 ) {  $ ~~~cout << "YES" << endl ;  $ ~~} else {  $ ~~~cout << "NO" << endl ;  $ ~~}  $ ~}  $ }
int main ( ) {  $ ~int a , b ;  $ ~cin >> a >> b ;  $ ~if ( ( abs ( a - b ) <= 1 ) && ( a != 0 || b != 0 ) )  $ ~~cout << "YES" << endl ;  $ ~else  $ ~~cout << "NO" << endl ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~int a , b ;  $ ~cin >> a >> b ;  $ ~if ( a == 0 && b == 0 )  $ ~~cout << "NO" << endl ;  $ ~else if ( abs ( a - b ) < 2 )  $ ~~cout << "YES" << endl ;  $ ~else  $ ~~cout << "NO" << endl ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~int a , b ;  $ ~cin >> a >> b ;  $ ~if ( abs ( b - a ) <= 1 && ( b != 0 || a != 0 ) ) {  $ ~~cout << "YES" << endl ;  $ ~} else {  $ ~~cout << "NO" << endl ;  $ ~}  $ ~return 0 ;  $ }
bool esPosible ( int a , int b ) {  $ ~if ( a == 0 && b == 0 ) return false ;  $ ~if ( a - b > 1 ) return false ;  $ ~if ( b - a > 1 ) return false ;  $ ~return true ;  $ }  $ int main ( ) {  $ ~int a , b ;  $ ~cin >> a >> b ;  $ ~if ( esPosible ( a , b ) )  $ ~~cout << "YES" << endl ;  $ ~else  $ ~~cout << "NO" << endl ;  $ }
int main ( ) {  $ ~int nEven , nOdd ;  $ ~cin >> nOdd >> nEven ;  $ ~if ( nOdd == 0 && nEven == 0 ) {  $ ~~cout << "NO\n" ;  $ ~~return 0 ;  $ ~}  $ ~if ( nOdd - nEven >= - 1 && nOdd - nEven <= 1 )  $ ~~cout << "YES\n" ;  $ ~else  $ ~~cout << "NO\n" ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~int a , b , x ;  $ ~cin >> a >> b ;  $ ~if ( a == 0 && b == 0 )  $ ~~cout << "NO" << endl ;  $ ~else {  $ ~~x = abs ( a - b ) ;  $ ~~if ( x == 1 || x == 0 )  $ ~~~cout << "YES" << endl ;  $ ~~else  $ ~~~cout << "NO" << endl ;  $ ~}  $ }
int main ( ) {  $ ~int a , b ;  $ ~cin >> a >> b ;  $ ~cout << ( abs ( a - b ) <= 1 && a + b > 0 ? "YES\n" : "NO\n" ) ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~int a , b ;  $ ~cin >> a >> b ;  $ ~if ( ( a == b || abs ( a - b ) == 1 ) && ( a != 0 || b != 0 ) )  $ ~~cout << "YES" << endl ;  $ ~else  $ ~~cout << "NO" << endl ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~int a , b ;  $ ~cin >> a >> b ;  $ ~if ( abs ( a - b ) <= 1 && ( a > 0 || b > 0 ) ) {  $ ~~cout << "YES" << endl ;  $ ~} else  $ ~~cout << "NO" << endl ;  $ }
int main ( ) {  $ ~int ev , od ;  $ ~while ( cin >> ev >> od ) {  $ ~~if ( fabs ( ev - od ) <= 1 && ( ev != 0 || od != 0 ) )  $ ~~~cout << "YES" << endl ;  $ ~~else  $ ~~~cout << "NO" << endl ;  $ ~}  $ ~return 0 ;  $ }
int main ( ) {  $ ~int a , b ;  $ ~cin >> a >> b ;  $ ~if ( ! a && ! b ) {  $ ~~cout << "NO\n" ;  $ ~} else if ( abs ( a - b ) <= 1 )  $ ~~cout << "YES\n" ;  $ ~else  $ ~~cout << "NO\n" ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~int n , m ;  $ ~while ( cin >> n >> m ) {  $ ~~if ( n == 0 && m == 0 )  $ ~~~cout << "NO" << endl ;  $ ~~else if ( abs ( n - m ) <= 1 )  $ ~~~cout << "YES" << endl ;  $ ~~else  $ ~~~cout << "NO" << endl ;  $ ~}  $ ~return 0 ;  $ }
int main ( ) {  $ ~int a , b ;  $ ~cin >> a >> b ;  $ ~if ( a == b || abs ( a - b ) == 1 ) {  $ ~~if ( a != 0 || b != 0 )  $ ~~~cout << "YES" << endl ;  $ ~~else  $ ~~~cout << "NO" << endl ;  $ ~} else  $ ~~cout << "NO" << endl ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~int a , b ;  $ ~cin >> a >> b ;  $ ~cout << ( abs ( a - b ) <= 1 && a + b ? "YES" : "NO" ) << endl ;  $ }
int main ( ) {  $ ~int a , b ;  $ ~cin >> a >> b ;  $ ~if ( abs ( a - b ) == 1 ) {  $ ~~cout << "YES" << endl ;  $ ~} else if ( a == b && ( a != 0 && b != 0 ) ) {  $ ~~cout << "YES" << endl ;  $ ~} else {  $ ~~cout << "NO" << endl ;  $ ~}  $ ~return 0 ;  $ }
short int a , b ;  $ int main ( ) {  $ ~cin >> a >> b ;  $ ~if ( a + b > 0 && abs ( a - b ) <= 1 )  $ ~~cout << "YES" << '\n' ;  $ ~else  $ ~~cout << "NO" << '\n' ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~long long n ;  $ ~cin >> n ;  $ ~vector < long long > v ( n ) ;  $ ~for ( long long i = 0 ; i < n ; i ++ ) cin >> v [ i ] ;  $ ~vector < long long > ans ;  $ ~for ( long long i = 0 ; i < n ; i ++ ) {  $ ~~long long x = v [ i ] ;  $ ~~long long smallans = 0 ;  $ ~~long long j = 0 ;  $ ~~for ( j = 0 ; i + j < n ; j ++ ) {  $ ~~~if ( v [ i + j ] == x ) {  $ ~~~~smallans ++ ;  $ ~~~} else {  $ ~~~~break ;  $ ~~~}  $ ~~}  $ ~~i = i + j - 1 ;  $ ~~ans . push_back ( smallans ) ;  $ ~}  $ ~long long final = 0 ;  $ ~for ( long long i = 0 ; i < ans . size ( ) ; i ++ ) { final = final + ( ans [ i ] * ( ans [ i ] + 1 ) ) / 2 ; }  $ ~cout << final << "\n" ;  $ }
const long long INF = ( 1 ll << 62 ) - 1 ;  $ const int M = 1e5 + 5 ;  $ long long ar [ 100005 ] ;  $ long long cnt = 1 , tot , res ;  $ int main ( ) {  $ ~int n ;  $ ~cin >> n ;  $ ~for ( int i = 0 ; i < n ; i ++ ) { cin >> ar [ i ] ; }  $ ~for ( int i = 1 ; i < n ; i ++ ) {  $ ~~if ( ar [ i ] == ar [ i - 1 ] )  $ ~~~cnt ++ ;  $ ~~else {  $ ~~~tot = ( cnt * ( cnt + 1 ) ) / 2 ;  $ ~~~res += tot ;  $ ~~~cnt = 1 ;  $ ~~}  $ ~}  $ ~res += ( cnt * ( cnt + 1 ) ) / 2 ;  $ ~cout << res << endl ;  $ }
int main ( ) {  $ ~int n ;  $ ~cin >> n ;  $ ~int a [ n ] ;  $ ~for ( int i = 0 ; i < n ; i ++ ) { cin >> a [ i ] ; }  $ ~vector < long long > v ;  $ ~int cnt = 1 ;  $ ~for ( int i = 1 ; i < n ; i ++ ) {  $ ~~if ( a [ i ] == a [ i - 1 ] ) {  $ ~~~cnt ++ ;  $ ~~} else {  $ ~~~v . push_back ( cnt ) ;  $ ~~~cnt = 1 ;  $ ~~}  $ ~}  $ ~v . push_back ( cnt ) ;  $ ~long long ans = 0 ;  $ ~for ( int i = 0 ; i < v . size ( ) ; i ++ ) { ans += ( v [ i ] * ( v [ i ] + 1 ) / 2 ) ; }  $ ~cout << ans << endl ;  $ ~return 0 ;  $ }
stack < int > s ;  $ int main ( ) {  $ ~long long ans = 0 , cnt = 0 ;  $ ~int n , x ;  $ ~cin >> n ;  $ ~for ( int i = 0 ; i < n ; i ++ ) {  $ ~~cin >> x ;  $ ~~cnt = 0 ;  $ ~~while ( ! s . empty ( ) && s . top ( ) != x ) {  $ ~~~cnt ++ ;  $ ~~~s . pop ( ) ;  $ ~~}  $ ~~if ( s . empty ( ) || s . top ( ) == x ) s . push ( x ) ;  $ ~~ans += ( cnt - 1 ) * cnt / 2 ;  $ ~}  $ ~cnt = 0 ;  $ ~while ( ! s . empty ( ) ) {  $ ~~cnt ++ ;  $ ~~s . pop ( ) ;  $ ~}  $ ~ans += ( cnt - 1 ) * cnt / 2 ;  $ ~ans += n ;  $ ~cout << ans << endl ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~long long n , a [ 100005 ] , sum = 0 , cnt = 1 ;  $ ~cin >> n ;  $ ~for ( long long i = 1 ; i <= n ; i ++ ) {  $ ~~cin >> a [ i ] ;  $ ~~if ( a [ 1 ] == 0 ) a [ 0 ] = 1 ;  $ ~~if ( a [ i ] == a [ i - 1 ] ) {  $ ~~~sum += cnt ;  $ ~~~cnt ++ ;  $ ~~} else  $ ~~~cnt = 1 ;  $ ~}  $ ~n = n + sum ;  $ ~cout << n << endl ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~long long n ;  $ ~cin >> n ;  $ ~vector < long long > v ( n ) ;  $ ~for ( long long i = 0 ; i < n ; i ++ ) { cin >> v [ i ] ; }  $ ~long long j = 1 ;  $ ~long long ans = n ;  $ ~for ( long long i = 0 ; i < n ; ) {  $ ~~j = i + 1 ;  $ ~~while ( j < n && v [ j ] == v [ i ] ) { j ++ ; }  $ ~~long long lon = j - i ;  $ ~~ans += lon * ( lon - 1 ) / 2 ;  $ ~~i = j ;  $ ~}  $ ~cout << ans << "\n" ;  $ }
long long abs ( long long , long long ) ;  $ void solve ( ) {  $ ~long long n ;  $ ~cin >> n ;  $ ~long long a [ n ] , ans = 0 ;  $ ~for ( long long i = 0 ; i < n ; i ++ ) { cin >> a [ i ] ; }  $ ~long long t = 1 ;  $ ~for ( long long i = 0 ; i < n ; i ++ ) {  $ ~~if ( i == n - 1 ) {  $ ~~~ans ++ ;  $ ~~} else {  $ ~~~if ( a [ i ] == a [ i + 1 ] ) {  $ ~~~~if ( i == n - 2 ) {  $ ~~~~~t ++ ;  $ ~~~~~ans += ( t * ( t + 1 ) ) / 2 ;  $ ~~~~~break ;  $ ~~~~}  $ ~~~~t ++ ;  $ ~~~} else {  $ ~~~~ans += ( t * ( t + 1 ) ) / 2 ;  $ ~~~~t = 1 ;  $ ~~~}  $ ~~}  $ ~}  $ ~cout << ans << "\n" ;  $ }  $ int main ( ) {  $ ~long long TESTS = 1 ;  $ ~while ( TESTS -- ) { solve ( ) ; }  $ ~return 0 ;  $ }  $ long long abs ( long long a , long long b ) {  $ ~if ( a > b )  $ ~~return a - b ;  $ ~else  $ ~~return b - a ;  $ }
long long int n , m , i , j , a [ 100005 ] , ans , c ;  $ int main ( ) {  $ ~cin >> n ;  $ ~ans = n ;  $ ~a [ n ] = 1000000005 ;  $ ~for ( i = 0 ; i < n ; i ++ ) cin >> a [ i ] ;  $ ~c = 1 ;  $ ~for ( i = 0 ; i < n ; i ++ ) {  $ ~~if ( a [ i ] == a [ i + 1 ] ) {  $ ~~~c ++ ;  $ ~~} else {  $ ~~~ans = ans + ( c * ( c - 1 ) ) / 2 ;  $ ~~~c = 1 ;  $ ~~}  $ ~}  $ ~cout << ans << endl ;  $ }
void boost ( ) { }  $ int main ( ) {  $ ~int n ;  $ ~cin >> n ;  $ ~long long int arr [ n ] ;  $ ~for ( int i = 0 ; i < n ; i ++ ) cin >> arr [ i ] ;  $ ~long long int ans = 0 ;  $ ~long long int till = 0 ;  $ ~for ( int i = 0 ; i < n ; i ++ ) {  $ ~~if ( ( i + 1 < n ) && ( arr [ i ] == arr [ i + 1 ] ) )  $ ~~~till ++ ;  $ ~~else {  $ ~~~till ++ ;  $ ~~~ans += ( ( till * ( till + 1 ll ) ) / 2 ll ) ;  $ ~~~till = 0 ;  $ ~~}  $ ~}  $ ~cout << ans << endl ;  $ }
int main ( ) {  $ ~long long n ;  $ ~cin >> n ;  $ ~vector < long long > v ( n , 0 ) ;  $ ~vector < long long > sum ( n , 0 ) ;  $ ~for ( long long i = 0 ; i < n ; i ++ ) {  $ ~~cin >> v [ i ] ;  $ ~~if ( i > 0 && v [ i - 1 ] == v [ i ] ) sum [ i ] += sum [ i - 1 ] ;  $ ~~sum [ i ] ++ ;  $ ~}  $ ~long long ans = 0 ;  $ ~for ( long long i = 0 ; i < n ; i ++ ) {  $ ~~ans ++ ;  $ ~~if ( i > 0 && v [ i ] == v [ i - 1 ] ) { ans += sum [ i - 1 ] ; }  $ ~}  $ ~cout << ans << endl ;  $ }
const int INF = 0 x3f3f3f3f ;  $ long long a [ 100000 + 5 ] , b [ 100000 + 5 ] ;  $ int main ( ) {  $ ~long long i , j , k , l = 0 ;  $ ~long long n , m ;  $ ~cin >> n ;  $ ~for ( i = 0 ; i < n ; i ++ ) cin >> a [ i ] ;  $ ~k = 0 ;  $ ~int cou = 0 ;  $ ~for ( i = 1 ; i < n ; i ++ ) {  $ ~~if ( a [ i ] == a [ k ] )  $ ~~~cou ++ ;  $ ~~else {  $ ~~~if ( cou ) b [ l ++ ] = cou + 1 ;  $ ~~~cou = 0 ;  $ ~~~k = i ;  $ ~~}  $ ~~if ( i == n - 1 ) {  $ ~~~if ( cou ) b [ l ++ ] = cou + 1 ;  $ ~~}  $ ~}  $ ~long long s = n ;  $ ~for ( i = 0 ; i < l ; i ++ ) s += b [ i ] * ( b [ i ] - 1 ) / 2 ;  $ ~cout << s << endl ;  $ ~return 0 ;  $ }
void Fast_Read_Out ( ) { }  $ void Random ( ) {  $ ~unsigned int seed ;  $ ~asm ( "rdtsc" : "=A" ( seed ) ) ;  $ ~srand ( seed ) ;  $ }  $ unsigned int Time ( ) {  $ ~unsigned int time = clock ( ) / 1000.00 ;  $ ~return time ;  $ }  $ const int inf = int ( 1e9 ) + 123 ;  $ const int N = int ( 1e5 ) + 123 ;  $ set < int > s ;  $ map < int , int > d ;  $ int a [ N ] ;  $ long long Calc ( int x ) {  $ ~return ( x * x - x ) / 2 ;  $ }  $ int main ( ) {  $ ~Random ( ) ;  $ ~Fast_Read_Out ( ) ;  $ ~int n ;  $ ~cin >> n ;  $ ~for ( int i = 1 ; i <= n ; i ++ ) cin >> a [ i ] ;  $ ~long long ans = 0 , res = 0 ;  $ ~for ( int i = 2 ; i <= n ; i ++ ) {  $ ~~if ( a [ i ] == a [ i - 1 ] ) {  $ ~~~res ++ ;  $ ~~~ans += res ;  $ ~~} else  $ ~~~res = 0 ;  $ ~}  $ ~cout << ans + n << endl ;  $ }
int main ( ) {  $ ~int n ;  $ ~string s ;  $ ~cin >> n >> s ;  $ ~string ans = "" ;  $ ~int i ;  $ ~int flag = 1 ;  $ ~for ( i = 0 ; i < n - 1 ; i ++ ) {  $ ~~if ( ! flag ) break ;  $ ~~if ( s [ i + 1 ] >= s [ i ] ) {  $ ~~~ans += s [ i ] ;  $ ~~} else {  $ ~~~flag = 0 ;  $ ~~}  $ ~}  $ ~if ( ! flag )  $ ~~for ( ; i < n ; i ++ ) { ans += s [ i ] ; }  $ ~cout << ans << endl ;  $ }
int main ( ) {  $ ~int n ;  $ ~string s ;  $ ~int t , flag = 0 ;  $ ~cin >> n >> s ;  $ ~for ( int i = 0 ; i < s . length ( ) ; i ++ ) {  $ ~~if ( s [ i ] > s [ i + 1 ] ) {  $ ~~~flag = 1 ;  $ ~~~t = i ;  $ ~~~break ;  $ ~~}  $ ~}  $ ~if ( flag == 0 ) {  $ ~~for ( int i = 0 ; i < s . length ( ) - 1 ; i ++ ) { cout << s [ i ] ; }  $ ~~cout << endl ;  $ ~} else {  $ ~~for ( int i = 0 ; i < s . length ( ) ; i ++ ) {  $ ~~~if ( i == t ) continue ;  $ ~~~cout << s [ i ] ;  $ ~~}  $ ~~cout << endl ;  $ ~}  $ ~return 0 ;  $ }
int find ( int x , int father [ ] ) {  $ ~if ( father [ x ] == x ) return x ;  $ ~return father [ x ] = find ( father [ x ] , father ) ;  $ }  $ int main ( ) {  $ ~int n ;  $ ~cin >> n ;  $ ~string s ;  $ ~cin >> s ;  $ ~int pos = 0 ;  $ ~for ( int i = 1 ; i < n ; i ++ ) {  $ ~~if ( s [ i ] < s [ i - 1 ] ) {  $ ~~~pos = i - 1 ;  $ ~~~break ;  $ ~~} else {  $ ~~~pos = i ;  $ ~~}  $ ~}  $ ~s . erase ( pos , 1 ) ;  $ ~cout << s << "\n" ;  $ }
int main ( ) {  $ ~int n ;  $ ~string s ;  $ ~cin >> n >> s ;  $ ~int pos = n - 1 ;  $ ~for ( int i = 0 ; i < n - 1 ; ++ i ) {  $ ~~if ( s [ i ] > s [ i + 1 ] ) {  $ ~~~pos = i ;  $ ~~~break ;  $ ~~}  $ ~}  $ ~cout << s . substr ( 0 , pos ) + s . substr ( pos + 1 ) << endl ;  $ ~return 0 ;  $ }
inline long long MAX2 ( long long a , long long int b ) {  $ ~return ( a ) > ( b ) ? ( a ) : ( b ) ;  $ }  $ inline long long MAX3 ( long long a , long long b , long long c ) {  $ ~return ( a ) > ( b ) ? ( ( a ) > ( c ) ? ( a ) : ( c ) ) : ( ( b ) > ( c ) ? ( b ) : ( c ) ) ;  $ }  $ inline long long MIN2 ( long long a , long long b ) {  $ ~return ( a ) < ( b ) ? ( a ) : ( b ) ;  $ }  $ inline long long MIN3 ( long long a , long long b , long long c ) {  $ ~return ( a ) < ( b ) ? ( ( a ) < ( c ) ? ( a ) : ( c ) ) : ( ( b ) < ( c ) ? ( b ) : ( c ) ) ;  $ }  $ int main ( ) {  $ ~int n ;  $ ~cin >> n ;  $ ~string s ;  $ ~cin >> s ;  $ ~int temp , result = n - 1 ;  $ ~for ( int i = 1 ; i < n ; i ++ ) {  $ ~~temp = ( int ) s [ i ] - ( int ) s [ i - 1 ] ;  $ ~~if ( temp < 0 ) {  $ ~~~result = i - 1 ;  $ ~~~break ;  $ ~~}  $ ~}  $ ~for ( int i = 0 ; i < n ; i ++ ) {  $ ~~if ( i != result ) cout << s [ i ] ;  $ ~}  $ ~cout << endl ;  $ }
int main ( ) {  $ ~long long n ;  $ ~cin >> n ;  $ ~string s ;  $ ~cin >> s ;  $ ~long long check = n - 1 ;  $ ~for ( long long i = 0 ; i < n - 1 ; i ++ ) {  $ ~~if ( s [ i ] > s [ i + 1 ] ) {  $ ~~~check = i ;  $ ~~~break ;  $ ~~}  $ ~}  $ ~for ( long long i = 0 ; i < n ; i ++ )  $ ~~if ( check != i ) cout << s [ i ] ;  $ ~cout << endl ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~cout . precision ( 10 ) ;  $ ~cout << fixed ;  $ ~long long n ;  $ ~cin >> n ;  $ ~string s ;  $ ~cin >> s ;  $ ~long long pos = n - 1 ;  $ ~for ( long long i = 1 ; i < n ; i ++ ) {  $ ~~if ( s [ i ] < s [ i - 1 ] ) { pos = min ( pos , i - 1 ) ; }  $ ~}  $ ~s . erase ( pos , 1 ) ;  $ ~cout << s << endl ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~int t ;  $ ~cin >> t ;  $ ~string s ;  $ ~cin >> s ;  $ ~for ( int i = 0 ; i < t ; i ++ ) {  $ ~~if ( s [ i ] > s [ i + 1 ] ) {  $ ~~~s [ i ] = 1 ;  $ ~~~break ;  $ ~~}  $ ~}  $ ~for ( int i = 0 ; i < t ; i ++ ) {  $ ~~if ( s [ i ] >= 'a' && s [ i ] <= 'z' ) cout << s [ i ] ;  $ ~}  $ ~cout << endl ;  $ }
int main ( ) {  $ ~string s ;  $ ~bool f = 1 ;  $ ~int n ;  $ ~cin >> n >> s ;  $ ~for ( int i = 0 ; i < int ( n - 1 ) ; i ++ ) {  $ ~~if ( s [ i ] > s [ i + 1 ] && f ) {  $ ~~~f = 0 ;  $ ~~} else {  $ ~~~cout << s [ i ] ;  $ ~~}  $ ~}  $ ~if ( ! f ) cout << s [ n - 1 ] ;  $ ~cout << "\n" ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~int n ;  $ ~string ss ;  $ ~cin >> n >> ss ;  $ ~int in = - 1 ;  $ ~for ( int i = 0 ; i < n - 1 ; i ++ ) {  $ ~~if ( ss [ i ] > ss [ i + 1 ] ) {  $ ~~~in = i ;  $ ~~~break ;  $ ~~}  $ ~}  $ ~if ( in == - 1 ) n -- ;  $ ~for ( int i = 0 ; i < n ; i ++ ) {  $ ~~if ( i != in ) cout << ss [ i ] ;  $ ~}  $ ~cout << endl ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~int n ;  $ ~string s ;  $ ~cin >> n >> s ;  $ ~int pos = n - 1 ;  $ ~for ( int i = 0 ; i < n - 1 ; ++ i ) {  $ ~~if ( s [ i ] > s [ i + 1 ] ) {  $ ~~~pos = i ;  $ ~~~break ;  $ ~~}  $ ~}  $ ~cout << s . substr ( 0 , pos ) + s . substr ( pos + 1 ) << endl ;  $ }
int main ( ) {  $ ~int n ;  $ ~string str ;  $ ~cin >> n >> str ;  $ ~for ( int i = 0 ; i < n ; i ++ ) {  $ ~~if ( str [ i ] > str [ i + 1 ] ) {  $ ~~~str . erase ( i , 1 ) ;  $ ~~~break ;  $ ~~}  $ ~}  $ ~cout << str << endl ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~int n ;  $ ~string en ;  $ ~cin >> n ;  $ ~cin >> en ;  $ ~int i , j ;  $ ~for ( i = 0 ; i < n - 1 ; i ++ ) {  $ ~~if ( en [ i ] > en [ i + 1 ] ) {  $ ~~~for ( j = 0 ; j < i ; j ++ ) cout << en [ j ] ;  $ ~~~for ( j = i + 1 ; j < n ; j ++ ) cout << en [ j ] ;  $ ~~~break ;  $ ~~}  $ ~}  $ ~if ( i == n - 1 ) {  $ ~~for ( j = 0 ; j < i ; j ++ ) cout << en [ j ] ;  $ ~}  $ ~cout << endl ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~int n ;  $ ~cin >> n ;  $ ~string s ;  $ ~cin >> s ;  $ ~bool p = 0 ;  $ ~for ( int i = 0 ; i < n - 1 ; i ++ ) {  $ ~~if ( s [ i ] > s [ i + 1 ] ) {  $ ~~~p = 1 ;  $ ~~~break ;  $ ~~}  $ ~}  $ ~if ( ! p ) {  $ ~~for ( int i = 0 ; i < n - 1 ; i ++ ) { cout << s [ i ] ; }  $ ~~cout << endl ;  $ ~~return 0 ;  $ ~}  $ ~for ( int i = 0 ; i < n - 1 ; i ++ ) {  $ ~~if ( s [ i ] > s [ i + 1 ] ) {  $ ~~~for ( int j = i + 1 ; j < n ; j ++ ) { cout << s [ j ] ; }  $ ~~~cout << endl ;  $ ~~~return 0 ;  $ ~~}  $ ~~cout << s [ i ] ;  $ ~}  $ ~return 0 ;  $ }
string s ;  $ int n ;  $ int main ( ) {  $ ~cin >> s ;  $ ~for ( int i = 0 ; i < s . size ( ) ; i ++ ) {  $ ~~if ( s [ i ] == '1' ) {  $ ~~~for ( int j = i ; j < s . size ( ) ; j ++ ) {  $ ~~~~if ( s [ j ] == '0' ) { n ++ ; }  $ ~~~}  $ ~~~if ( n >= 6 ) {  $ ~~~~cout << "yes" << endl ;  $ ~~~} else {  $ ~~~~cout << "no" << endl ;  $ ~~~}  $ ~~~return 0 ;  $ ~~}  $ ~}  $ ~cout << "no" << endl ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~string s ;  $ ~cin >> s ;  $ ~int c = 0 , k = 0 ;  $ ~string ans = "no" ;  $ ~reverse ( s . begin ( ) , s . end ( ) ) ;  $ ~if ( s . length ( ) < 7 ) {  $ ~~cout << ans << endl ;  $ ~} else {  $ ~~for ( int i = 0 ; i < s . length ( ) ; i ++ ) {  $ ~~~if ( s [ i ] == '0' ) {  $ ~~~~c ++ ;  $ ~~~~if ( c == 6 ) {  $ ~~~~~k = i ;  $ ~~~~~break ;  $ ~~~~}  $ ~~~}  $ ~~}  $ ~~if ( k != 0 ) {  $ ~~~for ( int j = k + 1 ; j < s . length ( ) ; j ++ ) {  $ ~~~~if ( s [ j ] == '1' ) {  $ ~~~~~ans = "yes" ;  $ ~~~~~break ;  $ ~~~~} else {  $ ~~~~~continue ;  $ ~~~~}  $ ~~~}  $ ~~}  $ ~~cout << ans << endl ;  $ ~}  $ ~return 0 ;  $ }
int main ( ) {  $ ~string s ;  $ ~cin >> s ;  $ ~string ans = "no" ;  $ ~if ( s . size ( ) < 7 ) {  $ ~~cout << ans << endl ;  $ ~} else {  $ ~~int k = 0 ;  $ ~~reverse ( s . begin ( ) , s . end ( ) ) ;  $ ~~int count = 0 , i = 0 ;  $ ~~while ( count < 6 && i < s . size ( ) ) {  $ ~~~if ( s [ i ] == '0' ) {  $ ~~~~count ++ ;  $ ~~~~k = i ;  $ ~~~}  $ ~~~i ++ ;  $ ~~}  $ ~~if ( k != 0 && count == 6 ) {  $ ~~~for ( int i = k + 1 ; i < s . size ( ) ; i ++ ) {  $ ~~~~if ( s [ i ] == '1' ) {  $ ~~~~~ans = "yes" ;  $ ~~~~~break ;  $ ~~~~} else {  $ ~~~~~continue ;  $ ~~~~}  $ ~~~}  $ ~~} else {  $ ~~~ans = "no" ;  $ ~~}  $ ~~cout << ans << endl ;  $ ~}  $ ~return 0 ;  $ }
int main ( ) {  $ ~char a [ 101 ] ;  $ ~cin >> a ;  $ ~int x = 0 , y = 0 ;  $ ~for ( int i = 0 ; a [ i ] != '\0' ; i ++ ) {  $ ~~int flag = 0 ;  $ ~~if ( a [ i ] == '1' ) {  $ ~~~for ( int j = i + 1 ; a [ j ] != '\0' ; j ++ ) {  $ ~~~~if ( a [ j ] == '0' ) x ++ ;  $ ~~~~if ( x == 6 ) break ;  $ ~~~}  $ ~~~flag = 1 ;  $ ~~}  $ ~~if ( flag == 1 ) { break ; }  $ ~}  $ ~if ( x >= 6 ) {  $ ~~cout << "yes" << endl ;  $ ~} else {  $ ~~cout << "no" << endl ;  $ ~}  $ ~return 0 ;  $ }
int main ( ) {  $ ~string s ;  $ ~while ( cin >> s ) {  $ ~~while ( s [ 0 ] == '0' ) s . erase ( 0 , 1 ) ;  $ ~~while ( ~ s . find ( "1" ) ) s . erase ( s . find ( "1" ) , 1 ) ;  $ ~~if ( s . size ( ) >= 6 )  $ ~~~cout << "yes" << endl ;  $ ~~else  $ ~~~cout << "no" << endl ;  $ ~}  $ ~return 0 ;  $ }
int main ( ) {  $ ~string s ;  $ ~cin >> s ;  $ ~int n = s . size ( ) ;  $ ~for ( int i = 0 ; i < n ; i ++ ) {  $ ~~int c = 0 ;  $ ~~if ( s [ i ] - '0' ) {  $ ~~~for ( int j = i + 1 ; j < n ; j ++ )  $ ~~~~if ( s [ j ] - '0' == 0 ) c ++ ;  $ ~~~if ( c >= 6 ) {  $ ~~~~cout << "yes" << endl ;  $ ~~~~return 0 ;  $ ~~~}  $ ~~}  $ ~}  $ ~cout << "no" << endl ;  $ ~return 0 ;  $ }
char a ;  $ int n , b = 0 ;  $ int main ( ) {  $ ~a = getchar ( ) ;  $ ~while ( a != '\n' ) {  $ ~~( a == '1' ) && ( b = 1 ) ;  $ ~~if ( b && a == '0' ) n ++ ;  $ ~~a = getchar ( ) ;  $ ~~if ( n >= 6 ) return puts ( "yes" ) , 0 ;  $ ~}  $ ~puts ( "no" ) ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~string s ;  $ ~cin >> s ;  $ ~long long first_one = - 1 ;  $ ~for ( long long i = 0 ; i < s . length ( ) ; ++ i ) {  $ ~~if ( s [ i ] == '1' ) {  $ ~~~first_one = i ;  $ ~~~break ;  $ ~~}  $ ~}  $ ~if ( first_one == - 1 ) {  $ ~~cout << "no\n" ;  $ ~~return 0 ;  $ ~}  $ ~long long total = 0 ;  $ ~for ( long long i = first_one + 1 ; i < s . length ( ) ; ++ i ) {  $ ~~if ( s [ i ] == '0' ) { total ++ ; }  $ ~}  $ ~if ( total >= 6 ) {  $ ~~cout << "yes\n" ;  $ ~} else {  $ ~~cout << "no\n" ;  $ ~}  $ ~return 0 ;  $ }
int main ( ) {  $ ~string s ;  $ ~cin >> s ;  $ ~int len = s . length ( ) , ipos , cnt = 0 ;  $ ~for ( ipos = 0 ; ipos < len ; ++ ipos )  $ ~~if ( s [ ipos ] == '1' ) break ;  $ ~if ( ipos == len ) return puts ( "no" ) , 0 ;  $ ~for ( ++ ipos ; ipos < len ; ++ ipos )  $ ~~if ( s [ ipos ] == '0' ) ++ cnt ;  $ ~puts ( ( cnt >= 6 ) ? "yes" : "no" ) ;  $ }
int a , n ;  $ char p ;  $ int main ( ) {  $ ~while ( cin >> p ) {  $ ~~if ( a == 0 ) {  $ ~~~if ( p == '1' ) a = 1 ;  $ ~~} else {  $ ~~~if ( p == '0' ) n ++ ;  $ ~~}  $ ~}  $ ~if ( n >= 6 ) {  $ ~~cout << "yes" << endl ;  $ ~} else {  $ ~~cout << "no" << endl ;  $ ~}  $ ~return 0 ;  $ }
int main ( ) {  $ ~string p ;  $ ~cin >> p ;  $ ~int y = 0 ;  $ ~while ( p [ y ] == '0' ) y ++ ;  $ ~int rsp = 0 ;  $ ~for ( int i = y + 1 ; i < p . size ( ) ; i ++ ) rsp += ( p [ i ] == '0' ) ;  $ ~if ( rsp >= 6 ) {  $ ~~cout << "yes" << endl ;  $ ~} else {  $ ~~cout << "no" << endl ;  $ ~}  $ }
int main ( ) {  $ ~string s ;  $ ~cin >> s ;  $ ~for ( int i = 0 ; i < s . length ( ) ; i ++ )  $ ~~if ( s [ i ] == '1' ) {  $ ~~~int sum = 0 ;  $ ~~~for ( int j = i + 1 ; j < s . length ( ) ; j ++ )  $ ~~~~if ( s [ j ] == '0' ) sum ++ ;  $ ~~~if ( sum >= 6 ) {  $ ~~~~cout << "yes" << endl ;  $ ~~~~return 0 ;  $ ~~~}  $ ~~~break ;  $ ~~}  $ ~cout << "no" << endl ;  $ ~return 0 ;  $ }
int dx [ 4 ] = { 0 , 0 , - 1 , 1 } ;  $ int dy [ 4 ] = { 1 , - 1 , 0 , 0 } ;  $ int main ( ) {  $ ~string s ;  $ ~cin >> s ;  $ ~int i0 = - 1 , i1 = - 1 , cnt = 0 ;  $ ~for ( int i = s . size ( ) - 1 ; i >= 0 ; i -= 1 ) {  $ ~~if ( s [ i ] == '0' ) cnt ++ ;  $ ~~if ( cnt == 6 ) {  $ ~~~i0 = i ;  $ ~~~break ;  $ ~~}  $ ~}  $ ~for ( int i = 0 ; i < s . size ( ) ; i += 1 )  $ ~~if ( s [ i ] == '1' ) {  $ ~~~i1 = i ;  $ ~~~break ;  $ ~~}  $ ~if ( i1 == - 1 || i0 == - 1 ) {  $ ~~cout << "no\n" ;  $ ~~return 0 ;  $ ~}  $ ~if ( i1 >= i0 ) {  $ ~~cout << "no\n" ;  $ ~~return 0 ;  $ ~}  $ ~cout << "yes\n" ;  $ }
int main ( ) {  $ ~int n , k ;  $ ~cin >> n >> k ;  $ ~cout << max ( 0 , 3 * n - k ) << endl ;  $ }
const double TOLL = 1e-9 ;  $ int memo [ 51 ] [ 255 ] ;  $ int recur ( int n , int k ) {  $ ~if ( n == 0 && k == 0 ) return 0 ;  $ ~if ( n == 0 ) return 1000 ;  $ ~if ( k == 0 ) return 1000 ;  $ ~if ( memo [ n ] [ k ] != - 1 ) return memo [ n ] [ k ] ;  $ ~int rv = 1000 ;  $ ~for ( int i = 2 ; i <= 5 ; i ++ )  $ ~~if ( i <= k ) {  $ ~~~int now = recur ( n - 1 , k - i ) ;  $ ~~~if ( i == 2 ) now ++ ;  $ ~~~rv = min ( now , rv ) ;  $ ~~}  $ ~return memo [ n ] [ k ] = rv ;  $ }  $ int main ( ) {  $ ~memset ( memo , - 1 , sizeof memo ) ;  $ ~int n , k ;  $ ~while ( cin >> n >> k ) { cout << recur ( n , k ) << endl ; }  $ }
long long dp [ 52 ] [ 252 ] ;  $ long long f ( long long slot , long long n ) {  $ ~if ( slot == 0 ) {  $ ~~if ( n == 0 )  $ ~~~return 0 ;  $ ~~else  $ ~~~return 1e10 ;  $ ~}  $ ~if ( dp [ slot ] [ n ] != - 1 ) return dp [ slot ] [ n ] ;  $ ~long long ans = 1e10 ;  $ ~for ( int i = 2 ; i <= 5 ; i ++ ) {  $ ~~if ( i == 2 ) {  $ ~~~ans = min ( ans , 1 + f ( slot - 1 , n - i ) ) ;  $ ~~} else  $ ~~~ans = min ( ans , f ( slot - 1 , n - i ) ) ;  $ ~}  $ ~return dp [ slot ] [ n ] = ans ;  $ }  $ int main ( ) {  $ ~long long n , k ;  $ ~cin >> n >> k ;  $ ~memset ( dp , - 1 , sizeof ( dp ) ) ;  $ ~cout << f ( n , k ) << endl ;  $ }
int main ( ) {  $ ~int n , k ;  $ ~cin >> n >> k ;  $ ~if ( n * 3 >= k )  $ ~~cout << n * 3 - k << endl ;  $ ~else  $ ~~cout << 0 << endl ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~int n , k ;  $ ~cin >> n >> k ;  $ ~if ( 3 * n - k > 0 )  $ ~~cout << 3 * n - k << endl ;  $ ~else  $ ~~cout << 0 << endl ;  $ }
int main ( ) {  $ ~int n , k ;  $ ~cin >> n >> k ;  $ ~vector < int > ex ( n , 5 ) ;  $ ~int idx = n - 1 ;  $ ~while ( 1 ) {  $ ~~int sum = 0 ;  $ ~~for ( int i = 0 ; i < n ; i ++ ) { sum += ex [ i ] ; }  $ ~~if ( sum == k ) break ;  $ ~~if ( idx == - 1 ) { idx = n - 1 ; }  $ ~~ex [ idx ] -- ;  $ ~~idx -- ;  $ ~}  $ ~int res = 0 ;  $ ~for ( int ( i ) = 0 ; ( i ) < ( n ) ; ( i ) ++ )  $ ~~if ( ex [ i ] == 2 ) res ++ ;  $ ~cout << res << endl ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~int n , k ;  $ ~cin >> n >> k ;  $ ~if ( k / n == 2 )  $ ~~cout << n - k % n << endl ;  $ ~else  $ ~~cout << 0 << endl ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~int n , a , coun ;  $ ~cin >> n >> a ;  $ ~if ( 3 * n <= a )  $ ~~coun = 0 ;  $ ~else  $ ~~coun = 3 * n - a ;  $ ~cout << coun << endl ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~int n , k , ans ;  $ ~while ( cin >> n >> k ) {  $ ~~if ( k / n == 2 ) {  $ ~~~ans = k % n ;  $ ~~~cout << n - ans << endl ;  $ ~~} else  $ ~~~cout << "0" << endl ;  $ ~}  $ ~return 0 ;  $ }
int main ( ) {  $ ~int n , k ;  $ ~cin >> n >> k ;  $ ~double c = double ( k ) / n ;  $ ~if ( c >= 3 ) {  $ ~~cout << 0 << endl ;  $ ~} else {  $ ~~cout << n - k % n << endl ;  $ ~}  $ ~return 0 ;  $ }
int main ( ) {  $ ~int a , b ;  $ ~cin >> a >> b ;  $ ~int x = 3 * a ;  $ ~if ( x <= b )  $ ~~cout << "0" << endl ;  $ ~else  $ ~~cout << x - b << endl ;  $ }
int main ( ) {  $ ~int n , k ;  $ ~cin >> n >> k ;  $ ~int ans = - 1 ;  $ ~ans = n ;  $ ~ans *= 3 ;  $ ~ans -= k ;  $ ~if ( ans >= 0 ) {  $ ~~cout << ans << '\n' ;  $ ~} else {  $ ~~cout << 0 << '\n' ;  $ ~}  $ }
int T = 1 ;  $ void solve ( ) {  $ ~int n , k ;  $ ~cin >> n >> k ;  $ ~cout << ( ( ( 0 ) > ( n - ( k - ( 2 * n ) ) ) ) ? ( 0 ) : ( n - ( k - ( 2 * n ) ) ) ) << endl ;  $ }  $ int main ( ) {  $ ~while ( T -- ) { solve ( ) ; }  $ ~return 0 ;  $ }
const int N = 1e5 + 100 ;  $ int n , k , ans , a [ 55 ] ;  $ vector < int > v ;  $ bool flag ;  $ bool check ( ) {  $ ~int sum = 0 ;  $ ~for ( int i = 0 ; i < n ; i ++ ) { sum += a [ i ] ; }  $ ~if ( sum == k ) return true ;  $ ~return false ;  $ }  $ int main ( ) {  $ ~cin >> n >> k ;  $ ~for ( int i = 0 ; i < n ; i ++ ) { a [ i ] = 2 ; }  $ ~if ( check ( ) ) {  $ ~~cout << n << endl ;  $ ~~return 0 ;  $ ~}  $ ~for ( int i = 2 ; i <= 5 ; i ++ ) {  $ ~~for ( int j = 0 ; j < n ; j ++ ) {  $ ~~~a [ j ] ++ ;  $ ~~~if ( check ( ) ) {  $ ~~~~flag = true ;  $ ~~~~break ;  $ ~~~}  $ ~~}  $ ~~if ( flag ) break ;  $ ~}  $ ~if ( flag ) {  $ ~~for ( int i = 0 ; i < n ; i ++ ) {  $ ~~~if ( a [ i ] == 2 ) ans ++ ;  $ ~~}  $ ~}  $ ~cout << ans << endl ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~int a , b ;  $ ~cin >> a >> b ;  $ ~int x = 3 * a ;  $ ~if ( x <= b )  $ ~~cout << "0" << endl ;  $ ~else  $ ~~cout << x - b << endl ;  $ }
int main ( ) {  $ ~int n , k ;  $ ~while ( cin >> n >> k ) {  $ ~~if ( k >= 3 * n )  $ ~~~cout << "0" << endl ;  $ ~~else if ( k <= 2 * n )  $ ~~~cout << n << endl ;  $ ~~else  $ ~~~cout << n - k + k / n * n << endl ;  $ ~}  $ ~return 0 ;  $ }
int main ( ) {  $ ~int a , b ;  $ ~cin >> a >> b ;  $ ~if ( b >= 3 * a ) {  $ ~~cout << 0 << endl ;  $ ~} else {  $ ~~cout << 3 * a - b << endl ;  $ ~}  $ ~return 0 ;  $ }
int main ( ) {  $ ~int n , k ;  $ ~while ( cin >> n >> k ) {  $ ~~if ( k >= 3 * n )  $ ~~~cout << "0" << endl ;  $ ~~else if ( k <= 2 * n )  $ ~~~cout << n << endl ;  $ ~~else  $ ~~~cout << n - k + k / n * n << endl ;  $ ~}  $ ~return 0 ;  $ }
int main ( ) {  $ ~int k , n ;  $ ~cin >> n >> k ;  $ ~cout << max ( 0 , n - ( k / 2 - n ) * 2 - k % 2 ) << endl ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~int n , m , ans = 0 ;  $ ~cin >> n >> m ;  $ ~ans = m - 2 * n ;  $ ~ans = n - ans ;  $ ~if ( ans < 0 ) {  $ ~~cout << "0" << endl ;  $ ~~return 0 ;  $ ~} else  $ ~~cout << ans << endl ;  $ ~return 0 ;  $ }
const int maxn = 1e5 + 7 ;  $ int counter ( int x ) {  $ ~int myAss = 0 ;  $ ~while ( x ) {  $ ~~x >> = 1 ;  $ ~~myAss ++ ;  $ ~}  $ ~return myAss ;  $ }  $ int main ( ) {  $ ~int n ;  $ ~while ( cin >> n ) { cout << counter ( n ) << endl ; }  $ ~return 0 ;  $ }
int main ( ) {  $ ~int n , ct = 0 ;  $ ~cin >> n ;  $ ~while ( n ) {  $ ~~ct ++ ;  $ ~~n = n / 2 ;  $ ~}  $ ~cout << ct << endl ;  $ }
int ans = 0 ;  $ int main ( ) {  $ ~int n ;  $ ~cin >> n ;  $ ~while ( ( 1 << ans ) - 1 < n ) ans ++ ;  $ ~cout << ans << endl ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~int n , ans = 0 ;  $ ~cin >> n ;  $ ~while ( n > 0 ) {  $ ~~n /= 2 ;  $ ~~ans ++ ;  $ ~}  $ ~cout << ans << "\n" ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~int n ;  $ ~cin >> n ;  $ ~cout << ceil ( log2 ( n + 1 ) ) << "\n" ;  $ ~return 0 ;  $ }
int n , c ;  $ int main ( ) {  $ ~cin >> n ;  $ ~while ( n > 0 ) {  $ ~~n /= 2 ;  $ ~~c ++ ;  $ ~}  $ ~cout << c << endl ;  $ }
int main ( ) {  $ ~int n ;  $ ~cin >> n ;  $ ~for ( int i = 1 ; i < 50 ; i ++ ) {  $ ~~n >> = 1 ;  $ ~~if ( n == 0 ) {  $ ~~~cout << i << endl ;  $ ~~~return 0 ;  $ ~~}  $ ~}  $ ~return 0 ;  $ }
int main ( ) {  $ ~int a ;  $ ~cin >> a ;  $ ~int ans = 1 ;  $ ~while ( a != 1 ) {  $ ~~ans ++ ;  $ ~~a >> = 1 ;  $ ~}  $ ~cout << ans << endl ;  $ ~return 0 ;  $ }
vector < long long > v ;  $ int main ( ) {  $ ~long long n ;  $ ~cin >> n ;  $ ~long long sum = 1 ;  $ ~v . push_back ( 1 ) ;  $ ~while ( sum < n ) {  $ ~~long long cur = v [ v . size ( ) - 1 ] << 1 ;  $ ~~v . push_back ( cur ) ;  $ ~~sum += cur ;  $ ~}  $ ~cout << v . size ( ) << endl ;  $ ~return 0 ;  $ }
long long n , num [ 1000000 ] ;  $ int main ( ) {  $ ~cin >> n ;  $ ~for ( long long i = 1 ; num [ i - 1 ] <= 1e10 ; i ++ ) num [ i ] = num [ i - 1 ] + num [ i - 1 ] + 1 ;  $ ~for ( long long i = 1 ; num [ i ] <= 1e10 ; i ++ )  $ ~~if ( num [ i - 1 ] < n && num [ i ] >= n ) {  $ ~~~cout << i << endl ;  $ ~~~return 0 ;  $ ~~}  $ ~return 0 ;  $ }
long long int n , i , x ;  $ int main ( ) {  $ ~while ( cin >> n ) {  $ ~~i = 0 ;  $ ~~x = n ;  $ ~~while ( x != 0 ) {  $ ~~~if ( x % 2 == 0 )  $ ~~~~x = x / 2 ;  $ ~~~else  $ ~~~~x = ( x - 1 ) / 2 ;  $ ~~~i ++ ;  $ ~~}  $ ~~cout << i << endl ;  $ ~}  $ ~return 0 ;  $ }
int main ( ) {  $ ~long long n , t = 0 , x = 1 ;  $ ~cin >> n ;  $ ~while ( x <= n ) {  $ ~~x *= 2 ;  $ ~~t ++ ;  $ ~}  $ ~cout << t << endl ;  $ ~return 0 ;  $ }
long long n , k = 1 , has ;  $ int main ( ) {  $ ~cin >> n ;  $ ~while ( k - 1 < n ) {  $ ~~k *= 2 ;  $ ~~has ++ ;  $ ~}  $ ~cout << has << endl ;  $ }
int main ( ) {  $ ~long long n ;  $ ~cin >> n ;  $ ~cout << ( int ) log2 ( n ) + 1 << endl ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~long long n ;  $ ~cin >> n ;  $ ~cout << ( int ) log2 ( n ) + 1 << endl ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~long n ;  $ ~cin >> n ;  $ ~long cont = 0 ;  $ ~while ( n > 0 ) {  $ ~~n = n / 2 ;  $ ~~cont ++ ;  $ ~}  $ ~cout << cont << endl ;  $ ~return 0 ;  $ }
const int INF = 0 x3f3f3f3f ;  $ const double eps = 1e-7 ;  $ const long long mod = 1e9 + 7 ;  $ long long CountNum ( long long n ) {  $ ~int ans = 0 ;  $ ~while ( n ) {  $ ~~ans ++ ;  $ ~~n /= 2 ;  $ ~}  $ ~return ans ;  $ }  $ int main ( ) {  $ ~long long n ;  $ ~cin >> n ;  $ ~cout << CountNum ( n ) << endl ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~int n ;  $ ~while ( cin >> n ) {  $ ~~int num = 0 ;  $ ~~while ( n ) {  $ ~~~num ++ ;  $ ~~~n = n >> 1 ;  $ ~~}  $ ~~cout << num << endl ;  $ ~}  $ ~return 0 ;  $ }
int main ( ) {  $ ~int p = 0 ;  $ ~long long n , x = 1 ;  $ ~cin >> n ;  $ ~while ( x <= n ) {  $ ~~x *= 2 ;  $ ~~p ++ ;  $ ~~if ( x - 1 >= n ) {  $ ~~~cout << p << endl ;  $ ~~~return 0 ;  $ ~~}  $ ~}  $ ~return 0 ;  $ }
int gcd ( int a , int b ) {  $ ~if ( b == 0 ) return a ;  $ ~return gcd ( b , a % b ) ;  $ }  $ int main ( ) {  $ ~int a ;  $ ~cin >> a ;  $ ~int ans = 1 ;  $ ~while ( a != 1 ) {  $ ~~ans ++ ;  $ ~~a >> = 1 ;  $ ~}  $ ~cout << ans << endl ;  $ }
long long n , num ;  $ int main ( ) {  $ ~cin >> n ;  $ ~long long sum = 1 ;  $ ~int count = 0 ;  $ ~while ( sum - 1 < n ) {  $ ~~sum *= 2 ;  $ ~~count ++ ;  $ ~}  $ ~cout << count << endl ;  $ }
long long a [ 100010 ] , b [ 100010 ] , c [ 100010 ] ;  $ long long n , m , k , t , r , s , aux , rta ;  $ int main ( ) {  $ ~while ( cin >> n ) {  $ ~~memset ( a , 0 , sizeof ( a ) ) ;  $ ~~int rta = 0 ;  $ ~~while ( n ) { n /= 2 , rta ++ ; }  $ ~~cout << rta << endl ;  $ ~}  $ ~return 0 ;  $ }
int main ( ) {  $ ~int n ;  $ ~cin >> n ;  $ ~cout << floor ( log2 ( n ) ) + 1 << '\n' ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~string s ;  $ ~getline ( cin , s ) ;  $ ~char x ;  $ ~int len = s . size ( ) - 1 ;  $ ~int flag = 1 ;  $ ~while ( flag ) {  $ ~~char temp = s [ len ] ;  $ ~~if ( temp >= 'A' && temp <= 'Z' ) {  $ ~~~x = temp ;  $ ~~~flag = 0 ;  $ ~~} else if ( temp >= 'a' && temp <= 'z' ) {  $ ~~~x = temp ;  $ ~~~flag = 0 ;  $ ~~}  $ ~~len -- ;  $ ~}  $ ~x = tolower ( x ) ;  $ ~if ( x == 'a' || x == 'e' || x == 'i' || x == 'o' || x == 'u' || x == 'y' )  $ ~~cout << "YES" << endl ;  $ ~else  $ ~~cout << "NO" << endl ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~string s ;  $ ~getline ( cin , s ) ;  $ ~char x ;  $ ~int len = s . size ( ) - 1 ;  $ ~int flag = 1 ;  $ ~while ( flag ) {  $ ~~char temp = s [ len ] ;  $ ~~if ( temp >= 'A' && temp <= 'Z' ) {  $ ~~~x = temp ;  $ ~~~flag = 0 ;  $ ~~} else if ( temp >= 'a' && temp <= 'z' ) {  $ ~~~x = temp ;  $ ~~~flag = 0 ;  $ ~~}  $ ~~len -- ;  $ ~}  $ ~x = tolower ( x ) ;  $ ~if ( x == 'a' || x == 'e' || x == 'i' || x == 'o' || x == 'u' || x == 'y' )  $ ~~cout << "YES" << endl ;  $ ~else  $ ~~cout << "NO" << endl ;  $ ~return 0 ;  $ }
char vol [ ] = { 'y' , 'Y' , 'o' , 'O' , 'i' , 'I' , 'a' , 'A' , 'e' , 'E' , 'u' , 'U' } ;  $ int main ( ) {  $ ~string s ;  $ ~getline ( cin , s ) ;  $ ~for ( int i = s . size ( ) - 1 ; i > - 1 ; i -- )  $ ~~if ( s [ i ] != '?' && s [ i ] != ' ' ) {  $ ~~~for ( int j = 0 ; j < 12 ; j ++ )  $ ~~~~if ( s [ i ] == vol [ j ] ) return cout << "YES" << '\n' , 0 ;  $ ~~~return cout << "NO" << '\n' , 0 ;  $ ~~}  $ ~return 0 ;  $ }
int main ( ) {  $ ~char s [ 500 ] ;  $ ~gets ( s ) ;  $ ~char c ;  $ ~int len = strlen ( s ) ;  $ ~for ( int i = 0 ; i < len ; i ++ ) {  $ ~~char cc = tolower ( s [ i ] ) ;  $ ~~if ( cc >= 'a' && cc <= 'z' ) c = cc ;  $ ~}  $ ~if ( c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u' || c == 'y' )  $ ~~cout << "YES" << endl ;  $ ~else  $ ~~cout << "NO" << endl ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~char s [ 500 ] ;  $ ~gets ( s ) ;  $ ~char c ;  $ ~int len = strlen ( s ) ;  $ ~for ( int i = 0 ; i < len ; i ++ ) {  $ ~~char cc = tolower ( s [ i ] ) ;  $ ~~if ( cc >= 'a' && cc <= 'z' ) c = cc ;  $ ~}  $ ~if ( c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u' || c == 'y' )  $ ~~cout << "YES" << endl ;  $ ~else  $ ~~cout << "NO" << endl ;  $ ~return 0 ;  $ }
string vow = "aeiouy" ;  $ int main ( ) {  $ ~string x ;  $ ~getline ( cin , x ) ;  $ ~bool ok = false ;  $ ~for ( int i = 0 ; i < x . length ( ) ; ++ i ) {  $ ~~if ( isalpha ( x [ i ] ) ) {  $ ~~~if ( vow . find ( tolower ( x [ i ] ) ) != - 1 )  $ ~~~~ok = true ;  $ ~~~else  $ ~~~~ok = false ;  $ ~~}  $ ~}  $ ~cout << ( ( ok ) ? "YES" : "NO" ) << endl ;  $ }
string vow = "aeiouy" ;  $ int main ( ) {  $ ~string x ;  $ ~getline ( cin , x ) ;  $ ~bool ok = false ;  $ ~for ( int i = 0 ; i < x . length ( ) ; ++ i ) {  $ ~~if ( isalpha ( x [ i ] ) ) {  $ ~~~if ( vow . find ( tolower ( x [ i ] ) ) != - 1 )  $ ~~~~ok = true ;  $ ~~~else  $ ~~~~ok = false ;  $ ~~}  $ ~}  $ ~cout << ( ( ok ) ? "YES" : "NO" ) << endl ;  $ }
char vocals [ ] = { 'a' , 'e' , 'i' , 'o' , 'u' , 'y' , 'A' , 'E' , 'I' , 'O' , 'U' , 'Y' } ;  $ bool contains ( char vocal ) {  $ ~for ( int i = 0 ; i < 12 ; i ++ ) {  $ ~~if ( vocals [ i ] == vocal ) return true ;  $ ~}  $ ~return false ;  $ }  $ int main ( ) {  $ ~string question ;  $ ~getline ( cin , question ) ;  $ ~for ( int i = question . size ( ) - 2 ; i >= 0 ; i -- ) {  $ ~~if ( question [ i ] != ' ' ) {  $ ~~~if ( contains ( question [ i ] ) ) {  $ ~~~~cout << "YES" << endl ;  $ ~~~~return 0 ;  $ ~~~} else {  $ ~~~~cout << "NO" << endl ;  $ ~~~~return 0 ;  $ ~~~}  $ ~~}  $ ~}  $ ~return 0 ;  $ }
bool a ( char c ) {  $ ~c = tolower ( c ) ;  $ ~if ( c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u' || c == 'y' ) return 1 ;  $ ~return 0 ;  $ }  $ string s ;  $ int main ( ) {  $ ~getline ( cin , s ) ;  $ ~for ( int i = s . size ( ) - 2 ; i >= 0 ; -- i ) {  $ ~~if ( s [ i ] != ' ' ) {  $ ~~~if ( a ( s [ i ] ) ) {  $ ~~~~cout << "YES" << endl ;  $ ~~~} else {  $ ~~~~cout << "NO" << endl ;  $ ~~~}  $ ~~~return 0 ;  $ ~~}  $ ~}  $ }
bool a ( char c ) {  $ ~c = tolower ( c ) ;  $ ~if ( c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u' || c == 'y' ) return 1 ;  $ ~return 0 ;  $ }  $ string s ;  $ int main ( ) {  $ ~getline ( cin , s ) ;  $ ~for ( int i = s . size ( ) - 2 ; i >= 0 ; -- i ) {  $ ~~if ( s [ i ] != ' ' ) {  $ ~~~if ( a ( s [ i ] ) ) {  $ ~~~~cout << "YES" << endl ;  $ ~~~} else {  $ ~~~~cout << "NO" << endl ;  $ ~~~}  $ ~~~return 0 ;  $ ~~}  $ ~}  $ }
const long long MOD = 1e9 + 7 ;  $ const long long INF = 1e9 + 7 ;  $ bool isVowel ( char a ) {  $ ~if ( a == 'a' ) return true ;  $ ~if ( a == 'i' ) return true ;  $ ~if ( a == 'u' ) return true ;  $ ~if ( a == 'e' ) return true ;  $ ~if ( a == 'o' ) return true ;  $ ~if ( a == 'y' ) return true ;  $ ~return false ;  $ }  $ int main ( ) {  $ ~string s ;  $ ~getline ( cin , s ) ;  $ ~char ans ;  $ ~for ( int i = 0 ; i < s . size ( ) ; i ++ ) {  $ ~~s [ i ] = tolower ( s [ i ] ) ;  $ ~~if ( isalpha ( s [ i ] ) ) { ans = s [ i ] ; }  $ ~}  $ ~if ( isVowel ( ans ) )  $ ~~cout << "YES" << '\n' ;  $ ~else  $ ~~cout << "NO" << '\n' ;  $ ~return 0 ;  $ }
string s ;  $ inline bool yy ( char x ) {  $ ~if ( x == 'a' || x == 'e' || x == 'i' || x == 'o' || x == 'u' || x == 'y' ) return 1 ;  $ ~return 0 ;  $ }  $ int main ( ) {  $ ~register int i ;  $ ~getline ( cin , s ) ;  $ ~for ( i = s . length ( ) - 1 ; ! isalpha ( s [ i ] ) ; i -- )  $ ~~;  $ ~s [ i ] = tolower ( s [ i ] ) ;  $ ~if ( yy ( s [ i ] ) )  $ ~~puts ( "YES" ) ;  $ ~else  $ ~~puts ( "NO" ) ;  $ }
const int M = 100 + 5 ;  $ int main ( ) {  $ ~string s ;  $ ~getline ( cin , s ) ;  $ ~char c = s [ 0 ] ;  $ ~for ( int i = 0 ; i < s . length ( ) ; i ++ ) {  $ ~~if ( ( s [ i ] >= 'a' && s [ i ] <= 'z' ) || ( s [ i ] >= 'A' && s [ i ] <= 'Z' ) ) { c = s [ i ] ; }  $ ~}  $ ~char le [ 12 ] = { 'a' , 'e' , 'i' , 'o' , 'u' , 'y' , 'A' , 'E' , 'I' , 'O' , 'U' , 'Y' } ;  $ ~bool ok = false ;  $ ~for ( int i = 0 ; i < 12 ; i ++ ) {  $ ~~if ( c == le [ i ] ) {  $ ~~~ok = true ;  $ ~~~break ;  $ ~~}  $ ~}  $ ~if ( ok ) {  $ ~~cout << "YES" << endl ;  $ ~} else {  $ ~~cout << "NO" << endl ;  $ ~}  $ ~return 0 ;  $ }
int main ( ) {  $ ~int n , a , b ;  $ ~cin >> n >> a >> b ;  $ ~cout << min ( n - a , b + 1 ) << endl ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~int n , a , b ;  $ ~cin >> n >> a >> b ;  $ ~cout << min ( b + 1 , n - a ) << endl ;  $ }
int main ( ) {  $ ~int n , a , b ;  $ ~cin >> n >> a >> b ;  $ ~cout << n - max ( a + 1 , n - b ) + 1 << endl ;  $ }
int main ( ) {  $ ~int a , b , n ;  $ ~while ( cin >> n >> a >> b ) {  $ ~~if ( ( a + b ) > n )  $ ~~~cout << ( n - a ) << endl ;  $ ~~else  $ ~~~cout << ( ( n - ( a + b ) ) ? ( b + 1 ) : b ) << endl ;  $ ~}  $ ~return 0 ;  $ }
int main ( ) {  $ ~int n , a , b , c = 0 ;  $ ~cin >> n >> a >> b ;  $ ~for ( int i = a ; i <= n - 1 ; i ++ ) {  $ ~~if ( n - i >= 1 && n - i - 1 <= b ) { c ++ ; }  $ ~}  $ ~cout << c << endl ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~int n , a , b , ans ;  $ ~cin >> n >> a >> b ;  $ ~cout << n - max ( a + 1 , n - b ) + 1 << endl ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~int n , a , b ;  $ ~cin >> n >> a >> b ;  $ ~int count = 0 ;  $ ~for ( int i = 1 ; i <= n ; i ++ ) {  $ ~~if ( a <= ( i - 1 ) and ( n - i ) <= b ) { count ++ ; }  $ ~}  $ ~cout << count << endl ;  $ }
int main ( ) {  $ ~int n , i , j , x , y , z ;  $ ~cin >> n >> x >> y ;  $ ~z = ( x + y ) ;  $ ~if ( n - x == 1 && n != z )  $ ~~cout << 1 << endl ;  $ ~else if ( n > z )  $ ~~cout << y + 1 << endl ;  $ ~else if ( z > n && ( n - x ) > 1 )  $ ~~cout << ( n - x ) << endl ;  $ ~else if ( n == z )  $ ~~cout << y << endl ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~int n , a , b ;  $ ~cin >> n >> a >> b ;  $ ~int i = a + 1 , c = 0 ;  $ ~while ( b >= 0 && i <= n ) {  $ ~~c ++ ;  $ ~~i ++ ;  $ ~~b -- ;  $ ~}  $ ~cout << c << endl ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~int n , a , b ;  $ ~cin >> n >> a >> b ;  $ ~int x = n - b ;  $ ~int y = a + 1 ;  $ ~int sum = n - max ( x , y ) + 1 ;  $ ~cout << sum << '\n' ;  $ }
int n , a , b ;  $ int main ( ) {  $ ~cin >> n >> a >> b ;  $ ~cout << min ( n - a , b + 1 ) << endl ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~int n , a , b , X = 0 ;  $ ~cin >> n >> a >> b ;  $ ~for ( int i = 1 ; i <= n ; i ++ ) {  $ ~~if ( i - 1 >= a && n - i <= b ) X ++ ;  $ ~}  $ ~cout << X << endl ;  $ ~return 0 ;  $ }
int n , a , b ;  $ int main ( ) {  $ ~cin >> n >> a >> b ;  $ ~cout << min ( n - a , b + 1 ) << endl ;  $ ~return 0 ;  $ }
int n , a , b ;  $ int main ( ) {  $ ~int count = 0 ;  $ ~cin >> n >> a >> b ;  $ ~if ( a + b + 1 < n ) a = n - b - 1 ;  $ ~count = n - a ;  $ ~cout << count << endl ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~int n , a , b ;  $ ~cin >> n >> a >> b ;  $ ~if ( a + b >= n ) {  $ ~~cout << n - a << endl ;  $ ~} else {  $ ~~cout << b + 1 << endl ;  $ ~}  $ ~return 0 ;  $ }
int n , a , b ;  $ int main ( ) {  $ ~cin >> n >> a >> b ;  $ ~cout << min ( n - a , b + 1 ) << endl ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~int n , a , b , i = 0 , c = 0 ;  $ ~cin >> n >> a >> b ;  $ ~i = n - a ;  $ ~c = b + 1 ;  $ ~if ( i <= c ) {  $ ~~cout << i << endl ;  $ ~} else {  $ ~~cout << c << endl ;  $ ~}  $ ~return 0 ;  $ }
int main ( ) {  $ ~int a , b , n ;  $ ~while ( cin >> n >> a >> b ) { cout << ( n - a > b ? b + 1 : n - a ) << endl ; }  $ ~return 0 ;  $ }
int main ( ) {  $ ~int n , a , b ;  $ ~cin >> n >> a >> b ;  $ ~cout << min ( b + 1 , n - a ) << endl ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~int n , a , b ;  $ ~cin >> n >> a >> b ;  $ ~cout << min ( n - a , b + 1 ) << endl ;  $ ~return 0 ;  $ }
int n , l , r , i ;  $ int main ( ) {  $ ~cin >> n >> l >> r ;  $ ~cout << ( n - max ( l , n - r - 1 ) ) << endl ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~int n , a , b ;  $ ~cin >> n >> a >> b ;  $ ~int x = min ( n - a , b + 1 ) ;  $ ~cout << x << endl ;  $ ~return 0 ;  $ }
int n , a , b ;  $ int main ( ) {  $ ~cin >> n >> a >> b ;  $ ~cout << min ( n - a , b + 1 ) << endl ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~int a , b , c ;  $ ~cin >> a >> b >> c ;  $ ~if ( a - b > c + 1 )  $ ~~cout << c + 1 << endl ;  $ ~else  $ ~~cout << a - b << endl ;  $ }
int res ;  $ int main ( ) {  $ ~int n , a , b ;  $ ~cin >> n >> a >> b ;  $ ~res = max ( a + 1 , n - b ) ;  $ ~cout << n - res + 1 << endl ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~int n , a , b ;  $ ~cin >> n >> a >> b ;  $ ~long long c = 0 ;  $ ~for ( int i = 1 ; i <= n ; i ++ ) {  $ ~~if ( ( ( i > a ) && ( n - i ) <= b ) ) c ++ ;  $ ~}  $ ~cout << c << "\n" ;  $ }
int main ( ) {  $ ~int n , a , b , d = 0 , c = 0 ;  $ ~cin >> n >> a >> b ;  $ ~d = n - a ;  $ ~c = b + 1 ;  $ ~if ( d <= c )  $ ~~cout << d << endl ;  $ ~else  $ ~~cout << c << endl ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~int n , a , b ;  $ ~cin >> n >> a >> b ;  $ ~int k = n - a ;  $ ~cout << min ( k , b + 1 ) << endl ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~int n , a , b ;  $ ~while ( cin >> n >> a >> b ) {  $ ~~int cnt = 0 ;  $ ~~n -= a ;  $ ~~if ( n <= ( b + 1 ) ) {  $ ~~~cout << n << endl ;  $ ~~~break ;  $ ~~} else  $ ~~~cout << b + 1 << endl ;  $ ~}  $ ~return 0 ;  $ }
int main ( ) {  $ ~long long int a , b , c ;  $ ~cin >> a >> b >> c ;  $ ~long long int k = 0 , g = b + 1 ;  $ ~while ( g <= a ) {  $ ~~if ( a - g <= c ) { k ++ ; }  $ ~~g ++ ;  $ ~}  $ ~cout << k << '\n' ;  $ ~return 0 ;  $ }
const int maxx = 1e3 + 10 ;  $ int a [ maxx ] ;  $ int n ;  $ int main ( ) {  $ ~while ( cin >> n ) {  $ ~~for ( int i = 0 ; i < n ; i ++ ) cin >> a [ i ] ;  $ ~~sort ( a , a + n ) ;  $ ~~long long sum = 0 ;  $ ~~for ( int i = 1 ; i < n ; i ++ ) { sum += ( a [ i ] - a [ i - 1 ] - 1 ) ; }  $ ~~cout << sum << endl ;  $ ~}  $ ~return 0 ;  $ }
int main ( ) {  $ ~int n , x , max = 0 , min = INT_MAX ;  $ ~cin >> n ;  $ ~for ( int i = 0 ; i < n ; i ++ ) {  $ ~~cin >> x ;  $ ~~if ( x >= max ) max = x ;  $ ~~if ( min > x ) min = x ;  $ ~}  $ ~cout << max - min + 1 - n << endl ;  $ }
int main ( ) {  $ ~int n ;  $ ~cin >> n ;  $ ~int a [ n ] ;  $ ~for ( int i = 0 ; i < n ; i ++ ) cin >> a [ i ] ;  $ ~sort ( a , a + n ) ;  $ ~cout << a [ n - 1 ] - a [ 0 ] + 1 - n << endl ;  $ }
int main ( ) {  $ ~long long int n , a [ 1000 ] , result ;  $ ~cin >> n ;  $ ~for ( int i = 0 ; i < n ; i ++ ) cin >> a [ i ] ;  $ ~sort ( a , a + n ) ;  $ ~result = a [ n - 1 ] - a [ 0 ] - n + 1 ;  $ ~cout << result << endl ;  $ }
int main ( ) {  $ ~long long n , i , j , l = 1000000000000000 , r = 0 ;  $ ~cin >> n ;  $ ~for ( i = 0 ; i < n ; i ++ ) {  $ ~~cin >> j ;  $ ~~l = min ( l , j ) ;  $ ~~r = max ( r , j ) ;  $ ~}  $ ~cout << ( r - l + 1 ) - n << endl ;  $ }
const int inf = 0 x3f3f3f3f ;  $ const int N = 1010 ;  $ long long a [ N ] ;  $ int main ( ) {  $ ~int m ;  $ ~cin >> m ;  $ ~for ( int i = 0 ; i < m ; i ++ ) cin >> a [ i ] ;  $ ~sort ( a , a + m ) ;  $ ~long long ans = 0 ;  $ ~for ( int i = 1 ; i < m ; i ++ ) ans += a [ i ] - a [ i - 1 ] - 1 ;  $ ~cout << ans << endl ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~int n , res = 0 ;  $ ~cin >> n ;  $ ~long long arr [ n ] ;  $ ~for ( int i = 0 ; i < n ; i ++ ) cin >> arr [ i ] ;  $ ~sort ( arr , arr + n ) ;  $ ~for ( int i = 1 ; i < n ; i ++ )  $ ~~if ( arr [ i ] != ( arr [ i - 1 ] + 1 ) ) res += ( arr [ i ] - arr [ i - 1 ] - 1 ) ;  $ ~cout << res << "\n" ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~long long int arra [ 1100 ] ;  $ ~long long int i , j , k , l , p , q , r , s , t , u , v , w , n , max_i = 0 ;  $ ~cin >> n ;  $ ~for ( i = 1 ; i <= n ; i ++ ) { cin >> arra [ i ] ; }  $ ~sort ( arra , arra + n + 1 ) ;  $ ~for ( i = 1 ; i <= n ; i ++ ) {  $ ~~if ( arra [ i ] >= max_i ) { max_i = arra [ i ] ; }  $ ~}  $ ~if ( n == 1 ) {  $ ~~cout << "0" << '\n' ;  $ ~} else {  $ ~~l = max_i - arra [ 1 ] + 1 - n ;  $ ~~cout << l << '\n' ;  $ ~}  $ }
int main ( ) {  $ ~int n ;  $ ~cin >> n ;  $ ~int mi = 1 << 30 , mx = 0 ;  $ ~for ( int i = 0 ; i < n ; i ++ ) {  $ ~~int x ;  $ ~~cin >> x ;  $ ~~mi = min ( x , mi ) ;  $ ~~mx = max ( x , mx ) ;  $ ~}  $ ~cout << mx - mi + 1 - n << endl ;  $ ~return 0 ;  $ }
const int maxn = 1000010 ;  $ const int MAXM = 500000 ;  $ int main ( ) {  $ ~int n ;  $ ~while ( cin >> n ) {  $ ~~int a [ 1005 ] ;  $ ~~for ( int i = 0 ; i < n ; i ++ ) { cin >> a [ i ] ; }  $ ~~sort ( a , a + n ) ;  $ ~~int cnt = 0 ;  $ ~~for ( int i = 1 ; i < n ; i ++ ) {  $ ~~~if ( a [ i ] - a [ i - 1 ] > 1 ) { cnt += ( a [ i ] - a [ i - 1 ] ) - 1 ; }  $ ~~}  $ ~~cout << cnt << endl ;  $ ~}  $ ~return 0 ;  $ }
int main ( ) {  $ ~int n ;  $ ~cin >> n ;  $ ~int mx = 0 ;  $ ~int mn = 1e9 ;  $ ~for ( int i = 0 ; i < n ; i ++ ) {  $ ~~int t ;  $ ~~cin >> t ;  $ ~~mx = max ( mx , t ) ;  $ ~~mn = min ( mn , t ) ;  $ ~}  $ ~cout << mx - mn + 1 - n << '\n' ;  $ }
int a [ 1010 ] ;  $ int main ( ) {  $ ~int n ;  $ ~cin >> n ;  $ ~for ( int i = 0 ; i < n ; i ++ ) cin >> a [ i ] ;  $ ~sort ( a , a + n ) ;  $ ~cout << a [ n - 1 ] - a [ 0 ] - n + 1 << endl ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~int n , res = 0 ;  $ ~cin >> n ;  $ ~long long arr [ n ] ;  $ ~for ( int i = 0 ; i < n ; i ++ ) cin >> arr [ i ] ;  $ ~sort ( arr , arr + n ) ;  $ ~for ( int i = 1 ; i < n ; i ++ )  $ ~~if ( arr [ i ] != ( arr [ i - 1 ] + 1 ) ) res += ( arr [ i ] - arr [ i - 1 ] - 1 ) ;  $ ~cout << res << "\n" ;  $ ~return 0 ;  $ }
const int maxn = 1e6 ;  $ long long n , a [ maxn ] , res ;  $ int main ( ) {  $ ~cin >> n ;  $ ~for ( int i = int ( 0 ) ; i < int ( n ) ; i ++ ) cin >> a [ i ] ;  $ ~sort ( a , a + n ) ;  $ ~res = a [ n - 1 ] - a [ 0 ] - n + 1 ;  $ ~cout << res << '\n' ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~int n ;  $ ~while ( cin >> n ) {  $ ~~int a [ 1005 ] ;  $ ~~for ( int i = 0 ; i < n ; i ++ ) { cin >> a [ i ] ; }  $ ~~sort ( a , a + n ) ;  $ ~~int cnt = 0 ;  $ ~~for ( int i = 1 ; i < n ; i ++ ) {  $ ~~~if ( a [ i ] - a [ i - 1 ] > 1 ) { cnt += ( a [ i ] - a [ i - 1 ] ) - 1 ; }  $ ~~}  $ ~~cout << cnt << endl ;  $ ~}  $ ~return 0 ;  $ }
int main ( ) {  $ ~long long n ;  $ ~cin >> n ;  $ ~long long a [ n ] ;  $ ~for ( long long i = 0 ; i < n ; i ++ ) { cin >> a [ i ] ; }  $ ~sort ( a , a + n ) ;  $ ~long long ans = 0 ;  $ ~for ( long long i = 0 ; i < n - 1 ; i ++ ) {  $ ~~if ( ( a [ i + 1 ] - a [ i ] ) > 1 ) { ans = ans + ( ( a [ i + 1 ] - a [ i ] ) - 1 ) ; }  $ ~}  $ ~cout << ans << endl ;  $ ~return 0 ;  $ }
const int inf = 0 x3f3f3f3f ;  $ const int N = 1010 ;  $ long long a [ N ] ;  $ int main ( ) {  $ ~int m ;  $ ~cin >> m ;  $ ~for ( int i = 0 ; i < m ; i ++ ) cin >> a [ i ] ;  $ ~sort ( a , a + m ) ;  $ ~long long ans = 0 ;  $ ~for ( int i = 1 ; i < m ; i ++ ) ans += a [ i ] - a [ i - 1 ] - 1 ;  $ ~cout << ans << endl ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~long long n ;  $ ~cin >> n ;  $ ~long long ar [ n + 1 ] ;  $ ~for ( int i = 0 ; i < n ; i ++ ) { cin >> ar [ i ] ; }  $ ~sort ( ar , ar + n ) ;  $ ~long long count = 0 ;  $ ~long long temp = n - 2 ;  $ ~count = ( ar [ n - 1 ] - ar [ 0 ] - 1 ) - temp ;  $ ~cout << ( count ) << "\n" ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~int n ;  $ ~cin >> n ;  $ ~long long a [ 100001 ] ;  $ ~for ( int i = 0 ; i < n ; i ++ ) { cin >> a [ i ] ; }  $ ~sort ( a , a + n ) ;  $ ~cout << a [ n - 1 ] - a [ 0 ] + 1 - n << endl ;  $ }
const int inf = 0 x3f3f3f3f ;  $ const int N = 1010 ;  $ long long a [ N ] ;  $ int main ( ) {  $ ~int n ;  $ ~cin >> n ;  $ ~for ( int i = 0 ; i < n ; i ++ ) cin >> a [ i ] ;  $ ~sort ( a , a + n ) ;  $ ~long long ans = 0 ;  $ ~for ( int i = 1 ; i < n ; i ++ ) ans += a [ i ] - a [ i - 1 ] - 1 ;  $ ~cout << ans << endl ;  $ ~return 0 ;  $ }
long long i , j , k , n , t , m , x , z , ans , a [ 200007 ] ;  $ int main ( ) {  $ ~cin >> n ;  $ ~for ( i = 0 ; i < n ; i ++ ) { cin >> a [ i ] ; }  $ ~sort ( a , a + n ) ;  $ ~for ( i = 1 ; i < n ; i ++ ) { ans += a [ i ] - a [ i - 1 ] - 1 ; }  $ ~cout << ans << endl ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~int n ;  $ ~cin >> n ;  $ ~if ( n % 2 == 0 )  $ ~~cout << "0\n" ;  $ ~else  $ ~~cout << "1\n" ;  $ }
int main ( ) {  $ ~int n ;  $ ~cin >> n ;  $ ~if ( n % 2 == 0 )  $ ~~cout << "0" << endl ;  $ ~else if ( n % 2 != 0 )  $ ~~cout << "1" << endl ;  $ }
int main ( ) {  $ ~int i , j , m , n , x , y , k ;  $ ~cin >> n ;  $ ~cout << n % 2 << endl ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~int n ;  $ ~cin >> n ;  $ ~cout << ( n & 1 ? 1 : 0 ) << '\n' ;  $ }
int main ( ) {  $ ~int a ;  $ ~cin >> a ;  $ ~if ( a % 2 == 0 )  $ ~~cout << 0 << endl ;  $ ~else  $ ~~cout << 1 << endl ;  $ }
int main ( ) {  $ ~int n ;  $ ~cin >> n ;  $ ~cout << n % 2 << '\n' ;  $ ~return 0 ;  $ }
const int maxn = 5001 ;  $ int main ( ) {  $ ~int n ;  $ ~cin >> n ;  $ ~cout << n % 2 << endl ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~int n ;  $ ~cin >> n ;  $ ~cout << n % 2 << '\n' ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~int n ;  $ ~cin >> n ;  $ ~cout << n % 2 << endl ;  $ }
int main ( ) {  $ ~int a ;  $ ~cin >> a ;  $ ~if ( a % 2 != 0 )  $ ~~cout << "1" << endl ;  $ ~else  $ ~~cout << "0" << endl ;  $ }
int main ( ) {  $ ~int n ;  $ ~cin >> n ;  $ ~if ( n % 2 == 0 )  $ ~~cout << "0" << endl ;  $ ~else  $ ~~cout << "1" << endl ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~int n ;  $ ~cin >> n ;  $ ~if ( n % 2 == 0 ) {  $ ~~cout << "0" << endl ;  $ ~} else {  $ ~~cout << "1" << endl ;  $ ~}  $ ~return 0 ;  $ }
int main ( ) {  $ ~int a ;  $ ~cin >> a ;  $ ~if ( a % 2 == 0 )  $ ~~cout << 0 << endl ;  $ ~else  $ ~~cout << 1 << endl ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~int a ;  $ ~cin >> a ;  $ ~cout << a % 2 << endl ;  $ }
const int INF = 0 x3f3f3f3f ;  $ int main ( ) {  $ ~int n ;  $ ~cin >> n ;  $ ~if ( n % 2 == 0 )  $ ~~puts ( "0" ) ;  $ ~else  $ ~~puts ( "1" ) ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~int a ;  $ ~cin >> a ;  $ ~if ( a % 2 == 1 )  $ ~~cout << "1" << endl ;  $ ~else  $ ~~cout << "0" << endl ;  $ }
int main ( ) {  $ ~int x ;  $ ~cin >> x ;  $ ~cout << x % 2 << endl ;  $ }
int main ( ) {  $ ~long long int n ;  $ ~cin >> n ;  $ ~if ( n & 1 )  $ ~~cout << 1 << endl ;  $ ~else  $ ~~cout << 0 << endl ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~int a ;  $ ~cin >> a ;  $ ~if ( a % 2 )  $ ~~cout << "1\n" ;  $ ~else  $ ~~cout << "0\n" ;  $ }
int main ( ) {  $ ~int n ;  $ ~cin >> n ;  $ ~cout << ( n & 1 ) << endl ;  $ }
int main ( ) {  $ ~int n ;  $ ~cin >> n ;  $ ~if ( n % 2 == 0 )  $ ~~cout << 0 << endl ;  $ ~else  $ ~~cout << 1 << endl ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~int n ;  $ ~cin >> n ;  $ ~cout << ( n & 1 ) << endl ;  $ }
int main ( ) {  $ ~int n ;  $ ~cin >> n ;  $ ~cout << n % 2 << endl ;  $ }
int main ( ) {  $ ~int num ;  $ ~cin >> num ;  $ ~if ( num % 2 == 0 ) {  $ ~~cout << 0 << endl ;  $ ~} else {  $ ~~cout << 1 << endl ;  $ ~}  $ }
int main ( ) {  $ ~int n ;  $ ~cin >> n ;  $ ~if ( n & 1 )  $ ~~cout << "1" << endl ;  $ ~else  $ ~~cout << "0" << endl ;  $ }
int n ;  $ int main ( ) {  $ ~cin >> n ;  $ ~cout << n % 2 << endl ;  $ }
int main ( ) {  $ ~int n ;  $ ~cin >> n ;  $ ~if ( n % 2 != 0 ) {  $ ~~cout << 1 << endl ;  $ ~} else {  $ ~~cout << 0 << endl ;  $ ~}  $ ~return 0 ;  $ }
int main ( ) {  $ ~int n ;  $ ~cin >> n ;  $ ~cout << n % 2 << endl ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~int n ;  $ ~cin >> n ;  $ ~if ( n % 2 == 0 ) {  $ ~~cout << "0" << endl ;  $ ~} else  $ ~~cout << "1" << endl ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~int a ;  $ ~cin >> a ;  $ ~cout << a % 2 << "\n" ;  $ }
int main ( ) {  $ ~int n ;  $ ~cin >> n ;  $ ~if ( n & 1 )  $ ~~cout << 1 << endl ;  $ ~else  $ ~~cout << 0 << endl ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~int x ;  $ ~cin >> x ;  $ ~cout << ( x % 2 ) << endl ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~int in ;  $ ~cin >> in ;  $ ~cout << in % 2 << endl ;  $ ~return 0 ;  $ }
int a ;  $ int main ( ) {  $ ~cin >> a ;  $ ~cout << a % 2 << '\n' ;  $ }
int main ( ) {  $ ~long long a , b , c ;  $ ~cin >> a ;  $ ~cin >> b ;  $ ~cin >> c ;  $ ~cout << 2 * c * ( a + b - 2 ) - 8 * ( c * ( c - 1 ) ) << endl ;  $ }
int main ( ) {  $ ~int w , h , k ;  $ ~cin >> w >> h >> k ;  $ ~cout << 2 * k * ( w + h - 2 ) - 8 * ( k * ( k - 1 ) ) << endl ;  $ ~return 0 ;  $ }
bool can ( int i , int j , int k ) {  $ ~if ( i + j > k && j + k > i && i + k > j ) return true ;  $ ~return false ;  $ }  $ int main ( ) {  $ ~int w , h , k ;  $ ~cin >> w >> h >> k ;  $ ~int ans = 0 ;  $ ~while ( w > 0 && h > 0 && k > 0 ) {  $ ~~ans += 2 * ( w + h ) - 4 ;  $ ~~w -= 4 ;  $ ~~h -= 4 ;  $ ~~k -- ;  $ ~}  $ ~cout << ans << endl ;  $ }
int main ( ) {  $ ~int w , h , k ;  $ ~cin >> w >> h >> k ;  $ ~cout << 2 * k * ( w + h - 2 ) - 8 * ( k * ( k - 1 ) ) << endl ;  $ ~return 0 ;  $ }
long long n , m , k ;  $ long long ans = 0 ;  $ int main ( ) {  $ ~cin >> n >> m >> k ;  $ ~for ( long long i = 0 ; i < k ; i ++ ) {  $ ~~long long len = n - ( i * 2 ) * 2 ;  $ ~~long long wid = m - ( i * 2 ) * 2 ;  $ ~~ans += ( ( len + wid ) * 2 - 4 ) ;  $ ~}  $ ~cout << ans << "\n" ;  $ }
int main ( ) {  $ ~int w , h , i , r = 0 ;  $ ~cin >> w >> h >> i ;  $ ~while ( i >= 1 ) {  $ ~~r = r + ( w + h - 2 ) * 2 ;  $ ~~w = ( w - 4 ) ;  $ ~~h = ( h - 4 ) ;  $ ~~i -- ;  $ ~}  $ ~cout << r << endl ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~int x , y , z , t = 0 ;  $ ~cin >> x >> y >> z ;  $ ~for ( int i = 0 ; i < z ; i ++ ) {  $ ~~t = t + 2 * x + 2 * y - 4 ;  $ ~~x = x - 4 ;  $ ~~y = y - 4 ;  $ ~}  $ ~cout << t << endl ;  $ ~return 0 ;  $ }
long long i , b , a , t , k , l , ans ;  $ int main ( ) {  $ ~cin >> a ;  $ ~cin >> b ;  $ ~cin >> k ;  $ ~for ( i = 1 ; i <= k ; i ++ ) {  $ ~~ans = ans + ( a + b ) * 2 - 4 ;  $ ~~a = a - 4 ;  $ ~~b = b - 4 ;  $ ~}  $ ~cout << ans << endl ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~int w , h , k ;  $ ~cin >> w >> h >> k ;  $ ~int cnt = 0 ;  $ ~for ( int i = 1 ; i <= k ; i ++ ) {  $ ~~int size = ( w - 4 * ( i - 1 ) ) * ( h - 4 * ( i - 1 ) ) ;  $ ~~if ( size <= 0 )  $ ~~~break ;  $ ~~else  $ ~~~cnt += ( w - 4 * ( i - 1 ) ) * 2 + ( h - 4 * ( i - 1 ) - 2 ) * 2 ;  $ ~}  $ ~cout << cnt << endl ;  $ ~return 0 ;  $ }
int w , h , k ;  $ int main ( ) {  $ ~int ans = 0 ;  $ ~cin >> w >> h >> k ;  $ ~for ( int i = 1 ; i <= k ; i ++ ) {  $ ~~int _w = w - ( i - 1 ) * 4 ;  $ ~~int _h = h - ( i - 1 ) * 4 ;  $ ~~ans += 2 * ( _w + _h ) - 4 ;  $ ~}  $ ~cout << ans << endl ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~int w , h , k , res = 0 , i = 0 ;  $ ~cin >> w >> h >> k ;  $ ~while ( k -- ) {  $ ~~res += 2 * ( w - ( 4 * i ) + h - ( 4 * i ) ) - 4 ;  $ ~~i ++ ;  $ ~}  $ ~cout << res << endl ;  $ }
int main ( ) {  $ ~int w = 0 , h = 0 , k = 0 , counter_yello = 0 ;  $ ~cin >> w >> h >> k ;  $ ~for ( size_t i = 0 ; i < k ; ++ i ) {  $ ~~counter_yello += 2 * w + 2 * h - 4 ;  $ ~~w -= 4 ;  $ ~~h -= 4 ;  $ ~}  $ ~cout << counter_yello << endl ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~long long a , b , c , r = 0 ;  $ ~cin >> a >> b >> c ;  $ ~for ( long long i = 0 ; i < c ; i ++ ) r += ( ( ( ( a - ( 4 * i ) ) - 1 ) + ( ( b - ( 4 * i ) ) - 1 ) ) * 2 ) ;  $ ~cout << r << "\n" ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~int w , h , k , count = 0 ;  $ ~cin >> w >> h >> k ;  $ ~while ( k -- ) {  $ ~~count += 2 * ( w + h ) - 4 ;  $ ~~w -= 4 ;  $ ~~h -= 4 ;  $ ~}  $ ~cout << count << endl ;  $ ~return 0 ;  $ }
long long int w , h , k ;  $ int main ( ) {  $ ~cin >> w >> h >> k ;  $ ~long long int _rs = 0 ;  $ ~while ( k -- ) {  $ ~~_rs = _rs + 2 * ( w + h ) - 4 ;  $ ~~w -= 4 ;  $ ~~h -= 4 ;  $ ~}  $ ~cout << _rs << "\n" ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~int w = 0 , h = 0 , k = 0 ;  $ ~cin >> w >> h >> k ;  $ ~int cells = 0 ;  $ ~while ( k -- ) {  $ ~~cells = cells + ( ( 2 * ( w + h ) ) - 4 ) ;  $ ~~w -= 4 ;  $ ~~h -= 4 ;  $ ~}  $ ~cout << cells << "\n" ;  $ ~return 0 ;  $ }
const int maxn = 1e3 + 5 ;  $ int w , h , k ;  $ int main ( ) {  $ ~cin >> w >> h >> k ;  $ ~int total = 0 ;  $ ~int sum = 0 ;  $ ~sum = ( w + h - 2 ) * 2 ;  $ ~for ( int i = 1 ; i <= k ; i ++ ) {  $ ~~int a = sum - 16 * ( i - 1 ) ;  $ ~~total = total + a ;  $ ~}  $ ~cout << total << endl ;  $ }
int main ( ) {  $ ~int w , h , k ;  $ ~while ( cin >> w >> h >> k ) {  $ ~~int sum = 0 ;  $ ~~for ( int i = 0 ; i < k ; ++ i ) {  $ ~~~sum += 2 * ( w + h ) - 4 ;  $ ~~~w -= 4 ;  $ ~~~h -= 4 ;  $ ~~}  $ ~~cout << sum << '\n' ;  $ ~}  $ ~return 0 ;  $ }
int main ( ) {  $ ~int w , h , k , value = 0 ;  $ ~cin >> w >> h >> k ;  $ ~int deck = 0 , it = 2 ;  $ ~for ( int i = 1 ; i <= k ; i ++ ) {  $ ~~value = ( ( ( h - deck ) * 2 ) + ( ( w - it ) * 2 ) ) + value ;  $ ~~deck = deck + 4 ;  $ ~~it = it + 4 ;  $ ~}  $ ~cout << value << endl ;  $ }
int main ( ) {  $ ~int w , h , k , sum = 0 ;  $ ~cin >> w >> h >> k ;  $ ~for ( int q = 0 ; q < k ; q ++ ) {  $ ~~sum += ( ( 2 * w ) + ( 2 * h ) - 4 ) ;  $ ~~w -= 4 ;  $ ~~h -= 4 ;  $ ~~if ( w <= 1 || h <= 1 ) break ;  $ ~}  $ ~cout << sum << endl ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~long long int h , w , k ;  $ ~cin >> h >> w >> k ;  $ ~long long int g = 0 ;  $ ~while ( k > 0 ) {  $ ~~g += h * 2 + ( w - 2 ) * 2 ;  $ ~~k -- ;  $ ~~h -= 4 ;  $ ~~w -= 4 ;  $ ~~if ( h <= 0 ) { break ; }  $ ~~if ( w <= 0 ) { break ; }  $ ~}  $ ~cout << g << '\n' ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~int n , a , count = 0 ;  $ ~cin >> n >> a ;  $ ~for ( int i = 1 ; i <= n ; i ++ ) {  $ ~~if ( a % i == 0 && ( a / i ) <= n ) { count ++ ; }  $ ~}  $ ~cout << count << endl ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~long long n , x ;  $ ~cin >> n >> x ;  $ ~int c = 0 ;  $ ~for ( int i = 1 ; i <= n ; i ++ ) {  $ ~~if ( x % i == 0 and x <= n * i ) { c ++ ; }  $ ~}  $ ~cout << c << endl ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~long long n ;  $ ~long long x ;  $ ~cin >> n >> x ;  $ ~int cnt = 0 ;  $ ~for ( int i = 1 ; i <= n ; i ++ ) {  $ ~~if ( x % i == 0 && x <= i * n ) cnt ++ ;  $ ~}  $ ~cout << cnt << endl ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~int n , x , r = 0 ;  $ ~cin >> n >> x ;  $ ~for ( int i = 1 ; i <= n ; ++ i ) {  $ ~~if ( x % i != 0 ) continue ;  $ ~~int y = x / i ;  $ ~~if ( y <= n ) r ++ ;  $ ~}  $ ~cout << r << endl ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~int n , x , count = 0 ;  $ ~cin >> n >> x ;  $ ~if ( x == 1 ) {  $ ~~cout << 1 << endl ;  $ ~~return 0 ;  $ ~}  $ ~for ( int i = 2 ; i <= n ; i ++ ) {  $ ~~if ( x % i == 0 && x / i <= n ) count ++ ;  $ ~}  $ ~cout << ( x <= n ? count + 1 : count ) << endl ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~long long n , m ;  $ ~while ( cin >> n >> m ) {  $ ~~int flag = 0 ;  $ ~~for ( int i = 1 ; i <= n ; i ++ ) {  $ ~~~int k = m / i ;  $ ~~~if ( m % i == 0 && k <= n ) flag ++ ;  $ ~~}  $ ~~cout << flag << endl ;  $ ~}  $ }
int main ( ) {  $ ~int a , b , c = 0 ;  $ ~cin >> a >> b ;  $ ~if ( a == 1 && b == 1 ) {  $ ~~cout << 1 << endl ;  $ ~~return 0 ;  $ ~}  $ ~if ( a == 1 && b == 0 ) {  $ ~~cout << 0 << endl ;  $ ~~return 0 ;  $ ~}  $ ~for ( int i = 1 ; i <= a ; i ++ ) {  $ ~~if ( b % i == 0 && b / i <= a ) { c ++ ; }  $ ~}  $ ~cout << c << endl ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~long long int tabeSize , num , i , cnt = 0 ;  $ ~cin >> tabeSize >> num ;  $ ~for ( i = 1 ; i <= tabeSize ; i ++ ) {  $ ~~if ( num % i == 0 && num / i <= tabeSize ) cnt ++ ;  $ ~}  $ ~cout << cnt << endl ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~long long int n , x , cnt = 0 ;  $ ~cin >> n >> x ;  $ ~for ( int i = 1 ; i * i <= x ; i ++ ) {  $ ~~if ( x % i == 0 ) {  $ ~~~if ( i == x / i && i <= n && x / i <= n ) cnt ++ ;  $ ~~~if ( i != x / i && i <= n && x / i <= n ) cnt += 2 ;  $ ~~}  $ ~}  $ ~cout << cnt << endl ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~long long n , x ;  $ ~cin >> n >> x ;  $ ~int c = 0 ;  $ ~if ( x <= n ) c ++ ;  $ ~for ( int i = 2 ; i <= n ; i ++ ) {  $ ~~if ( x % i == 0 && x / i <= n ) { c ++ ; }  $ ~}  $ ~cout << c << endl ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~int n , i , c , t , d = 0 ;  $ ~cin >> n >> t ;  $ ~c = 0 ;  $ ~for ( i = 1 ; i <= n ; i ++ ) {  $ ~~if ( t % i == 0 ) {  $ ~~~d = t / i ;  $ ~~~if ( d >= 1 && d <= n ) { c ++ ; }  $ ~~}  $ ~}  $ ~cout << c << endl ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~long long int a , b , c , d , e , f , g , h , i , j ;  $ ~vector < long long int > v , x , u ;  $ ~string s , t ;  $ ~while ( cin >> a >> b ) {  $ ~~for ( c = 1 ; c <= a ; c ++ ) { v . push_back ( c ) ; }  $ ~~e = 0 ;  $ ~~f = a - 1 ;  $ ~~g = 0 ;  $ ~~while ( e <= f ) {  $ ~~~if ( v [ e ] * v [ f ] == b && v [ e ] != v [ f ] ) {  $ ~~~~g += 2 ;  $ ~~~~f -- ;  $ ~~~} else if ( v [ e ] * v [ f ] == b && v [ e ] == v [ f ] ) {  $ ~~~~g += 1 ;  $ ~~~~f -- ;  $ ~~~} else if ( v [ e ] * v [ f ] < b ) {  $ ~~~~e ++ ;  $ ~~~} else {  $ ~~~~f -- ;  $ ~~~}  $ ~~}  $ ~~cout << g << endl ;  $ ~~v . clear ( ) ;  $ ~}  $ ~return 0 ;  $ }
int main ( ) {  $ ~int n , x ;  $ ~cin >> n >> x ;  $ ~int ans = 0 ;  $ ~for ( int i = 1 ; i <= n ; i ++ ) {  $ ~~if ( x % i == 0 && x / i <= n ) { ans ++ ; }  $ ~}  $ ~cout << ans << endl ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~int i , j , k , n , m , ans = 0 , mn , count = 0 ;  $ ~cin >> n >> m ;  $ ~mn = min ( n , m ) ;  $ ~for ( i = 1 ; i <= mn ; i ++ )  $ ~~if ( m % i == 0 && m / i <= n ) count ++ ;  $ ~cout << count << endl ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~int n , k ;  $ ~cin >> n >> k ;  $ ~int cnt = 0 ;  $ ~for ( int i = 1 ; i <= n ; i ++ ) {  $ ~~if ( k % i == 0 && i * 1 LL * n >= k ) { cnt ++ ; }  $ ~}  $ ~cout << cnt << endl ;  $ }
int main ( ) {  $ ~long long int n , x , occurances = 0 ;  $ ~cin >> n >> x ;  $ ~for ( int i = 1 ; i <= n ; i ++ ) {  $ ~~if ( x % i == 0 && x / i <= n ) { occurances ++ ; }  $ ~}  $ ~cout << occurances << "\n" ;  $ ~return 0 ;  $ }
int i , j ;  $ int cnt ( int n ) {  $ ~int ans = 1 , res ;  $ ~for ( int i = 2 ; i * i <= n ; i ++ ) {  $ ~~res = 0 ;  $ ~~while ( n % i == 0 ) {  $ ~~~n /= i ;  $ ~~~res ++ ;  $ ~~}  $ ~~ans *= res + 1 ;  $ ~}  $ ~return ans ;  $ }  $ int main ( ) {  $ ~int n , x , ans = 0 ;  $ ~cin >> n >> x ;  $ ~for ( i = 1 ; i * i <= x && i <= n ; i ++ ) {  $ ~~if ( x % i ) continue ;  $ ~~if ( x / i <= n ) { ans += 2 ; }  $ ~~if ( i * i == x ) ans -- ;  $ ~}  $ ~cout << ans << endl ;  $ }
int main ( ) {  $ ~long long n , t , cont = 0 ;  $ ~cin >> n >> t ;  $ ~for ( int i = 1 ; i <= n ; i ++ ) {  $ ~~if ( t % i == 0 ) {  $ ~~~if ( t / i >= 1 && t / i <= n ) { cont ++ ; }  $ ~~}  $ ~}  $ ~cout << cont << endl ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~long long int n , x , i , cnt = 0 ;  $ ~cin >> n >> x ;  $ ~for ( i = 1 ; i <= n ; i ++ ) {  $ ~~if ( x % i == 0 && x <= ( i * n ) ) cnt ++ ;  $ ~}  $ ~cout << cnt << endl ;  $ }
int main ( ) {  $ ~int n , k ;  $ ~int a [ 105 ] ;  $ ~cin >> n >> k ;  $ ~int ans = 0 ;  $ ~for ( int i = 0 ; i < n ; i ++ ) {  $ ~~cin >> a [ i ] ;  $ ~~if ( a [ i ] == 0 ) break ;  $ ~~if ( k > 0 ) {  $ ~~~k -- ;  $ ~~~ans ++ ;  $ ~~} else if ( a [ i ] == a [ i - 1 ] )  $ ~~~ans ++ ;  $ ~~else  $ ~~~break ;  $ ~}  $ ~cout << ans << endl ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~int n , k ;  $ ~cin >> n >> k ;  $ ~int prev , next , cnt = 0 ;  $ ~cin >> prev ;  $ ~int total_cnt = 0 ;  $ ~if ( prev ) {  $ ~~total_cnt = 1 ;  $ ~~for ( int i = 1 ; i < n ; i ++ ) {  $ ~~~cin >> next ;  $ ~~~if ( ! next ) break ;  $ ~~~if ( prev != next ) {  $ ~~~~if ( total_cnt + 1 > k ) break ;  $ ~~~}  $ ~~~total_cnt ++ ;  $ ~~~prev = next ;  $ ~~}  $ ~}  $ ~cout << total_cnt << endl ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~int n , k , f = 1 , a , count = 0 , temp ;  $ ~cin >> n >> k ;  $ ~for ( int i = 0 ; i < n ; i ++ ) {  $ ~~cin >> a ;  $ ~~if ( f > k && temp != a )  $ ~~~break ;  $ ~~else if ( a > 0 )  $ ~~~count ++ ;  $ ~~temp = a ;  $ ~~f ++ ;  $ ~}  $ ~cout << count << endl ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~int i , n , m , x ;  $ ~cin >> n >> m ;  $ ~int a [ n ] ;  $ ~for ( i = 1 ; i <= n ; i ++ ) { cin >> a [ i ] ; }  $ ~x = 0 ;  $ ~for ( i = 1 ; i <= n ; i ++ ) {  $ ~~if ( ( a [ i ] >= a [ m ] ) && ( a [ i ] > 0 ) ) x ++ ;  $ ~}  $ ~cout << x << endl ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~int n , k , a [ 50 ] = { 0 } ;  $ ~cin >> n >> k ;  $ ~for ( int i = 0 ; i < n ; i ++ ) { cin >> a [ i ] ; }  $ ~if ( a [ k - 1 ] != 0 ) {  $ ~~while ( a [ k - 1 ] == a [ k ] ) { k ++ ; }  $ ~~cout << k << endl ;  $ ~} else {  $ ~~if ( k == 1 )  $ ~~~cout << 0 << endl ;  $ ~~else {  $ ~~~k -- ;  $ ~~~while ( a [ k - 1 ] == 0 ) k -- ;  $ ~~~cout << k << endl ;  $ ~~}  $ ~}  $ ~return 0 ;  $ }
int n , k , a , b ;  $ int main ( ) {  $ ~cin >> n >> k ;  $ ~for ( int i = 0 ; i < k ; i ++ ) {  $ ~~cin >> a ;  $ ~~if ( a == 0 ) {  $ ~~~cout << i << endl ;  $ ~~~return 0 ;  $ ~~}  $ ~}  $ ~for ( int i = k ; i < n ; ++ i ) {  $ ~~cin >> b ;  $ ~~if ( b != a ) {  $ ~~~cout << i << endl ;  $ ~~~return 0 ;  $ ~~}  $ ~}  $ ~cout << n << endl ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~int ara [ 10000 ] ;  $ ~int n , k ;  $ ~cin >> n >> k ;  $ ~int cnt = 0 ;  $ ~for ( int i = 0 ; i < n ; i ++ ) { cin >> ara [ i ] ; }  $ ~for ( int i = 0 ; i < n ; i ++ ) {  $ ~~if ( ara [ i ] >= ara [ k - 1 ] && ara [ i ] > 0 ) cnt ++ ;  $ ~}  $ ~cout << cnt << endl ;  $ }
int x [ 1000001 ] ;  $ int main ( ) {  $ ~int k , n , points = 0 ;  $ ~cin >> n >> k ;  $ ~for ( int i = 0 ; i < n ; i ++ ) { cin >> x [ i ] ; }  $ ~for ( int i = 0 ; i < n ; i ++ ) {  $ ~~if ( x [ i ] >= x [ k - 1 ] && x [ i ] != 0 ) points ++ ;  $ ~}  $ ~cout << points << endl ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~int n , k ;  $ ~cin >> n >> k ;  $ ~int a [ n ] ;  $ ~;  $ ~int i , t1 ;  $ ~for ( i = 0 ; i < n ; i ++ ) {  $ ~~cin >> a [ i ] ;  $ ~~if ( k == i + 1 ) t1 = a [ i ] ;  $ ~}  $ ~sort ( a , a + n , greater < int > ( ) ) ;  $ ~int c = 0 ;  $ ~for ( i = 0 ; i < n ; i ++ ) {  $ ~~if ( a [ i ] != 0 && a [ i ] >= t1 ) c ++ ;  $ ~}  $ ~if ( a [ 0 ] == 0 )  $ ~~cout << "0\n" ;  $ ~else  $ ~~cout << c << "\n" ;  $ }
int main ( ) {  $ ~int n , k , i , A [ 110 ] , c = 0 ;  $ ~cin >> n >> k ;  $ ~for ( i = 1 ; i <= n ; i ++ ) { cin >> A [ i ] ; }  $ ~for ( i = 1 ; i <= n ; i ++ ) {  $ ~~if ( A [ i ] >= A [ k ] && A [ i ] > 0 ) { c ++ ; }  $ ~}  $ ~cout << c << endl ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~int n , k , i , a [ 100 ] , cnt = 0 ;  $ ~cin >> n >> k ;  $ ~for ( i = 1 ; i <= n ; i ++ ) { cin >> a [ i ] ; }  $ ~for ( i = 1 ; i <= n ; i ++ ) {  $ ~~if ( a [ i ] >= a [ k ] && a [ i ] > 0 ) cnt ++ ;  $ ~}  $ ~cout << cnt << endl ;  $ }
int n , k , a [ 1000 ] = { } , ans = 0 ;  $ int main ( ) {  $ ~cin >> n >> k ;  $ ~for ( int i = 0 ; i < n ; i ++ ) { cin >> a [ i ] ; }  $ ~for ( int i = 0 ; i < n ; i ++ ) {  $ ~~if ( a [ i ] >= a [ k - 1 ] and a [ i ] > 0 ) { ans ++ ; }  $ ~}  $ ~cout << ans << endl ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~int a [ 101 ] , n , c , s = 0 ;  $ ~cin >> n >> c ;  $ ~for ( int i = 0 ; i < n ; i ++ ) cin >> a [ i ] ;  $ ~for ( int i = 0 ; i < n ; i ++ ) {  $ ~~if ( a [ i ] > 0 && a [ i ] >= a [ c - 1 ] ) s += 1 ;  $ ~}  $ ~cout << s << endl ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~int n , k ;  $ ~cin >> n >> k ;  $ ~int * a = new int [ n ] ;  $ ~int output = 0 ;  $ ~for ( int i = 0 ; i < n ; i ++ ) {  $ ~~cin >> a [ i ] ;  $ ~~if ( i <= ( k - 1 ) && a [ i ] > 0 )  $ ~~~output ++ ;  $ ~~else if ( i > ( k - 1 ) && a [ i ] > 0 && a [ i ] == a [ k - 1 ] )  $ ~~~output ++ ;  $ ~~else  $ ~~~break ;  $ ~}  $ ~cout << output << endl ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~int n , k , * arr , sum = 0 ;  $ ~cin >> n >> k ;  $ ~arr = new int [ n ] ;  $ ~for ( int i = 0 ; i < n ; i ++ ) { cin >> arr [ i ] ; }  $ ~for ( int i = 0 ; i < n ; i ++ ) {  $ ~~if ( arr [ k - 1 ] == 0 ) {  $ ~~~if ( arr [ i ] > arr [ k - 1 ] ) { sum += 1 ; }  $ ~~} else {  $ ~~~if ( arr [ i ] >= arr [ k - 1 ] ) sum += 1 ;  $ ~~}  $ ~}  $ ~cout << sum << endl ;  $ ~return 0 ;  $ }
int x , y , ar [ 100 ] ;  $ int main ( ) {  $ ~int c = 0 ;  $ ~cin >> x >> y ;  $ ~for ( int i = 0 ; i < x ; i ++ ) {  $ ~~cin >> ar [ i ] ;  $ ~~if ( ar [ i ] >= ar [ y - 1 ] && ar [ i ] > 0 ) c ++ ;  $ ~}  $ ~cout << c << endl ;  $ ~return 0 ;  $ }
long long n , k ;  $ int main ( ) {  $ ~cin >> n >> k ;  $ ~if ( k % n == 0 )  $ ~~cout << k / n << endl ;  $ ~else  $ ~~cout << k / n + 1 << endl ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~long long n , k ;  $ ~while ( cin >> n >> k ) {  $ ~~long long ans = k / n ;  $ ~~if ( k % n ) ans ++ ;  $ ~~cout << ans << endl ;  $ ~}  $ ~return 0 ;  $ }
int main ( ) {  $ ~long long n , m ;  $ ~cin >> n >> m ;  $ ~if ( m % n != 0 )  $ ~~cout << m / n + 1 << endl ;  $ ~else  $ ~~cout << m / n << endl ;  $ }
int main ( ) {  $ ~long long n , k , h ;  $ ~cin >> n >> k ;  $ ~if ( k % n == 0 )  $ ~~cout << k / n << endl ;  $ ~else  $ ~~cout << k / n + 1 << endl ;  $ }
int main ( ) {  $ ~long long int n , m ;  $ ~cin >> n >> m ;  $ ~if ( m <= n ) {  $ ~~cout << "1" << endl ;  $ ~} else {  $ ~~if ( m % n == 0 ) {  $ ~~~cout << m / n << endl ;  $ ~~} else {  $ ~~~cout << m / n + 1 << endl ;  $ ~~}  $ ~}  $ ~return 0 ;  $ }
int main ( ) {  $ ~long long int n , k , h ;  $ ~cin >> n >> k ;  $ ~if ( k <= n )  $ ~~h = 1 ;  $ ~else {  $ ~~if ( ( k % n ) != 0 )  $ ~~~h = k / n + 1 ;  $ ~~else  $ ~~~h = k / n ;  $ ~}  $ ~cout << h << endl ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~long long n , k ;  $ ~cin >> n >> k ;  $ ~long long counts = 0 ;  $ ~if ( k % n ) counts ++ ;  $ ~counts += k / n ;  $ ~cout << counts << endl ;  $ }
const int MAXN = 1e4 + 20 ;  $ const int INF = 1e9 + 100 ;  $ const int MOD = 1e9 ;  $ int main ( ) {  $ ~long long n , k ;  $ ~while ( cin >> n >> k ) { cout << ( k + n - 1 ) / n << endl ; }  $ }
int main ( ) {  $ ~long long int n , k , h ;  $ ~cin >> n >> k ;  $ ~h = ( k / n ) ;  $ ~if ( h != 0 ) {  $ ~~if ( k % n == 0 ) {  $ ~~~cout << h << endl ;  $ ~~} else {  $ ~~~cout << h + 1 << endl ;  $ ~~}  $ ~} else {  $ ~~cout << 1 << endl ;  $ ~}  $ ~return 0 ;  $ }
int main ( ) {  $ ~long long n , k ;  $ ~while ( cin >> n >> k ) {  $ ~~if ( k % n == 0 )  $ ~~~cout << k / n << endl ;  $ ~~else  $ ~~~cout << k / n + 1 << endl ;  $ ~}  $ ~return 0 ;  $ }
int main ( ) {  $ ~long long n , k ;  $ ~while ( cin >> n >> k ) {  $ ~~if ( k % n == 0 )  $ ~~~cout << k / n << endl ;  $ ~~else  $ ~~~cout << k / n + 1 << endl ;  $ ~}  $ ~return 0 ;  $ }
int main ( ) {  $ ~long long int n , k , h ;  $ ~while ( cin >> n >> k ) {  $ ~~if ( n == 0 || k == 0 ) break ;  $ ~~h = k / n ;  $ ~~if ( k % n == 0 )  $ ~~~cout << h << endl ;  $ ~~else  $ ~~~cout << h + 1 << endl ;  $ ~}  $ ~return 0 ;  $ }
int main ( ) {  $ ~long long n , k ;  $ ~cin >> n >> k ;  $ ~if ( n >= k )  $ ~~cout << "1" << endl ;  $ ~else if ( k % n == 0 )  $ ~~cout << k / n << endl ;  $ ~else  $ ~~cout << k / n + 1 << endl ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~long long n , k ;  $ ~cin >> n >> k ;  $ ~if ( n >= k )  $ ~~cout << 1 << endl ;  $ ~else {  $ ~~if ( k % n == 0 )  $ ~~~cout << k / n << endl ;  $ ~~else  $ ~~~cout << k / n + 1 << endl ;  $ ~}  $ ~return 0 ;  $ }
int main ( ) {  $ ~long long n , s ;  $ ~cin >> n >> s ;  $ ~cout << ( s / n ) + ( s % n != 0 ) << endl ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~int a ;  $ ~long long n , k ;  $ ~cin >> n >> k ;  $ ~if ( k <= n ) {  $ ~~cout << 1 << endl ;  $ ~} else {  $ ~~if ( k % n == 0 ) {  $ ~~~cout << k / n << endl ;  $ ~~} else {  $ ~~~cout << k / n + 1 << endl ;  $ ~~}  $ ~}  $ ~return 0 ;  $ }
long long n , k ;  $ int main ( ) {  $ ~while ( cin >> n >> k ) {  $ ~~if ( k <= n )  $ ~~~cout << 1 << endl ;  $ ~~else if ( k % n == 0 )  $ ~~~cout << k / n << endl ;  $ ~~else if ( k % n != 0 )  $ ~~~cout << k / n + 1 << endl ;  $ ~}  $ }
long long n , k ;  $ long long cl ( long long n , long long k ) {  $ ~if ( n % k == 0 ) return n / k ;  $ ~return n / k + 1 ;  $ }  $ int main ( ) {  $ ~cin >> n >> k ;  $ ~cout << cl ( k , n ) << "\n" ;  $ ~return 0 ;  $ }
long long n , k ;  $ int main ( ) {  $ ~while ( cin >> n >> k ) {  $ ~~long long ans = k / n ;  $ ~~if ( k % n ) ans ++ ;  $ ~~cout << ans << endl ;  $ ~}  $ ~return 0 ;  $ }
int main ( ) {  $ ~long long n , m ;  $ ~cin >> n >> m ;  $ ~if ( n >= m )  $ ~~cout << 1 << endl ;  $ ~else {  $ ~~if ( m % n == 0 )  $ ~~~cout << m / n << endl ;  $ ~~else  $ ~~~cout << m / n + 1 << endl ;  $ ~}  $ ~return 0 ;  $ }
int main ( ) {  $ ~long long n , k ;  $ ~for ( ; cin >> n >> k ; ) {  $ ~~if ( k % n == 0 )  $ ~~~cout << k / n << endl ;  $ ~~else  $ ~~~cout << k / n + 1 << endl ;  $ ~}  $ ~return 0 ;  $ }
int main ( ) {  $ ~int n ;  $ ~cin >> n ;  $ ~if ( ( n % 3 ) == 1 ) n -- ;  $ ~if ( ( n % 3 ) == 2 ) n ++ ;  $ ~n /= 3 ;  $ ~int feet = n / 12 ;  $ ~int inch = n % 12 ;  $ ~cout << feet << " " << inch << endl ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~int n ;  $ ~cin >> n ;  $ ~int ans1 = n / 3 ;  $ ~n %= 3 ;  $ ~if ( n >= 2 ) { ans1 ++ ; }  $ ~int ans2 = ans1 / 12 ;  $ ~ans1 %= 12 ;  $ ~cout << ans2 << " " << ans1 << endl ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~int n ;  $ ~cin >> n ;  $ ~int inches = n / 3 ;  $ ~if ( n % 3 == 2 ) inches += 1 ;  $ ~cout << inches / 12 << " " << inches % 12 << endl ;  $ }
int main ( ) {  $ ~int n ;  $ ~cin >> n ;  $ ~int k = ( n + 1 ) / 3 ;  $ ~cout << k / 12 << " " << k % 12 << endl ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~int n ;  $ ~cin >> n ;  $ ~int a = n / 36 ;  $ ~int b = ( n - 36 * a ) / 3 ;  $ ~int c = n - 36 * a - b * 3 ;  $ ~if ( c == 2 ) b ++ ;  $ ~if ( b == 12 ) {  $ ~~a ++ ;  $ ~~b = 0 ;  $ ~}  $ ~cout << a << " " << b << endl ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~int n ;  $ ~cin >> n ;  $ ~cout << ( n + 1 ) / 36 << " " ;  $ ~n %= 36 ;  $ ~if ( ( n + 1 ) / 36 <= n / 36 )  $ ~~cout << ( n + 1 ) / 3 << endl ;  $ ~else  $ ~~cout << 0 << endl ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~int n ;  $ ~cin >> n ;  $ ~if ( ( n + 1 ) % 36 == 0 ) n ++ ;  $ ~int ft = n / 36 ;  $ ~n %= 36 ;  $ ~int in ;  $ ~if ( n % 3 == 0 || ( n - 1 ) % 3 == 0 )  $ ~~in = n / 3 ;  $ ~else  $ ~~in = n / 3 + 1 ;  $ ~cout << ft << ' ' << in << '\n' ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~int n ;  $ ~cin >> n ;  $ ~int inches = n / 3 + ( n % 3 > 1 ) ;  $ ~cout << inches / 12 << " " << inches % 12 << "\n" ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~int n ;  $ ~cin >> n ;  $ ~int c = n / 3 ;  $ ~if ( n % 3 == 2 ) { c += 1 ; }  $ ~cout << c / 12 << ' ' << c % 12 << endl ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~int n , foot , inch , x ;  $ ~cin >> n ;  $ ~foot = n / 36 ;  $ ~x = n % 36 ;  $ ~if ( x == 35 ) {  $ ~~foot ++ ;  $ ~~inch = 0 ;  $ ~~cout << foot << ' ' << inch << endl ;  $ ~} else {  $ ~~inch = x / 3 ;  $ ~~if ( x % 3 == 2 ) inch ++ ;  $ ~~cout << foot << ' ' << inch << endl ;  $ ~}  $ ~return 0 ;  $ }
int main ( ) {  $ ~int n ;  $ ~cin >> n ;  $ ~int k = ( n + 1 ) / 3 ;  $ ~cout << k / 12 << ' ' << k % 12 << endl ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~long long m ;  $ ~double n ;  $ ~cin >> n ;  $ ~m = ( long long ) round ( n / 3 ) ;  $ ~cout << m / 12 << " " << m % 12 << endl ;  $ }
int main ( ) {  $ ~long long n ;  $ ~cin >> n ;  $ ~long long ft = ( n / 36 ) , cm = n - ( 36 * ft ) ;  $ ~long long in = cm / 3 ;  $ ~if ( cm % 3 == 2 ) in ++ ;  $ ~if ( in == 12 ) ft ++ , in = 0 ;  $ ~cout << ft << " " << in << endl ;  $ }
int main ( ) {  $ ~int n ;  $ ~while ( cin >> n ) {  $ ~~int inches = ( n + 1 ) / 3 ;  $ ~~int foot = ( inches ) / 12 ;  $ ~~cout << foot << " " ;  $ ~~if ( inches - foot * 12 <= 0 ) {  $ ~~~cout << "0" << endl ;  $ ~~} else  $ ~~~cout << inches - foot * 12 << endl ;  $ ~}  $ }
int main ( ) {  $ ~int n , x , y ;  $ ~cin >> n ;  $ ~x = n / 36 ;  $ ~n = n - x * 36 ;  $ ~if ( n % 3 == 2 )  $ ~~y = n / 3 + 1 ;  $ ~else  $ ~~y = n / 3 ;  $ ~if ( y == 12 )  $ ~~cout << x + 1 << " " << 0 << endl ;  $ ~else  $ ~~cout << x << " " << y << endl ;  $ }
int main ( ) {  $ ~int n ;  $ ~cin >> n ;  $ ~int inch = 0 ;  $ ~int feet = n / 36 ;  $ ~n -= ( n / 36 ) * 36 ;  $ ~if ( n == 35 )  $ ~~++ feet ;  $ ~else {  $ ~~inch = n / 3 ;  $ ~~n -= ( n / 3 ) * 3 ;  $ ~~if ( n == 2 ) ++ inch ;  $ ~}  $ ~cout << feet << " " << inch << endl ;  $ ~return 0 ;  $ }
const int INF = 0 x3f3f3f3f ;  $ int main ( ) {  $ ~long long i , j , k ;  $ ~long long n , m ;  $ ~cin >> n ;  $ ~k = n % 3 ;  $ ~n /= 3 ;  $ ~if ( k == 2 ) n ++ ;  $ ~cout << n / 12 << ' ' << n % 12 << endl ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~int n ;  $ ~cin >> n ;  $ ~int m = n / 36 ;  $ ~int q = ( n % 36 ) / 3 ;  $ ~int mo = ( n % 36 ) % 3 ;  $ ~if ( mo == 2 ) q += 1 ;  $ ~if ( q == 12 ) q = 0 , m ++ ;  $ ~cout << m << " " << q << endl ;  $ }
int main ( ) {  $ ~long long n , inches , feets ;  $ ~cin >> n ;  $ ~inches = n / 3 ;  $ ~if ( n % 3 == 2 ) inches += 1 ;  $ ~feets = inches / 12 ;  $ ~inches -= feets * 12 ;  $ ~cout << feets << " " << inches << endl ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~int n , ft , inch , r ;  $ ~cin >> n ;  $ ~ft = n / 36 ;  $ ~inch = ( n % 36 ) / 3 ;  $ ~r = ( n % 36 ) % 3 ;  $ ~if ( r > 1 ) inch ++ ;  $ ~if ( inch == 12 ) {  $ ~~ft ++ ;  $ ~~inch = 0 ;  $ ~}  $ ~cout << ft << " " << inch << endl ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~map < int , int > m ;  $ ~int t , x , c = 1 , y = 1 ;  $ ~cin >> t ;  $ ~bool hard = false ;  $ ~for ( int i = 0 ; i < t ; i ++ ) {  $ ~~cin >> x ;  $ ~~if ( m [ x ] >= c ) {  $ ~~~m [ x ] ++ ;  $ ~~~if ( m [ x ] > y ) y = m [ x ] ;  $ ~~} else {  $ ~~~m [ x ] = c ;  $ ~~~if ( m [ x ] > y ) y = m [ x ] ;  $ ~~}  $ ~}  $ ~cout << t - y << endl ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~int n ;  $ ~cin >> n ;  $ ~int temp , j = 0 , d = 0 , t = 0 ;  $ ~for ( int i = 0 ; i < n ; i ++ ) {  $ ~~cin >> temp ;  $ ~~if ( temp == 1 ) {  $ ~~~j ++ ;  $ ~~} else if ( temp == 2 ) {  $ ~~~d ++ ;  $ ~~} else  $ ~~~t ++ ;  $ ~}  $ ~temp = max ( max ( j , t ) , max ( j , d ) ) ;  $ ~cout << n - temp << endl ;  $ ~return 0 ;  $ }
int v [ 5 ] ;  $ int main ( ) {  $ ~int n ;  $ ~cin >> n ;  $ ~for ( int i = 1 ; i <= n ; i ++ ) {  $ ~~int x ;  $ ~~cin >> x ;  $ ~~v [ x ] ++ ;  $ ~}  $ ~int maxi = max ( v [ 1 ] , max ( v [ 2 ] , v [ 3 ] ) ) ;  $ ~cout << n - maxi << endl ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~int n ;  $ ~cin >> n ;  $ ~int a [ 1000005 ] ;  $ ~int n1 , n2 , n3 ;  $ ~for ( int i = 0 ; i < n ; i ++ ) {  $ ~~cin >> a [ i ] ;  $ ~~if ( a [ i ] == 1 )  $ ~~~n1 ++ ;  $ ~~else if ( a [ i ] == 2 )  $ ~~~n2 ++ ;  $ ~~else  $ ~~~n3 ++ ;  $ ~}  $ ~if ( ( n1 >= n2 ) && ( n1 >= n3 ) )  $ ~~cout << n - n1 << endl ;  $ ~else if ( ( n2 >= n1 ) && ( n2 >= n3 ) )  $ ~~cout << n - n2 << endl ;  $ ~else  $ ~~cout << n - n3 << endl ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~int num [ 4 ] = { 0 } ;  $ ~int n ;  $ ~cin >> n ;  $ ~for ( int i = 1 ; i <= n ; i ++ ) {  $ ~~int tmp ;  $ ~~cin >> tmp ;  $ ~~num [ tmp ] ++ ;  $ ~}  $ ~if ( num [ 1 ] >= num [ 2 ] && num [ 1 ] >= num [ 3 ] )  $ ~~cout << num [ 2 ] + num [ 3 ] << endl ;  $ ~else if ( num [ 2 ] >= num [ 1 ] && num [ 2 ] >= num [ 3 ] )  $ ~~cout << num [ 1 ] + num [ 3 ] << endl ;  $ ~else  $ ~~cout << num [ 1 ] + num [ 2 ] << endl ;  $ ~return 0 ;  $ }
int freq [ 3 ] ;  $ int main ( ) {  $ ~int a , b , mx ;  $ ~cin >> a ;  $ ~for ( int i = 0 ; i < a ; i ++ ) {  $ ~~cin >> b ;  $ ~~freq [ b - 1 ] ++ ;  $ ~}  $ ~mx = max ( max ( freq [ 0 ] , freq [ 1 ] ) , freq [ 2 ] ) ;  $ ~cout << a - mx << endl ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~int n ;  $ ~cin >> n ;  $ ~int a = 0 , b = 0 , c = 0 ;  $ ~for ( int i = 0 ; i < n ; i ++ ) {  $ ~~int x ;  $ ~~cin >> x ;  $ ~~if ( x == 1 ) a ++ ;  $ ~~if ( x == 2 ) b ++ ;  $ ~~if ( x == 3 ) c ++ ;  $ ~}  $ ~if ( a >= b && a >= c )  $ ~~cout << b + c << endl ;  $ ~else if ( b >= a && b >= c )  $ ~~cout << a + c << endl ;  $ ~else if ( c >= a && c >= b )  $ ~~cout << a + b << endl ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~int n ;  $ ~cin >> n ;  $ ~int freq [ 3 ] = { } ;  $ ~for ( int i = 0 ; i < n ; i ++ ) {  $ ~~int x ;  $ ~~cin >> x ;  $ ~~freq [ x - 1 ] ++ ;  $ ~}  $ ~int m = max ( freq [ 0 ] , max ( freq [ 1 ] , freq [ 2 ] ) ) ;  $ ~cout << n - m << endl ;  $ }
int main ( ) {  $ ~int n , i , j , k , x ;  $ ~vector < int > ct ( 4 , 0 ) ;  $ ~cin >> n ;  $ ~for ( i = 0 ; i < n ; i ++ ) {  $ ~~cin >> x ;  $ ~~ct [ x ] ++ ;  $ ~}  $ ~cout << n - max ( ct [ 1 ] , max ( ct [ 2 ] , ct [ 3 ] ) ) << "\n" ;  $ ~;  $ ~return 0 ;  $ }
int a [ 11 ] ;  $ int main ( ) {  $ ~int n , i , x ;  $ ~cin >> n ;  $ ~for ( i = 1 ; i <= n ; i ++ ) {  $ ~~cin >> x ;  $ ~~a [ x ] ++ ;  $ ~}  $ ~int max = - 1 ;  $ ~for ( i = 1 ; i <= 3 ; i ++ ) {  $ ~~if ( a [ i ] > max ) max = a [ i ] ;  $ ~}  $ ~cout << n - max << endl ;  $ }
int main ( ) {  $ ~int n ;  $ ~cin >> n ;  $ ~int a = 0 , b = 0 , c = 0 ;  $ ~for ( int i = 0 ; i < n ; i ++ ) {  $ ~~int x ;  $ ~~cin >> x ;  $ ~~if ( x == 1 ) a ++ ;  $ ~~if ( x == 2 ) b ++ ;  $ ~~if ( x == 3 ) c ++ ;  $ ~}  $ ~if ( a >= b && a >= c )  $ ~~cout << b + c << endl ;  $ ~else if ( b >= a && b >= c )  $ ~~cout << a + c << endl ;  $ ~else if ( c >= a && c >= b )  $ ~~cout << a + b << endl ;  $ ~return 0 ;  $ }
int a [ 1000005 ] ;  $ int max ( int a , int b ) {  $ ~return a > b ? a : b ;  $ }  $ int main ( ) {  $ ~int n ;  $ ~cin >> n ;  $ ~int x = 0 , y = 0 , z = 0 ;  $ ~for ( int i = 0 ; i < n ; i ++ ) {  $ ~~cin >> a [ i ] ;  $ ~~if ( a [ i ] == 1 ) { x ++ ; }  $ ~~if ( a [ i ] == 2 ) { y ++ ; }  $ ~~if ( a [ i ] == 3 ) { z ++ ; }  $ ~}  $ ~cout << x + y + z - max ( max ( x , y ) , z ) << endl ;  $ ~return 0 ;  $ }
int num [ 4 ] ;  $ int main ( ) {  $ ~int n ;  $ ~cin >> n ;  $ ~for ( int i = 0 ; i < n ; i ++ ) {  $ ~~int a ;  $ ~~cin >> a ;  $ ~~num [ a ] ++ ;  $ ~}  $ ~int max_num = - 1 ;  $ ~for ( int i = 1 ; i <= 3 ; i ++ ) {  $ ~~if ( num [ i ] > max_num ) { max_num = num [ i ] ; }  $ ~}  $ ~cout << n - max_num << endl ;  $ }
int A [ 4 ] ;  $ int main ( ) {  $ ~int n , inp ;  $ ~cin >> n ;  $ ~while ( cin >> inp ) ++ A [ inp ] ;  $ ~cout << n - max ( A [ 1 ] , max ( A [ 2 ] , A [ 3 ] ) ) << endl ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~long long n , a ;  $ ~cin >> n ;  $ ~if ( n % 2 == 0 )  $ ~~a = n / 2 ;  $ ~else  $ ~~a = ( ( n + 1 ) / 2 ) * ( - 1 ) ;  $ ~cout << a << endl ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~long long n ;  $ ~cin >> n ;  $ ~if ( n % 2 == 0 ) {  $ ~~cout << n / 2 << endl ;  $ ~} else {  $ ~~cout << ( - n - 1 ) / 2 << endl ;  $ ~}  $ ~return 0 ;  $ }
long long int MIN ( long long int a , long long int b ) {  $ ~if ( a > b )  $ ~~return b ;  $ ~else  $ ~~return a ;  $ }  $ long long int MAX ( long long int a , long long int b ) {  $ ~if ( a > b )  $ ~~return a ;  $ ~else  $ ~~return b ;  $ }  $ long long int MOD ( long long int x ) {  $ ~if ( x >= 0 )  $ ~~return x ;  $ ~else  $ ~~return - x ;  $ }  $ int main ( ) {  $ ~long long int n ;  $ ~cin >> n ;  $ ~if ( n % 2 == 0 ) {  $ ~~cout << n / 2 << endl ;  $ ~} else {  $ ~~long long int d = n / 2 ;  $ ~~d -= n ;  $ ~~cout << d << endl ;  $ ~}  $ ~return 0 ;  $ }
int main ( ) {  $ ~long long n , a ;  $ ~cin >> n ;  $ ~a = n / 2 ;  $ ~if ( n % 2 == 0 )  $ ~~cout << a << endl ;  $ ~else  $ ~~cout << a - n << endl ;  $ }
int main ( ) {  $ ~long long a , b = 0 ;  $ ~cin >> a ;  $ ~int i ;  $ ~if ( a % 2 != 0 ) {  $ ~~i = - 1 ;  $ ~} else {  $ ~~i = 0 ;  $ ~}  $ ~b = a / 2 * powl ( - 1 , a % 2 ) + i ;  $ ~cout << b << endl ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~long long n ;  $ ~cin >> n ;  $ ~if ( n % 2 == 0 )  $ ~~cout << n / 2 << endl ;  $ ~else  $ ~~cout << - ( n + 1 ) / 2 << endl ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~long long int n ;  $ ~cin >> n ;  $ ~if ( n % 2 == 0 )  $ ~~cout << n / 2 << endl ;  $ ~else  $ ~~cout << "-" << ( n + 1 ) / 2 << endl ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~long long n , a ;  $ ~cin >> n ;  $ ~if ( n % 2 == 0 )  $ ~~a = n / 2 ;  $ ~else  $ ~~a = ( ( n + 1 ) / 2 ) * ( - 1 ) ;  $ ~cout << a << endl ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~long long int n ;  $ ~cin >> n ;  $ ~if ( n % 2 == 0 ) {  $ ~~cout << n / 2 << endl ;  $ ~~return 0 ;  $ ~} else if ( n == 1 ) {  $ ~~cout << "-1\n" ;  $ ~~return 0 ;  $ ~}  $ ~long long int div ;  $ ~div = n / 2 ;  $ ~n = ( n * ( - 1 ) ) + div ;  $ ~cout << n << endl ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~long long int n = 0 ;  $ ~cin >> n ;  $ ~if ( n % 2 == 0 )  $ ~~cout << n / 2 << endl ;  $ ~else  $ ~~cout << - ( ( n + 1 ) / 2 ) << endl ;  $ }
int main ( ) {  $ ~long long int n ;  $ ~cin >> n ;  $ ~if ( ( n % 2 ) == 0 )  $ ~~cout << n / 2 << endl ;  $ ~else  $ ~~cout << ( n / 2 ) - n << endl ;  $ ~return 0 ;  $ }
long long f ( long long ) ;  $ int main ( ) {  $ ~long long n ;  $ ~cin >> n ;  $ ~f ( n ) ;  $ }  $ long long f ( long long n ) {  $ ~if ( n % 2 == 0 )  $ ~~cout << ( n / 2 ) << endl ;  $ ~else  $ ~~cout << ( n / 2 - n ) << endl ;  $ ~return 0 ;  $ }
int dx [ ] = { 1 , 0 , - 1 , 0 , 1 , 1 , - 1 , - 1 } ;  $ int dy [ ] = { 0 , 1 , 0 , - 1 , 1 , - 1 , 1 , - 1 } ;  $ void fast ( ) { }  $ const long long md = 1e9 + 7 ;  $ int main ( ) {  $ ~fast ( ) ;  $ ~long long n ;  $ ~cin >> n ;  $ ~if ( n % 2 == 0 )  $ ~~cout << n / 2 << "\n" ;  $ ~else  $ ~~cout << - ( n + 1 ) / 2 << "\n" ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~long long n ;  $ ~cin >> n ;  $ ~if ( n % 2 == 0 )  $ ~~cout << n / 2 << endl ;  $ ~else  $ ~~cout << - ( n + 1 ) / 2 << endl ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~long long n ;  $ ~cin >> n ;  $ ~long long chk = 0 ;  $ ~chk = n / 2 ;  $ ~if ( chk * 2 == n )  $ ~~cout << chk ;  $ ~else  $ ~~cout << chk - n ;  $ ~cout << endl ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~long long int n ;  $ ~cin >> n ;  $ ~if ( n % 2 == 0 ) {  $ ~~cout << n / 2 << endl ;  $ ~} else {  $ ~~long long int ans = ( n - 1 ) / 2 ;  $ ~~cout << - 1 - ans << endl ;  $ ~}  $ ~return 0 ;  $ }
int main ( ) {  $ ~long long n , y ;  $ ~double x ;  $ ~cin >> n ;  $ ~if ( n % 2 == 0 && n != 0 ) { cout << n / 2 << endl ; }  $ ~if ( n % 2 != 0 && n != 0 ) {  $ ~~x = ceil ( ( 1 . * n ) / 2 ) ;  $ ~~y = x ;  $ ~~cout << - y << endl ;  $ ~}  $ }
int main ( ) {  $ ~long long n ;  $ ~cin >> n ;  $ ~long long k1 = ( ( 2 + ( n % 2 == 1 ? n - 1 : n ) ) / 2 ) * ( n / 2 ) ;  $ ~long long k2 = ( ( 1 + ( n % 2 == 1 ? n : n - 1 ) ) / 2 ) * ( ( n + 1 ) / 2 ) ;  $ ~cout << k1 - k2 << '\n' ;  $ }
int main ( ) {  $ ~char num ;  $ ~int n = 0 ;  $ ~while ( num != '\n' ) {  $ ~~num = getchar ( ) ;  $ ~~if ( n == 0 && num == '9' ) {  $ ~~~cout << num ;  $ ~~} else if ( num >= '5' ) {  $ ~~~cout << '9' - num ;  $ ~~} else  $ ~~~cout << num ;  $ ~~n ++ ;  $ ~}  $ ~return 0 ;  $ }
int check ( int x , int y ) {  $ ~if ( x <= y ) return x ;  $ ~return y ;  $ }  $ int main ( ) {  $ ~string s , p = "" ;  $ ~int i , j ;  $ ~cin >> s ;  $ ~p = s ;  $ ~for ( i = s . size ( ) - 1 ; i > 0 ; i -- ) {  $ ~~j = check ( s [ i ] - '0' , 9 - ( s [ i ] - '0' ) ) ;  $ ~~p [ i ] = ( char ) ( j + '0' ) ;  $ ~}  $ ~j = 9 - ( s [ 0 ] - '0' ) ;  $ ~if ( j ) {  $ ~~j = check ( s [ 0 ] - '0' , 9 - ( s [ 0 ] - '0' ) ) ;  $ ~~p [ 0 ] = ( char ) ( j + '0' ) ;  $ ~}  $ ~cout << p << endl ;  $ }
int main ( ) {  $ ~string s ;  $ ~int i ;  $ ~while ( cin >> s ) {  $ ~~i = 0 ;  $ ~~if ( s [ 0 ] == '9' ) i ++ ;  $ ~~for ( ; i < s . size ( ) ; i ++ ) {  $ ~~~if ( s [ i ] > '4' ) { s [ i ] = '9' - s [ i ] + '0' ; }  $ ~~}  $ ~~cout << s << endl ;  $ ~}  $ ~return 0 ;  $ }
int main ( ) {  $ ~string s ;  $ ~cin >> s ;  $ ~for ( int i = 0 ; i < s . length ( ) ; i ++ ) {  $ ~~if ( s [ i ] - '0' >= 5 ) {  $ ~~~int x = 9 - ( s [ i ] - '0' ) ;  $ ~~~s [ i ] = x + '0' ;  $ ~~}  $ ~~if ( s [ 0 ] == '0' ) { s [ 0 ] = '9' ; }  $ ~}  $ ~cout << s << endl ;  $ }
int main ( ) {  $ ~string s ;  $ ~cin >> s ;  $ ~for ( int i = 0 ; i < s . size ( ) ; i ++ ) {  $ ~~if ( i == 0 && s [ i ] == '9' ) continue ;  $ ~~if ( s [ i ] >= '5' ) { s [ i ] = '9' - s [ i ] + '0' ; }  $ ~}  $ ~cout << s << endl ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~string s ;  $ ~cin >> s ;  $ ~for ( long long int i = 0 ; i < s . length ( ) ; i ++ ) {  $ ~~if ( s [ i ] == '9' ) {  $ ~~~if ( i == 0 )  $ ~~~~continue ;  $ ~~~else  $ ~~~~s [ i ] = '0' ;  $ ~~~continue ;  $ ~~}  $ ~~if ( ( s [ i ] - '0' ) > 4 ) s [ i ] = 48 + 9 - ( s [ i ] - '0' ) ;  $ ~}  $ ~cout << s << "\n" ;  $ }
int main ( ) {  $ ~string s ;  $ ~cin >> s ;  $ ~unsigned long long int i = 0 ;  $ ~if ( s [ i ] == '9' ) {  $ ~~cout << s [ i ] ;  $ ~~i ++ ;  $ ~}  $ ~for ( ; i < s . length ( ) ; i ++ ) { cout << min ( s [ i ] - '0' , 9 - ( s [ i ] - '0' ) ) ; }  $ ~cout << endl ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~string numero ;  $ ~cin >> numero ;  $ ~int n = numero . size ( ) ;  $ ~for ( int i = 0 ; i <= n - 1 ; ++ i ) {  $ ~~int x = numero [ i ] - '0' ;  $ ~~if ( i == 0 ) {  $ ~~~if ( 5 <= x and x <= 8 ) { numero [ i ] = ( char ) ( '0' + 9 - x ) ; }  $ ~~} else if ( 5 <= x ) {  $ ~~~numero [ i ] = ( char ) ( '0' + 9 - x ) ;  $ ~~}  $ ~}  $ ~cout << numero << endl ;  $ ~return 0 ;  $ }
int a [ 100010 ] ;  $ long long cnt [ 100010 ] ;  $ int main ( ) {  $ ~char c [ 155 ] ;  $ ~int num [ 155 ] ;  $ ~cin >> c ;  $ ~int len = strlen ( c ) ;  $ ~for ( int i = 0 ; i < len ; i ++ ) {  $ ~~if ( c [ i ] >= '5' && c [ i ] <= '9' ) {  $ ~~~if ( ( c [ i ] == '9' && i == 0 ) )  $ ~~~~num [ i ] = c [ i ] - '0' ;  $ ~~~else  $ ~~~~num [ i ] = 9 - ( c [ i ] - '0' ) ;  $ ~~} else  $ ~~~num [ i ] = c [ i ] - '0' ;  $ ~}  $ ~for ( int i = 0 ; i < len ; i ++ ) cout << num [ i ] ;  $ ~cout << endl ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~char x [ 20 ] ;  $ ~int ok = 1 ;  $ ~while ( cin >> x ) {  $ ~~int len = strlen ( x ) ;  $ ~~for ( int i = 0 ; i < len ; i ++ ) {  $ ~~~if ( i == 0 ) {  $ ~~~~if ( x [ i ] == '9' )  $ ~~~~~cout << x [ i ] ;  $ ~~~~else if ( x [ i ] >= '5' )  $ ~~~~~cout << '9' - x [ i ] ;  $ ~~~~else  $ ~~~~~cout << x [ i ] ;  $ ~~~} else {  $ ~~~~if ( x [ i ] >= '5' )  $ ~~~~~cout << '9' - x [ i ] ;  $ ~~~~else  $ ~~~~~cout << x [ i ] ;  $ ~~~}  $ ~~}  $ ~~cout << endl ;  $ ~}  $ ~return 0 ;  $ }
int main ( ) {  $ ~string str ;  $ ~cin >> str ;  $ ~for ( int i = 0 ; i < str . size ( ) ; i ++ ) {  $ ~~if ( i == 0 && str [ i ] == '9' ) { continue ; }  $ ~~if ( str [ i ] > '4' ) { str [ i ] = '9' - str [ i ] + 48 ; }  $ ~}  $ ~cout << str << endl ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~string s ;  $ ~cin >> s ;  $ ~for ( int i = 0 ; i < s . length ( ) ; i ++ ) {  $ ~~if ( s [ i ] > '9' - s [ i ] + '0' ) s [ i ] = '9' - s [ i ] + '0' ;  $ ~~if ( s [ 0 ] == '0' ) s [ 0 ] = '9' ;  $ ~}  $ ~cout << s << endl ;  $ }
int main ( ) {  $ ~string a ;  $ ~cin >> a ;  $ ~for ( int i = 0 ; i < a . size ( ) ; i ++ ) {  $ ~~if ( a [ i ] >= '5' ) a [ i ] = 9 - ( a [ i ] - '0' ) + '0' ;  $ ~}  $ ~if ( a [ 0 ] == '0' ) {  $ ~~cout << 9 ;  $ ~} else  $ ~~cout << a [ 0 ] ;  $ ~for ( int j = 1 ; j < a . size ( ) ; j ++ ) { cout << a [ j ] ; }  $ ~cout << endl ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~string s , output ;  $ ~cin >> s ;  $ ~for ( int i = 0 ; i < s . length ( ) ; i ++ ) {  $ ~~int temp = s [ i ] - 48 ;  $ ~~char tempChar = '\0' ;  $ ~~if ( ( i == 0 && temp == 9 ) || temp < 5 )  $ ~~~output . push_back ( s [ i ] ) ;  $ ~~else {  $ ~~~tempChar = ( 9 - temp ) + 48 ;  $ ~~~output . push_back ( tempChar ) ;  $ ~~}  $ ~}  $ ~cout << output << endl ;  $ ~return 0 ;  $ }
int dp [ 2505 ] [ 2505 ] ;  $ int n , m ;  $ int cntt ( int k ) {  $ ~int k1 = k - 1 , res = 0 ;  $ ~for ( int i = 1 ; i <= n ; i += k ) {  $ ~~for ( int j = 1 ; j <= m ; j += k ) {  $ ~~~int cnt = 0 ;  $ ~~~cnt += dp [ min ( i + k1 , n ) ] [ min ( j + k1 , m ) ] ;  $ ~~~cnt -= dp [ i - 1 ] [ min ( j + k1 , m ) ] ;  $ ~~~cnt -= dp [ min ( i + k1 , n ) ] [ j - 1 ] ;  $ ~~~cnt += dp [ i - 1 ] [ j - 1 ] ;  $ ~~~res += min ( cnt , k * k - cnt ) ;  $ ~~}  $ ~}  $ ~return res ;  $ }  $ int main ( ) {  $ ~cin >> n >> m ;  $ ~string s ;  $ ~for ( int i = 1 ; i <= n ; ++ i ) {  $ ~~cin >> s ;  $ ~~for ( int j = 1 ; j <= m ; ++ j ) { dp [ i ] [ j ] = dp [ i - 1 ] [ j ] + dp [ i ] [ j - 1 ] - dp [ i - 1 ] [ j - 1 ] + s [ j - 1 ] - '0' ; }  $ ~}  $ ~int res = n * m ;  $ ~for ( int k = 2 ; k <= min ( n , m ) ; ++ k ) { res = min ( res , cntt ( k ) ) ; }  $ ~cout << res << '\n' ;  $ ~return 0 ;  $ }
const int MAXN = 2500 , MAXM = 2500 ;  $ int S [ MAXN + 1 ] [ MAXM + 1 ] ;  $ int main ( ) {  $ ~int N , M ;  $ ~cin >> N >> M ;  $ ~for ( int i = 1 ; i <= N ; ++ i ) {  $ ~~string R ;  $ ~~cin >> R ;  $ ~~for ( int j = 1 ; j <= M ; ++ j ) S [ i ] [ j ] = ( R [ j - 1 ] - '0' ) + S [ i - 1 ] [ j ] + S [ i ] [ j - 1 ] - S [ i - 1 ] [ j - 1 ] ;  $ ~}  $ ~int ans = INT_MAX ;  $ ~for ( int k = 2 ; k <= N || k <= M ; ++ k ) {  $ ~~int aux = 0 ;  $ ~~for ( int i = 1 ; i <= N ; i += k )  $ ~~~for ( int j = 1 ; j <= M ; j += k ) {  $ ~~~~int ii = min ( N , i + k - 1 ) , jj = min ( M , j + k - 1 ) ;  $ ~~~~int q = S [ ii ] [ jj ] - S [ ii ] [ j - 1 ] - S [ i - 1 ] [ jj ] + S [ i - 1 ] [ j - 1 ] ;  $ ~~~~aux += min ( q , k * k - q ) ;  $ ~~~}  $ ~~ans = min ( ans , aux ) ;  $ ~}  $ ~cout << ans << '\n' ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~int n ;  $ ~cin >> n ;  $ ~if ( n == 2 )  $ ~~cout << "2\n" ;  $ ~else  $ ~~cout << "1\n" ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~int n ;  $ ~while ( cin >> n ) {  $ ~~if ( n == 2 ) {  $ ~~~cout << 2 << endl ;  $ ~~} else {  $ ~~~cout << 1 << endl ;  $ ~~}  $ ~}  $ ~return 0 ;  $ }
int main ( ) {  $ ~int n ;  $ ~cin >> n ;  $ ~if ( n == 2 )  $ ~~cout << "2" << endl ;  $ ~else  $ ~~cout << "1" << endl ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~int n ;  $ ~cin >> n ;  $ ~if ( n == 2 ) {  $ ~~cout << n << endl ;  $ ~} else {  $ ~~cout << 1 << endl ;  $ ~}  $ }
int main ( ) {  $ ~int l , r , a , b , d , i , n ;  $ ~cin >> n ;  $ ~cout << ( ( n == 2 ) ? 2 : 1 ) << "\n" ;  $ ~return 0 ;  $ }
int n ;  $ int main ( ) {  $ ~cin >> n ;  $ ~if ( n == 2 )  $ ~~cout << 2 << endl ;  $ ~else  $ ~~cout << 1 << endl ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~int n ;  $ ~cin >> n ;  $ ~if ( n == 2 )  $ ~~cout << 2 << endl ;  $ ~else  $ ~~cout << 1 << endl ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~int v ;  $ ~cin >> v ;  $ ~if ( v == 2 )  $ ~~cout << 2 << endl ;  $ ~else  $ ~~cout << 1 << endl ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~int n ;  $ ~cin >> n ;  $ ~if ( n != 2 )  $ ~~cout << "1" << endl ;  $ ~else  $ ~~cout << "2" << endl ;  $ }
int main ( ) {  $ ~long int n , x , v ;  $ ~cin >> v ;  $ ~n = v ;  $ ~if ( n > 2 ) {  $ ~~n = 1 ;  $ ~} else if ( n == 2 ) {  $ ~~n = 2 ;  $ ~}  $ ~cout << n << endl ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~int n ;  $ ~cin >> n ;  $ ~if ( n == 1 || n == 2 ) {  $ ~~cout << n << endl ;  $ ~} else  $ ~~cout << 1 << endl ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~int n ;  $ ~cin >> n ;  $ ~if ( n == 2 )  $ ~~cout << "2" << endl ;  $ ~else  $ ~~cout << "1" << endl ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~long long n ;  $ ~while ( cin >> n ) {  $ ~~if ( n == 2 ) {  $ ~~~cout << "2" << endl ;  $ ~~} else {  $ ~~~cout << "1" << endl ;  $ ~~}  $ ~}  $ ~return 0 ;  $ }
int main ( ) {  $ ~int n ;  $ ~cin >> n ;  $ ~if ( n == 2 ) {  $ ~~cout << "2\n" ;  $ ~} else  $ ~~cout << "1\n" ;  $ }
int main ( ) {  $ ~int n ;  $ ~cin >> n ;  $ ~if ( n == 2 )  $ ~~cout << n << endl ;  $ ~else  $ ~~cout << "1\n" ;  $ ~return 0 ;  $ }
int main ( ) {  $ ~int n ;  $ ~cin >> n ;  $ ~int k = n - 1 ;  $ ~if ( n == 2 )  $ ~~cout << 2 << endl ;  $ ~else  $ ~~cout << n - k << endl ;  $ }
int main ( ) {  $ ~int n ;  $ ~cin >> n ;  $ ~if ( n == 2 )  $ ~~cout << "2" << endl ;  $ ~else  $ ~~cout << "1" << endl ;  $ ~return 0 ;  $ }
const int N = 1e5 + 50 ;  $ const int oo = 1e9 ;  $ const int mod = 1e9 + 7 ;  $ string a [ 2001 ] , b [ 201 ] , f1 [ 2001 ] , f2 [ 2001 ] ;  $ int main ( ) {  $ ~int n , m ;  $ ~cin >> n >> m ;  $ ~for ( int i = 0 ; i < n ; i ++ ) cin >> a [ i ] ;  $ ~for ( int i = 0 ; i < m ; i ++ ) cin >> b [ i ] ;  $ ~for ( int i = 0 ; i + m <= n ; i ++ ) {  $ ~~f1 [ i ] = "" ;  $ ~~for ( int j = 0 ; j < m ; j ++ ) f1 [ i ] += a [ i + j ] ;  $ ~}  $ ~for ( int i = 0 ; i + m <= n ; i ++ ) {  $ ~~f2 [ i ] = "" ;  $ ~~for ( int j = 0 ; j < m ; j ++ ) { f2 [ i ] += b [ j ] . substr ( i , m ) ; }  $ ~}  $ ~for ( int i = 0 ; i + m <= n ; i ++ ) {  $ ~~for ( int j = 0 ; j + m <= n ; j ++ ) {  $ ~~~if ( f1 [ i ] == f2 [ j ] ) {  $ ~~~~cout << i + 1 << ' ' << j + 1 << endl ;  $ ~~~~return 0 ;  $ ~~~}  $ ~~}  $ ~}  $ }
const int maxn = 2000 + 5 ;  $ string s1 [ maxn ] , s2 [ maxn ] ;  $ int main ( ) {  $ ~int n , m ;  $ ~cin >> n >> m ;  $ ~for ( int i = 0 ; i < n ; i ++ ) cin >> s1 [ i ] ;  $ ~for ( int i = 0 ; i < m ; i ++ ) cin >> s2 [ i ] ;  $ ~for ( int i = 0 ; i <= n - m ; i ++ )  $ ~~for ( int j = 0 ; j <= n - m ; j ++ ) {  $ ~~~bool flag = true ;  $ ~~~for ( int p = 0 ; p < m && flag ; p ++ ) {  $ ~~~~if ( memcmp ( & s1 [ i + p ] [ 0 ] , & s2 [ p ] [ j ] , m ) ) flag = false ;  $ ~~~}  $ ~~~if ( flag ) {  $ ~~~~cout << i + 1 << " " << j + 1 << "\n" ;  $ ~~~~return 0 ;  $ ~~~}  $ ~~}  $ ~return 0 ;  $ }
int main ( ) {  $ ~int n , m ;  $ ~cin >> n >> m ;  $ ~vector < string > A ( n ) , B ( m ) ;  $ ~for ( auto & s : A ) cin >> s ;  $ ~for ( auto & s : B ) cin >> s ;  $ ~for ( int i = 0 ; i < n ; i ++ ) {  $ ~~int pos = - 1 ;  $ ~~while ( pos + 1 < n ) {  $ ~~~bool ok = 1 ;  $ ~~~pos = B [ 0 ] . find ( A [ i ] , pos + 1 ) ;  $ ~~~if ( pos == - 1 ) break ;  $ ~~~for ( int k = m - 1 ; k >= 0 && ok ; k -- )  $ ~~~~if ( A [ i + k ] != B [ k ] . substr ( pos , m ) ) ok = 0 ;  $ ~~~if ( ok ) return cout << i + 1 << " " << pos + 1 << "\n" , 0 ;  $ ~~}  $ ~}  $ ~cout << - 1 ;  $ }
char mp [ 2 ] [ 2001 ] [ 2001 ] ;  $ int main ( ) {  $ ~int n , m ;  $ ~cin >> n >> m ;  $ ~for ( int i = 0 ; i < n ; i ++ ) cin >> mp [ 0 ] [ i ] ;  $ ~for ( int i = 0 ; i < m ; i ++ ) cin >> mp [ 1 ] [ i ] ;  $ ~for ( int i = 0 ; i <= n - m ; i ++ ) {  $ ~~for ( int j = 0 ; j <= n - m ; j ++ ) {  $ ~~~int ok = 1 ;  $ ~~~for ( int p = 0 ; p < m && ok == 1 ; p ++ ) { ok &= ! memcmp ( & mp [ 0 ] [ i + p ] [ 0 ] , & mp [ 1 ] [ p ] [ j ] , m ) ; }  $ ~~~if ( ok ) {  $ ~~~~cout << i + 1 << ' ' << j + 1 << endl ;  $ ~~~~return 0 ;  $ ~~~}  $ ~~}  $ ~}  $ ~return 0 ;  $ }
const int N = 1e5 + 50 ;  $ const int oo = 1e9 ;  $ const int mod = 1e9 + 7 ;  $ string a [ 2001 ] , b [ 201 ] , f1 [ 2001 ] , f2 [ 2001 ] ;  $ int main ( ) {  $ ~int n , m ;  $ ~cin >> n >> m ;  $ ~for ( int i = 0 ; i < n ; i ++ ) cin >> a [ i ] ;  $ ~for ( int i = 0 ; i < m ; i ++ ) cin >> b [ i ] ;  $ ~for ( int i = 0 ; i + m <= n ; i ++ ) {  $ ~~f1 [ i ] = "" ;  $ ~~for ( int j = 0 ; j < m ; j ++ ) f1 [ i ] += a [ i + j ] ;  $ ~}  $ ~for ( int i = 0 ; i + m <= n ; i ++ ) {  $ ~~f2 [ i ] = "" ;  $ ~~for ( int j = 0 ; j < m ; j ++ ) { f2 [ i ] += b [ j ] . substr ( i , m ) ; }  $ ~}  $ ~for ( int i = 0 ; i + m <= n ; i ++ ) {  $ ~~for ( int j = 0 ; j + m <= n ; j ++ ) {  $ ~~~if ( f1 [ i ] == f2 [ j ] ) {  $ ~~~~cout << i + 1 << ' ' << j + 1 << endl ;  $ ~~~~return 0 ;  $ ~~~}  $ ~~}  $ ~}  $ }
char mp [ 2 ] [ 2001 ] [ 2001 ] ;  $ int main ( ) {  $ ~int n , m ;  $ ~cin >> n >> m ;  $ ~for ( int i = 0 ; i < n ; i ++ ) cin >> mp [ 0 ] [ i ] ;  $ ~for ( int i = 0 ; i < m ; i ++ ) cin >> mp [ 1 ] [ i ] ;  $ ~int i , j ;  $ ~for ( i = 0 ; i <= n - m ; i ++ ) {  $ ~~for ( j = 0 ; j <= n - m ; j ++ ) {  $ ~~~bool ok = true ;  $ ~~~for ( int p = 0 ; p < m && ok ; p ++ ) ok &= ! memcmp ( & mp [ 0 ] [ i + p ] [ 0 ] , & mp [ 1 ] [ p ] [ j ] , m ) ;  $ ~~~if ( ok ) {  $ ~~~~cout << i + 1 << ' ' << j + 1 << endl ;  $ ~~~~return 0 ;  $ ~~~}  $ ~~}  $ ~}  $ }
int main ( ) {  $ ~int n , m ;  $ ~cin >> n >> m ;  $ ~vector < string > v1 ( 2002 ) , v2 ( 202 ) , v3 ( 2002 ) , v4 ( 2002 ) ;  $ ~for ( int i = 0 ; i < n ; i ++ ) cin >> v1 [ i ] ;  $ ~for ( int i = 0 ; i < m ; i ++ ) cin >> v2 [ i ] ;  $ ~for ( int i = 0 ; i + m <= n ; i ++ )  $ ~~for ( int j = 0 ; j < m ; j ++ ) v3 [ i ] += v1 [ i + j ] ;  $ ~for ( int i = 0 ; i + m <= n ; i ++ )  $ ~~for ( int j = 0 ; j < m ; j ++ ) v4 [ i ] += v2 [ j ] . substr ( i , m ) ;  $ ~for ( int i = 0 ; i + m <= n ; i ++ )  $ ~~for ( int j = 0 ; j + m <= n ; j ++ )  $ ~~~if ( v3 [ i ] == v4 [ j ] ) {  $ ~~~~cout << i + 1 << ' ' << j + 1 << endl ;  $ ~~~~return 0 ;  $ ~~~}  $ ~return 0 ;  $ }
int main ( ) {  $ ~int t ;  $ ~cin >> t ;  $ ~while ( t -- ) {  $ ~~int n , r ;  $ ~~cin >> n >> r ;  $ ~~for ( int i = 1 , x ; i < n ; ++ i ) cin >> x , r -= x ;  $ ~~cout << ( r % n + n ) % n + 1 << '\n' ;  $ ~}  $ }
int main ( ) {  $ ~int t , n , r , k ;  $ ~int q [ 5 ] ;  $ ~cin >> t ;  $ ~for ( int i = 0 ; i < t ; i ++ ) {  $ ~~k = 0 ;  $ ~~cin >> n >> r ;  $ ~~for ( int j = 0 ; j < n - 1 ; j ++ ) {  $ ~~~cin >> q [ j ] ;  $ ~~~k = k + q [ j ] ;  $ ~~}  $ ~~cout << ( ( r - k ) % n + n ) % n + 1 << endl ;  $ ~}  $ ~return 0 ;  $ }
int main ( ) {  $ ~int test ;  $ ~cin >> test ;  $ ~while ( test -- ) {  $ ~~int n , r ;  $ ~~cin >> n >> r ;  $ ~~int sum = r ;  $ ~~for ( int i = 0 ; i < n - 1 ; ++ i ) {  $ ~~~int val ;  $ ~~~cin >> val ;  $ ~~~sum -= val ;  $ ~~}  $ ~~sum = ( sum % n + n ) % n ;  $ ~~cout << ( sum + 1 ) << "\n" ;  $ ~}  $ ~return 0 ;  $ }
int main ( ) {  $ ~int n ;  $ ~cin >> n ;  $ ~while ( n -- ) {  $ ~~unsigned int a , b , sum = 0 ;  $ ~~cin >> a >> b ;  $ ~~for ( int i = 1 ; i < a ; ++ i ) {  $ ~~~int c ;  $ ~~~cin >> c ;  $ ~~~sum += c ;  $ ~~}  $ ~~sum %= a ;  $ ~~sum = ( a + b - sum ) % a ;  $ ~~cout << sum + 1 << endl ;  $ ~}  $ ~return 0 ;  $ }
int nums [ 5 ] , r , n , T ;  $ int main ( ) {  $ ~cin >> T ;  $ ~while ( T -- ) {  $ ~~cin >> n >> r ;  $ ~~int sum = 0 ;  $ ~~for ( int c = 1 ; c < n ; c ++ ) {  $ ~~~int i ;  $ ~~~cin >> i ;  $ ~~~sum -= i ;  $ ~~}  $ ~~sum += r ;  $ ~~sum += n * 1000 ;  $ ~~cout << ( sum % n + 1 ) << endl ;  $ ~}  $ }
long long no [ 300001 ] , appr [ 300001 ] , st [ 300001 ] ;  $ vector < long long > app [ 300001 ] ;  $ int main ( ) {  $ ~long long i , j , n , m , k , cnt = 0 , ans = 0 , t = 1 ;  $ ~cin >> n >> t ;  $ ~vector < long long > v ;  $ ~long long pos = 0 ;  $ ~while ( t -- ) {  $ ~~cin >> m >> k ;  $ ~~if ( m == 1 ) {  $ ~~~no [ cnt ] = k ;  $ ~~~app [ k ] . push_back ( cnt ) ;  $ ~~~st [ cnt ] = 0 ;  $ ~~~v . push_back ( cnt ) ;  $ ~~~cnt ++ ;  $ ~~~ans ++ ;  $ ~~} else if ( m == 2 ) {  $ ~~~for ( i = appr [ k ] ; i < app [ k ] . size ( ) ; i ++ ) {  $ ~~~~if ( st [ app [ k ] [ i ] ] == 0 ) ans -- ;  $ ~~~~st [ app [ k ] [ i ] ] = 1 ;  $ ~~~}  $ ~~~appr [ k ] = app [ k ] . size ( ) ;  $ ~~} else {  $ ~~~for ( i = pos ; i < k ; i ++ ) {  $ ~~~~if ( st [ v [ i ] ] == 0 ) ans -- ;  $ ~~~~st [ v [ i ] ] = 1 ;  $ ~~~}  $ ~~~pos = max ( pos , k ) ;  $ ~~}  $ ~~cout << ans << '\n' ;  $ ~}  $ ~return 0 ;  $ }
const int MAXN = 3 * 1e5 + 5 ;  $ int N , M , S , x , y , j , z , r ;  $ vector < int > V [ MAXN ] ;  $ int v [ MAXN ] ;  $ bool R [ MAXN ] ;  $ int main ( ) {  $ ~cin >> N >> M ;  $ ~while ( M -- ) {  $ ~~cin >> x >> y ;  $ ~~if ( x == 1 ) {  $ ~~~V [ y ] . push_back ( j ) ;  $ ~~~j ++ ;  $ ~~~S ++ ;  $ ~~}  $ ~~if ( x == 2 ) {  $ ~~~z = ( int ) V [ y ] . size ( ) ;  $ ~~~for ( int i = v [ y ] ; i < z ; i ++ ) {  $ ~~~~if ( ! R [ V [ y ] [ i ] ] ) S -- ;  $ ~~~~R [ V [ y ] [ i ] ] = true ;  $ ~~~}  $ ~~~v [ y ] = z ;  $ ~~}  $ ~~if ( x == 3 ) {  $ ~~~for ( int i = r ; i < y ; i ++ ) {  $ ~~~~if ( ! R [ i ] ) S -- ;  $ ~~~~R [ i ] = true ;  $ ~~~}  $ ~~~r = max ( r , y ) ;  $ ~~}  $ ~~cout << S << endl ;  $ ~}  $ }
long long m , a [ 200000 ] ;  $ pair < long long , long long > b [ 200000 ] ;  $ long long cnt [ 200000 ] ;  $ int main ( ) {  $ ~cin >> m ;  $ ~for ( int i = 0 ; i < m ; ++ i ) cin >> a [ i ] ;  $ ~for ( int i = 0 ; i < m ; ++ i ) {  $ ~~cin >> b [ i ] . first ;  $ ~~b [ i ] . second = i ;  $ ~}  $ ~sort ( a , a + m ) ;  $ ~sort ( b , b + m ) ;  $ ~reverse ( b , b + m ) ;  $ ~for ( int i = 0 ; i < m ; ++ i ) { cnt [ b [ i ] . second ] = a [ i ] ; }  $ ~for ( int i = 0 ; i < m ; ++ i ) cout << cnt [ i ] << " \n" [ i == m - 1 ] ;  $ ~return 0 ;  $ }
